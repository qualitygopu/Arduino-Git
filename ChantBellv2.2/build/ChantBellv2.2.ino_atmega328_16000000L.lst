
e:\Arduino\Arduino Git\ChantBellv2.2\build/ChantBellv2.2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__dtors_end>
       4:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
       8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
       c:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_3>
      10:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_3>
      14:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_3>
      18:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      1c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      20:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      24:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      28:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      2c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      30:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      34:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      38:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      3c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      40:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_16>
      44:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      48:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      4c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      50:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      54:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      58:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      5c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      60:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__vector_24>
      64:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 56       	subi	r20, 0x65	; 101
      6a:	45 4e       	sbci	r20, 0xE5	; 229
      6c:	49 4e       	sbci	r20, 0xE9	; 233
      6e:	47 20       	and	r4, r7
      70:	53 4f       	sbci	r21, 0xF3	; 243
      72:	4e 47       	sbci	r20, 0x7E	; 126
      74:	20 4e       	sbci	r18, 0xE0	; 224
      76:	6f 2e       	mov	r6, r31
	...

00000079 <sampleMenu_2_7_3>:
      79:	45 56 45 4e 49 4e 47 20 53 4f 4e 47 20 54 49 4d     EVENING SONG TIM
      89:	45 00                                               E.

0000008b <sampleMenu_2_7_2>:
      8b:	4d 4f 52 4e 49 4e 47 20 53 4f 4e 47 20 4e 6f 2e     MORNING SONG No.
	...

0000009c <sampleMenu_2_7_1>:
      9c:	4d 4f 52 4e 49 4e 47 20 53 4f 4e 47 20 54 49 4d     MORNING SONG TIM
      ac:	45 00                                               E.

000000ae <sampleMenu_2_6_2>:
      ae:	32 20 50 4c 41 59 00                                2 PLAY.

000000b5 <sampleMenu_2_6_1>:
      b5:	31 20 53 45 4c 45 43 54 20 54 49 4d 45 00           1 SELECT TIME.

000000c3 <sampleMenu_2_9>:
      c3:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

000000d1 <sampleMenu_List_2_7>:
      d1:	0d 9c 00 00 00 00 0f 8b 00 00 00 00 0e 79 00 00     .............y..
      e1:	00 00 10 68 00 00 00 00 00 24 01 00 00 00           ...h.....$....

000000ef <sampleMenu_2_7>:
      ef:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

000000fc <sampleMenu_List_2_6>:
      fc:	0a b5 00 00 00 00 0b ae 00 00 00 00 00 24 01 00     .............$..
	...

0000010e <sampleMenu_2_6>:
     10e:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

00000118 <sampleMenu_2_3>:
     118:	53 4f 4e 47 31 20 43 4f 55 4e 54 00                 SONG1 COUNT.

00000124 <sampleMenu_back>:
     124:	42 41 43 4b 00                                      BACK.

00000129 <configMenu_2>:
     129:	53 45 54 20 59 45 41 52 00                          SET YEAR.

00000132 <configMenu_1>:
     132:	53 45 54 20 53 45 52 49 41 4c 00                    SET SERIAL.

0000013d <sampleMenu_2_5>:
     13d:	56 4f 4c 55 4d 45 00                                VOLUME.

00000144 <sampleMenu_2_8>:
     144:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000150 <sampleMenu_2_2>:
     150:	41 4c 41 52 4d 20 45 4e 44 20 54 49 4d 45 00        ALARM END TIME.

0000015f <sampleMenu_2_1>:
     15f:	41 4c 41 52 4d 20 53 54 41 52 54 20 54 49 4d 45     ALARM START TIME
	...

00000170 <sampleMenu_1_2>:
     170:	53 45 54 20 54 49 4d 45 00                          SET TIME.

00000179 <sampleMenu_1_1>:
     179:	53 45 54 20 44 41 54 45 00                          SET DATE.

00000182 <sampleMenu_exit>:
     182:	45 58 49 54 00                                      EXIT.

00000187 <sampleMenu_List_2>:
     187:	05 5f 01 00 00 00 06 50 01 00 00 00 07 18 01 00     ._.....P........
     197:	00 00 08 3d 01 00 00 00 09 0e 01 fc 00 03 0c ef     ...=............
     1a7:	00 d1 00 05 11 44 01 00 00 00 13 c3 00 00 00 00     .....D..........
     1b7:	00 24 01 00 00 00                                   .$....

000001bd <sampleMenu_2>:
     1bd:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

000001ca <sampleMenu_List_1>:
     1ca:	02 79 01 00 00 00 03 70 01 00 00 00 00 24 01 00     .y.....p.....$..
	...

000001dc <sampleMenu_1>:
     1dc:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

000001ea <port_to_mode_PGM>:
     1ea:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001f4 <digital_pin_to_timer_PGM>:
     1f4:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     204:	00 00 00 00 00 00 00                                .......

0000020b <configMenu_Root>:
     20b:	15 32 01 00 00 00 14 29 01 00 00 00 00 82 01 00     .2.....)........
	...

0000021d <normalMenu_Root>:
     21d:	02 79 01 00 00 00 03 70 01 00 00 00 05 5f 01 00     .y.....p....._..
     22d:	00 00 06 50 01 00 00 00 11 44 01 00 00 00 08 3d     ...P.....D.....=
     23d:	01 00 00 00 00 82 01 00 00 00                       ..........

00000247 <sampleMenu_Root>:
     247:	01 dc 01 ca 01 03 04 bd 01 87 01 09 00 82 01 00     ................
	...

00000259 <setup::__c>:
     259:	45 52 52 20 30 33 00                                ERR 03.

00000260 <setup::__c>:
     260:	45 52 52 20 30 32 00                                ERR 02.

00000267 <setup::__c>:
     267:	45 52 52 20 30 31 00                                ERR 01.

0000026e <setup::__c>:
     26e:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

0000027f <setup::__c>:
     27f:	51 54 52 4f 4e 00                                   QTRON.

00000285 <processMenuCommand(unsigned char)::__c>:
     285:	20 20 00                                              .

00000288 <processMenuCommand(unsigned char)::__c>:
     288:	20 20 00                                              .

0000028b <loop::__c>:
     28b:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

0000029c <daysInMonth>:
     29c:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000002a7 <port_to_input_PGM>:
     2a7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002b1 <port_to_output_PGM>:
     2b1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002bb <digital_pin_to_port_PGM>:
     2bb:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2cb:	03 03 03 03 02 02 03                                .......

000002d2 <digital_pin_to_bit_mask_PGM>:
     2d2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2e2:	04 08 10 20 40 80 40 00                             ... @.@.

000002ea <__ctors_start>:
__ctors_start():
     2ea:	99 10       	cpse	r9, r9

000002ec <__ctors_end>:
__dtors_start():
     2ec:	9e 1e       	adc	r9, r30

000002ee <__dtors_end>:
__dtors_end():
     2ee:	11 24       	eor	r1, r1
     2f0:	1f be       	out	0x3f, r1	; 63
     2f2:	cf ef       	ldi	r28, 0xFF	; 255
     2f4:	d8 e0       	ldi	r29, 0x08	; 8
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	cd bf       	out	0x3d, r28	; 61

000002fa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2fa:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2fe:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     300:	ec e9       	ldi	r30, 0x9C	; 156
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     302:	f5 e4       	ldi	r31, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     304:	02 c0       	rjmp	.+4      	; 0x30a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     306:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     308:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     30a:	a0 34       	cpi	r26, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     30c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     30e:	d9 f7       	brne	.-10     	; 0x306 <__do_copy_data+0xc>

00000310 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     310:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     312:	a0 e4       	ldi	r26, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     314:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     31a:	a6 3c       	cpi	r26, 0xC6	; 198
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     31c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>

00000320 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     320:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     322:	c6 e7       	ldi	r28, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     324:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     326:	04 c0       	rjmp	.+8      	; 0x330 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     328:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     32a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     32c:	0e 94 9f 20 	call	0x413e	; 0x413e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     330:	c5 37       	cpi	r28, 0x75	; 117
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     332:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     334:	c9 f7       	brne	.-14     	; 0x328 <__do_global_ctors+0x8>
     336:	0e 94 ae 11 	call	0x235c	; 0x235c <main>
     33a:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__do_global_dtors>

0000033e <__bad_interrupt>:
__vector_22():
     33e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000342 <MenuManager::currentItemHasChildren() [clone .constprop.93]>:
currentItemHasChildren():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     342:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <Menu1+0x6>
     346:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <Menu1+0x3>
     34a:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <Menu1+0x4>
     34e:	96 e0       	ldi	r25, 0x06	; 6
     350:	89 9f       	mul	r24, r25
     352:	e0 0d       	add	r30, r0
     354:	f1 1d       	adc	r31, r1
     356:	11 24       	eor	r1, r1
     358:	35 96       	adiw	r30, 0x05	; 5
     35a:	e4 91       	lpm	r30, Z
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	e1 11       	cpse	r30, r1
     360:	01 c0       	rjmp	.+2      	; 0x364 <MenuManager::currentItemHasChildren() [clone .constprop.93]+0x22>
     362:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:116
}
     364:	08 95       	ret

00000366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>:
getCurrentItemCmdId():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     366:	eb ef       	ldi	r30, 0xFB	; 251
     368:	f3 e0       	ldi	r31, 0x03	; 3
     36a:	86 81       	ldd	r24, Z+6	; 0x06
     36c:	03 80       	ldd	r0, Z+3	; 0x03
     36e:	f4 81       	ldd	r31, Z+4	; 0x04
     370:	e0 2d       	mov	r30, r0
     372:	96 e0       	ldi	r25, 0x06	; 6
     374:	89 9f       	mul	r24, r25
     376:	e0 0d       	add	r30, r0
     378:	f1 1d       	adc	r31, r1
     37a:	11 24       	eor	r1, r1
     37c:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:60
}
     37e:	08 95       	ret

00000380 <TwoWire::endTransmission() [clone .constprop.83]>:
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     380:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     384:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     386:	21 32       	cpi	r18, 0x21	; 33
     388:	08 f0       	brcs	.+2      	; 0x38c <TwoWire::endTransmission() [clone .constprop.83]+0xc>
     38a:	44 c0       	rjmp	.+136    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     38c:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <twi_state>
     390:	81 11       	cpse	r24, r1
     392:	fc cf       	rjmp	.-8      	; 0x38c <TwoWire::endTransmission() [clone .constprop.83]+0xc>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     394:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
     3a6:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     3aa:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     3ae:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <twi_masterBufferLength>
     3b2:	a7 eb       	ldi	r26, 0xB7	; 183
     3b4:	b3 e0       	ldi	r27, 0x03	; 3
     3b6:	e0 e9       	ldi	r30, 0x90	; 144
     3b8:	f3 e0       	ldi	r31, 0x03	; 3
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     3ba:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     3bc:	29 13       	cpse	r18, r25
     3be:	31 c0       	rjmp	.+98     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     3c0:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     3c4:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_slarw>
     3c8:	88 0f       	add	r24, r24
     3ca:	89 2b       	or	r24, r25
     3cc:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     3d0:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_inRepStart>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	49 f5       	brne	.+82     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     3d8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     3dc:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_slarw>
     3e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     3e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     3e8:	83 fd       	sbrc	r24, 3
     3ea:	f8 cf       	rjmp	.-16     	; 0x3dc <TwoWire::endTransmission() [clone .constprop.83]+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     3ec:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     3ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     3f2:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <twi_state>
     3f6:	82 30       	cpi	r24, 0x02	; 2
     3f8:	e1 f3       	breq	.-8      	; 0x3f2 <TwoWire::endTransmission() [clone .constprop.83]+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     3fa:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
     3fe:	8f 3f       	cpi	r24, 0xFF	; 255
     400:	b1 f0       	breq	.+44     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     402:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
     406:	80 32       	cpi	r24, 0x20	; 32
     408:	a1 f0       	breq	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     40a:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
     40e:	80 33       	cpi	r24, 0x30	; 48
     410:	91 f0       	breq	.+36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     412:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     414:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     418:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     41c:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:191
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     420:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     422:	3d 91       	ld	r19, X+
     424:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     426:	9f 5f       	subi	r25, 0xFF	; 255
     428:	c9 cf       	rjmp	.-110    	; 0x3bc <TwoWire::endTransmission() [clone .constprop.83]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     42a:	85 ee       	ldi	r24, 0xE5	; 229
     42c:	e0 cf       	rjmp	.-64     	; 0x3ee <TwoWire::endTransmission() [clone .constprop.83]+0x6e>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	f1 cf       	rjmp	.-30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	ef cf       	rjmp	.-34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	ed cf       	rjmp	.-38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

0000043a <TwoWire::onRequestService()>:
onRequestService():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     43a:	08 95       	ret

0000043c <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     43c:	08 95       	ret

0000043e <DateTime::dayOfTheWeek() const [clone .constprop.20]>:
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:578
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     43e:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <bell+0x1>
     442:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <bell>
     446:	49 2f       	mov	r20, r25
     448:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:134
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     44a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <bell+0x2>
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	ec e9       	ldi	r30, 0x9C	; 156
     454:	f2 e0       	ldi	r31, 0x02	; 2
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:135
  for (uint8_t i = 1; i < m; ++i)
     456:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     458:	86 17       	cp	r24, r22
     45a:	30 f4       	brcc	.+12     	; 0x468 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:136
    days += pgm_read_byte(daysInMonth + i - 1);
     45c:	74 91       	lpm	r23, Z
     45e:	27 0f       	add	r18, r23
     460:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:135
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	f8 cf       	rjmp	.-16     	; 0x458 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:137
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     468:	63 30       	cpi	r22, 0x03	; 3
     46a:	20 f0       	brcs	.+8      	; 0x474 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x36>
     46c:	93 70       	andi	r25, 0x03	; 3
     46e:	11 f4       	brne	.+4      	; 0x474 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:138
    ++days;
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:139
  return days + 365 * y + (y + 3) / 4 - 1;
     474:	6d e6       	ldi	r22, 0x6D	; 109
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	46 9f       	mul	r20, r22
     47a:	c0 01       	movw	r24, r0
     47c:	47 9f       	mul	r20, r23
     47e:	90 0d       	add	r25, r0
     480:	56 9f       	mul	r21, r22
     482:	90 0d       	add	r25, r0
     484:	11 24       	eor	r1, r1
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:579
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     486:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:139
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     488:	4d 5f       	subi	r20, 0xFD	; 253
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	56 95       	lsr	r21
     48e:	47 95       	ror	r20
     490:	56 95       	lsr	r21
     492:	47 95       	ror	r20
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:579
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     494:	84 0f       	add	r24, r20
     496:	95 1f       	adc	r25, r21
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	67 e0       	ldi	r22, 0x07	; 7
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	0e 94 77 20 	call	0x40ee	; 0x40ee <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:580
}
     4a4:	08 95       	ret

000004a6 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	6c 01       	movw	r12, r24
     4bc:	7b 01       	movw	r14, r22
     4be:	8b 01       	movw	r16, r22
     4c0:	04 0f       	add	r16, r20
     4c2:	15 1f       	adc	r17, r21
     4c4:	eb 01       	movw	r28, r22
     4c6:	5e 01       	movw	r10, r28
     4c8:	ae 18       	sub	r10, r14
     4ca:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4cc:	c0 17       	cp	r28, r16
     4ce:	d1 07       	cpc	r29, r17
     4d0:	59 f0       	breq	.+22     	; 0x4e8 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4d2:	69 91       	ld	r22, Y+
     4d4:	d6 01       	movw	r26, r12
     4d6:	ed 91       	ld	r30, X+
     4d8:	fc 91       	ld	r31, X
     4da:	01 90       	ld	r0, Z+
     4dc:	f0 81       	ld	r31, Z
     4de:	e0 2d       	mov	r30, r0
     4e0:	c6 01       	movw	r24, r12
     4e2:	09 95       	icall
     4e4:	89 2b       	or	r24, r25
     4e6:	79 f7       	brne	.-34     	; 0x4c6 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     4e8:	c5 01       	movw	r24, r10
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	08 95       	ret

00000500 <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     500:	84 30       	cpi	r24, 0x04	; 4
     502:	81 f0       	breq	.+32     	; 0x524 <turnOffPWM+0x24>
     504:	28 f4       	brcc	.+10     	; 0x510 <turnOffPWM+0x10>
     506:	82 30       	cpi	r24, 0x02	; 2
     508:	e9 f0       	breq	.+58     	; 0x544 <turnOffPWM+0x44>
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	f9 f0       	breq	.+62     	; 0x54c <turnOffPWM+0x4c>
     50e:	08 95       	ret
     510:	88 30       	cpi	r24, 0x08	; 8
     512:	71 f0       	breq	.+28     	; 0x530 <turnOffPWM+0x30>
     514:	89 30       	cpi	r24, 0x09	; 9
     516:	91 f0       	breq	.+36     	; 0x53c <turnOffPWM+0x3c>
     518:	85 30       	cpi	r24, 0x05	; 5
     51a:	b9 f4       	brne	.+46     	; 0x54a <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     51c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     520:	8f 7d       	andi	r24, 0xDF	; 223
     522:	03 c0       	rjmp	.+6      	; 0x52a <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     524:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     528:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     52a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     52e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     530:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     534:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     536:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     53a:	08 95       	ret
     53c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     540:	8f 7d       	andi	r24, 0xDF	; 223
     542:	f9 cf       	rjmp	.-14     	; 0x536 <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     544:	84 b5       	in	r24, 0x24	; 36
     546:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     548:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     54a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     54c:	84 b5       	in	r24, 0x24	; 36
     54e:	8f 7d       	andi	r24, 0xDF	; 223
     550:	fb cf       	rjmp	.-10     	; 0x548 <turnOffPWM+0x48>

00000552 <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     556:	28 2f       	mov	r18, r24
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	ec 50       	subi	r30, 0x0C	; 12
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     562:	f9 01       	movw	r30, r18
     564:	ee 52       	subi	r30, 0x2E	; 46
     566:	fd 4f       	sbci	r31, 0xFD	; 253
     568:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     56a:	f9 01       	movw	r30, r18
     56c:	e5 54       	subi	r30, 0x45	; 69
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     572:	cc 23       	and	r28, r28
     574:	a1 f0       	breq	.+40     	; 0x59e <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     576:	81 11       	cpse	r24, r1
     578:	0e 94 80 02 	call	0x500	; 0x500 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     57c:	ec 2f       	mov	r30, r28
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	e9 55       	subi	r30, 0x59	; 89
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	a5 91       	lpm	r26, Z+
     58a:	b4 91       	lpm	r27, Z
     58c:	ec 91       	ld	r30, X
     58e:	ed 23       	and	r30, r29
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	09 f4       	brne	.+2      	; 0x598 <digitalRead+0x46>
     596:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	fa cf       	rjmp	.-12     	; 0x598 <digitalRead+0x46>

000005a4 <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     5aa:	28 2f       	mov	r18, r24
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	ec 50       	subi	r30, 0x0C	; 12
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     5b6:	f9 01       	movw	r30, r18
     5b8:	ee 52       	subi	r30, 0x2E	; 46
     5ba:	fd 4f       	sbci	r31, 0xFD	; 253
     5bc:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     5be:	f9 01       	movw	r30, r18
     5c0:	e5 54       	subi	r30, 0x45	; 69
     5c2:	fd 4f       	sbci	r31, 0xFD	; 253
     5c4:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     5c6:	cc 23       	and	r28, r28
     5c8:	a9 f0       	breq	.+42     	; 0x5f4 <digitalWrite+0x50>
     5ca:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5cc:	81 11       	cpse	r24, r1
     5ce:	0e 94 80 02 	call	0x500	; 0x500 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     5d2:	ec 2f       	mov	r30, r28
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ef 54       	subi	r30, 0x4F	; 79
     5dc:	fd 4f       	sbci	r31, 0xFD	; 253
     5de:	a5 91       	lpm	r26, Z+
     5e0:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     5e2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     5e4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     5e6:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     5e8:	11 11       	cpse	r17, r1
     5ea:	08 c0       	rjmp	.+16     	; 0x5fc <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     5ec:	d0 95       	com	r29
     5ee:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     5f0:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     5f2:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     5fc:	de 2b       	or	r29, r30
     5fe:	f8 cf       	rjmp	.-16     	; 0x5f0 <digitalWrite+0x4c>

00000600 <TwoWire::begin() [clone .constprop.38]>:
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     600:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     604:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     608:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     60c:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     610:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     61a:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	82 e1       	ldi	r24, 0x12	; 18
     622:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	83 e1       	ldi	r24, 0x13	; 19
     62a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     62e:	e9 eb       	ldi	r30, 0xB9	; 185
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	8e 7f       	andi	r24, 0xFE	; 254
     636:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     638:	80 81       	ld	r24, Z
     63a:	8d 7f       	andi	r24, 0xFD	; 253
     63c:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     63e:	88 e4       	ldi	r24, 0x48	; 72
     640:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     644:	85 e4       	ldi	r24, 0x45	; 69
     646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     64a:	8d e1       	ldi	r24, 0x1D	; 29
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <twi_onSlaveTransmit+0x1>
     652:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     656:	8e e1       	ldi	r24, 0x1E	; 30
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <twi_onSlaveReceive+0x1>
     65e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <twi_onSlaveReceive>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     662:	08 95       	ret

00000664 <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	fc 01       	movw	r30, r24
     66c:	ee 52       	subi	r30, 0x2E	; 46
     66e:	fd 4f       	sbci	r31, 0xFD	; 253
     670:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     672:	85 54       	subi	r24, 0x45	; 69
     674:	9d 4f       	sbci	r25, 0xFD	; 253
     676:	fc 01       	movw	r30, r24
     678:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     67a:	88 23       	and	r24, r24
     67c:	c9 f0       	breq	.+50     	; 0x6b0 <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	fc 01       	movw	r30, r24
     686:	e6 51       	subi	r30, 0x16	; 22
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	a5 91       	lpm	r26, Z+
     68c:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     68e:	fc 01       	movw	r30, r24
     690:	ef 54       	subi	r30, 0x4F	; 79
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	c5 91       	lpm	r28, Z+
     696:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     698:	61 11       	cpse	r22, r1
     69a:	0d c0       	rjmp	.+26     	; 0x6b6 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     69c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     69e:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     6a0:	8c 91       	ld	r24, X
     6a2:	20 95       	com	r18
     6a4:	82 23       	and	r24, r18
     6a6:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     6a8:	88 81       	ld	r24, Y
     6aa:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     6ac:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     6ae:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     6b6:	62 30       	cpi	r22, 0x02	; 2
     6b8:	51 f4       	brne	.+20     	; 0x6ce <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     6ba:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     6bc:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     6be:	3c 91       	ld	r19, X
     6c0:	82 2f       	mov	r24, r18
     6c2:	80 95       	com	r24
     6c4:	83 23       	and	r24, r19
     6c6:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     6c8:	e8 81       	ld	r30, Y
     6ca:	2e 2b       	or	r18, r30
     6cc:	ef cf       	rjmp	.-34     	; 0x6ac <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     6ce:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     6d0:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     6d2:	ec 91       	ld	r30, X
     6d4:	2e 2b       	or	r18, r30
     6d6:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     6d8:	8f bf       	out	0x3f, r24	; 63
     6da:	ea cf       	rjmp	.-44     	; 0x6b0 <pinMode+0x4c>

000006dc <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	91 05       	cpc	r25, r1
     6e0:	39 f0       	breq	.+14     	; 0x6f0 <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     6ea:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     6f0:	08 95       	ret

000006f2 <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     6f2:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     6f4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     6f6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <timer0_overflow_count>
     6fa:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <timer0_overflow_count+0x1>
     6fe:	a0 91 cb 02 	lds	r26, 0x02CB	; 0x8002cb <timer0_overflow_count+0x2>
     702:	b0 91 cc 02 	lds	r27, 0x02CC	; 0x8002cc <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     706:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     708:	a8 9b       	sbis	0x15, 0	; 21
     70a:	05 c0       	rjmp	.+10     	; 0x716 <micros+0x24>
     70c:	2f 3f       	cpi	r18, 0xFF	; 255
     70e:	19 f0       	breq	.+6      	; 0x716 <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	a1 1d       	adc	r26, r1
     714:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     716:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     718:	ba 2f       	mov	r27, r26
     71a:	a9 2f       	mov	r26, r25
     71c:	98 2f       	mov	r25, r24
     71e:	88 27       	eor	r24, r24
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	62 0f       	add	r22, r18
     726:	71 1d       	adc	r23, r1
     728:	81 1d       	adc	r24, r1
     72a:	91 1d       	adc	r25, r1
     72c:	42 e0       	ldi	r20, 0x02	; 2
     72e:	66 0f       	add	r22, r22
     730:	77 1f       	adc	r23, r23
     732:	88 1f       	adc	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	4a 95       	dec	r20
     738:	d1 f7       	brne	.-12     	; 0x72e <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     73a:	08 95       	ret

0000073c <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <micros>
     754:	4b 01       	movw	r8, r22
     756:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     758:	c1 14       	cp	r12, r1
     75a:	d1 04       	cpc	r13, r1
     75c:	e1 04       	cpc	r14, r1
     75e:	f1 04       	cpc	r15, r1
     760:	b9 f0       	breq	.+46     	; 0x790 <delay+0x54>
     762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <micros>
     766:	68 19       	sub	r22, r8
     768:	79 09       	sbc	r23, r9
     76a:	8a 09       	sbc	r24, r10
     76c:	9b 09       	sbc	r25, r11
     76e:	68 3e       	cpi	r22, 0xE8	; 232
     770:	73 40       	sbci	r23, 0x03	; 3
     772:	81 05       	cpc	r24, r1
     774:	91 05       	cpc	r25, r1
     776:	80 f3       	brcs	.-32     	; 0x758 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	c2 1a       	sub	r12, r18
     77c:	d1 08       	sbc	r13, r1
     77e:	e1 08       	sbc	r14, r1
     780:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     782:	88 ee       	ldi	r24, 0xE8	; 232
     784:	88 0e       	add	r8, r24
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	98 1e       	adc	r9, r24
     78a:	a1 1c       	adc	r10, r1
     78c:	b1 1c       	adc	r11, r1
     78e:	e4 cf       	rjmp	.-56     	; 0x758 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	08 95       	ret

000007a2 <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7a2:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7a4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7a6:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <timer0_millis>
     7aa:	70 91 c6 02 	lds	r23, 0x02C6	; 0x8002c6 <timer0_millis+0x1>
     7ae:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <timer0_millis+0x2>
     7b2:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7b6:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     7b8:	08 95       	ret

000007ba <DFRobotDFPlayerMini::available() [clone .constprop.55]>:
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     7be:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <myDFPlayer>
     7c2:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <myDFPlayer+0x1>
     7c6:	dc 01       	movw	r26, r24
     7c8:	ed 91       	ld	r30, X+
     7ca:	fc 91       	ld	r31, X
     7cc:	00 84       	ldd	r0, Z+8	; 0x08
     7ce:	f1 85       	ldd	r31, Z+9	; 0x09
     7d0:	e0 2d       	mov	r30, r0
     7d2:	09 95       	icall
     7d4:	89 2b       	or	r24, r25
     7d6:	09 f4       	brne	.+2      	; 0x7da <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x20>
     7d8:	d7 c0       	rjmp	.+430    	; 0x988 <__stack+0x89>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	cb 01       	movw	r24, r22
     7e0:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     7e4:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <myDFPlayer+0x1e>
     7e8:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <myDFPlayer>
     7ec:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     7f0:	dc 01       	movw	r26, r24
     7f2:	ed 91       	ld	r30, X+
     7f4:	fc 91       	ld	r31, X
     7f6:	02 84       	ldd	r0, Z+10	; 0x0a
     7f8:	f3 85       	ldd	r31, Z+11	; 0x0b
     7fa:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     7fc:	21 11       	cpse	r18, r1
     7fe:	0b c0       	rjmp	.+22     	; 0x816 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x5c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     800:	09 95       	icall
     802:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     806:	8e 37       	cpi	r24, 0x7E	; 126
     808:	d1 f6       	brne	.-76     	; 0x7be <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     80a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <myDFPlayer+0x1e>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <myDFPlayer+0x1e>
     814:	d4 cf       	rjmp	.-88     	; 0x7be <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     816:	09 95       	icall
     818:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <myDFPlayer+0x1e>
     81c:	e9 2f       	mov	r30, r25
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	e3 58       	subi	r30, 0x83	; 131
     822:	fb 4f       	sbci	r31, 0xFB	; 251
     824:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     826:	92 30       	cpi	r25, 0x02	; 2
     828:	b9 f0       	breq	.+46     	; 0x858 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x9e>
     82a:	99 30       	cpi	r25, 0x09	; 9
     82c:	d9 f0       	breq	.+54     	; 0x864 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0xaa>
     82e:	91 30       	cpi	r25, 0x01	; 1
     830:	a9 f4       	brne	.+42     	; 0x85c <DFRobotDFPlayerMini::available() [clone .constprop.55]+0xa2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     832:	8f 3f       	cpi	r24, 0xFF	; 255
     834:	99 f0       	breq	.+38     	; 0x85c <DFRobotDFPlayerMini::available() [clone .constprop.55]+0xa2>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     836:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     840:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <myDFPlayer+0x23>
     844:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     848:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     84c:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <myDFPlayer+0x25>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     850:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     858:	86 30       	cpi	r24, 0x06	; 6
     85a:	69 f7       	brne	.-38     	; 0x836 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     85c:	9f 5f       	subi	r25, 0xFF	; 255
     85e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <myDFPlayer+0x1e>
     862:	ad cf       	rjmp	.-166    	; 0x7be <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     864:	8f 3e       	cpi	r24, 0xEF	; 239
     866:	39 f7       	brne	.-50     	; 0x836 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x7c>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     868:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <myDFPlayer+0xc>
     86c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <myDFPlayer+0xb>
     870:	28 0f       	add	r18, r24
     872:	33 27       	eor	r19, r19
     874:	33 1f       	adc	r19, r19
     876:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <myDFPlayer+0xd>
     87a:	c9 01       	movw	r24, r18
     87c:	8e 0f       	add	r24, r30
     87e:	91 1d       	adc	r25, r1
     880:	20 91 8b 04 	lds	r18, 0x048B	; 0x80048b <myDFPlayer+0xe>
     884:	28 0f       	add	r18, r24
     886:	39 2f       	mov	r19, r25
     888:	31 1d       	adc	r19, r1
     88a:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <myDFPlayer+0xf>
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	24 0f       	add	r18, r20
     892:	35 1f       	adc	r19, r21
     894:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <myDFPlayer+0x10>
     898:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     89a:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <myDFPlayer+0x11>
     89e:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     8a0:	76 2f       	mov	r23, r22
     8a2:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8a4:	f0 91 8f 04 	lds	r31, 0x048F	; 0x80048f <myDFPlayer+0x12>
     8a8:	6f 0f       	add	r22, r31
     8aa:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     8ac:	28 0f       	add	r18, r24
     8ae:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     8b0:	31 95       	neg	r19
     8b2:	21 95       	neg	r18
     8b4:	31 09       	sbc	r19, r1
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     8b6:	62 17       	cp	r22, r18
     8b8:	73 07       	cpc	r23, r19
     8ba:	09 f0       	breq	.+2      	; 0x8be <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x104>
     8bc:	bc cf       	rjmp	.-136    	; 0x836 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     8be:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     8c2:	e1 34       	cpi	r30, 0x41	; 65
     8c4:	19 f4       	brne	.+6      	; 0x8cc <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x112>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     8c6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <myDFPlayer+0x25>
     8ca:	2f c0       	rjmp	.+94     	; 0x92a <__stack+0x2b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     8cc:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     8d0:	54 2f       	mov	r21, r20
     8d2:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8d4:	84 0f       	add	r24, r20
     8d6:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     8d8:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <myDFPlayer+0x23>
     8dc:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     8e0:	ea 53       	subi	r30, 0x3A	; 58
     8e2:	e6 31       	cpi	r30, 0x16	; 22
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x12e>
     8e6:	46 c0       	rjmp	.+140    	; 0x974 <__stack+0x75>
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	e7 58       	subi	r30, 0x87	; 135
     8ec:	fb 4f       	sbci	r31, 0xFB	; 251
     8ee:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__tablejump2__>
     8f2:	a6 04       	cpc	r10, r6
     8f4:	ae 04       	cpc	r10, r14
     8f6:	b8 04       	cpc	r11, r8
     8f8:	8f 04       	cpc	r8, r15
     8fa:	b8 04       	cpc	r11, r8
     8fc:	98 04       	cpc	r9, r8
     8fe:	b6 04       	cpc	r11, r6
     900:	ba 04       	cpc	r11, r10
     902:	b8 04       	cpc	r11, r8
     904:	b8 04       	cpc	r11, r8
     906:	b8 04       	cpc	r11, r8
     908:	b8 04       	cpc	r11, r8
     90a:	b8 04       	cpc	r11, r8
     90c:	b8 04       	cpc	r11, r8
     90e:	b8 04       	cpc	r11, r8
     910:	b8 04       	cpc	r11, r8
     912:	ba 04       	cpc	r11, r10
     914:	b8 04       	cpc	r11, r8
     916:	b8 04       	cpc	r11, r8
     918:	b8 04       	cpc	r11, r8
     91a:	b8 04       	cpc	r11, r8
     91c:	b8 04       	cpc	r11, r8
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <myDFPlayer+0x24>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     92a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <myDFPlayer+0x24>
     92e:	91 cf       	rjmp	.-222    	; 0x852 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x98>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     930:	80 ff       	sbrs	r24, 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     934:	89 e0       	ldi	r24, 0x09	; 9
     936:	f4 cf       	rjmp	.-24     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     938:	81 ff       	sbrs	r24, 1
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	f0 cf       	rjmp	.-32     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     940:	83 70       	andi	r24, 0x03	; 3
     942:	99 27       	eor	r25, r25
     944:	89 2b       	or	r24, r25
     946:	89 f3       	breq	.-30     	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     948:	8a e0       	ldi	r24, 0x0A	; 10
     94a:	ea cf       	rjmp	.-44     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     94c:	80 ff       	sbrs	r24, 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     950:	87 e0       	ldi	r24, 0x07	; 7
     952:	e6 cf       	rjmp	.-52     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     954:	81 ff       	sbrs	r24, 1
     956:	e9 cf       	rjmp	.-46     	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	e2 cf       	rjmp	.-60     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     95c:	80 ff       	sbrs	r24, 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     960:	88 e0       	ldi	r24, 0x08	; 8
     962:	de cf       	rjmp	.-68     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     964:	81 ff       	sbrs	r24, 1
     966:	e1 cf       	rjmp	.-62     	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	da cf       	rjmp	.-76     	; 0x920 <__stack+0x21>
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	d8 cf       	rjmp	.-80     	; 0x920 <__stack+0x21>
     970:	8b e0       	ldi	r24, 0x0B	; 11
     972:	d6 cf       	rjmp	.-84     	; 0x920 <__stack+0x21>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     97a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <myDFPlayer+0x23>
     97e:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     982:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <myDFPlayer+0x24>
     986:	9f cf       	rjmp	.-194    	; 0x8c6 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x10c>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     988:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <myDFPlayer+0x25>
     98c:	88 23       	and	r24, r24
     98e:	69 f2       	breq	.-102    	; 0x92a <__stack+0x2b>
     990:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
     994:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <myDFPlayer+0x2>
     998:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <myDFPlayer+0x3>
     99c:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <myDFPlayer+0x4>
     9a0:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <myDFPlayer+0x5>
     9a4:	60 1b       	sub	r22, r16
     9a6:	71 0b       	sbc	r23, r17
     9a8:	82 0b       	sbc	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	00 91 83 04 	lds	r16, 0x0483	; 0x800483 <myDFPlayer+0x6>
     9b0:	10 91 84 04 	lds	r17, 0x0484	; 0x800484 <myDFPlayer+0x7>
     9b4:	20 91 85 04 	lds	r18, 0x0485	; 0x800485 <myDFPlayer+0x8>
     9b8:	30 91 86 04 	lds	r19, 0x0486	; 0x800486 <myDFPlayer+0x9>
     9bc:	60 17       	cp	r22, r16
     9be:	71 07       	cpc	r23, r17
     9c0:	82 07       	cpc	r24, r18
     9c2:	93 07       	cpc	r25, r19
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	b1 cf       	rjmp	.-158    	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     9c8:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     9cc:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     9d0:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <myDFPlayer+0x23>
     9d4:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	36 cf       	rjmp	.-404    	; 0x848 <DFRobotDFPlayerMini::available() [clone .constprop.55]+0x8e>

000009dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>:
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     9dc:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     9e0:	27 2f       	mov	r18, r23
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     9e8:	60 93 97 04 	sts	0x0497, r22	; 0x800497 <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     9ec:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <myDFPlayer+0x16>
     9f0:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <myDFPlayer+0x15>
     9f4:	49 0f       	add	r20, r25
     9f6:	55 27       	eor	r21, r21
     9f8:	55 1f       	adc	r21, r21
     9fa:	84 0f       	add	r24, r20
     9fc:	95 2f       	mov	r25, r21
     9fe:	91 1d       	adc	r25, r1
     a00:	40 91 95 04 	lds	r20, 0x0495	; 0x800495 <myDFPlayer+0x18>
     a04:	84 0f       	add	r24, r20
     a06:	91 1d       	adc	r25, r1
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	68 0f       	add	r22, r24
     a0e:	79 2f       	mov	r23, r25
     a10:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     a12:	71 95       	neg	r23
     a14:	61 95       	neg	r22
     a16:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     a18:	70 93 98 04 	sts	0x0498, r23	; 0x800498 <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     a1c:	60 93 99 04 	sts	0x0499, r22	; 0x800499 <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     a20:	44 23       	and	r20, r20
     a22:	61 f0       	breq	.+24     	; 0xa3c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     a24:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <myDFPlayer+0x25>
     a28:	88 23       	and	r24, r24
     a2a:	41 f0       	breq	.+16     	; 0xa3c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	cb 01       	movw	r24, r22
     a32:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     a36:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DFRobotDFPlayerMini::available() [clone .constprop.55]>
     a3a:	f4 cf       	rjmp	.-24     	; 0xa24 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     a3c:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <myDFPlayer>
     a40:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <myDFPlayer+0x1>
     a44:	dc 01       	movw	r26, r24
     a46:	ed 91       	ld	r30, X+
     a48:	fc 91       	ld	r31, X
     a4a:	02 80       	ldd	r0, Z+2	; 0x02
     a4c:	f3 81       	ldd	r31, Z+3	; 0x03
     a4e:	e0 2d       	mov	r30, r0
     a50:	4a e0       	ldi	r20, 0x0A	; 10
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	61 e9       	ldi	r22, 0x91	; 145
     a56:	74 e0       	ldi	r23, 0x04	; 4
     a58:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     a5a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
     a5e:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <myDFPlayer+0x2>
     a62:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <myDFPlayer+0x3>
     a66:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <myDFPlayer+0x4>
     a6a:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     a6e:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <myDFPlayer+0x18>
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	81 11       	cpse	r24, r1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]+0x9e>
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     a7e:	81 11       	cpse	r24, r1
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     a82:	6a e0       	ldi	r22, 0x0A	; 10
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     a8e:	08 95       	ret

00000a90 <Print::flush()>:
flush():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     a90:	08 95       	ret

00000a92 <SoftwareSerial::peek()>:
peek():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     a92:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
     a96:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
     a9a:	28 17       	cp	r18, r24
     a9c:	39 07       	cpc	r19, r25
     a9e:	71 f4       	brne	.+28     	; 0xabc <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     aa0:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     aa4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
     aa8:	98 17       	cp	r25, r24
     aaa:	41 f0       	breq	.+16     	; 0xabc <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     aac:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ec 57       	subi	r30, 0x7C	; 124
     ab4:	fd 4f       	sbci	r31, 0xFD	; 253
     ab6:	80 81       	ld	r24, Z
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     ac0:	08 95       	ret

00000ac2 <SoftwareSerial::flush()>:
flush():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     ac2:	08 95       	ret

00000ac4 <SoftwareSerial::write(unsigned char)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     ad2:	5c 96       	adiw	r26, 0x1c	; 28
     ad4:	ed 90       	ld	r14, X+
     ad6:	fc 90       	ld	r15, X
     ad8:	5d 97       	sbiw	r26, 0x1d	; 29
     ada:	e1 14       	cp	r14, r1
     adc:	f1 04       	cpc	r15, r1
     ade:	79 f4       	brne	.+30     	; 0xafe <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     afe:	51 96       	adiw	r26, 0x11	; 17
     b00:	ed 91       	ld	r30, X+
     b02:	fc 91       	ld	r31, X
     b04:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     b06:	50 96       	adiw	r26, 0x10	; 16
     b08:	8c 91       	ld	r24, X
     b0a:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     b0c:	98 2f       	mov	r25, r24
     b0e:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     b10:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     b12:	5e 96       	adiw	r26, 0x1e	; 30
     b14:	2c 91       	ld	r18, X
     b16:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     b18:	12 2f       	mov	r17, r18
     b1a:	12 70       	andi	r17, 0x02	; 2
     b1c:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     b1e:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     b20:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     b22:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     b24:	11 23       	and	r17, r17
     b26:	19 f1       	breq	.+70     	; 0xb6e <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     b28:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     b2a:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b2c:	e7 01       	movw	r28, r14
     b2e:	21 97       	sbiw	r28, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <SoftwareSerial::write(unsigned char)+0x6a>
     b32:	28 e0       	ldi	r18, 0x08	; 8
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b34:	46 2f       	mov	r20, r22
     b36:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b38:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b3a:	60 ff       	sbrs	r22, 0
     b3c:	1a c0       	rjmp	.+52     	; 0xb72 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b3e:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     b40:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b42:	e7 01       	movw	r28, r14
     b44:	21 97       	sbiw	r28, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <SoftwareSerial::write(unsigned char)+0x80>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     b48:	ba 01       	movw	r22, r20
     b4a:	75 95       	asr	r23
     b4c:	67 95       	ror	r22
     b4e:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     b50:	89 f7       	brne	.-30     	; 0xb34 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     b52:	11 23       	and	r17, r17
     b54:	81 f0       	breq	.+32     	; 0xb76 <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     b56:	80 81       	ld	r24, Z
     b58:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     b5a:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     b5c:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b5e:	5c 96       	adiw	r26, 0x1c	; 28
     b60:	8d 91       	ld	r24, X+
     b62:	9c 91       	ld	r25, X
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <SoftwareSerial::write(unsigned char)+0xa0>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	c1 cf       	rjmp	.-126    	; 0xaf0 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     b6e:	29 23       	and	r18, r25
     b70:	dc cf       	rjmp	.-72     	; 0xb2a <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     b72:	39 23       	and	r19, r25
     b74:	e5 cf       	rjmp	.-54     	; 0xb40 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     b76:	90 81       	ld	r25, Z
     b78:	89 2b       	or	r24, r25
     b7a:	ef cf       	rjmp	.-34     	; 0xb5a <SoftwareSerial::write(unsigned char)+0x96>

00000b7c <SoftwareSerial::available()>:
available():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     b7c:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
     b80:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	71 f4       	brne	.+28     	; 0xba6 <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     b8a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
     b8e:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	80 5c       	subi	r24, 0xC0	; 192
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	82 1b       	sub	r24, r18
     b9a:	91 09       	sbc	r25, r1
     b9c:	60 e4       	ldi	r22, 0x40	; 64
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	0e 94 8b 20 	call	0x4116	; 0x4116 <__divmodhi4>
     ba4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     baa:	08 95       	ret

00000bac <SoftwareSerial::read()>:
read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     bac:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
     bb0:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
     bb4:	28 17       	cp	r18, r24
     bb6:	39 07       	cpc	r19, r25
     bb8:	b9 f4       	brne	.+46     	; 0xbe8 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     bba:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     bbe:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
     bc2:	98 17       	cp	r25, r24
     bc4:	89 f0       	breq	.+34     	; 0xbe8 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     bc6:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	ec 57       	subi	r30, 0x7C	; 124
     bce:	fd 4f       	sbci	r31, 0xFD	; 253
     bd0:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     bd2:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	2f 73       	andi	r18, 0x3F	; 63
     bde:	33 27       	eor	r19, r19
     be0:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     bec:	08 95       	ret

00000bee <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     bee:	85 ed       	ldi	r24, 0xD5	; 213
     bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     bf4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     bf8:	84 fd       	sbrc	r24, 4
     bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     bfc:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     c00:	08 95       	ret

00000c02 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     c02:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <twi_txBufferLength>
     c06:	26 0f       	add	r18, r22
     c08:	33 27       	eor	r19, r19
     c0a:	33 1f       	adc	r19, r19
     c0c:	21 32       	cpi	r18, 0x21	; 33
     c0e:	31 05       	cpc	r19, r1
     c10:	ec f4       	brge	.+58     	; 0xc4c <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     c12:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <twi_state>
     c16:	fc 01       	movw	r30, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	24 30       	cpi	r18, 0x04	; 4
     c1e:	69 f0       	breq	.+26     	; 0xc3a <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     c20:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     c22:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     c24:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <twi_txBufferLength>
     c28:	21 91       	ld	r18, Z+
     c2a:	ac 01       	movw	r20, r24
     c2c:	4f 5b       	subi	r20, 0xBF	; 191
     c2e:	5d 4f       	sbci	r21, 0xFD	; 253
     c30:	a4 0f       	add	r26, r20
     c32:	b5 2f       	mov	r27, r21
     c34:	b1 1d       	adc	r27, r1
     c36:	2c 93       	st	X, r18
     c38:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     c3a:	86 17       	cp	r24, r22
     c3c:	98 f3       	brcs	.-26     	; 0xc24 <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     c3e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
     c42:	68 0f       	add	r22, r24
     c44:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <twi_txBufferLength>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	08 95       	ret

00000c50 <TwoWire::peek()>:
peek():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     c50:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <TwoWire::rxBufferIndex>
     c54:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <TwoWire::rxBufferLength>
     c58:	e8 17       	cp	r30, r24
     c5a:	30 f4       	brcc	.+12     	; 0xc68 <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	e2 59       	subi	r30, 0x92	; 146
     c60:	fc 4f       	sbci	r31, 0xFC	; 252
     c62:	80 81       	ld	r24, Z
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     c6c:	08 95       	ret

00000c6e <TwoWire::read()>:
read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     c6e:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <TwoWire::rxBufferIndex>
     c72:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     c7a:	98 17       	cp	r25, r24
     c7c:	48 f4       	brcc	.+18     	; 0xc90 <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     c7e:	e9 2f       	mov	r30, r25
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	e2 59       	subi	r30, 0x92	; 146
     c84:	fc 4f       	sbci	r31, 0xFC	; 252
     c86:	20 81       	ld	r18, Z
     c88:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     c8a:	9f 5f       	subi	r25, 0xFF	; 255
     c8c:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     c90:	c9 01       	movw	r24, r18
     c92:	08 95       	ret

00000c94 <TwoWire::available()>:
available():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     c94:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <TwoWire::rxBufferLength>
     c98:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     c9c:	89 1b       	sub	r24, r25
     c9e:	99 0b       	sbc	r25, r25
     ca0:	08 95       	ret

00000ca2 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     ca2:	cf 92       	push	r12
     ca4:	df 92       	push	r13
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	7c 01       	movw	r14, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     cb8:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <TwoWire::transmitting>
     cbc:	22 23       	and	r18, r18
     cbe:	89 f0       	breq	.+34     	; 0xce2 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     cc0:	eb 01       	movw	r28, r22
     cc2:	6b 01       	movw	r12, r22
     cc4:	c4 0e       	add	r12, r20
     cc6:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     cc8:	cc 15       	cp	r28, r12
     cca:	dd 05       	cpc	r29, r13
     ccc:	69 f0       	breq	.+26     	; 0xce8 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     cce:	69 91       	ld	r22, Y+
     cd0:	d7 01       	movw	r26, r14
     cd2:	ed 91       	ld	r30, X+
     cd4:	fc 91       	ld	r31, X
     cd6:	01 90       	ld	r0, Z+
     cd8:	f0 81       	ld	r31, Z
     cda:	e0 2d       	mov	r30, r0
     cdc:	c7 01       	movw	r24, r14
     cde:	09 95       	icall
     ce0:	f3 cf       	rjmp	.-26     	; 0xcc8 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     ce2:	64 2f       	mov	r22, r20
     ce4:	0e 94 01 06 	call	0xc02	; 0xc02 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     ce8:	c8 01       	movw	r24, r16
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	08 95       	ret

00000cfc <TwoWire::write(unsigned char)>:
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	1f 92       	push	r1
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     d08:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <TwoWire::transmitting>
     d0c:	22 23       	and	r18, r18
     d0e:	f9 f0       	breq	.+62     	; 0xd4e <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     d10:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <TwoWire::txBufferLength>
     d14:	20 32       	cpi	r18, 0x20	; 32
     d16:	58 f0       	brcs	.+22     	; 0xd2e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	fc 01       	movw	r30, r24
     d1e:	33 83       	std	Z+3, r19	; 0x03
     d20:	22 83       	std	Z+2, r18	; 0x02
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     d2e:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <TwoWire::txBufferIndex>
     d32:	e8 2f       	mov	r30, r24
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	e9 54       	subi	r30, 0x49	; 73
     d38:	fc 4f       	sbci	r31, 0xFC	; 252
     d3a:	99 81       	ldd	r25, Y+1	; 0x01
     d3c:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     d44:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	ec cf       	rjmp	.-40     	; 0xd26 <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	0e 94 01 06 	call	0xc02	; 0xc02 <twi_transmit>
     d58:	f7 cf       	rjmp	.-18     	; 0xd48 <TwoWire::write(unsigned char)+0x4c>

00000d5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     d5a:	fc 01       	movw	r30, r24
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d5e:	31 e0       	ldi	r19, 0x01	; 1
     d60:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     d64:	20 93 d7 03 	sts	0x03D7, r18	; 0x8003d7 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     d68:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     d6c:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     d70:	83 85       	ldd	r24, Z+11	; 0x0b
     d72:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     d74:	87 e1       	ldi	r24, 0x17	; 23
     d76:	94 e0       	ldi	r25, 0x04	; 4
     d78:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:255
	Wire.endTransmission();   
     d7c:	0c 94 c0 01 	jmp	0x380	; 0x380 <TwoWire::endTransmission() [clone .constprop.83]>

00000d80 <LiquidCrystal_I2C::write4bits(unsigned char)>:
write4bits():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	8c 01       	movw	r16, r24
     d88:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     d8a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     d8e:	6c 2f       	mov	r22, r28
     d90:	64 60       	ori	r22, 0x04	; 4
     d92:	c8 01       	movw	r24, r16
     d94:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     da0:	6c 2f       	mov	r22, r28
     da2:	6b 7f       	andi	r22, 0xFB	; 251
     da4:	c8 01       	movw	r24, r16
     da6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     daa:	82 e3       	ldi	r24, 0x32	; 50
     dac:	90 e0       	ldi	r25, 0x00	; 0
write4bits():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     db4:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <delayMicroseconds>

00000db8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
send():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	8c 01       	movw	r16, r24
     dc2:	d6 2f       	mov	r29, r22
     dc4:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     dc6:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     dc8:	64 2b       	or	r22, r20
     dca:	0e 94 c0 06 	call	0xd80	; 0xd80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     dce:	80 e1       	ldi	r24, 0x10	; 16
     dd0:	d8 9f       	mul	r29, r24
     dd2:	b0 01       	movw	r22, r0
     dd4:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     dd6:	6c 2b       	or	r22, r28
     dd8:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     de2:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000de6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>:
setCursor():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	28 97       	sbiw	r28, 0x08	; 8
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     dfa:	98 e0       	ldi	r25, 0x08	; 8
     dfc:	ef e0       	ldi	r30, 0x0F	; 15
     dfe:	f1 e0       	ldi	r31, 0x01	; 1
     e00:	de 01       	movw	r26, r28
     e02:	11 96       	adiw	r26, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	9a 95       	dec	r25
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     e0c:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <lcd+0x8>
     e10:	96 17       	cp	r25, r22
     e12:	08 f4       	brcc	.+2      	; 0xe16 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     e14:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     e16:	26 2f       	mov	r18, r22
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	4c 0f       	add	r20, r28
     e24:	5d 1f       	adc	r21, r29
     e26:	24 0f       	add	r18, r20
     e28:	35 1f       	adc	r19, r21
     e2a:	f9 01       	movw	r30, r18
     e2c:	60 81       	ld	r22, Z
     e2e:	68 0f       	add	r22, r24
     e30:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	81 e7       	ldi	r24, 0x71	; 113
     e36:	94 e0       	ldi	r25, 0x04	; 4
setCursor():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     e38:	28 96       	adiw	r28, 0x08	; 8
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     e48:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00000e4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>:
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	81 e7       	ldi	r24, 0x71	; 113
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
clear():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
     e58:	80 ed       	ldi	r24, 0xD0	; 208
     e5a:	97 e0       	ldi	r25, 0x07	; 7
     e5c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <delayMicroseconds>

00000e60 <LiquidCrystal_I2C::write(unsigned char)>:
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	08 95       	ret

00000e6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>:
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     e76:	d0 e0       	ldi	r29, 0x00	; 0
     e78:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     e7a:	f8 01       	movw	r30, r16
     e7c:	ec 0f       	add	r30, r28
     e7e:	fd 1f       	adc	r31, r29
     e80:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     e82:	66 23       	and	r22, r22
     e84:	39 f0       	breq	.+14     	; 0xe94 <Print::print(__FlashStringHelper const*) [clone .constprop.49]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	81 e7       	ldi	r24, 0x71	; 113
     e8a:	94 e0       	ldi	r25, 0x04	; 4
     e8c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     e90:	21 96       	adiw	r28, 0x01	; 1
     e92:	f3 cf       	rjmp	.-26     	; 0xe7a <Print::print(__FlashStringHelper const*) [clone .constprop.49]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     e94:	ce 01       	movw	r24, r28
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	08 95       	ret

00000ea0 <RTC_DS1307::adjust(DateTime const&)>:
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:845
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     eae:	88 e6       	ldi	r24, 0x68	; 104
     eb0:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     eb4:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     eb8:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:847
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	87 e1       	ldi	r24, 0x17	; 23
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
     ec6:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     ec8:	1a e0       	ldi	r17, 0x0A	; 10
     eca:	82 2f       	mov	r24, r18
     ecc:	61 2f       	mov	r22, r17
     ece:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodqi4>
     ed2:	68 2f       	mov	r22, r24
     ed4:	66 0f       	add	r22, r22
     ed6:	68 0f       	add	r22, r24
     ed8:	66 0f       	add	r22, r22
     eda:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:848
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
     edc:	87 e1       	ldi	r24, 0x17	; 23
     ede:	94 e0       	ldi	r25, 0x04	; 4
     ee0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     ee6:	82 2f       	mov	r24, r18
     ee8:	61 2f       	mov	r22, r17
     eea:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodqi4>
     eee:	68 2f       	mov	r22, r24
     ef0:	66 0f       	add	r22, r22
     ef2:	68 0f       	add	r22, r24
     ef4:	66 0f       	add	r22, r22
     ef6:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:849
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
     ef8:	87 e1       	ldi	r24, 0x17	; 23
     efa:	94 e0       	ldi	r25, 0x04	; 4
     efc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
     f00:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     f02:	82 2f       	mov	r24, r18
     f04:	61 2f       	mov	r22, r17
     f06:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodqi4>
     f0a:	68 2f       	mov	r22, r24
     f0c:	66 0f       	add	r22, r22
     f0e:	68 0f       	add	r22, r24
     f10:	66 0f       	add	r22, r22
     f12:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:850
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
     f14:	87 e1       	ldi	r24, 0x17	; 23
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:851
  Wire._I2C_WRITE(bin2bcd(0));
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	87 e1       	ldi	r24, 0x17	; 23
     f20:	94 e0       	ldi	r25, 0x04	; 4
     f22:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
     f26:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     f28:	82 2f       	mov	r24, r18
     f2a:	61 2f       	mov	r22, r17
     f2c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodqi4>
     f30:	68 2f       	mov	r22, r24
     f32:	66 0f       	add	r22, r22
     f34:	68 0f       	add	r22, r24
     f36:	66 0f       	add	r22, r22
     f38:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:852
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
     f3a:	87 e1       	ldi	r24, 0x17	; 23
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
     f42:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     f44:	82 2f       	mov	r24, r18
     f46:	61 2f       	mov	r22, r17
     f48:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodqi4>
     f4c:	68 2f       	mov	r22, r24
     f4e:	66 0f       	add	r22, r22
     f50:	68 0f       	add	r22, r24
     f52:	66 0f       	add	r22, r22
     f54:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:853
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
     f56:	87 e1       	ldi	r24, 0x17	; 23
     f58:	94 e0       	ldi	r25, 0x04	; 4
     f5a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
     f5e:	28 81       	ld	r18, Y
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     f60:	82 2f       	mov	r24, r18
     f62:	61 2f       	mov	r22, r17
     f64:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodqi4>
     f68:	68 2f       	mov	r22, r24
     f6a:	66 0f       	add	r22, r22
     f6c:	68 0f       	add	r22, r24
     f6e:	66 0f       	add	r22, r22
     f70:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:854
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
     f72:	87 e1       	ldi	r24, 0x17	; 23
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:856
  Wire.endTransmission();
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:855
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
  Wire.endTransmission();
     f80:	0c 94 c0 01 	jmp	0x380	; 0x380 <TwoWire::endTransmission() [clone .constprop.83]>

00000f84 <Print::availableForWrite()>:
availableForWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret

00000f8a <queueButton(unsigned char)>:
queueButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:152

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
     f8a:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <buttonBufferCount>
     f8e:	25 30       	cpi	r18, 0x05	; 5
     f90:	09 f0       	breq	.+2      	; 0xf94 <queueButton(unsigned char)+0xa>
     f92:	90 f4       	brcc	.+36     	; 0xfb8 <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:154
  {
    buttonBuffer [button_write_pos] = button;
     f94:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__data_end>
     f98:	e9 2f       	mov	r30, r25
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	ed 5f       	subi	r30, 0xFD	; 253
     f9e:	fc 4f       	sbci	r31, 0xFC	; 252
     fa0:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:155
    buttonBufferCount++;
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:156
    button_write_pos++;
     fa8:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:158
    
    if (button_write_pos >= sizeof (buttonBuffer))
     faa:	95 30       	cpi	r25, 0x05	; 5
     fac:	18 f4       	brcc	.+6      	; 0xfb4 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:156
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
     fae:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <__data_end>
     fb2:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:160
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
     fb4:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:163
    }
  }
}
     fb8:	08 95       	ret

00000fba <TwoWire::requestFrom(int, int) [clone .constprop.74]>:
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     fba:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <twi_state>
     fbe:	91 11       	cpse	r25, r1
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <TwoWire::requestFrom(int, int) [clone .constprop.74]>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:136
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     fc2:	28 2f       	mov	r18, r24
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
     fca:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	30 93 b2 03 	sts	0x03B2, r19	; 0x8003b2 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     fd4:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     fd8:	38 0f       	add	r19, r24
     fda:	30 93 b0 03 	sts	0x03B0, r19	; 0x8003b0 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     fde:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
     fe2:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_slarw>
     fe6:	90 6d       	ori	r25, 0xD0	; 208
     fe8:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
     fec:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <twi_inRepStart>
     ff0:	91 30       	cpi	r25, 0x01	; 1
     ff2:	19 f5       	brne	.+70     	; 0x103a <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x80>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     ff4:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
     ff8:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_slarw>
     ffc:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    1000:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1004:	93 fd       	sbrc	r25, 3
    1006:	f8 cf       	rjmp	.-16     	; 0xff8 <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x3e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1008:	95 ec       	ldi	r25, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    100a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    100e:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <twi_state>
    1012:	91 30       	cpi	r25, 0x01	; 1
    1014:	e1 f3       	breq	.-8      	; 0x100e <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x54>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    1016:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    101a:	98 17       	cp	r25, r24
    101c:	10 f4       	brcc	.+4      	; 0x1022 <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x68>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    101e:	20 91 b1 03 	lds	r18, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    1022:	a0 e9       	ldi	r26, 0x90	; 144
    1024:	b3 e0       	ldi	r27, 0x03	; 3
    1026:	ee e6       	ldi	r30, 0x6E	; 110
    1028:	f3 e0       	ldi	r31, 0x03	; 3
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    102a:	80 e0       	ldi	r24, 0x00	; 0
twi_readFrom():
    102c:	82 13       	cpse	r24, r18
    102e:	07 c0       	rjmp	.+14     	; 0x103e <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x84>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1030:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    1034:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:137
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    1038:	08 95       	ret
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    103a:	95 ee       	ldi	r25, 0xE5	; 229
    103c:	e6 cf       	rjmp	.-52     	; 0x100a <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    103e:	9d 91       	ld	r25, X+
    1040:	91 93       	st	Z+, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	f3 cf       	rjmp	.-26     	; 0x102c <TwoWire::requestFrom(int, int) [clone .constprop.74]+0x72>

00001046 <RTC_DS1307::now()>:
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:864
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	6c 01       	movw	r12, r24
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    105c:	88 e6       	ldi	r24, 0x68	; 104
    105e:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1062:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    1066:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:866
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	87 e1       	ldi	r24, 0x17	; 23
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:867
  Wire.endTransmission();
    1074:	0e 94 c0 01 	call	0x380	; 0x380 <TwoWire::endTransmission() [clone .constprop.83]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:869

  Wire.requestFrom(DS1307_ADDRESS, 7);
    1078:	87 e0       	ldi	r24, 0x07	; 7
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 dd 07 	call	0xfba	; 0xfba <TwoWire::requestFrom(int, int) [clone .constprop.74]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:870
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    1080:	87 e1       	ldi	r24, 0x17	; 23
    1082:	94 e0       	ldi	r25, 0x04	; 4
    1084:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
    1088:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	94 e0       	ldi	r25, 0x04	; 4
    1090:	35 95       	asr	r19
    1092:	27 95       	ror	r18
    1094:	9a 95       	dec	r25
    1096:	e1 f7       	brne	.-8      	; 0x1090 <RTC_DS1307::now()+0x4a>
    1098:	92 2f       	mov	r25, r18
    109a:	99 0f       	add	r25, r25
    109c:	99 0f       	add	r25, r25
    109e:	c2 2f       	mov	r28, r18
    10a0:	c9 1b       	sub	r28, r25
    10a2:	cc 0f       	add	r28, r28
    10a4:	c8 0f       	add	r28, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:871
  Wire._I2C_WRITE((byte)0);
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    10a6:	87 e1       	ldi	r24, 0x17	; 23
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    10ae:	9c 01       	movw	r18, r24
    10b0:	44 e0       	ldi	r20, 0x04	; 4
    10b2:	35 95       	asr	r19
    10b4:	27 95       	ror	r18
    10b6:	4a 95       	dec	r20
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <RTC_DS1307::now()+0x6c>
    10ba:	2f 70       	andi	r18, 0x0F	; 15
    10bc:	33 27       	eor	r19, r19
    10be:	92 2f       	mov	r25, r18
    10c0:	99 0f       	add	r25, r25
    10c2:	99 0f       	add	r25, r25
    10c4:	d2 2f       	mov	r29, r18
    10c6:	d9 1b       	sub	r29, r25
    10c8:	dd 0f       	add	r29, r29
    10ca:	d8 0f       	add	r29, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:872
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    10cc:	87 e1       	ldi	r24, 0x17	; 23
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    10d4:	9c 01       	movw	r18, r24
    10d6:	54 e0       	ldi	r21, 0x04	; 4
    10d8:	35 95       	asr	r19
    10da:	27 95       	ror	r18
    10dc:	5a 95       	dec	r21
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <RTC_DS1307::now()+0x92>
    10e0:	2f 70       	andi	r18, 0x0F	; 15
    10e2:	33 27       	eor	r19, r19
    10e4:	92 2f       	mov	r25, r18
    10e6:	99 0f       	add	r25, r25
    10e8:	99 0f       	add	r25, r25
    10ea:	12 2f       	mov	r17, r18
    10ec:	19 1b       	sub	r17, r25
    10ee:	11 0f       	add	r17, r17
    10f0:	18 0f       	add	r17, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:873

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    10f2:	87 e1       	ldi	r24, 0x17	; 23
    10f4:	94 e0       	ldi	r25, 0x04	; 4
    10f6:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:874
  uint8_t d = bcd2bin(Wire._I2C_READ());
    10fa:	87 e1       	ldi	r24, 0x17	; 23
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1102:	9c 01       	movw	r18, r24
    1104:	64 e0       	ldi	r22, 0x04	; 4
    1106:	35 95       	asr	r19
    1108:	27 95       	ror	r18
    110a:	6a 95       	dec	r22
    110c:	e1 f7       	brne	.-8      	; 0x1106 <RTC_DS1307::now()+0xc0>
    110e:	2f 70       	andi	r18, 0x0F	; 15
    1110:	33 27       	eor	r19, r19
    1112:	92 2f       	mov	r25, r18
    1114:	99 0f       	add	r25, r25
    1116:	99 0f       	add	r25, r25
    1118:	02 2f       	mov	r16, r18
    111a:	09 1b       	sub	r16, r25
    111c:	00 0f       	add	r16, r16
    111e:	08 0f       	add	r16, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:875
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    1120:	87 e1       	ldi	r24, 0x17	; 23
    1122:	94 e0       	ldi	r25, 0x04	; 4
    1124:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1128:	9c 01       	movw	r18, r24
    112a:	74 e0       	ldi	r23, 0x04	; 4
    112c:	35 95       	asr	r19
    112e:	27 95       	ror	r18
    1130:	7a 95       	dec	r23
    1132:	e1 f7       	brne	.-8      	; 0x112c <RTC_DS1307::now()+0xe6>
    1134:	2f 70       	andi	r18, 0x0F	; 15
    1136:	33 27       	eor	r19, r19
    1138:	92 2f       	mov	r25, r18
    113a:	99 0f       	add	r25, r25
    113c:	99 0f       	add	r25, r25
    113e:	f2 2e       	mov	r15, r18
    1140:	f9 1a       	sub	r15, r25
    1142:	ff 0c       	add	r15, r15
    1144:	f8 0e       	add	r15, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:876
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;
    1146:	87 e1       	ldi	r24, 0x17	; 23
    1148:	94 e0       	ldi	r25, 0x04	; 4
    114a:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    114e:	9c 01       	movw	r18, r24
    1150:	e4 e0       	ldi	r30, 0x04	; 4
    1152:	35 95       	asr	r19
    1154:	27 95       	ror	r18
    1156:	ea 95       	dec	r30
    1158:	e1 f7       	brne	.-8      	; 0x1152 <RTC_DS1307::now()+0x10c>
    115a:	2f 70       	andi	r18, 0x0F	; 15
    115c:	33 27       	eor	r19, r19
    115e:	92 2f       	mov	r25, r18
    1160:	99 0f       	add	r25, r25
    1162:	99 0f       	add	r25, r25
    1164:	29 1b       	sub	r18, r25
    1166:	22 0f       	add	r18, r18
    1168:	82 0f       	add	r24, r18
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    116a:	f6 01       	movw	r30, r12
    116c:	80 83       	st	Z, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    116e:	f1 82       	std	Z+1, r15	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    1170:	02 83       	std	Z+2, r16	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    1172:	13 83       	std	Z+3, r17	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    1174:	d4 83       	std	Z+4, r29	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    1176:	c5 83       	std	Z+5, r28	; 0x05
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:879
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;

  return DateTime(y, m, d, hh, mm, ss);
}
    1178:	c6 01       	movw	r24, r12
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	08 95       	ret

0000118a <String::invalidate()>:
invalidate():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    1190:	88 81       	ld	r24, Y
    1192:	99 81       	ldd	r25, Y+1	; 0x01
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	11 f0       	breq	.+4      	; 0x119c <String::invalidate()+0x12>
    1198:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    119c:	19 82       	std	Y+1, r1	; 0x01
    119e:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    11a0:	1d 82       	std	Y+5, r1	; 0x05
    11a2:	1c 82       	std	Y+4, r1	; 0x04
    11a4:	1b 82       	std	Y+3, r1	; 0x03
    11a6:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>:
printNumber():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	a1 97       	sbiw	r28, 0x21	; 33
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    11ce:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    11d0:	42 30       	cpi	r20, 0x02	; 2
    11d2:	08 f4       	brcc	.+2      	; 0x11d6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x28>
    11d4:	4a e0       	ldi	r20, 0x0A	; 10
    11d6:	8e 01       	movw	r16, r28
    11d8:	0f 5d       	subi	r16, 0xDF	; 223
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    11dc:	84 2e       	mov	r8, r20
    11de:	91 2c       	mov	r9, r1
    11e0:	b1 2c       	mov	r11, r1
    11e2:	a1 2c       	mov	r10, r1
    11e4:	a5 01       	movw	r20, r10
    11e6:	94 01       	movw	r18, r8
    11e8:	0e 94 3a 20 	call	0x4074	; 0x4074 <__udivmodsi4>
    11ec:	e6 2f       	mov	r30, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    11ee:	b9 01       	movw	r22, r18
    11f0:	ca 01       	movw	r24, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    11f2:	ea 30       	cpi	r30, 0x0A	; 10
    11f4:	44 f5       	brge	.+80     	; 0x1246 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x98>
    11f6:	e0 5d       	subi	r30, 0xD0	; 208
    11f8:	d8 01       	movw	r26, r16
    11fa:	ee 93       	st	-X, r30
    11fc:	8d 01       	movw	r16, r26
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    11fe:	23 2b       	or	r18, r19
    1200:	24 2b       	or	r18, r20
    1202:	25 2b       	or	r18, r21
    1204:	79 f7       	brne	.-34     	; 0x11e4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	80 e0       	ldi	r24, 0x00	; 0
write():
    120a:	10 97       	sbiw	r26, 0x00	; 0
    120c:	69 f0       	breq	.+26     	; 0x1228 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x7a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    120e:	fd 01       	movw	r30, r26
    1210:	01 90       	ld	r0, Z+
    1212:	00 20       	and	r0, r0
    1214:	e9 f7       	brne	.-6      	; 0x1210 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x62>
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	af 01       	movw	r20, r30
    121a:	4a 1b       	sub	r20, r26
    121c:	5b 0b       	sbc	r21, r27
    121e:	bd 01       	movw	r22, r26
    1220:	81 e7       	ldi	r24, 0x71	; 113
    1222:	94 e0       	ldi	r25, 0x04	; 4
    1224:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Print::write(unsigned char const*, unsigned int)>
printNumber():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    1228:	a1 96       	adiw	r28, 0x21	; 33
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	bf 90       	pop	r11
    123e:	af 90       	pop	r10
    1240:	9f 90       	pop	r9
    1242:	8f 90       	pop	r8
    1244:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1246:	e9 5c       	subi	r30, 0xC9	; 201
    1248:	d7 cf       	rjmp	.-82     	; 0x11f8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x4a>

0000124a <Print::print(int, int) [clone .constprop.6]>:
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    1252:	6c 01       	movw	r12, r24
    1254:	99 0f       	add	r25, r25
    1256:	ee 08       	sbc	r14, r14
    1258:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    125a:	f7 fe       	sbrs	r15, 7
    125c:	16 c0       	rjmp	.+44     	; 0x128a <Print::print(int, int) [clone .constprop.6]+0x40>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	6d e2       	ldi	r22, 0x2D	; 45
    1262:	81 e7       	ldi	r24, 0x71	; 113
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    126a:	66 27       	eor	r22, r22
    126c:	77 27       	eor	r23, r23
    126e:	cb 01       	movw	r24, r22
    1270:	6c 19       	sub	r22, r12
    1272:	7d 09       	sbc	r23, r13
    1274:	8e 09       	sbc	r24, r14
    1276:	9f 09       	sbc	r25, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1278:	4a e0       	ldi	r20, 0x0A	; 10
    127a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>
    127e:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    128a:	4a e0       	ldi	r20, 0x0A	; 10
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1298:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>

0000129c <Print::print(char const*) [clone .constprop.87]>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	69 f0       	breq	.+26     	; 0x12ba <Print::print(char const*) [clone .constprop.87]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    12a0:	fc 01       	movw	r30, r24
    12a2:	01 90       	ld	r0, Z+
    12a4:	00 20       	and	r0, r0
    12a6:	e9 f7       	brne	.-6      	; 0x12a2 <Print::print(char const*) [clone .constprop.87]+0x6>
    12a8:	31 97       	sbiw	r30, 0x01	; 1
    12aa:	af 01       	movw	r20, r30
    12ac:	48 1b       	sub	r20, r24
    12ae:	59 0b       	sbc	r21, r25
    12b0:	bc 01       	movw	r22, r24
    12b2:	81 e7       	ldi	r24, 0x71	; 113
    12b4:	94 e0       	ldi	r25, 0x04	; 4
    12b6:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <Print::write(unsigned char const*, unsigned int)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret

000012c0 <inttostr(char*, short)>:
inttostr():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:31

char* padc (char chr, unsigned char count = 0);

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:32
  if (integer == 0)
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	59 f4       	brne	.+22     	; 0x12e6 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:34
  {
    strcpy(dest, "0");
    12d0:	69 ed       	ldi	r22, 0xD9	; 217
    12d2:	71 e0       	ldi	r23, 0x01	; 1
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:64
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    12da:	ce 01       	movw	r24, r28
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:38
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    12e6:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:40
    
    if (integer < 0)
    12e8:	77 ff       	sbrs	r23, 7
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:43
    {
      sign = 1;
      dest[0] = '-';
    12ec:	2d e2       	ldi	r18, 0x2D	; 45
    12ee:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:44
      integer = integer * -1;
    12f0:	91 95       	neg	r25
    12f2:	81 95       	neg	r24
    12f4:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:42
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    12f6:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    12f8:	80 31       	cpi	r24, 0x10	; 16
    12fa:	37 e2       	ldi	r19, 0x27	; 39
    12fc:	93 07       	cpc	r25, r19
    12fe:	0c f5       	brge	.+66     	; 0x1342 <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    1300:	88 3e       	cpi	r24, 0xE8	; 232
    1302:	33 e0       	ldi	r19, 0x03	; 3
    1304:	93 07       	cpc	r25, r19
    1306:	fc f4       	brge	.+62     	; 0x1346 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:51
    else if (integer > 99) idx = 2;
    1308:	32 e0       	ldi	r19, 0x02	; 2
    130a:	84 36       	cpi	r24, 0x64	; 100
    130c:	91 05       	cpc	r25, r1
    130e:	2c f4       	brge	.+10     	; 0x131a <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:52
    else if (integer > 9) idx = 1;
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	8a 30       	cpi	r24, 0x0A	; 10
    1314:	91 05       	cpc	r25, r1
    1316:	0c f4       	brge	.+2      	; 0x131a <inttostr(char*, short)+0x5a>
    1318:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:55
    else if (integer > 0) idx = 0;    

    idx += sign;
    131a:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:56
    dest[idx+1] = 0;
    131c:	fe 01       	movw	r30, r28
    131e:	e2 0f       	add	r30, r18
    1320:	f1 1d       	adc	r31, r1
    1322:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:60
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    1324:	0a e0       	ldi	r16, 0x0A	; 10
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	fe 01       	movw	r30, r28
    132a:	e2 0f       	add	r30, r18
    132c:	f1 1d       	adc	r31, r1
    132e:	b8 01       	movw	r22, r16
    1330:	0e 94 8b 20 	call	0x4116	; 0x4116 <__divmodhi4>
    1334:	80 5d       	subi	r24, 0xD0	; 208
    1336:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:58
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    1338:	cb 01       	movw	r24, r22
    133a:	21 50       	subi	r18, 0x01	; 1
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	a1 f7       	brne	.-24     	; 0x1328 <inttostr(char*, short)+0x68>
    1340:	cc cf       	rjmp	.-104    	; 0x12da <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1342:	34 e0       	ldi	r19, 0x04	; 4
    1344:	ea cf       	rjmp	.-44     	; 0x131a <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    1346:	33 e0       	ldi	r19, 0x03	; 3
    1348:	e8 cf       	rjmp	.-48     	; 0x131a <inttostr(char*, short)+0x5a>

0000134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>:
rpad():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:92
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:94
{
  unsigned char len = strlen(str);
    1350:	ec 01       	movw	r28, r24
    1352:	09 90       	ld	r0, Y+
    1354:	00 20       	and	r0, r0
    1356:	e9 f7       	brne	.-6      	; 0x1352 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x8>
    1358:	21 97       	sbiw	r28, 0x01	; 1
    135a:	c8 1b       	sub	r28, r24
    135c:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:98
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    135e:	c0 31       	cpi	r28, 0x10	; 16
    1360:	08 f5       	brcc	.+66     	; 0x13a4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:100
  {
    strcpy(dest, str);
    1362:	8a ee       	ldi	r24, 0xEA	; 234
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:101
    strcat(dest, padc(chr, width - len));
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	8c 1b       	sub	r24, r28
    136e:	e9 ed       	ldi	r30, 0xD9	; 217
    1370:	f3 e0       	ldi	r31, 0x03	; 3
padc():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1372:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1374:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1376:	af 01       	movw	r20, r30
    1378:	49 5d       	subi	r20, 0xD9	; 217
    137a:	53 40       	sbci	r21, 0x03	; 3
    137c:	48 17       	cp	r20, r24
    137e:	59 07       	cpc	r21, r25
    1380:	14 f4       	brge	.+4      	; 0x1386 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x3c>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1382:	21 93       	st	Z+, r18
    1384:	f8 cf       	rjmp	.-16     	; 0x1376 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    1386:	87 52       	subi	r24, 0x27	; 39
    1388:	9c 4f       	sbci	r25, 0xFC	; 252
    138a:	fc 01       	movw	r30, r24
    138c:	10 82       	st	Z, r1
rpad():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:101
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    138e:	69 ed       	ldi	r22, 0xD9	; 217
    1390:	73 e0       	ldi	r23, 0x03	; 3
    1392:	8a ee       	ldi	r24, 0xEA	; 234
    1394:	93 e0       	ldi	r25, 0x03	; 3
    1396:	0e 94 97 22 	call	0x452e	; 0x452e <strcat>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:108
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    139a:	8a ee       	ldi	r24, 0xEA	; 234
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:105
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    13a4:	41 e1       	ldi	r20, 0x11	; 17
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	8a ee       	ldi	r24, 0xEA	; 234
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncpy>
    13b0:	f4 cf       	rjmp	.-24     	; 0x139a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x50>

000013b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>:
lpad():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:111
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
    13bc:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:113
{
  unsigned char len = strlen(str);
    13be:	fb 01       	movw	r30, r22
    13c0:	01 90       	ld	r0, Z+
    13c2:	00 20       	and	r0, r0
    13c4:	e9 f7       	brne	.-6      	; 0x13c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0xe>
    13c6:	31 97       	sbiw	r30, 0x01	; 1
    13c8:	e6 1b       	sub	r30, r22
    13ca:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:117
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    13cc:	e0 31       	cpi	r30, 0x10	; 16
    13ce:	28 f5       	brcc	.+74     	; 0x141a <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0x68>
    13d0:	e4 17       	cp	r30, r20
    13d2:	18 f5       	brcc	.+70     	; 0x141a <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0x68>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:119
  {
    strcpy(dest, padc(chr, width - len));
    13d4:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:135
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    13d6:	41 31       	cpi	r20, 0x11	; 17
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0x2a>
    13da:	40 e1       	ldi	r20, 0x10	; 16
    13dc:	e9 ed       	ldi	r30, 0xD9	; 217
    13de:	f3 e0       	ldi	r31, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138

  int i;
  for (i=0; i < count; i++)
    13e0:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    13e2:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    13e4:	9f 01       	movw	r18, r30
    13e6:	29 5d       	subi	r18, 0xD9	; 217
    13e8:	33 40       	sbci	r19, 0x03	; 3
    13ea:	24 17       	cp	r18, r20
    13ec:	35 07       	cpc	r19, r21
    13ee:	14 f4       	brge	.+4      	; 0x13f4 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0x42>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    13f0:	81 93       	st	Z+, r24
    13f2:	f8 cf       	rjmp	.-16     	; 0x13e4 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0x32>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    13f4:	47 52       	subi	r20, 0x27	; 39
    13f6:	5c 4f       	sbci	r21, 0xFC	; 252
    13f8:	fa 01       	movw	r30, r20
    13fa:	10 82       	st	Z, r1
lpad():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:119
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    13fc:	69 ed       	ldi	r22, 0xD9	; 217
    13fe:	73 e0       	ldi	r23, 0x03	; 3
    1400:	ce 01       	movw	r24, r28
    1402:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:120
    strcat(dest, str);
    1406:	b8 01       	movw	r22, r16
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 97 22 	call	0x452e	; 0x452e <strcat>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:127
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    140e:	ce 01       	movw	r24, r28
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:124
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	b8 01       	movw	r22, r16
    1422:	ce 01       	movw	r24, r28
    1424:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncpy>
    1428:	f2 cf       	rjmp	.-28     	; 0x140e <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]+0x5c>

0000142a <Config::save() [clone .constprop.27]>:
save():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:147
  return strbuf;
}

void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    142a:	4c e2       	ldi	r20, 0x2C	; 44
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	8b e2       	ldi	r24, 0x2B	; 43
    1434:	93 e0       	ldi	r25, 0x03	; 3
    1436:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <eeprom_write_block>

0000143a <String::reserve(unsigned int)>:
reserve():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    1444:	88 81       	ld	r24, Y
    1446:	99 81       	ldd	r25, Y+1	; 0x01
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	59 f0       	breq	.+22     	; 0x1462 <String::reserve(unsigned int)+0x28>
    144c:	2a 81       	ldd	r18, Y+2	; 0x02
    144e:	3b 81       	ldd	r19, Y+3	; 0x03
    1450:	26 17       	cp	r18, r22
    1452:	37 07       	cpc	r19, r23
    1454:	30 f0       	brcs	.+12     	; 0x1462 <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1456:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret
    1462:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	59 f0       	breq	.+22     	; 0x1486 <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    1470:	99 83       	std	Y+1, r25	; 0x01
    1472:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    1474:	1b 83       	std	Y+3, r17	; 0x03
    1476:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	23 2b       	or	r18, r19
    147e:	59 f7       	brne	.-42     	; 0x1456 <String::reserve(unsigned int)+0x1c>
    1480:	fc 01       	movw	r30, r24
    1482:	10 82       	st	Z, r1
    1484:	e8 cf       	rjmp	.-48     	; 0x1456 <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	e7 cf       	rjmp	.-50     	; 0x1458 <String::reserve(unsigned int)+0x1e>

0000148a <operator+(StringSumHelper const&, String const&)>:
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1498:	fb 01       	movw	r30, r22
    149a:	e0 80       	ld	r14, Z
    149c:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    149e:	e1 14       	cp	r14, r1
    14a0:	f1 04       	cpc	r15, r1
    14a2:	11 f1       	breq	.+68     	; 0x14e8 <operator+(StringSumHelper const&, String const&)+0x5e>
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    14a4:	04 81       	ldd	r16, Z+4	; 0x04
    14a6:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    14a8:	01 15       	cp	r16, r1
    14aa:	11 05       	cpc	r17, r1
    14ac:	a9 f0       	breq	.+42     	; 0x14d8 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	08 0f       	add	r16, r24
    14b4:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    14b6:	b8 01       	movw	r22, r16
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 94 1d 0a 	call	0x143a	; 0x143a <String::reserve(unsigned int)>
    14be:	88 23       	and	r24, r24
    14c0:	99 f0       	breq	.+38     	; 0x14e8 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    14c2:	28 81       	ld	r18, Y
    14c4:	39 81       	ldd	r19, Y+1	; 0x01
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	b7 01       	movw	r22, r14
    14cc:	82 0f       	add	r24, r18
    14ce:	93 1f       	adc	r25, r19
    14d0:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    14d4:	1d 83       	std	Y+5, r17	; 0x05
    14d6:	0c 83       	std	Y+4, r16	; 0x04
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    14d8:	ce 01       	movw	r24, r28
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    14e8:	ce 01       	movw	r24, r28
    14ea:	0e 94 c5 08 	call	0x118a	; 0x118a <String::invalidate()>
    14ee:	f4 cf       	rjmp	.-24     	; 0x14d8 <operator+(StringSumHelper const&, String const&)+0x4e>

000014f0 <String::String(char const*)>:
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ec 01       	movw	r28, r24
    14fe:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1500:	19 82       	std	Y+1, r1	; 0x01
    1502:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1504:	1b 82       	std	Y+3, r1	; 0x03
    1506:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1508:	1d 82       	std	Y+5, r1	; 0x05
    150a:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    150c:	fb 01       	movw	r30, r22
    150e:	01 90       	ld	r0, Z+
    1510:	00 20       	and	r0, r0
    1512:	e9 f7       	brne	.-6      	; 0x150e <String::String(char const*)+0x1e>
    1514:	31 97       	sbiw	r30, 0x01	; 1
    1516:	8f 01       	movw	r16, r30
    1518:	06 1b       	sub	r16, r22
    151a:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    151c:	b8 01       	movw	r22, r16
    151e:	0e 94 1d 0a 	call	0x143a	; 0x143a <String::reserve(unsigned int)>
    1522:	81 11       	cpse	r24, r1
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    1526:	ce 01       	movw	r24, r28
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    1534:	0c 94 c5 08 	jmp	0x118a	; 0x118a <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    1538:	1d 83       	std	Y+5, r17	; 0x05
    153a:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    153c:	b7 01       	movw	r22, r14
    153e:	88 81       	ld	r24, Y
    1540:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    154e:	0c 94 ab 22 	jmp	0x4556	; 0x4556 <strcpy>

00001552 <fmt(char*, unsigned char, ...)>:
fmt():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:69
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    1552:	6f 92       	push	r6
    1554:	7f 92       	push	r7
    1556:	8f 92       	push	r8
    1558:	9f 92       	push	r9
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	e9 88       	ldd	r14, Y+17	; 0x11
    1574:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:74
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    1576:	fe 01       	movw	r30, r28
    1578:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    157a:	d1 2c       	mov	r13, r1
    157c:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:70


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    157e:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1580:	ab 88       	ldd	r10, Y+19	; 0x13
    1582:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:80
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    1584:	80 e1       	ldi	r24, 0x10	; 16
    1586:	68 2e       	mov	r6, r24
    1588:	87 2d       	mov	r24, r7
    158a:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    158c:	ca 14       	cp	r12, r10
    158e:	db 04       	cpc	r13, r11
    1590:	2c f5       	brge	.+74     	; 0x15dc <fmt(char*, unsigned char, ...)+0x8a>
    1592:	2f e0       	ldi	r18, 0x0F	; 15
    1594:	27 15       	cp	r18, r7
    1596:	10 f1       	brcs	.+68     	; 0x15dc <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    1598:	4f 01       	movw	r8, r30
    159a:	22 e0       	ldi	r18, 0x02	; 2
    159c:	82 0e       	add	r8, r18
    159e:	91 1c       	adc	r9, r1
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:79
    unsigned char len = strlen(str);
    15a4:	fb 01       	movw	r30, r22
    15a6:	01 90       	ld	r0, Z+
    15a8:	00 20       	and	r0, r0
    15aa:	e9 f7       	brne	.-6      	; 0x15a6 <fmt(char*, unsigned char, ...)+0x54>
    15ac:	31 97       	sbiw	r30, 0x01	; 1
    15ae:	8f 01       	movw	r16, r30
    15b0:	06 1b       	sub	r16, r22
    15b2:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:80
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    15b4:	9c 01       	movw	r18, r24
    15b6:	20 0f       	add	r18, r16
    15b8:	31 1d       	adc	r19, r1
    15ba:	46 2d       	mov	r20, r6
    15bc:	47 19       	sub	r20, r7
    15be:	21 31       	cpi	r18, 0x11	; 17
    15c0:	31 05       	cpc	r19, r1
    15c2:	0c f4       	brge	.+2      	; 0x15c6 <fmt(char*, unsigned char, ...)+0x74>
    15c4:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:82

    strncpy((dest + buflen), str, cpylen);
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	8e 0d       	add	r24, r14
    15ca:	9f 1d       	adc	r25, r15
    15cc:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:83
    buflen += len;
    15d0:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	c8 1a       	sub	r12, r24
    15d6:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    15d8:	f4 01       	movw	r30, r8
    15da:	d6 cf       	rjmp	.-84     	; 0x1588 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:86

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    15dc:	8e 0d       	add	r24, r14
    15de:	9f 1d       	adc	r25, r15
    15e0:	fc 01       	movw	r30, r24
    15e2:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:88
  return dest;
}
    15e4:	c7 01       	movw	r24, r14
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	8f 90       	pop	r8
    15fe:	7f 90       	pop	r7
    1600:	6f 90       	pop	r6
    1602:	08 95       	ret

00001604 <Config::getFormattedStr(unsigned char) [clone .constprop.69]>:
getFormattedStr():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:74
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    1604:	8f 92       	push	r8
    1606:	9f 92       	push	r9
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	65 97       	sbiw	r28, 0x15	; 21
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:78
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    162c:	82 50       	subi	r24, 0x02	; 2
    162e:	84 31       	cpi	r24, 0x14	; 20
    1630:	08 f0       	brcs	.+2      	; 0x1634 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x30>
    1632:	ce c1       	rjmp	.+924    	; 0x19d0 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x3cc>
    1634:	e8 2f       	mov	r30, r24
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	e0 5e       	subi	r30, 0xE0	; 224
    163a:	f4 4f       	sbci	r31, 0xF4	; 244
    163c:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__tablejump2__>
    1640:	34 0b       	sbc	r19, r20
    1642:	9e 0b       	sbc	r25, r30
    1644:	e8 0c       	add	r14, r8
    1646:	fe 0b       	sbc	r31, r30
    1648:	2a 0c       	add	r2, r10
    164a:	49 0c       	add	r4, r9
    164c:	56 0c       	add	r5, r6
    164e:	e8 0c       	add	r14, r8
    1650:	5f 0c       	add	r5, r15
    1652:	84 0c       	add	r8, r4
    1654:	e8 0c       	add	r14, r8
    1656:	8d 0c       	add	r8, r13
    1658:	9a 0c       	add	r9, r10
    165a:	a8 0c       	add	r10, r8
    165c:	ca 0c       	add	r12, r10
    165e:	cf 0c       	add	r12, r15
    1660:	e8 0c       	add	r14, r8
    1662:	e5 0c       	add	r14, r5
    1664:	e0 0c       	add	r14, r0
    1666:	db 0c       	add	r13, r11
toDateStr():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:49
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1668:	1d 8a       	std	Y+21, r1	; 0x15
    166a:	1c 8a       	std	Y+20, r1	; 0x14
    166c:	8f e2       	ldi	r24, 0x2F	; 47
    166e:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:53
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1670:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <StDate>
    1674:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <StDate+0x1>
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:54
  lpad(dat, intbuf, '0', 2);
    1680:	8e 01       	movw	r16, r28
    1682:	0f 5e       	subi	r16, 0xEF	; 239
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	42 e0       	ldi	r20, 0x02	; 2
    1688:	be 01       	movw	r22, r28
    168a:	6f 5f       	subi	r22, 0xFF	; 255
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	c8 01       	movw	r24, r16
    1690:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:55
  inttostr(intbuf, StMonth);
    1694:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <StMonth>
    1698:	70 91 28 03 	lds	r23, 0x0328	; 0x800328 <StMonth+0x1>
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:56
  lpad(mon, intbuf, '0', 2);
    16a4:	7e 01       	movw	r14, r28
    16a6:	8e e0       	ldi	r24, 0x0E	; 14
    16a8:	e8 0e       	add	r14, r24
    16aa:	f1 1c       	adc	r15, r1
    16ac:	42 e0       	ldi	r20, 0x02	; 2
    16ae:	be 01       	movw	r22, r28
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	c7 01       	movw	r24, r14
    16b6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:57
  inttostr(intbuf, StYear);
    16ba:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <StYear>
    16be:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <StYear+0x1>
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:58
  lpad(year, intbuf, '0', 4);
    16ca:	6e 01       	movw	r12, r28
    16cc:	99 e0       	ldi	r25, 0x09	; 9
    16ce:	c9 0e       	add	r12, r25
    16d0:	d1 1c       	adc	r13, r1
    16d2:	44 e0       	ldi	r20, 0x04	; 4
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	c6 01       	movw	r24, r12
    16dc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:60

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    16e0:	df 92       	push	r13
    16e2:	cf 92       	push	r12
    16e4:	ce 01       	movw	r24, r28
    16e6:	44 96       	adiw	r24, 0x14	; 20
    16e8:	9f 93       	push	r25
    16ea:	8f 93       	push	r24
    16ec:	ff 92       	push	r15
    16ee:	ef 92       	push	r14
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	1f 93       	push	r17
    16f6:	0f 93       	push	r16
    16f8:	85 e0       	ldi	r24, 0x05	; 5
    16fa:	8f 93       	push	r24
    16fc:	8b e5       	ldi	r24, 0x5B	; 91
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
toTimeStr():
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
getFormattedStr():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:143
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1712:	8b e5       	ldi	r24, 0x5B	; 91
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	65 96       	adiw	r28, 0x15	; 21
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	8f 90       	pop	r8
    173a:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:84
  {
  case mnuCmdSetDate:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    173c:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <StHr>
    1740:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <StHr+0x1>
    1744:	2c e3       	ldi	r18, 0x3C	; 60
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	0e 94 a5 20 	call	0x414a	; 0x414a <__usmulhisi3>
    174c:	00 91 57 03 	lds	r16, 0x0357	; 0x800357 <StMin>
    1750:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <StMin+0x1>
    1754:	01 2e       	mov	r0, r17
    1756:	00 0c       	add	r0, r0
    1758:	22 0b       	sbc	r18, r18
    175a:	33 0b       	sbc	r19, r19
    175c:	60 0f       	add	r22, r16
    175e:	71 1f       	adc	r23, r17
    1760:	82 1f       	adc	r24, r18
    1762:	93 1f       	adc	r25, r19
toTimeStr():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:29
  DataYear = 2022;
}

char *toTimeStr(char *buf, long timeval, char separator)
{
  char sepstr[] = {separator, 0};
    1764:	1a 8a       	std	Y+18, r1	; 0x12
    1766:	19 8a       	std	Y+17, r1	; 0x11
    1768:	2a e3       	ldi	r18, 0x3A	; 58
    176a:	29 8b       	std	Y+17, r18	; 0x11
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:31

  short hours = timeval / 60;
    176c:	2c e3       	ldi	r18, 0x3C	; 60
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__divmodsi4>
    1778:	4b 01       	movw	r8, r22
    177a:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:33
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    177c:	2d 30       	cpi	r18, 0x0D	; 13
    177e:	31 05       	cpc	r19, r1
    1780:	14 f0       	brlt	.+4      	; 0x1786 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x182>
    1782:	2c 50       	subi	r18, 0x0C	; 12
    1784:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:38
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    1786:	b9 01       	movw	r22, r18
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:39
  lpad(h, intbuf, '0', 2);
    1790:	8e 01       	movw	r16, r28
    1792:	02 5f       	subi	r16, 0xF2	; 242
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	42 e0       	ldi	r20, 0x02	; 2
    1798:	be 01       	movw	r22, r28
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	c8 01       	movw	r24, r16
    17a0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:40
  inttostr(intbuf, mins);
    17a4:	b4 01       	movw	r22, r8
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:41
  lpad(m, intbuf, '0', 2);
    17ae:	6e 01       	movw	r12, r28
    17b0:	89 e0       	ldi	r24, 0x09	; 9
    17b2:	c8 0e       	add	r12, r24
    17b4:	d1 1c       	adc	r13, r1
    17b6:	42 e0       	ldi	r20, 0x02	; 2
    17b8:	be 01       	movw	r22, r28
    17ba:	6f 5f       	subi	r22, 0xFF	; 255
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	c6 01       	movw	r24, r12
    17c0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:43

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    17c4:	9c e0       	ldi	r25, 0x0C	; 12
    17c6:	e9 16       	cp	r14, r25
    17c8:	f1 04       	cpc	r15, r1
    17ca:	ac f4       	brge	.+42     	; 0x17f6 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x1f2>
getFormattedStr():
    17cc:	86 e7       	ldi	r24, 0x76	; 118
    17ce:	91 e0       	ldi	r25, 0x01	; 1
toTimeStr():
    17d0:	9f 93       	push	r25
    17d2:	8f 93       	push	r24
    17d4:	df 92       	push	r13
    17d6:	cf 92       	push	r12
    17d8:	ce 01       	movw	r24, r28
    17da:	41 96       	adiw	r24, 0x11	; 17
    17dc:	9f 93       	push	r25
    17de:	8f 93       	push	r24
    17e0:	1f 93       	push	r17
    17e2:	0f 93       	push	r16
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	8f 93       	push	r24
    17e8:	8b e5       	ldi	r24, 0x5B	; 91
    17ea:	93 e0       	ldi	r25, 0x03	; 3
    17ec:	9f 93       	push	r25
    17ee:	8f 93       	push	r24
    17f0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    17f4:	89 cf       	rjmp	.-238    	; 0x1708 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x104>
getFormattedStr():
    17f6:	8f e6       	ldi	r24, 0x6F	; 111
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	ea cf       	rjmp	.-44     	; 0x17d0 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x1cc>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:87
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    17fc:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <config+0xf>
    1800:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <config+0x10>
    1804:	6d 30       	cpi	r22, 0x0D	; 13
    1806:	71 05       	cpc	r23, r1
    1808:	14 f0       	brlt	.+4      	; 0x180e <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x20a>
    180a:	6c 50       	subi	r22, 0x0C	; 12
    180c:	71 09       	sbc	r23, r1
    180e:	ce 01       	movw	r24, r28
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:88
    lpad(h, intbuf, '0', 2);
    1816:	8e 01       	movw	r16, r28
    1818:	07 5f       	subi	r16, 0xF7	; 247
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	42 e0       	ldi	r20, 0x02	; 2
    181e:	be 01       	movw	r22, r28
    1820:	6f 5f       	subi	r22, 0xFF	; 255
    1822:	7f 4f       	sbci	r23, 0xFF	; 255
    1824:	c8 01       	movw	r24, r16
    1826:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:89
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    182a:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0xf>
    182e:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x10>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:94
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1832:	0c 97       	sbiw	r24, 0x0c	; 12
    1834:	5c f5       	brge	.+86     	; 0x188c <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x288>
    1836:	83 e7       	ldi	r24, 0x73	; 115
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	9f 93       	push	r25
    183c:	8f 93       	push	r24
    183e:	1f 93       	push	r17
    1840:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	8f 93       	push	r24
    1846:	8b e5       	ldi	r24, 0x5B	; 91
    1848:	93 e0       	ldi	r25, 0x03	; 3
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    1852:	5a cf       	rjmp	.-332    	; 0x1708 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x104>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:92
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    1854:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <config+0x11>
    1858:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <config+0x12>
    185c:	6d 30       	cpi	r22, 0x0D	; 13
    185e:	71 05       	cpc	r23, r1
    1860:	14 f0       	brlt	.+4      	; 0x1866 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x262>
    1862:	6c 50       	subi	r22, 0x0C	; 12
    1864:	71 09       	sbc	r23, r1
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:93
    lpad(h, intbuf, '0', 2);
    186e:	8e 01       	movw	r16, r28
    1870:	07 5f       	subi	r16, 0xF7	; 247
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	42 e0       	ldi	r20, 0x02	; 2
    1876:	be 01       	movw	r22, r28
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	c8 01       	movw	r24, r16
    187e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:94
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1882:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x11>
    1886:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <config+0x12>
    188a:	d3 cf       	rjmp	.-90     	; 0x1832 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x22e>
    188c:	8c e6       	ldi	r24, 0x6C	; 108
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	d4 cf       	rjmp	.-88     	; 0x183a <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x236>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:97
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    1892:	60 91 43 03 	lds	r22, 0x0343	; 0x800343 <config+0x18>
    1896:	70 91 44 03 	lds	r23, 0x0344	; 0x800344 <config+0x19>
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
    18a2:	2e e7       	ldi	r18, 0x7E	; 126
    18a4:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    18a6:	3f 93       	push	r19
    18a8:	2f 93       	push	r18
    18aa:	34 c0       	rjmp	.+104    	; 0x1914 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x310>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:100
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    18ac:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    18b0:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    18b4:	ce 01       	movw	r24, r28
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
    18bc:	76 c0       	rjmp	.+236    	; 0x19aa <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x3a6>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:103
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    18be:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <demoTime>
    18c2:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <demoTime+0x1>
    18c6:	b8 01       	movw	r22, r16
    18c8:	0d 30       	cpi	r16, 0x0D	; 13
    18ca:	11 05       	cpc	r17, r1
    18cc:	14 f0       	brlt	.+4      	; 0x18d2 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2ce>
    18ce:	6c 50       	subi	r22, 0x0C	; 12
    18d0:	71 09       	sbc	r23, r1
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:104
    lpad(h, intbuf, '0', 2);
    18da:	7e 01       	movw	r14, r28
    18dc:	99 e0       	ldi	r25, 0x09	; 9
    18de:	e9 0e       	add	r14, r25
    18e0:	f1 1c       	adc	r15, r1
    18e2:	42 e0       	ldi	r20, 0x02	; 2
    18e4:	be 01       	movw	r22, r28
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	c7 01       	movw	r24, r14
    18ec:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:105
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    18f0:	83 e7       	ldi	r24, 0x73	; 115
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	0c 30       	cpi	r16, 0x0C	; 12
    18f6:	11 05       	cpc	r17, r1
    18f8:	14 f0       	brlt	.+4      	; 0x18fe <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2fa>
    18fa:	8c e6       	ldi	r24, 0x6C	; 108
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	9f 93       	push	r25
    1900:	8f 93       	push	r24
    1902:	ff 92       	push	r15
    1904:	ef 92       	push	r14
    1906:	9d cf       	rjmp	.-198    	; 0x1842 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x23e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:108
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1908:	85 e8       	ldi	r24, 0x85	; 133
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	8d e8       	ldi	r24, 0x8D	; 141
    1912:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	94 cf       	rjmp	.-216    	; 0x1842 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x23e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:111
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    191a:	60 91 4b 03 	lds	r22, 0x034B	; 0x80034b <config+0x20>
    191e:	70 91 4c 03 	lds	r23, 0x034C	; 0x80034c <config+0x21>
    1922:	63 30       	cpi	r22, 0x03	; 3
    1924:	71 05       	cpc	r23, r1
    1926:	09 f0       	breq	.+2      	; 0x192a <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x326>
    1928:	5a c0       	rjmp	.+180    	; 0x19de <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x3da>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    192a:	25 e2       	ldi	r18, 0x25	; 37
    192c:	32 e0       	ldi	r19, 0x02	; 2
    192e:	8a e7       	ldi	r24, 0x7A	; 122
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	b9 cf       	rjmp	.-142    	; 0x18a6 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2a2>
    1934:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <config+0x24>
    1938:	70 91 50 03 	lds	r23, 0x0350	; 0x800350 <config+0x25>
    193c:	63 30       	cpi	r22, 0x03	; 3
    193e:	71 05       	cpc	r23, r1
    1940:	a1 f3       	breq	.-24     	; 0x192a <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x326>
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
    194a:	2f e6       	ldi	r18, 0x6F	; 111
    194c:	31 e0       	ldi	r19, 0x01	; 1
    194e:	ab cf       	rjmp	.-170    	; 0x18a6 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2a2>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:117
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1950:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <config+0x28>
    1954:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <config+0x29>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:122
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:123
    lpad(h, intbuf, '0', 3);
    1960:	8e 01       	movw	r16, r28
    1962:	07 5f       	subi	r16, 0xF7	; 247
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	43 e0       	ldi	r20, 0x03	; 3
    1968:	be 01       	movw	r22, r28
    196a:	6f 5f       	subi	r22, 0xFF	; 255
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	c8 01       	movw	r24, r16
    1970:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:124
    fmt(strbuf, 1, h);
    1974:	1f 93       	push	r17
    1976:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	8f 93       	push	r24
    197c:	8b e5       	ldi	r24, 0x5B	; 91
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	bf ce       	rjmp	.-642    	; 0x1712 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x10e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:122
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1994:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <config+0x2a>
    1998:	70 91 56 03 	lds	r23, 0x0356	; 0x800356 <config+0x2b>
    199c:	dd cf       	rjmp	.-70     	; 0x1958 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x354>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:127
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    199e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <config+0x17>
    19a2:	88 23       	and	r24, r24
    19a4:	29 f0       	breq	.+10     	; 0x19b0 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x3ac>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    19aa:	9f 93       	push	r25
    19ac:	8f 93       	push	r24
    19ae:	e4 cf       	rjmp	.-56     	; 0x1978 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x374>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:127
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    19b0:	8a e7       	ldi	r24, 0x7A	; 122
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	fa cf       	rjmp	.-12     	; 0x19aa <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x3a6>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:130
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    19b6:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <config+0x1e>
    19ba:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <config+0x1f>
    19be:	7a cf       	rjmp	.-268    	; 0x18b4 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2b0>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    19c0:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <config+0x1c>
    19c4:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <config+0x1d>
    19c8:	75 cf       	rjmp	.-278    	; 0x18b4 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2b0>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:136
    break;      
  case mnuCmdReset:
    strbuf[0] = 0;
    19ca:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <strbuf>
    19ce:	a1 ce       	rjmp	.-702    	; 0x1712 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x10e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:139
    break;
  default:
    strcpy(strbuf, NotImp);
    19d0:	66 e3       	ldi	r22, 0x36	; 54
    19d2:	71 e0       	ldi	r23, 0x01	; 1
    19d4:	8b e5       	ldi	r24, 0x5B	; 91
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
    19dc:	9a ce       	rjmp	.-716    	; 0x1712 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x10e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:111
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    19de:	ce 01       	movw	r24, r28
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
    19e6:	26 e7       	ldi	r18, 0x76	; 118
    19e8:	31 e0       	ldi	r19, 0x01	; 1
    19ea:	5d cf       	rjmp	.-326    	; 0x18a6 <Config::getFormattedStr(unsigned char) [clone .constprop.69]+0x2a2>

000019ec <PlayChant()>:
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:877
    }
}

int n = 1;
void PlayChant()
{
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:879
    // Serial.println(String(hr));
    switch (playSong)
    19f4:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <playSong>
    19f8:	e9 30       	cpi	r30, 0x09	; 9
    19fa:	08 f5       	brcc	.+66     	; 0x1a3e <PlayChant()+0x52>
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	ed 5f       	subi	r30, 0xFD	; 253
    1a00:	f2 4f       	sbci	r31, 0xF2	; 242
    1a02:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__tablejump2__>
    1a06:	0c 0d       	add	r16, r12
    1a08:	24 0d       	add	r18, r4
    1a0a:	38 0d       	add	r19, r8
    1a0c:	4c 0d       	add	r20, r12
    1a0e:	60 0d       	add	r22, r0
    1a10:	77 0d       	add	r23, r7
    1a12:	b0 0d       	add	r27, r0
    1a14:	07 0e       	add	r0, r23
    1a16:	11 0e       	add	r1, r17
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:882
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1a1e:	89 2b       	or	r24, r25
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <PlayChant()+0x52>
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	82 e1       	ldi	r24, 0x12	; 18
    1a28:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:885
        {
            myDFPlayer.playMp3Folder(0);
            delay(1000);
    1a2c:	68 ee       	ldi	r22, 0xE8	; 232
    1a2e:	73 e0       	ldi	r23, 0x03	; 3
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:886
            playSong = Time;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:973
    case Song_2:
        // if (digitalRead(STA_PIN))
        // {
        //     myDFPlayer.playFolder(6,random(1,config.Song2_Count));
        //     delay(1000);
            playSong = End_of_Song;
    1a3a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <playSong>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:987
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:890
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    1a48:	84 e0       	ldi	r24, 0x04	; 4
    1a4a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1a4e:	89 2b       	or	r24, r25
    1a50:	b1 f3       	breq	.-20     	; 0x1a3e <PlayChant()+0x52>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
    1a52:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <bell+0x3>
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	71 60       	ori	r23, 0x01	; 1
    1a5a:	8f e0       	ldi	r24, 0x0F	; 15
    1a5c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:893
        {
            myDFPlayer.playFolder(1, bell.hour());
            delay(1000);
    1a60:	68 ee       	ldi	r22, 0xE8	; 232
    1a62:	73 e0       	ldi	r23, 0x03	; 3
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:894
            playSong = English_Month;
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	e5 cf       	rjmp	.-54     	; 0x1a3a <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:898
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    1a70:	84 e0       	ldi	r24, 0x04	; 4
    1a72:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1a76:	89 2b       	or	r24, r25
    1a78:	11 f3       	breq	.-60     	; 0x1a3e <PlayChant()+0x52>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
    1a7a:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <bell+0x1>
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	7f 62       	ori	r23, 0x2F	; 47
    1a82:	8f e0       	ldi	r24, 0x0F	; 15
    1a84:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:901
        {
            myDFPlayer.playFolder(47, bell.month());
            delay(1000);
    1a88:	68 ee       	ldi	r22, 0xE8	; 232
    1a8a:	73 e0       	ldi	r23, 0x03	; 3
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:902
            playSong = English_Date;
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	d1 cf       	rjmp	.-94     	; 0x1a3a <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:906
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	71 f2       	breq	.-100    	; 0x1a3e <PlayChant()+0x52>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
    1aa2:	60 91 6d 04 	lds	r22, 0x046D	; 0x80046d <bell+0x2>
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	70 63       	ori	r23, 0x30	; 48
    1aaa:	8f e0       	ldi	r24, 0x0F	; 15
    1aac:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:909
        {
            myDFPlayer.playFolder(48, bell.day());
            delay(1000);
    1ab0:	68 ee       	ldi	r22, 0xE8	; 232
    1ab2:	73 e0       	ldi	r23, 0x03	; 3
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:910
            playSong = Day_of_Week;
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	bd cf       	rjmp	.-134    	; 0x1a3a <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:914
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1ac6:	89 2b       	or	r24, r25
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <PlayChant()+0xe0>
    1aca:	b9 cf       	rjmp	.-142    	; 0x1a3e <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:916
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <DateTime::dayOfTheWeek() const [clone .constprop.20]>
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
    1ad2:	68 2f       	mov	r22, r24
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	71 63       	ori	r23, 0x31	; 49
    1ad8:	8f e0       	ldi	r24, 0x0F	; 15
    1ada:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:917
            delay(1000);
    1ade:	68 ee       	ldi	r22, 0xE8	; 232
    1ae0:	73 e0       	ldi	r23, 0x03	; 3
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:918
            playSong = Tamil_Date;
    1aea:	85 e0       	ldi	r24, 0x05	; 5
    1aec:	a6 cf       	rjmp	.-180    	; 0x1a3a <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:922
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1af4:	89 2b       	or	r24, r25
    1af6:	09 f4       	brne	.+2      	; 0x1afa <PlayChant()+0x10e>
    1af8:	a2 cf       	rjmp	.-188    	; 0x1a3e <PlayChant()+0x52>
    1afa:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <bell+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:924
        {
            if (bell.hour() == 6 || bell.hour() == 8 || bell.hour() == 10)
    1afe:	86 30       	cpi	r24, 0x06	; 6
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <PlayChant()+0x11c>
    1b02:	8d 7f       	andi	r24, 0xFD	; 253
    1b04:	88 30       	cpi	r24, 0x08	; 8
    1b06:	e1 f4       	brne	.+56     	; 0x1b40 <PlayChant()+0x154>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    1b08:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <bell>
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	80 53       	subi	r24, 0x30	; 48
    1b10:	98 4f       	sbci	r25, 0xF8	; 248
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:926
            {
                if (bell.year() == config.DataYear)
    1b12:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <config+0x1c>
    1b16:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <config+0x1d>
    1b1a:	28 17       	cp	r18, r24
    1b1c:	39 07       	cpc	r19, r25
    1b1e:	91 f4       	brne	.+36     	; 0x1b44 <PlayChant()+0x158>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:928
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    1b20:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <bell+0x1>
    1b24:	6e 5c       	subi	r22, 0xCE	; 206
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
    1b26:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <bell+0x2>
    1b2a:	76 2f       	mov	r23, r22
    1b2c:	68 2f       	mov	r22, r24
    1b2e:	8f e0       	ldi	r24, 0x0F	; 15
    1b30:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:934
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
                    delay(1000);
    1b34:	68 ee       	ldi	r22, 0xE8	; 232
    1b36:	73 e0       	ldi	r23, 0x03	; 3
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:940
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    1b40:	86 e0       	ldi	r24, 0x06	; 6
    1b42:	7b cf       	rjmp	.-266    	; 0x1a3a <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:931
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    1b44:	21 50       	subi	r18, 0x01	; 1
    1b46:	31 09       	sbc	r19, r1
    1b48:	28 17       	cp	r18, r24
    1b4a:	39 07       	cpc	r19, r25
    1b4c:	c9 f7       	brne	.-14     	; 0x1b40 <PlayChant()+0x154>
    1b4e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <bell+0x1>
    1b52:	8c 30       	cpi	r24, 0x0C	; 12
    1b54:	a9 f7       	brne	.-22     	; 0x1b40 <PlayChant()+0x154>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
    1b56:	60 91 6d 04 	lds	r22, 0x046D	; 0x80046d <bell+0x2>
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	72 63       	ori	r23, 0x32	; 50
    1b5e:	e7 cf       	rjmp	.-50     	; 0x1b2e <PlayChant()+0x142>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:946
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1b66:	89 2b       	or	r24, r25
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <PlayChant()+0x180>
    1b6a:	69 cf       	rjmp	.-302    	; 0x1a3e <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:948
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    1b6c:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <config+0x20>
    1b70:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <config+0x21>
    1b74:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <bell+0x3>
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	28 17       	cp	r18, r24
    1b7c:	39 07       	cpc	r19, r25
    1b7e:	19 f4       	brne	.+6      	; 0x1b86 <PlayChant()+0x19a>
    1b80:	23 30       	cpi	r18, 0x03	; 3
    1b82:	31 05       	cpc	r19, r1
    1b84:	a9 f5       	brne	.+106    	; 0x1bf0 <PlayChant()+0x204>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:954
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1b86:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <config+0x24>
    1b8a:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <config+0x25>
    1b8e:	a9 01       	movw	r20, r18
    1b90:	44 5f       	subi	r20, 0xF4	; 244
    1b92:	5f 4f       	sbci	r21, 0xFF	; 255
    1b94:	84 17       	cp	r24, r20
    1b96:	95 07       	cpc	r25, r21
    1b98:	e1 f1       	breq	.+120    	; 0x1c12 <PlayChant()+0x226>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:962
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
    1b9a:	c0 90 43 03 	lds	r12, 0x0343	; 0x800343 <config+0x18>
    1b9e:	d0 90 44 03 	lds	r13, 0x0344	; 0x800344 <config+0x19>
    1ba2:	0d 2c       	mov	r0, r13
    1ba4:	00 0c       	add	r0, r0
    1ba6:	ee 08       	sbc	r14, r14
    1ba8:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	c8 16       	cp	r12, r24
    1bb6:	d1 04       	cpc	r13, r1
    1bb8:	e1 04       	cpc	r14, r1
    1bba:	f1 04       	cpc	r15, r1
    1bbc:	74 f0       	brlt	.+28     	; 0x1bda <PlayChant()+0x1ee>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1bbe:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    1bc2:	a7 01       	movw	r20, r14
    1bc4:	96 01       	movw	r18, r12
    1bc6:	21 50       	subi	r18, 0x01	; 1
    1bc8:	31 09       	sbc	r19, r1
    1bca:	41 09       	sbc	r20, r1
    1bcc:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1bce:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1bd2:	6f 5f       	subi	r22, 0xFF	; 255
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    1bda:	82 e1       	ldi	r24, 0x12	; 18
    1bdc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:963
                delay(1000);
    1be0:	68 ee       	ldi	r22, 0xE8	; 232
    1be2:	73 e0       	ldi	r23, 0x03	; 3
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:964
                playSong = Song_2;
    1bec:	87 e0       	ldi	r24, 0x07	; 7
    1bee:	25 cf       	rjmp	.-438    	; 0x1a3a <PlayChant()+0x4e>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
    1bf0:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <config+0x28>
    1bf4:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <config+0x29>
    1bf8:	77 27       	eor	r23, r23
    1bfa:	72 60       	ori	r23, 0x02	; 2
    1bfc:	8f e0       	ldi	r24, 0x0F	; 15
    1bfe:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:957
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
                delay(1000);
    1c02:	68 ee       	ldi	r22, 0xE8	; 232
    1c04:	73 e0       	ldi	r23, 0x03	; 3
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:973
    case Song_2:
        // if (digitalRead(STA_PIN))
        // {
        //     myDFPlayer.playFolder(6,random(1,config.Song2_Count));
        //     delay(1000);
            playSong = End_of_Song;
    1c0e:	88 e0       	ldi	r24, 0x08	; 8
    1c10:	14 cf       	rjmp	.-472    	; 0x1a3a <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:954
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1c12:	23 30       	cpi	r18, 0x03	; 3
    1c14:	31 05       	cpc	r19, r1
    1c16:	09 f2       	breq	.-126    	; 0x1b9a <PlayChant()+0x1ae>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73
    1c18:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <config+0x2a>
    1c1c:	70 91 56 03 	lds	r23, 0x0356	; 0x800356 <config+0x2b>
    1c20:	eb cf       	rjmp	.-42     	; 0x1bf8 <PlayChant()+0x20c>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:977
        //     delay(1000);
            playSong = End_of_Song;
        // }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1c28:	89 2b       	or	r24, r25
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <PlayChant()+0x242>
    1c2c:	08 cf       	rjmp	.-496    	; 0x1a3e <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:979
        {
            playSong = Starting_Song;
    1c2e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <playSong>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:980
            lcd.clear();
    1c32:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:981
            appMode = APP_NORMAL_MODE;
    1c36:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:982
            timrLCD = millis();
    1c3a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    1c3e:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timrLCD>
    1c42:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timrLCD+0x1>
    1c46:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timrLCD+0x2>
    1c4a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:983
            digitalWrite(AMP, LOW);
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:987
        }
        break;
    }
}
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:983
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    1c5a:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <digitalWrite>

00001c5e <refreshMenuDisplay(unsigned char)>:
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:835
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	67 97       	sbiw	r28, 0x17	; 23
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:838
    char nameBuf[LCD_COLS + 1];

    lcd.setCursor(0, 0);
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:839
    if (Menu1.currentItemHasChildren())
    1c7c:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.93]>
    1c80:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <Menu1+0x6>
    1c84:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <Menu1+0x3>
    1c88:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <Menu1+0x4>
    1c8c:	88 23       	and	r24, r24
    1c8e:	49 f1       	breq	.+82     	; 0x1ce2 <refreshMenuDisplay(unsigned char)+0x84>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    1c90:	86 e0       	ldi	r24, 0x06	; 6
    1c92:	98 9f       	mul	r25, r24
    1c94:	e0 0d       	add	r30, r0
    1c96:	f1 1d       	adc	r31, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	31 96       	adiw	r30, 0x01	; 1
    1c9c:	65 91       	lpm	r22, Z+
    1c9e:	74 91       	lpm	r23, Z
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <strcpy_P>
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:841
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1ca8:	0e 94 a5 09 	call	0x134a	; 0x134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:842
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    1cac:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:854
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1cae:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:855
            lcd.print(strbuf);
    1cb2:	8a ee       	ldi	r24, 0xEA	; 234
    1cb4:	93 e0       	ldi	r25, 0x03	; 3
    1cb6:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:856
            lcd.setCursor(0, 1);
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:857
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    1cc2:	81 e2       	ldi	r24, 0x21	; 33
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:870
                StYear = rtc.now().year();
            }
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1cc6:	0e 94 a5 09 	call	0x134a	; 0x134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    1cca:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:873
        }
    }
}
    1cce:	67 96       	adiw	r28, 0x17	; 23
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	08 95       	ret
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:53
    1ce2:	86 e0       	ldi	r24, 0x06	; 6
    1ce4:	98 9f       	mul	r25, r24
    1ce6:	e0 0d       	add	r30, r0
    1ce8:	f1 1d       	adc	r31, r1
    1cea:	11 24       	eor	r1, r1
    1cec:	31 96       	adiw	r30, 0x01	; 1
    1cee:	65 91       	lpm	r22, Z+
    1cf0:	74 91       	lpm	r23, Z
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <strcpy_P>
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:850
        lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
    }
    else
    {
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1cfa:	0e 94 a5 09 	call	0x134a	; 0x134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:852

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    1cfe:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
    1d02:	18 2f       	mov	r17, r24
    1d04:	81 11       	cpse	r24, r1
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <refreshMenuDisplay(unsigned char)+0xae>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:854
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1d08:	8f e7       	ldi	r24, 0x7F	; 127
    1d0a:	d1 cf       	rjmp	.-94     	; 0x1cae <refreshMenuDisplay(unsigned char)+0x50>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:861
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            if (cmdId == mnuCmdSetDate)
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	01 f5       	brne	.+64     	; 0x1d50 <refreshMenuDisplay(unsigned char)+0xf2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:863
            {
                StDate = rtc.now().day();
    1d10:	ce 01       	movw	r24, r28
    1d12:	42 96       	adiw	r24, 0x12	; 18
    1d14:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    1d18:	8c 89       	ldd	r24, Y+20	; 0x14
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <StDate+0x1>
    1d20:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:864
                StMonth = rtc.now().month();
    1d24:	ce 01       	movw	r24, r28
    1d26:	42 96       	adiw	r24, 0x12	; 18
    1d28:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    1d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <StMonth+0x1>
    1d34:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:865
                StYear = rtc.now().year();
    1d38:	ce 01       	movw	r24, r28
    1d3a:	42 96       	adiw	r24, 0x12	; 18
    1d3c:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    1d40:	8a 89       	ldd	r24, Y+18	; 0x12
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	80 53       	subi	r24, 0x30	; 48
    1d46:	98 4f       	sbci	r25, 0xF8	; 248
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:865
    1d48:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <StYear+0x1>
    1d4c:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <StYear>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:867
            }
            lcd.print(strbuf);
    1d50:	8a ee       	ldi	r24, 0xEA	; 234
    1d52:	93 e0       	ldi	r25, 0x03	; 3
    1d54:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:868
            lcd.setCursor(0, 1);
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:869
            lcd.print(" ");
    1d60:	84 e2       	ldi	r24, 0x24	; 36
    1d62:	92 e0       	ldi	r25, 0x02	; 2
    1d64:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:870
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1d68:	81 2f       	mov	r24, r17
    1d6a:	0e 94 02 0b 	call	0x1604	; 0x1604 <Config::getFormattedStr(unsigned char) [clone .constprop.69]>
    1d6e:	ab cf       	rjmp	.-170    	; 0x1cc6 <refreshMenuDisplay(unsigned char)+0x68>

00001d70 <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	8f 93       	push	r24
    1d80:	9f 93       	push	r25
    1d82:	af 93       	push	r26
    1d84:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1d86:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_millis>
    1d8a:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_millis+0x1>
    1d8e:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_millis+0x2>
    1d92:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1d96:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1d9a:	23 e0       	ldi	r18, 0x03	; 3
    1d9c:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1d9e:	2d 37       	cpi	r18, 0x7D	; 125
    1da0:	68 f1       	brcs	.+90     	; 0x1dfc <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1da2:	26 e8       	ldi	r18, 0x86	; 134
    1da4:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1da6:	02 96       	adiw	r24, 0x02	; 2
    1da8:	a1 1d       	adc	r26, r1
    1daa:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1dac:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1db0:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <timer0_millis>
    1db4:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <timer0_millis+0x1>
    1db8:	a0 93 c7 02 	sts	0x02C7, r26	; 0x8002c7 <timer0_millis+0x2>
    1dbc:	b0 93 c8 02 	sts	0x02C8, r27	; 0x8002c8 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1dc0:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <timer0_overflow_count>
    1dc4:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <timer0_overflow_count+0x1>
    1dc8:	a0 91 cb 02 	lds	r26, 0x02CB	; 0x8002cb <timer0_overflow_count+0x2>
    1dcc:	b0 91 cc 02 	lds	r27, 0x02CC	; 0x8002cc <timer0_overflow_count+0x3>
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	a1 1d       	adc	r26, r1
    1dd4:	b1 1d       	adc	r27, r1
    1dd6:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <timer0_overflow_count>
    1dda:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <timer0_overflow_count+0x1>
    1dde:	a0 93 cb 02 	sts	0x02CB, r26	; 0x8002cb <timer0_overflow_count+0x2>
    1de2:	b0 93 cc 02 	sts	0x02CC, r27	; 0x8002cc <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	b1 1d       	adc	r27, r1
    1e02:	d4 cf       	rjmp	.-88     	; 0x1dac <__vector_16+0x3c>

00001e04 <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	2f 93       	push	r18
    1e10:	3f 93       	push	r19
    1e12:	4f 93       	push	r20
    1e14:	5f 93       	push	r21
    1e16:	6f 93       	push	r22
    1e18:	7f 93       	push	r23
    1e1a:	8f 93       	push	r24
    1e1c:	9f 93       	push	r25
    1e1e:	af 93       	push	r26
    1e20:	bf 93       	push	r27
    1e22:	ef 93       	push	r30
    1e24:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1e26:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
    1e2a:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    1e2e:	30 97       	sbiw	r30, 0x00	; 0
    1e30:	49 f0       	breq	.+18     	; 0x1e44 <__vector_3+0x40>
    1e32:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e34:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e36:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1e38:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e3a:	91 ff       	sbrs	r25, 1
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e3e:	9c 91       	ld	r25, X
    1e40:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1e42:	a1 f4       	brne	.+40     	; 0x1e6c <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e66:	9c 91       	ld	r25, X
    1e68:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1e6a:	61 f7       	brne	.-40     	; 0x1e44 <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1e6c:	a3 89       	ldd	r26, Z+19	; 0x13
    1e6e:	b4 89       	ldd	r27, Z+20	; 0x14
    1e70:	9c 91       	ld	r25, X
    1e72:	85 89       	ldd	r24, Z+21	; 0x15
    1e74:	80 95       	com	r24
    1e76:	89 23       	and	r24, r25
    1e78:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    1e7a:	86 89       	ldd	r24, Z+22	; 0x16
    1e7c:	97 89       	ldd	r25, Z+23	; 0x17
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    1e82:	60 8d       	ldd	r22, Z+24	; 0x18
    1e84:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e86:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e88:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e8a:	55 85       	ldd	r21, Z+13	; 0x0d
    1e8c:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    1e90:	cb 01       	movw	r24, r22
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    1e96:	82 2f       	mov	r24, r18
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	95 95       	asr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1ea0:	4c 91       	ld	r20, X
    1ea2:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    1ea6:	20 68       	ori	r18, 0x80	; 128
    1ea8:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    1eaa:	91 f7       	brne	.-28     	; 0x1e90 <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    1eac:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eae:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    1eb0:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    1eb2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	8f 73       	andi	r24, 0x3F	; 63
    1ebc:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    1ebe:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
    1ec2:	38 17       	cp	r19, r24
    1ec4:	99 f0       	breq	.+38     	; 0x1eec <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    1ec6:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	ac 57       	subi	r26, 0x7C	; 124
    1ece:	bd 4f       	sbci	r27, 0xFD	; 253
    1ed0:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    1ed2:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    1ed6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ed8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    1ede:	a3 89       	ldd	r26, Z+19	; 0x13
    1ee0:	b4 89       	ldd	r27, Z+20	; 0x14
    1ee2:	8c 91       	ld	r24, X
    1ee4:	95 89       	ldd	r25, Z+21	; 0x15
    1ee6:	89 2b       	or	r24, r25
    1ee8:	8c 93       	st	X, r24
    1eea:	ac cf       	rjmp	.-168    	; 0x1e44 <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    1eec:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eee:	81 60       	ori	r24, 0x01	; 1
    1ef0:	86 8f       	std	Z+30, r24	; 0x1e
    1ef2:	f1 cf       	rjmp	.-30     	; 0x1ed6 <__vector_3+0xd2>

00001ef4 <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    1ef4:	1f 92       	push	r1
    1ef6:	0f 92       	push	r0
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	0f 92       	push	r0
    1efc:	11 24       	eor	r1, r1
    1efe:	2f 93       	push	r18
    1f00:	3f 93       	push	r19
    1f02:	4f 93       	push	r20
    1f04:	5f 93       	push	r21
    1f06:	6f 93       	push	r22
    1f08:	7f 93       	push	r23
    1f0a:	8f 93       	push	r24
    1f0c:	9f 93       	push	r25
    1f0e:	af 93       	push	r26
    1f10:	bf 93       	push	r27
    1f12:	ef 93       	push	r30
    1f14:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    1f16:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1f1a:	88 7f       	andi	r24, 0xF8	; 248
    1f1c:	80 36       	cpi	r24, 0x60	; 96
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <__vector_24+0x2e>
    1f20:	4a c0       	rjmp	.+148    	; 0x1fb6 <__vector_24+0xc2>
    1f22:	f0 f5       	brcc	.+124    	; 0x1fa0 <__vector_24+0xac>
    1f24:	88 32       	cpi	r24, 0x28	; 40
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <__vector_24+0x36>
    1f28:	a7 c0       	rjmp	.+334    	; 0x2078 <__vector_24+0x184>
    1f2a:	18 f5       	brcc	.+70     	; 0x1f72 <__vector_24+0x7e>
    1f2c:	80 31       	cpi	r24, 0x10	; 16
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <__vector_24+0x3e>
    1f30:	9b c0       	rjmp	.+310    	; 0x2068 <__vector_24+0x174>
    1f32:	b8 f4       	brcc	.+46     	; 0x1f62 <__vector_24+0x6e>
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <__vector_24+0x46>
    1f38:	f9 c0       	rjmp	.+498    	; 0x212c <__vector_24+0x238>
    1f3a:	88 30       	cpi	r24, 0x08	; 8
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <__vector_24+0x4c>
    1f3e:	94 c0       	rjmp	.+296    	; 0x2068 <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f62:	88 31       	cpi	r24, 0x18	; 24
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <__vector_24+0x74>
    1f66:	88 c0       	rjmp	.+272    	; 0x2078 <__vector_24+0x184>
    1f68:	80 32       	cpi	r24, 0x20	; 32
    1f6a:	51 f7       	brne	.-44     	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f6c:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_error>
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f72:	80 34       	cpi	r24, 0x40	; 64
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <__vector_24+0x84>
    1f76:	9d c0       	rjmp	.+314    	; 0x20b2 <__vector_24+0x1be>
    1f78:	40 f4       	brcc	.+16     	; 0x1f8a <__vector_24+0x96>
    1f7a:	80 33       	cpi	r24, 0x30	; 48
    1f7c:	b9 f3       	breq	.-18     	; 0x1f6c <__vector_24+0x78>
    1f7e:	88 33       	cpi	r24, 0x38	; 56
    1f80:	f9 f6       	brne	.-66     	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1f82:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f86:	85 ec       	ldi	r24, 0xC5	; 197
    1f88:	b0 c0       	rjmp	.+352    	; 0x20ea <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f8a:	80 35       	cpi	r24, 0x50	; 80
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <__vector_24+0x9c>
    1f8e:	85 c0       	rjmp	.+266    	; 0x209a <__vector_24+0x1a6>
    1f90:	88 35       	cpi	r24, 0x58	; 88
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <__vector_24+0xa2>
    1f94:	96 c0       	rjmp	.+300    	; 0x20c2 <__vector_24+0x1ce>
    1f96:	88 34       	cpi	r24, 0x48	; 72
    1f98:	99 f6       	brne	.-90     	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1f9a:	0e 94 f7 05 	call	0xbee	; 0xbee <twi_stop>
    1f9e:	d0 cf       	rjmp	.-96     	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1fa0:	88 39       	cpi	r24, 0x98	; 152
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <__vector_24+0xb2>
    1fa4:	8c c0       	rjmp	.+280    	; 0x20be <__vector_24+0x1ca>
    1fa6:	38 f5       	brcc	.+78     	; 0x1ff6 <__vector_24+0x102>
    1fa8:	88 37       	cpi	r24, 0x78	; 120
    1faa:	29 f0       	breq	.+10     	; 0x1fb6 <__vector_24+0xc2>
    1fac:	50 f4       	brcc	.+20     	; 0x1fc2 <__vector_24+0xce>
    1fae:	88 36       	cpi	r24, 0x68	; 104
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <__vector_24+0xc2>
    1fb2:	80 37       	cpi	r24, 0x70	; 112
    1fb4:	29 f6       	brne	.-118    	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1fbc:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    1fc0:	57 c0       	rjmp	.+174    	; 0x2070 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1fc2:	88 38       	cpi	r24, 0x88	; 136
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <__vector_24+0xd4>
    1fc6:	7b c0       	rjmp	.+246    	; 0x20be <__vector_24+0x1ca>
    1fc8:	80 39       	cpi	r24, 0x90	; 144
    1fca:	19 f0       	breq	.+6      	; 0x1fd2 <__vector_24+0xde>
    1fcc:	80 38       	cpi	r24, 0x80	; 128
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <__vector_24+0xde>
    1fd0:	b7 cf       	rjmp	.-146    	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1fd2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1fd6:	80 32       	cpi	r24, 0x20	; 32
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <__vector_24+0xe8>
    1fda:	71 c0       	rjmp	.+226    	; 0x20be <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1fdc:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	8e 0f       	add	r24, r30
    1fe4:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_rxBufferIndex>
    1fe8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	ed 59       	subi	r30, 0x9D	; 157
    1ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff2:	80 83       	st	Z, r24
    1ff4:	3d c0       	rjmp	.+122    	; 0x2070 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ff6:	80 3b       	cpi	r24, 0xB0	; 176
    1ff8:	39 f0       	breq	.+14     	; 0x2008 <__vector_24+0x114>
    1ffa:	e0 f4       	brcc	.+56     	; 0x2034 <__vector_24+0x140>
    1ffc:	80 3a       	cpi	r24, 0xA0	; 160
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <__vector_24+0x10e>
    2000:	79 c0       	rjmp	.+242    	; 0x20f4 <__vector_24+0x200>
    2002:	88 3a       	cpi	r24, 0xA8	; 168
    2004:	09 f0       	breq	.+2      	; 0x2008 <__vector_24+0x114>
    2006:	9c cf       	rjmp	.-200    	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    200e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2012:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2016:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_onSlaveTransmit>
    201a:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <twi_onSlaveTransmit+0x1>
    201e:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2020:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    2024:	81 11       	cpse	r24, r1
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    202e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_txBuffer>
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2034:	80 3c       	cpi	r24, 0xC0	; 192
    2036:	09 f4       	brne	.+2      	; 0x203a <__vector_24+0x146>
    2038:	a6 cf       	rjmp	.-180    	; 0x1f86 <__vector_24+0x92>
    203a:	88 3c       	cpi	r24, 0xC8	; 200
    203c:	09 f4       	brne	.+2      	; 0x2040 <__vector_24+0x14c>
    203e:	a3 cf       	rjmp	.-186    	; 0x1f86 <__vector_24+0x92>
    2040:	88 3b       	cpi	r24, 0xB8	; 184
    2042:	09 f0       	breq	.+2      	; 0x2046 <__vector_24+0x152>
    2044:	7d cf       	rjmp	.-262    	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2046:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_txBufferIndex>
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8e 0f       	add	r24, r30
    204e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_txBufferIndex>
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	ef 5b       	subi	r30, 0xBF	; 191
    2056:	fd 4f       	sbci	r31, 0xFD	; 253
    2058:	80 81       	ld	r24, Z
    205a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    205e:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_txBufferIndex>
    2062:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    2066:	29 c0       	rjmp	.+82     	; 0x20ba <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2068:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    206c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2070:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2072:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2076:	64 cf       	rjmp	.-312    	; 0x1f40 <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2078:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    207c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_masterBufferLength>
    2080:	98 17       	cp	r25, r24
    2082:	58 f5       	brcc	.+86     	; 0x20da <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2084:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	8e 0f       	add	r24, r30
    208c:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <twi_masterBufferIndex>
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	e0 57       	subi	r30, 0x70	; 112
    2094:	fc 4f       	sbci	r31, 0xFC	; 252
    2096:	80 81       	ld	r24, Z
    2098:	e9 cf       	rjmp	.-46     	; 0x206c <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    209a:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	8e 0f       	add	r24, r30
    20a2:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <twi_masterBufferIndex>
    20a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	e0 57       	subi	r30, 0x70	; 112
    20ae:	fc 4f       	sbci	r31, 0xFC	; 252
    20b0:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    20b2:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    20b6:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20ba:	98 17       	cp	r25, r24
    20bc:	c8 f2       	brcs	.-78     	; 0x2070 <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20be:	85 e8       	ldi	r24, 0x85	; 133
    20c0:	d8 cf       	rjmp	.-80     	; 0x2072 <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    20c2:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <twi_masterBufferIndex>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	8e 0f       	add	r24, r30
    20ca:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <twi_masterBufferIndex>
    20ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	e0 57       	subi	r30, 0x70	; 112
    20d6:	fc 4f       	sbci	r31, 0xFC	; 252
    20d8:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    20da:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_sendStop>
    20de:	81 11       	cpse	r24, r1
    20e0:	5c cf       	rjmp	.-328    	; 0x1f9a <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    20e8:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    20ee:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <twi_state>
    20f2:	26 cf       	rjmp	.-436    	; 0x1f40 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20f4:	85 ec       	ldi	r24, 0xC5	; 197
    20f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    20fa:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    20fe:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    2102:	80 32       	cpi	r24, 0x20	; 32
    2104:	30 f4       	brcc	.+12     	; 0x2112 <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2106:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	ed 59       	subi	r30, 0x9D	; 157
    210e:	fd 4f       	sbci	r31, 0xFD	; 253
    2110:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2112:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <twi_rxBufferIndex>
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <twi_onSlaveReceive>
    211c:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <twi_onSlaveReceive+0x1>
    2120:	83 e6       	ldi	r24, 0x63	; 99
    2122:	92 e0       	ldi	r25, 0x02	; 2
    2124:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2126:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    212a:	0a cf       	rjmp	.-492    	; 0x1f40 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    212c:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_error>
    2130:	34 cf       	rjmp	.-408    	; 0x1f9a <__vector_24+0xa6>

00002132 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017>:
_GLOBAL__I_65535_0_ChantBellv2.2.ino.cpp.o.3017():
    2132:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <Wire+0x3>
    2136:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <Wire+0x2>
    213a:	88 ee       	ldi	r24, 0xE8	; 232
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Wire+0x4>
    2146:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <Wire+0x5>
    214a:	a0 93 1d 04 	sts	0x041D, r26	; 0x80041d <Wire+0x6>
    214e:	b0 93 1e 04 	sts	0x041E, r27	; 0x80041e <Wire+0x7>
    2152:	20 e4       	ldi	r18, 0x40	; 64
    2154:	31 e0       	ldi	r19, 0x01	; 1
    2156:	30 93 18 04 	sts	0x0418, r19	; 0x800418 <Wire+0x1>
    215a:	20 93 17 04 	sts	0x0417, r18	; 0x800417 <Wire>
    215e:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <mySoftwareSerial+0x3>
    2162:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <mySoftwareSerial+0x2>
    2166:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <mySoftwareSerial+0x4>
    216a:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <mySoftwareSerial+0x5>
    216e:	a0 93 a9 04 	sts	0x04A9, r26	; 0x8004a9 <mySoftwareSerial+0x6>
    2172:	b0 93 aa 04 	sts	0x04AA, r27	; 0x8004aa <mySoftwareSerial+0x7>
    2176:	8e e5       	ldi	r24, 0x5E	; 94
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <mySoftwareSerial+0x1>
    217e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <mySoftwareSerial>
    2182:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <mySoftwareSerial+0x17>
    2186:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <mySoftwareSerial+0x16>
    218a:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <mySoftwareSerial+0x19>
    218e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <mySoftwareSerial+0x18>
    2192:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <mySoftwareSerial+0x1b>
    2196:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <mySoftwareSerial+0x1a>
    219a:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <mySoftwareSerial+0x1d>
    219e:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <mySoftwareSerial+0x1c>
    21a2:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <mySoftwareSerial+0x1e>
    21a6:	6e 7f       	andi	r22, 0xFE	; 254
    21a8:	6d 7f       	andi	r22, 0xFD	; 253
    21aa:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <mySoftwareSerial+0x1e>
    21ae:	66 95       	lsr	r22
    21b0:	61 70       	andi	r22, 0x01	; 1
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	68 27       	eor	r22, r24
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
    21c4:	e5 ed       	ldi	r30, 0xD5	; 213
    21c6:	f2 e0       	ldi	r31, 0x02	; 2
    21c8:	e4 91       	lpm	r30, Z
    21ca:	e0 93 b3 04 	sts	0x04B3, r30	; 0x8004b3 <mySoftwareSerial+0x10>
    21ce:	ee eb       	ldi	r30, 0xBE	; 190
    21d0:	f2 e0       	ldi	r31, 0x02	; 2
    21d2:	e4 91       	lpm	r30, Z
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	ef 54       	subi	r30, 0x4F	; 79
    21dc:	fd 4f       	sbci	r31, 0xFD	; 253
    21de:	85 91       	lpm	r24, Z+
    21e0:	94 91       	lpm	r25, Z
    21e2:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <mySoftwareSerial+0x12>
    21e6:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <mySoftwareSerial+0x11>
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
    21f2:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mySoftwareSerial+0x1e>
    21f6:	81 fd       	sbrc	r24, 1
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0xd0>
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <mySoftwareSerial+0xc>
    2208:	e4 ed       	ldi	r30, 0xD4	; 212
    220a:	f2 e0       	ldi	r31, 0x02	; 2
    220c:	e4 91       	lpm	r30, Z
    220e:	e0 93 b0 04 	sts	0x04B0, r30	; 0x8004b0 <mySoftwareSerial+0xd>
    2212:	ed eb       	ldi	r30, 0xBD	; 189
    2214:	f2 e0       	ldi	r31, 0x02	; 2
    2216:	e4 91       	lpm	r30, Z
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	e9 55       	subi	r30, 0x59	; 89
    2220:	fd 4f       	sbci	r31, 0xFD	; 253
    2222:	25 91       	lpm	r18, Z+
    2224:	34 91       	lpm	r19, Z
    2226:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <mySoftwareSerial+0xf>
    222a:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <mySoftwareSerial+0xe>
    222e:	44 ef       	ldi	r20, 0xF4	; 244
    2230:	51 e0       	ldi	r21, 0x01	; 1
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	40 93 83 04 	sts	0x0483, r20	; 0x800483 <myDFPlayer+0x6>
    223a:	50 93 84 04 	sts	0x0484, r21	; 0x800484 <myDFPlayer+0x7>
    223e:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <myDFPlayer+0x8>
    2242:	70 93 86 04 	sts	0x0486, r23	; 0x800486 <myDFPlayer+0x9>
    2246:	9a e0       	ldi	r25, 0x0A	; 10
    2248:	e7 e1       	ldi	r30, 0x17	; 23
    224a:	f1 e0       	ldi	r31, 0x01	; 1
    224c:	a1 e9       	ldi	r26, 0x91	; 145
    224e:	b4 e0       	ldi	r27, 0x04	; 4
    2250:	01 90       	ld	r0, Z+
    2252:	0d 92       	st	X+, r0
    2254:	9a 95       	dec	r25
    2256:	e1 f7       	brne	.-8      	; 0x2250 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0x11e>
    2258:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <myDFPlayer+0x1e>
    225c:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <myDFPlayer+0x1f>
    2260:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <myDFPlayer+0x24>
    2264:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <myDFPlayer+0x25>
    2268:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <lcd+0x3>
    226c:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <lcd+0x2>
    2270:	22 e5       	ldi	r18, 0x52	; 82
    2272:	31 e0       	ldi	r19, 0x01	; 1
    2274:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <lcd+0x1>
    2278:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <lcd>
    227c:	97 e2       	ldi	r25, 0x27	; 39
    227e:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <lcd+0x4>
    2282:	90 e1       	ldi	r25, 0x10	; 16
    2284:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <lcd+0x9>
    2288:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <lcd+0xa>
    228c:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <lcd+0xb>
    2290:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <bell+0x5>
    2294:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <bell+0x4>
    2298:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <bell+0x3>
    229c:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <bell>
    22a0:	ec e9       	ldi	r30, 0x9C	; 156
    22a2:	f2 e0       	ldi	r31, 0x02	; 2
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	8c 30       	cpi	r24, 0x0C	; 12
    22a8:	51 f0       	breq	.+20     	; 0x22be <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0x18c>
    22aa:	94 91       	lpm	r25, Z
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0x180>
    22b0:	9f 5f       	subi	r25, 0xFF	; 255
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	28 0f       	add	r18, r24
    22b6:	31 96       	adiw	r30, 0x01	; 1
    22b8:	99 23       	and	r25, r25
    22ba:	09 f4       	brne	.+2      	; 0x22be <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0x18c>
    22bc:	4d c0       	rjmp	.+154    	; 0x2358 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0x226>
    22be:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <bell+0x1>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <bell+0x2>
    22c8:	62 e9       	ldi	r22, 0x92	; 146
    22ca:	71 e0       	ldi	r23, 0x01	; 1
    22cc:	83 e2       	ldi	r24, 0x23	; 35
    22ce:	94 e0       	ldi	r25, 0x04	; 4
    22d0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    22d4:	66 e9       	ldi	r22, 0x96	; 150
    22d6:	71 e0       	ldi	r23, 0x01	; 1
    22d8:	89 e2       	ldi	r24, 0x29	; 41
    22da:	94 e0       	ldi	r25, 0x04	; 4
    22dc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    22e0:	6a e9       	ldi	r22, 0x9A	; 154
    22e2:	71 e0       	ldi	r23, 0x01	; 1
    22e4:	8f e2       	ldi	r24, 0x2F	; 47
    22e6:	94 e0       	ldi	r25, 0x04	; 4
    22e8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    22ec:	6e e9       	ldi	r22, 0x9E	; 158
    22ee:	71 e0       	ldi	r23, 0x01	; 1
    22f0:	85 e3       	ldi	r24, 0x35	; 53
    22f2:	94 e0       	ldi	r25, 0x04	; 4
    22f4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    22f8:	62 ea       	ldi	r22, 0xA2	; 162
    22fa:	71 e0       	ldi	r23, 0x01	; 1
    22fc:	8b e3       	ldi	r24, 0x3B	; 59
    22fe:	94 e0       	ldi	r25, 0x04	; 4
    2300:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    2304:	66 ea       	ldi	r22, 0xA6	; 166
    2306:	71 e0       	ldi	r23, 0x01	; 1
    2308:	81 e4       	ldi	r24, 0x41	; 65
    230a:	94 e0       	ldi	r25, 0x04	; 4
    230c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    2310:	6a ea       	ldi	r22, 0xAA	; 170
    2312:	71 e0       	ldi	r23, 0x01	; 1
    2314:	87 e4       	ldi	r24, 0x47	; 71
    2316:	94 e0       	ldi	r25, 0x04	; 4
    2318:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    231c:	6e ea       	ldi	r22, 0xAE	; 174
    231e:	71 e0       	ldi	r23, 0x01	; 1
    2320:	8d e4       	ldi	r24, 0x4D	; 77
    2322:	94 e0       	ldi	r25, 0x04	; 4
    2324:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    2328:	62 eb       	ldi	r22, 0xB2	; 178
    232a:	71 e0       	ldi	r23, 0x01	; 1
    232c:	83 e5       	ldi	r24, 0x53	; 83
    232e:	94 e0       	ldi	r25, 0x04	; 4
    2330:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    2334:	66 eb       	ldi	r22, 0xB6	; 182
    2336:	71 e0       	ldi	r23, 0x01	; 1
    2338:	89 e5       	ldi	r24, 0x59	; 89
    233a:	94 e0       	ldi	r25, 0x04	; 4
    233c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    2340:	6a eb       	ldi	r22, 0xBA	; 186
    2342:	71 e0       	ldi	r23, 0x01	; 1
    2344:	8f e5       	ldi	r24, 0x5F	; 95
    2346:	94 e0       	ldi	r25, 0x04	; 4
    2348:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    234c:	6e eb       	ldi	r22, 0xBE	; 190
    234e:	71 e0       	ldi	r23, 0x01	; 1
    2350:	85 e6       	ldi	r24, 0x65	; 101
    2352:	94 e0       	ldi	r25, 0x04	; 4
    2354:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <String::String(char const*)>
    2358:	82 2f       	mov	r24, r18
    235a:	a5 cf       	rjmp	.-182    	; 0x22a6 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3017+0x174>

0000235c <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	ee 97       	sbiw	r28, 0x3e	; 62
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2370:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2372:	84 b5       	in	r24, 0x24	; 36
    2374:	83 60       	ori	r24, 0x03	; 3
    2376:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2378:	85 b5       	in	r24, 0x25	; 37
    237a:	83 60       	ori	r24, 0x03	; 3
    237c:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    237e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    2382:	81 60       	ori	r24, 0x01	; 1
    2384:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    238e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2392:	81 60       	ori	r24, 0x01	; 1
    2394:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2398:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    239c:	81 60       	ori	r24, 0x01	; 1
    239e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    23a2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    23a6:	84 60       	ori	r24, 0x04	; 4
    23a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    23ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    23b0:	81 60       	ori	r24, 0x01	; 1
    23b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    23b6:	87 e8       	ldi	r24, 0x87	; 135
    23b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    23bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    23c0:	80 e4       	ldi	r24, 0x40	; 64
    23c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    23c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    23ca:	80 64       	ori	r24, 0x40	; 64
    23cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    23d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    23d4:	86 fd       	sbrc	r24, 6
    23d6:	fc cf       	rjmp	.-8      	; 0x23d0 <main+0x74>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    23d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    23dc:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    23e0:	76 2f       	mov	r23, r22
    23e2:	68 2f       	mov	r22, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:80
byte processMenuCommand(byte cmdId);
void showTime();

void setup()
{
    randomSeed(analogRead(A0));
    23e4:	07 2e       	mov	r0, r23
    23e6:	00 0c       	add	r0, r0
    23e8:	88 0b       	sbc	r24, r24
    23ea:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    23ec:	61 15       	cp	r22, r1
    23ee:	71 05       	cpc	r23, r1
    23f0:	81 05       	cpc	r24, r1
    23f2:	91 05       	cpc	r25, r1
    23f4:	11 f0       	breq	.+4      	; 0x23fa <main+0x9e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    23f6:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:82
    char intstr[5];
    pinMode(AMP, OUTPUT);
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	8c e0       	ldi	r24, 0x0C	; 12
    23fe:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:83
    pinMode(STA_PIN, INPUT_PULLUP);
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	84 e0       	ldi	r24, 0x04	; 4
    2406:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:84
    pinMode(SELECT_BUT, INPUT_PULLUP);
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	85 e0       	ldi	r24, 0x05	; 5
    240e:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:85
    pinMode(UP_BUT, INPUT_PULLUP);
    2412:	62 e0       	ldi	r22, 0x02	; 2
    2414:	86 e0       	ldi	r24, 0x06	; 6
    2416:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:86
    pinMode(DOWN_BUT, INPUT_PULLUP);
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	87 e0       	ldi	r24, 0x07	; 7
    241e:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:87
    pinMode(BACK_BUT, INPUT_PULLUP);
    2422:	62 e0       	ldi	r22, 0x02	; 2
    2424:	88 e0       	ldi	r24, 0x08	; 8
    2426:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:88
    Wire.begin();
    242a:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.38]>
load():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:153
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    242e:	4c e2       	ldi	r20, 0x2C	; 44
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	8b e2       	ldi	r24, 0x2B	; 43
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:154
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    243e:	67 e2       	ldi	r22, 0x27	; 39
    2440:	71 e0       	ldi	r23, 0x01	; 1
    2442:	8b e2       	ldi	r24, 0x2B	; 43
    2444:	93 e0       	ldi	r25, 0x03	; 3
    2446:	0e 94 a2 22 	call	0x4544	; 0x4544 <strcmp>
    244a:	89 2b       	or	r24, r25
    244c:	09 f4       	brne	.+2      	; 0x2450 <main+0xf4>
    244e:	4a c0       	rjmp	.+148    	; 0x24e4 <main+0x188>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    2450:	67 e2       	ldi	r22, 0x27	; 39
    2452:	71 e0       	ldi	r23, 0x01	; 1
    2454:	8b e2       	ldi	r24, 0x2B	; 43
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:12
  Song1_Count = 100;
    245c:	84 e6       	ldi	r24, 0x64	; 100
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x19>
    2464:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:13
  Song2_Count = 100;
    2468:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x1b>
    246c:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:14
  startTime = 5; //5AM
    2470:	85 e0       	ldi	r24, 0x05	; 5
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x10>
    2478:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:15
  endTime = 22; // 10PM
    247c:	86 e1       	ldi	r24, 0x16	; 22
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <config+0x12>
    2484:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:16
  vol = 20;
    2488:	84 e1       	ldi	r24, 0x14	; 20
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    2490:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:17
  backLightDur = 20;
    2494:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <config+0x14>
    2498:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:18
  MorSong1Time = 3;
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x21>
    24a4:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x20>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:19
  EveSong1Time = 3;
    24a8:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x25>
    24ac:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:20
  MorSongNo = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x29>
    24b8:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:21
  EveSongNo = 2;
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <config+0x2b>
    24c4:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:22
  SchlZone = 0;
    24c8:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:23
  SerialNo = 200;
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x1f>
    24d4:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:24
  DataYear = 2022;
    24d8:	86 ee       	ldi	r24, 0xE6	; 230
    24da:	97 e0       	ldi	r25, 0x07	; 7
    24dc:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x1d>
    24e0:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x1c>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    24e4:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.38]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    24e8:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    24ec:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	18 f0       	brcs	.+6      	; 0x24fa <main+0x19e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    24f4:	98 e0       	ldi	r25, 0x08	; 8
    24f6:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    24fa:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    24fe:	62 e3       	ldi	r22, 0x32	; 50
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    250a:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <lcd+0xb>
    250e:	81 e7       	ldi	r24, 0x71	; 113
    2510:	94 e0       	ldi	r25, 0x04	; 4
    2512:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    2516:	68 ee       	ldi	r22, 0xE8	; 232
    2518:	73 e0       	ldi	r23, 0x03	; 3
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2522:	60 e3       	ldi	r22, 0x30	; 48
    2524:	81 e7       	ldi	r24, 0x71	; 113
    2526:	94 e0       	ldi	r25, 0x04	; 4
    2528:	0e 94 c0 06 	call	0xd80	; 0xd80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    252c:	84 e9       	ldi	r24, 0x94	; 148
    252e:	91 e1       	ldi	r25, 0x11	; 17
    2530:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    2534:	60 e3       	ldi	r22, 0x30	; 48
    2536:	81 e7       	ldi	r24, 0x71	; 113
    2538:	94 e0       	ldi	r25, 0x04	; 4
    253a:	0e 94 c0 06 	call	0xd80	; 0xd80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    253e:	84 e9       	ldi	r24, 0x94	; 148
    2540:	91 e1       	ldi	r25, 0x11	; 17
    2542:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    2546:	60 e3       	ldi	r22, 0x30	; 48
    2548:	81 e7       	ldi	r24, 0x71	; 113
    254a:	94 e0       	ldi	r25, 0x04	; 4
    254c:	0e 94 c0 06 	call	0xd80	; 0xd80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    2550:	86 e9       	ldi	r24, 0x96	; 150
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2558:	60 e2       	ldi	r22, 0x20	; 32
    255a:	81 e7       	ldi	r24, 0x71	; 113
    255c:	94 e0       	ldi	r25, 0x04	; 4
    255e:	0e 94 c0 06 	call	0xd80	; 0xd80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2562:	60 91 76 04 	lds	r22, 0x0476	; 0x800476 <lcd+0x5>
    2566:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	81 e7       	ldi	r24, 0x71	; 113
    256c:	94 e0       	ldi	r25, 0x04	; 4
    256e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	6c e0       	ldi	r22, 0x0C	; 12
    257c:	81 e7       	ldi	r24, 0x71	; 113
    257e:	94 e0       	ldi	r25, 0x04	; 4
    2580:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    2584:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2588:	32 e0       	ldi	r19, 0x02	; 2
    258a:	d3 2e       	mov	r13, r19
    258c:	d0 92 78 04 	sts	0x0478, r13	; 0x800478 <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	66 e0       	ldi	r22, 0x06	; 6
    2594:	81 e7       	ldi	r24, 0x71	; 113
    2596:	94 e0       	ldi	r25, 0x04	; 4
    2598:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	62 e0       	ldi	r22, 0x02	; 2
    25a0:	81 e7       	ldi	r24, 0x71	; 113
    25a2:	94 e0       	ldi	r25, 0x04	; 4
    25a4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    25a8:	80 ed       	ldi	r24, 0xD0	; 208
    25aa:	97 e0       	ldi	r25, 0x07	; 7
    25ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    25b0:	88 e0       	ldi	r24, 0x08	; 8
    25b2:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	81 e7       	ldi	r24, 0x71	; 113
    25ba:	94 e0       	ldi	r25, 0x04	; 4
    25bc:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:92
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	85 e0       	ldi	r24, 0x05	; 5
    25c4:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:93
    lcd.print(F("QTRON"));
    25c8:	8f e7       	ldi	r24, 0x7F	; 127
    25ca:	92 e0       	ldi	r25, 0x02	; 2
    25cc:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:94
    lcd.setCursor(0, 1);
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:95
    lcd.print(F("DEVOTIONAL CLOCK"));
    25d8:	8e e6       	ldi	r24, 0x6E	; 110
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:96
    delay(2000);
    25e0:	60 ed       	ldi	r22, 0xD0	; 208
    25e2:	77 e0       	ldi	r23, 0x07	; 7
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:97
    lcd.clear();
    25ec:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:98
    lcd.setCursor(0, 0);
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:99
    inttostr(intstr, config.DataYear);
    25f8:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <config+0x1c>
    25fc:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <config+0x1d>
    2600:	8e 01       	movw	r16, r28
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	c8 01       	movw	r24, r16
    2608:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:100
    lcd.print(fmt(strbuf, 2, "Ver : 2.2/", intstr));
    260c:	1f 93       	push	r17
    260e:	0f 93       	push	r16
    2610:	82 ec       	ldi	r24, 0xC2	; 194
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	9f 93       	push	r25
    2616:	8f 93       	push	r24
    2618:	df 92       	push	r13
    261a:	4a ee       	ldi	r20, 0xEA	; 234
    261c:	e4 2e       	mov	r14, r20
    261e:	43 e0       	ldi	r20, 0x03	; 3
    2620:	f4 2e       	mov	r15, r20
    2622:	ff 92       	push	r15
    2624:	ef 92       	push	r14
    2626:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    262a:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:101
    lcd.setCursor(0, 1);
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:102
    inttostr(intstr, config.SerialNo);
    2636:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <config+0x1e>
    263a:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <config+0x1f>
    263e:	c8 01       	movw	r24, r16
    2640:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:103
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    2644:	1f 93       	push	r17
    2646:	0f 93       	push	r16
    2648:	8d ec       	ldi	r24, 0xCD	; 205
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	9f 93       	push	r25
    264e:	8f 93       	push	r24
    2650:	df 92       	push	r13
    2652:	ff 92       	push	r15
    2654:	ef 92       	push	r14
    2656:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    265a:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:104
    delay(1000);
    265e:	68 ee       	ldi	r22, 0xE8	; 232
    2660:	73 e0       	ldi	r23, 0x03	; 3
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:105
    lcd.clear();
    266a:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:106
    lcd.setCursor(3, 0);
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:107
    lcd.print("Loading...");
    2676:	8b ed       	ldi	r24, 0xDB	; 219
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:109

    if (!digitalRead(SELECT_BUT))
    267e:	85 e0       	ldi	r24, 0x05	; 5
    2680:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	89 2b       	or	r24, r25
    2690:	09 f0       	breq	.+2      	; 0x2694 <main+0x338>
    2692:	08 c1       	rjmp	.+528    	; 0x28a4 <main+0x548>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:111
    {
        lcd.setCursor(0, 1);
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:112
        lcd.print("Service Mode");
    269c:	86 ee       	ldi	r24, 0xE6	; 230
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:113
        serviceMode = true;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <serviceMode>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    26aa:	ee 24       	eor	r14, r14
    26ac:	e3 94       	inc	r14
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    26ae:	28 e6       	ldi	r18, 0x68	; 104
    26b0:	d2 2e       	mov	r13, r18
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:816
    @brief  Start I2C for the DS1307 and test succesful connection
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
boolean RTC_DS1307::begin(void) {
  Wire.begin();
    26b2:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.38]>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    26b6:	e0 92 b5 03 	sts	0x03B5, r14	; 0x8003b5 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    26ba:	d0 92 d7 03 	sts	0x03D7, r13	; 0x8003d7 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    26be:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    26c2:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:818
  Wire.beginTransmission(DS1307_ADDRESS);
  if (Wire.endTransmission() == 0)
    26c6:	0e 94 c0 01 	call	0x380	; 0x380 <TwoWire::endTransmission() [clone .constprop.83]>
    26ca:	f8 2e       	mov	r15, r24
    26cc:	81 11       	cpse	r24, r1
    26ce:	ed c0       	rjmp	.+474    	; 0x28aa <main+0x54e>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    26d0:	e0 92 b5 03 	sts	0x03B5, r14	; 0x8003b5 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    26d4:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    26d8:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <TwoWire::txBufferLength>
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:831
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	87 e1       	ldi	r24, 0x17	; 23
    26e0:	94 e0       	ldi	r25, 0x04	; 4
    26e2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:832
  Wire.endTransmission();
    26e6:	0e 94 c0 01 	call	0x380	; 0x380 <TwoWire::endTransmission() [clone .constprop.83]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:834

  Wire.requestFrom(DS1307_ADDRESS, 1);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 dd 07 	call	0xfba	; 0xfba <TwoWire::requestFrom(int, int) [clone .constprop.74]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:835
  uint8_t ss = Wire._I2C_READ();
    26f2:	87 e1       	ldi	r24, 0x17	; 23
    26f4:	94 e0       	ldi	r25, 0x04	; 4
    26f6:	0e 94 37 06 	call	0xc6e	; 0xc6e <TwoWire::read()>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:127
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    // if (rtc.lostPower())

    if (!rtc.isrunning())
    26fa:	87 ff       	sbrs	r24, 7
    26fc:	0c c0       	rjmp	.+24     	; 0x2716 <main+0x3ba>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:129
    {
        lcd.clear();
    26fe:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:130
        lcd.print(F("ERR 02"));
    2702:	80 e6       	ldi	r24, 0x60	; 96
    2704:	92 e0       	ldi	r25, 0x02	; 2
    2706:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:131
        delay(2000);
    270a:	60 ed       	ldi	r22, 0xD0	; 208
    270c:	77 e0       	ldi	r23, 0x07	; 7
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:134
    }
    // Initialize DF Player...............
    if (digitalRead(BACK_BUT))
    2716:	88 e0       	ldi	r24, 0x08	; 8
    2718:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    271c:	89 2b       	or	r24, r25
    271e:	09 f4       	brne	.+2      	; 0x2722 <main+0x3c6>
    2720:	12 c1       	rjmp	.+548    	; 0x2946 <main+0x5ea>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2722:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <mySoftwareSerial+0x1b>
    2726:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <mySoftwareSerial+0x1a>
    272a:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <mySoftwareSerial+0x19>
    272e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <mySoftwareSerial+0x18>
    2732:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <mySoftwareSerial+0x17>
    2736:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    273a:	8d e9       	ldi	r24, 0x9D	; 157
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <mySoftwareSerial+0x1d>
    2742:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2746:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mySoftwareSerial+0xc>
    274a:	87 31       	cpi	r24, 0x17	; 23
    274c:	08 f0       	brcs	.+2      	; 0x2750 <main+0x3f4>
    274e:	4b c0       	rjmp	.+150    	; 0x27e6 <main+0x48a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2750:	2d eb       	ldi	r18, 0xBD	; 189
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	30 93 ba 04 	sts	0x04BA, r19	; 0x8004ba <mySoftwareSerial+0x17>
    2758:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    275c:	2b e9       	ldi	r18, 0x9B	; 155
    275e:	31 e0       	ldi	r19, 0x01	; 1
    2760:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <mySoftwareSerial+0x19>
    2764:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2768:	2c e2       	ldi	r18, 0x2C	; 44
    276a:	31 e0       	ldi	r19, 0x01	; 1
    276c:	30 93 be 04 	sts	0x04BE, r19	; 0x8004be <mySoftwareSerial+0x1b>
    2770:	20 93 bd 04 	sts	0x04BD, r18	; 0x8004bd <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2774:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    2778:	94 e0       	ldi	r25, 0x04	; 4
begin():
    277a:	88 30       	cpi	r24, 0x08	; 8
    277c:	54 f0       	brlt	.+20     	; 0x2792 <main+0x436>
main():
    277e:	91 e0       	ldi	r25, 0x01	; 1
begin():
    2780:	8e 30       	cpi	r24, 0x0E	; 14
    2782:	3c f0       	brlt	.+14     	; 0x2792 <main+0x436>
main():
    2784:	92 e0       	ldi	r25, 0x02	; 2
begin():
    2786:	84 31       	cpi	r24, 0x14	; 20
    2788:	24 f0       	brlt	.+8      	; 0x2792 <main+0x436>
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	86 31       	cpi	r24, 0x16	; 22
    278e:	09 f4       	brne	.+2      	; 0x2792 <main+0x436>
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	92 2b       	or	r25, r18
    2794:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2798:	2d e6       	ldi	r18, 0x6D	; 109
    279a:	30 e0       	ldi	r19, 0x00	; 0
begin():
    279c:	88 30       	cpi	r24, 0x08	; 8
    279e:	74 f0       	brlt	.+28     	; 0x27bc <main+0x460>
    27a0:	8e 30       	cpi	r24, 0x0E	; 14
    27a2:	0c f4       	brge	.+2      	; 0x27a6 <main+0x44a>
    27a4:	89 c0       	rjmp	.+274    	; 0x28b8 <main+0x55c>
    27a6:	84 31       	cpi	r24, 0x14	; 20
    27a8:	3c f0       	brlt	.+14     	; 0x27b8 <main+0x45c>
    27aa:	86 31       	cpi	r24, 0x16	; 22
    27ac:	0c f4       	brge	.+2      	; 0x27b0 <main+0x454>
    27ae:	84 c0       	rjmp	.+264    	; 0x28b8 <main+0x55c>
main():
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	20 e0       	ldi	r18, 0x00	; 0
begin():
    27b4:	86 31       	cpi	r24, 0x16	; 22
    27b6:	11 f4       	brne	.+4      	; 0x27bc <main+0x460>
main():
    27b8:	2c e6       	ldi	r18, 0x6C	; 108
    27ba:	30 e0       	ldi	r19, 0x00	; 0
begin():
    27bc:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <mySoftwareSerial+0x14>
    27c0:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    27c4:	88 30       	cpi	r24, 0x08	; 8
    27c6:	0c f0       	brlt	.+2      	; 0x27ca <main+0x46e>
    27c8:	7a c0       	rjmp	.+244    	; 0x28be <main+0x562>
    27ca:	ff 24       	eor	r15, r15
    27cc:	f3 94       	inc	r15
    27ce:	01 c0       	rjmp	.+2      	; 0x27d2 <main+0x476>
    27d0:	ff 0c       	add	r15, r15
    27d2:	8a 95       	dec	r24
    27d4:	ea f7       	brpl	.-6      	; 0x27d0 <main+0x474>
    27d6:	f0 92 b8 04 	sts	0x04B8, r15	; 0x8004b8 <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    27da:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <mySoftwareSerial+0x1c>
    27de:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <mySoftwareSerial+0x1d>
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <main+0x486>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    27e6:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <mySoftwareSerial+0x1a>
    27ea:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <mySoftwareSerial+0x1b>
    27ee:	89 2b       	or	r24, r25
    27f0:	49 f1       	breq	.+82     	; 0x2844 <main+0x4e8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    27f2:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
    27f6:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    27fa:	34 e0       	ldi	r19, 0x04	; 4
    27fc:	e3 3a       	cpi	r30, 0xA3	; 163
    27fe:	f3 07       	cpc	r31, r19
    2800:	09 f1       	breq	.+66     	; 0x2844 <main+0x4e8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    2802:	30 97       	sbiw	r30, 0x00	; 0
    2804:	39 f0       	breq	.+14     	; 0x2814 <main+0x4b8>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2806:	a3 89       	ldd	r26, Z+19	; 0x13
    2808:	b4 89       	ldd	r27, Z+20	; 0x14
    280a:	9c 91       	ld	r25, X
    280c:	85 89       	ldd	r24, Z+21	; 0x15
    280e:	80 95       	com	r24
    2810:	89 23       	and	r24, r25
    2812:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    2814:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mySoftwareSerial+0x1e>
    2818:	8e 7f       	andi	r24, 0xFE	; 254
    281a:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    281e:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
    2822:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    2826:	83 ea       	ldi	r24, 0xA3	; 163
    2828:	94 e0       	ldi	r25, 0x04	; 4
    282a:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    282e:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2832:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <mySoftwareSerial+0x13>
    2836:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <mySoftwareSerial+0x14>
    283a:	80 81       	ld	r24, Z
    283c:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <mySoftwareSerial+0x15>
    2840:	89 2b       	or	r24, r25
    2842:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:137
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    2844:	64 ef       	ldi	r22, 0xF4	; 244
    2846:	71 e0       	ldi	r23, 0x01	; 1
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2850:	83 ea       	ldi	r24, 0xA3	; 163
    2852:	e8 2e       	mov	r14, r24
    2854:	84 e0       	ldi	r24, 0x04	; 4
    2856:	f8 2e       	mov	r15, r24
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2858:	dd 24       	eor	r13, r13
    285a:	d3 94       	inc	r13
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    285c:	f0 92 7e 04 	sts	0x047E, r15	; 0x80047e <myDFPlayer+0x1>
    2860:	e0 92 7d 04 	sts	0x047D, r14	; 0x80047d <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2864:	d0 92 95 04 	sts	0x0495, r13	; 0x800495 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	8c e0       	ldi	r24, 0x0C	; 12
    286e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    2872:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2876:	4b 01       	movw	r8, r22
    2878:	5c 01       	movw	r10, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    287a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DFRobotDFPlayerMini::available() [clone .constprop.55]>
    287e:	81 11       	cpse	r24, r1
    2880:	2c c0       	rjmp	.+88     	; 0x28da <main+0x57e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    2882:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2886:	68 19       	sub	r22, r8
    2888:	79 09       	sbc	r23, r9
    288a:	8a 09       	sbc	r24, r10
    288c:	9b 09       	sbc	r25, r11
    288e:	61 3d       	cpi	r22, 0xD1	; 209
    2890:	77 40       	sbci	r23, 0x07	; 7
    2892:	81 05       	cpc	r24, r1
    2894:	91 05       	cpc	r25, r1
    2896:	08 f5       	brcc	.+66     	; 0x28da <main+0x57e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	cb 01       	movw	r24, r22
    289e:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
    28a2:	eb cf       	rjmp	.-42     	; 0x287a <main+0x51e>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:117
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    28a4:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <serviceMode>
    28a8:	00 cf       	rjmp	.-512    	; 0x26aa <main+0x34e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:121
    }
    while (!rtc.begin())
    {
        lcd.clear();
    28aa:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:122
        lcd.print(F("ERR 01")); // Couldn't find RTC
    28ae:	87 e6       	ldi	r24, 0x67	; 103
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
    28b6:	fd ce       	rjmp	.-518    	; 0x26b2 <main+0x356>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    28b8:	2b e6       	ldi	r18, 0x6B	; 107
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	7f cf       	rjmp	.-258    	; 0x27bc <main+0x460>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    28be:	8e 30       	cpi	r24, 0x0E	; 14
    28c0:	14 f4       	brge	.+4      	; 0x28c6 <main+0x56a>
    28c2:	88 50       	subi	r24, 0x08	; 8
    28c4:	82 cf       	rjmp	.-252    	; 0x27ca <main+0x46e>
    28c6:	86 31       	cpi	r24, 0x16	; 22
    28c8:	14 f4       	brge	.+4      	; 0x28ce <main+0x572>
    28ca:	8e 50       	subi	r24, 0x0E	; 14
    28cc:	7e cf       	rjmp	.-260    	; 0x27ca <main+0x46e>
    28ce:	86 31       	cpi	r24, 0x16	; 22
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <main+0x578>
    28d2:	81 cf       	rjmp	.-254    	; 0x27d6 <main+0x47a>
main():
    28d4:	90 e4       	ldi	r25, 0x40	; 64
    28d6:	f9 2e       	mov	r15, r25
    28d8:	7e cf       	rjmp	.-260    	; 0x27d6 <main+0x47a>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    28da:	68 ec       	ldi	r22, 0xC8	; 200
    28dc:	70 e0       	ldi	r23, 0x00	; 0
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    28e6:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    28ea:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    28ee:	84 30       	cpi	r24, 0x04	; 4
    28f0:	59 f0       	breq	.+22     	; 0x2908 <main+0x5ac>
    28f2:	89 30       	cpi	r24, 0x09	; 9
    28f4:	49 f0       	breq	.+18     	; 0x2908 <main+0x5ac>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:140
    {
        mySoftwareSerial.begin(9600);
        delay(500);
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.setCursor(0, 0);
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:141
            lcd.print(F("ERR 03"));
    28fe:	89 e5       	ldi	r24, 0x59	; 89
    2900:	92 e0       	ldi	r25, 0x02	; 2
    2902:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
    2906:	aa cf       	rjmp	.-172    	; 0x285c <main+0x500>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    2908:	84 ef       	ldi	r24, 0xF4	; 244
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	a0 e0       	ldi	r26, 0x00	; 0
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <myDFPlayer+0x6>
    2914:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <myDFPlayer+0x7>
    2918:	a0 93 85 04 	sts	0x0485, r26	; 0x800485 <myDFPlayer+0x8>
    291c:	b0 93 86 04 	sts	0x0486, r27	; 0x800486 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    2920:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    2924:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
    2928:	77 27       	eor	r23, r23
    292a:	86 e0       	ldi	r24, 0x06	; 6
    292c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    2930:	62 e0       	ldi	r22, 0x02	; 2
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	89 e0       	ldi	r24, 0x09	; 9
    2936:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    293a:	68 ec       	ldi	r22, 0xC8	; 200
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:147
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    2946:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:148
    timrLCD = millis();
    294a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    294e:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timrLCD>
    2952:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timrLCD+0x1>
    2956:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timrLCD+0x2>
    295a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:150

    if (serviceMode)
    295e:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <serviceMode>
    2962:	88 23       	and	r24, r24
    2964:	09 f4       	brne	.+2      	; 0x2968 <main+0x60c>
    2966:	45 c1       	rjmp	.+650    	; 0x2bf2 <main+0x896>
attach():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2968:	27 e4       	ldi	r18, 0x47	; 71
    296a:	32 e0       	ldi	r19, 0x02	; 2
    296c:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <Menu1+0x1>
    2970:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2974:	83 e0       	ldi	r24, 0x03	; 3
    2976:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    297a:	30 93 ff 03 	sts	0x03FF, r19	; 0x8003ff <Menu1+0x4>
    297e:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2982:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2986:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:12
  menuStackCount = 0;
    298a:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:155
        Menu1.attach(sampleMenu_Root, menuCount(sampleMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    298e:	86 e0       	ldi	r24, 0x06	; 6
    2990:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2994:	89 2b       	or	r24, r25
    2996:	f1 f4       	brne	.+60     	; 0x29d4 <main+0x678>
    2998:	87 e0       	ldi	r24, 0x07	; 7
    299a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    299e:	89 2b       	or	r24, r25
    29a0:	c9 f4       	brne	.+50     	; 0x29d4 <main+0x678>
attach():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    29a2:	2b e0       	ldi	r18, 0x0B	; 11
    29a4:	32 e0       	ldi	r19, 0x02	; 2
    29a6:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <Menu1+0x1>
    29aa:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    29ae:	83 e0       	ldi	r24, 0x03	; 3
    29b0:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    29b4:	30 93 ff 03 	sts	0x03FF, r19	; 0x8003ff <Menu1+0x4>
    29b8:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    29bc:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    29c0:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:12
  menuStackCount = 0;
    29c4:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:158
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:159
        refreshMenuDisplay(REFRESH_DESCEND);
    29ce:	83 e0       	ldi	r24, 0x03	; 3
    29d0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:161
    }
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    29d4:	85 e0       	ldi	r24, 0x05	; 5
    29d6:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    29da:	89 2b       	or	r24, r25
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <main+0x684>
    29de:	11 c1       	rjmp	.+546    	; 0x2c02 <main+0x8a6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:164
        testMode = true;
    else
        testMode = false;
    29e0:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <testMode>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    29e4:	7e 01       	movw	r14, r28
    29e6:	f9 e1       	ldi	r31, 0x19	; 25
    29e8:	ef 0e       	add	r14, r31
    29ea:	f1 1c       	adc	r15, r1
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:382
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    lpad(h, intbuf, '0', 2);
    29ec:	9e 01       	movw	r18, r28
    29ee:	2f 5c       	subi	r18, 0xCF	; 207
    29f0:	3f 4f       	sbci	r19, 0xFF	; 255
    29f2:	3d ab       	std	Y+53, r19	; 0x35
    29f4:	2c ab       	std	Y+52, r18	; 0x34
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:384
    inttostr(intbuf, rtc.now().minute());
    lpad(m, intbuf, '0', 2);
    29f6:	ce 01       	movw	r24, r28
    29f8:	8e 96       	adiw	r24, 0x2e	; 46
    29fa:	9f ab       	std	Y+55, r25	; 0x37
    29fc:	8e ab       	std	Y+54, r24	; 0x36
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:386
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);
    29fe:	fe 01       	movw	r30, r28
    2a00:	bb 96       	adiw	r30, 0x2b	; 43
    2a02:	f9 af       	std	Y+57, r31	; 0x39
    2a04:	e8 af       	std	Y+56, r30	; 0x38
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:392

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));

    inttostr(intbuf, rtc.now().day());
    lpad(dat, intbuf, '0', 2);
    2a06:	6e 01       	movw	r12, r28
    2a08:	f5 e2       	ldi	r31, 0x25	; 37
    2a0a:	cf 0e       	add	r12, r31
    2a0c:	d1 1c       	adc	r13, r1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:395
    inttostr(intbuf, rtc.now().year());
    lpad(year, intbuf, '0', 4);
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    2a0e:	5e 01       	movw	r10, r28
    2a10:	2f e1       	ldi	r18, 0x1F	; 31
    2a12:	a2 0e       	add	r10, r18
    2a14:	b1 1c       	adc	r11, r1
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:213
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2a16:	77 24       	eor	r7, r7
    2a18:	73 94       	inc	r7
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:190

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    2a1a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2a1e:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <buttonSampleTime>
    2a22:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <buttonSampleTime+0x1>
    2a26:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <buttonSampleTime+0x2>
    2a2a:	50 91 02 03 	lds	r21, 0x0302	; 0x800302 <buttonSampleTime+0x3>
    2a2e:	62 1b       	sub	r22, r18
    2a30:	73 0b       	sbc	r23, r19
    2a32:	84 0b       	sbc	r24, r20
    2a34:	95 0b       	sbc	r25, r21
    2a36:	64 31       	cpi	r22, 0x14	; 20
    2a38:	71 05       	cpc	r23, r1
    2a3a:	81 05       	cpc	r24, r1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	08 f4       	brcc	.+2      	; 0x2a42 <main+0x6e6>
    2a40:	a4 c0       	rjmp	.+328    	; 0x2b8a <main+0x82e>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:192
  {
    buttonSampleTime = millis();
    2a42:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2a46:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <buttonSampleTime>
    2a4a:	70 93 00 03 	sts	0x0300, r23	; 0x800300 <buttonSampleTime+0x1>
    2a4e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <buttonSampleTime+0x2>
    2a52:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2a56:	85 e0       	ldi	r24, 0x05	; 5
    2a58:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2a5c:	4c 01       	movw	r8, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:199
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    2a5e:	86 e0       	ldi	r24, 0x06	; 6
    2a60:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
main():
    2a64:	66 24       	eor	r6, r6
    2a66:	63 94       	inc	r6
buttonHandlerCycle():
    2a68:	89 2b       	or	r24, r25
    2a6a:	31 f0       	breq	.+12     	; 0x2a78 <main+0x71c>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	89 28       	or	r8, r9
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <main+0x718>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	68 2e       	mov	r6, r24
    2a76:	61 94       	neg	r6
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:200
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    2a78:	87 e0       	ldi	r24, 0x07	; 7
    2a7a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2a7e:	89 2b       	or	r24, r25
    2a80:	11 f4       	brne	.+4      	; 0x2a86 <main+0x72a>
main():
    2a82:	b2 e0       	ldi	r27, 0x02	; 2
    2a84:	6b 2e       	mov	r6, r27
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:201
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    2a86:	88 e0       	ldi	r24, 0x08	; 8
    2a88:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2a8c:	89 2b       	or	r24, r25
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <main+0x738>
main():
    2a90:	a3 e0       	ldi	r26, 0x03	; 3
    2a92:	6a 2e       	mov	r6, r26
    2a94:	e2 ed       	ldi	r30, 0xD2	; 210
    2a96:	8e 2e       	mov	r8, r30
    2a98:	e2 e0       	ldi	r30, 0x02	; 2
    2a9a:	9e 2e       	mov	r9, r30
    2a9c:	f6 ee       	ldi	r31, 0xE6	; 230
    2a9e:	2f 2e       	mov	r2, r31
    2aa0:	f2 e0       	ldi	r31, 0x02	; 2
    2aa2:	3f 2e       	mov	r3, r31
    2aa4:	82 e2       	ldi	r24, 0x22	; 34
    2aa6:	91 e0       	ldi	r25, 0x01	; 1
    2aa8:	9d af       	std	Y+61, r25	; 0x3d
    2aaa:	8c af       	std	Y+60, r24	; 0x3c
    2aac:	ea ef       	ldi	r30, 0xFA	; 250
    2aae:	f2 e0       	ldi	r31, 0x02	; 2
    2ab0:	fb af       	std	Y+59, r31	; 0x3b
    2ab2:	ea af       	std	Y+58, r30	; 0x3a
    2ab4:	55 24       	eor	r5, r5
    2ab6:	53 94       	inc	r5
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:205

    

    byte buttonIdentified = 0;
    2ab8:	1e ae       	std	Y+62, r1	; 0x3e
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:210
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    2aba:	fe ad       	ldd	r31, Y+62	; 0x3e
    2abc:	f1 11       	cpse	r31, r1
    2abe:	ab c0       	rjmp	.+342    	; 0x2c16 <main+0x8ba>
    2ac0:	ec ad       	ldd	r30, Y+60	; 0x3c
    2ac2:	fd ad       	ldd	r31, Y+61	; 0x3d
    2ac4:	80 81       	ld	r24, Z
    2ac6:	86 11       	cpse	r24, r6
    2ac8:	a6 c0       	rjmp	.+332    	; 0x2c16 <main+0x8ba>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:213
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2aca:	f1 e0       	ldi	r31, 0x01	; 1
    2acc:	fe af       	std	Y+62, r31	; 0x3e
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:212
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    2ace:	44 24       	eor	r4, r4
    2ad0:	43 94       	inc	r4
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:222
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    2ad2:	ea ad       	ldd	r30, Y+58	; 0x3a
    2ad4:	fb ad       	ldd	r31, Y+59	; 0x3b
    2ad6:	81 91       	ld	r24, Z+
    2ad8:	fb af       	std	Y+59, r31	; 0x3b
    2ada:	ea af       	std	Y+58, r30	; 0x3a
    2adc:	84 15       	cp	r24, r4
    2ade:	b1 f0       	breq	.+44     	; 0x2b0c <main+0x7b0>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:225
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    2ae0:	44 20       	and	r4, r4
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <main+0x78a>
    2ae4:	9a c0       	rjmp	.+308    	; 0x2c1a <main+0x8be>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:227
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    2ae6:	85 2d       	mov	r24, r5
    2ae8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:228
          buttonPressTime[i] = millis();
    2aec:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2af0:	f1 01       	movw	r30, r2
    2af2:	60 83       	st	Z, r22
    2af4:	71 83       	std	Z+1, r23	; 0x01
    2af6:	82 83       	std	Z+2, r24	; 0x02
    2af8:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:229
          buttonHoldTime[i] = buttonPressTime[i];
    2afa:	f4 01       	movw	r30, r8
    2afc:	60 83       	st	Z, r22
    2afe:	71 83       	std	Z+1, r23	; 0x01
    2b00:	82 83       	std	Z+2, r24	; 0x02
    2b02:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:243
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    2b04:	ea ad       	ldd	r30, Y+58	; 0x3a
    2b06:	fb ad       	ldd	r31, Y+59	; 0x3b
    2b08:	31 97       	sbiw	r30, 0x01	; 1
    2b0a:	40 82       	st	Z, r4
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:247
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    2b0c:	44 20       	and	r4, r4
    2b0e:	71 f1       	breq	.+92     	; 0x2b6c <main+0x810>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:249
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    2b10:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2b14:	f1 01       	movw	r30, r2
    2b16:	20 81       	ld	r18, Z
    2b18:	31 81       	ldd	r19, Z+1	; 0x01
    2b1a:	42 81       	ldd	r20, Z+2	; 0x02
    2b1c:	53 81       	ldd	r21, Z+3	; 0x03
    2b1e:	62 1b       	sub	r22, r18
    2b20:	73 0b       	sbc	r23, r19
    2b22:	84 0b       	sbc	r24, r20
    2b24:	95 0b       	sbc	r25, r21
    2b26:	69 3b       	cpi	r22, 0xB9	; 185
    2b28:	7b 40       	sbci	r23, 0x0B	; 11
    2b2a:	81 05       	cpc	r24, r1
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	f0 f0       	brcs	.+60     	; 0x2b6c <main+0x810>
    2b30:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2b34:	f4 01       	movw	r30, r8
    2b36:	20 81       	ld	r18, Z
    2b38:	31 81       	ldd	r19, Z+1	; 0x01
    2b3a:	42 81       	ldd	r20, Z+2	; 0x02
    2b3c:	53 81       	ldd	r21, Z+3	; 0x03
    2b3e:	62 1b       	sub	r22, r18
    2b40:	73 0b       	sbc	r23, r19
    2b42:	84 0b       	sbc	r24, r20
    2b44:	95 0b       	sbc	r25, r21
    2b46:	6b 3f       	cpi	r22, 0xFB	; 251
    2b48:	71 05       	cpc	r23, r1
    2b4a:	81 05       	cpc	r24, r1
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	70 f0       	brcs	.+28     	; 0x2b6c <main+0x810>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:251
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    2b50:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b52:	2a ef       	ldi	r18, 0xFA	; 250
    2b54:	32 e0       	ldi	r19, 0x02	; 2
    2b56:	82 1b       	sub	r24, r18
    2b58:	80 68       	ori	r24, 0x80	; 128
    2b5a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:252
          buttonHoldTime[i] = millis();
    2b5e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2b62:	f4 01       	movw	r30, r8
    2b64:	60 83       	st	Z, r22
    2b66:	71 83       	std	Z+1, r23	; 0x01
    2b68:	82 83       	std	Z+2, r24	; 0x02
    2b6a:	93 83       	std	Z+3, r25	; 0x03
    2b6c:	53 94       	inc	r5
    2b6e:	f4 e0       	ldi	r31, 0x04	; 4
    2b70:	8f 0e       	add	r8, r31
    2b72:	91 1c       	adc	r9, r1
    2b74:	24 e0       	ldi	r18, 0x04	; 4
    2b76:	22 0e       	add	r2, r18
    2b78:	31 1c       	adc	r3, r1
    2b7a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b7c:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	9d af       	std	Y+61, r25	; 0x3d
    2b82:	8c af       	std	Y+60, r24	; 0x3c
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:207

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    2b84:	96 e0       	ldi	r25, 0x06	; 6
    2b86:	59 12       	cpse	r5, r25
    2b88:	98 cf       	rjmp	.-208    	; 0x2aba <main+0x75e>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:172
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    2b8a:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <buttonBufferCount>
    2b8e:	19 16       	cp	r1, r25
    2b90:	0c f4       	brge	.+2      	; 0x2b94 <main+0x838>
    2b92:	5b c0       	rjmp	.+182    	; 0x2c4a <main+0x8ee>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:168
    else
        testMode = false;
}
void loop()
{
    btn = getButton();
    2b94:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <btn>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:170
// ----------------------------------------------------------------------------------------------------
byte getButton ()
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
    2b98:	91 2c       	mov	r9, r1
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:175
    {
        timrLCD = millis();
        timrMNU = millis();
        lcd.backlight();
    }
    if (millis() - timrLCD > 300)
    2b9a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2b9e:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <timrLCD>
    2ba2:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <timrLCD+0x1>
    2ba6:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <timrLCD+0x2>
    2baa:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <timrLCD+0x3>
    2bae:	62 1b       	sub	r22, r18
    2bb0:	73 0b       	sbc	r23, r19
    2bb2:	84 0b       	sbc	r24, r20
    2bb4:	95 0b       	sbc	r25, r21
    2bb6:	6d 32       	cpi	r22, 0x2D	; 45
    2bb8:	71 40       	sbci	r23, 0x01	; 1
    2bba:	81 05       	cpc	r24, r1
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	20 f0       	brcs	.+8      	; 0x2bc8 <main+0x86c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:178
    {
        downButPreCount = 0;
        selButPreCount = 0;
    2bc0:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <selButPreCount+0x1>
    2bc4:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:181
        upButPreCount = 0;
    }
    switch (appMode)
    2bc8:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <appMode>
    2bcc:	82 30       	cpi	r24, 0x02	; 2
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <main+0x876>
    2bd0:	f3 c4       	rjmp	.+2534   	; 0x35b8 <main+0x125c>
    2bd2:	08 f0       	brcs	.+2      	; 0x2bd6 <main+0x87a>
    2bd4:	6e c0       	rjmp	.+220    	; 0x2cb2 <main+0x956>
    2bd6:	88 23       	and	r24, r24
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <main+0x880>
    2bda:	35 c1       	rjmp	.+618    	; 0x2e46 <main+0xaea>
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <main+0x886>
    2be0:	7a c3       	rjmp	.+1780   	; 0x32d6 <main+0xf7a>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	89 2b       	or	r24, r25
    2be8:	09 f4       	brne	.+2      	; 0x2bec <main+0x890>
    2bea:	17 cf       	rjmp	.-466    	; 0x2a1a <main+0x6be>
    2bec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2bf0:	12 cf       	rjmp	.-476    	; 0x2a16 <main+0x6ba>
attach():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2bf2:	2d e1       	ldi	r18, 0x1D	; 29
    2bf4:	32 e0       	ldi	r19, 0x02	; 2
    2bf6:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <Menu1+0x1>
    2bfa:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2bfe:	87 e0       	ldi	r24, 0x07	; 7
    2c00:	ba ce       	rjmp	.-652    	; 0x2976 <main+0x61a>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:161
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
        refreshMenuDisplay(REFRESH_DESCEND);
    }
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    2c02:	88 e0       	ldi	r24, 0x08	; 8
    2c04:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2c08:	89 2b       	or	r24, r25
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <main+0x8b2>
    2c0c:	e9 ce       	rjmp	.-558    	; 0x29e0 <main+0x684>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:162
        testMode = true;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <testMode>
    2c14:	e7 ce       	rjmp	.-562    	; 0x29e4 <main+0x688>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:217
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    2c16:	41 2c       	mov	r4, r1
    2c18:	5c cf       	rjmp	.-328    	; 0x2ad2 <main+0x776>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:234
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    2c1a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2c1e:	f1 01       	movw	r30, r2
    2c20:	20 81       	ld	r18, Z
    2c22:	31 81       	ldd	r19, Z+1	; 0x01
    2c24:	42 81       	ldd	r20, Z+2	; 0x02
    2c26:	53 81       	ldd	r21, Z+3	; 0x03
    2c28:	62 1b       	sub	r22, r18
    2c2a:	73 0b       	sbc	r23, r19
    2c2c:	84 0b       	sbc	r24, r20
    2c2e:	95 0b       	sbc	r25, r21
    2c30:	69 3b       	cpi	r22, 0xB9	; 185
    2c32:	7b 40       	sbci	r23, 0x0B	; 11
    2c34:	81 05       	cpc	r24, r1
    2c36:	91 05       	cpc	r25, r1
    2c38:	28 f0       	brcs	.+10     	; 0x2c44 <main+0x8e8>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:236
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    2c3a:	85 2d       	mov	r24, r5
    2c3c:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:240
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    2c3e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <queueButton(unsigned char)>
    2c42:	60 cf       	rjmp	.-320    	; 0x2b04 <main+0x7a8>
    2c44:	85 2d       	mov	r24, r5
    2c46:	80 64       	ori	r24, 0x40	; 64
    2c48:	fa cf       	rjmp	.-12     	; 0x2c3e <main+0x8e2>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:174
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    2c4a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <button_read_pos>
    2c4e:	e8 2f       	mov	r30, r24
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	ed 5f       	subi	r30, 0xFD	; 253
    2c54:	fc 4f       	sbci	r31, 0xFC	; 252
    2c56:	90 80       	ld	r9, Z
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:175
    buttonBufferCount--;
    2c58:	91 50       	subi	r25, 0x01	; 1
    2c5a:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:176
    button_read_pos++;
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:178
    
    if (button_read_pos >= sizeof (buttonBuffer))
    2c60:	85 30       	cpi	r24, 0x05	; 5
    2c62:	20 f5       	brcc	.+72     	; 0x2cac <main+0x950>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:176
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    2c64:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:168
    else
        testMode = false;
}
void loop()
{
    btn = getButton();
    2c68:	90 92 20 03 	sts	0x0320, r9	; 0x800320 <btn>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:169
    if (btn)
    2c6c:	99 20       	and	r9, r9
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <main+0x916>
    2c70:	94 cf       	rjmp	.-216    	; 0x2b9a <main+0x83e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:171
    {
        timrLCD = millis();
    2c72:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2c76:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timrLCD>
    2c7a:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timrLCD+0x1>
    2c7e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timrLCD+0x2>
    2c82:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:172
        timrMNU = millis();
    2c86:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2c8a:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <timrMNU>
    2c8e:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <timrMNU+0x1>
    2c92:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <timrMNU+0x2>
    2c96:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2c9a:	88 e0       	ldi	r24, 0x08	; 8
    2c9c:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	81 e7       	ldi	r24, 0x71	; 113
    2ca4:	94 e0       	ldi	r25, 0x04	; 4
    2ca6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    2caa:	77 cf       	rjmp	.-274    	; 0x2b9a <main+0x83e>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:180
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    2cac:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <button_read_pos>
    2cb0:	db cf       	rjmp	.-74     	; 0x2c68 <main+0x90c>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:181
    {
        downButPreCount = 0;
        selButPreCount = 0;
        upButPreCount = 0;
    }
    switch (appMode)
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <main+0x95c>
    2cb6:	c1 c2       	rjmp	.+1410   	; 0x323a <main+0xede>
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <main+0x962>
    2cbc:	92 cf       	rjmp	.-220    	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:261
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:262
        lcd.print(F("  RUNNING DEMO  "));
    2cc6:	8b e8       	ldi	r24, 0x8B	; 139
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:263
        lcd.setCursor(0, 1);
    2cce:	61 e0       	ldi	r22, 0x01	; 1
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:264
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    2cd6:	80 90 03 01 	lds	r8, 0x0103	; 0x800103 <demoTime>
    2cda:	90 90 04 01 	lds	r9, 0x0104	; 0x800104 <demoTime+0x1>
main():
    2cde:	60 e7       	ldi	r22, 0x70	; 112
    2ce0:	71 e0       	ldi	r23, 0x01	; 1
loop():
    2ce2:	9c e0       	ldi	r25, 0x0C	; 12
    2ce4:	89 16       	cp	r8, r25
    2ce6:	91 04       	cpc	r9, r1
    2ce8:	14 f4       	brge	.+4      	; 0x2cee <main+0x992>
main():
    2cea:	67 e7       	ldi	r22, 0x77	; 119
    2cec:	71 e0       	ldi	r23, 0x01	; 1
loop():
    2cee:	ce 01       	movw	r24, r28
    2cf0:	43 96       	adiw	r24, 0x13	; 19
    2cf2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
    2cf6:	ed e0       	ldi	r30, 0x0D	; 13
    2cf8:	8e 16       	cp	r8, r30
    2cfa:	91 04       	cpc	r9, r1
    2cfc:	1c f0       	brlt	.+6      	; 0x2d04 <main+0x9a8>
    2cfe:	fc e0       	ldi	r31, 0x0C	; 12
    2d00:	8f 1a       	sub	r8, r31
    2d02:	91 08       	sbc	r9, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    2d04:	1a 8e       	std	Y+26, r1	; 0x1a
    2d06:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    2d08:	1c 8e       	std	Y+28, r1	; 0x1c
    2d0a:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    2d0c:	1e 8e       	std	Y+30, r1	; 0x1e
    2d0e:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2d10:	4a e0       	ldi	r20, 0x0A	; 10
    2d12:	b8 01       	movw	r22, r16
    2d14:	c4 01       	movw	r24, r8
    2d16:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	01 90       	ld	r0, Z+
    2d1e:	00 20       	and	r0, r0
    2d20:	e9 f7       	brne	.-6      	; 0x2d1c <main+0x9c0>
    2d22:	31 97       	sbiw	r30, 0x01	; 1
    2d24:	4f 01       	movw	r8, r30
    2d26:	80 1a       	sub	r8, r16
    2d28:	91 0a       	sbc	r9, r17
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2d2a:	b4 01       	movw	r22, r8
    2d2c:	c7 01       	movw	r24, r14
    2d2e:	0e 94 1d 0a 	call	0x143a	; 0x143a <String::reserve(unsigned int)>
    2d32:	81 11       	cpse	r24, r1
    2d34:	b9 c2       	rjmp	.+1394   	; 0x32a8 <main+0xf4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    2d36:	c7 01       	movw	r24, r14
    2d38:	0e 94 c5 08 	call	0x118a	; 0x118a <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    2d3c:	69 e1       	ldi	r22, 0x19	; 25
    2d3e:	72 e0       	ldi	r23, 0x02	; 2
    2d40:	c8 01       	movw	r24, r16
    2d42:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:264
    2d46:	b7 01       	movw	r22, r14
    2d48:	c8 01       	movw	r24, r16
    2d4a:	0e 94 45 0a 	call	0x148a	; 0x148a <operator+(StringSumHelper const&, String const&)>
    2d4e:	be 01       	movw	r22, r28
    2d50:	6d 5e       	subi	r22, 0xED	; 237
    2d52:	7f 4f       	sbci	r23, 0xFF	; 255
    2d54:	0e 94 45 0a 	call	0x148a	; 0x148a <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    2d58:	fc 01       	movw	r30, r24
    2d5a:	44 81       	ldd	r20, Z+4	; 0x04
    2d5c:	55 81       	ldd	r21, Z+5	; 0x05
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	81 e7       	ldi	r24, 0x71	; 113
    2d64:	94 e0       	ldi	r25, 0x04	; 4
    2d66:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
    2d72:	89 8d       	ldd	r24, Y+25	; 0x19
    2d74:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d76:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
    2d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7e:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:265
        digitalWrite(AMP, HIGH);
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	8c e0       	ldi	r24, 0x0C	; 12
    2d86:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:267
        // delay(1000);
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    2d8a:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <demoTime>
    2d8e:	c8 01       	movw	r24, r16
    2d90:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2d94:	8b 80       	ldd	r8, Y+3	; 0x03
    2d96:	ce 01       	movw	r24, r28
    2d98:	43 96       	adiw	r24, 0x13	; 19
    2d9a:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2d9e:	6c 88       	ldd	r6, Y+20	; 0x14
    2da0:	c7 01       	movw	r24, r14
    2da2:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2da6:	89 8d       	ldd	r24, Y+25	; 0x19
    2da8:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <bell>
    2dac:	60 92 6c 04 	sts	0x046C, r6	; 0x80046c <bell+0x1>
    2db0:	80 92 6d 04 	sts	0x046D, r8	; 0x80046d <bell+0x2>
    2db4:	90 92 6e 04 	sts	0x046E, r9	; 0x80046e <bell+0x3>
    2db8:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <bell+0x4>
    2dbc:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <bell+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:268
        PlayChant();
    2dc0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:269
        if (btn == BUTTON_LEFT_PRESSED)
    2dc4:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    2dc8:	84 30       	cpi	r24, 0x04	; 4
    2dca:	41 f4       	brne	.+16     	; 0x2ddc <main+0xa80>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:271
        {
            playSong = End_of_Song;
    2dcc:	88 e0       	ldi	r24, 0x08	; 8
    2dce:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	86 e1       	ldi	r24, 0x16	; 22
    2dd8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:274
            myDFPlayer.stop();
        }
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    2ddc:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    2de0:	8f 77       	andi	r24, 0x7F	; 127
    2de2:	82 30       	cpi	r24, 0x02	; 2
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <main+0xa8c>
    2de6:	68 c2       	rjmp	.+1232   	; 0x32b8 <main+0xf5c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:276
        {
            config.vol = ++config.vol > 30 ? 10 : config.vol;
    2de8:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    2dec:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	8f 31       	cpi	r24, 0x1F	; 31
    2df4:	91 05       	cpc	r25, r1
    2df6:	14 f0       	brlt	.+4      	; 0x2dfc <main+0xaa0>
main():
    2df8:	8a e0       	ldi	r24, 0x0A	; 10
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:287
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    2dfc:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    2e00:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:288
            config.save();
    2e04:	0e 94 15 0a 	call	0x142a	; 0x142a <Config::save() [clone .constprop.27]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:289
            lcd.clear();
    2e08:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:290
            lcd.setCursor(0, 1);
    2e0c:	61 e0       	ldi	r22, 0x01	; 1
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:291
            lcd.print("VOLUME : ");
    2e14:	86 e2       	ldi	r24, 0x26	; 38
    2e16:	92 e0       	ldi	r25, 0x02	; 2
    2e18:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:292
            lcd.print(config.vol);
    2e1c:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    2e20:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    2e24:	0e 94 25 09 	call	0x124a	; 0x124a <Print::print(int, int) [clone .constprop.6]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    2e28:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    2e2c:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
    2e30:	77 27       	eor	r23, r23
    2e32:	86 e0       	ldi	r24, 0x06	; 6
    2e34:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:294
            myDFPlayer.volume(config.vol);
            delay(100);
    2e38:	64 e6       	ldi	r22, 0x64	; 100
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
    2e44:	ce ce       	rjmp	.-612    	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:184
        upButPreCount = 0;
    }
    switch (appMode)
    {
    case APP_NORMAL_MODE:
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    2e46:	f1 e8       	ldi	r31, 0x81	; 129
    2e48:	9f 12       	cpse	r9, r31
    2e4a:	9d c1       	rjmp	.+826    	; 0x3186 <main+0xe2a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:186
        {
            appMode = APP_MENU_MODE;
    2e4c:	70 92 15 03 	sts	0x0315, r7	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:187
            refreshMenuDisplay(REFRESH_DESCEND);
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:188
            timrMNU = millis();
    2e56:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2e5a:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <timrMNU>
    2e5e:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <timrMNU+0x1>
    2e62:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <timrMNU+0x2>
    2e66:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:202
                lcd.clear();
            }
        }
        // TEST MODE //   
        {
            if (btn == BUTTON_UP_PRESSED && testMode)
    2e6a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    2e6e:	82 30       	cpi	r24, 0x02	; 2
    2e70:	a9 f5       	brne	.+106    	; 0x2edc <main+0xb80>
    2e72:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <testMode>
    2e76:	88 23       	and	r24, r24
    2e78:	89 f1       	breq	.+98     	; 0x2edc <main+0xb80>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:204
            {
                timrAmp = millis() - 71000L;
    2e7a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2e7e:	68 55       	subi	r22, 0x58	; 88
    2e80:	75 41       	sbci	r23, 0x15	; 21
    2e82:	81 40       	sbci	r24, 0x01	; 1
    2e84:	91 09       	sbc	r25, r1
    2e86:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <timrAmp>
    2e8a:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <timrAmp+0x1>
    2e8e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <timrAmp+0x2>
    2e92:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:205
                if (rtc.now().minute() < 30)
    2e96:	c8 01       	movw	r24, r16
    2e98:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	8e 31       	cpi	r24, 0x1E	; 30
    2ea0:	08 f0       	brcs	.+2      	; 0x2ea4 <main+0xb48>
    2ea2:	9d c1       	rjmp	.+826    	; 0x31de <main+0xe82>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:206
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	43 96       	adiw	r24, 0x13	; 19
    2ea8:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2eac:	9e 88       	ldd	r9, Y+22	; 0x16
    2eae:	c7 01       	movw	r24, r14
    2eb0:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2eb4:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2eb6:	c5 01       	movw	r24, r10
    2eb8:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2ebc:	68 a0       	ldd	r6, Y+32	; 0x20
    2ebe:	c6 01       	movw	r24, r12
    2ec0:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2ec4:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    2ec6:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    2ec8:	6a 82       	std	Y+2, r6	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    2eca:	8b 82       	std	Y+3, r8	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    2ecc:	9c 82       	std	Y+4, r9	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    2ece:	8d e1       	ldi	r24, 0x1D	; 29
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    2ed2:	87 e3       	ldi	r24, 0x37	; 55
    2ed4:	8e 83       	std	Y+6, r24	; 0x06
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:208
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	0e 94 50 07 	call	0xea0	; 0xea0 <RTC_DS1307::adjust(DateTime const&)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:211
            }
        }   
        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    2edc:	c8 01       	movw	r24, r16
    2ede:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	81 11       	cpse	r24, r1
    2ee6:	5a c0       	rjmp	.+180    	; 0x2f9c <main+0xc40>
    2ee8:	ce 01       	movw	r24, r28
    2eea:	43 96       	adiw	r24, 0x13	; 19
    2eec:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2ef0:	88 8d       	ldd	r24, Y+24	; 0x18
    2ef2:	81 11       	cpse	r24, r1
    2ef4:	53 c0       	rjmp	.+166    	; 0x2f9c <main+0xc40>
    2ef6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2efa:	ab 01       	movw	r20, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timrAmp>
    2f02:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timrAmp+0x1>
    2f06:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <timrAmp+0x2>
    2f0a:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <timrAmp+0x3>
    2f0e:	88 5b       	subi	r24, 0xB8	; 184
    2f10:	91 41       	sbci	r25, 0x11	; 17
    2f12:	af 4f       	sbci	r26, 0xFF	; 255
    2f14:	bf 4f       	sbci	r27, 0xFF	; 255
    2f16:	84 17       	cp	r24, r20
    2f18:	95 07       	cpc	r25, r21
    2f1a:	a6 07       	cpc	r26, r22
    2f1c:	b7 07       	cpc	r27, r23
    2f1e:	f0 f5       	brcc	.+124    	; 0x2f9c <main+0xc40>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:213
        {
            bell = rtc.now();
    2f20:	c8 01       	movw	r24, r16
    2f22:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    2f26:	86 e0       	ldi	r24, 0x06	; 6
    2f28:	f8 01       	movw	r30, r16
    2f2a:	ab e6       	ldi	r26, 0x6B	; 107
    2f2c:	b4 e0       	ldi	r27, 0x04	; 4
    2f2e:	01 90       	ld	r0, Z+
    2f30:	0d 92       	st	X+, r0
    2f32:	8a 95       	dec	r24
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <main+0xbd2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:214
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    2f36:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <bell+0x3>
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <config+0xf>
    2f40:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <config+0x10>
    2f44:	82 17       	cp	r24, r18
    2f46:	93 07       	cpc	r25, r19
    2f48:	4c f1       	brlt	.+82     	; 0x2f9c <main+0xc40>
    2f4a:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <config+0x11>
    2f4e:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <config+0x12>
    2f52:	28 17       	cp	r18, r24
    2f54:	39 07       	cpc	r19, r25
    2f56:	14 f1       	brlt	.+68     	; 0x2f9c <main+0xc40>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:216
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    2f58:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <config+0x17>
    2f5c:	88 23       	and	r24, r24
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <main+0xc06>
    2f60:	55 c1       	rjmp	.+682    	; 0x320c <main+0xeb0>
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <DateTime::dayOfTheWeek() const [clone .constprop.20]>
    2f66:	88 23       	and	r24, r24
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <main+0xc10>
    2f6a:	50 c1       	rjmp	.+672    	; 0x320c <main+0xeb0>
    2f6c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <bell+0x3>
    2f70:	8a 50       	subi	r24, 0x0A	; 10
    2f72:	87 30       	cpi	r24, 0x07	; 7
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <main+0xc1c>
    2f76:	4a c1       	rjmp	.+660    	; 0x320c <main+0xeb0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:221
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    2f78:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:222
                    lcd.setCursor(0,0);
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:223
                    lcd.print("School Zone : ON");
    2f84:	83 ef       	ldi	r24, 0xF3	; 243
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:224
                    delay(1000);
    2f8c:	68 ee       	ldi	r22, 0xE8	; 232
    2f8e:	73 e0       	ldi	r23, 0x03	; 3
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:232
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    2f98:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:236
                }
            }
        }
        if (millis() - timr_Time > 1000)
    2f9c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2fa0:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <timr_Time>
    2fa4:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <timr_Time+0x1>
    2fa8:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <timr_Time+0x2>
    2fac:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <timr_Time+0x3>
    2fb0:	62 1b       	sub	r22, r18
    2fb2:	73 0b       	sbc	r23, r19
    2fb4:	84 0b       	sbc	r24, r20
    2fb6:	95 0b       	sbc	r25, r21
    2fb8:	69 3e       	cpi	r22, 0xE9	; 233
    2fba:	73 40       	sbci	r23, 0x03	; 3
    2fbc:	81 05       	cpc	r24, r1
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	08 f4       	brcc	.+2      	; 0x2fc4 <main+0xc68>
    2fc2:	bb c0       	rjmp	.+374    	; 0x313a <main+0xdde>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:238
        {
            timr_Time = millis();
    2fc4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2fc8:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timr_Time>
    2fcc:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timr_Time+0x1>
    2fd0:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timr_Time+0x2>
    2fd4:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timr_Time+0x3>
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:381
void showTime()
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    2fd8:	ce 01       	movw	r24, r28
    2fda:	43 96       	adiw	r24, 0x13	; 19
    2fdc:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:562
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    2fe0:	6e 89       	ldd	r22, Y+22	; 0x16
    2fe2:	66 23       	and	r22, r22
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <main+0xc8c>
    2fe6:	24 c1       	rjmp	.+584    	; 0x3230 <main+0xed4>
    2fe8:	6c 30       	cpi	r22, 0x0C	; 12
    2fea:	11 f0       	breq	.+4      	; 0x2ff0 <main+0xc94>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:564
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <main+0xc94>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:565
    return hh - 12;
    2fee:	6c 50       	subi	r22, 0x0C	; 12
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:381
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:382
    lpad(h, intbuf, '0', 2);
    2ff8:	42 e0       	ldi	r20, 0x02	; 2
    2ffa:	b8 01       	movw	r22, r16
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	c1 96       	adiw	r24, 0x31	; 49
    3000:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:383
    inttostr(intbuf, rtc.now().minute());
    3004:	ce 01       	movw	r24, r28
    3006:	43 96       	adiw	r24, 0x13	; 19
    3008:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    300c:	6f 89       	ldd	r22, Y+23	; 0x17
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	c8 01       	movw	r24, r16
    3012:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:384
    lpad(m, intbuf, '0', 2);
    3016:	42 e0       	ldi	r20, 0x02	; 2
    3018:	b8 01       	movw	r22, r16
    301a:	ce 01       	movw	r24, r28
    301c:	8e 96       	adiw	r24, 0x2e	; 46
    301e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:385
    inttostr(intbuf, rtc.now().second());
    3022:	ce 01       	movw	r24, r28
    3024:	43 96       	adiw	r24, 0x13	; 19
    3026:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    302a:	68 8d       	ldd	r22, Y+24	; 0x18
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	c8 01       	movw	r24, r16
    3030:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:386
    lpad(s, intbuf, '0', 2);
    3034:	42 e0       	ldi	r20, 0x02	; 2
    3036:	b8 01       	movw	r22, r16
    3038:	ce 01       	movw	r24, r28
    303a:	8b 96       	adiw	r24, 0x2b	; 43
    303c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:388

    lcd.setCursor(2, 0);
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:389
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    3048:	ce 01       	movw	r24, r28
    304a:	43 96       	adiw	r24, 0x13	; 19
    304c:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    3050:	8e 89       	ldd	r24, Y+22	; 0x16
    3052:	8c 30       	cpi	r24, 0x0C	; 12
    3054:	08 f4       	brcc	.+2      	; 0x3058 <main+0xcfc>
    3056:	ee c0       	rjmp	.+476    	; 0x3234 <main+0xed8>
main():
    3058:	8f e6       	ldi	r24, 0x6F	; 111
    305a:	91 e0       	ldi	r25, 0x01	; 1
showTime():
    305c:	9f 93       	push	r25
    305e:	8f 93       	push	r24
    3060:	69 ad       	ldd	r22, Y+57	; 0x39
    3062:	6f 93       	push	r22
    3064:	88 ad       	ldd	r24, Y+56	; 0x38
    3066:	8f 93       	push	r24
    3068:	84 e0       	ldi	r24, 0x04	; 4
    306a:	92 e0       	ldi	r25, 0x02	; 2
    306c:	9f 93       	push	r25
    306e:	8f 93       	push	r24
    3070:	ef a9       	ldd	r30, Y+55	; 0x37
    3072:	ef 93       	push	r30
    3074:	fe a9       	ldd	r31, Y+54	; 0x36
    3076:	ff 93       	push	r31
    3078:	9f 93       	push	r25
    307a:	8f 93       	push	r24
    307c:	2d a9       	ldd	r18, Y+53	; 0x35
    307e:	2f 93       	push	r18
    3080:	3c a9       	ldd	r19, Y+52	; 0x34
    3082:	3f 93       	push	r19
    3084:	66 e0       	ldi	r22, 0x06	; 6
    3086:	66 2e       	mov	r6, r22
    3088:	6f 92       	push	r6
    308a:	7a ee       	ldi	r23, 0xEA	; 234
    308c:	87 2e       	mov	r8, r23
    308e:	73 e0       	ldi	r23, 0x03	; 3
    3090:	97 2e       	mov	r9, r23
    3092:	9f 92       	push	r9
    3094:	8f 92       	push	r8
    3096:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    309a:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:391

    inttostr(intbuf, rtc.now().day());
    309e:	ce 01       	movw	r24, r28
    30a0:	43 96       	adiw	r24, 0x13	; 19
    30a2:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    30a6:	6d 89       	ldd	r22, Y+21	; 0x15
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	c8 01       	movw	r24, r16
    30ac:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:392
    lpad(dat, intbuf, '0', 2);
    30b0:	42 e0       	ldi	r20, 0x02	; 2
    30b2:	b8 01       	movw	r22, r16
    30b4:	c6 01       	movw	r24, r12
    30b6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:393
    inttostr(intbuf, rtc.now().year());
    30ba:	ce 01       	movw	r24, r28
    30bc:	43 96       	adiw	r24, 0x13	; 19
    30be:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    30c2:	6b 89       	ldd	r22, Y+19	; 0x13
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	60 53       	subi	r22, 0x30	; 48
    30c8:	78 4f       	sbci	r23, 0xF8	; 248
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:393
    30ca:	c8 01       	movw	r24, r16
    30cc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:394
    lpad(year, intbuf, '0', 4);
    30d0:	44 e0       	ldi	r20, 0x04	; 4
    30d2:	b8 01       	movw	r22, r16
    30d4:	c7 01       	movw	r24, r14
    30d6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:395
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    30da:	ce 01       	movw	r24, r28
    30dc:	43 96       	adiw	r24, 0x13	; 19
    30de:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    30e2:	8c 89       	ldd	r24, Y+20	; 0x14
    30e4:	81 50       	subi	r24, 0x01	; 1
    30e6:	99 0b       	sbc	r25, r25
    30e8:	68 9e       	mul	r6, r24
    30ea:	f0 01       	movw	r30, r0
    30ec:	69 9e       	mul	r6, r25
    30ee:	f0 0d       	add	r31, r0
    30f0:	11 24       	eor	r1, r1
    30f2:	ed 5d       	subi	r30, 0xDD	; 221
    30f4:	fb 4f       	sbci	r31, 0xFB	; 251
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	c5 01       	movw	r24, r10
    30fc:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:397

    lcd.setCursor(2, 1);
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	82 e0       	ldi	r24, 0x02	; 2
    3104:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:398
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
    3108:	ff 92       	push	r15
    310a:	ef 92       	push	r14
    310c:	86 e0       	ldi	r24, 0x06	; 6
    310e:	92 e0       	ldi	r25, 0x02	; 2
    3110:	9f 93       	push	r25
    3112:	8f 93       	push	r24
    3114:	bf 92       	push	r11
    3116:	af 92       	push	r10
    3118:	9f 93       	push	r25
    311a:	8f 93       	push	r24
    311c:	df 92       	push	r13
    311e:	cf 92       	push	r12
    3120:	85 e0       	ldi	r24, 0x05	; 5
    3122:	8f 93       	push	r24
    3124:	9f 92       	push	r9
    3126:	8f 92       	push	r8
    3128:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fmt(char*, unsigned char, ...)>
    312c:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:241
        if (millis() - timr_Time > 1000)
        {
            timr_Time = millis();
            showTime();
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    313a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    313e:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <timrLCD>
    3142:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <timrLCD+0x1>
    3146:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <timrLCD+0x2>
    314a:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <timrLCD+0x3>
    314e:	1b 01       	movw	r2, r22
    3150:	2c 01       	movw	r4, r24
    3152:	22 1a       	sub	r2, r18
    3154:	33 0a       	sbc	r3, r19
    3156:	44 0a       	sbc	r4, r20
    3158:	55 0a       	sbc	r5, r21
    315a:	a0 91 3e 03 	lds	r26, 0x033E	; 0x80033e <config+0x13>
    315e:	b0 91 3f 03 	lds	r27, 0x033F	; 0x80033f <config+0x14>
    3162:	28 ee       	ldi	r18, 0xE8	; 232
    3164:	33 e0       	ldi	r19, 0x03	; 3
    3166:	0e 94 a5 20 	call	0x414a	; 0x414a <__usmulhisi3>
    316a:	62 15       	cp	r22, r2
    316c:	73 05       	cpc	r23, r3
    316e:	84 05       	cpc	r24, r4
    3170:	95 05       	cpc	r25, r5
    3172:	08 f0       	brcs	.+2      	; 0x3176 <main+0xe1a>
    3174:	36 cd       	rjmp	.-1428   	; 0x2be2 <main+0x886>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3176:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	81 e7       	ldi	r24, 0x71	; 113
    317e:	94 e0       	ldi	r25, 0x04	; 4
    3180:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    3184:	2e cd       	rjmp	.-1444   	; 0x2be2 <main+0x886>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:190
        {
            appMode = APP_MENU_MODE;
            refreshMenuDisplay(REFRESH_DESCEND);
            timrMNU = millis();
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3186:	21 e0       	ldi	r18, 0x01	; 1
    3188:	92 12       	cpse	r9, r18
    318a:	6f ce       	rjmp	.-802    	; 0x2e6a <main+0xb0e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:192
        {
            selButPreCount += 1;
    318c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <selButPreCount>
    3190:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <selButPreCount+0x1>
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <selButPreCount+0x1>
    319a:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:193
            if (selButPreCount >= 4)
    319e:	04 97       	sbiw	r24, 0x04	; 4
    31a0:	0c f4       	brge	.+2      	; 0x31a4 <main+0xe48>
    31a2:	63 ce       	rjmp	.-826    	; 0x2e6a <main+0xb0e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:195
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    31a4:	c8 01       	movw	r24, r16
    31a6:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	8f 31       	cpi	r24, 0x1F	; 31
    31ae:	88 f0       	brcs	.+34     	; 0x31d2 <main+0xe76>
    31b0:	ce 01       	movw	r24, r28
    31b2:	43 96       	adiw	r24, 0x13	; 19
    31b4:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31b8:	8e 89       	ldd	r24, Y+22	; 0x16
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	01 96       	adiw	r24, 0x01	; 1
    31be:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    31c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:196
                appMode = APP_DEMO_MODE;
    31c6:	84 e0       	ldi	r24, 0x04	; 4
    31c8:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:197
                lcd.clear();
    31cc:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
    31d0:	4c ce       	rjmp	.-872    	; 0x2e6a <main+0xb0e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:195
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    31d2:	c7 01       	movw	r24, r14
    31d4:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	f0 cf       	rjmp	.-32     	; 0x31be <main+0xe62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:208
            {
                timrAmp = millis() - 71000L;
                if (rtc.now().minute() < 30)
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    31de:	ce 01       	movw	r24, r28
    31e0:	43 96       	adiw	r24, 0x13	; 19
    31e2:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31e6:	9e 88       	ldd	r9, Y+22	; 0x16
    31e8:	c7 01       	movw	r24, r14
    31ea:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31ee:	8b 8c       	ldd	r8, Y+27	; 0x1b
    31f0:	c5 01       	movw	r24, r10
    31f2:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31f6:	68 a0       	ldd	r6, Y+32	; 0x20
    31f8:	c6 01       	movw	r24, r12
    31fa:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    31fe:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3200:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    3202:	6a 82       	std	Y+2, r6	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    3204:	8b 82       	std	Y+3, r8	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    3206:	9c 82       	std	Y+4, r9	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    3208:	8b e3       	ldi	r24, 0x3B	; 59
    320a:	62 ce       	rjmp	.-828    	; 0x2ed0 <main+0xb74>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:229
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    320c:	61 e0       	ldi	r22, 0x01	; 1
    320e:	8c e0       	ldi	r24, 0x0C	; 12
    3210:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:230
                    timrAmp = millis();
    3214:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3218:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <timrAmp>
    321c:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <timrAmp+0x1>
    3220:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <timrAmp+0x2>
    3224:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:231
                    appMode = APP_CHANT_MODE;
    3228:	83 e0       	ldi	r24, 0x03	; 3
    322a:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
    322e:	b4 ce       	rjmp	.-664    	; 0x2f98 <main+0xc3c>
main():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:563
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    3230:	6c e0       	ldi	r22, 0x0C	; 12
    3232:	de ce       	rjmp	.-580    	; 0x2ff0 <main+0xc94>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:389
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    3234:	86 e7       	ldi	r24, 0x76	; 118
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	11 cf       	rjmp	.-478    	; 0x305c <main+0xd00>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    323a:	88 e0       	ldi	r24, 0x08	; 8
    323c:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	81 e7       	ldi	r24, 0x71	; 113
    3244:	94 e0       	ldi	r25, 0x04	; 4
    3246:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:249
        }
        break;
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:250
        lcd.print("CHANT PLAYING...");
    3252:	88 e0       	ldi	r24, 0x08	; 8
    3254:	92 e0       	ldi	r25, 0x02	; 2
    3256:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:251
        if (millis() >= timrAmp + ampDelay)
    325a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    325e:	ab 01       	movw	r20, r22
    3260:	bc 01       	movw	r22, r24
    3262:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timrAmp>
    3266:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timrAmp+0x1>
    326a:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <timrAmp+0x2>
    326e:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <timrAmp+0x3>
    3272:	88 57       	subi	r24, 0x78	; 120
    3274:	9c 4e       	sbci	r25, 0xEC	; 236
    3276:	af 4f       	sbci	r26, 0xFF	; 255
    3278:	bf 4f       	sbci	r27, 0xFF	; 255
    327a:	48 17       	cp	r20, r24
    327c:	59 07       	cpc	r21, r25
    327e:	6a 07       	cpc	r22, r26
    3280:	7b 07       	cpc	r23, r27
    3282:	10 f0       	brcs	.+4      	; 0x3288 <main+0xf2c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:252
            PlayChant();
    3284:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:253
        if (btn == BUTTON_LEFT_SHORT_RELEASE && testMode)
    3288:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    328c:	84 34       	cpi	r24, 0x44	; 68
    328e:	09 f0       	breq	.+2      	; 0x3292 <main+0xf36>
    3290:	a8 cc       	rjmp	.-1712   	; 0x2be2 <main+0x886>
    3292:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <testMode>
    3296:	88 23       	and	r24, r24
    3298:	09 f4       	brne	.+2      	; 0x329c <main+0xf40>
    329a:	a3 cc       	rjmp	.-1722   	; 0x2be2 <main+0x886>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	86 e1       	ldi	r24, 0x16	; 22
    32a2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
    32a6:	9d cc       	rjmp	.-1734   	; 0x2be2 <main+0x886>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    32a8:	9e 8e       	std	Y+30, r9	; 0x1e
    32aa:	8d 8e       	std	Y+29, r8	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    32ac:	b8 01       	movw	r22, r16
    32ae:	89 8d       	ldd	r24, Y+25	; 0x19
    32b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32b2:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
    32b6:	42 cd       	rjmp	.-1404   	; 0x2d3c <main+0x9e0>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:285
            lcd.print("VOLUME : ");
            lcd.print(config.vol);
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    32b8:	83 30       	cpi	r24, 0x03	; 3
    32ba:	09 f0       	breq	.+2      	; 0x32be <main+0xf62>
    32bc:	92 cc       	rjmp	.-1756   	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:287
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    32be:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    32c2:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	8a 30       	cpi	r24, 0x0A	; 10
    32ca:	91 05       	cpc	r25, r1
    32cc:	0c f0       	brlt	.+2      	; 0x32d0 <main+0xf74>
    32ce:	96 cd       	rjmp	.-1236   	; 0x2dfc <main+0xaa0>
main():
    32d0:	8e e1       	ldi	r24, 0x1E	; 30
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	93 cd       	rjmp	.-1242   	; 0x2dfc <main+0xaa0>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:300
        }
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > menuTimeOut)
    32d6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    32da:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <timrMNU>
    32de:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <timrMNU+0x1>
    32e2:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <timrMNU+0x2>
    32e6:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <timrMNU+0x3>
    32ea:	62 1b       	sub	r22, r18
    32ec:	73 0b       	sbc	r23, r19
    32ee:	84 0b       	sbc	r24, r20
    32f0:	95 0b       	sbc	r25, r21
    32f2:	61 33       	cpi	r22, 0x31	; 49
    32f4:	75 47       	sbci	r23, 0x75	; 117
    32f6:	81 05       	cpc	r24, r1
    32f8:	91 05       	cpc	r25, r1
    32fa:	a0 f0       	brcs	.+40     	; 0x3324 <main+0xfc8>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    32fc:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1>
    3300:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <Menu1+0x1>
    3304:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Menu1+0x4>
    3308:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    330c:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1+0x2>
    3310:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3314:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    3318:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:303
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    331c:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:304
            lcd.clear();
    3320:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:307
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    3324:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:308
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3328:	81 30       	cpi	r24, 0x01	; 1
    332a:	09 f0       	breq	.+2      	; 0x332e <main+0xfd2>
    332c:	88 c0       	rjmp	.+272    	; 0x343e <main+0x10e2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:311
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    332e:	c8 01       	movw	r24, r16
    3330:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <StDate+0x1>
    333c:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:312
            StMonth = rtc.now().month();
    3340:	c8 01       	movw	r24, r16
    3342:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <StMonth+0x1>
    334e:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:313
            StYear = rtc.now().year();
    3352:	c8 01       	movw	r24, r16
    3354:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	80 53       	subi	r24, 0x30	; 48
    335e:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:313
    3360:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <StYear+0x1>
    3364:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <StYear>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:314
            StHr = rtc.now().hour();
    3368:	c8 01       	movw	r24, r16
    336a:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    336e:	8c 81       	ldd	r24, Y+4	; 0x04
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <StHr+0x1>
    3376:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <StHr>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:315
            StMin = rtc.now().minute();
    337a:	c8 01       	movw	r24, r16
    337c:	0e 94 23 08 	call	0x1046	; 0x1046 <RTC_DS1307::now()>
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <StMin+0x1>
    3388:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <StMin>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:317
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    338c:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
    3390:	83 30       	cpi	r24, 0x03	; 3
    3392:	09 f0       	breq	.+2      	; 0x3396 <main+0x103a>
    3394:	5f c0       	rjmp	.+190    	; 0x3454 <main+0x10f8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:319
        {
            blinkMode = setHr;
    3396:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <blinkMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:326
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    339a:	90 90 20 03 	lds	r9, 0x0320	; 0x800320 <btn>
    339e:	24 e8       	ldi	r18, 0x84	; 132
    33a0:	92 12       	cpse	r9, r18
    33a2:	14 c0       	rjmp	.+40     	; 0x33cc <main+0x1070>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    33a4:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1>
    33a8:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <Menu1+0x1>
    33ac:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Menu1+0x4>
    33b0:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    33b4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1+0x2>
    33b8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    33bc:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    33c0:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:329
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    33c4:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:330
            lcd.clear();
    33c8:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:819
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    33cc:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:821

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    33d0:	89 2d       	mov	r24, r9
    33d2:	8f 77       	andi	r24, 0x7F	; 127
    33d4:	82 30       	cpi	r24, 0x02	; 2
    33d6:	09 f4       	brne	.+2      	; 0x33da <main+0x107e>
    33d8:	45 c0       	rjmp	.+138    	; 0x3464 <main+0x1108>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:823
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    33da:	83 30       	cpi	r24, 0x03	; 3
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <main+0x1084>
    33de:	45 c0       	rjmp	.+138    	; 0x346a <main+0x110e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:825
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    33e0:	31 e0       	ldi	r19, 0x01	; 1
    33e2:	93 16       	cp	r9, r19
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <main+0x108c>
    33e6:	44 c0       	rjmp	.+136    	; 0x3470 <main+0x1114>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:827
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    33e8:	64 e4       	ldi	r22, 0x44	; 68
    33ea:	96 16       	cp	r9, r22
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <main+0x1094>
    33ee:	43 c0       	rjmp	.+134    	; 0x3476 <main+0x111a>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:818
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    33f0:	91 2c       	mov	r9, r1
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    33f2:	8d ef       	ldi	r24, 0xFD	; 253
    33f4:	89 0d       	add	r24, r9
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	08 f0       	brcs	.+2      	; 0x33fc <main+0x10a0>
    33fa:	bf c0       	rjmp	.+382    	; 0x357a <main+0x121e>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    33fc:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
    3400:	88 23       	and	r24, r24
    3402:	e1 f1       	breq	.+120    	; 0x347c <main+0x1120>
    3404:	84 e0       	ldi	r24, 0x04	; 4
    3406:	98 16       	cp	r9, r24
    3408:	c9 f1       	breq	.+114    	; 0x347c <main+0x1120>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    340a:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.93]>
    340e:	81 11       	cpse	r24, r1
    3410:	71 c0       	rjmp	.+226    	; 0x34f4 <main+0x1198>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:341
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:342
            if (Menu1.getCurrentItemCmdId())
    3418:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
    341c:	88 23       	and	r24, r24
    341e:	09 f4       	brne	.+2      	; 0x3422 <main+0x10c6>
    3420:	e0 cb       	rjmp	.-2112   	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:344
            {
                lcd.setCursor(0, 1);
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:345
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    342a:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:366
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    342c:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <strbuf>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:367
            strbuf[1] = 0;
    3430:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:368
            lcd.print(strbuf);
    3434:	8a ee       	ldi	r24, 0xEA	; 234
    3436:	93 e0       	ldi	r25, 0x03	; 3
    3438:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
    343c:	d2 cb       	rjmp	.-2140   	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:308
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    343e:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:307
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    3442:	82 30       	cpi	r24, 0x02	; 2
    3444:	09 f4       	brne	.+2      	; 0x3448 <main+0x10ec>
    3446:	73 cf       	rjmp	.-282    	; 0x332e <main+0xfd2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:309
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    3448:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:308
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    344c:	83 30       	cpi	r24, 0x03	; 3
    344e:	09 f0       	breq	.+2      	; 0x3452 <main+0x10f6>
    3450:	9d cf       	rjmp	.-198    	; 0x338c <main+0x1030>
    3452:	6d cf       	rjmp	.-294    	; 0x332e <main+0xfd2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:321
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    3454:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	09 f0       	breq	.+2      	; 0x345e <main+0x1102>
    345c:	9e cf       	rjmp	.-196    	; 0x339a <main+0x103e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:323
        {
            blinkMode = setDate;
    345e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blinkMode>
    3462:	9b cf       	rjmp	.-202    	; 0x339a <main+0x103e>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:822
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    3464:	99 24       	eor	r9, r9
    3466:	93 94       	inc	r9
    3468:	c4 cf       	rjmp	.-120    	; 0x33f2 <main+0x1096>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:824
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    346a:	52 e0       	ldi	r21, 0x02	; 2
    346c:	95 2e       	mov	r9, r21
    346e:	c1 cf       	rjmp	.-126    	; 0x33f2 <main+0x1096>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:826
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    3470:	43 e0       	ldi	r20, 0x03	; 3
    3472:	94 2e       	mov	r9, r20
    3474:	be cf       	rjmp	.-132    	; 0x33f2 <main+0x1096>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:828
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    3476:	34 e0       	ldi	r19, 0x04	; 4
    3478:	93 2e       	mov	r9, r19
    347a:	bb cf       	rjmp	.-138    	; 0x33f2 <main+0x1096>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    347c:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    3480:	81 11       	cpse	r24, r1
    3482:	13 c0       	rjmp	.+38     	; 0x34aa <main+0x114e>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3484:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1>
    3488:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <Menu1+0x1>
    348c:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Menu1+0x4>
    3490:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3494:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1+0x2>
    3498:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    349c:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:336
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            lcd.clear();
    34a0:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:337
            appMode = APP_NORMAL_MODE;
    34a4:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
    34a8:	9c cb       	rjmp	.-2248   	; 0x2be2 <main+0x886>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    34aa:	81 50       	subi	r24, 0x01	; 1
    34ac:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    34b0:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    34b2:	dc 01       	movw	r26, r24
    34b4:	aa 0f       	add	r26, r26
    34b6:	bb 1f       	adc	r27, r27
    34b8:	aa 0f       	add	r26, r26
    34ba:	bb 1f       	adc	r27, r27
    34bc:	a5 50       	subi	r26, 0x05	; 5
    34be:	bc 4f       	sbci	r27, 0xFC	; 252
    34c0:	19 96       	adiw	r26, 0x09	; 9
    34c2:	2d 91       	ld	r18, X+
    34c4:	3c 91       	ld	r19, X
    34c6:	1a 97       	sbiw	r26, 0x0a	; 10
    34c8:	30 93 ff 03 	sts	0x03FF, r19	; 0x8003ff <Menu1+0x4>
    34cc:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	fc 01       	movw	r30, r24
    34da:	ed 5f       	subi	r30, 0xFD	; 253
    34dc:	fb 4f       	sbci	r31, 0xFB	; 251
    34de:	80 81       	ld	r24, Z
    34e0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    34e4:	17 96       	adiw	r26, 0x07	; 7
    34e6:	8c 91       	ld	r24, X
    34e8:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    34ec:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    34ee:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <refreshMenuDisplay(unsigned char)>
    34f2:	77 cb       	rjmp	.-2322   	; 0x2be2 <main+0x886>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    34f4:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.93]>
    34f8:	88 23       	and	r24, r24
    34fa:	09 f4       	brne	.+2      	; 0x34fe <main+0x11a2>
    34fc:	3c c0       	rjmp	.+120    	; 0x3576 <main+0x121a>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    34fe:	30 91 01 04 	lds	r19, 0x0401	; 0x800401 <Menu1+0x6>
    3502:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <Menu1+0x3>
    3506:	70 91 ff 03 	lds	r23, 0x03FF	; 0x8003ff <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    350a:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <Menu1+0x1b>
    350e:	25 30       	cpi	r18, 0x05	; 5
    3510:	e8 f4       	brcc	.+58     	; 0x354c <main+0x11f0>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3512:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    3516:	82 2f       	mov	r24, r18
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	dc 01       	movw	r26, r24
    351c:	aa 0f       	add	r26, r26
    351e:	bb 1f       	adc	r27, r27
    3520:	aa 0f       	add	r26, r26
    3522:	bb 1f       	adc	r27, r27
    3524:	a5 50       	subi	r26, 0x05	; 5
    3526:	bc 4f       	sbci	r27, 0xFC	; 252
    3528:	17 96       	adiw	r26, 0x07	; 7
    352a:	3c 93       	st	X, r19
    352c:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	8d 5f       	subi	r24, 0xFD	; 253
    3538:	9b 4f       	sbci	r25, 0xFB	; 251
    353a:	fc 01       	movw	r30, r24
    353c:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    353e:	1a 96       	adiw	r26, 0x0a	; 10
    3540:	7c 93       	st	X, r23
    3542:	6e 93       	st	-X, r22
    3544:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:215
    menuStackCount++;
    3546:	2f 5f       	subi	r18, 0xFF	; 255
    3548:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    354c:	cb 01       	movw	r24, r22
    354e:	f6 e0       	ldi	r31, 0x06	; 6
    3550:	3f 9f       	mul	r19, r31
    3552:	80 0d       	add	r24, r0
    3554:	91 1d       	adc	r25, r1
    3556:	11 24       	eor	r1, r1
    3558:	fc 01       	movw	r30, r24
    355a:	35 96       	adiw	r30, 0x05	; 5
    355c:	e4 91       	lpm	r30, Z
    355e:	e0 93 00 04 	sts	0x0400, r30	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    3562:	fc 01       	movw	r30, r24
    3564:	33 96       	adiw	r30, 0x03	; 3
    3566:	85 91       	lpm	r24, Z+
    3568:	94 91       	lpm	r25, Z
    356a:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Menu1+0x4>
    356e:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    3572:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	ba cf       	rjmp	.-140    	; 0x34ee <main+0x1192>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    357a:	21 e0       	ldi	r18, 0x01	; 1
    357c:	92 12       	cpse	r9, r18
    357e:	0a c0       	rjmp	.+20     	; 0x3594 <main+0x1238>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    3580:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <Menu1+0x6>
    3584:	88 23       	and	r24, r24
    3586:	09 f4       	brne	.+2      	; 0x358a <main+0x122e>
    3588:	2c cb       	rjmp	.-2472   	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    358a:	81 50       	subi	r24, 0x01	; 1
    358c:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	ad cf       	rjmp	.-166    	; 0x34ee <main+0x1192>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    3594:	32 e0       	ldi	r19, 0x02	; 2
    3596:	93 12       	cpse	r9, r19
    3598:	24 cb       	rjmp	.-2488   	; 0x2be2 <main+0x886>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    359a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <Menu1+0x6>
    359e:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <Menu1+0x5>
    35a2:	21 50       	subi	r18, 0x01	; 1
    35a4:	33 0b       	sbc	r19, r19
    35a6:	82 17       	cp	r24, r18
    35a8:	13 06       	cpc	r1, r19
    35aa:	0c f0       	brlt	.+2      	; 0x35ae <main+0x1252>
    35ac:	1a cb       	rjmp	.-2508   	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    35ae:	8f 5f       	subi	r24, 0xFF	; 255
    35b0:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	9b cf       	rjmp	.-202    	; 0x34ee <main+0x1192>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:354
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    35b8:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.90]>
    35bc:	68 2e       	mov	r6, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:410

    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }
    switch (cmdId)
    35be:	ee ef       	ldi	r30, 0xFE	; 254
    35c0:	e8 0f       	add	r30, r24
    35c2:	e4 31       	cpi	r30, 0x14	; 20
    35c4:	08 f0       	brcs	.+2      	; 0x35c8 <main+0x126c>
    35c6:	2e c0       	rjmp	.+92     	; 0x3624 <main+0x12c8>
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	e7 51       	subi	r30, 0x17	; 23
    35cc:	f5 4e       	sbci	r31, 0xE5	; 229
    35ce:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__tablejump2__>
    35d2:	fd 1a       	sub	r15, r29
    35d4:	95 1b       	sub	r25, r21
    35d6:	12 1b       	sub	r17, r18
    35d8:	ea 1b       	sub	r30, r26
    35da:	5b 1c       	adc	r5, r11
    35dc:	7b 1c       	adc	r7, r11
    35de:	96 1c       	adc	r9, r6
    35e0:	12 1b       	sub	r17, r18
    35e2:	c6 1c       	adc	r12, r6
    35e4:	ea 1c       	adc	r14, r10
    35e6:	12 1b       	sub	r17, r18
    35e8:	00 1d       	adc	r16, r0
    35ea:	21 1d       	adc	r18, r1
    35ec:	45 1d       	adc	r20, r5
    35ee:	66 1d       	adc	r22, r6
    35f0:	8a 1d       	adc	r24, r10
    35f2:	12 1b       	sub	r17, r18
    35f4:	d4 1d       	adc	r29, r4
    35f6:	b4 1d       	adc	r27, r4
    35f8:	9a 1d       	adc	r25, r10
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:414
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    35fa:	62 e0       	ldi	r22, 0x02	; 2
    35fc:	96 12       	cpse	r9, r22
    35fe:	37 c0       	rjmp	.+110    	; 0x366e <main+0x1312>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:416
        {
            if (blinkMode == setDate)
    3600:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    3604:	82 30       	cpi	r24, 0x02	; 2
    3606:	81 f4       	brne	.+32     	; 0x3628 <main+0x12cc>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:417
                StDate = ++StDate > 31 ? 1 : StDate;
    3608:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <StDate>
    360c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <StDate+0x1>
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	80 32       	cpi	r24, 0x20	; 32
    3614:	91 05       	cpc	r25, r1
    3616:	14 f0       	brlt	.+4      	; 0x361c <main+0x12c0>
main():
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:426
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
    361c:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <StDate+0x1>
    3620:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:588
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3624:	81 2c       	mov	r8, r1
    3626:	ea c0       	rjmp	.+468    	; 0x37fc <main+0x14a0>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:418
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    3628:	83 30       	cpi	r24, 0x03	; 3
    362a:	79 f4       	brne	.+30     	; 0x364a <main+0x12ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:419
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    362c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <StMonth>
    3630:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <StMonth+0x1>
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	8d 30       	cpi	r24, 0x0D	; 13
    3638:	91 05       	cpc	r25, r1
    363a:	14 f0       	brlt	.+4      	; 0x3640 <main+0x12e4>
main():
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:428
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
    3640:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <StMonth+0x1>
    3644:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <StMonth>
    3648:	ed cf       	rjmp	.-38     	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:420
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    364a:	84 30       	cpi	r24, 0x04	; 4
    364c:	59 f7       	brne	.-42     	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:421
                StYear = ++StYear > 2050 ? 2020 : StYear;
    364e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <StYear>
    3652:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <StYear+0x1>
    3656:	01 96       	adiw	r24, 0x01	; 1
    3658:	83 30       	cpi	r24, 0x03	; 3
    365a:	e8 e0       	ldi	r30, 0x08	; 8
    365c:	9e 07       	cpc	r25, r30
    365e:	14 f0       	brlt	.+4      	; 0x3664 <main+0x1308>
main():
    3660:	84 ee       	ldi	r24, 0xE4	; 228
    3662:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:430
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2020 ? 2050 : StYear;
    3664:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <StYear+0x1>
    3668:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <StYear>
    366c:	db cf       	rjmp	.-74     	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:423
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    366e:	f3 e0       	ldi	r31, 0x03	; 3
    3670:	9f 12       	cpse	r9, r31
    3672:	2b c0       	rjmp	.+86     	; 0x36ca <main+0x136e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:425
        {
            if (blinkMode == setDate)
    3674:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    3678:	82 30       	cpi	r24, 0x02	; 2
    367a:	59 f4       	brne	.+22     	; 0x3692 <main+0x1336>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:426
                StDate = --StDate < 1 ? 31 : StDate;
    367c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <StDate>
    3680:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <StDate+0x1>
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	18 16       	cp	r1, r24
    3688:	19 06       	cpc	r1, r25
    368a:	44 f2       	brlt	.-112    	; 0x361c <main+0x12c0>
main():
    368c:	8f e1       	ldi	r24, 0x1F	; 31
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	c5 cf       	rjmp	.-118    	; 0x361c <main+0x12c0>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:427
            else if (blinkMode == setMonth)
    3692:	83 30       	cpi	r24, 0x03	; 3
    3694:	59 f4       	brne	.+22     	; 0x36ac <main+0x1350>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:428
                StMonth = --StMonth < 1 ? 12 : StMonth;
    3696:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <StMonth>
    369a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <StMonth+0x1>
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	18 16       	cp	r1, r24
    36a2:	19 06       	cpc	r1, r25
    36a4:	6c f2       	brlt	.-102    	; 0x3640 <main+0x12e4>
main():
    36a6:	8c e0       	ldi	r24, 0x0C	; 12
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	ca cf       	rjmp	.-108    	; 0x3640 <main+0x12e4>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:429
            else if (blinkMode == setYear)
    36ac:	84 30       	cpi	r24, 0x04	; 4
    36ae:	09 f0       	breq	.+2      	; 0x36b2 <main+0x1356>
    36b0:	b9 cf       	rjmp	.-142    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:430
                StYear = --StYear < 2020 ? 2050 : StYear;
    36b2:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <StYear>
    36b6:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <StYear+0x1>
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	84 3e       	cpi	r24, 0xE4	; 228
    36be:	27 e0       	ldi	r18, 0x07	; 7
    36c0:	92 07       	cpc	r25, r18
    36c2:	84 f6       	brge	.-96     	; 0x3664 <main+0x1308>
main():
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	98 e0       	ldi	r25, 0x08	; 8
    36c8:	cd cf       	rjmp	.-102    	; 0x3664 <main+0x1308>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:432
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    36ca:	31 e0       	ldi	r19, 0x01	; 1
    36cc:	93 12       	cpse	r9, r19
    36ce:	aa cf       	rjmp	.-172    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:434
        {
            if (blinkMode == setDate)
    36d0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    36d4:	82 30       	cpi	r24, 0x02	; 2
    36d6:	21 f4       	brne	.+8      	; 0x36e0 <main+0x1384>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:436
            {
                blinkMode = setMonth;
    36d8:	83 e0       	ldi	r24, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:440
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
    36da:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blinkMode>
    36de:	a2 cf       	rjmp	.-188    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:438
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    36e0:	83 30       	cpi	r24, 0x03	; 3
    36e2:	11 f4       	brne	.+4      	; 0x36e8 <main+0x138c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:440
            {
                blinkMode = setYear;
    36e4:	84 e0       	ldi	r24, 0x04	; 4
    36e6:	f9 cf       	rjmp	.-14     	; 0x36da <main+0x137e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:442
            }
            else if (blinkMode == setYear)
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	09 f0       	breq	.+2      	; 0x36ee <main+0x1392>
    36ec:	9b cf       	rjmp	.-202    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:475
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    36ee:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <StMin>
    36f2:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <StHr>
    36f6:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <StDate>
    36fa:	50 91 27 03 	lds	r21, 0x0327	; 0x800327 <StMonth>
    36fe:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <StYear>
    3702:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:228
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3706:	80 3d       	cpi	r24, 0xD0	; 208
    3708:	67 e0       	ldi	r22, 0x07	; 7
    370a:	96 07       	cpc	r25, r22
    370c:	10 f0       	brcs	.+4      	; 0x3712 <main+0x13b6>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:229
    year -= 2000U;
    370e:	80 5d       	subi	r24, 0xD0	; 208
    3710:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
  yOff = year;
    3712:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    3714:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    3716:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    3718:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    371a:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    371c:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:475
    371e:	c8 01       	movw	r24, r16
    3720:	0e 94 50 07 	call	0xea0	; 0xea0 <RTC_DS1307::adjust(DateTime const&)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:477
                complete = true;
                blink = true;
    3724:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    3728:	15 c0       	rjmp	.+42     	; 0x3754 <main+0x13f8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:453
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    372a:	82 e0       	ldi	r24, 0x02	; 2
    372c:	98 12       	cpse	r9, r24
    372e:	26 c0       	rjmp	.+76     	; 0x377c <main+0x1420>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:455
        {
            if (blinkMode == setHr)
    3730:	90 90 0a 03 	lds	r9, 0x030A	; 0x80030a <blinkMode>
    3734:	91 10       	cpse	r9, r1
    3736:	10 c0       	rjmp	.+32     	; 0x3758 <main+0x13fc>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:456
                StHr = ++StHr > 23 ? 0 : StHr;
    3738:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <StHr>
    373c:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <StHr+0x1>
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	88 31       	cpi	r24, 0x18	; 24
    3744:	91 05       	cpc	r25, r1
    3746:	14 f0       	brlt	.+4      	; 0x374c <main+0x13f0>
main():
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:463
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
    374c:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <StHr+0x1>
    3750:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:404
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3754:	81 2c       	mov	r8, r1
    3756:	69 c0       	rjmp	.+210    	; 0x382a <main+0x14ce>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:457
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	99 12       	cpse	r9, r25
    375c:	63 cf       	rjmp	.-314    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:458
                StMin = ++StMin > 59 ? 0 : StMin;
    375e:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <StMin>
    3762:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <StMin+0x1>
    3766:	01 96       	adiw	r24, 0x01	; 1
    3768:	8c 33       	cpi	r24, 0x3C	; 60
    376a:	91 05       	cpc	r25, r1
    376c:	14 f0       	brlt	.+4      	; 0x3772 <main+0x1416>
main():
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:465
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
    3772:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <StMin+0x1>
    3776:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <StMin>
    377a:	54 cf       	rjmp	.-344    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:460
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    377c:	e3 e0       	ldi	r30, 0x03	; 3
    377e:	9e 12       	cpse	r9, r30
    3780:	1b c0       	rjmp	.+54     	; 0x37b8 <main+0x145c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:462
        {
            if (blinkMode == setHr)
    3782:	90 90 0a 03 	lds	r9, 0x030A	; 0x80030a <blinkMode>
    3786:	91 10       	cpse	r9, r1
    3788:	0a c0       	rjmp	.+20     	; 0x379e <main+0x1442>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:463
                StHr = --StHr < 0 ? 23 : StHr;
    378a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <StHr>
    378e:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <StHr+0x1>
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	97 ff       	sbrs	r25, 7
    3796:	da cf       	rjmp	.-76     	; 0x374c <main+0x13f0>
main():
    3798:	87 e1       	ldi	r24, 0x17	; 23
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	d7 cf       	rjmp	.-82     	; 0x374c <main+0x13f0>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:464
            else if (blinkMode == setMin)
    379e:	f1 e0       	ldi	r31, 0x01	; 1
    37a0:	9f 12       	cpse	r9, r31
    37a2:	40 cf       	rjmp	.-384    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:465
                StMin = --StMin < 0 ? 59 : StMin;
    37a4:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <StMin>
    37a8:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <StMin+0x1>
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	97 ff       	sbrs	r25, 7
    37b0:	e0 cf       	rjmp	.-64     	; 0x3772 <main+0x1416>
main():
    37b2:	8b e3       	ldi	r24, 0x3B	; 59
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	dd cf       	rjmp	.-70     	; 0x3772 <main+0x1416>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:467
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    37b8:	21 e0       	ldi	r18, 0x01	; 1
    37ba:	92 12       	cpse	r9, r18
    37bc:	33 cf       	rjmp	.-410    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:469
        {
            if (blinkMode == setHr)
    37be:	90 90 0a 03 	lds	r9, 0x030A	; 0x80030a <blinkMode>
    37c2:	91 10       	cpse	r9, r1
    37c4:	03 c0       	rjmp	.+6      	; 0x37cc <main+0x1470>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:471
            {
                blinkMode = setMin;
    37c6:	70 92 0a 03 	sts	0x030A, r7	; 0x80030a <blinkMode>
    37ca:	c4 cf       	rjmp	.-120    	; 0x3754 <main+0x13f8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:473
            }
            else if (blinkMode == setMin)
    37cc:	31 e0       	ldi	r19, 0x01	; 1
    37ce:	93 12       	cpse	r9, r19
    37d0:	29 cf       	rjmp	.-430    	; 0x3624 <main+0x12c8>
    37d2:	8d cf       	rjmp	.-230    	; 0x36ee <main+0x1392>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:485
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    37d4:	89 2d       	mov	r24, r9
    37d6:	8f 77       	andi	r24, 0x7F	; 127
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	91 f4       	brne	.+36     	; 0x3800 <main+0x14a4>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:487
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    37dc:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0xf>
    37e0:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x10>
    37e4:	01 96       	adiw	r24, 0x01	; 1
    37e6:	88 31       	cpi	r24, 0x18	; 24
    37e8:	91 05       	cpc	r25, r1
    37ea:	14 f0       	brlt	.+4      	; 0x37f0 <main+0x1494>
main():
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:491
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    37f0:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x10>
    37f4:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:528
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    37f8:	88 24       	eor	r8, r8
    37fa:	83 94       	inc	r8
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:403
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    37fc:	91 2c       	mov	r9, r1
    37fe:	15 c0       	rjmp	.+42     	; 0x382a <main+0x14ce>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:489
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3800:	83 30       	cpi	r24, 0x03	; 3
    3802:	51 f4       	brne	.+20     	; 0x3818 <main+0x14bc>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:491
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    3804:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0xf>
    3808:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x10>
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	97 ff       	sbrs	r25, 7
    3810:	ef cf       	rjmp	.-34     	; 0x37f0 <main+0x1494>
main():
    3812:	87 e1       	ldi	r24, 0x17	; 23
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	ec cf       	rjmp	.-40     	; 0x37f0 <main+0x1494>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:493
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	98 12       	cpse	r9, r24
    381c:	03 cf       	rjmp	.-506    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:495
        {
            config.save();
    381e:	0e 94 15 0a 	call	0x142a	; 0x142a <Config::save() [clone .constprop.27]>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:484
        }
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
    3822:	88 24       	eor	r8, r8
    3824:	83 94       	inc	r8
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:496
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    3826:	99 24       	eor	r9, r9
    3828:	93 94       	inc	r9
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:765
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    382a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    382e:	84 34       	cpi	r24, 0x44	; 68
    3830:	19 f0       	breq	.+6      	; 0x3838 <main+0x14dc>
    3832:	99 20       	and	r9, r9
    3834:	09 f4       	brne	.+2      	; 0x3838 <main+0x14dc>
    3836:	14 c2       	rjmp	.+1064   	; 0x3c60 <main+0x1904>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:768
    {
        complete = true;
        lcd.setCursor(1, 1);
    3838:	61 e0       	ldi	r22, 0x01	; 1
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:769
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3840:	86 2d       	mov	r24, r6
    3842:	0e 94 02 0b 	call	0x1604	; 0x1604 <Config::getFormattedStr(unsigned char) [clone .constprop.69]>
    3846:	0e 94 a5 09 	call	0x134a	; 0x134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    384a:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:767
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    384e:	88 24       	eor	r8, r8
    3850:	83 94       	inc	r8
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:355
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > menuTimeOut)
    3852:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3856:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <timrMNU>
    385a:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <timrMNU+0x1>
    385e:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <timrMNU+0x2>
    3862:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <timrMNU+0x3>
    3866:	62 1b       	sub	r22, r18
    3868:	73 0b       	sbc	r23, r19
    386a:	84 0b       	sbc	r24, r20
    386c:	95 0b       	sbc	r25, r21
    386e:	61 33       	cpi	r22, 0x31	; 49
    3870:	75 47       	sbci	r23, 0x75	; 117
    3872:	81 05       	cpc	r24, r1
    3874:	91 05       	cpc	r25, r1
    3876:	a0 f0       	brcs	.+40     	; 0x38a0 <main+0x1544>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3878:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1>
    387c:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <Menu1+0x1>
    3880:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Menu1+0x4>
    3884:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3888:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1+0x2>
    388c:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3890:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    3894:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:358
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3898:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:359
            lcd.clear();
    389c:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:361
        }
        if (processingComplete)
    38a0:	88 20       	and	r8, r8
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <main+0x154a>
    38a4:	9e c9       	rjmp	.-3268   	; 0x2be2 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:363
        {
            appMode = APP_MENU_MODE;
    38a6:	70 92 15 03 	sts	0x0315, r7	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:365
            // clear forward arrow
            lcd.setCursor(0, 1);
    38aa:	61 e0       	ldi	r22, 0x01	; 1
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:366
            strbuf[0] = ' '; // clear forward arrow
    38b2:	80 e2       	ldi	r24, 0x20	; 32
    38b4:	bb cd       	rjmp	.-1162   	; 0x342c <main+0x10d0>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:507
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    38b6:	89 2d       	mov	r24, r9
    38b8:	8f 77       	andi	r24, 0x7F	; 127
    38ba:	82 30       	cpi	r24, 0x02	; 2
    38bc:	79 f4       	brne	.+30     	; 0x38dc <main+0x1580>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:509
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    38be:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x11>
    38c2:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <config+0x12>
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	88 31       	cpi	r24, 0x18	; 24
    38ca:	91 05       	cpc	r25, r1
    38cc:	14 f0       	brlt	.+4      	; 0x38d2 <main+0x1576>
main():
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:513
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    38d2:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <config+0x12>
    38d6:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x11>
    38da:	8e cf       	rjmp	.-228    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:511
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    38dc:	83 30       	cpi	r24, 0x03	; 3
    38de:	09 f0       	breq	.+2      	; 0x38e2 <main+0x1586>
    38e0:	15 c1       	rjmp	.+554    	; 0x3b0c <main+0x17b0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:513
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    38e2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x11>
    38e6:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <config+0x12>
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	97 ff       	sbrs	r25, 7
    38ee:	f1 cf       	rjmp	.-30     	; 0x38d2 <main+0x1576>
main():
    38f0:	87 e1       	ldi	r24, 0x17	; 23
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	ee cf       	rjmp	.-36     	; 0x38d2 <main+0x1576>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:529
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    38f6:	89 2d       	mov	r24, r9
    38f8:	8f 77       	andi	r24, 0x7F	; 127
    38fa:	82 30       	cpi	r24, 0x02	; 2
    38fc:	51 f4       	brne	.+20     	; 0x3912 <main+0x15b6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:531
        {
            config.Song1_Count = ++config.Song1_Count;
    38fe:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <config+0x18>
    3902:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <config+0x19>
    3906:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:535
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    3908:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x19>
    390c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x18>
    3910:	73 cf       	rjmp	.-282    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:533
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3912:	83 30       	cpi	r24, 0x03	; 3
    3914:	09 f0       	breq	.+2      	; 0x3918 <main+0x15bc>
    3916:	0a c1       	rjmp	.+532    	; 0x3b2c <main+0x17d0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:535
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    3918:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <config+0x18>
    391c:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <config+0x19>
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	97 ff       	sbrs	r25, 7
    3924:	f1 cf       	rjmp	.-30     	; 0x3908 <main+0x15ac>
main():
    3926:	84 e6       	ldi	r24, 0x64	; 100
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	ee cf       	rjmp	.-36     	; 0x3908 <main+0x15ac>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:551
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    392c:	89 2d       	mov	r24, r9
    392e:	8f 77       	andi	r24, 0x7F	; 127
    3930:	82 30       	cpi	r24, 0x02	; 2
    3932:	79 f4       	brne	.+30     	; 0x3952 <main+0x15f6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:553
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    3934:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    3938:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    393c:	01 96       	adiw	r24, 0x01	; 1
    393e:	8f 31       	cpi	r24, 0x1F	; 31
    3940:	91 05       	cpc	r25, r1
    3942:	14 f0       	brlt	.+4      	; 0x3948 <main+0x15ec>
main():
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:557
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    3948:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    394c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
    3950:	53 cf       	rjmp	.-346    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:555
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3952:	83 30       	cpi	r24, 0x03	; 3
    3954:	59 f4       	brne	.+22     	; 0x396c <main+0x1610>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:557
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    3956:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    395a:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	18 16       	cp	r1, r24
    3962:	19 06       	cpc	r1, r25
    3964:	8c f3       	brlt	.-30     	; 0x3948 <main+0x15ec>
main():
    3966:	8e e1       	ldi	r24, 0x1E	; 30
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	ee cf       	rjmp	.-36     	; 0x3948 <main+0x15ec>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:559
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    396c:	f1 e0       	ldi	r31, 0x01	; 1
    396e:	9f 12       	cpse	r9, r31
    3970:	59 ce       	rjmp	.-846    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:561
        {
            config.save();
    3972:	0e 94 15 0a 	call	0x142a	; 0x142a <Config::save() [clone .constprop.27]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3976:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    397a:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
    397e:	77 27       	eor	r23, r23
    3980:	86 e0       	ldi	r24, 0x06	; 6
    3982:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.53]>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:573
        }
        break;
    }
    case mnuCmdselectTime:
    {
        configChanged = true;
    3986:	88 24       	eor	r8, r8
    3988:	83 94       	inc	r8
    398a:	4f cf       	rjmp	.-354    	; 0x382a <main+0x14ce>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:574
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    398c:	89 2d       	mov	r24, r9
    398e:	8f 77       	andi	r24, 0x7F	; 127
    3990:	82 30       	cpi	r24, 0x02	; 2
    3992:	79 f4       	brne	.+30     	; 0x39b2 <main+0x1656>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:576
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    3994:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    3998:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	88 31       	cpi	r24, 0x18	; 24
    39a0:	91 05       	cpc	r25, r1
    39a2:	14 f0       	brlt	.+4      	; 0x39a8 <main+0x164c>
main():
    39a4:	84 e0       	ldi	r24, 0x04	; 4
    39a6:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:580
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    39a8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    39ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
    39b0:	23 cf       	rjmp	.-442    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:578
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    39b2:	83 30       	cpi	r24, 0x03	; 3
    39b4:	59 f4       	brne	.+22     	; 0x39cc <main+0x1670>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:580
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    39b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    39ba:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	84 30       	cpi	r24, 0x04	; 4
    39c2:	91 05       	cpc	r25, r1
    39c4:	8c f7       	brge	.-30     	; 0x39a8 <main+0x164c>
main():
    39c6:	87 e1       	ldi	r24, 0x17	; 23
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	ee cf       	rjmp	.-36     	; 0x39a8 <main+0x164c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:582
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    39cc:	21 e0       	ldi	r18, 0x01	; 1
    39ce:	92 12       	cpse	r9, r18
    39d0:	29 ce       	rjmp	.-942    	; 0x3624 <main+0x12c8>
    39d2:	d9 cf       	rjmp	.-78     	; 0x3986 <main+0x162a>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    39d4:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1>
    39d8:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <Menu1+0x1>
    39dc:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <Menu1+0x4>
    39e0:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    39e4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1+0x2>
    39e8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    39ec:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    39f0:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:595
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    39f4:	84 e0       	ldi	r24, 0x04	; 4
    39f6:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:596
        lcd.clear();
    39fa:	0e 94 26 07 	call	0xe4c	; 0xe4c <LiquidCrystal_I2C::clear() [clone .constprop.59]>
    39fe:	12 ce       	rjmp	.-988    	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:602
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3a00:	89 2d       	mov	r24, r9
    3a02:	8f 77       	andi	r24, 0x7F	; 127
    3a04:	82 30       	cpi	r24, 0x02	; 2
    3a06:	79 f4       	brne	.+30     	; 0x3a26 <main+0x16ca>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:604
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    3a08:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <config+0x20>
    3a0c:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <config+0x21>
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	89 30       	cpi	r24, 0x09	; 9
    3a14:	91 05       	cpc	r25, r1
    3a16:	14 f0       	brlt	.+4      	; 0x3a1c <main+0x16c0>
main():
    3a18:	83 e0       	ldi	r24, 0x03	; 3
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:608
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    3a1c:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x21>
    3a20:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x20>
    3a24:	e9 ce       	rjmp	.-558    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:606
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3a26:	83 30       	cpi	r24, 0x03	; 3
    3a28:	09 f0       	breq	.+2      	; 0x3a2c <main+0x16d0>
    3a2a:	ba c0       	rjmp	.+372    	; 0x3ba0 <main+0x1844>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:608
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    3a2c:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <config+0x20>
    3a30:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <config+0x21>
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	83 30       	cpi	r24, 0x03	; 3
    3a38:	91 05       	cpc	r25, r1
    3a3a:	84 f7       	brge	.-32     	; 0x3a1c <main+0x16c0>
main():
    3a3c:	88 e0       	ldi	r24, 0x08	; 8
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	ed cf       	rjmp	.-38     	; 0x3a1c <main+0x16c0>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:624
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3a42:	89 2d       	mov	r24, r9
    3a44:	8f 77       	andi	r24, 0x7F	; 127
    3a46:	82 30       	cpi	r24, 0x02	; 2
    3a48:	79 f4       	brne	.+30     	; 0x3a68 <main+0x170c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:626
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    3a4a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <config+0x24>
    3a4e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <config+0x25>
    3a52:	01 96       	adiw	r24, 0x01	; 1
    3a54:	89 30       	cpi	r24, 0x09	; 9
    3a56:	91 05       	cpc	r25, r1
    3a58:	14 f0       	brlt	.+4      	; 0x3a5e <main+0x1702>
main():
    3a5a:	83 e0       	ldi	r24, 0x03	; 3
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:630
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    3a5e:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x25>
    3a62:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x24>
    3a66:	c8 ce       	rjmp	.-624    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:628
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3a68:	83 30       	cpi	r24, 0x03	; 3
    3a6a:	59 f4       	brne	.+22     	; 0x3a82 <main+0x1726>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:630
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    3a6c:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <config+0x24>
    3a70:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <config+0x25>
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	83 30       	cpi	r24, 0x03	; 3
    3a78:	91 05       	cpc	r25, r1
    3a7a:	8c f7       	brge	.-30     	; 0x3a5e <main+0x1702>
main():
    3a7c:	88 e0       	ldi	r24, 0x08	; 8
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	ee cf       	rjmp	.-36     	; 0x3a5e <main+0x1702>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:632
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3a82:	61 e0       	ldi	r22, 0x01	; 1
    3a84:	96 12       	cpse	r9, r22
    3a86:	ce cd       	rjmp	.-1124   	; 0x3624 <main+0x12c8>
    3a88:	ca ce       	rjmp	.-620    	; 0x381e <main+0x14c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:646
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3a8a:	89 2d       	mov	r24, r9
    3a8c:	8f 77       	andi	r24, 0x7F	; 127
    3a8e:	82 30       	cpi	r24, 0x02	; 2
    3a90:	79 f4       	brne	.+30     	; 0x3ab0 <main+0x1754>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:648
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    3a92:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <config+0x28>
    3a96:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <config+0x29>
    3a9a:	01 96       	adiw	r24, 0x01	; 1
    3a9c:	85 31       	cpi	r24, 0x15	; 21
    3a9e:	91 05       	cpc	r25, r1
    3aa0:	14 f0       	brlt	.+4      	; 0x3aa6 <main+0x174a>
main():
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:652
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    3aa6:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x29>
    3aaa:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x28>
    3aae:	a4 ce       	rjmp	.-696    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:650
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3ab0:	83 30       	cpi	r24, 0x03	; 3
    3ab2:	09 f0       	breq	.+2      	; 0x3ab6 <main+0x175a>
    3ab4:	b1 ce       	rjmp	.-670    	; 0x3818 <main+0x14bc>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:652
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    3ab6:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <config+0x28>
    3aba:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <config+0x29>
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	18 16       	cp	r1, r24
    3ac2:	19 06       	cpc	r1, r25
    3ac4:	84 f3       	brlt	.-32     	; 0x3aa6 <main+0x174a>
main():
    3ac6:	84 e1       	ldi	r24, 0x14	; 20
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	ed cf       	rjmp	.-38     	; 0x3aa6 <main+0x174a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:668
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3acc:	89 2d       	mov	r24, r9
    3ace:	8f 77       	andi	r24, 0x7F	; 127
    3ad0:	82 30       	cpi	r24, 0x02	; 2
    3ad2:	79 f4       	brne	.+30     	; 0x3af2 <main+0x1796>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:670
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    3ad4:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <config+0x2a>
    3ad8:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <config+0x2b>
    3adc:	01 96       	adiw	r24, 0x01	; 1
    3ade:	85 31       	cpi	r24, 0x15	; 21
    3ae0:	91 05       	cpc	r25, r1
    3ae2:	14 f0       	brlt	.+4      	; 0x3ae8 <main+0x178c>
main():
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:674
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3ae8:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <config+0x2b>
    3aec:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <config+0x2a>
    3af0:	83 ce       	rjmp	.-762    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:672
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3af2:	83 30       	cpi	r24, 0x03	; 3
    3af4:	59 f4       	brne	.+22     	; 0x3b0c <main+0x17b0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:674
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3af6:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <config+0x2a>
    3afa:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <config+0x2b>
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	18 16       	cp	r1, r24
    3b02:	19 06       	cpc	r1, r25
    3b04:	8c f3       	brlt	.-30     	; 0x3ae8 <main+0x178c>
main():
    3b06:	84 e1       	ldi	r24, 0x14	; 20
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	ee cf       	rjmp	.-36     	; 0x3ae8 <main+0x178c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:676
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3b0c:	91 e0       	ldi	r25, 0x01	; 1
    3b0e:	99 12       	cpse	r9, r25
    3b10:	89 cd       	rjmp	.-1262   	; 0x3624 <main+0x12c8>
    3b12:	85 ce       	rjmp	.-758    	; 0x381e <main+0x14c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:690
        break;
    }
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    3b14:	8e ef       	ldi	r24, 0xFE	; 254
    3b16:	89 0d       	add	r24, r9
    3b18:	82 30       	cpi	r24, 0x02	; 2
    3b1a:	40 f4       	brcc	.+16     	; 0x3b2c <main+0x17d0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:692
        {
            config.SchlZone = !config.SchlZone;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <config+0x17>
    3b22:	91 11       	cpse	r25, r1
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <config+0x17>
    3b2a:	66 ce       	rjmp	.-820    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:694
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3b2c:	e1 e0       	ldi	r30, 0x01	; 1
    3b2e:	9e 12       	cpse	r9, r30
    3b30:	79 cd       	rjmp	.-1294   	; 0x3624 <main+0x12c8>
    3b32:	75 ce       	rjmp	.-790    	; 0x381e <main+0x14c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:708
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3b34:	89 2d       	mov	r24, r9
    3b36:	8f 77       	andi	r24, 0x7F	; 127
    3b38:	82 30       	cpi	r24, 0x02	; 2
    3b3a:	51 f4       	brne	.+20     	; 0x3b50 <main+0x17f4>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:710
        {
            config.SerialNo = ++config.SerialNo;
    3b3c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <config+0x1e>
    3b40:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <config+0x1f>
    3b44:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:714
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
    3b46:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x1f>
    3b4a:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x1e>
    3b4e:	54 ce       	rjmp	.-856    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:712
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b50:	83 30       	cpi	r24, 0x03	; 3
    3b52:	31 f4       	brne	.+12     	; 0x3b60 <main+0x1804>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:714
        {
            config.SerialNo = --config.SerialNo;
    3b54:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <config+0x1e>
    3b58:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <config+0x1f>
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	f3 cf       	rjmp	.-26     	; 0x3b46 <main+0x17ea>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:716
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3b60:	f1 e0       	ldi	r31, 0x01	; 1
    3b62:	9f 12       	cpse	r9, r31
    3b64:	5f cd       	rjmp	.-1346   	; 0x3624 <main+0x12c8>
    3b66:	5b ce       	rjmp	.-842    	; 0x381e <main+0x14c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:730
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3b68:	89 2d       	mov	r24, r9
    3b6a:	8f 77       	andi	r24, 0x7F	; 127
    3b6c:	82 30       	cpi	r24, 0x02	; 2
    3b6e:	51 f4       	brne	.+20     	; 0x3b84 <main+0x1828>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:732
        {
            config.DataYear = ++config.DataYear;
    3b70:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <config+0x1c>
    3b74:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <config+0x1d>
    3b78:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:736
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    3b7a:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x1d>
    3b7e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x1c>
    3b82:	3a ce       	rjmp	.-908    	; 0x37f8 <main+0x149c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:734
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b84:	83 30       	cpi	r24, 0x03	; 3
    3b86:	61 f4       	brne	.+24     	; 0x3ba0 <main+0x1844>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:736
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    3b88:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <config+0x1c>
    3b8c:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <config+0x1d>
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	86 3e       	cpi	r24, 0xE6	; 230
    3b94:	27 e0       	ldi	r18, 0x07	; 7
    3b96:	92 07       	cpc	r25, r18
    3b98:	84 f7       	brge	.-32     	; 0x3b7a <main+0x181e>
    3b9a:	86 ee       	ldi	r24, 0xE6	; 230
    3b9c:	97 e0       	ldi	r25, 0x07	; 7
    3b9e:	ed cf       	rjmp	.-38     	; 0x3b7a <main+0x181e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:738
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3ba0:	31 e0       	ldi	r19, 0x01	; 1
    3ba2:	93 12       	cpse	r9, r19
    3ba4:	3f cd       	rjmp	.-1410   	; 0x3624 <main+0x12c8>
    3ba6:	3b ce       	rjmp	.-906    	; 0x381e <main+0x14c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:751
        }
        break;
    }
    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    3ba8:	61 e8       	ldi	r22, 0x81	; 129
    3baa:	96 12       	cpse	r9, r22
    3bac:	53 c0       	rjmp	.+166    	; 0x3c54 <main+0x18f8>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    3bae:	67 e2       	ldi	r22, 0x27	; 39
    3bb0:	71 e0       	ldi	r23, 0x01	; 1
    3bb2:	8b e2       	ldi	r24, 0x2B	; 43
    3bb4:	93 e0       	ldi	r25, 0x03	; 3
    3bb6:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:12
  Song1_Count = 100;
    3bba:	84 e6       	ldi	r24, 0x64	; 100
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x19>
    3bc2:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:13
  Song2_Count = 100;
    3bc6:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x1b>
    3bca:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:14
  startTime = 5; //5AM
    3bce:	85 e0       	ldi	r24, 0x05	; 5
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x10>
    3bd6:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:15
  endTime = 22; // 10PM
    3bda:	86 e1       	ldi	r24, 0x16	; 22
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <config+0x12>
    3be2:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:16
  vol = 20;
    3be6:	84 e1       	ldi	r24, 0x14	; 20
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    3bee:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:17
  backLightDur = 20;
    3bf2:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <config+0x14>
    3bf6:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:18
  MorSong1Time = 3;
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x21>
    3c02:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x20>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:19
  EveSong1Time = 3;
    3c06:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x25>
    3c0a:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:20
  MorSongNo = 1;
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x29>
    3c16:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:21
  EveSongNo = 2;
    3c1a:	82 e0       	ldi	r24, 0x02	; 2
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <config+0x2b>
    3c22:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:22
  SchlZone = 0;
    3c26:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:23
  SerialNo = 200;
    3c2a:	88 ec       	ldi	r24, 0xC8	; 200
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x1f>
    3c32:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:24
  DataYear = 2022;
    3c36:	86 ee       	ldi	r24, 0xE6	; 230
    3c38:	97 e0       	ldi	r25, 0x07	; 7
    3c3a:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x1d>
    3c3e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x1c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:754
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    3c42:	61 e0       	ldi	r22, 0x01	; 1
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:755
            lcd.print("Defaults loaded");
    3c4a:	80 e3       	ldi	r24, 0x30	; 48
    3c4c:	92 e0       	ldi	r25, 0x02	; 2
    3c4e:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
    3c52:	e8 cc       	rjmp	.-1584   	; 0x3624 <main+0x12c8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:757
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	91 ec       	ldi	r25, 0xC1	; 193
    3c58:	99 12       	cpse	r9, r25
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:403
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3c5c:	98 2e       	mov	r9, r24
    3c5e:	7a cd       	rjmp	.-1292   	; 0x3754 <main+0x13f8>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:771
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    3c60:	88 20       	and	r8, r8
    3c62:	69 f0       	breq	.+26     	; 0x3c7e <main+0x1922>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:773
    {
        lcd.setCursor(1, 1);
    3c64:	61 e0       	ldi	r22, 0x01	; 1
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:774
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3c6c:	86 2d       	mov	r24, r6
    3c6e:	0e 94 02 0b 	call	0x1604	; 0x1604 <Config::getFormattedStr(unsigned char) [clone .constprop.69]>
    3c72:	0e 94 a5 09 	call	0x134a	; 0x134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    3c76:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
    3c7a:	81 2c       	mov	r8, r1
    3c7c:	ea cd       	rjmp	.-1068   	; 0x3852 <main+0x14f6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:778
    }
    else
    {
        if (millis() - timr_Time > 300)
    3c7e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3c82:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <timr_Time>
    3c86:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <timr_Time+0x1>
    3c8a:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <timr_Time+0x2>
    3c8e:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <timr_Time+0x3>
    3c92:	62 1b       	sub	r22, r18
    3c94:	73 0b       	sbc	r23, r19
    3c96:	84 0b       	sbc	r24, r20
    3c98:	95 0b       	sbc	r25, r21
    3c9a:	6d 32       	cpi	r22, 0x2D	; 45
    3c9c:	71 40       	sbci	r23, 0x01	; 1
    3c9e:	81 05       	cpc	r24, r1
    3ca0:	91 05       	cpc	r25, r1
    3ca2:	08 f4       	brcc	.+2      	; 0x3ca6 <main+0x194a>
    3ca4:	d6 cd       	rjmp	.-1108   	; 0x3852 <main+0x14f6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:780
        {
            if (blink)
    3ca6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    3caa:	88 23       	and	r24, r24
    3cac:	c1 f0       	breq	.+48     	; 0x3cde <main+0x1982>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:782
            {
                lcd.setCursor(1, 1);
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:783
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3cb6:	86 2d       	mov	r24, r6
    3cb8:	0e 94 02 0b 	call	0x1604	; 0x1604 <Config::getFormattedStr(unsigned char) [clone .constprop.69]>
    3cbc:	0e 94 a5 09 	call	0x134a	; 0x134a <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    3cc0:	0e 94 4e 09 	call	0x129c	; 0x129c <Print::print(char const*) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:784
                blink = false;
    3cc4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:809
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    3cc8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3ccc:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timr_Time>
    3cd0:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timr_Time+0x1>
    3cd4:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timr_Time+0x2>
    3cd8:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timr_Time+0x3>
    3cdc:	ba cd       	rjmp	.-1164   	; 0x3852 <main+0x14f6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:788
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime)
    3cde:	f3 e0       	ldi	r31, 0x03	; 3
    3ce0:	6f 12       	cpse	r6, r31
    3ce2:	14 c0       	rjmp	.+40     	; 0x3d0c <main+0x19b0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:790
                {
                    if (blinkMode == setHr)
    3ce4:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    3ce8:	81 11       	cpse	r24, r1
    3cea:	0b c0       	rjmp	.+22     	; 0x3d02 <main+0x19a6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:791
                        lcd.setCursor(1, 1);
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:793
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    3cf0:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:794
                    lcd.print(F("  "));
    3cf4:	88 e8       	ldi	r24, 0x88	; 136
    3cf6:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:805
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    3cf8:	0e 94 36 07 	call	0xe6c	; 0xe6c <Print::print(__FlashStringHelper const*) [clone .constprop.49]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:806
                    blink = true;
    3cfc:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    3d00:	e3 cf       	rjmp	.-58     	; 0x3cc8 <main+0x196c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:792
            {
                if (cmdId == mnuCmdSetTime)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    3d02:	81 30       	cpi	r24, 0x01	; 1
    3d04:	b9 f7       	brne	.-18     	; 0x3cf4 <main+0x1998>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:793
                        lcd.setCursor(4, 1);
    3d06:	61 e0       	ldi	r22, 0x01	; 1
    3d08:	84 e0       	ldi	r24, 0x04	; 4
    3d0a:	f2 cf       	rjmp	.-28     	; 0x3cf0 <main+0x1994>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:797
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    3d0c:	22 e0       	ldi	r18, 0x02	; 2
    3d0e:	62 12       	cpse	r6, r18
    3d10:	db cf       	rjmp	.-74     	; 0x3cc8 <main+0x196c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:799
                {
                    if (blinkMode == setDate)
    3d12:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    3d16:	82 30       	cpi	r24, 0x02	; 2
    3d18:	39 f4       	brne	.+14     	; 0x3d28 <main+0x19cc>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:800
                        lcd.setCursor(1, 1);
    3d1a:	61 e0       	ldi	r22, 0x01	; 1
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:804
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    3d1e:	0e 94 f3 06 	call	0xde6	; 0xde6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:805
                    lcd.print(F("  "));
    3d22:	85 e8       	ldi	r24, 0x85	; 133
    3d24:	92 e0       	ldi	r25, 0x02	; 2
    3d26:	e8 cf       	rjmp	.-48     	; 0x3cf8 <main+0x199c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:801
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    3d28:	83 30       	cpi	r24, 0x03	; 3
    3d2a:	19 f4       	brne	.+6      	; 0x3d32 <main+0x19d6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:802
                        lcd.setCursor(4, 1);
    3d2c:	61 e0       	ldi	r22, 0x01	; 1
    3d2e:	84 e0       	ldi	r24, 0x04	; 4
    3d30:	f6 cf       	rjmp	.-20     	; 0x3d1e <main+0x19c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:803
                    if (blinkMode == setYear)
    3d32:	84 30       	cpi	r24, 0x04	; 4
    3d34:	b1 f7       	brne	.-20     	; 0x3d22 <main+0x19c6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:804
                        lcd.setCursor(9, 1);
    3d36:	61 e0       	ldi	r22, 0x01	; 1
    3d38:	89 e0       	ldi	r24, 0x09	; 9
    3d3a:	f1 cf       	rjmp	.-30     	; 0x3d1e <main+0x19c2>

00003d3c <_GLOBAL__sub_D_ampDelay>:
_GLOBAL__sub_D_ampDelay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:987
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:58
    setMonth,
    setYear
};
byte blinkMode = setHr;

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    3d40:	cb e6       	ldi	r28, 0x6B	; 107
    3d42:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    3d44:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    3d46:	88 81       	ld	r24, Y
    3d48:	99 81       	ldd	r25, Y+1	; 0x01
    3d4a:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:58
    3d4e:	24 e0       	ldi	r18, 0x04	; 4
    3d50:	c3 32       	cpi	r28, 0x23	; 35
    3d52:	d2 07       	cpc	r29, r18
    3d54:	b9 f7       	brne	.-18     	; 0x3d44 <_GLOBAL__sub_D_ampDelay+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    3d56:	8e e5       	ldi	r24, 0x5E	; 94
    3d58:	91 e0       	ldi	r25, 0x01	; 1
    3d5a:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <mySoftwareSerial+0x1>
    3d5e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    3d62:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
    3d66:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    3d6a:	83 5a       	subi	r24, 0xA3	; 163
    3d6c:	94 40       	sbci	r25, 0x04	; 4
    3d6e:	71 f4       	brne	.+28     	; 0x3d8c <_GLOBAL__sub_D_ampDelay+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    3d70:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <mySoftwareSerial+0x13>
    3d74:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <mySoftwareSerial+0x14>
    3d78:	90 81       	ld	r25, Z
    3d7a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mySoftwareSerial+0x15>
    3d7e:	80 95       	com	r24
    3d80:	89 23       	and	r24, r25
    3d82:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    3d84:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    3d88:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <SoftwareSerial::active_object>
_GLOBAL__sub_D_ampDelay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:987
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	08 95       	ret

00003d92 <random_r>:
random_r():
    3d92:	8f 92       	push	r8
    3d94:	9f 92       	push	r9
    3d96:	af 92       	push	r10
    3d98:	bf 92       	push	r11
    3d9a:	cf 92       	push	r12
    3d9c:	df 92       	push	r13
    3d9e:	ef 92       	push	r14
    3da0:	ff 92       	push	r15
    3da2:	cf 93       	push	r28
    3da4:	df 93       	push	r29
    3da6:	ec 01       	movw	r28, r24
    3da8:	68 81       	ld	r22, Y
    3daa:	79 81       	ldd	r23, Y+1	; 0x01
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	9b 81       	ldd	r25, Y+3	; 0x03
    3db0:	61 15       	cp	r22, r1
    3db2:	71 05       	cpc	r23, r1
    3db4:	81 05       	cpc	r24, r1
    3db6:	91 05       	cpc	r25, r1
    3db8:	21 f4       	brne	.+8      	; 0x3dc2 <random_r+0x30>
    3dba:	64 e2       	ldi	r22, 0x24	; 36
    3dbc:	79 ed       	ldi	r23, 0xD9	; 217
    3dbe:	8b e5       	ldi	r24, 0x5B	; 91
    3dc0:	97 e0       	ldi	r25, 0x07	; 7
    3dc2:	2d e1       	ldi	r18, 0x1D	; 29
    3dc4:	33 ef       	ldi	r19, 0xF3	; 243
    3dc6:	41 e0       	ldi	r20, 0x01	; 1
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__divmodsi4>
    3dce:	49 01       	movw	r8, r18
    3dd0:	5a 01       	movw	r10, r20
    3dd2:	9b 01       	movw	r18, r22
    3dd4:	ac 01       	movw	r20, r24
    3dd6:	a7 ea       	ldi	r26, 0xA7	; 167
    3dd8:	b1 e4       	ldi	r27, 0x41	; 65
    3dda:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
    3dde:	6b 01       	movw	r12, r22
    3de0:	7c 01       	movw	r14, r24
    3de2:	ac ee       	ldi	r26, 0xEC	; 236
    3de4:	b4 ef       	ldi	r27, 0xF4	; 244
    3de6:	a5 01       	movw	r20, r10
    3de8:	94 01       	movw	r18, r8
    3dea:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__mulohisi3>
    3dee:	c6 0e       	add	r12, r22
    3df0:	d7 1e       	adc	r13, r23
    3df2:	e8 1e       	adc	r14, r24
    3df4:	f9 1e       	adc	r15, r25
    3df6:	f7 fe       	sbrs	r15, 7
    3df8:	06 c0       	rjmp	.+12     	; 0x3e06 <random_r+0x74>
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	c8 1a       	sub	r12, r24
    3dfe:	d1 08       	sbc	r13, r1
    3e00:	e1 08       	sbc	r14, r1
    3e02:	80 e8       	ldi	r24, 0x80	; 128
    3e04:	f8 0a       	sbc	r15, r24
    3e06:	c8 82       	st	Y, r12
    3e08:	d9 82       	std	Y+1, r13	; 0x01
    3e0a:	ea 82       	std	Y+2, r14	; 0x02
    3e0c:	fb 82       	std	Y+3, r15	; 0x03
    3e0e:	c7 01       	movw	r24, r14
    3e10:	b6 01       	movw	r22, r12
    3e12:	9f 77       	andi	r25, 0x7F	; 127
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	bf 90       	pop	r11
    3e22:	af 90       	pop	r10
    3e24:	9f 90       	pop	r9
    3e26:	8f 90       	pop	r8
    3e28:	08 95       	ret

00003e2a <random>:
random():
    3e2a:	8f 92       	push	r8
    3e2c:	9f 92       	push	r9
    3e2e:	af 92       	push	r10
    3e30:	bf 92       	push	r11
    3e32:	cf 92       	push	r12
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <next>
    3e3e:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <next+0x1>
    3e42:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <next+0x2>
    3e46:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <next+0x3>
    3e4a:	61 15       	cp	r22, r1
    3e4c:	71 05       	cpc	r23, r1
    3e4e:	81 05       	cpc	r24, r1
    3e50:	91 05       	cpc	r25, r1
    3e52:	21 f4       	brne	.+8      	; 0x3e5c <random+0x32>
    3e54:	64 e2       	ldi	r22, 0x24	; 36
    3e56:	79 ed       	ldi	r23, 0xD9	; 217
    3e58:	8b e5       	ldi	r24, 0x5B	; 91
    3e5a:	97 e0       	ldi	r25, 0x07	; 7
    3e5c:	2d e1       	ldi	r18, 0x1D	; 29
    3e5e:	33 ef       	ldi	r19, 0xF3	; 243
    3e60:	41 e0       	ldi	r20, 0x01	; 1
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__divmodsi4>
    3e68:	49 01       	movw	r8, r18
    3e6a:	5a 01       	movw	r10, r20
    3e6c:	9b 01       	movw	r18, r22
    3e6e:	ac 01       	movw	r20, r24
    3e70:	a7 ea       	ldi	r26, 0xA7	; 167
    3e72:	b1 e4       	ldi	r27, 0x41	; 65
    3e74:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
    3e78:	6b 01       	movw	r12, r22
    3e7a:	7c 01       	movw	r14, r24
    3e7c:	ac ee       	ldi	r26, 0xEC	; 236
    3e7e:	b4 ef       	ldi	r27, 0xF4	; 244
    3e80:	a5 01       	movw	r20, r10
    3e82:	94 01       	movw	r18, r8
    3e84:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__mulohisi3>
    3e88:	c6 0e       	add	r12, r22
    3e8a:	d7 1e       	adc	r13, r23
    3e8c:	e8 1e       	adc	r14, r24
    3e8e:	f9 1e       	adc	r15, r25
    3e90:	f7 fe       	sbrs	r15, 7
    3e92:	06 c0       	rjmp	.+12     	; 0x3ea0 <random+0x76>
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	c8 1a       	sub	r12, r24
    3e98:	d1 08       	sbc	r13, r1
    3e9a:	e1 08       	sbc	r14, r1
    3e9c:	80 e8       	ldi	r24, 0x80	; 128
    3e9e:	f8 0a       	sbc	r15, r24
    3ea0:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <next>
    3ea4:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <next+0x1>
    3ea8:	e0 92 07 01 	sts	0x0107, r14	; 0x800107 <next+0x2>
    3eac:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <next+0x3>
    3eb0:	c7 01       	movw	r24, r14
    3eb2:	b6 01       	movw	r22, r12
    3eb4:	9f 77       	andi	r25, 0x7F	; 127
    3eb6:	ff 90       	pop	r15
    3eb8:	ef 90       	pop	r14
    3eba:	df 90       	pop	r13
    3ebc:	cf 90       	pop	r12
    3ebe:	bf 90       	pop	r11
    3ec0:	af 90       	pop	r10
    3ec2:	9f 90       	pop	r9
    3ec4:	8f 90       	pop	r8
    3ec6:	08 95       	ret

00003ec8 <srandom>:
srandom():
    3ec8:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <next>
    3ecc:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <next+0x1>
    3ed0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next+0x2>
    3ed4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x3>
    3ed8:	08 95       	ret

00003eda <strcpy_P>:
strcpy_P():
    3eda:	fb 01       	movw	r30, r22
    3edc:	dc 01       	movw	r26, r24
    3ede:	05 90       	lpm	r0, Z+
    3ee0:	0d 92       	st	X+, r0
    3ee2:	00 20       	and	r0, r0
    3ee4:	e1 f7       	brne	.-8      	; 0x3ede <strcpy_P+0x4>
    3ee6:	08 95       	ret

00003ee8 <__itoa_ncheck>:
__itoa_ncheck():
    3ee8:	bb 27       	eor	r27, r27
    3eea:	4a 30       	cpi	r20, 0x0A	; 10
    3eec:	31 f4       	brne	.+12     	; 0x3efa <__itoa_ncheck+0x12>
    3eee:	99 23       	and	r25, r25
    3ef0:	22 f4       	brpl	.+8      	; 0x3efa <__itoa_ncheck+0x12>
    3ef2:	bd e2       	ldi	r27, 0x2D	; 45
    3ef4:	90 95       	com	r25
    3ef6:	81 95       	neg	r24
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__utoa_common>

00003efe <__utoa_ncheck>:
__utoa_ncheck():
    3efe:	bb 27       	eor	r27, r27

00003f00 <__utoa_common>:
    3f00:	fb 01       	movw	r30, r22
    3f02:	55 27       	eor	r21, r21
    3f04:	aa 27       	eor	r26, r26
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	aa 1f       	adc	r26, r26
    3f0c:	a4 17       	cp	r26, r20
    3f0e:	10 f0       	brcs	.+4      	; 0x3f14 <__utoa_common+0x14>
    3f10:	a4 1b       	sub	r26, r20
    3f12:	83 95       	inc	r24
    3f14:	50 51       	subi	r21, 0x10	; 16
    3f16:	b9 f7       	brne	.-18     	; 0x3f06 <__utoa_common+0x6>
    3f18:	a0 5d       	subi	r26, 0xD0	; 208
    3f1a:	aa 33       	cpi	r26, 0x3A	; 58
    3f1c:	08 f0       	brcs	.+2      	; 0x3f20 <__utoa_common+0x20>
    3f1e:	a9 5d       	subi	r26, 0xD9	; 217
    3f20:	a1 93       	st	Z+, r26
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	79 f7       	brne	.-34     	; 0x3f04 <__utoa_common+0x4>
    3f26:	b1 11       	cpse	r27, r1
    3f28:	b1 93       	st	Z+, r27
    3f2a:	11 92       	st	Z+, r1
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <strrev>

00003f32 <strrev>:
strrev():
    3f32:	dc 01       	movw	r26, r24
    3f34:	fc 01       	movw	r30, r24
    3f36:	67 2f       	mov	r22, r23
    3f38:	71 91       	ld	r23, Z+
    3f3a:	77 23       	and	r23, r23
    3f3c:	e1 f7       	brne	.-8      	; 0x3f36 <strrev+0x4>
    3f3e:	32 97       	sbiw	r30, 0x02	; 2
    3f40:	04 c0       	rjmp	.+8      	; 0x3f4a <strrev+0x18>
    3f42:	7c 91       	ld	r23, X
    3f44:	6d 93       	st	X+, r22
    3f46:	70 83       	st	Z, r23
    3f48:	62 91       	ld	r22, -Z
    3f4a:	ae 17       	cp	r26, r30
    3f4c:	bf 07       	cpc	r27, r31
    3f4e:	c8 f3       	brcs	.-14     	; 0x3f42 <strrev+0x10>
    3f50:	08 95       	ret

00003f52 <eeprom_read_block>:
eeprom_read_block():
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22

00003f56 <eeprom_read_blraw>:
    3f56:	fc 01       	movw	r30, r24
    3f58:	f9 99       	sbic	0x1f, 1	; 31
    3f5a:	fe cf       	rjmp	.-4      	; 0x3f58 <eeprom_read_blraw+0x2>
    3f5c:	06 c0       	rjmp	.+12     	; 0x3f6a <eeprom_read_blraw+0x14>
    3f5e:	f2 bd       	out	0x22, r31	; 34
    3f60:	e1 bd       	out	0x21, r30	; 33
    3f62:	f8 9a       	sbi	0x1f, 0	; 31
    3f64:	31 96       	adiw	r30, 0x01	; 1
    3f66:	00 b4       	in	r0, 0x20	; 32
    3f68:	0d 92       	st	X+, r0
    3f6a:	41 50       	subi	r20, 0x01	; 1
    3f6c:	50 40       	sbci	r21, 0x00	; 0
    3f6e:	b8 f7       	brcc	.-18     	; 0x3f5e <eeprom_read_blraw+0x8>
    3f70:	08 95       	ret

00003f72 <eeprom_write_block>:
eeprom_write_block():
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	03 c0       	rjmp	.+6      	; 0x3f7e <eeprom_write_block+0xc>
    3f78:	2d 91       	ld	r18, X+
    3f7a:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <eeprom_write_r18>
    3f7e:	41 50       	subi	r20, 0x01	; 1
    3f80:	50 40       	sbci	r21, 0x00	; 0
    3f82:	d0 f7       	brcc	.-12     	; 0x3f78 <eeprom_write_block+0x6>
    3f84:	08 95       	ret

00003f86 <eeprom_write_byte>:
eeprom_write_byte():
    3f86:	26 2f       	mov	r18, r22

00003f88 <eeprom_write_r18>:
    3f88:	f9 99       	sbic	0x1f, 1	; 31
    3f8a:	fe cf       	rjmp	.-4      	; 0x3f88 <eeprom_write_r18>
    3f8c:	1f ba       	out	0x1f, r1	; 31
    3f8e:	92 bd       	out	0x22, r25	; 34
    3f90:	81 bd       	out	0x21, r24	; 33
    3f92:	20 bd       	out	0x20, r18	; 32
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	fa 9a       	sbi	0x1f, 2	; 31
    3f9a:	f9 9a       	sbi	0x1f, 1	; 31
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	08 95       	ret

00003fa2 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3fa2:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3fa4:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    3fa6:	1e f4       	brtc	.+6      	; 0x3fae <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    3fa8:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    3faa:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3fae:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3fb0:	07 d0       	rcall	.+14     	; 0x3fc0 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3fb2:	0e 94 3a 20 	call	0x4074	; 0x4074 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    3fb6:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    3fb8:	03 d0       	rcall	.+6      	; 0x3fc0 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    3fba:	4e f4       	brtc	.+18     	; 0x3fce <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3fbc:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__negsi2>

00003fc0 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3fc0:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3fc2:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3fc4:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3fc6:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3fc8:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3fca:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3fcc:	5f 4f       	sbci	r21, 0xFF	; 255

00003fce <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3fce:	08 95       	ret

00003fd0 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3fd0:	90 95       	com	r25
    3fd2:	80 95       	com	r24
    3fd4:	70 95       	com	r23
    3fd6:	61 95       	neg	r22
    3fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fda:	8f 4f       	sbci	r24, 0xFF	; 255
    3fdc:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3fde:	08 95       	ret

00003fe0 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3fe0:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3fe4:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3fe6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3fe8:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3fea:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3fec:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3fee:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3ff0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3ff2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3ff4:	08 95       	ret

00003ff6 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    3ff6:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    3ff8:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__muluhisi3>

00003ffc <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    3ffc:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    4000:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    4002:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    4004:	08 95       	ret

00004006 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    4006:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    4008:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    400a:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    400c:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    400e:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    4010:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    4012:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    4014:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    4016:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    4018:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    401a:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    401c:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    401e:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    4020:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    4022:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    4024:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    4026:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    4028:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    402a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    402c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    402e:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    4030:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    4032:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    4034:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    4036:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    4038:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    403a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    403c:	09 94       	ijmp

0000403e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    403e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    4040:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    4042:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    4044:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    4046:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    4048:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    404a:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    404c:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    404e:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    4050:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    4052:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    4054:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    4056:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    4058:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    405a:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    405c:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    405e:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    4060:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    4062:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    4064:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    4066:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    4068:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    406a:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    406c:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    406e:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    4070:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    4072:	08 95       	ret

00004074 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4074:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4076:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4078:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    407a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    407c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    407e:	0d c0       	rjmp	.+26     	; 0x409a <__udivmodsi4_ep>

00004080 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4080:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4082:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4084:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4086:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4088:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    408a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    408c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    408e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4090:	20 f0       	brcs	.+8      	; 0x409a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4092:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4094:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4096:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4098:	f5 0b       	sbc	r31, r21

0000409a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    409a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    409c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    409e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    40a0:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    40a2:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    40a4:	69 f7       	brne	.-38     	; 0x4080 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    40a6:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    40a8:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    40aa:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    40ac:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    40ae:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    40b0:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    40b2:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    40b4:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    40b6:	08 95       	ret

000040b8 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    40b8:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    40ba:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    40bc:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    40be:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    40c0:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    40c2:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    40c4:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    40c6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    40c8:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    40ca:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    40cc:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    40ce:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    40d0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    40d2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    40d4:	08 95       	ret

000040d6 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    40d6:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    40d8:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <__udivmodqi4_ep>

000040dc <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    40dc:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    40de:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    40e2:	96 1b       	sub	r25, r22

000040e4 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    40e4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    40e6:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    40e8:	c9 f7       	brne	.-14     	; 0x40dc <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    40ea:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    40ec:	08 95       	ret

000040ee <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    40ee:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    40f0:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    40f2:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    40f4:	07 c0       	rjmp	.+14     	; 0x4104 <__udivmodhi4_ep>

000040f6 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    40f6:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    40f8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    40fa:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    40fc:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    40fe:	10 f0       	brcs	.+4      	; 0x4104 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4100:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4102:	b7 0b       	sbc	r27, r23

00004104 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4104:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4106:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4108:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    410a:	a9 f7       	brne	.-22     	; 0x40f6 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    410c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    410e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4110:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4112:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4114:	08 95       	ret

00004116 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    4116:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    4118:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    411a:	16 f4       	brtc	.+4      	; 0x4120 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    411c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    411e:	07 d0       	rcall	.+14     	; 0x412e <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    4120:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    4122:	09 d0       	rcall	.+18     	; 0x4136 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    4124:	0e 94 77 20 	call	0x40ee	; 0x40ee <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    4128:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    412a:	05 d0       	rcall	.+10     	; 0x4136 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    412c:	3e f4       	brtc	.+14     	; 0x413c <__divmodhi4_exit>

0000412e <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    412e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    4130:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    4132:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    4134:	08 95       	ret

00004136 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    4136:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    4138:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    413a:	7f 4f       	sbci	r23, 0xFF	; 255

0000413c <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    413c:	08 95       	ret

0000413e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    413e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4140:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    4142:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    4144:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4146:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4148:	09 94       	ijmp

0000414a <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    414a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <__umulhisi3>

0000414e <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    414e:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    4150:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    4152:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    4154:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    4156:	08 95       	ret

00004158 <malloc>:
malloc():
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	82 30       	cpi	r24, 0x02	; 2
    4162:	91 05       	cpc	r25, r1
    4164:	10 f4       	brcc	.+4      	; 0x416a <malloc+0x12>
    4166:	82 e0       	ldi	r24, 0x02	; 2
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	e0 91 c4 04 	lds	r30, 0x04C4	; 0x8004c4 <__flp>
    416e:	f0 91 c5 04 	lds	r31, 0x04C5	; 0x8004c5 <__flp+0x1>
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	a0 e0       	ldi	r26, 0x00	; 0
    417a:	30 97       	sbiw	r30, 0x00	; 0
    417c:	99 f4       	brne	.+38     	; 0x41a4 <malloc+0x4c>
    417e:	21 15       	cp	r18, r1
    4180:	31 05       	cpc	r19, r1
    4182:	09 f4       	brne	.+2      	; 0x4186 <malloc+0x2e>
    4184:	4a c0       	rjmp	.+148    	; 0x421a <malloc+0xc2>
    4186:	28 1b       	sub	r18, r24
    4188:	39 0b       	sbc	r19, r25
    418a:	24 30       	cpi	r18, 0x04	; 4
    418c:	31 05       	cpc	r19, r1
    418e:	d8 f5       	brcc	.+118    	; 0x4206 <malloc+0xae>
    4190:	8a 81       	ldd	r24, Y+2	; 0x02
    4192:	9b 81       	ldd	r25, Y+3	; 0x03
    4194:	61 15       	cp	r22, r1
    4196:	71 05       	cpc	r23, r1
    4198:	89 f1       	breq	.+98     	; 0x41fc <malloc+0xa4>
    419a:	fb 01       	movw	r30, r22
    419c:	93 83       	std	Z+3, r25	; 0x03
    419e:	82 83       	std	Z+2, r24	; 0x02
    41a0:	fe 01       	movw	r30, r28
    41a2:	11 c0       	rjmp	.+34     	; 0x41c6 <malloc+0x6e>
    41a4:	40 81       	ld	r20, Z
    41a6:	51 81       	ldd	r21, Z+1	; 0x01
    41a8:	02 81       	ldd	r16, Z+2	; 0x02
    41aa:	13 81       	ldd	r17, Z+3	; 0x03
    41ac:	48 17       	cp	r20, r24
    41ae:	59 07       	cpc	r21, r25
    41b0:	e0 f0       	brcs	.+56     	; 0x41ea <malloc+0x92>
    41b2:	48 17       	cp	r20, r24
    41b4:	59 07       	cpc	r21, r25
    41b6:	99 f4       	brne	.+38     	; 0x41de <malloc+0x86>
    41b8:	10 97       	sbiw	r26, 0x00	; 0
    41ba:	61 f0       	breq	.+24     	; 0x41d4 <malloc+0x7c>
    41bc:	12 96       	adiw	r26, 0x02	; 2
    41be:	0c 93       	st	X, r16
    41c0:	12 97       	sbiw	r26, 0x02	; 2
    41c2:	13 96       	adiw	r26, 0x03	; 3
    41c4:	1c 93       	st	X, r17
    41c6:	32 96       	adiw	r30, 0x02	; 2
    41c8:	cf 01       	movw	r24, r30
    41ca:	df 91       	pop	r29
    41cc:	cf 91       	pop	r28
    41ce:	1f 91       	pop	r17
    41d0:	0f 91       	pop	r16
    41d2:	08 95       	ret
    41d4:	00 93 c4 04 	sts	0x04C4, r16	; 0x8004c4 <__flp>
    41d8:	10 93 c5 04 	sts	0x04C5, r17	; 0x8004c5 <__flp+0x1>
    41dc:	f4 cf       	rjmp	.-24     	; 0x41c6 <malloc+0x6e>
    41de:	21 15       	cp	r18, r1
    41e0:	31 05       	cpc	r19, r1
    41e2:	51 f0       	breq	.+20     	; 0x41f8 <malloc+0xa0>
    41e4:	42 17       	cp	r20, r18
    41e6:	53 07       	cpc	r21, r19
    41e8:	38 f0       	brcs	.+14     	; 0x41f8 <malloc+0xa0>
    41ea:	a9 01       	movw	r20, r18
    41ec:	db 01       	movw	r26, r22
    41ee:	9a 01       	movw	r18, r20
    41f0:	bd 01       	movw	r22, r26
    41f2:	df 01       	movw	r26, r30
    41f4:	f8 01       	movw	r30, r16
    41f6:	c1 cf       	rjmp	.-126    	; 0x417a <malloc+0x22>
    41f8:	ef 01       	movw	r28, r30
    41fa:	f9 cf       	rjmp	.-14     	; 0x41ee <malloc+0x96>
    41fc:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <__flp+0x1>
    4200:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <__flp>
    4204:	cd cf       	rjmp	.-102    	; 0x41a0 <malloc+0x48>
    4206:	fe 01       	movw	r30, r28
    4208:	e2 0f       	add	r30, r18
    420a:	f3 1f       	adc	r31, r19
    420c:	81 93       	st	Z+, r24
    420e:	91 93       	st	Z+, r25
    4210:	22 50       	subi	r18, 0x02	; 2
    4212:	31 09       	sbc	r19, r1
    4214:	39 83       	std	Y+1, r19	; 0x01
    4216:	28 83       	st	Y, r18
    4218:	d7 cf       	rjmp	.-82     	; 0x41c8 <malloc+0x70>
    421a:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <__brkval>
    421e:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <__brkval+0x1>
    4222:	23 2b       	or	r18, r19
    4224:	41 f4       	brne	.+16     	; 0x4236 <malloc+0xde>
    4226:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_start>
    422a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_start+0x1>
    422e:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <__brkval+0x1>
    4232:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <__brkval>
    4236:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_end>
    423a:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    423e:	21 15       	cp	r18, r1
    4240:	31 05       	cpc	r19, r1
    4242:	41 f4       	brne	.+16     	; 0x4254 <malloc+0xfc>
    4244:	2d b7       	in	r18, 0x3d	; 61
    4246:	3e b7       	in	r19, 0x3e	; 62
    4248:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    424c:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    4250:	24 1b       	sub	r18, r20
    4252:	35 0b       	sbc	r19, r21
    4254:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <__brkval>
    4258:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <__brkval+0x1>
    425c:	e2 17       	cp	r30, r18
    425e:	f3 07       	cpc	r31, r19
    4260:	a0 f4       	brcc	.+40     	; 0x428a <malloc+0x132>
    4262:	2e 1b       	sub	r18, r30
    4264:	3f 0b       	sbc	r19, r31
    4266:	28 17       	cp	r18, r24
    4268:	39 07       	cpc	r19, r25
    426a:	78 f0       	brcs	.+30     	; 0x428a <malloc+0x132>
    426c:	ac 01       	movw	r20, r24
    426e:	4e 5f       	subi	r20, 0xFE	; 254
    4270:	5f 4f       	sbci	r21, 0xFF	; 255
    4272:	24 17       	cp	r18, r20
    4274:	35 07       	cpc	r19, r21
    4276:	48 f0       	brcs	.+18     	; 0x428a <malloc+0x132>
    4278:	4e 0f       	add	r20, r30
    427a:	5f 1f       	adc	r21, r31
    427c:	50 93 c3 04 	sts	0x04C3, r21	; 0x8004c3 <__brkval+0x1>
    4280:	40 93 c2 04 	sts	0x04C2, r20	; 0x8004c2 <__brkval>
    4284:	81 93       	st	Z+, r24
    4286:	91 93       	st	Z+, r25
    4288:	9f cf       	rjmp	.-194    	; 0x41c8 <malloc+0x70>
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	e0 e0       	ldi	r30, 0x00	; 0
    428e:	9c cf       	rjmp	.-200    	; 0x41c8 <malloc+0x70>

00004290 <free>:
free():
    4290:	cf 93       	push	r28
    4292:	df 93       	push	r29
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	e9 f0       	breq	.+58     	; 0x42d2 <free+0x42>
    4298:	fc 01       	movw	r30, r24
    429a:	32 97       	sbiw	r30, 0x02	; 2
    429c:	13 82       	std	Z+3, r1	; 0x03
    429e:	12 82       	std	Z+2, r1	; 0x02
    42a0:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <__flp>
    42a4:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <__flp+0x1>
    42a8:	ed 01       	movw	r28, r26
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	10 97       	sbiw	r26, 0x00	; 0
    42b0:	a1 f4       	brne	.+40     	; 0x42da <free+0x4a>
    42b2:	20 81       	ld	r18, Z
    42b4:	31 81       	ldd	r19, Z+1	; 0x01
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <__brkval>
    42be:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <__brkval+0x1>
    42c2:	28 17       	cp	r18, r24
    42c4:	39 07       	cpc	r19, r25
    42c6:	09 f0       	breq	.+2      	; 0x42ca <free+0x3a>
    42c8:	61 c0       	rjmp	.+194    	; 0x438c <free+0xfc>
    42ca:	f0 93 c3 04 	sts	0x04C3, r31	; 0x8004c3 <__brkval+0x1>
    42ce:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <__brkval>
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	08 95       	ret
    42d8:	ea 01       	movw	r28, r20
    42da:	ce 17       	cp	r28, r30
    42dc:	df 07       	cpc	r29, r31
    42de:	e8 f5       	brcc	.+122    	; 0x435a <free+0xca>
    42e0:	4a 81       	ldd	r20, Y+2	; 0x02
    42e2:	5b 81       	ldd	r21, Y+3	; 0x03
    42e4:	9e 01       	movw	r18, r28
    42e6:	41 15       	cp	r20, r1
    42e8:	51 05       	cpc	r21, r1
    42ea:	b1 f7       	brne	.-20     	; 0x42d8 <free+0x48>
    42ec:	e9 01       	movw	r28, r18
    42ee:	fb 83       	std	Y+3, r31	; 0x03
    42f0:	ea 83       	std	Y+2, r30	; 0x02
    42f2:	49 91       	ld	r20, Y+
    42f4:	59 91       	ld	r21, Y+
    42f6:	c4 0f       	add	r28, r20
    42f8:	d5 1f       	adc	r29, r21
    42fa:	ec 17       	cp	r30, r28
    42fc:	fd 07       	cpc	r31, r29
    42fe:	61 f4       	brne	.+24     	; 0x4318 <free+0x88>
    4300:	80 81       	ld	r24, Z
    4302:	91 81       	ldd	r25, Z+1	; 0x01
    4304:	02 96       	adiw	r24, 0x02	; 2
    4306:	84 0f       	add	r24, r20
    4308:	95 1f       	adc	r25, r21
    430a:	e9 01       	movw	r28, r18
    430c:	99 83       	std	Y+1, r25	; 0x01
    430e:	88 83       	st	Y, r24
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	93 81       	ldd	r25, Z+3	; 0x03
    4314:	9b 83       	std	Y+3, r25	; 0x03
    4316:	8a 83       	std	Y+2, r24	; 0x02
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	e0 e0       	ldi	r30, 0x00	; 0
    431c:	12 96       	adiw	r26, 0x02	; 2
    431e:	8d 91       	ld	r24, X+
    4320:	9c 91       	ld	r25, X
    4322:	13 97       	sbiw	r26, 0x03	; 3
    4324:	00 97       	sbiw	r24, 0x00	; 0
    4326:	b9 f5       	brne	.+110    	; 0x4396 <free+0x106>
    4328:	2d 91       	ld	r18, X+
    432a:	3c 91       	ld	r19, X
    432c:	11 97       	sbiw	r26, 0x01	; 1
    432e:	cd 01       	movw	r24, r26
    4330:	02 96       	adiw	r24, 0x02	; 2
    4332:	82 0f       	add	r24, r18
    4334:	93 1f       	adc	r25, r19
    4336:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <__brkval>
    433a:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <__brkval+0x1>
    433e:	28 17       	cp	r18, r24
    4340:	39 07       	cpc	r19, r25
    4342:	39 f6       	brne	.-114    	; 0x42d2 <free+0x42>
    4344:	30 97       	sbiw	r30, 0x00	; 0
    4346:	51 f5       	brne	.+84     	; 0x439c <free+0x10c>
    4348:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <__flp+0x1>
    434c:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <__flp>
    4350:	b0 93 c3 04 	sts	0x04C3, r27	; 0x8004c3 <__brkval+0x1>
    4354:	a0 93 c2 04 	sts	0x04C2, r26	; 0x8004c2 <__brkval>
    4358:	bc cf       	rjmp	.-136    	; 0x42d2 <free+0x42>
    435a:	d3 83       	std	Z+3, r29	; 0x03
    435c:	c2 83       	std	Z+2, r28	; 0x02
    435e:	40 81       	ld	r20, Z
    4360:	51 81       	ldd	r21, Z+1	; 0x01
    4362:	84 0f       	add	r24, r20
    4364:	95 1f       	adc	r25, r21
    4366:	c8 17       	cp	r28, r24
    4368:	d9 07       	cpc	r29, r25
    436a:	61 f4       	brne	.+24     	; 0x4384 <free+0xf4>
    436c:	4e 5f       	subi	r20, 0xFE	; 254
    436e:	5f 4f       	sbci	r21, 0xFF	; 255
    4370:	88 81       	ld	r24, Y
    4372:	99 81       	ldd	r25, Y+1	; 0x01
    4374:	48 0f       	add	r20, r24
    4376:	59 1f       	adc	r21, r25
    4378:	51 83       	std	Z+1, r21	; 0x01
    437a:	40 83       	st	Z, r20
    437c:	8a 81       	ldd	r24, Y+2	; 0x02
    437e:	9b 81       	ldd	r25, Y+3	; 0x03
    4380:	93 83       	std	Z+3, r25	; 0x03
    4382:	82 83       	std	Z+2, r24	; 0x02
    4384:	21 15       	cp	r18, r1
    4386:	31 05       	cpc	r19, r1
    4388:	09 f0       	breq	.+2      	; 0x438c <free+0xfc>
    438a:	b0 cf       	rjmp	.-160    	; 0x42ec <free+0x5c>
    438c:	f0 93 c5 04 	sts	0x04C5, r31	; 0x8004c5 <__flp+0x1>
    4390:	e0 93 c4 04 	sts	0x04C4, r30	; 0x8004c4 <__flp>
    4394:	9e cf       	rjmp	.-196    	; 0x42d2 <free+0x42>
    4396:	fd 01       	movw	r30, r26
    4398:	dc 01       	movw	r26, r24
    439a:	c0 cf       	rjmp	.-128    	; 0x431c <free+0x8c>
    439c:	13 82       	std	Z+3, r1	; 0x03
    439e:	12 82       	std	Z+2, r1	; 0x02
    43a0:	d7 cf       	rjmp	.-82     	; 0x4350 <free+0xc0>

000043a2 <realloc>:
realloc():
    43a2:	b0 e0       	ldi	r27, 0x00	; 0
    43a4:	a0 e0       	ldi	r26, 0x00	; 0
    43a6:	e7 ed       	ldi	r30, 0xD7	; 215
    43a8:	f1 e2       	ldi	r31, 0x21	; 33
    43aa:	0c 94 05 20 	jmp	0x400a	; 0x400a <__prologue_saves__+0x4>
    43ae:	8c 01       	movw	r16, r24
    43b0:	00 97       	sbiw	r24, 0x00	; 0
    43b2:	51 f4       	brne	.+20     	; 0x43c8 <realloc+0x26>
    43b4:	cb 01       	movw	r24, r22
    43b6:	0e 94 ac 20 	call	0x4158	; 0x4158 <malloc>
    43ba:	8c 01       	movw	r16, r24
    43bc:	c8 01       	movw	r24, r16
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
    43c2:	e0 e1       	ldi	r30, 0x10	; 16
    43c4:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__epilogue_restores__+0x4>
    43c8:	fc 01       	movw	r30, r24
    43ca:	e6 0f       	add	r30, r22
    43cc:	f7 1f       	adc	r31, r23
    43ce:	9c 01       	movw	r18, r24
    43d0:	22 50       	subi	r18, 0x02	; 2
    43d2:	31 09       	sbc	r19, r1
    43d4:	e2 17       	cp	r30, r18
    43d6:	f3 07       	cpc	r31, r19
    43d8:	08 f4       	brcc	.+2      	; 0x43dc <realloc+0x3a>
    43da:	9d c0       	rjmp	.+314    	; 0x4516 <realloc+0x174>
    43dc:	d9 01       	movw	r26, r18
    43de:	cd 91       	ld	r28, X+
    43e0:	dc 91       	ld	r29, X
    43e2:	11 97       	sbiw	r26, 0x01	; 1
    43e4:	c6 17       	cp	r28, r22
    43e6:	d7 07       	cpc	r29, r23
    43e8:	98 f0       	brcs	.+38     	; 0x4410 <realloc+0x6e>
    43ea:	c5 30       	cpi	r28, 0x05	; 5
    43ec:	d1 05       	cpc	r29, r1
    43ee:	30 f3       	brcs	.-52     	; 0x43bc <realloc+0x1a>
    43f0:	ce 01       	movw	r24, r28
    43f2:	04 97       	sbiw	r24, 0x04	; 4
    43f4:	86 17       	cp	r24, r22
    43f6:	97 07       	cpc	r25, r23
    43f8:	08 f3       	brcs	.-62     	; 0x43bc <realloc+0x1a>
    43fa:	c6 1b       	sub	r28, r22
    43fc:	d7 0b       	sbc	r29, r23
    43fe:	22 97       	sbiw	r28, 0x02	; 2
    4400:	c1 93       	st	Z+, r28
    4402:	d1 93       	st	Z+, r29
    4404:	6d 93       	st	X+, r22
    4406:	7c 93       	st	X, r23
    4408:	cf 01       	movw	r24, r30
    440a:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
    440e:	d6 cf       	rjmp	.-84     	; 0x43bc <realloc+0x1a>
    4410:	5b 01       	movw	r10, r22
    4412:	ac 1a       	sub	r10, r28
    4414:	bd 0a       	sbc	r11, r29
    4416:	4c 01       	movw	r8, r24
    4418:	8c 0e       	add	r8, r28
    441a:	9d 1e       	adc	r9, r29
    441c:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <__flp>
    4420:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <__flp+0x1>
    4424:	51 2c       	mov	r5, r1
    4426:	41 2c       	mov	r4, r1
    4428:	f1 2c       	mov	r15, r1
    442a:	e1 2c       	mov	r14, r1
    442c:	10 97       	sbiw	r26, 0x00	; 0
    442e:	31 f5       	brne	.+76     	; 0x447c <realloc+0xda>
    4430:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <__brkval>
    4434:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <__brkval+0x1>
    4438:	88 15       	cp	r24, r8
    443a:	99 05       	cpc	r25, r9
    443c:	09 f0       	breq	.+2      	; 0x4440 <realloc+0x9e>
    443e:	5c c0       	rjmp	.+184    	; 0x44f8 <realloc+0x156>
    4440:	46 16       	cp	r4, r22
    4442:	57 06       	cpc	r5, r23
    4444:	08 f0       	brcs	.+2      	; 0x4448 <realloc+0xa6>
    4446:	58 c0       	rjmp	.+176    	; 0x44f8 <realloc+0x156>
    4448:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__malloc_heap_end>
    444c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	41 f4       	brne	.+16     	; 0x4464 <realloc+0xc2>
    4454:	8d b7       	in	r24, 0x3d	; 61
    4456:	9e b7       	in	r25, 0x3e	; 62
    4458:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    445c:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    4460:	84 1b       	sub	r24, r20
    4462:	95 0b       	sbc	r25, r21
    4464:	e8 17       	cp	r30, r24
    4466:	f9 07       	cpc	r31, r25
    4468:	08 f0       	brcs	.+2      	; 0x446c <realloc+0xca>
    446a:	55 c0       	rjmp	.+170    	; 0x4516 <realloc+0x174>
    446c:	f0 93 c3 04 	sts	0x04C3, r31	; 0x8004c3 <__brkval+0x1>
    4470:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <__brkval>
    4474:	f9 01       	movw	r30, r18
    4476:	71 83       	std	Z+1, r23	; 0x01
    4478:	60 83       	st	Z, r22
    447a:	a0 cf       	rjmp	.-192    	; 0x43bc <realloc+0x1a>
    447c:	8d 91       	ld	r24, X+
    447e:	9c 91       	ld	r25, X
    4480:	11 97       	sbiw	r26, 0x01	; 1
    4482:	12 96       	adiw	r26, 0x02	; 2
    4484:	6c 90       	ld	r6, X
    4486:	12 97       	sbiw	r26, 0x02	; 2
    4488:	13 96       	adiw	r26, 0x03	; 3
    448a:	7c 90       	ld	r7, X
    448c:	13 97       	sbiw	r26, 0x03	; 3
    448e:	a8 15       	cp	r26, r8
    4490:	b9 05       	cpc	r27, r9
    4492:	59 f5       	brne	.+86     	; 0x44ea <realloc+0x148>
    4494:	6c 01       	movw	r12, r24
    4496:	42 e0       	ldi	r20, 0x02	; 2
    4498:	c4 0e       	add	r12, r20
    449a:	d1 1c       	adc	r13, r1
    449c:	ca 14       	cp	r12, r10
    449e:	db 04       	cpc	r13, r11
    44a0:	20 f1       	brcs	.+72     	; 0x44ea <realloc+0x148>
    44a2:	ac 01       	movw	r20, r24
    44a4:	4a 19       	sub	r20, r10
    44a6:	5b 09       	sbc	r21, r11
    44a8:	da 01       	movw	r26, r20
    44aa:	12 96       	adiw	r26, 0x02	; 2
    44ac:	15 97       	sbiw	r26, 0x05	; 5
    44ae:	80 f0       	brcs	.+32     	; 0x44d0 <realloc+0x12e>
    44b0:	62 82       	std	Z+2, r6	; 0x02
    44b2:	73 82       	std	Z+3, r7	; 0x03
    44b4:	51 83       	std	Z+1, r21	; 0x01
    44b6:	40 83       	st	Z, r20
    44b8:	d9 01       	movw	r26, r18
    44ba:	6d 93       	st	X+, r22
    44bc:	7c 93       	st	X, r23
    44be:	e1 14       	cp	r14, r1
    44c0:	f1 04       	cpc	r15, r1
    44c2:	71 f0       	breq	.+28     	; 0x44e0 <realloc+0x13e>
    44c4:	d7 01       	movw	r26, r14
    44c6:	13 96       	adiw	r26, 0x03	; 3
    44c8:	fc 93       	st	X, r31
    44ca:	ee 93       	st	-X, r30
    44cc:	12 97       	sbiw	r26, 0x02	; 2
    44ce:	76 cf       	rjmp	.-276    	; 0x43bc <realloc+0x1a>
    44d0:	22 96       	adiw	r28, 0x02	; 2
    44d2:	8c 0f       	add	r24, r28
    44d4:	9d 1f       	adc	r25, r29
    44d6:	f9 01       	movw	r30, r18
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	80 83       	st	Z, r24
    44dc:	f3 01       	movw	r30, r6
    44de:	ef cf       	rjmp	.-34     	; 0x44be <realloc+0x11c>
    44e0:	f0 93 c5 04 	sts	0x04C5, r31	; 0x8004c5 <__flp+0x1>
    44e4:	e0 93 c4 04 	sts	0x04C4, r30	; 0x8004c4 <__flp>
    44e8:	69 cf       	rjmp	.-302    	; 0x43bc <realloc+0x1a>
    44ea:	48 16       	cp	r4, r24
    44ec:	59 06       	cpc	r5, r25
    44ee:	08 f4       	brcc	.+2      	; 0x44f2 <realloc+0x150>
    44f0:	2c 01       	movw	r4, r24
    44f2:	7d 01       	movw	r14, r26
    44f4:	d3 01       	movw	r26, r6
    44f6:	9a cf       	rjmp	.-204    	; 0x442c <realloc+0x8a>
    44f8:	cb 01       	movw	r24, r22
    44fa:	0e 94 ac 20 	call	0x4158	; 0x4158 <malloc>
    44fe:	7c 01       	movw	r14, r24
    4500:	00 97       	sbiw	r24, 0x00	; 0
    4502:	49 f0       	breq	.+18     	; 0x4516 <realloc+0x174>
    4504:	ae 01       	movw	r20, r28
    4506:	b8 01       	movw	r22, r16
    4508:	0e 94 8e 22 	call	0x451c	; 0x451c <memcpy>
    450c:	c8 01       	movw	r24, r16
    450e:	0e 94 48 21 	call	0x4290	; 0x4290 <free>
    4512:	87 01       	movw	r16, r14
    4514:	53 cf       	rjmp	.-346    	; 0x43bc <realloc+0x1a>
    4516:	10 e0       	ldi	r17, 0x00	; 0
    4518:	00 e0       	ldi	r16, 0x00	; 0
    451a:	50 cf       	rjmp	.-352    	; 0x43bc <realloc+0x1a>

0000451c <memcpy>:
memcpy():
    451c:	fb 01       	movw	r30, r22
    451e:	dc 01       	movw	r26, r24
    4520:	02 c0       	rjmp	.+4      	; 0x4526 <memcpy+0xa>
    4522:	01 90       	ld	r0, Z+
    4524:	0d 92       	st	X+, r0
    4526:	41 50       	subi	r20, 0x01	; 1
    4528:	50 40       	sbci	r21, 0x00	; 0
    452a:	d8 f7       	brcc	.-10     	; 0x4522 <memcpy+0x6>
    452c:	08 95       	ret

0000452e <strcat>:
strcat():
    452e:	fb 01       	movw	r30, r22
    4530:	dc 01       	movw	r26, r24
    4532:	0d 90       	ld	r0, X+
    4534:	00 20       	and	r0, r0
    4536:	e9 f7       	brne	.-6      	; 0x4532 <strcat+0x4>
    4538:	11 97       	sbiw	r26, 0x01	; 1
    453a:	01 90       	ld	r0, Z+
    453c:	0d 92       	st	X+, r0
    453e:	00 20       	and	r0, r0
    4540:	e1 f7       	brne	.-8      	; 0x453a <strcat+0xc>
    4542:	08 95       	ret

00004544 <strcmp>:
strcmp():
    4544:	fb 01       	movw	r30, r22
    4546:	dc 01       	movw	r26, r24
    4548:	8d 91       	ld	r24, X+
    454a:	01 90       	ld	r0, Z+
    454c:	80 19       	sub	r24, r0
    454e:	01 10       	cpse	r0, r1
    4550:	d9 f3       	breq	.-10     	; 0x4548 <strcmp+0x4>
    4552:	99 0b       	sbc	r25, r25
    4554:	08 95       	ret

00004556 <strcpy>:
strcpy():
    4556:	fb 01       	movw	r30, r22
    4558:	dc 01       	movw	r26, r24
    455a:	01 90       	ld	r0, Z+
    455c:	0d 92       	st	X+, r0
    455e:	00 20       	and	r0, r0
    4560:	e1 f7       	brne	.-8      	; 0x455a <strcpy+0x4>
    4562:	08 95       	ret

00004564 <strncpy>:
strncpy():
    4564:	fb 01       	movw	r30, r22
    4566:	dc 01       	movw	r26, r24
    4568:	41 50       	subi	r20, 0x01	; 1
    456a:	50 40       	sbci	r21, 0x00	; 0
    456c:	48 f0       	brcs	.+18     	; 0x4580 <strncpy+0x1c>
    456e:	01 90       	ld	r0, Z+
    4570:	0d 92       	st	X+, r0
    4572:	00 20       	and	r0, r0
    4574:	c9 f7       	brne	.-14     	; 0x4568 <strncpy+0x4>
    4576:	01 c0       	rjmp	.+2      	; 0x457a <strncpy+0x16>
    4578:	1d 92       	st	X+, r1
    457a:	41 50       	subi	r20, 0x01	; 1
    457c:	50 40       	sbci	r21, 0x00	; 0
    457e:	e0 f7       	brcc	.-8      	; 0x4578 <strncpy+0x14>
    4580:	08 95       	ret

00004582 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4582:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4584:	c6 e7       	ldi	r28, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4586:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4588:	04 c0       	rjmp	.+8      	; 0x4592 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    458a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    458c:	0e 94 9f 20 	call	0x413e	; 0x413e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4590:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4592:	c7 37       	cpi	r28, 0x77	; 119
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4594:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4596:	c9 f7       	brne	.-14     	; 0x458a <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4598:	f8 94       	cli

0000459a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    459a:	ff cf       	rjmp	.-2      	; 0x459a <__stop_program>
