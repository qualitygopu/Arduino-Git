
e:\Arduino\Arduino Git\ChantBellv2.2\build/ChantBellv2.2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__dtors_end>
       4:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
       8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
       c:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_3>
      10:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_3>
      14:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_3>
      18:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      1c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      20:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      24:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      28:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      2c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      30:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      34:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      38:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      3c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      40:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_16>
      44:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      48:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      4c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      50:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      54:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      58:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      5c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>
      60:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__vector_24>
      64:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 56       	subi	r20, 0x65	; 101
      6a:	45 4e       	sbci	r20, 0xE5	; 229
      6c:	49 4e       	sbci	r20, 0xE9	; 233
      6e:	47 20       	and	r4, r7
      70:	53 4f       	sbci	r21, 0xF3	; 243
      72:	4e 47       	sbci	r20, 0x7E	; 126
      74:	20 4e       	sbci	r18, 0xE0	; 224
      76:	6f 2e       	mov	r6, r31
	...

00000079 <sampleMenu_2_7_3>:
      79:	45 56 45 4e 49 4e 47 20 53 4f 4e 47 20 54 49 4d     EVENING SONG TIM
      89:	45 00                                               E.

0000008b <sampleMenu_2_7_2>:
      8b:	4d 4f 52 4e 49 4e 47 20 53 4f 4e 47 20 4e 6f 2e     MORNING SONG No.
	...

0000009c <sampleMenu_2_7_1>:
      9c:	4d 4f 52 4e 49 4e 47 20 53 4f 4e 47 20 54 49 4d     MORNING SONG TIM
      ac:	45 00                                               E.

000000ae <sampleMenu_2_6_2>:
      ae:	32 20 50 4c 41 59 00                                2 PLAY.

000000b5 <sampleMenu_2_6_1>:
      b5:	31 20 53 45 4c 45 43 54 20 54 49 4d 45 00           1 SELECT TIME.

000000c3 <sampleMenu_2_9>:
      c3:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

000000d1 <sampleMenu_List_2_7>:
      d1:	0d 9c 00 00 00 00 0f 8b 00 00 00 00 0e 79 00 00     .............y..
      e1:	00 00 10 68 00 00 00 00 00 24 01 00 00 00           ...h.....$....

000000ef <sampleMenu_2_7>:
      ef:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

000000fc <sampleMenu_List_2_6>:
      fc:	0a b5 00 00 00 00 0b ae 00 00 00 00 00 24 01 00     .............$..
	...

0000010e <sampleMenu_2_6>:
     10e:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

00000118 <sampleMenu_2_3>:
     118:	53 4f 4e 47 31 20 43 4f 55 4e 54 00                 SONG1 COUNT.

00000124 <sampleMenu_back>:
     124:	42 41 43 4b 00                                      BACK.

00000129 <configMenu_2>:
     129:	53 45 54 20 59 45 41 52 00                          SET YEAR.

00000132 <configMenu_1>:
     132:	53 45 54 20 53 45 52 49 41 4c 00                    SET SERIAL.

0000013d <sampleMenu_2_5>:
     13d:	56 4f 4c 55 4d 45 00                                VOLUME.

00000144 <sampleMenu_2_8>:
     144:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000150 <sampleMenu_2_2>:
     150:	41 4c 41 52 4d 20 45 4e 44 20 54 49 4d 45 00        ALARM END TIME.

0000015f <sampleMenu_2_1>:
     15f:	41 4c 41 52 4d 20 53 54 41 52 54 20 54 49 4d 45     ALARM START TIME
	...

00000170 <sampleMenu_1_2>:
     170:	53 45 54 20 54 49 4d 45 00                          SET TIME.

00000179 <sampleMenu_1_1>:
     179:	53 45 54 20 44 41 54 45 00                          SET DATE.

00000182 <sampleMenu_exit>:
     182:	45 58 49 54 00                                      EXIT.

00000187 <sampleMenu_List_2>:
     187:	05 5f 01 00 00 00 06 50 01 00 00 00 07 18 01 00     ._.....P........
     197:	00 00 08 3d 01 00 00 00 09 0e 01 fc 00 03 0c ef     ...=............
     1a7:	00 d1 00 05 11 44 01 00 00 00 13 c3 00 00 00 00     .....D..........
     1b7:	00 24 01 00 00 00                                   .$....

000001bd <sampleMenu_2>:
     1bd:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

000001ca <sampleMenu_List_1>:
     1ca:	02 79 01 00 00 00 03 70 01 00 00 00 00 24 01 00     .y.....p.....$..
	...

000001dc <sampleMenu_1>:
     1dc:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

000001ea <port_to_mode_PGM>:
     1ea:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001f4 <digital_pin_to_timer_PGM>:
     1f4:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     204:	00 00 00 00 00 00 00                                .......

0000020b <configMenu_Root>:
     20b:	15 32 01 00 00 00 14 29 01 00 00 00 00 82 01 00     .2.....)........
	...

0000021d <normalMenu_Root>:
     21d:	02 79 01 00 00 00 03 70 01 00 00 00 05 5f 01 00     .y.....p....._..
     22d:	00 00 06 50 01 00 00 00 11 44 01 00 00 00 08 3d     ...P.....D.....=
     23d:	01 00 00 00 00 82 01 00 00 00                       ..........

00000247 <sampleMenu_Root>:
     247:	01 dc 01 ca 01 03 04 bd 01 87 01 09 00 82 01 00     ................
	...

00000259 <setup::__c>:
     259:	45 52 52 20 30 33 00                                ERR 03.

00000260 <setup::__c>:
     260:	45 52 52 20 30 32 00                                ERR 02.

00000267 <setup::__c>:
     267:	45 52 52 20 30 31 00                                ERR 01.

0000026e <setup::__c>:
     26e:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

0000027f <setup::__c>:
     27f:	51 54 52 4f 4e 00                                   QTRON.

00000285 <processMenuCommand(unsigned char)::__c>:
     285:	20 20 00                                              .

00000288 <processMenuCommand(unsigned char)::__c>:
     288:	20 20 00                                              .

0000028b <loop::__c>:
     28b:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

0000029c <daysInMonth>:
     29c:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000002a7 <port_to_input_PGM>:
     2a7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002b1 <port_to_output_PGM>:
     2b1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002bb <digital_pin_to_port_PGM>:
     2bb:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2cb:	03 03 03 03 02 02 03                                .......

000002d2 <digital_pin_to_bit_mask_PGM>:
     2d2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2e2:	04 08 10 20 40 80 40 00                             ... @.@.

000002ea <__ctors_start>:
__ctors_start():
     2ea:	85 11       	cpse	r24, r5

000002ec <__ctors_end>:
__dtors_start():
     2ec:	b3 1f       	adc	r27, r19

000002ee <__dtors_end>:
__dtors_end():
     2ee:	11 24       	eor	r1, r1
     2f0:	1f be       	out	0x3f, r1	; 63
     2f2:	cf ef       	ldi	r28, 0xFF	; 255
     2f4:	d8 e0       	ldi	r29, 0x08	; 8
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	cd bf       	out	0x3d, r28	; 61

000002fa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2fa:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2fe:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     300:	e6 ec       	ldi	r30, 0xC6	; 198
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     302:	f7 e4       	ldi	r31, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     304:	02 c0       	rjmp	.+4      	; 0x30a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     306:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     308:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     30a:	a0 34       	cpi	r26, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     30c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     30e:	d9 f7       	brne	.-10     	; 0x306 <__do_copy_data+0xc>

00000310 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     310:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     312:	a0 e4       	ldi	r26, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     314:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     31a:	a8 3c       	cpi	r26, 0xC8	; 200
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     31c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>

00000320 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     320:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     322:	c6 e7       	ldi	r28, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     324:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     326:	04 c0       	rjmp	.+8      	; 0x330 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     328:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     32a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     32c:	0e 94 b4 21 	call	0x4368	; 0x4368 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     330:	c5 37       	cpi	r28, 0x75	; 117
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     332:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     334:	c9 f7       	brne	.-14     	; 0x328 <__do_global_ctors+0x8>
     336:	0e 94 9a 12 	call	0x2534	; 0x2534 <main>
     33a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__do_global_dtors>

0000033e <__bad_interrupt>:
__vector_22():
     33e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000342 <MenuManager::currentItemHasChildren() [clone .constprop.100]>:
_ZN11MenuManager22currentItemHasChildrenEv.constprop.100():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     342:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <Menu1+0x6>
     346:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <Menu1+0x3>
     34a:	f0 91 01 04 	lds	r31, 0x0401	; 0x800401 <Menu1+0x4>
     34e:	96 e0       	ldi	r25, 0x06	; 6
     350:	89 9f       	mul	r24, r25
     352:	e0 0d       	add	r30, r0
     354:	f1 1d       	adc	r31, r1
     356:	11 24       	eor	r1, r1
     358:	35 96       	adiw	r30, 0x05	; 5
     35a:	e4 91       	lpm	r30, Z
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	e1 11       	cpse	r30, r1
     360:	01 c0       	rjmp	.+2      	; 0x364 <MenuManager::currentItemHasChildren() [clone .constprop.100]+0x22>
     362:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:116
}
     364:	08 95       	ret

00000366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>:
_ZN11MenuManager19getCurrentItemCmdIdEv.constprop.97():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     366:	ed ef       	ldi	r30, 0xFD	; 253
     368:	f3 e0       	ldi	r31, 0x03	; 3
     36a:	86 81       	ldd	r24, Z+6	; 0x06
     36c:	03 80       	ldd	r0, Z+3	; 0x03
     36e:	f4 81       	ldd	r31, Z+4	; 0x04
     370:	e0 2d       	mov	r30, r0
     372:	96 e0       	ldi	r25, 0x06	; 6
     374:	89 9f       	mul	r24, r25
     376:	e0 0d       	add	r30, r0
     378:	f1 1d       	adc	r31, r1
     37a:	11 24       	eor	r1, r1
     37c:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:60
}
     37e:	08 95       	ret

00000380 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>:
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:173
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     380:	98 2f       	mov	r25, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     382:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     386:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     388:	21 32       	cpi	r18, 0x21	; 33
     38a:	08 f0       	brcs	.+2      	; 0x38e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
     38c:	43 c0       	rjmp	.+134    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     38e:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_state>
     392:	81 11       	cpse	r24, r1
     394:	fc cf       	rjmp	.-8      	; 0x38e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     396:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     39a:	32 e0       	ldi	r19, 0x02	; 2
     39c:	30 93 b6 03 	sts	0x03B6, r19	; 0x8003b6 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     3a0:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
     3a6:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     3aa:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     3ae:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <twi_masterBufferLength>
     3b2:	a9 eb       	ldi	r26, 0xB9	; 185
     3b4:	b3 e0       	ldi	r27, 0x03	; 3
     3b6:	e2 e9       	ldi	r30, 0x92	; 146
     3b8:	f3 e0       	ldi	r31, 0x03	; 3
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     3ba:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     3bc:	29 13       	cpse	r18, r25
     3be:	31 c0       	rjmp	.+98     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     3c0:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     3c4:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <twi_slarw>
     3c8:	88 0f       	add	r24, r24
     3ca:	89 2b       	or	r24, r25
     3cc:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     3d0:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <twi_inRepStart>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	49 f5       	brne	.+82     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     3d8:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     3dc:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <twi_slarw>
     3e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     3e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     3e8:	83 fd       	sbrc	r24, 3
     3ea:	f8 cf       	rjmp	.-16     	; 0x3dc <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     3ec:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     3ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     3f2:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_state>
     3f6:	82 30       	cpi	r24, 0x02	; 2
     3f8:	e1 f3       	breq	.-8      	; 0x3f2 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     3fa:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <twi_error>
     3fe:	8f 3f       	cpi	r24, 0xFF	; 255
     400:	b1 f0       	breq	.+44     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     402:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <twi_error>
     406:	80 32       	cpi	r24, 0x20	; 32
     408:	a1 f0       	breq	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     40a:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <twi_error>
     40e:	80 33       	cpi	r24, 0x30	; 48
     410:	91 f0       	breq	.+36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     412:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     414:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     418:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     41c:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:183
  return ret;
}
     420:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     422:	3d 91       	ld	r19, X+
     424:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     426:	9f 5f       	subi	r25, 0xFF	; 255
     428:	c9 cf       	rjmp	.-110    	; 0x3bc <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     42a:	85 ee       	ldi	r24, 0xE5	; 229
     42c:	e0 cf       	rjmp	.-64     	; 0x3ee <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x6e>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	f1 cf       	rjmp	.-30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	ef cf       	rjmp	.-34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	ed cf       	rjmp	.-38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

0000043a <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     43a:	08 95       	ret

0000043c <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     43c:	08 95       	ret

0000043e <DateTime::dayOfTheWeek() const [clone .constprop.20]>:
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:554
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     43e:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <bell+0x1>
     442:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <bell>
     446:	49 2f       	mov	r20, r25
     448:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:110
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     44a:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <bell+0x2>
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	ec e9       	ldi	r30, 0x9C	; 156
     454:	f2 e0       	ldi	r31, 0x02	; 2
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
  for (uint8_t i = 1; i < m; ++i)
     456:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     458:	86 17       	cp	r24, r22
     45a:	30 f4       	brcc	.+12     	; 0x468 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:112
    days += pgm_read_byte(daysInMonth + i - 1);
     45c:	74 91       	lpm	r23, Z
     45e:	27 0f       	add	r18, r23
     460:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	f8 cf       	rjmp	.-16     	; 0x458 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:113
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     468:	63 30       	cpi	r22, 0x03	; 3
     46a:	20 f0       	brcs	.+8      	; 0x474 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x36>
     46c:	93 70       	andi	r25, 0x03	; 3
     46e:	11 f4       	brne	.+4      	; 0x474 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:114
    ++days;
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  return days + 365 * y + (y + 3) / 4 - 1;
     474:	6d e6       	ldi	r22, 0x6D	; 109
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	46 9f       	mul	r20, r22
     47a:	c0 01       	movw	r24, r0
     47c:	47 9f       	mul	r20, r23
     47e:	90 0d       	add	r25, r0
     480:	56 9f       	mul	r21, r22
     482:	90 0d       	add	r25, r0
     484:	11 24       	eor	r1, r1
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     486:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     488:	4d 5f       	subi	r20, 0xFD	; 253
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	56 95       	lsr	r21
     48e:	47 95       	ror	r20
     490:	56 95       	lsr	r21
     492:	47 95       	ror	r20
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     494:	84 0f       	add	r24, r20
     496:	95 1f       	adc	r25, r21
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	67 e0       	ldi	r22, 0x07	; 7
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:556
}
     4a4:	08 95       	ret

000004a6 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	6c 01       	movw	r12, r24
     4bc:	7b 01       	movw	r14, r22
     4be:	8b 01       	movw	r16, r22
     4c0:	04 0f       	add	r16, r20
     4c2:	15 1f       	adc	r17, r21
     4c4:	eb 01       	movw	r28, r22
     4c6:	5e 01       	movw	r10, r28
     4c8:	ae 18       	sub	r10, r14
     4ca:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4cc:	c0 17       	cp	r28, r16
     4ce:	d1 07       	cpc	r29, r17
     4d0:	59 f0       	breq	.+22     	; 0x4e8 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4d2:	69 91       	ld	r22, Y+
     4d4:	d6 01       	movw	r26, r12
     4d6:	ed 91       	ld	r30, X+
     4d8:	fc 91       	ld	r31, X
     4da:	01 90       	ld	r0, Z+
     4dc:	f0 81       	ld	r31, Z
     4de:	e0 2d       	mov	r30, r0
     4e0:	c6 01       	movw	r24, r12
     4e2:	09 95       	icall
     4e4:	89 2b       	or	r24, r25
     4e6:	79 f7       	brne	.-34     	; 0x4c6 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     4e8:	c5 01       	movw	r24, r10
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	08 95       	ret

00000500 <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     500:	84 30       	cpi	r24, 0x04	; 4
     502:	81 f0       	breq	.+32     	; 0x524 <turnOffPWM+0x24>
     504:	28 f4       	brcc	.+10     	; 0x510 <turnOffPWM+0x10>
     506:	82 30       	cpi	r24, 0x02	; 2
     508:	e9 f0       	breq	.+58     	; 0x544 <turnOffPWM+0x44>
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	f9 f0       	breq	.+62     	; 0x54c <turnOffPWM+0x4c>
     50e:	08 95       	ret
     510:	88 30       	cpi	r24, 0x08	; 8
     512:	71 f0       	breq	.+28     	; 0x530 <turnOffPWM+0x30>
     514:	89 30       	cpi	r24, 0x09	; 9
     516:	91 f0       	breq	.+36     	; 0x53c <turnOffPWM+0x3c>
     518:	85 30       	cpi	r24, 0x05	; 5
     51a:	b9 f4       	brne	.+46     	; 0x54a <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     51c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     520:	8f 7d       	andi	r24, 0xDF	; 223
     522:	03 c0       	rjmp	.+6      	; 0x52a <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     524:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     528:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     52a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     52e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     530:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     534:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     536:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     53a:	08 95       	ret
     53c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     540:	8f 7d       	andi	r24, 0xDF	; 223
     542:	f9 cf       	rjmp	.-14     	; 0x536 <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     544:	84 b5       	in	r24, 0x24	; 36
     546:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     548:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     54a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     54c:	84 b5       	in	r24, 0x24	; 36
     54e:	8f 7d       	andi	r24, 0xDF	; 223
     550:	fb cf       	rjmp	.-10     	; 0x548 <turnOffPWM+0x48>

00000552 <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     556:	28 2f       	mov	r18, r24
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	ec 50       	subi	r30, 0x0C	; 12
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     562:	f9 01       	movw	r30, r18
     564:	ee 52       	subi	r30, 0x2E	; 46
     566:	fd 4f       	sbci	r31, 0xFD	; 253
     568:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     56a:	f9 01       	movw	r30, r18
     56c:	e5 54       	subi	r30, 0x45	; 69
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     572:	cc 23       	and	r28, r28
     574:	a1 f0       	breq	.+40     	; 0x59e <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     576:	81 11       	cpse	r24, r1
     578:	0e 94 80 02 	call	0x500	; 0x500 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     57c:	ec 2f       	mov	r30, r28
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	e9 55       	subi	r30, 0x59	; 89
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	a5 91       	lpm	r26, Z+
     58a:	b4 91       	lpm	r27, Z
     58c:	ec 91       	ld	r30, X
     58e:	ed 23       	and	r30, r29
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	09 f4       	brne	.+2      	; 0x598 <digitalRead+0x46>
     596:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	fa cf       	rjmp	.-12     	; 0x598 <digitalRead+0x46>

000005a4 <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     5aa:	28 2f       	mov	r18, r24
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	ec 50       	subi	r30, 0x0C	; 12
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     5b6:	f9 01       	movw	r30, r18
     5b8:	ee 52       	subi	r30, 0x2E	; 46
     5ba:	fd 4f       	sbci	r31, 0xFD	; 253
     5bc:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     5be:	f9 01       	movw	r30, r18
     5c0:	e5 54       	subi	r30, 0x45	; 69
     5c2:	fd 4f       	sbci	r31, 0xFD	; 253
     5c4:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     5c6:	cc 23       	and	r28, r28
     5c8:	a9 f0       	breq	.+42     	; 0x5f4 <digitalWrite+0x50>
     5ca:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5cc:	81 11       	cpse	r24, r1
     5ce:	0e 94 80 02 	call	0x500	; 0x500 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     5d2:	ec 2f       	mov	r30, r28
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ef 54       	subi	r30, 0x4F	; 79
     5dc:	fd 4f       	sbci	r31, 0xFD	; 253
     5de:	a5 91       	lpm	r26, Z+
     5e0:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     5e2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     5e4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     5e6:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     5e8:	11 11       	cpse	r17, r1
     5ea:	08 c0       	rjmp	.+16     	; 0x5fc <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     5ec:	d0 95       	com	r29
     5ee:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     5f0:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     5f2:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     5fc:	de 2b       	or	r29, r30
     5fe:	f8 cf       	rjmp	.-16     	; 0x5f0 <digitalWrite+0x4c>

00000600 <TwoWire::begin() [clone .constprop.43]>:
_ZN7TwoWire5beginEv.constprop.43():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     600:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     604:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     608:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     60c:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     610:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     61a:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	82 e1       	ldi	r24, 0x12	; 18
     622:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	83 e1       	ldi	r24, 0x13	; 19
     62a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     62e:	e9 eb       	ldi	r30, 0xB9	; 185
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	8e 7f       	andi	r24, 0xFE	; 254
     636:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     638:	80 81       	ld	r24, Z
     63a:	8d 7f       	andi	r24, 0xFD	; 253
     63c:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     63e:	88 e4       	ldi	r24, 0x48	; 72
     640:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     644:	85 e4       	ldi	r24, 0x45	; 69
     646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     64a:	8d e1       	ldi	r24, 0x1D	; 29
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <twi_onSlaveTransmit+0x1>
     652:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     656:	8e e1       	ldi	r24, 0x1E	; 30
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <twi_onSlaveReceive+0x1>
     65e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.43():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     662:	08 95       	ret

00000664 <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	fc 01       	movw	r30, r24
     66c:	ee 52       	subi	r30, 0x2E	; 46
     66e:	fd 4f       	sbci	r31, 0xFD	; 253
     670:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     672:	85 54       	subi	r24, 0x45	; 69
     674:	9d 4f       	sbci	r25, 0xFD	; 253
     676:	fc 01       	movw	r30, r24
     678:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     67a:	88 23       	and	r24, r24
     67c:	c9 f0       	breq	.+50     	; 0x6b0 <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	fc 01       	movw	r30, r24
     686:	e6 51       	subi	r30, 0x16	; 22
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	a5 91       	lpm	r26, Z+
     68c:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     68e:	fc 01       	movw	r30, r24
     690:	ef 54       	subi	r30, 0x4F	; 79
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	c5 91       	lpm	r28, Z+
     696:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     698:	61 11       	cpse	r22, r1
     69a:	0d c0       	rjmp	.+26     	; 0x6b6 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     69c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     69e:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     6a0:	8c 91       	ld	r24, X
     6a2:	20 95       	com	r18
     6a4:	82 23       	and	r24, r18
     6a6:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     6a8:	88 81       	ld	r24, Y
     6aa:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     6ac:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     6ae:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     6b6:	62 30       	cpi	r22, 0x02	; 2
     6b8:	51 f4       	brne	.+20     	; 0x6ce <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     6ba:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     6bc:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     6be:	3c 91       	ld	r19, X
     6c0:	82 2f       	mov	r24, r18
     6c2:	80 95       	com	r24
     6c4:	83 23       	and	r24, r19
     6c6:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     6c8:	e8 81       	ld	r30, Y
     6ca:	2e 2b       	or	r18, r30
     6cc:	ef cf       	rjmp	.-34     	; 0x6ac <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     6ce:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     6d0:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     6d2:	ec 91       	ld	r30, X
     6d4:	2e 2b       	or	r18, r30
     6d6:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     6d8:	8f bf       	out	0x3f, r24	; 63
     6da:	ea cf       	rjmp	.-44     	; 0x6b0 <pinMode+0x4c>

000006dc <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	91 05       	cpc	r25, r1
     6e0:	39 f0       	breq	.+14     	; 0x6f0 <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     6ea:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     6f0:	08 95       	ret

000006f2 <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     6f2:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     6f4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     6f6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <timer0_overflow_count>
     6fa:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <timer0_overflow_count+0x1>
     6fe:	a0 91 cb 02 	lds	r26, 0x02CB	; 0x8002cb <timer0_overflow_count+0x2>
     702:	b0 91 cc 02 	lds	r27, 0x02CC	; 0x8002cc <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     706:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     708:	a8 9b       	sbis	0x15, 0	; 21
     70a:	05 c0       	rjmp	.+10     	; 0x716 <micros+0x24>
     70c:	2f 3f       	cpi	r18, 0xFF	; 255
     70e:	19 f0       	breq	.+6      	; 0x716 <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	a1 1d       	adc	r26, r1
     714:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     716:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     718:	ba 2f       	mov	r27, r26
     71a:	a9 2f       	mov	r26, r25
     71c:	98 2f       	mov	r25, r24
     71e:	88 27       	eor	r24, r24
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	62 0f       	add	r22, r18
     726:	71 1d       	adc	r23, r1
     728:	81 1d       	adc	r24, r1
     72a:	91 1d       	adc	r25, r1
     72c:	42 e0       	ldi	r20, 0x02	; 2
     72e:	66 0f       	add	r22, r22
     730:	77 1f       	adc	r23, r23
     732:	88 1f       	adc	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	4a 95       	dec	r20
     738:	d1 f7       	brne	.-12     	; 0x72e <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     73a:	08 95       	ret

0000073c <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <micros>
     754:	4b 01       	movw	r8, r22
     756:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     758:	c1 14       	cp	r12, r1
     75a:	d1 04       	cpc	r13, r1
     75c:	e1 04       	cpc	r14, r1
     75e:	f1 04       	cpc	r15, r1
     760:	b9 f0       	breq	.+46     	; 0x790 <delay+0x54>
     762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <micros>
     766:	68 19       	sub	r22, r8
     768:	79 09       	sbc	r23, r9
     76a:	8a 09       	sbc	r24, r10
     76c:	9b 09       	sbc	r25, r11
     76e:	68 3e       	cpi	r22, 0xE8	; 232
     770:	73 40       	sbci	r23, 0x03	; 3
     772:	81 05       	cpc	r24, r1
     774:	91 05       	cpc	r25, r1
     776:	80 f3       	brcs	.-32     	; 0x758 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	c2 1a       	sub	r12, r18
     77c:	d1 08       	sbc	r13, r1
     77e:	e1 08       	sbc	r14, r1
     780:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     782:	88 ee       	ldi	r24, 0xE8	; 232
     784:	88 0e       	add	r8, r24
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	98 1e       	adc	r9, r24
     78a:	a1 1c       	adc	r10, r1
     78c:	b1 1c       	adc	r11, r1
     78e:	e4 cf       	rjmp	.-56     	; 0x758 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	08 95       	ret

000007a2 <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7a2:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7a4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7a6:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <timer0_millis>
     7aa:	70 91 c6 02 	lds	r23, 0x02C6	; 0x8002c6 <timer0_millis+0x1>
     7ae:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <timer0_millis+0x2>
     7b2:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7b6:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     7b8:	08 95       	ret

000007ba <DFRobotDFPlayerMini::available() [clone .constprop.61]>:
_ZN19DFRobotDFPlayerMini9availableEv.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     7be:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <myDFPlayer>
     7c2:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <myDFPlayer+0x1>
     7c6:	dc 01       	movw	r26, r24
     7c8:	ed 91       	ld	r30, X+
     7ca:	fc 91       	ld	r31, X
     7cc:	00 84       	ldd	r0, Z+8	; 0x08
     7ce:	f1 85       	ldd	r31, Z+9	; 0x09
     7d0:	e0 2d       	mov	r30, r0
     7d2:	09 95       	icall
     7d4:	89 2b       	or	r24, r25
     7d6:	09 f4       	brne	.+2      	; 0x7da <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x20>
     7d8:	d7 c0       	rjmp	.+430    	; 0x988 <__stack+0x89>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	cb 01       	movw	r24, r22
     7e0:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     7e4:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <myDFPlayer+0x1e>
     7e8:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <myDFPlayer>
     7ec:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     7f0:	dc 01       	movw	r26, r24
     7f2:	ed 91       	ld	r30, X+
     7f4:	fc 91       	ld	r31, X
     7f6:	02 84       	ldd	r0, Z+10	; 0x0a
     7f8:	f3 85       	ldd	r31, Z+11	; 0x0b
     7fa:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     7fc:	21 11       	cpse	r18, r1
     7fe:	0b c0       	rjmp	.+22     	; 0x816 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x5c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     800:	09 95       	icall
     802:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     806:	8e 37       	cpi	r24, 0x7E	; 126
     808:	d1 f6       	brne	.-76     	; 0x7be <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     80a:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <myDFPlayer+0x1e>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <myDFPlayer+0x1e>
     814:	d4 cf       	rjmp	.-88     	; 0x7be <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     816:	09 95       	icall
     818:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <myDFPlayer+0x1e>
     81c:	e9 2f       	mov	r30, r25
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	e1 58       	subi	r30, 0x81	; 129
     822:	fb 4f       	sbci	r31, 0xFB	; 251
     824:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     826:	92 30       	cpi	r25, 0x02	; 2
     828:	b9 f0       	breq	.+46     	; 0x858 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x9e>
     82a:	99 30       	cpi	r25, 0x09	; 9
     82c:	d9 f0       	breq	.+54     	; 0x864 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0xaa>
     82e:	91 30       	cpi	r25, 0x01	; 1
     830:	a9 f4       	brne	.+42     	; 0x85c <DFRobotDFPlayerMini::available() [clone .constprop.61]+0xa2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     832:	8f 3f       	cpi	r24, 0xFF	; 255
     834:	99 f0       	breq	.+38     	; 0x85c <DFRobotDFPlayerMini::available() [clone .constprop.61]+0xa2>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     836:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     840:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <myDFPlayer+0x23>
     844:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     848:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     84c:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <myDFPlayer+0x25>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     850:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     858:	86 30       	cpi	r24, 0x06	; 6
     85a:	69 f7       	brne	.-38     	; 0x836 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     85c:	9f 5f       	subi	r25, 0xFF	; 255
     85e:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <myDFPlayer+0x1e>
     862:	ad cf       	rjmp	.-166    	; 0x7be <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     864:	8f 3e       	cpi	r24, 0xEF	; 239
     866:	39 f7       	brne	.-50     	; 0x836 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x7c>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     868:	20 91 8b 04 	lds	r18, 0x048B	; 0x80048b <myDFPlayer+0xc>
     86c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <myDFPlayer+0xb>
     870:	28 0f       	add	r18, r24
     872:	33 27       	eor	r19, r19
     874:	33 1f       	adc	r19, r19
     876:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <myDFPlayer+0xd>
     87a:	c9 01       	movw	r24, r18
     87c:	8e 0f       	add	r24, r30
     87e:	91 1d       	adc	r25, r1
     880:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <myDFPlayer+0xe>
     884:	28 0f       	add	r18, r24
     886:	39 2f       	mov	r19, r25
     888:	31 1d       	adc	r19, r1
     88a:	40 91 8e 04 	lds	r20, 0x048E	; 0x80048e <myDFPlayer+0xf>
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	24 0f       	add	r18, r20
     892:	35 1f       	adc	r19, r21
     894:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <myDFPlayer+0x10>
     898:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     89a:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <myDFPlayer+0x11>
     89e:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     8a0:	76 2f       	mov	r23, r22
     8a2:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8a4:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <myDFPlayer+0x12>
     8a8:	6f 0f       	add	r22, r31
     8aa:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     8ac:	28 0f       	add	r18, r24
     8ae:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     8b0:	31 95       	neg	r19
     8b2:	21 95       	neg	r18
     8b4:	31 09       	sbc	r19, r1
_ZN19DFRobotDFPlayerMini9availableEv.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     8b6:	62 17       	cp	r22, r18
     8b8:	73 07       	cpc	r23, r19
     8ba:	09 f0       	breq	.+2      	; 0x8be <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x104>
     8bc:	bc cf       	rjmp	.-136    	; 0x836 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     8be:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     8c2:	e1 34       	cpi	r30, 0x41	; 65
     8c4:	19 f4       	brne	.+6      	; 0x8cc <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x112>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     8c6:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <myDFPlayer+0x25>
     8ca:	2f c0       	rjmp	.+94     	; 0x92a <__stack+0x2b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     8cc:	e0 93 a0 04 	sts	0x04A0, r30	; 0x8004a0 <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     8d0:	54 2f       	mov	r21, r20
     8d2:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8d4:	84 0f       	add	r24, r20
     8d6:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     8d8:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <myDFPlayer+0x23>
     8dc:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     8e0:	ea 53       	subi	r30, 0x3A	; 58
     8e2:	e6 31       	cpi	r30, 0x16	; 22
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x12e>
     8e6:	46 c0       	rjmp	.+140    	; 0x974 <__stack+0x75>
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	e7 58       	subi	r30, 0x87	; 135
     8ec:	fb 4f       	sbci	r31, 0xFB	; 251
     8ee:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__tablejump2__>
     8f2:	a6 04       	cpc	r10, r6
     8f4:	ae 04       	cpc	r10, r14
     8f6:	b8 04       	cpc	r11, r8
     8f8:	8f 04       	cpc	r8, r15
     8fa:	b8 04       	cpc	r11, r8
     8fc:	98 04       	cpc	r9, r8
     8fe:	b6 04       	cpc	r11, r6
     900:	ba 04       	cpc	r11, r10
     902:	b8 04       	cpc	r11, r8
     904:	b8 04       	cpc	r11, r8
     906:	b8 04       	cpc	r11, r8
     908:	b8 04       	cpc	r11, r8
     90a:	b8 04       	cpc	r11, r8
     90c:	b8 04       	cpc	r11, r8
     90e:	b8 04       	cpc	r11, r8
     910:	b8 04       	cpc	r11, r8
     912:	ba 04       	cpc	r11, r10
     914:	b8 04       	cpc	r11, r8
     916:	b8 04       	cpc	r11, r8
     918:	b8 04       	cpc	r11, r8
     91a:	b8 04       	cpc	r11, r8
     91c:	b8 04       	cpc	r11, r8
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <myDFPlayer+0x24>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     92a:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <myDFPlayer+0x24>
     92e:	91 cf       	rjmp	.-222    	; 0x852 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x98>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     930:	80 ff       	sbrs	r24, 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     934:	89 e0       	ldi	r24, 0x09	; 9
     936:	f4 cf       	rjmp	.-24     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     938:	81 ff       	sbrs	r24, 1
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	f0 cf       	rjmp	.-32     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     940:	83 70       	andi	r24, 0x03	; 3
     942:	99 27       	eor	r25, r25
     944:	89 2b       	or	r24, r25
     946:	89 f3       	breq	.-30     	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     948:	8a e0       	ldi	r24, 0x0A	; 10
     94a:	ea cf       	rjmp	.-44     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     94c:	80 ff       	sbrs	r24, 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     950:	87 e0       	ldi	r24, 0x07	; 7
     952:	e6 cf       	rjmp	.-52     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     954:	81 ff       	sbrs	r24, 1
     956:	e9 cf       	rjmp	.-46     	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	e2 cf       	rjmp	.-60     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     95c:	80 ff       	sbrs	r24, 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     960:	88 e0       	ldi	r24, 0x08	; 8
     962:	de cf       	rjmp	.-68     	; 0x920 <__stack+0x21>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     964:	81 ff       	sbrs	r24, 1
     966:	e1 cf       	rjmp	.-62     	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	da cf       	rjmp	.-76     	; 0x920 <__stack+0x21>
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	d8 cf       	rjmp	.-80     	; 0x920 <__stack+0x21>
     970:	8b e0       	ldi	r24, 0x0B	; 11
     972:	d6 cf       	rjmp	.-84     	; 0x920 <__stack+0x21>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     97a:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <myDFPlayer+0x23>
     97e:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     982:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <myDFPlayer+0x24>
     986:	9f cf       	rjmp	.-194    	; 0x8c6 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x10c>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     988:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <myDFPlayer+0x25>
     98c:	88 23       	and	r24, r24
     98e:	69 f2       	breq	.-102    	; 0x92a <__stack+0x2b>
     990:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
     994:	00 91 81 04 	lds	r16, 0x0481	; 0x800481 <myDFPlayer+0x2>
     998:	10 91 82 04 	lds	r17, 0x0482	; 0x800482 <myDFPlayer+0x3>
     99c:	20 91 83 04 	lds	r18, 0x0483	; 0x800483 <myDFPlayer+0x4>
     9a0:	30 91 84 04 	lds	r19, 0x0484	; 0x800484 <myDFPlayer+0x5>
     9a4:	60 1b       	sub	r22, r16
     9a6:	71 0b       	sbc	r23, r17
     9a8:	82 0b       	sbc	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	00 91 85 04 	lds	r16, 0x0485	; 0x800485 <myDFPlayer+0x6>
     9b0:	10 91 86 04 	lds	r17, 0x0486	; 0x800486 <myDFPlayer+0x7>
     9b4:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <myDFPlayer+0x8>
     9b8:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <myDFPlayer+0x9>
     9bc:	60 17       	cp	r22, r16
     9be:	71 07       	cpc	r23, r17
     9c0:	82 07       	cpc	r24, r18
     9c2:	93 07       	cpc	r25, r19
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	b1 cf       	rjmp	.-158    	; 0x92a <__stack+0x2b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     9c8:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     9cc:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     9d0:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <myDFPlayer+0x23>
     9d4:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	36 cf       	rjmp	.-404    	; 0x848 <DFRobotDFPlayerMini::available() [clone .constprop.61]+0x8e>

000009dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>:
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.59():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     9dc:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     9e0:	27 2f       	mov	r18, r23
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	70 93 98 04 	sts	0x0498, r23	; 0x800498 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     9e8:	60 93 99 04 	sts	0x0499, r22	; 0x800499 <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     9ec:	40 91 95 04 	lds	r20, 0x0495	; 0x800495 <myDFPlayer+0x16>
     9f0:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <myDFPlayer+0x15>
     9f4:	49 0f       	add	r20, r25
     9f6:	55 27       	eor	r21, r21
     9f8:	55 1f       	adc	r21, r21
     9fa:	84 0f       	add	r24, r20
     9fc:	95 2f       	mov	r25, r21
     9fe:	91 1d       	adc	r25, r1
     a00:	40 91 97 04 	lds	r20, 0x0497	; 0x800497 <myDFPlayer+0x18>
     a04:	84 0f       	add	r24, r20
     a06:	91 1d       	adc	r25, r1
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	68 0f       	add	r22, r24
     a0e:	79 2f       	mov	r23, r25
     a10:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     a12:	71 95       	neg	r23
     a14:	61 95       	neg	r22
     a16:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     a18:	70 93 9a 04 	sts	0x049A, r23	; 0x80049a <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     a1c:	60 93 9b 04 	sts	0x049B, r22	; 0x80049b <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     a20:	44 23       	and	r20, r20
     a22:	61 f0       	breq	.+24     	; 0xa3c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     a24:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <myDFPlayer+0x25>
     a28:	88 23       	and	r24, r24
     a2a:	41 f0       	breq	.+16     	; 0xa3c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	cb 01       	movw	r24, r22
     a32:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     a36:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DFRobotDFPlayerMini::available() [clone .constprop.61]>
     a3a:	f4 cf       	rjmp	.-24     	; 0xa24 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     a3c:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <myDFPlayer>
     a40:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <myDFPlayer+0x1>
     a44:	dc 01       	movw	r26, r24
     a46:	ed 91       	ld	r30, X+
     a48:	fc 91       	ld	r31, X
     a4a:	02 80       	ldd	r0, Z+2	; 0x02
     a4c:	f3 81       	ldd	r31, Z+3	; 0x03
     a4e:	e0 2d       	mov	r30, r0
     a50:	4a e0       	ldi	r20, 0x0A	; 10
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	63 e9       	ldi	r22, 0x93	; 147
     a56:	74 e0       	ldi	r23, 0x04	; 4
     a58:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     a5a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
     a5e:	60 93 81 04 	sts	0x0481, r22	; 0x800481 <myDFPlayer+0x2>
     a62:	70 93 82 04 	sts	0x0482, r23	; 0x800482 <myDFPlayer+0x3>
     a66:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <myDFPlayer+0x4>
     a6a:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     a6e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <myDFPlayer+0x18>
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	81 11       	cpse	r24, r1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]+0x9e>
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     a7e:	81 11       	cpse	r24, r1
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     a82:	6a e0       	ldi	r22, 0x0A	; 10
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <delay>
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.59():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     a8e:	08 95       	ret

00000a90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>:
_ZN19DFRobotDFPlayerMini10playFolderEhh.constprop.24():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     a90:	78 2f       	mov	r23, r24
     a92:	8f e0       	ldi	r24, 0x0F	; 15
     a94:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>

00000a98 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     a98:	08 95       	ret

00000a9a <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     a9a:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
     a9e:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	71 f4       	brne	.+28     	; 0xac4 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     aa8:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     aac:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
     ab0:	98 17       	cp	r25, r24
     ab2:	41 f0       	breq	.+16     	; 0xac4 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     ab4:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ec 57       	subi	r30, 0x7C	; 124
     abc:	fd 4f       	sbci	r31, 0xFD	; 253
     abe:	80 81       	ld	r24, Z
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     ac8:	08 95       	ret

00000aca <SoftwareSerial::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     aca:	08 95       	ret

00000acc <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     ada:	5c 96       	adiw	r26, 0x1c	; 28
     adc:	ed 90       	ld	r14, X+
     ade:	fc 90       	ld	r15, X
     ae0:	5d 97       	sbiw	r26, 0x1d	; 29
     ae2:	e1 14       	cp	r14, r1
     ae4:	f1 04       	cpc	r15, r1
     ae6:	79 f4       	brne	.+30     	; 0xb06 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     b06:	51 96       	adiw	r26, 0x11	; 17
     b08:	ed 91       	ld	r30, X+
     b0a:	fc 91       	ld	r31, X
     b0c:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     b0e:	50 96       	adiw	r26, 0x10	; 16
     b10:	8c 91       	ld	r24, X
     b12:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     b14:	98 2f       	mov	r25, r24
     b16:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     b18:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     b1a:	5e 96       	adiw	r26, 0x1e	; 30
     b1c:	2c 91       	ld	r18, X
     b1e:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     b20:	12 2f       	mov	r17, r18
     b22:	12 70       	andi	r17, 0x02	; 2
     b24:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     b26:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     b28:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     b2a:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     b2c:	11 23       	and	r17, r17
     b2e:	19 f1       	breq	.+70     	; 0xb76 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     b30:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     b32:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b34:	e7 01       	movw	r28, r14
     b36:	21 97       	sbiw	r28, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <SoftwareSerial::write(unsigned char)+0x6a>
     b3a:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b3c:	46 2f       	mov	r20, r22
     b3e:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b40:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b42:	60 ff       	sbrs	r22, 0
     b44:	1a c0       	rjmp	.+52     	; 0xb7a <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b46:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     b48:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b4a:	e7 01       	movw	r28, r14
     b4c:	21 97       	sbiw	r28, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     b50:	ba 01       	movw	r22, r20
     b52:	75 95       	asr	r23
     b54:	67 95       	ror	r22
     b56:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     b58:	89 f7       	brne	.-30     	; 0xb3c <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     b5a:	11 23       	and	r17, r17
     b5c:	81 f0       	breq	.+32     	; 0xb7e <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     b5e:	80 81       	ld	r24, Z
     b60:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     b62:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     b64:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b66:	5c 96       	adiw	r26, 0x1c	; 28
     b68:	8d 91       	ld	r24, X+
     b6a:	9c 91       	ld	r25, X
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	c1 cf       	rjmp	.-126    	; 0xaf8 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     b76:	29 23       	and	r18, r25
     b78:	dc cf       	rjmp	.-72     	; 0xb32 <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     b7a:	39 23       	and	r19, r25
     b7c:	e5 cf       	rjmp	.-54     	; 0xb48 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     b7e:	90 81       	ld	r25, Z
     b80:	89 2b       	or	r24, r25
     b82:	ef cf       	rjmp	.-34     	; 0xb62 <SoftwareSerial::write(unsigned char)+0x96>

00000b84 <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     b84:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
     b88:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	71 f4       	brne	.+28     	; 0xbae <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     b92:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
     b96:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	80 5c       	subi	r24, 0xC0	; 192
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	82 1b       	sub	r24, r18
     ba2:	91 09       	sbc	r25, r1
     ba4:	60 e4       	ldi	r22, 0x40	; 64
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 a0 21 	call	0x4340	; 0x4340 <__divmodhi4>
     bac:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     bb2:	08 95       	ret

00000bb4 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     bb4:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
     bb8:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	b9 f4       	brne	.+46     	; 0xbf0 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     bc2:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     bc6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
     bca:	98 17       	cp	r25, r24
     bcc:	89 f0       	breq	.+34     	; 0xbf0 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     bce:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ec 57       	subi	r30, 0x7C	; 124
     bd6:	fd 4f       	sbci	r31, 0xFD	; 253
     bd8:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     bda:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	2f 5f       	subi	r18, 0xFF	; 255
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	2f 73       	andi	r18, 0x3F	; 63
     be6:	33 27       	eor	r19, r19
     be8:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     bf4:	08 95       	ret

00000bf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j.part.1():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:95
 *            ensure the content of this buffer doesn't change.
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ea 01       	movw	r28, r20
     bfe:	12 2f       	mov	r17, r18
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:121
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
     c00:	dc 01       	movw	r26, r24
     c02:	11 96       	adiw	r26, 0x01	; 1
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	dc 01       	movw	r26, r24
     c0a:	ed 91       	ld	r30, X+
     c0c:	fc 91       	ld	r31, X
     c0e:	02 80       	ldd	r0, Z+2	; 0x02
     c10:	f3 81       	ldd	r31, Z+3	; 0x03
     c12:	e0 2d       	mov	r30, r0
     c14:	09 95       	icall
     c16:	c8 17       	cp	r28, r24
     c18:	d9 07       	cpc	r29, r25
     c1a:	29 f4       	brne	.+10     	; 0xc26 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]+0x30>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
     c1c:	81 2f       	mov	r24, r17
     c1e:	0e 94 c0 01 	call	0x380	; 0x380 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	81 11       	cpse	r24, r1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:125
  // Write the data itself
  if (_wire->write(buffer, len) != len) {
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice failed to write"));
#endif
    return false;
     c26:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:166
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     c28:	89 2f       	mov	r24, r25
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	08 95       	ret

00000c32 <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:62
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	88 23       	and	r24, r24
     c3c:	a1 f0       	breq	.+40     	; 0xc66 <Adafruit_I2CDevice::detected()+0x34>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:69
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
     c3e:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     c46:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c4a:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     c4e:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 c0 01 	call	0x380	; 0x380 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:70
  if (_wire->endTransmission() == 0) {
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	81 11       	cpse	r24, r1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:80
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
     c5e:	89 2f       	mov	r24, r25
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
     c66:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.43]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 19 06 	call	0xc32	; 0xc32 <Adafruit_I2CDevice::detected()>
     c74:	98 2f       	mov	r25, r24
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     c76:	81 11       	cpse	r24, r1
     c78:	e2 cf       	rjmp	.-60     	; 0xc3e <Adafruit_I2CDevice::detected()+0xc>
     c7a:	f1 cf       	rjmp	.-30     	; 0xc5e <Adafruit_I2CDevice::detected()+0x2c>

00000c7c <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     c7c:	85 ed       	ldi	r24, 0xD5	; 213
     c7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     c82:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c86:	84 fd       	sbrc	r24, 4
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     c8a:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     c8e:	08 95       	ret

00000c90 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     c90:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <twi_txBufferLength>
     c94:	26 0f       	add	r18, r22
     c96:	33 27       	eor	r19, r19
     c98:	33 1f       	adc	r19, r19
     c9a:	21 32       	cpi	r18, 0x21	; 33
     c9c:	31 05       	cpc	r19, r1
     c9e:	ec f4       	brge	.+58     	; 0xcda <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     ca0:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <twi_state>
     ca4:	fc 01       	movw	r30, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	24 30       	cpi	r18, 0x04	; 4
     cac:	69 f0       	breq	.+26     	; 0xcc8 <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     cae:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     cb0:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     cb2:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <twi_txBufferLength>
     cb6:	21 91       	ld	r18, Z+
     cb8:	ac 01       	movw	r20, r24
     cba:	4f 5b       	subi	r20, 0xBF	; 191
     cbc:	5d 4f       	sbci	r21, 0xFD	; 253
     cbe:	a4 0f       	add	r26, r20
     cc0:	b5 2f       	mov	r27, r21
     cc2:	b1 1d       	adc	r27, r1
     cc4:	2c 93       	st	X, r18
     cc6:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     cc8:	86 17       	cp	r24, r22
     cca:	98 f3       	brcs	.-26     	; 0xcb2 <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     ccc:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
     cd0:	68 0f       	add	r22, r24
     cd2:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <twi_txBufferLength>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	08 95       	ret

00000cde <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     cde:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <TwoWire::rxBufferIndex>
     ce2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <TwoWire::rxBufferLength>
     ce6:	e8 17       	cp	r30, r24
     ce8:	30 f4       	brcc	.+12     	; 0xcf6 <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	e0 59       	subi	r30, 0x90	; 144
     cee:	fc 4f       	sbci	r31, 0xFC	; 252
     cf0:	80 81       	ld	r24, Z
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     cfa:	08 95       	ret

00000cfc <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     cfc:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <TwoWire::rxBufferIndex>
     d00:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     d08:	98 17       	cp	r25, r24
     d0a:	48 f4       	brcc	.+18     	; 0xd1e <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     d0c:	e9 2f       	mov	r30, r25
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e0 59       	subi	r30, 0x90	; 144
     d12:	fc 4f       	sbci	r31, 0xFC	; 252
     d14:	20 81       	ld	r18, Z
     d16:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     d18:	9f 5f       	subi	r25, 0xFF	; 255
     d1a:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     d1e:	c9 01       	movw	r24, r18
     d20:	08 95       	ret

00000d22 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     d22:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <TwoWire::rxBufferLength>
     d26:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     d2a:	89 1b       	sub	r24, r25
     d2c:	99 0b       	sbc	r25, r25
     d2e:	08 95       	ret

00000d30 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	7c 01       	movw	r14, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     d46:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <TwoWire::transmitting>
     d4a:	22 23       	and	r18, r18
     d4c:	89 f0       	breq	.+34     	; 0xd70 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     d4e:	eb 01       	movw	r28, r22
     d50:	6b 01       	movw	r12, r22
     d52:	c4 0e       	add	r12, r20
     d54:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     d56:	cc 15       	cp	r28, r12
     d58:	dd 05       	cpc	r29, r13
     d5a:	69 f0       	breq	.+26     	; 0xd76 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     d5c:	69 91       	ld	r22, Y+
     d5e:	d7 01       	movw	r26, r14
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	01 90       	ld	r0, Z+
     d66:	f0 81       	ld	r31, Z
     d68:	e0 2d       	mov	r30, r0
     d6a:	c7 01       	movw	r24, r14
     d6c:	09 95       	icall
     d6e:	f3 cf       	rjmp	.-26     	; 0xd56 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     d70:	64 2f       	mov	r22, r20
     d72:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     d76:	c8 01       	movw	r24, r16
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	08 95       	ret

00000d8a <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	1f 92       	push	r1
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     d96:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <TwoWire::transmitting>
     d9a:	22 23       	and	r18, r18
     d9c:	f9 f0       	breq	.+62     	; 0xddc <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     d9e:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <TwoWire::txBufferLength>
     da2:	20 32       	cpi	r18, 0x20	; 32
     da4:	58 f0       	brcs	.+22     	; 0xdbc <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	33 83       	std	Z+3, r19	; 0x03
     dae:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     db4:	0f 90       	pop	r0
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     dbc:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <TwoWire::txBufferIndex>
     dc0:	e8 2f       	mov	r30, r24
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	e7 54       	subi	r30, 0x47	; 71
     dc6:	fc 4f       	sbci	r31, 0xFC	; 252
     dc8:	99 81       	ldd	r25, Y+1	; 0x01
     dca:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     dd2:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	ec cf       	rjmp	.-40     	; 0xdb4 <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_transmit>
     de6:	f7 cf       	rjmp	.-18     	; 0xdd6 <TwoWire::write(unsigned char)+0x4c>

00000de8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     de8:	fc 01       	movw	r30, r24
     dea:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     dec:	31 e0       	ldi	r19, 0x01	; 1
     dee:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     df2:	20 93 d9 03 	sts	0x03D9, r18	; 0x8003d9 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     df6:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     dfa:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     dfe:	83 85       	ldd	r24, Z+11	; 0x0b
     e00:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     e02:	89 e1       	ldi	r24, 0x19	; 25
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	0e 94 c5 06 	call	0xd8a	; 0xd8a <TwoWire::write(unsigned char)>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	0c 94 c0 01 	jmp	0x380	; 0x380 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>

00000e10 <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	8c 01       	movw	r16, r24
     e18:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     e1a:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     e1e:	6c 2f       	mov	r22, r28
     e20:	64 60       	ori	r22, 0x04	; 4
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     e30:	6c 2f       	mov	r22, r28
     e32:	6b 7f       	andi	r22, 0xFB	; 251
     e34:	c8 01       	movw	r24, r16
     e36:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     e3a:	82 e3       	ldi	r24, 0x32	; 50
     e3c:	90 e0       	ldi	r25, 0x00	; 0
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     e44:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <delayMicroseconds>

00000e48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	8c 01       	movw	r16, r24
     e52:	d6 2f       	mov	r29, r22
     e54:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     e56:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     e58:	64 2b       	or	r22, r20
     e5a:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     e5e:	80 e1       	ldi	r24, 0x10	; 16
     e60:	d8 9f       	mul	r29, r24
     e62:	b0 01       	movw	r22, r0
     e64:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     e66:	6c 2b       	or	r22, r28
     e68:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     e72:	0c 94 08 07 	jmp	0xe10	; 0xe10 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000e76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>:
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	28 97       	sbiw	r28, 0x08	; 8
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     e8a:	98 e0       	ldi	r25, 0x08	; 8
     e8c:	ef e0       	ldi	r30, 0x0F	; 15
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	de 01       	movw	r26, r28
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	01 90       	ld	r0, Z+
     e96:	0d 92       	st	X+, r0
     e98:	9a 95       	dec	r25
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     e9c:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <lcd+0x8>
     ea0:	96 17       	cp	r25, r22
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     ea6:	26 2f       	mov	r18, r22
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	4c 0f       	add	r20, r28
     eb4:	5d 1f       	adc	r21, r29
     eb6:	24 0f       	add	r18, r20
     eb8:	35 1f       	adc	r19, r21
     eba:	f9 01       	movw	r30, r18
     ebc:	60 81       	ld	r22, Z
     ebe:	68 0f       	add	r22, r24
     ec0:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	83 e7       	ldi	r24, 0x73	; 115
     ec6:	94 e0       	ldi	r25, 0x04	; 4
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     ec8:	28 96       	adiw	r28, 0x08	; 8
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     ed8:	0c 94 24 07 	jmp	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00000edc <LiquidCrystal_I2C::clear() [clone .constprop.65]>:
_ZN17LiquidCrystal_I2C5clearEv.constprop.65():
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	83 e7       	ldi	r24, 0x73	; 115
     ee2:	94 e0       	ldi	r25, 0x04	; 4
     ee4:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
     ee8:	80 ed       	ldi	r24, 0xD0	; 208
     eea:	97 e0       	ldi	r25, 0x07	; 7
     eec:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <delayMicroseconds>

00000ef0 <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	08 95       	ret

00000efc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.55():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     f0a:	f8 01       	movw	r30, r16
     f0c:	ec 0f       	add	r30, r28
     f0e:	fd 1f       	adc	r31, r29
     f10:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     f12:	66 23       	and	r22, r22
     f14:	39 f0       	breq	.+14     	; 0xf24 <Print::print(__FlashStringHelper const*) [clone .constprop.55]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	83 e7       	ldi	r24, 0x73	; 115
     f1a:	94 e0       	ldi	r25, 0x04	; 4
     f1c:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
_ZN5Print5printEPK19__FlashStringHelper.constprop.55():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     f20:	21 96       	adiw	r28, 0x01	; 1
     f22:	f3 cf       	rjmp	.-26     	; 0xf0a <Print::print(__FlashStringHelper const*) [clone .constprop.55]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     f24:	ce 01       	movw	r24, r28
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	08 95       	ret

00000f30 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 95       	ret

00000f36 <queueButton(unsigned char)>:
_Z11queueButtonh():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:152

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
     f36:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <buttonBufferCount>
     f3a:	25 30       	cpi	r18, 0x05	; 5
     f3c:	09 f0       	breq	.+2      	; 0xf40 <queueButton(unsigned char)+0xa>
     f3e:	90 f4       	brcc	.+36     	; 0xf64 <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:154
  {
    buttonBuffer [button_write_pos] = button;
     f40:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__data_end>
     f44:	e9 2f       	mov	r30, r25
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	ed 5f       	subi	r30, 0xFD	; 253
     f4a:	fc 4f       	sbci	r31, 0xFC	; 252
     f4c:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:155
    buttonBufferCount++;
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:156
    button_write_pos++;
     f54:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:158
    
    if (button_write_pos >= sizeof (buttonBuffer))
     f56:	95 30       	cpi	r25, 0x05	; 5
     f58:	18 f4       	brcc	.+6      	; 0xf60 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:156
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
     f5a:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <__data_end>
     f5e:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:160
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
     f60:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:163
    }
  }
}
     f64:	08 95       	ret

00000f66 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]>:
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:176
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
     f66:	2f 92       	push	r2
     f68:	3f 92       	push	r3
     f6a:	4f 92       	push	r4
     f6c:	5f 92       	push	r5
     f6e:	6f 92       	push	r6
     f70:	7f 92       	push	r7
     f72:	8f 92       	push	r8
     f74:	9f 92       	push	r9
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	6c 01       	movw	r12, r24
     f8c:	3b 01       	movw	r6, r22
     f8e:	7a 01       	movw	r14, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:177
  size_t pos = 0;
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	00 e0       	ldi	r16, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
  }
  twi_state = TWI_MRX;
     f94:	55 24       	eor	r5, r5
     f96:	53 94       	inc	r5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     f98:	44 24       	eor	r4, r4
     f9a:	4a 94       	dec	r4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     f9c:	85 ee       	ldi	r24, 0xE5	; 229
     f9e:	38 2e       	mov	r3, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     fa0:	95 ec       	ldi	r25, 0xC5	; 197
     fa2:	29 2e       	mov	r2, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     fa4:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_state>
     fa8:	81 11       	cpse	r24, r1
     faa:	fc cf       	rjmp	.-8      	; 0xfa4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x3e>
     fac:	d6 01       	movw	r26, r12
     fae:	14 96       	adiw	r26, 0x04	; 4
     fb0:	8d 91       	ld	r24, X+
     fb2:	9c 91       	ld	r25, X
     fb4:	e7 01       	movw	r28, r14
     fb6:	c0 1b       	sub	r28, r16
     fb8:	d1 0b       	sbc	r29, r17
     fba:	8c 17       	cp	r24, r28
     fbc:	9d 07       	cpc	r25, r29
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x5c>
     fc0:	ec 01       	movw	r28, r24
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:195
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
     fc2:	f6 01       	movw	r30, r12
     fc4:	90 81       	ld	r25, Z
     fc6:	8c 2f       	mov	r24, r28
     fc8:	c1 32       	cpi	r28, 0x21	; 33
     fca:	08 f0       	brcs	.+2      	; 0xfce <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x68>
     fcc:	80 e2       	ldi	r24, 0x20	; 32
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
     fce:	50 92 b6 03 	sts	0x03B6, r5	; 0x8003b6 <twi_state>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:181
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	97 01       	movw	r18, r14
     fd6:	2c 1b       	sub	r18, r28
     fd8:	3d 0b       	sbc	r19, r29
     fda:	02 17       	cp	r16, r18
     fdc:	13 07       	cpc	r17, r19
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x7c>
     fe0:	40 e0       	ldi	r20, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
     fe2:	40 93 b5 03 	sts	0x03B5, r20	; 0x8003b5 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     fe6:	40 92 b4 03 	sts	0x03B4, r4	; 0x8003b4 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     fea:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     fee:	2f ef       	ldi	r18, 0xFF	; 255
     ff0:	28 0f       	add	r18, r24
     ff2:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     ff6:	50 92 91 03 	sts	0x0391, r5	; 0x800391 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
     ffa:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <twi_slarw>
     ffe:	99 0f       	add	r25, r25
    1000:	92 2b       	or	r25, r18
    1002:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    1006:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <twi_inRepStart>
    100a:	91 30       	cpi	r25, 0x01	; 1
    100c:	e9 f5       	brne	.+122    	; 0x1088 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x122>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    100e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
    1012:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <twi_slarw>
    1016:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    101a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    101e:	93 fd       	sbrc	r25, 3
    1020:	f8 cf       	rjmp	.-16     	; 0x1012 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xac>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1022:	20 92 bc 00 	sts	0x00BC, r2	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1026:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <twi_state>
    102a:	91 30       	cpi	r25, 0x01	; 1
    102c:	e1 f3       	breq	.-8      	; 0x1026 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    102e:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    1032:	98 17       	cp	r25, r24
    1034:	10 f4       	brcc	.+4      	; 0x103a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xd4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    1036:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    103a:	a2 e9       	ldi	r26, 0x92	; 146
    103c:	b3 e0       	ldi	r27, 0x03	; 3
    103e:	e0 e7       	ldi	r30, 0x70	; 112
    1040:	f3 e0       	ldi	r31, 0x03	; 3
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1042:	90 e0       	ldi	r25, 0x00	; 0
twi_readFrom():
    1044:	98 13       	cpse	r25, r24
    1046:	23 c0       	rjmp	.+70     	; 0x108e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x128>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1048:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    104c:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <TwoWire::rxBufferLength>
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:198
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
#endif

  if (recv != len) {
    1050:	9c 17       	cp	r25, r28
    1052:	1d 06       	cpc	r1, r29
    1054:	d1 f5       	brne	.+116    	; 0x10ca <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x164>
    1056:	43 01       	movw	r8, r6
    1058:	80 0e       	add	r8, r16
    105a:	91 1e       	adc	r9, r17
    105c:	54 01       	movw	r10, r8
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    105e:	c5 01       	movw	r24, r10
    1060:	88 19       	sub	r24, r8
    1062:	99 09       	sbc	r25, r9
    1064:	8c 17       	cp	r24, r28
    1066:	9d 07       	cpc	r25, r29
    1068:	b0 f4       	brcc	.+44     	; 0x1096 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x130>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:208
    buffer[i] = _wire->read();
    106a:	d6 01       	movw	r26, r12
    106c:	11 96       	adiw	r26, 0x01	; 1
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	dc 01       	movw	r26, r24
    1074:	ed 91       	ld	r30, X+
    1076:	fc 91       	ld	r31, X
    1078:	02 84       	ldd	r0, Z+10	; 0x0a
    107a:	f3 85       	ldd	r31, Z+11	; 0x0b
    107c:	e0 2d       	mov	r30, r0
    107e:	09 95       	icall
    1080:	f5 01       	movw	r30, r10
    1082:	81 93       	st	Z+, r24
    1084:	5f 01       	movw	r10, r30
    1086:	eb cf       	rjmp	.-42     	; 0x105e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xf8>
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1088:	30 92 bc 00 	sts	0x00BC, r3	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    108c:	cc cf       	rjmp	.-104    	; 0x1026 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    108e:	2d 91       	ld	r18, X+
    1090:	21 93       	st	Z+, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1092:	9f 5f       	subi	r25, 0xFF	; 255
    1094:	d7 cf       	rjmp	.-82     	; 0x1044 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xde>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:184
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
    1096:	0c 0f       	add	r16, r28
    1098:	1d 1f       	adc	r17, r29
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    109a:	0e 15       	cp	r16, r14
    109c:	1f 05       	cpc	r17, r15
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x13c>
    10a0:	81 cf       	rjmp	.-254    	; 0xfa4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x3e>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:186
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:187
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	8f 90       	pop	r8
    10bc:	7f 90       	pop	r7
    10be:	6f 90       	pop	r6
    10c0:	5f 90       	pop	r5
    10c2:	4f 90       	pop	r4
    10c4:	3f 90       	pop	r3
    10c6:	2f 90       	pop	r2
    10c8:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:183
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	eb cf       	rjmp	.-42     	; 0x10a4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x13e>

000010ce <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>:
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:37
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	28 97       	sbiw	r28, 0x08	; 8
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	dc 01       	movw	r26, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:38
  uint8_t buffer[8] = {0,
    10e8:	8e 01       	movw	r16, r28
    10ea:	0f 5f       	subi	r16, 0xFF	; 255
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	86 e0       	ldi	r24, 0x06	; 6
    10f0:	f8 01       	movw	r30, r16
    10f2:	11 92       	st	Z+, r1
    10f4:	8a 95       	dec	r24
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]+0x24>
    10f8:	15 96       	adiw	r26, 0x05	; 5
    10fa:	3c 91       	ld	r19, X
    10fc:	15 97       	sbiw	r26, 0x05	; 5
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    10fe:	2a e0       	ldi	r18, 0x0A	; 10
    1100:	83 2f       	mov	r24, r19
    1102:	62 2f       	mov	r22, r18
    1104:	0e 94 80 21 	call	0x4300	; 0x4300 <__udivmodqi4>
    1108:	98 2f       	mov	r25, r24
    110a:	88 0f       	add	r24, r24
    110c:	89 0f       	add	r24, r25
    110e:	88 0f       	add	r24, r24
    1110:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       0,
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	14 96       	adiw	r26, 0x04	; 4
    1116:	3c 91       	ld	r19, X
    1118:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    111a:	83 2f       	mov	r24, r19
    111c:	0e 94 80 21 	call	0x4300	; 0x4300 <__udivmodqi4>
    1120:	98 2f       	mov	r25, r24
    1122:	88 0f       	add	r24, r24
    1124:	89 0f       	add	r24, r25
    1126:	88 0f       	add	r24, r24
    1128:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	13 96       	adiw	r26, 0x03	; 3
    112e:	3c 91       	ld	r19, X
    1130:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1132:	83 2f       	mov	r24, r19
    1134:	0e 94 80 21 	call	0x4300	; 0x4300 <__udivmodqi4>
    1138:	98 2f       	mov	r25, r24
    113a:	88 0f       	add	r24, r24
    113c:	89 0f       	add	r24, r25
    113e:	88 0f       	add	r24, r24
    1140:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1142:	8c 83       	std	Y+4, r24	; 0x04
    1144:	12 96       	adiw	r26, 0x02	; 2
    1146:	3c 91       	ld	r19, X
    1148:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    114a:	83 2f       	mov	r24, r19
    114c:	0e 94 80 21 	call	0x4300	; 0x4300 <__udivmodqi4>
    1150:	98 2f       	mov	r25, r24
    1152:	88 0f       	add	r24, r24
    1154:	89 0f       	add	r24, r25
    1156:	88 0f       	add	r24, r24
    1158:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	11 96       	adiw	r26, 0x01	; 1
    115e:	3c 91       	ld	r19, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1162:	83 2f       	mov	r24, r19
    1164:	0e 94 80 21 	call	0x4300	; 0x4300 <__udivmodqi4>
    1168:	98 2f       	mov	r25, r24
    116a:	88 0f       	add	r24, r24
    116c:	89 0f       	add	r24, r25
    116e:	88 0f       	add	r24, r24
    1170:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1172:	8f 83       	std	Y+7, r24	; 0x07
    1174:	3c 91       	ld	r19, X
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1176:	83 2f       	mov	r24, r19
    1178:	0e 94 80 21 	call	0x4300	; 0x4300 <__udivmodqi4>
    117c:	98 2f       	mov	r25, r24
    117e:	88 0f       	add	r24, r24
    1180:	89 0f       	add	r24, r25
    1182:	88 0f       	add	r24, r24
    1184:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1186:	88 87       	std	Y+8, r24	; 0x08
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:46
  i2c_dev->write(buffer, 8);
    1188:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <rtc>
    118c:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    1190:	fc 01       	movw	r30, r24
    1192:	24 81       	ldd	r18, Z+4	; 0x04
    1194:	35 81       	ldd	r19, Z+5	; 0x05
    1196:	28 30       	cpi	r18, 0x08	; 8
    1198:	31 05       	cpc	r19, r1
    119a:	80 f0       	brcs	.+32     	; 0x11bc <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]+0xee>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    119c:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    11a4:	20 93 d9 03 	sts	0x03D9, r18	; 0x8003d9 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    11a8:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    11ac:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
write():
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	48 e0       	ldi	r20, 0x08	; 8
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	b8 01       	movw	r22, r16
    11b8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:47
}
    11bc:	28 96       	adiw	r28, 0x08	; 8
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <RTC_DS1307::now() [clone .constprop.79]>:
_ZN10RTC_DS13073nowEv.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:55
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <RTC_DS1307::now() [clone .constprop.79]+0xe>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <RTC_DS1307::now() [clone .constprop.79]+0x10>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <RTC_DS1307::now() [clone .constprop.79]+0x12>
    11e4:	1f 92       	push	r1
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	8c 01       	movw	r16, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:57
  uint8_t buffer[7];
  buffer[0] = 0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:58
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    11ee:	e0 90 6c 03 	lds	r14, 0x036C	; 0x80036c <rtc>
    11f2:	f0 90 6d 03 	lds	r15, 0x036D	; 0x80036d <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    11f6:	d7 01       	movw	r26, r14
    11f8:	14 96       	adiw	r26, 0x04	; 4
    11fa:	8d 91       	ld	r24, X+
    11fc:	9c 91       	ld	r25, X
    11fe:	15 97       	sbiw	r26, 0x05	; 5
    1200:	89 2b       	or	r24, r25
    1202:	e9 f0       	breq	.+58     	; 0x123e <RTC_DS1307::now() [clone .constprop.79]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1204:	8c 91       	ld	r24, X
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    120c:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1210:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    1214:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
write():
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	41 e0       	ldi	r20, 0x01	; 1
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	be 01       	movw	r22, r28
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	c7 01       	movw	r24, r14
    1226:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
write_then_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:243
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    122a:	88 23       	and	r24, r24
    122c:	41 f0       	breq	.+16     	; 0x123e <RTC_DS1307::now() [clone .constprop.79]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
    return false;
  }

  return read(read_buffer, read_len);
    122e:	47 e0       	ldi	r20, 0x07	; 7
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	be 01       	movw	r22, r28
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	c7 01       	movw	r24, r14
    123a:	0e 94 b3 07 	call	0xf66	; 0xf66 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]>
_ZN10RTC_DS13073nowEv.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:62

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    123e:	e9 81       	ldd	r30, Y+1	; 0x01
    1240:	ef 77       	andi	r30, 0x7F	; 127
    1242:	fa 81       	ldd	r31, Y+2	; 0x02
    1244:	fb 80       	ldd	r15, Y+3	; 0x03
    1246:	4d 81       	ldd	r20, Y+5	; 0x05
    1248:	5e 81       	ldd	r21, Y+6	; 0x06
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:60
DateTime RTC_DS1307::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
  i2c_dev->write_then_read(buffer, 1, buffer, 7);

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
      @brief  Convert a binary coded decimal value to binary. RTC stores
    time/date values as BCD.
      @param val BCD value
      @return Binary value
  */
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	35 95       	asr	r19
    1254:	27 95       	ror	r18
    1256:	9a 95       	dec	r25
    1258:	e1 f7       	brne	.-8      	; 0x1252 <RTC_DS1307::now() [clone .constprop.79]+0x80>
    125a:	92 2f       	mov	r25, r18
    125c:	99 0f       	add	r25, r25
    125e:	99 0f       	add	r25, r25
    1260:	29 1b       	sub	r18, r25
    1262:	22 0f       	add	r18, r18
    1264:	28 0f       	add	r18, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    1266:	d8 01       	movw	r26, r16
    1268:	2c 93       	st	X, r18
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    126a:	85 2f       	mov	r24, r21
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	24 e0       	ldi	r18, 0x04	; 4
    1270:	95 95       	asr	r25
    1272:	87 95       	ror	r24
    1274:	2a 95       	dec	r18
    1276:	e1 f7       	brne	.-8      	; 0x1270 <RTC_DS1307::now() [clone .constprop.79]+0x9e>
    1278:	98 2f       	mov	r25, r24
    127a:	99 0f       	add	r25, r25
    127c:	99 0f       	add	r25, r25
    127e:	89 1b       	sub	r24, r25
    1280:	88 0f       	add	r24, r24
    1282:	85 0f       	add	r24, r21
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	8c 93       	st	X, r24
    1288:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    128a:	64 2f       	mov	r22, r20
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	34 e0       	ldi	r19, 0x04	; 4
    1290:	75 95       	asr	r23
    1292:	67 95       	ror	r22
    1294:	3a 95       	dec	r19
    1296:	e1 f7       	brne	.-8      	; 0x1290 <RTC_DS1307::now() [clone .constprop.79]+0xbe>
    1298:	86 2f       	mov	r24, r22
    129a:	88 0f       	add	r24, r24
    129c:	88 0f       	add	r24, r24
    129e:	68 1b       	sub	r22, r24
    12a0:	66 0f       	add	r22, r22
    12a2:	64 0f       	add	r22, r20
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	6c 93       	st	X, r22
    12a8:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    12aa:	4f 2d       	mov	r20, r15
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	64 e0       	ldi	r22, 0x04	; 4
    12b0:	55 95       	asr	r21
    12b2:	47 95       	ror	r20
    12b4:	6a 95       	dec	r22
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <RTC_DS1307::now() [clone .constprop.79]+0xde>
    12b8:	84 2f       	mov	r24, r20
    12ba:	88 0f       	add	r24, r24
    12bc:	88 0f       	add	r24, r24
    12be:	48 1b       	sub	r20, r24
    12c0:	44 0f       	add	r20, r20
    12c2:	4f 0d       	add	r20, r15
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	4c 93       	st	X, r20
    12c8:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    12ca:	2f 2f       	mov	r18, r31
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	74 e0       	ldi	r23, 0x04	; 4
    12d0:	35 95       	asr	r19
    12d2:	27 95       	ror	r18
    12d4:	7a 95       	dec	r23
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <RTC_DS1307::now() [clone .constprop.79]+0xfe>
    12d8:	82 2f       	mov	r24, r18
    12da:	88 0f       	add	r24, r24
    12dc:	88 0f       	add	r24, r24
    12de:	28 1b       	sub	r18, r24
    12e0:	22 0f       	add	r18, r18
    12e2:	2f 0f       	add	r18, r31
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    12e4:	14 96       	adiw	r26, 0x04	; 4
    12e6:	2c 93       	st	X, r18
    12e8:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    12ea:	8e 2f       	mov	r24, r30
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	f4 e0       	ldi	r31, 0x04	; 4
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	fa 95       	dec	r31
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <RTC_DS1307::now() [clone .constprop.79]+0x11e>
    12f8:	98 2f       	mov	r25, r24
    12fa:	99 0f       	add	r25, r25
    12fc:	99 0f       	add	r25, r25
    12fe:	89 1b       	sub	r24, r25
    1300:	88 0f       	add	r24, r24
    1302:	8e 0f       	add	r24, r30
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    1304:	15 96       	adiw	r26, 0x05	; 5
    1306:	8c 93       	st	X, r24
_ZN10RTC_DS13073nowEv.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:63
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
}
    1308:	c8 01       	movw	r24, r16
    130a:	27 96       	adiw	r28, 0x07	; 7
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	08 95       	ret

00001324 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    132a:	88 81       	ld	r24, Y
    132c:	99 81       	ldd	r25, Y+1	; 0x01
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	11 f0       	breq	.+4      	; 0x1336 <String::invalidate()+0x12>
    1332:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    1336:	19 82       	std	Y+1, r1	; 0x01
    1338:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    133a:	1d 82       	std	Y+5, r1	; 0x05
    133c:	1c 82       	std	Y+4, r1	; 0x04
    133e:	1b 82       	std	Y+3, r1	; 0x03
    1340:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>:
_ZN5Print11printNumberEmh.constprop.10():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	a1 97       	sbiw	r28, 0x21	; 33
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1368:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    136a:	42 30       	cpi	r20, 0x02	; 2
    136c:	08 f4       	brcc	.+2      	; 0x1370 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x28>
    136e:	4a e0       	ldi	r20, 0x0A	; 10
    1370:	8e 01       	movw	r16, r28
    1372:	0f 5d       	subi	r16, 0xDF	; 223
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    1376:	84 2e       	mov	r8, r20
    1378:	91 2c       	mov	r9, r1
    137a:	b1 2c       	mov	r11, r1
    137c:	a1 2c       	mov	r10, r1
    137e:	a5 01       	movw	r20, r10
    1380:	94 01       	movw	r18, r8
    1382:	0e 94 4f 21 	call	0x429e	; 0x429e <__udivmodsi4>
    1386:	e6 2f       	mov	r30, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    1388:	b9 01       	movw	r22, r18
    138a:	ca 01       	movw	r24, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    138c:	ea 30       	cpi	r30, 0x0A	; 10
    138e:	44 f5       	brge	.+80     	; 0x13e0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x98>
    1390:	e0 5d       	subi	r30, 0xD0	; 208
    1392:	d8 01       	movw	r26, r16
    1394:	ee 93       	st	-X, r30
    1396:	8d 01       	movw	r16, r26
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    1398:	23 2b       	or	r18, r19
    139a:	24 2b       	or	r18, r20
    139c:	25 2b       	or	r18, r21
    139e:	79 f7       	brne	.-34     	; 0x137e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	80 e0       	ldi	r24, 0x00	; 0
write():
    13a4:	10 97       	sbiw	r26, 0x00	; 0
    13a6:	69 f0       	breq	.+26     	; 0x13c2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x7a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    13a8:	fd 01       	movw	r30, r26
    13aa:	01 90       	ld	r0, Z+
    13ac:	00 20       	and	r0, r0
    13ae:	e9 f7       	brne	.-6      	; 0x13aa <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x62>
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	af 01       	movw	r20, r30
    13b4:	4a 1b       	sub	r20, r26
    13b6:	5b 0b       	sbc	r21, r27
    13b8:	bd 01       	movw	r22, r26
    13ba:	83 e7       	ldi	r24, 0x73	; 115
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Print::write(unsigned char const*, unsigned int)>
_ZN5Print11printNumberEmh.constprop.10():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    13c2:	a1 96       	adiw	r28, 0x21	; 33
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    13e0:	e9 5c       	subi	r30, 0xC9	; 201
    13e2:	d7 cf       	rjmp	.-82     	; 0x1392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x4a>

000013e4 <Print::print(int, int) [clone .constprop.6]>:
_ZN5Print5printEii.constprop.6():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    13ec:	6c 01       	movw	r12, r24
    13ee:	99 0f       	add	r25, r25
    13f0:	ee 08       	sbc	r14, r14
    13f2:	ff 08       	sbc	r15, r15
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    13f4:	f7 fe       	sbrs	r15, 7
    13f6:	16 c0       	rjmp	.+44     	; 0x1424 <Print::print(int, int) [clone .constprop.6]+0x40>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	6d e2       	ldi	r22, 0x2D	; 45
    13fc:	83 e7       	ldi	r24, 0x73	; 115
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    1404:	66 27       	eor	r22, r22
    1406:	77 27       	eor	r23, r23
    1408:	cb 01       	movw	r24, r22
    140a:	6c 19       	sub	r22, r12
    140c:	7d 09       	sbc	r23, r13
    140e:	8e 09       	sbc	r24, r14
    1410:	9f 09       	sbc	r25, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1412:	4a e0       	ldi	r20, 0x0A	; 10
    1414:	0e 94 a4 09 	call	0x1348	; 0x1348 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>
    1418:	01 96       	adiw	r24, 0x01	; 1
_ZN5Print5printEii.constprop.6():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	08 95       	ret
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1424:	4a e0       	ldi	r20, 0x0A	; 10
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
_ZN5Print5printEii.constprop.6():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1432:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>

00001436 <Print::print(char const*) [clone .constprop.94]>:
_ZN5Print5printEPKc.constprop.94():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f0       	breq	.+26     	; 0x1454 <Print::print(char const*) [clone .constprop.94]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    143a:	fc 01       	movw	r30, r24
    143c:	01 90       	ld	r0, Z+
    143e:	00 20       	and	r0, r0
    1440:	e9 f7       	brne	.-6      	; 0x143c <Print::print(char const*) [clone .constprop.94]+0x6>
    1442:	31 97       	sbiw	r30, 0x01	; 1
    1444:	af 01       	movw	r20, r30
    1446:	48 1b       	sub	r20, r24
    1448:	59 0b       	sbc	r21, r25
    144a:	bc 01       	movw	r22, r24
    144c:	83 e7       	ldi	r24, 0x73	; 115
    144e:	94 e0       	ldi	r25, 0x04	; 4
    1450:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <Print::write(unsigned char const*, unsigned int)>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	08 95       	ret

0000145a <inttostr(char*, short)>:
_Z8inttostrPcs():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:31

char* padc (char chr, unsigned char count = 0);

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24
    1464:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:32
  if (integer == 0)
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	59 f4       	brne	.+22     	; 0x1480 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:34
  {
    strcpy(dest, "0");
    146a:	69 ed       	ldi	r22, 0xD9	; 217
    146c:	71 e0       	ldi	r23, 0x01	; 1
    146e:	ce 01       	movw	r24, r28
    1470:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:64
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    1474:	ce 01       	movw	r24, r28
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:38
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    1480:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:40
    
    if (integer < 0)
    1482:	77 ff       	sbrs	r23, 7
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:43
    {
      sign = 1;
      dest[0] = '-';
    1486:	2d e2       	ldi	r18, 0x2D	; 45
    1488:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:44
      integer = integer * -1;
    148a:	91 95       	neg	r25
    148c:	81 95       	neg	r24
    148e:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:42
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    1490:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1492:	80 31       	cpi	r24, 0x10	; 16
    1494:	37 e2       	ldi	r19, 0x27	; 39
    1496:	93 07       	cpc	r25, r19
    1498:	0c f5       	brge	.+66     	; 0x14dc <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    149a:	88 3e       	cpi	r24, 0xE8	; 232
    149c:	33 e0       	ldi	r19, 0x03	; 3
    149e:	93 07       	cpc	r25, r19
    14a0:	fc f4       	brge	.+62     	; 0x14e0 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:51
    else if (integer > 99) idx = 2;
    14a2:	32 e0       	ldi	r19, 0x02	; 2
    14a4:	84 36       	cpi	r24, 0x64	; 100
    14a6:	91 05       	cpc	r25, r1
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:52
    else if (integer > 9) idx = 1;
    14aa:	31 e0       	ldi	r19, 0x01	; 1
    14ac:	8a 30       	cpi	r24, 0x0A	; 10
    14ae:	91 05       	cpc	r25, r1
    14b0:	0c f4       	brge	.+2      	; 0x14b4 <inttostr(char*, short)+0x5a>
    14b2:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:55
    else if (integer > 0) idx = 0;    

    idx += sign;
    14b4:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:56
    dest[idx+1] = 0;
    14b6:	fe 01       	movw	r30, r28
    14b8:	e2 0f       	add	r30, r18
    14ba:	f1 1d       	adc	r31, r1
    14bc:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:60
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    14be:	0a e0       	ldi	r16, 0x0A	; 10
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	fe 01       	movw	r30, r28
    14c4:	e2 0f       	add	r30, r18
    14c6:	f1 1d       	adc	r31, r1
    14c8:	b8 01       	movw	r22, r16
    14ca:	0e 94 a0 21 	call	0x4340	; 0x4340 <__divmodhi4>
    14ce:	80 5d       	subi	r24, 0xD0	; 208
    14d0:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:58
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    14d2:	cb 01       	movw	r24, r22
    14d4:	21 50       	subi	r18, 0x01	; 1
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	a1 f7       	brne	.-24     	; 0x14c2 <inttostr(char*, short)+0x68>
    14da:	cc cf       	rjmp	.-104    	; 0x1474 <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    14dc:	34 e0       	ldi	r19, 0x04	; 4
    14de:	ea cf       	rjmp	.-44     	; 0x14b4 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    14e0:	33 e0       	ldi	r19, 0x03	; 3
    14e2:	e8 cf       	rjmp	.-48     	; 0x14b4 <inttostr(char*, short)+0x5a>

000014e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>:
_Z4rpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:92
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:94
{
  unsigned char len = strlen(str);
    14ea:	ec 01       	movw	r28, r24
    14ec:	09 90       	ld	r0, Y+
    14ee:	00 20       	and	r0, r0
    14f0:	e9 f7       	brne	.-6      	; 0x14ec <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x8>
    14f2:	21 97       	sbiw	r28, 0x01	; 1
    14f4:	c8 1b       	sub	r28, r24
    14f6:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:98
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    14f8:	c0 31       	cpi	r28, 0x10	; 16
    14fa:	08 f5       	brcc	.+66     	; 0x153e <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:100
  {
    strcpy(dest, str);
    14fc:	8c ee       	ldi	r24, 0xEC	; 236
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:101
    strcat(dest, padc(chr, width - len));
    1504:	80 e1       	ldi	r24, 0x10	; 16
    1506:	8c 1b       	sub	r24, r28
    1508:	eb ed       	ldi	r30, 0xDB	; 219
    150a:	f3 e0       	ldi	r31, 0x03	; 3
padc():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    150c:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    150e:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1510:	af 01       	movw	r20, r30
    1512:	4b 5d       	subi	r20, 0xDB	; 219
    1514:	53 40       	sbci	r21, 0x03	; 3
    1516:	48 17       	cp	r20, r24
    1518:	59 07       	cpc	r21, r25
    151a:	14 f4       	brge	.+4      	; 0x1520 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x3c>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    151c:	21 93       	st	Z+, r18
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    1520:	85 52       	subi	r24, 0x25	; 37
    1522:	9c 4f       	sbci	r25, 0xFC	; 252
    1524:	fc 01       	movw	r30, r24
    1526:	10 82       	st	Z, r1
_Z4rpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:101
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    1528:	6b ed       	ldi	r22, 0xDB	; 219
    152a:	73 e0       	ldi	r23, 0x03	; 3
    152c:	8c ee       	ldi	r24, 0xEC	; 236
    152e:	93 e0       	ldi	r25, 0x03	; 3
    1530:	0e 94 ac 23 	call	0x4758	; 0x4758 <strcat>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:108
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    1534:	8c ee       	ldi	r24, 0xEC	; 236
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:105
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    153e:	41 e1       	ldi	r20, 0x11	; 17
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	8c ee       	ldi	r24, 0xEC	; 236
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	0e 94 c7 23 	call	0x478e	; 0x478e <strncpy>
    154a:	f4 cf       	rjmp	.-24     	; 0x1534 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x50>

0000154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>:
_Z4lpadPcPKcch.constprop.78():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:111
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	ec 01       	movw	r28, r24
    1556:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:113
{
  unsigned char len = strlen(str);
    1558:	fb 01       	movw	r30, r22
    155a:	01 90       	ld	r0, Z+
    155c:	00 20       	and	r0, r0
    155e:	e9 f7       	brne	.-6      	; 0x155a <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0xe>
    1560:	31 97       	sbiw	r30, 0x01	; 1
    1562:	e6 1b       	sub	r30, r22
    1564:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:117
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    1566:	e0 31       	cpi	r30, 0x10	; 16
    1568:	28 f5       	brcc	.+74     	; 0x15b4 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x68>
    156a:	e4 17       	cp	r30, r20
    156c:	18 f5       	brcc	.+70     	; 0x15b4 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x68>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:119
  {
    strcpy(dest, padc(chr, width - len));
    156e:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:135
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    1570:	41 31       	cpi	r20, 0x11	; 17
    1572:	08 f0       	brcs	.+2      	; 0x1576 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x2a>
    1574:	40 e1       	ldi	r20, 0x10	; 16
    1576:	eb ed       	ldi	r30, 0xDB	; 219
    1578:	f3 e0       	ldi	r31, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138

  int i;
  for (i=0; i < count; i++)
    157a:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    157c:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    157e:	9f 01       	movw	r18, r30
    1580:	2b 5d       	subi	r18, 0xDB	; 219
    1582:	33 40       	sbci	r19, 0x03	; 3
    1584:	24 17       	cp	r18, r20
    1586:	35 07       	cpc	r19, r21
    1588:	14 f4       	brge	.+4      	; 0x158e <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x42>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    158a:	81 93       	st	Z+, r24
    158c:	f8 cf       	rjmp	.-16     	; 0x157e <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x32>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    158e:	45 52       	subi	r20, 0x25	; 37
    1590:	5c 4f       	sbci	r21, 0xFC	; 252
    1592:	fa 01       	movw	r30, r20
    1594:	10 82       	st	Z, r1
_Z4lpadPcPKcch.constprop.78():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:119
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    1596:	6b ed       	ldi	r22, 0xDB	; 219
    1598:	73 e0       	ldi	r23, 0x03	; 3
    159a:	ce 01       	movw	r24, r28
    159c:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:120
    strcat(dest, str);
    15a0:	b8 01       	movw	r22, r16
    15a2:	ce 01       	movw	r24, r28
    15a4:	0e 94 ac 23 	call	0x4758	; 0x4758 <strcat>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:127
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    15a8:	ce 01       	movw	r24, r28
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:124
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	4f 5f       	subi	r20, 0xFF	; 255
    15b8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ba:	b8 01       	movw	r22, r16
    15bc:	ce 01       	movw	r24, r28
    15be:	0e 94 c7 23 	call	0x478e	; 0x478e <strncpy>
    15c2:	f2 cf       	rjmp	.-28     	; 0x15a8 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x5c>

000015c4 <Config::save() [clone .constprop.28]>:
_ZN6Config4saveEv.constprop.28():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:147
  return strbuf;
}

void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    15c4:	4c e2       	ldi	r20, 0x2C	; 44
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	8b e2       	ldi	r24, 0x2B	; 43
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	0c 94 ce 20 	jmp	0x419c	; 0x419c <eeprom_write_block>

000015d4 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    15de:	88 81       	ld	r24, Y
    15e0:	99 81       	ldd	r25, Y+1	; 0x01
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	59 f0       	breq	.+22     	; 0x15fc <String::reserve(unsigned int)+0x28>
    15e6:	2a 81       	ldd	r18, Y+2	; 0x02
    15e8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ea:	26 17       	cp	r18, r22
    15ec:	37 07       	cpc	r19, r23
    15ee:	30 f0       	brcs	.+12     	; 0x15fc <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret
    15fc:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    15fe:	6f 5f       	subi	r22, 0xFF	; 255
    1600:	7f 4f       	sbci	r23, 0xFF	; 255
    1602:	0e 94 e6 22 	call	0x45cc	; 0x45cc <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	59 f0       	breq	.+22     	; 0x1620 <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    160a:	99 83       	std	Y+1, r25	; 0x01
    160c:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    160e:	1b 83       	std	Y+3, r17	; 0x03
    1610:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	23 2b       	or	r18, r19
    1618:	59 f7       	brne	.-42     	; 0x15f0 <String::reserve(unsigned int)+0x1c>
    161a:	fc 01       	movw	r30, r24
    161c:	10 82       	st	Z, r1
    161e:	e8 cf       	rjmp	.-48     	; 0x15f0 <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	e7 cf       	rjmp	.-50     	; 0x15f2 <String::reserve(unsigned int)+0x1e>

00001624 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1632:	fb 01       	movw	r30, r22
    1634:	e0 80       	ld	r14, Z
    1636:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    1638:	e1 14       	cp	r14, r1
    163a:	f1 04       	cpc	r15, r1
    163c:	11 f1       	breq	.+68     	; 0x1682 <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    163e:	04 81       	ldd	r16, Z+4	; 0x04
    1640:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    1642:	01 15       	cp	r16, r1
    1644:	11 05       	cpc	r17, r1
    1646:	a9 f0       	breq	.+42     	; 0x1672 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	08 0f       	add	r16, r24
    164e:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1650:	b8 01       	movw	r22, r16
    1652:	ce 01       	movw	r24, r28
    1654:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <String::reserve(unsigned int)>
    1658:	88 23       	and	r24, r24
    165a:	99 f0       	breq	.+38     	; 0x1682 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    165c:	28 81       	ld	r18, Y
    165e:	39 81       	ldd	r19, Y+1	; 0x01
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	b7 01       	movw	r22, r14
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    166e:	1d 83       	std	Y+5, r17	; 0x05
    1670:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    1672:	ce 01       	movw	r24, r28
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1682:	ce 01       	movw	r24, r28
    1684:	0e 94 92 09 	call	0x1324	; 0x1324 <String::invalidate()>
    1688:	f4 cf       	rjmp	.-24     	; 0x1672 <operator+(StringSumHelper const&, String const&)+0x4e>

0000168a <String::String(char const*)>:
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	ec 01       	movw	r28, r24
    1698:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    169e:	1b 82       	std	Y+3, r1	; 0x03
    16a0:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    16a2:	1d 82       	std	Y+5, r1	; 0x05
    16a4:	1c 82       	std	Y+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    16a6:	fb 01       	movw	r30, r22
    16a8:	01 90       	ld	r0, Z+
    16aa:	00 20       	and	r0, r0
    16ac:	e9 f7       	brne	.-6      	; 0x16a8 <String::String(char const*)+0x1e>
    16ae:	31 97       	sbiw	r30, 0x01	; 1
    16b0:	8f 01       	movw	r16, r30
    16b2:	06 1b       	sub	r16, r22
    16b4:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    16b6:	b8 01       	movw	r22, r16
    16b8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <String::reserve(unsigned int)>
    16bc:	81 11       	cpse	r24, r1
    16be:	09 c0       	rjmp	.+18     	; 0x16d2 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    16c0:	ce 01       	movw	r24, r28
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    16ce:	0c 94 92 09 	jmp	0x1324	; 0x1324 <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    16d2:	1d 83       	std	Y+5, r17	; 0x05
    16d4:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    16d6:	b7 01       	movw	r22, r14
    16d8:	88 81       	ld	r24, Y
    16da:	99 81       	ldd	r25, Y+1	; 0x01
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    16e8:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <strcpy>

000016ec <fmt(char*, unsigned char, ...)>:
_Z3fmtPchz():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:69
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	e9 88       	ldd	r14, Y+17	; 0x11
    170e:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:74
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    1710:	fe 01       	movw	r30, r28
    1712:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1714:	d1 2c       	mov	r13, r1
    1716:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:70


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    1718:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    171a:	ab 88       	ldd	r10, Y+19	; 0x13
    171c:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:80
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    171e:	80 e1       	ldi	r24, 0x10	; 16
    1720:	68 2e       	mov	r6, r24
    1722:	87 2d       	mov	r24, r7
    1724:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1726:	ca 14       	cp	r12, r10
    1728:	db 04       	cpc	r13, r11
    172a:	2c f5       	brge	.+74     	; 0x1776 <fmt(char*, unsigned char, ...)+0x8a>
    172c:	2f e0       	ldi	r18, 0x0F	; 15
    172e:	27 15       	cp	r18, r7
    1730:	10 f1       	brcs	.+68     	; 0x1776 <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    1732:	4f 01       	movw	r8, r30
    1734:	22 e0       	ldi	r18, 0x02	; 2
    1736:	82 0e       	add	r8, r18
    1738:	91 1c       	adc	r9, r1
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:79
    unsigned char len = strlen(str);
    173e:	fb 01       	movw	r30, r22
    1740:	01 90       	ld	r0, Z+
    1742:	00 20       	and	r0, r0
    1744:	e9 f7       	brne	.-6      	; 0x1740 <fmt(char*, unsigned char, ...)+0x54>
    1746:	31 97       	sbiw	r30, 0x01	; 1
    1748:	8f 01       	movw	r16, r30
    174a:	06 1b       	sub	r16, r22
    174c:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:80
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    174e:	9c 01       	movw	r18, r24
    1750:	20 0f       	add	r18, r16
    1752:	31 1d       	adc	r19, r1
    1754:	46 2d       	mov	r20, r6
    1756:	47 19       	sub	r20, r7
    1758:	21 31       	cpi	r18, 0x11	; 17
    175a:	31 05       	cpc	r19, r1
    175c:	0c f4       	brge	.+2      	; 0x1760 <fmt(char*, unsigned char, ...)+0x74>
    175e:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:82

    strncpy((dest + buflen), str, cpylen);
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	8e 0d       	add	r24, r14
    1764:	9f 1d       	adc	r25, r15
    1766:	0e 94 c7 23 	call	0x478e	; 0x478e <strncpy>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:83
    buflen += len;
    176a:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	c8 1a       	sub	r12, r24
    1770:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    1772:	f4 01       	movw	r30, r8
    1774:	d6 cf       	rjmp	.-84     	; 0x1722 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:86

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    1776:	8e 0d       	add	r24, r14
    1778:	9f 1d       	adc	r25, r15
    177a:	fc 01       	movw	r30, r24
    177c:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:88
  return dest;
}
    177e:	c7 01       	movw	r24, r14
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	bf 90       	pop	r11
    1792:	af 90       	pop	r10
    1794:	9f 90       	pop	r9
    1796:	8f 90       	pop	r8
    1798:	7f 90       	pop	r7
    179a:	6f 90       	pop	r6
    179c:	08 95       	ret

0000179e <Config::getFormattedStr(unsigned char) [clone .constprop.75]>:
_ZN6Config15getFormattedStrEh.constprop.75():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:74
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    179e:	8f 92       	push	r8
    17a0:	9f 92       	push	r9
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	65 97       	sbiw	r28, 0x15	; 21
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:78
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    17c6:	82 50       	subi	r24, 0x02	; 2
    17c8:	84 31       	cpi	r24, 0x14	; 20
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x30>
    17cc:	ce c1       	rjmp	.+924    	; 0x1b6a <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3cc>
    17ce:	e8 2f       	mov	r30, r24
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	e3 51       	subi	r30, 0x13	; 19
    17d4:	f4 4f       	sbci	r31, 0xF4	; 244
    17d6:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__tablejump2__>
    17da:	01 0c       	add	r0, r1
    17dc:	6b 0c       	add	r6, r11
    17de:	b5 0d       	add	r27, r5
    17e0:	cb 0c       	add	r12, r11
    17e2:	f7 0c       	add	r15, r7
    17e4:	16 0d       	add	r17, r6
    17e6:	23 0d       	add	r18, r3
    17e8:	b5 0d       	add	r27, r5
    17ea:	2c 0d       	add	r18, r12
    17ec:	51 0d       	add	r21, r1
    17ee:	b5 0d       	add	r27, r5
    17f0:	5a 0d       	add	r21, r10
    17f2:	67 0d       	add	r22, r7
    17f4:	75 0d       	add	r23, r5
    17f6:	97 0d       	add	r25, r7
    17f8:	9c 0d       	add	r25, r12
    17fa:	b5 0d       	add	r27, r5
    17fc:	b2 0d       	add	r27, r2
    17fe:	ad 0d       	add	r26, r13
    1800:	a8 0d       	add	r26, r8
toDateStr():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:49
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1802:	1d 8a       	std	Y+21, r1	; 0x15
    1804:	1c 8a       	std	Y+20, r1	; 0x14
    1806:	8f e2       	ldi	r24, 0x2F	; 47
    1808:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:53
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    180a:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <StDate>
    180e:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <StDate+0x1>
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:54
  lpad(dat, intbuf, '0', 2);
    181a:	8e 01       	movw	r16, r28
    181c:	0f 5e       	subi	r16, 0xEF	; 239
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	42 e0       	ldi	r20, 0x02	; 2
    1822:	be 01       	movw	r22, r28
    1824:	6f 5f       	subi	r22, 0xFF	; 255
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	c8 01       	movw	r24, r16
    182a:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:55
  inttostr(intbuf, StMonth);
    182e:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <StMonth>
    1832:	70 91 28 03 	lds	r23, 0x0328	; 0x800328 <StMonth+0x1>
    1836:	ce 01       	movw	r24, r28
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:56
  lpad(mon, intbuf, '0', 2);
    183e:	7e 01       	movw	r14, r28
    1840:	8e e0       	ldi	r24, 0x0E	; 14
    1842:	e8 0e       	add	r14, r24
    1844:	f1 1c       	adc	r15, r1
    1846:	42 e0       	ldi	r20, 0x02	; 2
    1848:	be 01       	movw	r22, r28
    184a:	6f 5f       	subi	r22, 0xFF	; 255
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	c7 01       	movw	r24, r14
    1850:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:57
  inttostr(intbuf, StYear);
    1854:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <StYear>
    1858:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <StYear+0x1>
    185c:	ce 01       	movw	r24, r28
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:58
  lpad(year, intbuf, '0', 4);
    1864:	6e 01       	movw	r12, r28
    1866:	99 e0       	ldi	r25, 0x09	; 9
    1868:	c9 0e       	add	r12, r25
    186a:	d1 1c       	adc	r13, r1
    186c:	44 e0       	ldi	r20, 0x04	; 4
    186e:	be 01       	movw	r22, r28
    1870:	6f 5f       	subi	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	c6 01       	movw	r24, r12
    1876:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:60

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    187a:	df 92       	push	r13
    187c:	cf 92       	push	r12
    187e:	ce 01       	movw	r24, r28
    1880:	44 96       	adiw	r24, 0x14	; 20
    1882:	9f 93       	push	r25
    1884:	8f 93       	push	r24
    1886:	ff 92       	push	r15
    1888:	ef 92       	push	r14
    188a:	9f 93       	push	r25
    188c:	8f 93       	push	r24
    188e:	1f 93       	push	r17
    1890:	0f 93       	push	r16
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	8f 93       	push	r24
    1896:	8b e5       	ldi	r24, 0x5B	; 91
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
toTimeStr():
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
_ZN6Config15getFormattedStrEh.constprop.75():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:143
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    18ac:	8b e5       	ldi	r24, 0x5B	; 91
    18ae:	93 e0       	ldi	r25, 0x03	; 3
    18b0:	65 96       	adiw	r28, 0x15	; 21
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	df 90       	pop	r13
    18ca:	cf 90       	pop	r12
    18cc:	bf 90       	pop	r11
    18ce:	af 90       	pop	r10
    18d0:	9f 90       	pop	r9
    18d2:	8f 90       	pop	r8
    18d4:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:84
  {
  case mnuCmdSetDate:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    18d6:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <StHr>
    18da:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <StHr+0x1>
    18de:	2c e3       	ldi	r18, 0x3C	; 60
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	0e 94 ba 21 	call	0x4374	; 0x4374 <__usmulhisi3>
    18e6:	00 91 57 03 	lds	r16, 0x0357	; 0x800357 <StMin>
    18ea:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <StMin+0x1>
    18ee:	01 2e       	mov	r0, r17
    18f0:	00 0c       	add	r0, r0
    18f2:	22 0b       	sbc	r18, r18
    18f4:	33 0b       	sbc	r19, r19
    18f6:	60 0f       	add	r22, r16
    18f8:	71 1f       	adc	r23, r17
    18fa:	82 1f       	adc	r24, r18
    18fc:	93 1f       	adc	r25, r19
toTimeStr():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:29
  DataYear = 2022;
}

char *toTimeStr(char *buf, long timeval, char separator)
{
  char sepstr[] = {separator, 0};
    18fe:	1a 8a       	std	Y+18, r1	; 0x12
    1900:	19 8a       	std	Y+17, r1	; 0x11
    1902:	2a e3       	ldi	r18, 0x3A	; 58
    1904:	29 8b       	std	Y+17, r18	; 0x11
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:31

  short hours = timeval / 60;
    1906:	2c e3       	ldi	r18, 0x3C	; 60
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divmodsi4>
    1912:	4b 01       	movw	r8, r22
    1914:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:33
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    1916:	2d 30       	cpi	r18, 0x0D	; 13
    1918:	31 05       	cpc	r19, r1
    191a:	14 f0       	brlt	.+4      	; 0x1920 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x182>
    191c:	2c 50       	subi	r18, 0x0C	; 12
    191e:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:38
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    1920:	b9 01       	movw	r22, r18
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:39
  lpad(h, intbuf, '0', 2);
    192a:	8e 01       	movw	r16, r28
    192c:	02 5f       	subi	r16, 0xF2	; 242
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	42 e0       	ldi	r20, 0x02	; 2
    1932:	be 01       	movw	r22, r28
    1934:	6f 5f       	subi	r22, 0xFF	; 255
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	c8 01       	movw	r24, r16
    193a:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:40
  inttostr(intbuf, mins);
    193e:	b4 01       	movw	r22, r8
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:41
  lpad(m, intbuf, '0', 2);
    1948:	6e 01       	movw	r12, r28
    194a:	89 e0       	ldi	r24, 0x09	; 9
    194c:	c8 0e       	add	r12, r24
    194e:	d1 1c       	adc	r13, r1
    1950:	42 e0       	ldi	r20, 0x02	; 2
    1952:	be 01       	movw	r22, r28
    1954:	6f 5f       	subi	r22, 0xFF	; 255
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	c6 01       	movw	r24, r12
    195a:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:43

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    195e:	9c e0       	ldi	r25, 0x0C	; 12
    1960:	e9 16       	cp	r14, r25
    1962:	f1 04       	cpc	r15, r1
    1964:	ac f4       	brge	.+42     	; 0x1990 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x1f2>
_ZN6Config15getFormattedStrEh.constprop.75():
    1966:	86 e7       	ldi	r24, 0x76	; 118
    1968:	91 e0       	ldi	r25, 0x01	; 1
toTimeStr():
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	df 92       	push	r13
    1970:	cf 92       	push	r12
    1972:	ce 01       	movw	r24, r28
    1974:	41 96       	adiw	r24, 0x11	; 17
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	1f 93       	push	r17
    197c:	0f 93       	push	r16
    197e:	84 e0       	ldi	r24, 0x04	; 4
    1980:	8f 93       	push	r24
    1982:	8b e5       	ldi	r24, 0x5B	; 91
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	9f 93       	push	r25
    1988:	8f 93       	push	r24
    198a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    198e:	89 cf       	rjmp	.-238    	; 0x18a2 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x104>
_ZN6Config15getFormattedStrEh.constprop.75():
    1990:	8f e6       	ldi	r24, 0x6F	; 111
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	ea cf       	rjmp	.-44     	; 0x196a <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x1cc>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:87
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    1996:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <config+0xf>
    199a:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <config+0x10>
    199e:	6d 30       	cpi	r22, 0x0D	; 13
    19a0:	71 05       	cpc	r23, r1
    19a2:	14 f0       	brlt	.+4      	; 0x19a8 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x20a>
    19a4:	6c 50       	subi	r22, 0x0C	; 12
    19a6:	71 09       	sbc	r23, r1
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:88
    lpad(h, intbuf, '0', 2);
    19b0:	8e 01       	movw	r16, r28
    19b2:	07 5f       	subi	r16, 0xF7	; 247
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	42 e0       	ldi	r20, 0x02	; 2
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	c8 01       	movw	r24, r16
    19c0:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:89
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    19c4:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0xf>
    19c8:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x10>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:94
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    19cc:	0c 97       	sbiw	r24, 0x0c	; 12
    19ce:	5c f5       	brge	.+86     	; 0x1a26 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x288>
    19d0:	83 e7       	ldi	r24, 0x73	; 115
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	9f 93       	push	r25
    19d6:	8f 93       	push	r24
    19d8:	1f 93       	push	r17
    19da:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	8f 93       	push	r24
    19e0:	8b e5       	ldi	r24, 0x5B	; 91
    19e2:	93 e0       	ldi	r25, 0x03	; 3
    19e4:	9f 93       	push	r25
    19e6:	8f 93       	push	r24
    19e8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    19ec:	5a cf       	rjmp	.-332    	; 0x18a2 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x104>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:92
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    19ee:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <config+0x11>
    19f2:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <config+0x12>
    19f6:	6d 30       	cpi	r22, 0x0D	; 13
    19f8:	71 05       	cpc	r23, r1
    19fa:	14 f0       	brlt	.+4      	; 0x1a00 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x262>
    19fc:	6c 50       	subi	r22, 0x0C	; 12
    19fe:	71 09       	sbc	r23, r1
    1a00:	ce 01       	movw	r24, r28
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:93
    lpad(h, intbuf, '0', 2);
    1a08:	8e 01       	movw	r16, r28
    1a0a:	07 5f       	subi	r16, 0xF7	; 247
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	42 e0       	ldi	r20, 0x02	; 2
    1a10:	be 01       	movw	r22, r28
    1a12:	6f 5f       	subi	r22, 0xFF	; 255
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	c8 01       	movw	r24, r16
    1a18:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:94
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1a1c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x11>
    1a20:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <config+0x12>
    1a24:	d3 cf       	rjmp	.-90     	; 0x19cc <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x22e>
    1a26:	8c e6       	ldi	r24, 0x6C	; 108
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	d4 cf       	rjmp	.-88     	; 0x19d4 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x236>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:97
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    1a2c:	60 91 43 03 	lds	r22, 0x0343	; 0x800343 <config+0x18>
    1a30:	70 91 44 03 	lds	r23, 0x0344	; 0x800344 <config+0x19>
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
    1a3c:	2e e7       	ldi	r18, 0x7E	; 126
    1a3e:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1a40:	3f 93       	push	r19
    1a42:	2f 93       	push	r18
    1a44:	34 c0       	rjmp	.+104    	; 0x1aae <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x310>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:100
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    1a46:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    1a4a:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
    1a56:	76 c0       	rjmp	.+236    	; 0x1b44 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3a6>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:103
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    1a58:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <demoTime>
    1a5c:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <demoTime+0x1>
    1a60:	b8 01       	movw	r22, r16
    1a62:	0d 30       	cpi	r16, 0x0D	; 13
    1a64:	11 05       	cpc	r17, r1
    1a66:	14 f0       	brlt	.+4      	; 0x1a6c <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2ce>
    1a68:	6c 50       	subi	r22, 0x0C	; 12
    1a6a:	71 09       	sbc	r23, r1
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:104
    lpad(h, intbuf, '0', 2);
    1a74:	7e 01       	movw	r14, r28
    1a76:	99 e0       	ldi	r25, 0x09	; 9
    1a78:	e9 0e       	add	r14, r25
    1a7a:	f1 1c       	adc	r15, r1
    1a7c:	42 e0       	ldi	r20, 0x02	; 2
    1a7e:	be 01       	movw	r22, r28
    1a80:	6f 5f       	subi	r22, 0xFF	; 255
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	c7 01       	movw	r24, r14
    1a86:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:105
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1a8a:	83 e7       	ldi	r24, 0x73	; 115
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	0c 30       	cpi	r16, 0x0C	; 12
    1a90:	11 05       	cpc	r17, r1
    1a92:	14 f0       	brlt	.+4      	; 0x1a98 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2fa>
    1a94:	8c e6       	ldi	r24, 0x6C	; 108
    1a96:	91 e0       	ldi	r25, 0x01	; 1
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	ff 92       	push	r15
    1a9e:	ef 92       	push	r14
    1aa0:	9d cf       	rjmp	.-198    	; 0x19dc <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x23e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:108
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1aa2:	85 e8       	ldi	r24, 0x85	; 133
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	8d e8       	ldi	r24, 0x8D	; 141
    1aac:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	94 cf       	rjmp	.-216    	; 0x19dc <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x23e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:111
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1ab4:	60 91 4b 03 	lds	r22, 0x034B	; 0x80034b <config+0x20>
    1ab8:	70 91 4c 03 	lds	r23, 0x034C	; 0x80034c <config+0x21>
    1abc:	63 30       	cpi	r22, 0x03	; 3
    1abe:	71 05       	cpc	r23, r1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x326>
    1ac2:	5a c0       	rjmp	.+180    	; 0x1b78 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3da>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:114
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1ac4:	25 e2       	ldi	r18, 0x25	; 37
    1ac6:	32 e0       	ldi	r19, 0x02	; 2
    1ac8:	8a e7       	ldi	r24, 0x7A	; 122
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	b9 cf       	rjmp	.-142    	; 0x1a40 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2a2>
    1ace:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <config+0x24>
    1ad2:	70 91 50 03 	lds	r23, 0x0350	; 0x800350 <config+0x25>
    1ad6:	63 30       	cpi	r22, 0x03	; 3
    1ad8:	71 05       	cpc	r23, r1
    1ada:	a1 f3       	breq	.-24     	; 0x1ac4 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x326>
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
    1ae4:	2f e6       	ldi	r18, 0x6F	; 111
    1ae6:	31 e0       	ldi	r19, 0x01	; 1
    1ae8:	ab cf       	rjmp	.-170    	; 0x1a40 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2a2>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:117
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1aea:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <config+0x28>
    1aee:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <config+0x29>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:122
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:123
    lpad(h, intbuf, '0', 3);
    1afa:	8e 01       	movw	r16, r28
    1afc:	07 5f       	subi	r16, 0xF7	; 247
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	43 e0       	ldi	r20, 0x03	; 3
    1b02:	be 01       	movw	r22, r28
    1b04:	6f 5f       	subi	r22, 0xFF	; 255
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	c8 01       	movw	r24, r16
    1b0a:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:124
    fmt(strbuf, 1, h);
    1b0e:	1f 93       	push	r17
    1b10:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	8f 93       	push	r24
    1b16:	8b e5       	ldi	r24, 0x5B	; 91
    1b18:	93 e0       	ldi	r25, 0x03	; 3
    1b1a:	9f 93       	push	r25
    1b1c:	8f 93       	push	r24
    1b1e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	bf ce       	rjmp	.-642    	; 0x18ac <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x10e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:122
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1b2e:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <config+0x2a>
    1b32:	70 91 56 03 	lds	r23, 0x0356	; 0x800356 <config+0x2b>
    1b36:	dd cf       	rjmp	.-70     	; 0x1af2 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x354>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:127
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1b38:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <config+0x17>
    1b3c:	88 23       	and	r24, r24
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3ac>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b44:	9f 93       	push	r25
    1b46:	8f 93       	push	r24
    1b48:	e4 cf       	rjmp	.-56     	; 0x1b12 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x374>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:127
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1b4a:	8a e7       	ldi	r24, 0x7A	; 122
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	fa cf       	rjmp	.-12     	; 0x1b44 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3a6>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:130
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    1b50:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <config+0x1e>
    1b54:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <config+0x1f>
    1b58:	7a cf       	rjmp	.-268    	; 0x1a4e <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2b0>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:133
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b5a:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <config+0x1c>
    1b5e:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <config+0x1d>
    1b62:	75 cf       	rjmp	.-278    	; 0x1a4e <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2b0>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:136
    break;      
  case mnuCmdReset:
    strbuf[0] = 0;
    1b64:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <strbuf>
    1b68:	a1 ce       	rjmp	.-702    	; 0x18ac <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x10e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:139
    break;
  default:
    strcpy(strbuf, NotImp);
    1b6a:	66 e3       	ldi	r22, 0x36	; 54
    1b6c:	71 e0       	ldi	r23, 0x01	; 1
    1b6e:	8b e5       	ldi	r24, 0x5B	; 91
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
    1b76:	9a ce       	rjmp	.-716    	; 0x18ac <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x10e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:111
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1b78:	ce 01       	movw	r24, r28
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
    1b80:	26 e7       	ldi	r18, 0x76	; 118
    1b82:	31 e0       	ldi	r19, 0x01	; 1
    1b84:	5d cf       	rjmp	.-326    	; 0x1a40 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2a2>

00001b86 <PlayChant()>:
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:877
    }
}

int n = 1;
void PlayChant()
{
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:879
    // Serial.println(String(hr));
    switch (playSong)
    1b8e:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <playSong>
    1b92:	e9 30       	cpi	r30, 0x09	; 9
    1b94:	58 f5       	brcc	.+86     	; 0x1bec <PlayChant()+0x66>
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	ef 52       	subi	r30, 0x2F	; 47
    1b9a:	f2 4f       	sbci	r31, 0xF2	; 242
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:980
            delay(1000);
            playSong = End_of_Song;
         }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:879

int n = 1;
void PlayChant()
{
    // Serial.println(String(hr));
    switch (playSong)
    1b9e:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__tablejump2__>
    1ba2:	da 0d       	add	r29, r10
    1ba4:	fb 0d       	add	r31, r11
    1ba6:	0c 0e       	add	r0, r28
    1ba8:	1d 0e       	add	r1, r29
    1baa:	2e 0e       	add	r2, r30
    1bac:	41 0e       	add	r4, r17
    1bae:	75 0e       	add	r7, r21
    1bb0:	d7 0e       	add	r13, r23
    1bb2:	fe 0e       	add	r15, r30
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:882
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    1bb4:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1bb8:	89 2b       	or	r24, r25
    1bba:	c1 f0       	breq	.+48     	; 0x1bec <PlayChant()+0x66>
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1bbc:	0e 94 2a 20 	call	0x4054	; 0x4054 <random>
    1bc0:	23 e1       	ldi	r18, 0x13	; 19
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1bcc:	6f 5f       	subi	r22, 0xFF	; 255
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:884
        {
            myDFPlayer.playFolder(0, random(1, 20));
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:885
            delay(1000);
    1bda:	68 ee       	ldi	r22, 0xE8	; 232
    1bdc:	73 e0       	ldi	r23, 0x03	; 3
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:886
            playSong = Time;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:976
    case Song_2:
         if (digitalRead(STA_PIN))
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    1be8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <playSong>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:990
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:890
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    1bf6:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1bfa:	89 2b       	or	r24, r25
    1bfc:	b9 f3       	breq	.-18     	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:892
        {
            myDFPlayer.playFolder(1, bell.hour());
    1bfe:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <bell+0x3>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:893
            delay(1000);
    1c08:	68 ee       	ldi	r22, 0xE8	; 232
    1c0a:	73 e0       	ldi	r23, 0x03	; 3
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:894
            playSong = English_Month;
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	e8 cf       	rjmp	.-48     	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:898
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    1c18:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1c1c:	89 2b       	or	r24, r25
    1c1e:	31 f3       	breq	.-52     	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:900
        {
            myDFPlayer.playFolder(47, bell.month());
    1c20:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <bell+0x1>
    1c24:	8f e2       	ldi	r24, 0x2F	; 47
    1c26:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:901
            delay(1000);
    1c2a:	68 ee       	ldi	r22, 0xE8	; 232
    1c2c:	73 e0       	ldi	r23, 0x03	; 3
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:902
            playSong = English_Date;
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	d7 cf       	rjmp	.-82     	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:906
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    1c3a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1c3e:	89 2b       	or	r24, r25
    1c40:	a9 f2       	breq	.-86     	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:908
        {
            myDFPlayer.playFolder(48, bell.day());
    1c42:	60 91 6f 04 	lds	r22, 0x046F	; 0x80046f <bell+0x2>
    1c46:	80 e3       	ldi	r24, 0x30	; 48
    1c48:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:909
            delay(1000);
    1c4c:	68 ee       	ldi	r22, 0xE8	; 232
    1c4e:	73 e0       	ldi	r23, 0x03	; 3
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:910
            playSong = Day_of_Week;
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	c6 cf       	rjmp	.-116    	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:914
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    1c5c:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1c60:	89 2b       	or	r24, r25
    1c62:	21 f2       	breq	.-120    	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:916
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <DateTime::dayOfTheWeek() const [clone .constprop.20]>
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	68 0f       	add	r22, r24
    1c6c:	81 e3       	ldi	r24, 0x31	; 49
    1c6e:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:917
            delay(1000);
    1c72:	68 ee       	ldi	r22, 0xE8	; 232
    1c74:	73 e0       	ldi	r23, 0x03	; 3
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:918
            playSong = Tamil_Date;
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	b3 cf       	rjmp	.-154    	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:922
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    1c82:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1c86:	89 2b       	or	r24, r25
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <PlayChant()+0x106>
    1c8a:	b0 cf       	rjmp	.-160    	; 0x1bec <PlayChant()+0x66>
    1c8c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <bell+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:924
        {
            if (bell.hour() == 6 || bell.hour() == 8 || bell.hour() == 10)
    1c90:	86 30       	cpi	r24, 0x06	; 6
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <PlayChant()+0x114>
    1c94:	8d 7f       	andi	r24, 0xFD	; 253
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	c9 f4       	brne	.+50     	; 0x1ccc <PlayChant()+0x146>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    1c9a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <bell>
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	80 53       	subi	r24, 0x30	; 48
    1ca2:	98 4f       	sbci	r25, 0xF8	; 248
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:926
            {
                if (bell.year() == config.DataYear)
    1ca4:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <config+0x1c>
    1ca8:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <config+0x1d>
    1cac:	28 17       	cp	r18, r24
    1cae:	39 07       	cpc	r19, r25
    1cb0:	79 f4       	brne	.+30     	; 0x1cd0 <PlayChant()+0x14a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:928
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    1cb2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <bell+0x1>
    1cb6:	60 91 6f 04 	lds	r22, 0x046F	; 0x80046f <bell+0x2>
    1cba:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:933
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    1cbc:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:934
                    delay(1000);
    1cc0:	68 ee       	ldi	r22, 0xE8	; 232
    1cc2:	73 e0       	ldi	r23, 0x03	; 3
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:940
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    1ccc:	86 e0       	ldi	r24, 0x06	; 6
    1cce:	8c cf       	rjmp	.-232    	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:931
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    1cd0:	21 50       	subi	r18, 0x01	; 1
    1cd2:	31 09       	sbc	r19, r1
    1cd4:	28 17       	cp	r18, r24
    1cd6:	39 07       	cpc	r19, r25
    1cd8:	c9 f7       	brne	.-14     	; 0x1ccc <PlayChant()+0x146>
    1cda:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <bell+0x1>
    1cde:	8c 30       	cpi	r24, 0x0C	; 12
    1ce0:	a9 f7       	brne	.-22     	; 0x1ccc <PlayChant()+0x146>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:933
                {
                    myDFPlayer.playFolder(50, bell.day());
    1ce2:	60 91 6f 04 	lds	r22, 0x046F	; 0x80046f <bell+0x2>
    1ce6:	82 e3       	ldi	r24, 0x32	; 50
    1ce8:	e9 cf       	rjmp	.-46     	; 0x1cbc <PlayChant()+0x136>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:946
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    1cea:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1cee:	89 2b       	or	r24, r25
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <PlayChant()+0x16e>
    1cf2:	7c cf       	rjmp	.-264    	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:948
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    1cf4:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <config+0x20>
    1cf8:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <config+0x21>
    1cfc:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <bell+0x3>
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	28 17       	cp	r18, r24
    1d04:	39 07       	cpc	r19, r25
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <PlayChant()+0x188>
    1d08:	23 30       	cpi	r18, 0x03	; 3
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	d9 f5       	brne	.+118    	; 0x1d84 <PlayChant()+0x1fe>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:954
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1d0e:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <config+0x24>
    1d12:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <config+0x25>
    1d16:	a9 01       	movw	r20, r18
    1d18:	44 5f       	subi	r20, 0xF4	; 244
    1d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1c:	84 17       	cp	r24, r20
    1d1e:	95 07       	cpc	r25, r21
    1d20:	e9 f1       	breq	.+122    	; 0x1d9c <PlayChant()+0x216>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:962
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
    1d22:	c0 90 43 03 	lds	r12, 0x0343	; 0x800343 <config+0x18>
    1d26:	d0 90 44 03 	lds	r13, 0x0344	; 0x800344 <config+0x19>
    1d2a:	0d 2c       	mov	r0, r13
    1d2c:	00 0c       	add	r0, r0
    1d2e:	ee 08       	sbc	r14, r14
    1d30:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	c8 16       	cp	r12, r24
    1d3e:	d1 04       	cpc	r13, r1
    1d40:	e1 04       	cpc	r14, r1
    1d42:	f1 04       	cpc	r15, r1
    1d44:	74 f0       	brlt	.+28     	; 0x1d62 <PlayChant()+0x1dc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1d46:	0e 94 2a 20 	call	0x4054	; 0x4054 <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    1d4a:	a7 01       	movw	r20, r14
    1d4c:	96 01       	movw	r18, r12
    1d4e:	21 50       	subi	r18, 0x01	; 1
    1d50:	31 09       	sbc	r19, r1
    1d52:	41 09       	sbc	r20, r1
    1d54:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1d56:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1d5a:	6f 5f       	subi	r22, 0xFF	; 255
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    1d62:	82 e1       	ldi	r24, 0x12	; 18
    1d64:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:963
                delay(1000);
    1d68:	68 ee       	ldi	r22, 0xE8	; 232
    1d6a:	73 e0       	ldi	r23, 0x03	; 3
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:964
                if (config.Song2_Count != 0)
    1d74:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <config+0x1a>
    1d78:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <config+0x1b>
    1d7c:	89 2b       	or	r24, r25
    1d7e:	a9 f4       	brne	.+42     	; 0x1daa <PlayChant()+0x224>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:976
    case Song_2:
         if (digitalRead(STA_PIN))
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    1d80:	88 e0       	ldi	r24, 0x08	; 8
    1d82:	32 cf       	rjmp	.-412    	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:950
    case Song_1:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    1d84:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:956
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    1d88:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:974
        }
        break;
    case Song_2:
         if (digitalRead(STA_PIN))
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
    1d8a:	0e 94 48 05 	call	0xa90	; 0xa90 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:975
            delay(1000);
    1d8e:	68 ee       	ldi	r22, 0xE8	; 232
    1d90:	73 e0       	ldi	r23, 0x03	; 3
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
    1d9a:	f2 cf       	rjmp	.-28     	; 0x1d80 <PlayChant()+0x1fa>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:954
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1d9c:	23 30       	cpi	r18, 0x03	; 3
    1d9e:	31 05       	cpc	r19, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <PlayChant()+0x21e>
    1da2:	bf cf       	rjmp	.-130    	; 0x1d22 <PlayChant()+0x19c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:956
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    1da4:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <config+0x2a>
    1da8:	ef cf       	rjmp	.-34     	; 0x1d88 <PlayChant()+0x202>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:965
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
                delay(1000);
                if (config.Song2_Count != 0)
                    playSong = Song_2;
    1daa:	87 e0       	ldi	r24, 0x07	; 7
    1dac:	1d cf       	rjmp	.-454    	; 0x1be8 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:972
                    playSong = End_of_Song;
            }
        }
        break;
    case Song_2:
         if (digitalRead(STA_PIN))
    1dae:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1db2:	89 2b       	or	r24, r25
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <PlayChant()+0x232>
    1db6:	1a cf       	rjmp	.-460    	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:974
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
    1db8:	c0 90 45 03 	lds	r12, 0x0345	; 0x800345 <config+0x1a>
    1dbc:	d0 90 46 03 	lds	r13, 0x0346	; 0x800346 <config+0x1b>
    1dc0:	0d 2c       	mov	r0, r13
    1dc2:	00 0c       	add	r0, r0
    1dc4:	ee 08       	sbc	r14, r14
    1dc6:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    1dd0:	82 e0       	ldi	r24, 0x02	; 2
    1dd2:	c8 16       	cp	r12, r24
    1dd4:	d1 04       	cpc	r13, r1
    1dd6:	e1 04       	cpc	r14, r1
    1dd8:	f1 04       	cpc	r15, r1
    1dda:	74 f0       	brlt	.+28     	; 0x1df8 <PlayChant()+0x272>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1ddc:	0e 94 2a 20 	call	0x4054	; 0x4054 <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    1de0:	a7 01       	movw	r20, r14
    1de2:	96 01       	movw	r18, r12
    1de4:	21 50       	subi	r18, 0x01	; 1
    1de6:	31 09       	sbc	r19, r1
    1de8:	41 09       	sbc	r20, r1
    1dea:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1dec:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1df0:	6f 5f       	subi	r22, 0xFF	; 255
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	8f 4f       	sbci	r24, 0xFF	; 255
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:974
    1df8:	86 e0       	ldi	r24, 0x06	; 6
    1dfa:	c7 cf       	rjmp	.-114    	; 0x1d8a <PlayChant()+0x204>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:980
            delay(1000);
            playSong = End_of_Song;
         }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    1dfc:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    1e00:	89 2b       	or	r24, r25
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <PlayChant()+0x280>
    1e04:	f3 ce       	rjmp	.-538    	; 0x1bec <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:982
        {
            playSong = Starting_Song;
    1e06:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <playSong>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:983
            lcd.clear();
    1e0a:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:984
            appMode = APP_NORMAL_MODE;
    1e0e:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:985
            timrLCD = millis();
    1e12:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    1e16:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timrLCD>
    1e1a:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timrLCD+0x1>
    1e1e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timrLCD+0x2>
    1e22:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:986
            digitalWrite(AMP, LOW);
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:990
        }
        break;
    }
}
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:986
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    1e32:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <digitalWrite>

00001e36 <refreshMenuDisplay(unsigned char)>:
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:835
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	67 97       	sbiw	r28, 0x17	; 23
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:838
    char nameBuf[LCD_COLS + 1];

    lcd.setCursor(0, 0);
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:839
    if (Menu1.currentItemHasChildren())
    1e54:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.100]>
    1e58:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <Menu1+0x6>
    1e5c:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <Menu1+0x3>
    1e60:	f0 91 01 04 	lds	r31, 0x0401	; 0x800401 <Menu1+0x4>
    1e64:	88 23       	and	r24, r24
    1e66:	49 f1       	breq	.+82     	; 0x1eba <refreshMenuDisplay(unsigned char)+0x84>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    1e68:	86 e0       	ldi	r24, 0x06	; 6
    1e6a:	98 9f       	mul	r25, r24
    1e6c:	e0 0d       	add	r30, r0
    1e6e:	f1 1d       	adc	r31, r1
    1e70:	11 24       	eor	r1, r1
    1e72:	31 96       	adiw	r30, 0x01	; 1
    1e74:	65 91       	lpm	r22, Z+
    1e76:	74 91       	lpm	r23, Z
    1e78:	ce 01       	movw	r24, r28
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	0e 94 82 20 	call	0x4104	; 0x4104 <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:841
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1e80:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:842
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    1e84:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:854
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1e86:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:855
            lcd.print(strbuf);
    1e8a:	8c ee       	ldi	r24, 0xEC	; 236
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:856
            lcd.setCursor(0, 1);
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:857
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    1e9a:	81 e2       	ldi	r24, 0x21	; 33
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:870
                StYear = rtc.now().year();
            }
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1e9e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    1ea2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:873
        }
    }
}
    1ea6:	67 96       	adiw	r28, 0x17	; 23
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	08 95       	ret
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:53
    1eba:	86 e0       	ldi	r24, 0x06	; 6
    1ebc:	98 9f       	mul	r25, r24
    1ebe:	e0 0d       	add	r30, r0
    1ec0:	f1 1d       	adc	r31, r1
    1ec2:	11 24       	eor	r1, r1
    1ec4:	31 96       	adiw	r30, 0x01	; 1
    1ec6:	65 91       	lpm	r22, Z+
    1ec8:	74 91       	lpm	r23, Z
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	0e 94 82 20 	call	0x4104	; 0x4104 <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:850
        lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
    }
    else
    {
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1ed2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:852

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    1ed6:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    1eda:	18 2f       	mov	r17, r24
    1edc:	81 11       	cpse	r24, r1
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <refreshMenuDisplay(unsigned char)+0xae>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:854
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1ee0:	8f e7       	ldi	r24, 0x7F	; 127
    1ee2:	d1 cf       	rjmp	.-94     	; 0x1e86 <refreshMenuDisplay(unsigned char)+0x50>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:861
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            if (cmdId == mnuCmdSetDate)
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	01 f5       	brne	.+64     	; 0x1f28 <refreshMenuDisplay(unsigned char)+0xf2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:863
            {
                StDate = rtc.now().day();
    1ee8:	ce 01       	movw	r24, r28
    1eea:	42 96       	adiw	r24, 0x12	; 18
    1eec:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    1ef0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <StDate+0x1>
    1ef8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:864
                StMonth = rtc.now().month();
    1efc:	ce 01       	movw	r24, r28
    1efe:	42 96       	adiw	r24, 0x12	; 18
    1f00:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    1f04:	8b 89       	ldd	r24, Y+19	; 0x13
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <StMonth+0x1>
    1f0c:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:865
                StYear = rtc.now().year();
    1f10:	ce 01       	movw	r24, r28
    1f12:	42 96       	adiw	r24, 0x12	; 18
    1f14:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    1f18:	8a 89       	ldd	r24, Y+18	; 0x12
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	80 53       	subi	r24, 0x30	; 48
    1f1e:	98 4f       	sbci	r25, 0xF8	; 248
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:865
    1f20:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <StYear+0x1>
    1f24:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <StYear>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:867
            }
            lcd.print(strbuf);
    1f28:	8c ee       	ldi	r24, 0xEC	; 236
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:868
            lcd.setCursor(0, 1);
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:869
            lcd.print(" ");
    1f38:	84 e2       	ldi	r24, 0x24	; 36
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:870
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1f40:	81 2f       	mov	r24, r17
    1f42:	0e 94 cf 0b 	call	0x179e	; 0x179e <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    1f46:	ab cf       	rjmp	.-170    	; 0x1e9e <refreshMenuDisplay(unsigned char)+0x68>

00001f48 <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	2f 93       	push	r18
    1f54:	3f 93       	push	r19
    1f56:	8f 93       	push	r24
    1f58:	9f 93       	push	r25
    1f5a:	af 93       	push	r26
    1f5c:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1f5e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_millis>
    1f62:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_millis+0x1>
    1f66:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_millis+0x2>
    1f6a:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1f6e:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1f72:	23 e0       	ldi	r18, 0x03	; 3
    1f74:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1f76:	2d 37       	cpi	r18, 0x7D	; 125
    1f78:	68 f1       	brcs	.+90     	; 0x1fd4 <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1f7a:	26 e8       	ldi	r18, 0x86	; 134
    1f7c:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1f7e:	02 96       	adiw	r24, 0x02	; 2
    1f80:	a1 1d       	adc	r26, r1
    1f82:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1f84:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1f88:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <timer0_millis>
    1f8c:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <timer0_millis+0x1>
    1f90:	a0 93 c7 02 	sts	0x02C7, r26	; 0x8002c7 <timer0_millis+0x2>
    1f94:	b0 93 c8 02 	sts	0x02C8, r27	; 0x8002c8 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1f98:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <timer0_overflow_count>
    1f9c:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <timer0_overflow_count+0x1>
    1fa0:	a0 91 cb 02 	lds	r26, 0x02CB	; 0x8002cb <timer0_overflow_count+0x2>
    1fa4:	b0 91 cc 02 	lds	r27, 0x02CC	; 0x8002cc <timer0_overflow_count+0x3>
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	a1 1d       	adc	r26, r1
    1fac:	b1 1d       	adc	r27, r1
    1fae:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <timer0_overflow_count>
    1fb2:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <timer0_overflow_count+0x1>
    1fb6:	a0 93 cb 02 	sts	0x02CB, r26	; 0x8002cb <timer0_overflow_count+0x2>
    1fba:	b0 93 cc 02 	sts	0x02CC, r27	; 0x8002cc <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1fbe:	bf 91       	pop	r27
    1fc0:	af 91       	pop	r26
    1fc2:	9f 91       	pop	r25
    1fc4:	8f 91       	pop	r24
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	0f 90       	pop	r0
    1fd0:	1f 90       	pop	r1
    1fd2:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	b1 1d       	adc	r27, r1
    1fda:	d4 cf       	rjmp	.-88     	; 0x1f84 <__vector_16+0x3c>

00001fdc <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    1fdc:	1f 92       	push	r1
    1fde:	0f 92       	push	r0
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	2f 93       	push	r18
    1fe8:	3f 93       	push	r19
    1fea:	4f 93       	push	r20
    1fec:	5f 93       	push	r21
    1fee:	6f 93       	push	r22
    1ff0:	7f 93       	push	r23
    1ff2:	8f 93       	push	r24
    1ff4:	9f 93       	push	r25
    1ff6:	af 93       	push	r26
    1ff8:	bf 93       	push	r27
    1ffa:	ef 93       	push	r30
    1ffc:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1ffe:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
    2002:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    2006:	30 97       	sbiw	r30, 0x00	; 0
    2008:	49 f0       	breq	.+18     	; 0x201c <__vector_3+0x40>
    200a:	a6 85       	ldd	r26, Z+14	; 0x0e
    200c:	b7 85       	ldd	r27, Z+15	; 0x0f
    200e:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2010:	96 8d       	ldd	r25, Z+30	; 0x1e
    2012:	91 ff       	sbrs	r25, 1
    2014:	14 c0       	rjmp	.+40     	; 0x203e <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2016:	9c 91       	ld	r25, X
    2018:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    201a:	a1 f4       	brne	.+40     	; 0x2044 <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	7f 91       	pop	r23
    202a:	6f 91       	pop	r22
    202c:	5f 91       	pop	r21
    202e:	4f 91       	pop	r20
    2030:	3f 91       	pop	r19
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    203e:	9c 91       	ld	r25, X
    2040:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2042:	61 f7       	brne	.-40     	; 0x201c <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2044:	a3 89       	ldd	r26, Z+19	; 0x13
    2046:	b4 89       	ldd	r27, Z+20	; 0x14
    2048:	9c 91       	ld	r25, X
    204a:	85 89       	ldd	r24, Z+21	; 0x15
    204c:	80 95       	com	r24
    204e:	89 23       	and	r24, r25
    2050:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2052:	86 89       	ldd	r24, Z+22	; 0x16
    2054:	97 89       	ldd	r25, Z+23	; 0x17
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    205a:	60 8d       	ldd	r22, Z+24	; 0x18
    205c:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    205e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2060:	b7 85       	ldd	r27, Z+15	; 0x0f
    2062:	55 85       	ldd	r21, Z+13	; 0x0d
    2064:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2066:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2068:	cb 01       	movw	r24, r22
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    206e:	82 2f       	mov	r24, r18
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	95 95       	asr	r25
    2074:	87 95       	ror	r24
    2076:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2078:	4c 91       	ld	r20, X
    207a:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    207c:	09 f0       	breq	.+2      	; 0x2080 <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    207e:	20 68       	ori	r18, 0x80	; 128
    2080:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    2082:	91 f7       	brne	.-28     	; 0x2068 <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    2084:	86 8d       	ldd	r24, Z+30	; 0x1e
    2086:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    2088:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    208a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	8f 73       	andi	r24, 0x3F	; 63
    2094:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    2096:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
    209a:	38 17       	cp	r19, r24
    209c:	99 f0       	breq	.+38     	; 0x20c4 <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    209e:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	ac 57       	subi	r26, 0x7C	; 124
    20a6:	bd 4f       	sbci	r27, 0xFD	; 253
    20a8:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    20aa:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    20ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    20b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    20b6:	a3 89       	ldd	r26, Z+19	; 0x13
    20b8:	b4 89       	ldd	r27, Z+20	; 0x14
    20ba:	8c 91       	ld	r24, X
    20bc:	95 89       	ldd	r25, Z+21	; 0x15
    20be:	89 2b       	or	r24, r25
    20c0:	8c 93       	st	X, r24
    20c2:	ac cf       	rjmp	.-168    	; 0x201c <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    20c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    20c6:	81 60       	ori	r24, 0x01	; 1
    20c8:	86 8f       	std	Z+30, r24	; 0x1e
    20ca:	f1 cf       	rjmp	.-30     	; 0x20ae <__vector_3+0xd2>

000020cc <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    20cc:	1f 92       	push	r1
    20ce:	0f 92       	push	r0
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	0f 92       	push	r0
    20d4:	11 24       	eor	r1, r1
    20d6:	2f 93       	push	r18
    20d8:	3f 93       	push	r19
    20da:	4f 93       	push	r20
    20dc:	5f 93       	push	r21
    20de:	6f 93       	push	r22
    20e0:	7f 93       	push	r23
    20e2:	8f 93       	push	r24
    20e4:	9f 93       	push	r25
    20e6:	af 93       	push	r26
    20e8:	bf 93       	push	r27
    20ea:	ef 93       	push	r30
    20ec:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    20ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    20f2:	88 7f       	andi	r24, 0xF8	; 248
    20f4:	80 36       	cpi	r24, 0x60	; 96
    20f6:	09 f4       	brne	.+2      	; 0x20fa <__vector_24+0x2e>
    20f8:	4a c0       	rjmp	.+148    	; 0x218e <__vector_24+0xc2>
    20fa:	f0 f5       	brcc	.+124    	; 0x2178 <__vector_24+0xac>
    20fc:	88 32       	cpi	r24, 0x28	; 40
    20fe:	09 f4       	brne	.+2      	; 0x2102 <__vector_24+0x36>
    2100:	a7 c0       	rjmp	.+334    	; 0x2250 <__vector_24+0x184>
    2102:	18 f5       	brcc	.+70     	; 0x214a <__vector_24+0x7e>
    2104:	80 31       	cpi	r24, 0x10	; 16
    2106:	09 f4       	brne	.+2      	; 0x210a <__vector_24+0x3e>
    2108:	9b c0       	rjmp	.+310    	; 0x2240 <__vector_24+0x174>
    210a:	b8 f4       	brcc	.+46     	; 0x213a <__vector_24+0x6e>
    210c:	88 23       	and	r24, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <__vector_24+0x46>
    2110:	f9 c0       	rjmp	.+498    	; 0x2304 <__vector_24+0x238>
    2112:	88 30       	cpi	r24, 0x08	; 8
    2114:	09 f4       	brne	.+2      	; 0x2118 <__vector_24+0x4c>
    2116:	94 c0       	rjmp	.+296    	; 0x2240 <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    213a:	88 31       	cpi	r24, 0x18	; 24
    213c:	09 f4       	brne	.+2      	; 0x2140 <__vector_24+0x74>
    213e:	88 c0       	rjmp	.+272    	; 0x2250 <__vector_24+0x184>
    2140:	80 32       	cpi	r24, 0x20	; 32
    2142:	51 f7       	brne	.-44     	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2144:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <twi_error>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    214a:	80 34       	cpi	r24, 0x40	; 64
    214c:	09 f4       	brne	.+2      	; 0x2150 <__vector_24+0x84>
    214e:	9d c0       	rjmp	.+314    	; 0x228a <__vector_24+0x1be>
    2150:	40 f4       	brcc	.+16     	; 0x2162 <__vector_24+0x96>
    2152:	80 33       	cpi	r24, 0x30	; 48
    2154:	b9 f3       	breq	.-18     	; 0x2144 <__vector_24+0x78>
    2156:	88 33       	cpi	r24, 0x38	; 56
    2158:	f9 f6       	brne	.-66     	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    215a:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    215e:	85 ec       	ldi	r24, 0xC5	; 197
    2160:	b0 c0       	rjmp	.+352    	; 0x22c2 <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2162:	80 35       	cpi	r24, 0x50	; 80
    2164:	09 f4       	brne	.+2      	; 0x2168 <__vector_24+0x9c>
    2166:	85 c0       	rjmp	.+266    	; 0x2272 <__vector_24+0x1a6>
    2168:	88 35       	cpi	r24, 0x58	; 88
    216a:	09 f4       	brne	.+2      	; 0x216e <__vector_24+0xa2>
    216c:	96 c0       	rjmp	.+300    	; 0x229a <__vector_24+0x1ce>
    216e:	88 34       	cpi	r24, 0x48	; 72
    2170:	99 f6       	brne	.-90     	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2172:	0e 94 3e 06 	call	0xc7c	; 0xc7c <twi_stop>
    2176:	d0 cf       	rjmp	.-96     	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2178:	88 39       	cpi	r24, 0x98	; 152
    217a:	09 f4       	brne	.+2      	; 0x217e <__vector_24+0xb2>
    217c:	8c c0       	rjmp	.+280    	; 0x2296 <__vector_24+0x1ca>
    217e:	38 f5       	brcc	.+78     	; 0x21ce <__vector_24+0x102>
    2180:	88 37       	cpi	r24, 0x78	; 120
    2182:	29 f0       	breq	.+10     	; 0x218e <__vector_24+0xc2>
    2184:	50 f4       	brcc	.+20     	; 0x219a <__vector_24+0xce>
    2186:	88 36       	cpi	r24, 0x68	; 104
    2188:	11 f0       	breq	.+4      	; 0x218e <__vector_24+0xc2>
    218a:	80 37       	cpi	r24, 0x70	; 112
    218c:	29 f6       	brne	.-118    	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2194:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    2198:	57 c0       	rjmp	.+174    	; 0x2248 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    219a:	88 38       	cpi	r24, 0x88	; 136
    219c:	09 f4       	brne	.+2      	; 0x21a0 <__vector_24+0xd4>
    219e:	7b c0       	rjmp	.+246    	; 0x2296 <__vector_24+0x1ca>
    21a0:	80 39       	cpi	r24, 0x90	; 144
    21a2:	19 f0       	breq	.+6      	; 0x21aa <__vector_24+0xde>
    21a4:	80 38       	cpi	r24, 0x80	; 128
    21a6:	09 f0       	breq	.+2      	; 0x21aa <__vector_24+0xde>
    21a8:	b7 cf       	rjmp	.-146    	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    21aa:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    21ae:	80 32       	cpi	r24, 0x20	; 32
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__vector_24+0xe8>
    21b2:	71 c0       	rjmp	.+226    	; 0x2296 <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    21b4:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	8e 0f       	add	r24, r30
    21bc:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_rxBufferIndex>
    21c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	ed 59       	subi	r30, 0x9D	; 157
    21c8:	fd 4f       	sbci	r31, 0xFD	; 253
    21ca:	80 83       	st	Z, r24
    21cc:	3d c0       	rjmp	.+122    	; 0x2248 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21ce:	80 3b       	cpi	r24, 0xB0	; 176
    21d0:	39 f0       	breq	.+14     	; 0x21e0 <__vector_24+0x114>
    21d2:	e0 f4       	brcc	.+56     	; 0x220c <__vector_24+0x140>
    21d4:	80 3a       	cpi	r24, 0xA0	; 160
    21d6:	09 f4       	brne	.+2      	; 0x21da <__vector_24+0x10e>
    21d8:	79 c0       	rjmp	.+242    	; 0x22cc <__vector_24+0x200>
    21da:	88 3a       	cpi	r24, 0xA8	; 168
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__vector_24+0x114>
    21de:	9c cf       	rjmp	.-200    	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    21e6:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    21ea:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    21ee:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_onSlaveTransmit>
    21f2:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <twi_onSlaveTransmit+0x1>
    21f6:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    21f8:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    21fc:	81 11       	cpse	r24, r1
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    2206:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_txBuffer>
    220a:	09 c0       	rjmp	.+18     	; 0x221e <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    220c:	80 3c       	cpi	r24, 0xC0	; 192
    220e:	09 f4       	brne	.+2      	; 0x2212 <__vector_24+0x146>
    2210:	a6 cf       	rjmp	.-180    	; 0x215e <__vector_24+0x92>
    2212:	88 3c       	cpi	r24, 0xC8	; 200
    2214:	09 f4       	brne	.+2      	; 0x2218 <__vector_24+0x14c>
    2216:	a3 cf       	rjmp	.-186    	; 0x215e <__vector_24+0x92>
    2218:	88 3b       	cpi	r24, 0xB8	; 184
    221a:	09 f0       	breq	.+2      	; 0x221e <__vector_24+0x152>
    221c:	7d cf       	rjmp	.-262    	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    221e:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_txBufferIndex>
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	8e 0f       	add	r24, r30
    2226:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_txBufferIndex>
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	ef 5b       	subi	r30, 0xBF	; 191
    222e:	fd 4f       	sbci	r31, 0xFD	; 253
    2230:	80 81       	ld	r24, Z
    2232:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2236:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_txBufferIndex>
    223a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    223e:	29 c0       	rjmp	.+82     	; 0x2292 <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2240:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2244:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2248:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    224a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    224e:	64 cf       	rjmp	.-312    	; 0x2118 <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2250:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    2254:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_masterBufferLength>
    2258:	98 17       	cp	r25, r24
    225a:	58 f5       	brcc	.+86     	; 0x22b2 <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    225c:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	8e 0f       	add	r24, r30
    2264:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_masterBufferIndex>
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	ee 56       	subi	r30, 0x6E	; 110
    226c:	fc 4f       	sbci	r31, 0xFC	; 252
    226e:	80 81       	ld	r24, Z
    2270:	e9 cf       	rjmp	.-46     	; 0x2244 <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2272:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	8e 0f       	add	r24, r30
    227a:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_masterBufferIndex>
    227e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	ee 56       	subi	r30, 0x6E	; 110
    2286:	fc 4f       	sbci	r31, 0xFC	; 252
    2288:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    228a:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    228e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2292:	98 17       	cp	r25, r24
    2294:	c8 f2       	brcs	.-78     	; 0x2248 <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2296:	85 e8       	ldi	r24, 0x85	; 133
    2298:	d8 cf       	rjmp	.-80     	; 0x224a <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    229a:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_masterBufferIndex>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	8e 0f       	add	r24, r30
    22a2:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_masterBufferIndex>
    22a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	ee 56       	subi	r30, 0x6E	; 110
    22ae:	fc 4f       	sbci	r31, 0xFC	; 252
    22b0:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    22b2:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <twi_sendStop>
    22b6:	81 11       	cpse	r24, r1
    22b8:	5c cf       	rjmp	.-328    	; 0x2172 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22c0:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    22c6:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <twi_state>
    22ca:	26 cf       	rjmp	.-436    	; 0x2118 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    22cc:	85 ec       	ldi	r24, 0xC5	; 197
    22ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    22d2:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    22d6:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    22da:	80 32       	cpi	r24, 0x20	; 32
    22dc:	30 f4       	brcc	.+12     	; 0x22ea <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22de:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	ed 59       	subi	r30, 0x9D	; 157
    22e6:	fd 4f       	sbci	r31, 0xFD	; 253
    22e8:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22ea:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <twi_rxBufferIndex>
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <twi_onSlaveReceive>
    22f4:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <twi_onSlaveReceive+0x1>
    22f8:	83 e6       	ldi	r24, 0x63	; 99
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22fe:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    2302:	0a cf       	rjmp	.-492    	; 0x2118 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2304:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <twi_error>
    2308:	34 cf       	rjmp	.-408    	; 0x2172 <__vector_24+0xa6>

0000230a <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549>:
_GLOBAL__I_65535_0_ChantBellv2.2.ino.cpp.o.3549():
    230a:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <Wire+0x3>
    230e:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <Wire+0x2>
    2312:	88 ee       	ldi	r24, 0xE8	; 232
    2314:	93 e0       	ldi	r25, 0x03	; 3
    2316:	a0 e0       	ldi	r26, 0x00	; 0
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Wire+0x4>
    231e:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <Wire+0x5>
    2322:	a0 93 1f 04 	sts	0x041F, r26	; 0x80041f <Wire+0x6>
    2326:	b0 93 20 04 	sts	0x0420, r27	; 0x800420 <Wire+0x7>
    232a:	20 e4       	ldi	r18, 0x40	; 64
    232c:	31 e0       	ldi	r19, 0x01	; 1
    232e:	30 93 1a 04 	sts	0x041A, r19	; 0x80041a <Wire+0x1>
    2332:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <Wire>
    2336:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <mySoftwareSerial+0x3>
    233a:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <mySoftwareSerial+0x2>
    233e:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <mySoftwareSerial+0x4>
    2342:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <mySoftwareSerial+0x5>
    2346:	a0 93 ab 04 	sts	0x04AB, r26	; 0x8004ab <mySoftwareSerial+0x6>
    234a:	b0 93 ac 04 	sts	0x04AC, r27	; 0x8004ac <mySoftwareSerial+0x7>
    234e:	8e e5       	ldi	r24, 0x5E	; 94
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <mySoftwareSerial+0x1>
    2356:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <mySoftwareSerial>
    235a:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <mySoftwareSerial+0x17>
    235e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <mySoftwareSerial+0x16>
    2362:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <mySoftwareSerial+0x19>
    2366:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <mySoftwareSerial+0x18>
    236a:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <mySoftwareSerial+0x1b>
    236e:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <mySoftwareSerial+0x1a>
    2372:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <mySoftwareSerial+0x1d>
    2376:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <mySoftwareSerial+0x1c>
    237a:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mySoftwareSerial+0x1e>
    237e:	6e 7f       	andi	r22, 0xFE	; 254
    2380:	6d 7f       	andi	r22, 0xFD	; 253
    2382:	60 93 c3 04 	sts	0x04C3, r22	; 0x8004c3 <mySoftwareSerial+0x1e>
    2386:	66 95       	lsr	r22
    2388:	61 70       	andi	r22, 0x01	; 1
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	68 27       	eor	r22, r24
    238e:	83 e0       	ldi	r24, 0x03	; 3
    2390:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
    2394:	61 e0       	ldi	r22, 0x01	; 1
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
    239c:	e5 ed       	ldi	r30, 0xD5	; 213
    239e:	f2 e0       	ldi	r31, 0x02	; 2
    23a0:	e4 91       	lpm	r30, Z
    23a2:	e0 93 b5 04 	sts	0x04B5, r30	; 0x8004b5 <mySoftwareSerial+0x10>
    23a6:	ee eb       	ldi	r30, 0xBE	; 190
    23a8:	f2 e0       	ldi	r31, 0x02	; 2
    23aa:	e4 91       	lpm	r30, Z
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ef 54       	subi	r30, 0x4F	; 79
    23b4:	fd 4f       	sbci	r31, 0xFD	; 253
    23b6:	85 91       	lpm	r24, Z+
    23b8:	94 91       	lpm	r25, Z
    23ba:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <mySoftwareSerial+0x12>
    23be:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <mySoftwareSerial+0x11>
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
    23ca:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <mySoftwareSerial+0x1e>
    23ce:	81 fd       	sbrc	r24, 1
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0xd0>
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <mySoftwareSerial+0xc>
    23e0:	e4 ed       	ldi	r30, 0xD4	; 212
    23e2:	f2 e0       	ldi	r31, 0x02	; 2
    23e4:	e4 91       	lpm	r30, Z
    23e6:	e0 93 b2 04 	sts	0x04B2, r30	; 0x8004b2 <mySoftwareSerial+0xd>
    23ea:	ed eb       	ldi	r30, 0xBD	; 189
    23ec:	f2 e0       	ldi	r31, 0x02	; 2
    23ee:	e4 91       	lpm	r30, Z
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e9 55       	subi	r30, 0x59	; 89
    23f8:	fd 4f       	sbci	r31, 0xFD	; 253
    23fa:	25 91       	lpm	r18, Z+
    23fc:	34 91       	lpm	r19, Z
    23fe:	30 93 b4 04 	sts	0x04B4, r19	; 0x8004b4 <mySoftwareSerial+0xf>
    2402:	20 93 b3 04 	sts	0x04B3, r18	; 0x8004b3 <mySoftwareSerial+0xe>
    2406:	44 ef       	ldi	r20, 0xF4	; 244
    2408:	51 e0       	ldi	r21, 0x01	; 1
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	40 93 85 04 	sts	0x0485, r20	; 0x800485 <myDFPlayer+0x6>
    2412:	50 93 86 04 	sts	0x0486, r21	; 0x800486 <myDFPlayer+0x7>
    2416:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <myDFPlayer+0x8>
    241a:	70 93 88 04 	sts	0x0488, r23	; 0x800488 <myDFPlayer+0x9>
    241e:	9a e0       	ldi	r25, 0x0A	; 10
    2420:	e7 e1       	ldi	r30, 0x17	; 23
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	a3 e9       	ldi	r26, 0x93	; 147
    2426:	b4 e0       	ldi	r27, 0x04	; 4
    2428:	01 90       	ld	r0, Z+
    242a:	0d 92       	st	X+, r0
    242c:	9a 95       	dec	r25
    242e:	e1 f7       	brne	.-8      	; 0x2428 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0x11e>
    2430:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x1e>
    2434:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <myDFPlayer+0x1f>
    2438:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <myDFPlayer+0x24>
    243c:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <myDFPlayer+0x25>
    2440:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <lcd+0x3>
    2444:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <lcd+0x2>
    2448:	22 e5       	ldi	r18, 0x52	; 82
    244a:	31 e0       	ldi	r19, 0x01	; 1
    244c:	30 93 74 04 	sts	0x0474, r19	; 0x800474 <lcd+0x1>
    2450:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <lcd>
    2454:	97 e2       	ldi	r25, 0x27	; 39
    2456:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <lcd+0x4>
    245a:	90 e1       	ldi	r25, 0x10	; 16
    245c:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <lcd+0x9>
    2460:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <lcd+0xa>
    2464:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <lcd+0xb>
    2468:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <bell+0x5>
    246c:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <bell+0x4>
    2470:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <bell+0x3>
    2474:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <bell>
    2478:	ec e9       	ldi	r30, 0x9C	; 156
    247a:	f2 e0       	ldi	r31, 0x02	; 2
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	8c 30       	cpi	r24, 0x0C	; 12
    2480:	51 f0       	breq	.+20     	; 0x2496 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0x18c>
    2482:	94 91       	lpm	r25, Z
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	09 f4       	brne	.+2      	; 0x248a <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0x180>
    2488:	9f 5f       	subi	r25, 0xFF	; 255
    248a:	21 e0       	ldi	r18, 0x01	; 1
    248c:	28 0f       	add	r18, r24
    248e:	31 96       	adiw	r30, 0x01	; 1
    2490:	99 23       	and	r25, r25
    2492:	09 f4       	brne	.+2      	; 0x2496 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0x18c>
    2494:	4d c0       	rjmp	.+154    	; 0x2530 <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0x226>
    2496:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <bell+0x1>
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <bell+0x2>
    24a0:	62 e9       	ldi	r22, 0x92	; 146
    24a2:	71 e0       	ldi	r23, 0x01	; 1
    24a4:	85 e2       	ldi	r24, 0x25	; 37
    24a6:	94 e0       	ldi	r25, 0x04	; 4
    24a8:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24ac:	66 e9       	ldi	r22, 0x96	; 150
    24ae:	71 e0       	ldi	r23, 0x01	; 1
    24b0:	8b e2       	ldi	r24, 0x2B	; 43
    24b2:	94 e0       	ldi	r25, 0x04	; 4
    24b4:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24b8:	6a e9       	ldi	r22, 0x9A	; 154
    24ba:	71 e0       	ldi	r23, 0x01	; 1
    24bc:	81 e3       	ldi	r24, 0x31	; 49
    24be:	94 e0       	ldi	r25, 0x04	; 4
    24c0:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24c4:	6e e9       	ldi	r22, 0x9E	; 158
    24c6:	71 e0       	ldi	r23, 0x01	; 1
    24c8:	87 e3       	ldi	r24, 0x37	; 55
    24ca:	94 e0       	ldi	r25, 0x04	; 4
    24cc:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24d0:	62 ea       	ldi	r22, 0xA2	; 162
    24d2:	71 e0       	ldi	r23, 0x01	; 1
    24d4:	8d e3       	ldi	r24, 0x3D	; 61
    24d6:	94 e0       	ldi	r25, 0x04	; 4
    24d8:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24dc:	66 ea       	ldi	r22, 0xA6	; 166
    24de:	71 e0       	ldi	r23, 0x01	; 1
    24e0:	83 e4       	ldi	r24, 0x43	; 67
    24e2:	94 e0       	ldi	r25, 0x04	; 4
    24e4:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24e8:	6a ea       	ldi	r22, 0xAA	; 170
    24ea:	71 e0       	ldi	r23, 0x01	; 1
    24ec:	89 e4       	ldi	r24, 0x49	; 73
    24ee:	94 e0       	ldi	r25, 0x04	; 4
    24f0:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    24f4:	6e ea       	ldi	r22, 0xAE	; 174
    24f6:	71 e0       	ldi	r23, 0x01	; 1
    24f8:	8f e4       	ldi	r24, 0x4F	; 79
    24fa:	94 e0       	ldi	r25, 0x04	; 4
    24fc:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    2500:	62 eb       	ldi	r22, 0xB2	; 178
    2502:	71 e0       	ldi	r23, 0x01	; 1
    2504:	85 e5       	ldi	r24, 0x55	; 85
    2506:	94 e0       	ldi	r25, 0x04	; 4
    2508:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    250c:	66 eb       	ldi	r22, 0xB6	; 182
    250e:	71 e0       	ldi	r23, 0x01	; 1
    2510:	8b e5       	ldi	r24, 0x5B	; 91
    2512:	94 e0       	ldi	r25, 0x04	; 4
    2514:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    2518:	6a eb       	ldi	r22, 0xBA	; 186
    251a:	71 e0       	ldi	r23, 0x01	; 1
    251c:	81 e6       	ldi	r24, 0x61	; 97
    251e:	94 e0       	ldi	r25, 0x04	; 4
    2520:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    2524:	6e eb       	ldi	r22, 0xBE	; 190
    2526:	71 e0       	ldi	r23, 0x01	; 1
    2528:	87 e6       	ldi	r24, 0x67	; 103
    252a:	94 e0       	ldi	r25, 0x04	; 4
    252c:	0c 94 45 0b 	jmp	0x168a	; 0x168a <String::String(char const*)>
    2530:	82 2f       	mov	r24, r18
    2532:	a5 cf       	rjmp	.-182    	; 0x247e <global constructors keyed to 65535_0_ChantBellv2.2.ino.cpp.o.3549+0x174>

00002534 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	ef 97       	sbiw	r28, 0x3f	; 63
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2548:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    254a:	84 b5       	in	r24, 0x24	; 36
    254c:	83 60       	ori	r24, 0x03	; 3
    254e:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2550:	85 b5       	in	r24, 0x25	; 37
    2552:	83 60       	ori	r24, 0x03	; 3
    2554:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2556:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    255a:	81 60       	ori	r24, 0x01	; 1
    255c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2566:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    256a:	81 60       	ori	r24, 0x01	; 1
    256c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2570:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2574:	81 60       	ori	r24, 0x01	; 1
    2576:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    257a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    257e:	84 60       	ori	r24, 0x04	; 4
    2580:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2584:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2588:	81 60       	ori	r24, 0x01	; 1
    258a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    258e:	87 e8       	ldi	r24, 0x87	; 135
    2590:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2594:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    2598:	80 e4       	ldi	r24, 0x40	; 64
    259a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    259e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    25a2:	80 64       	ori	r24, 0x40	; 64
    25a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    25a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    25ac:	86 fd       	sbrc	r24, 6
    25ae:	fc cf       	rjmp	.-8      	; 0x25a8 <main+0x74>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    25b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    25b4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    25b8:	76 2f       	mov	r23, r22
    25ba:	68 2f       	mov	r22, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:80
byte processMenuCommand(byte cmdId);
void showTime();

void setup()
{
    randomSeed(analogRead(A0));
    25bc:	07 2e       	mov	r0, r23
    25be:	00 0c       	add	r0, r0
    25c0:	88 0b       	sbc	r24, r24
    25c2:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    25c4:	61 15       	cp	r22, r1
    25c6:	71 05       	cpc	r23, r1
    25c8:	81 05       	cpc	r24, r1
    25ca:	91 05       	cpc	r25, r1
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <main+0x9e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    25ce:	0e 94 79 20 	call	0x40f2	; 0x40f2 <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:82
    char intstr[5];
    pinMode(AMP, OUTPUT);
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	8c e0       	ldi	r24, 0x0C	; 12
    25d6:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:83
    pinMode(STA_PIN, INPUT_PULLUP);
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:84
    pinMode(SELECT_BUT, INPUT_PULLUP);
    25e2:	62 e0       	ldi	r22, 0x02	; 2
    25e4:	85 e0       	ldi	r24, 0x05	; 5
    25e6:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:85
    pinMode(UP_BUT, INPUT_PULLUP);
    25ea:	62 e0       	ldi	r22, 0x02	; 2
    25ec:	86 e0       	ldi	r24, 0x06	; 6
    25ee:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:86
    pinMode(DOWN_BUT, INPUT_PULLUP);
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	87 e0       	ldi	r24, 0x07	; 7
    25f6:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:87
    pinMode(BACK_BUT, INPUT_PULLUP);
    25fa:	62 e0       	ldi	r22, 0x02	; 2
    25fc:	88 e0       	ldi	r24, 0x08	; 8
    25fe:	0e 94 32 03 	call	0x664	; 0x664 <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:88
    Wire.begin();
    2602:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.43]>
load():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:153
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    2606:	4c e2       	ldi	r20, 0x2C	; 44
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	8b e2       	ldi	r24, 0x2B	; 43
    2610:	93 e0       	ldi	r25, 0x03	; 3
    2612:	0e 94 be 20 	call	0x417c	; 0x417c <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:154
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    2616:	67 e2       	ldi	r22, 0x27	; 39
    2618:	71 e0       	ldi	r23, 0x01	; 1
    261a:	8b e2       	ldi	r24, 0x2B	; 43
    261c:	93 e0       	ldi	r25, 0x03	; 3
    261e:	0e 94 b7 23 	call	0x476e	; 0x476e <strcmp>
    2622:	89 2b       	or	r24, r25
    2624:	09 f4       	brne	.+2      	; 0x2628 <main+0xf4>
    2626:	4a c0       	rjmp	.+148    	; 0x26bc <main+0x188>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    2628:	67 e2       	ldi	r22, 0x27	; 39
    262a:	71 e0       	ldi	r23, 0x01	; 1
    262c:	8b e2       	ldi	r24, 0x2B	; 43
    262e:	93 e0       	ldi	r25, 0x03	; 3
    2630:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:12
  Song1_Count = 100;
    2634:	84 e6       	ldi	r24, 0x64	; 100
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x19>
    263c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:13
  Song2_Count = 100;
    2640:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x1b>
    2644:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:14
  startTime = 5; //5AM
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x10>
    2650:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:15
  endTime = 22; // 10PM
    2654:	86 e1       	ldi	r24, 0x16	; 22
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <config+0x12>
    265c:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:16
  vol = 20;
    2660:	84 e1       	ldi	r24, 0x14	; 20
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    2668:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:17
  backLightDur = 20;
    266c:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <config+0x14>
    2670:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:18
  MorSong1Time = 3;
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x21>
    267c:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x20>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:19
  EveSong1Time = 3;
    2680:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x25>
    2684:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:20
  MorSongNo = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x29>
    2690:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:21
  EveSongNo = 2;
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <config+0x2b>
    269c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:22
  SchlZone = 0;
    26a0:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:23
  SerialNo = 240;
    26a4:	80 ef       	ldi	r24, 0xF0	; 240
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x1f>
    26ac:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:24
  DataYear = 2022;
    26b0:	86 ee       	ldi	r24, 0xE6	; 230
    26b2:	97 e0       	ldi	r25, 0x07	; 7
    26b4:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x1d>
    26b8:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x1c>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    26bc:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.43]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    26c0:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    26c4:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	18 f0       	brcs	.+6      	; 0x26d2 <main+0x19e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    26cc:	98 e0       	ldi	r25, 0x08	; 8
    26ce:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    26d2:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    26d6:	62 e3       	ldi	r22, 0x32	; 50
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    26e2:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <lcd+0xb>
    26e6:	83 e7       	ldi	r24, 0x73	; 115
    26e8:	94 e0       	ldi	r25, 0x04	; 4
    26ea:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    26ee:	68 ee       	ldi	r22, 0xE8	; 232
    26f0:	73 e0       	ldi	r23, 0x03	; 3
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    26fa:	60 e3       	ldi	r22, 0x30	; 48
    26fc:	83 e7       	ldi	r24, 0x73	; 115
    26fe:	94 e0       	ldi	r25, 0x04	; 4
    2700:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    2704:	84 e9       	ldi	r24, 0x94	; 148
    2706:	91 e1       	ldi	r25, 0x11	; 17
    2708:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    270c:	60 e3       	ldi	r22, 0x30	; 48
    270e:	83 e7       	ldi	r24, 0x73	; 115
    2710:	94 e0       	ldi	r25, 0x04	; 4
    2712:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    2716:	84 e9       	ldi	r24, 0x94	; 148
    2718:	91 e1       	ldi	r25, 0x11	; 17
    271a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    271e:	60 e3       	ldi	r22, 0x30	; 48
    2720:	83 e7       	ldi	r24, 0x73	; 115
    2722:	94 e0       	ldi	r25, 0x04	; 4
    2724:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    2728:	86 e9       	ldi	r24, 0x96	; 150
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2730:	60 e2       	ldi	r22, 0x20	; 32
    2732:	83 e7       	ldi	r24, 0x73	; 115
    2734:	94 e0       	ldi	r25, 0x04	; 4
    2736:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    273a:	60 91 78 04 	lds	r22, 0x0478	; 0x800478 <lcd+0x5>
    273e:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	83 e7       	ldi	r24, 0x73	; 115
    2744:	94 e0       	ldi	r25, 0x04	; 4
    2746:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	6c e0       	ldi	r22, 0x0C	; 12
    2754:	83 e7       	ldi	r24, 0x73	; 115
    2756:	94 e0       	ldi	r25, 0x04	; 4
    2758:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    275c:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	d6 2e       	mov	r13, r22
    2764:	d0 92 7a 04 	sts	0x047A, r13	; 0x80047a <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	66 e0       	ldi	r22, 0x06	; 6
    276c:	83 e7       	ldi	r24, 0x73	; 115
    276e:	94 e0       	ldi	r25, 0x04	; 4
    2770:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	62 e0       	ldi	r22, 0x02	; 2
    2778:	83 e7       	ldi	r24, 0x73	; 115
    277a:	94 e0       	ldi	r25, 0x04	; 4
    277c:	0e 94 24 07 	call	0xe48	; 0xe48 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    2780:	80 ed       	ldi	r24, 0xD0	; 208
    2782:	97 e0       	ldi	r25, 0x07	; 7
    2784:	0e 94 6e 03 	call	0x6dc	; 0x6dc <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2788:	88 e0       	ldi	r24, 0x08	; 8
    278a:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	83 e7       	ldi	r24, 0x73	; 115
    2792:	94 e0       	ldi	r25, 0x04	; 4
    2794:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:92
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	85 e0       	ldi	r24, 0x05	; 5
    279c:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:93
    lcd.print(F("QTRON"));
    27a0:	8f e7       	ldi	r24, 0x7F	; 127
    27a2:	92 e0       	ldi	r25, 0x02	; 2
    27a4:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:94
    lcd.setCursor(0, 1);
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:95
    lcd.print(F("DEVOTIONAL CLOCK"));
    27b0:	8e e6       	ldi	r24, 0x6E	; 110
    27b2:	92 e0       	ldi	r25, 0x02	; 2
    27b4:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:96
    delay(2000);
    27b8:	60 ed       	ldi	r22, 0xD0	; 208
    27ba:	77 e0       	ldi	r23, 0x07	; 7
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:97
    lcd.clear();
    27c4:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:98
    lcd.setCursor(0, 0);
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:99
    inttostr(intstr, config.DataYear);
    27d0:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <config+0x1c>
    27d4:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <config+0x1d>
    27d8:	8e 01       	movw	r16, r28
    27da:	0f 5f       	subi	r16, 0xFF	; 255
    27dc:	1f 4f       	sbci	r17, 0xFF	; 255
    27de:	c8 01       	movw	r24, r16
    27e0:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:100
    lcd.print(fmt(strbuf, 2, "Ver : 2.2/", intstr));
    27e4:	1f 93       	push	r17
    27e6:	0f 93       	push	r16
    27e8:	82 ec       	ldi	r24, 0xC2	; 194
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	9f 93       	push	r25
    27ee:	8f 93       	push	r24
    27f0:	df 92       	push	r13
    27f2:	7c ee       	ldi	r23, 0xEC	; 236
    27f4:	e7 2e       	mov	r14, r23
    27f6:	73 e0       	ldi	r23, 0x03	; 3
    27f8:	f7 2e       	mov	r15, r23
    27fa:	ff 92       	push	r15
    27fc:	ef 92       	push	r14
    27fe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    2802:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:101
    lcd.setCursor(0, 1);
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:102
    inttostr(intstr, config.SerialNo);
    280e:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <config+0x1e>
    2812:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <config+0x1f>
    2816:	c8 01       	movw	r24, r16
    2818:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:103
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    281c:	1f 93       	push	r17
    281e:	0f 93       	push	r16
    2820:	8d ec       	ldi	r24, 0xCD	; 205
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	9f 93       	push	r25
    2826:	8f 93       	push	r24
    2828:	df 92       	push	r13
    282a:	ff 92       	push	r15
    282c:	ef 92       	push	r14
    282e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    2832:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:104
    delay(1000);
    2836:	68 ee       	ldi	r22, 0xE8	; 232
    2838:	73 e0       	ldi	r23, 0x03	; 3
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:105
    lcd.clear();
    2842:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:106
    lcd.setCursor(3, 0);
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	83 e0       	ldi	r24, 0x03	; 3
    284a:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:107
    lcd.print("Loading...");
    284e:	8b ed       	ldi	r24, 0xDB	; 219
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:109

    if (!digitalRead(SELECT_BUT))
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	89 2b       	or	r24, r25
    2868:	f1 f5       	brne	.+124    	; 0x28e6 <main+0x3b2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:111
    {
        lcd.setCursor(0, 1);
    286a:	61 e0       	ldi	r22, 0x01	; 1
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:112
        lcd.print("Service Mode");
    2872:	86 ee       	ldi	r24, 0xE6	; 230
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:113
        serviceMode = true;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <serviceMode>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    2880:	38 e6       	ldi	r19, 0x68	; 104
    2882:	c3 2e       	mov	r12, r19
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    2884:	49 e1       	ldi	r20, 0x19	; 25
    2886:	a4 2e       	mov	r10, r20
    2888:	44 e0       	ldi	r20, 0x04	; 4
    288a:	b4 2e       	mov	r11, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    288c:	50 e2       	ldi	r21, 0x20	; 32
    288e:	85 2e       	mov	r8, r21
    2890:	91 2c       	mov	r9, r1
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;
    2892:	dd 24       	eor	r13, r13
    2894:	d3 94       	inc	r13
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:15
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS1307::begin(TwoWire *wireInstance) {
  if (i2c_dev)
    2896:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <rtc>
    289a:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <rtc+0x1>
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	11 f0       	breq	.+4      	; 0x28a6 <main+0x372>
operator delete():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    28a2:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
operator new():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    28a6:	86 e0       	ldi	r24, 0x06	; 6
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 c1 21 	call	0x4382	; 0x4382 <malloc>
    28ae:	7c 01       	movw	r14, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    28b0:	fc 01       	movw	r30, r24
    28b2:	c0 82       	st	Z, r12
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    28b4:	b2 82       	std	Z+2, r11	; 0x02
    28b6:	a1 82       	std	Z+1, r10	; 0x01
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:13
  _begun = false;
    28b8:	13 82       	std	Z+3, r1	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    28ba:	95 82       	std	Z+5, r9	; 0x05
    28bc:	84 82       	std	Z+4, r8	; 0x04
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:17
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(DS1307_ADDRESS, wireInstance);
    28be:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <rtc+0x1>
    28c2:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <rtc>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
    28c6:	0e 94 00 03 	call	0x600	; 0x600 <TwoWire::begin() [clone .constprop.43]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
    28ca:	f7 01       	movw	r30, r14
    28cc:	d3 82       	std	Z+3, r13	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
    28ce:	c7 01       	movw	r24, r14
    28d0:	0e 94 19 06 	call	0xc32	; 0xc32 <Adafruit_I2CDevice::detected()>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:18
  if (!i2c_dev->begin())
    28d4:	81 11       	cpse	r24, r1
    28d6:	0a c0       	rjmp	.+20     	; 0x28ec <main+0x3b8>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:121
    {
        serviceMode = false;
    }
    while (!rtc.begin())
    {
        lcd.clear();
    28d8:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:122
        lcd.print(F("ERR 01")); // Couldn't find RTC
    28dc:	87 e6       	ldi	r24, 0x67	; 103
    28de:	92 e0       	ldi	r25, 0x02	; 2
    28e0:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
    28e4:	d8 cf       	rjmp	.-80     	; 0x2896 <main+0x362>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:117
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    28e6:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <serviceMode>
    28ea:	ca cf       	rjmp	.-108    	; 0x2880 <main+0x34c>
    28ec:	1c aa       	std	Y+52, r1	; 0x34
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:80
    @return value of register
*/
/**************************************************************************/
uint8_t RTC_I2C::read_register(uint8_t reg) {
  uint8_t buffer[1];
  i2c_dev->write(&reg, 1);
    28ee:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <rtc>
    28f2:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    28f6:	fc 01       	movw	r30, r24
    28f8:	24 81       	ldd	r18, Z+4	; 0x04
    28fa:	35 81       	ldd	r19, Z+5	; 0x05
    28fc:	23 2b       	or	r18, r19
    28fe:	89 f0       	breq	.+34     	; 0x2922 <main+0x3ee>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    2900:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2902:	d0 92 b7 03 	sts	0x03B7, r13	; 0x8003b7 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    2906:	20 93 d9 03 	sts	0x03D9, r18	; 0x8003d9 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    290a:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    290e:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::txBufferLength>
write():
    2912:	21 e0       	ldi	r18, 0x01	; 1
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	be 01       	movw	r22, r28
    291a:	6c 5c       	subi	r22, 0xCC	; 204
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
    291e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:81
  i2c_dev->read(buffer, 1);
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	be 01       	movw	r22, r28
    2928:	6d 5e       	subi	r22, 0xED	; 237
    292a:	7f 4f       	sbci	r23, 0xFF	; 255
    292c:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <rtc>
    2930:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <rtc+0x1>
    2934:	0e 94 b3 07 	call	0xf66	; 0xf66 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:82
  return buffer[0];
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:29
/*!
    @brief  Is the DS1307 running? Check the Clock Halt bit in register 0
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) { return !(read_register(0) >> 7); }
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	88 0f       	add	r24, r24
    293e:	89 2f       	mov	r24, r25
    2940:	88 1f       	adc	r24, r24
    2942:	99 0b       	sbc	r25, r25
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:127
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    // if (rtc.lostPower())

    if (!rtc.isrunning())
    2944:	89 2b       	or	r24, r25
    2946:	61 f0       	breq	.+24     	; 0x2960 <main+0x42c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:129
    {
        lcd.clear();
    2948:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:130
        lcd.print(F("ERR 02"));
    294c:	80 e6       	ldi	r24, 0x60	; 96
    294e:	92 e0       	ldi	r25, 0x02	; 2
    2950:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:131
        delay(2000);
    2954:	60 ed       	ldi	r22, 0xD0	; 208
    2956:	77 e0       	ldi	r23, 0x07	; 7
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2960:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <mySoftwareSerial+0x1b>
    2964:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <mySoftwareSerial+0x1a>
    2968:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <mySoftwareSerial+0x19>
    296c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <mySoftwareSerial+0x18>
    2970:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <mySoftwareSerial+0x17>
    2974:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2978:	8d e9       	ldi	r24, 0x9D	; 157
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <mySoftwareSerial+0x1d>
    2980:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2984:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <mySoftwareSerial+0xc>
    2988:	87 31       	cpi	r24, 0x17	; 23
    298a:	08 f0       	brcs	.+2      	; 0x298e <main+0x45a>
    298c:	4b c0       	rjmp	.+150    	; 0x2a24 <main+0x4f0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    298e:	2d eb       	ldi	r18, 0xBD	; 189
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <mySoftwareSerial+0x17>
    2996:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    299a:	2b e9       	ldi	r18, 0x9B	; 155
    299c:	31 e0       	ldi	r19, 0x01	; 1
    299e:	30 93 be 04 	sts	0x04BE, r19	; 0x8004be <mySoftwareSerial+0x19>
    29a2:	20 93 bd 04 	sts	0x04BD, r18	; 0x8004bd <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    29a6:	2c e2       	ldi	r18, 0x2C	; 44
    29a8:	31 e0       	ldi	r19, 0x01	; 1
    29aa:	30 93 c0 04 	sts	0x04C0, r19	; 0x8004c0 <mySoftwareSerial+0x1b>
    29ae:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    29b2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    29b6:	94 e0       	ldi	r25, 0x04	; 4
begin():
    29b8:	88 30       	cpi	r24, 0x08	; 8
    29ba:	54 f0       	brlt	.+20     	; 0x29d0 <main+0x49c>
main():
    29bc:	91 e0       	ldi	r25, 0x01	; 1
begin():
    29be:	8e 30       	cpi	r24, 0x0E	; 14
    29c0:	3c f0       	brlt	.+14     	; 0x29d0 <main+0x49c>
main():
    29c2:	92 e0       	ldi	r25, 0x02	; 2
begin():
    29c4:	84 31       	cpi	r24, 0x14	; 20
    29c6:	24 f0       	brlt	.+8      	; 0x29d0 <main+0x49c>
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	86 31       	cpi	r24, 0x16	; 22
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <main+0x49c>
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	92 2b       	or	r25, r18
    29d2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    29d6:	2d e6       	ldi	r18, 0x6D	; 109
    29d8:	30 e0       	ldi	r19, 0x00	; 0
begin():
    29da:	88 30       	cpi	r24, 0x08	; 8
    29dc:	74 f0       	brlt	.+28     	; 0x29fa <main+0x4c6>
    29de:	8e 30       	cpi	r24, 0x0E	; 14
    29e0:	0c f4       	brge	.+2      	; 0x29e4 <main+0x4b0>
    29e2:	7f c0       	rjmp	.+254    	; 0x2ae2 <main+0x5ae>
    29e4:	84 31       	cpi	r24, 0x14	; 20
    29e6:	3c f0       	brlt	.+14     	; 0x29f6 <main+0x4c2>
    29e8:	86 31       	cpi	r24, 0x16	; 22
    29ea:	0c f4       	brge	.+2      	; 0x29ee <main+0x4ba>
    29ec:	7a c0       	rjmp	.+244    	; 0x2ae2 <main+0x5ae>
main():
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	20 e0       	ldi	r18, 0x00	; 0
begin():
    29f2:	86 31       	cpi	r24, 0x16	; 22
    29f4:	11 f4       	brne	.+4      	; 0x29fa <main+0x4c6>
main():
    29f6:	2c e6       	ldi	r18, 0x6C	; 108
    29f8:	30 e0       	ldi	r19, 0x00	; 0
begin():
    29fa:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <mySoftwareSerial+0x14>
    29fe:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2a02:	88 30       	cpi	r24, 0x08	; 8
    2a04:	0c f0       	brlt	.+2      	; 0x2a08 <main+0x4d4>
    2a06:	70 c0       	rjmp	.+224    	; 0x2ae8 <main+0x5b4>
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <main+0x4da>
    2a0c:	99 0f       	add	r25, r25
    2a0e:	8a 95       	dec	r24
    2a10:	ea f7       	brpl	.-6      	; 0x2a0c <main+0x4d8>
    2a12:	89 2f       	mov	r24, r25
    2a14:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2a18:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mySoftwareSerial+0x1c>
    2a1c:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mySoftwareSerial+0x1d>
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0x4ec>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    2a24:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <mySoftwareSerial+0x1a>
    2a28:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <mySoftwareSerial+0x1b>
    2a2c:	89 2b       	or	r24, r25
    2a2e:	49 f1       	breq	.+82     	; 0x2a82 <main+0x54e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    2a30:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
    2a34:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    2a38:	24 e0       	ldi	r18, 0x04	; 4
    2a3a:	e5 3a       	cpi	r30, 0xA5	; 165
    2a3c:	f2 07       	cpc	r31, r18
    2a3e:	09 f1       	breq	.+66     	; 0x2a82 <main+0x54e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    2a40:	30 97       	sbiw	r30, 0x00	; 0
    2a42:	39 f0       	breq	.+14     	; 0x2a52 <main+0x51e>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2a44:	a3 89       	ldd	r26, Z+19	; 0x13
    2a46:	b4 89       	ldd	r27, Z+20	; 0x14
    2a48:	9c 91       	ld	r25, X
    2a4a:	85 89       	ldd	r24, Z+21	; 0x15
    2a4c:	80 95       	com	r24
    2a4e:	89 23       	and	r24, r25
    2a50:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    2a52:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <mySoftwareSerial+0x1e>
    2a56:	8e 7f       	andi	r24, 0xFE	; 254
    2a58:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    2a5c:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <SoftwareSerial::_receive_buffer_tail>
    2a60:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    2a64:	85 ea       	ldi	r24, 0xA5	; 165
    2a66:	94 e0       	ldi	r25, 0x04	; 4
    2a68:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    2a6c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2a70:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <mySoftwareSerial+0x13>
    2a74:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <mySoftwareSerial+0x14>
    2a78:	80 81       	ld	r24, Z
    2a7a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mySoftwareSerial+0x15>
    2a7e:	89 2b       	or	r24, r25
    2a80:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:137
    }
    // Initialize DF Player...............
    // if (digitalRead(BACK_BUT))
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    2a82:	64 ef       	ldi	r22, 0xF4	; 244
    2a84:	71 e0       	ldi	r23, 0x01	; 1
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2a8e:	85 ea       	ldi	r24, 0xA5	; 165
    2a90:	e8 2e       	mov	r14, r24
    2a92:	84 e0       	ldi	r24, 0x04	; 4
    2a94:	f8 2e       	mov	r15, r24
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2a96:	dd 24       	eor	r13, r13
    2a98:	d3 94       	inc	r13
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2a9a:	f0 92 80 04 	sts	0x0480, r15	; 0x800480 <myDFPlayer+0x1>
    2a9e:	e0 92 7f 04 	sts	0x047F, r14	; 0x80047f <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2aa2:	d0 92 97 04 	sts	0x0497, r13	; 0x800497 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	8c e0       	ldi	r24, 0x0C	; 12
    2aac:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    2ab0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2ab4:	4b 01       	movw	r8, r22
    2ab6:	5c 01       	movw	r10, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    2ab8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DFRobotDFPlayerMini::available() [clone .constprop.61]>
    2abc:	81 11       	cpse	r24, r1
    2abe:	22 c0       	rjmp	.+68     	; 0x2b04 <main+0x5d0>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    2ac0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2ac4:	68 19       	sub	r22, r8
    2ac6:	79 09       	sbc	r23, r9
    2ac8:	8a 09       	sbc	r24, r10
    2aca:	9b 09       	sbc	r25, r11
    2acc:	61 3d       	cpi	r22, 0xD1	; 209
    2ace:	77 40       	sbci	r23, 0x07	; 7
    2ad0:	81 05       	cpc	r24, r1
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	b8 f4       	brcc	.+46     	; 0x2b04 <main+0x5d0>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	cb 01       	movw	r24, r22
    2adc:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
    2ae0:	eb cf       	rjmp	.-42     	; 0x2ab8 <main+0x584>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2ae2:	2b e6       	ldi	r18, 0x6B	; 107
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	89 cf       	rjmp	.-238    	; 0x29fa <main+0x4c6>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2ae8:	8e 30       	cpi	r24, 0x0E	; 14
    2aea:	14 f4       	brge	.+4      	; 0x2af0 <main+0x5bc>
    2aec:	88 50       	subi	r24, 0x08	; 8
    2aee:	8c cf       	rjmp	.-232    	; 0x2a08 <main+0x4d4>
    2af0:	86 31       	cpi	r24, 0x16	; 22
    2af2:	14 f4       	brge	.+4      	; 0x2af8 <main+0x5c4>
    2af4:	8e 50       	subi	r24, 0x0E	; 14
    2af6:	88 cf       	rjmp	.-240    	; 0x2a08 <main+0x4d4>
    2af8:	86 31       	cpi	r24, 0x16	; 22
    2afa:	11 f0       	breq	.+4      	; 0x2b00 <main+0x5cc>
main():
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	8a cf       	rjmp	.-236    	; 0x2a14 <main+0x4e0>
    2b00:	80 e4       	ldi	r24, 0x40	; 64
    2b02:	88 cf       	rjmp	.-240    	; 0x2a14 <main+0x4e0>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    2b04:	68 ec       	ldi	r22, 0xC8	; 200
    2b06:	70 e0       	ldi	r23, 0x00	; 0
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    2b10:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    2b14:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    2b18:	84 30       	cpi	r24, 0x04	; 4
    2b1a:	59 f0       	breq	.+22     	; 0x2b32 <main+0x5fe>
    2b1c:	89 30       	cpi	r24, 0x09	; 9
    2b1e:	49 f0       	breq	.+18     	; 0x2b32 <main+0x5fe>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:140
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.setCursor(0, 0);
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:141
            lcd.print(F("ERR 03"));
    2b28:	89 e5       	ldi	r24, 0x59	; 89
    2b2a:	92 e0       	ldi	r25, 0x02	; 2
    2b2c:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
    2b30:	b4 cf       	rjmp	.-152    	; 0x2a9a <main+0x566>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    2b32:	84 ef       	ldi	r24, 0xF4	; 244
    2b34:	91 e0       	ldi	r25, 0x01	; 1
    2b36:	a0 e0       	ldi	r26, 0x00	; 0
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <myDFPlayer+0x6>
    2b3e:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <myDFPlayer+0x7>
    2b42:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <myDFPlayer+0x8>
    2b46:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    2b4a:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    2b4e:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
    2b52:	77 27       	eor	r23, r23
    2b54:	86 e0       	ldi	r24, 0x06	; 6
    2b56:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    2b5a:	62 e0       	ldi	r22, 0x02	; 2
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	89 e0       	ldi	r24, 0x09	; 9
    2b60:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    2b64:	68 ec       	ldi	r22, 0xC8	; 200
    2b66:	70 e0       	ldi	r23, 0x00	; 0
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:147
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    2b70:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:148
    timrLCD = millis();
    2b74:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2b78:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timrLCD>
    2b7c:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timrLCD+0x1>
    2b80:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timrLCD+0x2>
    2b84:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:150

    if (serviceMode)
    2b88:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <serviceMode>
    2b8c:	88 23       	and	r24, r24
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <main+0x65e>
    2b90:	45 c1       	rjmp	.+650    	; 0x2e1c <main+0x8e8>
attach():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2b92:	27 e4       	ldi	r18, 0x47	; 71
    2b94:	32 e0       	ldi	r19, 0x02	; 2
    2b96:	30 93 fe 03 	sts	0x03FE, r19	; 0x8003fe <Menu1+0x1>
    2b9a:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2b9e:	83 e0       	ldi	r24, 0x03	; 3
    2ba0:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2ba4:	30 93 01 04 	sts	0x0401, r19	; 0x800401 <Menu1+0x4>
    2ba8:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2bac:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2bb0:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:12
  menuStackCount = 0;
    2bb4:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:155
        Menu1.attach(sampleMenu_Root, menuCount(sampleMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    2bb8:	86 e0       	ldi	r24, 0x06	; 6
    2bba:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2bbe:	89 2b       	or	r24, r25
    2bc0:	f1 f4       	brne	.+60     	; 0x2bfe <main+0x6ca>
    2bc2:	87 e0       	ldi	r24, 0x07	; 7
    2bc4:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2bc8:	89 2b       	or	r24, r25
    2bca:	c9 f4       	brne	.+50     	; 0x2bfe <main+0x6ca>
attach():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2bcc:	2b e0       	ldi	r18, 0x0B	; 11
    2bce:	32 e0       	ldi	r19, 0x02	; 2
    2bd0:	30 93 fe 03 	sts	0x03FE, r19	; 0x8003fe <Menu1+0x1>
    2bd4:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2bde:	30 93 01 04 	sts	0x0401, r19	; 0x800401 <Menu1+0x4>
    2be2:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2be6:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2bea:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:12
  menuStackCount = 0;
    2bee:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:158
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:159
        refreshMenuDisplay(REFRESH_DESCEND);
    2bf8:	83 e0       	ldi	r24, 0x03	; 3
    2bfa:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:161
    }
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    2bfe:	85 e0       	ldi	r24, 0x05	; 5
    2c00:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2c04:	89 2b       	or	r24, r25
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <main+0x6d6>
    2c08:	11 c1       	rjmp	.+546    	; 0x2e2c <main+0x8f8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:164
        testMode = true;
    else
        testMode = false;
    2c0a:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <testMode>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2c0e:	7e 01       	movw	r14, r28
    2c10:	69 e1       	ldi	r22, 0x19	; 25
    2c12:	e6 0e       	add	r14, r22
    2c14:	f1 1c       	adc	r15, r1
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:382
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    lpad(h, intbuf, '0', 2);
    2c16:	ce 01       	movw	r24, r28
    2c18:	c1 96       	adiw	r24, 0x31	; 49
    2c1a:	9e ab       	std	Y+54, r25	; 0x36
    2c1c:	8d ab       	std	Y+53, r24	; 0x35
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:384
    inttostr(intbuf, rtc.now().minute());
    lpad(m, intbuf, '0', 2);
    2c1e:	fe 01       	movw	r30, r28
    2c20:	be 96       	adiw	r30, 0x2e	; 46
    2c22:	f8 af       	std	Y+56, r31	; 0x38
    2c24:	ef ab       	std	Y+55, r30	; 0x37
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:386
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);
    2c26:	9e 01       	movw	r18, r28
    2c28:	25 5d       	subi	r18, 0xD5	; 213
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2c:	3a af       	std	Y+58, r19	; 0x3a
    2c2e:	29 af       	std	Y+57, r18	; 0x39
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:392

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));

    inttostr(intbuf, rtc.now().day());
    lpad(dat, intbuf, '0', 2);
    2c30:	6e 01       	movw	r12, r28
    2c32:	35 e2       	ldi	r19, 0x25	; 37
    2c34:	c3 0e       	add	r12, r19
    2c36:	d1 1c       	adc	r13, r1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:395
    inttostr(intbuf, rtc.now().year());
    lpad(year, intbuf, '0', 4);
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    2c38:	5e 01       	movw	r10, r28
    2c3a:	6f e1       	ldi	r22, 0x1F	; 31
    2c3c:	a6 0e       	add	r10, r22
    2c3e:	b1 1c       	adc	r11, r1
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:213
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2c40:	77 24       	eor	r7, r7
    2c42:	73 94       	inc	r7
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:190

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    2c44:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2c48:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <buttonSampleTime>
    2c4c:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <buttonSampleTime+0x1>
    2c50:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <buttonSampleTime+0x2>
    2c54:	50 91 02 03 	lds	r21, 0x0302	; 0x800302 <buttonSampleTime+0x3>
    2c58:	62 1b       	sub	r22, r18
    2c5a:	73 0b       	sbc	r23, r19
    2c5c:	84 0b       	sbc	r24, r20
    2c5e:	95 0b       	sbc	r25, r21
    2c60:	64 31       	cpi	r22, 0x14	; 20
    2c62:	71 05       	cpc	r23, r1
    2c64:	81 05       	cpc	r24, r1
    2c66:	91 05       	cpc	r25, r1
    2c68:	08 f4       	brcc	.+2      	; 0x2c6c <main+0x738>
    2c6a:	a4 c0       	rjmp	.+328    	; 0x2db4 <main+0x880>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:192
  {
    buttonSampleTime = millis();
    2c6c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2c70:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <buttonSampleTime>
    2c74:	70 93 00 03 	sts	0x0300, r23	; 0x800300 <buttonSampleTime+0x1>
    2c78:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <buttonSampleTime+0x2>
    2c7c:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2c80:	85 e0       	ldi	r24, 0x05	; 5
    2c82:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2c86:	4c 01       	movw	r8, r24
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:199
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    2c88:	86 e0       	ldi	r24, 0x06	; 6
    2c8a:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
main():
    2c8e:	66 24       	eor	r6, r6
    2c90:	63 94       	inc	r6
buttonHandlerCycle():
    2c92:	89 2b       	or	r24, r25
    2c94:	31 f0       	breq	.+12     	; 0x2ca2 <main+0x76e>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	89 28       	or	r8, r9
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <main+0x76a>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	68 2e       	mov	r6, r24
    2ca0:	61 94       	neg	r6
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:200
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    2ca2:	87 e0       	ldi	r24, 0x07	; 7
    2ca4:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2ca8:	89 2b       	or	r24, r25
    2caa:	11 f4       	brne	.+4      	; 0x2cb0 <main+0x77c>
main():
    2cac:	b2 e0       	ldi	r27, 0x02	; 2
    2cae:	6b 2e       	mov	r6, r27
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:201
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    2cb0:	88 e0       	ldi	r24, 0x08	; 8
    2cb2:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2cb6:	89 2b       	or	r24, r25
    2cb8:	11 f4       	brne	.+4      	; 0x2cbe <main+0x78a>
main():
    2cba:	a3 e0       	ldi	r26, 0x03	; 3
    2cbc:	6a 2e       	mov	r6, r26
    2cbe:	e2 ed       	ldi	r30, 0xD2	; 210
    2cc0:	8e 2e       	mov	r8, r30
    2cc2:	e2 e0       	ldi	r30, 0x02	; 2
    2cc4:	9e 2e       	mov	r9, r30
    2cc6:	f6 ee       	ldi	r31, 0xE6	; 230
    2cc8:	2f 2e       	mov	r2, r31
    2cca:	f2 e0       	ldi	r31, 0x02	; 2
    2ccc:	3f 2e       	mov	r3, r31
    2cce:	82 e2       	ldi	r24, 0x22	; 34
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	9e af       	std	Y+62, r25	; 0x3e
    2cd4:	8d af       	std	Y+61, r24	; 0x3d
    2cd6:	ea ef       	ldi	r30, 0xFA	; 250
    2cd8:	f2 e0       	ldi	r31, 0x02	; 2
    2cda:	fc af       	std	Y+60, r31	; 0x3c
    2cdc:	eb af       	std	Y+59, r30	; 0x3b
    2cde:	55 24       	eor	r5, r5
    2ce0:	53 94       	inc	r5
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:205

    

    byte buttonIdentified = 0;
    2ce2:	1f ae       	std	Y+63, r1	; 0x3f
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:210
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    2ce4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ce6:	f1 11       	cpse	r31, r1
    2ce8:	ab c0       	rjmp	.+342    	; 0x2e40 <main+0x90c>
    2cea:	ed ad       	ldd	r30, Y+61	; 0x3d
    2cec:	fe ad       	ldd	r31, Y+62	; 0x3e
    2cee:	80 81       	ld	r24, Z
    2cf0:	86 11       	cpse	r24, r6
    2cf2:	a6 c0       	rjmp	.+332    	; 0x2e40 <main+0x90c>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:213
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2cf4:	f1 e0       	ldi	r31, 0x01	; 1
    2cf6:	ff af       	std	Y+63, r31	; 0x3f
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:212
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    2cf8:	44 24       	eor	r4, r4
    2cfa:	43 94       	inc	r4
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:222
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    2cfc:	eb ad       	ldd	r30, Y+59	; 0x3b
    2cfe:	fc ad       	ldd	r31, Y+60	; 0x3c
    2d00:	81 91       	ld	r24, Z+
    2d02:	fc af       	std	Y+60, r31	; 0x3c
    2d04:	eb af       	std	Y+59, r30	; 0x3b
    2d06:	84 15       	cp	r24, r4
    2d08:	b1 f0       	breq	.+44     	; 0x2d36 <main+0x802>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:225
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    2d0a:	44 20       	and	r4, r4
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <main+0x7dc>
    2d0e:	9a c0       	rjmp	.+308    	; 0x2e44 <main+0x910>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:227
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    2d10:	85 2d       	mov	r24, r5
    2d12:	0e 94 9b 07 	call	0xf36	; 0xf36 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:228
          buttonPressTime[i] = millis();
    2d16:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2d1a:	f1 01       	movw	r30, r2
    2d1c:	60 83       	st	Z, r22
    2d1e:	71 83       	std	Z+1, r23	; 0x01
    2d20:	82 83       	std	Z+2, r24	; 0x02
    2d22:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:229
          buttonHoldTime[i] = buttonPressTime[i];
    2d24:	f4 01       	movw	r30, r8
    2d26:	60 83       	st	Z, r22
    2d28:	71 83       	std	Z+1, r23	; 0x01
    2d2a:	82 83       	std	Z+2, r24	; 0x02
    2d2c:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:243
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    2d2e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2d30:	fc ad       	ldd	r31, Y+60	; 0x3c
    2d32:	31 97       	sbiw	r30, 0x01	; 1
    2d34:	40 82       	st	Z, r4
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:247
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    2d36:	44 20       	and	r4, r4
    2d38:	71 f1       	breq	.+92     	; 0x2d96 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:249
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    2d3a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2d3e:	f1 01       	movw	r30, r2
    2d40:	20 81       	ld	r18, Z
    2d42:	31 81       	ldd	r19, Z+1	; 0x01
    2d44:	42 81       	ldd	r20, Z+2	; 0x02
    2d46:	53 81       	ldd	r21, Z+3	; 0x03
    2d48:	62 1b       	sub	r22, r18
    2d4a:	73 0b       	sbc	r23, r19
    2d4c:	84 0b       	sbc	r24, r20
    2d4e:	95 0b       	sbc	r25, r21
    2d50:	69 3b       	cpi	r22, 0xB9	; 185
    2d52:	7b 40       	sbci	r23, 0x0B	; 11
    2d54:	81 05       	cpc	r24, r1
    2d56:	91 05       	cpc	r25, r1
    2d58:	f0 f0       	brcs	.+60     	; 0x2d96 <main+0x862>
    2d5a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2d5e:	f4 01       	movw	r30, r8
    2d60:	20 81       	ld	r18, Z
    2d62:	31 81       	ldd	r19, Z+1	; 0x01
    2d64:	42 81       	ldd	r20, Z+2	; 0x02
    2d66:	53 81       	ldd	r21, Z+3	; 0x03
    2d68:	62 1b       	sub	r22, r18
    2d6a:	73 0b       	sbc	r23, r19
    2d6c:	84 0b       	sbc	r24, r20
    2d6e:	95 0b       	sbc	r25, r21
    2d70:	6b 3f       	cpi	r22, 0xFB	; 251
    2d72:	71 05       	cpc	r23, r1
    2d74:	81 05       	cpc	r24, r1
    2d76:	91 05       	cpc	r25, r1
    2d78:	70 f0       	brcs	.+28     	; 0x2d96 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:251
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    2d7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d7c:	2a ef       	ldi	r18, 0xFA	; 250
    2d7e:	32 e0       	ldi	r19, 0x02	; 2
    2d80:	82 1b       	sub	r24, r18
    2d82:	80 68       	ori	r24, 0x80	; 128
    2d84:	0e 94 9b 07 	call	0xf36	; 0xf36 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:252
          buttonHoldTime[i] = millis();
    2d88:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2d8c:	f4 01       	movw	r30, r8
    2d8e:	60 83       	st	Z, r22
    2d90:	71 83       	std	Z+1, r23	; 0x01
    2d92:	82 83       	std	Z+2, r24	; 0x02
    2d94:	93 83       	std	Z+3, r25	; 0x03
    2d96:	53 94       	inc	r5
    2d98:	f4 e0       	ldi	r31, 0x04	; 4
    2d9a:	8f 0e       	add	r8, r31
    2d9c:	91 1c       	adc	r9, r1
    2d9e:	24 e0       	ldi	r18, 0x04	; 4
    2da0:	22 0e       	add	r2, r18
    2da2:	31 1c       	adc	r3, r1
    2da4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2da6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	9e af       	std	Y+62, r25	; 0x3e
    2dac:	8d af       	std	Y+61, r24	; 0x3d
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:207

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    2dae:	96 e0       	ldi	r25, 0x06	; 6
    2db0:	59 12       	cpse	r5, r25
    2db2:	98 cf       	rjmp	.-208    	; 0x2ce4 <main+0x7b0>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:172
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    2db4:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <buttonBufferCount>
    2db8:	19 16       	cp	r1, r25
    2dba:	0c f4       	brge	.+2      	; 0x2dbe <main+0x88a>
    2dbc:	5b c0       	rjmp	.+182    	; 0x2e74 <main+0x940>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:168
    else
        testMode = false;
}
void loop()
{
    btn = getButton();
    2dbe:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <btn>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:170
// ----------------------------------------------------------------------------------------------------
byte getButton ()
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
    2dc2:	91 2c       	mov	r9, r1
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:175
    {
        timrLCD = millis();
        timrMNU = millis();
        lcd.backlight();
    }
    if (millis() - timrLCD > 300)
    2dc4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2dc8:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <timrLCD>
    2dcc:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <timrLCD+0x1>
    2dd0:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <timrLCD+0x2>
    2dd4:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <timrLCD+0x3>
    2dd8:	62 1b       	sub	r22, r18
    2dda:	73 0b       	sbc	r23, r19
    2ddc:	84 0b       	sbc	r24, r20
    2dde:	95 0b       	sbc	r25, r21
    2de0:	6d 32       	cpi	r22, 0x2D	; 45
    2de2:	71 40       	sbci	r23, 0x01	; 1
    2de4:	81 05       	cpc	r24, r1
    2de6:	91 05       	cpc	r25, r1
    2de8:	20 f0       	brcs	.+8      	; 0x2df2 <main+0x8be>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:178
    {
        downButPreCount = 0;
        selButPreCount = 0;
    2dea:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <selButPreCount+0x1>
    2dee:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:181
        upButPreCount = 0;
    }
    switch (appMode)
    2df2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <appMode>
    2df6:	82 30       	cpi	r24, 0x02	; 2
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <main+0x8c8>
    2dfa:	f3 c4       	rjmp	.+2534   	; 0x37e2 <main+0x12ae>
    2dfc:	08 f0       	brcs	.+2      	; 0x2e00 <main+0x8cc>
    2dfe:	6e c0       	rjmp	.+220    	; 0x2edc <main+0x9a8>
    2e00:	88 23       	and	r24, r24
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <main+0x8d2>
    2e04:	35 c1       	rjmp	.+618    	; 0x3070 <main+0xb3c>
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <main+0x8d8>
    2e0a:	7a c3       	rjmp	.+1780   	; 0x3500 <main+0xfcc>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	89 2b       	or	r24, r25
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <main+0x8e2>
    2e14:	17 cf       	rjmp	.-466    	; 0x2c44 <main+0x710>
    2e16:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2e1a:	12 cf       	rjmp	.-476    	; 0x2c40 <main+0x70c>
attach():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2e1c:	2d e1       	ldi	r18, 0x1D	; 29
    2e1e:	32 e0       	ldi	r19, 0x02	; 2
    2e20:	30 93 fe 03 	sts	0x03FE, r19	; 0x8003fe <Menu1+0x1>
    2e24:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2e28:	87 e0       	ldi	r24, 0x07	; 7
    2e2a:	ba ce       	rjmp	.-652    	; 0x2ba0 <main+0x66c>
setup():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:161
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
        refreshMenuDisplay(REFRESH_DESCEND);
    }
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    2e2c:	88 e0       	ldi	r24, 0x08	; 8
    2e2e:	0e 94 a9 02 	call	0x552	; 0x552 <digitalRead>
    2e32:	89 2b       	or	r24, r25
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <main+0x904>
    2e36:	e9 ce       	rjmp	.-558    	; 0x2c0a <main+0x6d6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:162
        testMode = true;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <testMode>
    2e3e:	e7 ce       	rjmp	.-562    	; 0x2c0e <main+0x6da>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:217
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    2e40:	41 2c       	mov	r4, r1
    2e42:	5c cf       	rjmp	.-328    	; 0x2cfc <main+0x7c8>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:234
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    2e44:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2e48:	f1 01       	movw	r30, r2
    2e4a:	20 81       	ld	r18, Z
    2e4c:	31 81       	ldd	r19, Z+1	; 0x01
    2e4e:	42 81       	ldd	r20, Z+2	; 0x02
    2e50:	53 81       	ldd	r21, Z+3	; 0x03
    2e52:	62 1b       	sub	r22, r18
    2e54:	73 0b       	sbc	r23, r19
    2e56:	84 0b       	sbc	r24, r20
    2e58:	95 0b       	sbc	r25, r21
    2e5a:	69 3b       	cpi	r22, 0xB9	; 185
    2e5c:	7b 40       	sbci	r23, 0x0B	; 11
    2e5e:	81 05       	cpc	r24, r1
    2e60:	91 05       	cpc	r25, r1
    2e62:	28 f0       	brcs	.+10     	; 0x2e6e <main+0x93a>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:236
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    2e64:	85 2d       	mov	r24, r5
    2e66:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:240
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    2e68:	0e 94 9b 07 	call	0xf36	; 0xf36 <queueButton(unsigned char)>
    2e6c:	60 cf       	rjmp	.-320    	; 0x2d2e <main+0x7fa>
    2e6e:	85 2d       	mov	r24, r5
    2e70:	80 64       	ori	r24, 0x40	; 64
    2e72:	fa cf       	rjmp	.-12     	; 0x2e68 <main+0x934>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:174
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    2e74:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <button_read_pos>
    2e78:	e8 2f       	mov	r30, r24
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	ed 5f       	subi	r30, 0xFD	; 253
    2e7e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e80:	90 80       	ld	r9, Z
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:175
    buttonBufferCount--;
    2e82:	91 50       	subi	r25, 0x01	; 1
    2e84:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:176
    button_read_pos++;
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:178
    
    if (button_read_pos >= sizeof (buttonBuffer))
    2e8a:	85 30       	cpi	r24, 0x05	; 5
    2e8c:	20 f5       	brcc	.+72     	; 0x2ed6 <main+0x9a2>
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:176
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    2e8e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:168
    else
        testMode = false;
}
void loop()
{
    btn = getButton();
    2e92:	90 92 20 03 	sts	0x0320, r9	; 0x800320 <btn>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:169
    if (btn)
    2e96:	99 20       	and	r9, r9
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <main+0x968>
    2e9a:	94 cf       	rjmp	.-216    	; 0x2dc4 <main+0x890>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:171
    {
        timrLCD = millis();
    2e9c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2ea0:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timrLCD>
    2ea4:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timrLCD+0x1>
    2ea8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timrLCD+0x2>
    2eac:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:172
        timrMNU = millis();
    2eb0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    2eb4:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <timrMNU>
    2eb8:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <timrMNU+0x1>
    2ebc:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <timrMNU+0x2>
    2ec0:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2ec4:	88 e0       	ldi	r24, 0x08	; 8
    2ec6:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	83 e7       	ldi	r24, 0x73	; 115
    2ece:	94 e0       	ldi	r25, 0x04	; 4
    2ed0:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    2ed4:	77 cf       	rjmp	.-274    	; 0x2dc4 <main+0x890>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.2/LcdKeypad.cpp:180
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    2ed6:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <button_read_pos>
    2eda:	db cf       	rjmp	.-74     	; 0x2e92 <main+0x95e>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:181
    {
        downButPreCount = 0;
        selButPreCount = 0;
        upButPreCount = 0;
    }
    switch (appMode)
    2edc:	83 30       	cpi	r24, 0x03	; 3
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <main+0x9ae>
    2ee0:	c1 c2       	rjmp	.+1410   	; 0x3464 <main+0xf30>
    2ee2:	84 30       	cpi	r24, 0x04	; 4
    2ee4:	09 f0       	breq	.+2      	; 0x2ee8 <main+0x9b4>
    2ee6:	92 cf       	rjmp	.-220    	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:261
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:262
        lcd.print(F("  RUNNING DEMO  "));
    2ef0:	8b e8       	ldi	r24, 0x8B	; 139
    2ef2:	92 e0       	ldi	r25, 0x02	; 2
    2ef4:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:263
        lcd.setCursor(0, 1);
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:264
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    2f00:	80 90 03 01 	lds	r8, 0x0103	; 0x800103 <demoTime>
    2f04:	90 90 04 01 	lds	r9, 0x0104	; 0x800104 <demoTime+0x1>
main():
    2f08:	60 e7       	ldi	r22, 0x70	; 112
    2f0a:	71 e0       	ldi	r23, 0x01	; 1
loop():
    2f0c:	9c e0       	ldi	r25, 0x0C	; 12
    2f0e:	89 16       	cp	r8, r25
    2f10:	91 04       	cpc	r9, r1
    2f12:	14 f4       	brge	.+4      	; 0x2f18 <main+0x9e4>
main():
    2f14:	67 e7       	ldi	r22, 0x77	; 119
    2f16:	71 e0       	ldi	r23, 0x01	; 1
loop():
    2f18:	ce 01       	movw	r24, r28
    2f1a:	43 96       	adiw	r24, 0x13	; 19
    2f1c:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
    2f20:	ed e0       	ldi	r30, 0x0D	; 13
    2f22:	8e 16       	cp	r8, r30
    2f24:	91 04       	cpc	r9, r1
    2f26:	1c f0       	brlt	.+6      	; 0x2f2e <main+0x9fa>
    2f28:	fc e0       	ldi	r31, 0x0C	; 12
    2f2a:	8f 1a       	sub	r8, r31
    2f2c:	91 08       	sbc	r9, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    2f2e:	1a 8e       	std	Y+26, r1	; 0x1a
    2f30:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    2f32:	1c 8e       	std	Y+28, r1	; 0x1c
    2f34:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    2f36:	1e 8e       	std	Y+30, r1	; 0x1e
    2f38:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2f3a:	4a e0       	ldi	r20, 0x0A	; 10
    2f3c:	b8 01       	movw	r22, r16
    2f3e:	c4 01       	movw	r24, r8
    2f40:	0e 94 89 20 	call	0x4112	; 0x4112 <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    2f44:	f8 01       	movw	r30, r16
    2f46:	01 90       	ld	r0, Z+
    2f48:	00 20       	and	r0, r0
    2f4a:	e9 f7       	brne	.-6      	; 0x2f46 <main+0xa12>
    2f4c:	31 97       	sbiw	r30, 0x01	; 1
    2f4e:	4f 01       	movw	r8, r30
    2f50:	80 1a       	sub	r8, r16
    2f52:	91 0a       	sbc	r9, r17
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2f54:	b4 01       	movw	r22, r8
    2f56:	c7 01       	movw	r24, r14
    2f58:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <String::reserve(unsigned int)>
    2f5c:	81 11       	cpse	r24, r1
    2f5e:	b9 c2       	rjmp	.+1394   	; 0x34d2 <main+0xf9e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    2f60:	c7 01       	movw	r24, r14
    2f62:	0e 94 92 09 	call	0x1324	; 0x1324 <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    2f66:	69 e1       	ldi	r22, 0x19	; 25
    2f68:	72 e0       	ldi	r23, 0x02	; 2
    2f6a:	c8 01       	movw	r24, r16
    2f6c:	0e 94 45 0b 	call	0x168a	; 0x168a <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:264
    2f70:	b7 01       	movw	r22, r14
    2f72:	c8 01       	movw	r24, r16
    2f74:	0e 94 12 0b 	call	0x1624	; 0x1624 <operator+(StringSumHelper const&, String const&)>
    2f78:	be 01       	movw	r22, r28
    2f7a:	6d 5e       	subi	r22, 0xED	; 237
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	0e 94 12 0b 	call	0x1624	; 0x1624 <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    2f82:	fc 01       	movw	r30, r24
    2f84:	44 81       	ldd	r20, Z+4	; 0x04
    2f86:	55 81       	ldd	r21, Z+5	; 0x05
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	83 e7       	ldi	r24, 0x73	; 115
    2f8e:	94 e0       	ldi	r25, 0x04	; 4
    2f90:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
    2f9c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fa0:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
    2fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa8:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:265
        digitalWrite(AMP, HIGH);
    2fac:	61 e0       	ldi	r22, 0x01	; 1
    2fae:	8c e0       	ldi	r24, 0x0C	; 12
    2fb0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:267
        // delay(1000);
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    2fb4:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <demoTime>
    2fb8:	c8 01       	movw	r24, r16
    2fba:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    2fbe:	8b 80       	ldd	r8, Y+3	; 0x03
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	43 96       	adiw	r24, 0x13	; 19
    2fc4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    2fc8:	6c 88       	ldd	r6, Y+20	; 0x14
    2fca:	c7 01       	movw	r24, r14
    2fcc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    2fd0:	89 8d       	ldd	r24, Y+25	; 0x19
    2fd2:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <bell>
    2fd6:	60 92 6e 04 	sts	0x046E, r6	; 0x80046e <bell+0x1>
    2fda:	80 92 6f 04 	sts	0x046F, r8	; 0x80046f <bell+0x2>
    2fde:	90 92 70 04 	sts	0x0470, r9	; 0x800470 <bell+0x3>
    2fe2:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <bell+0x4>
    2fe6:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <bell+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:268
        PlayChant();
    2fea:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:269
        if (btn == BUTTON_LEFT_PRESSED)
    2fee:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    2ff2:	84 30       	cpi	r24, 0x04	; 4
    2ff4:	41 f4       	brne	.+16     	; 0x3006 <main+0xad2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:271
        {
            playSong = End_of_Song;
    2ff6:	88 e0       	ldi	r24, 0x08	; 8
    2ff8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	86 e1       	ldi	r24, 0x16	; 22
    3002:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:274
            myDFPlayer.stop();
        }
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3006:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    300a:	8f 77       	andi	r24, 0x7F	; 127
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	09 f0       	breq	.+2      	; 0x3012 <main+0xade>
    3010:	68 c2       	rjmp	.+1232   	; 0x34e2 <main+0xfae>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:276
        {
            config.vol = ++config.vol > 30 ? 10 : config.vol;
    3012:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    3016:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	8f 31       	cpi	r24, 0x1F	; 31
    301e:	91 05       	cpc	r25, r1
    3020:	14 f0       	brlt	.+4      	; 0x3026 <main+0xaf2>
main():
    3022:	8a e0       	ldi	r24, 0x0A	; 10
    3024:	90 e0       	ldi	r25, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:287
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    3026:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    302a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:288
            config.save();
    302e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <Config::save() [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:289
            lcd.clear();
    3032:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:290
            lcd.setCursor(0, 1);
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:291
            lcd.print("VOLUME : ");
    303e:	86 e2       	ldi	r24, 0x26	; 38
    3040:	92 e0       	ldi	r25, 0x02	; 2
    3042:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:292
            lcd.print(config.vol);
    3046:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    304a:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    304e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Print::print(int, int) [clone .constprop.6]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3052:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    3056:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
    305a:	77 27       	eor	r23, r23
    305c:	86 e0       	ldi	r24, 0x06	; 6
    305e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:294
            myDFPlayer.volume(config.vol);
            delay(100);
    3062:	64 e6       	ldi	r22, 0x64	; 100
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
    306e:	ce ce       	rjmp	.-612    	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:184
        upButPreCount = 0;
    }
    switch (appMode)
    {
    case APP_NORMAL_MODE:
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    3070:	f1 e8       	ldi	r31, 0x81	; 129
    3072:	9f 12       	cpse	r9, r31
    3074:	9d c1       	rjmp	.+826    	; 0x33b0 <main+0xe7c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:186
        {
            appMode = APP_MENU_MODE;
    3076:	70 92 15 03 	sts	0x0315, r7	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:187
            refreshMenuDisplay(REFRESH_DESCEND);
    307a:	83 e0       	ldi	r24, 0x03	; 3
    307c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:188
            timrMNU = millis();
    3080:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3084:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <timrMNU>
    3088:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <timrMNU+0x1>
    308c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <timrMNU+0x2>
    3090:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:202
                lcd.clear();
            }
        }
        // TEST MODE //   
        {
            if (btn == BUTTON_UP_PRESSED && testMode)
    3094:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    3098:	82 30       	cpi	r24, 0x02	; 2
    309a:	a9 f5       	brne	.+106    	; 0x3106 <main+0xbd2>
    309c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <testMode>
    30a0:	88 23       	and	r24, r24
    30a2:	89 f1       	breq	.+98     	; 0x3106 <main+0xbd2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:204
            {
                timrAmp = millis() - 71000L;
    30a4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    30a8:	68 55       	subi	r22, 0x58	; 88
    30aa:	75 41       	sbci	r23, 0x15	; 21
    30ac:	81 40       	sbci	r24, 0x01	; 1
    30ae:	91 09       	sbc	r25, r1
    30b0:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <timrAmp>
    30b4:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <timrAmp+0x1>
    30b8:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <timrAmp+0x2>
    30bc:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:205
                if (rtc.now().minute() < 30)
    30c0:	c8 01       	movw	r24, r16
    30c2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	8e 31       	cpi	r24, 0x1E	; 30
    30ca:	08 f0       	brcs	.+2      	; 0x30ce <main+0xb9a>
    30cc:	9d c1       	rjmp	.+826    	; 0x3408 <main+0xed4>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:206
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
    30ce:	ce 01       	movw	r24, r28
    30d0:	43 96       	adiw	r24, 0x13	; 19
    30d2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    30d6:	9e 88       	ldd	r9, Y+22	; 0x16
    30d8:	c7 01       	movw	r24, r14
    30da:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    30de:	8b 8c       	ldd	r8, Y+27	; 0x1b
    30e0:	c5 01       	movw	r24, r10
    30e2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    30e6:	68 a0       	ldd	r6, Y+32	; 0x20
    30e8:	c6 01       	movw	r24, r12
    30ea:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    30ee:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    30f0:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    30f2:	6a 82       	std	Y+2, r6	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    30f4:	8b 82       	std	Y+3, r8	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    30f6:	9c 82       	std	Y+4, r9	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    30f8:	8d e1       	ldi	r24, 0x1D	; 29
    30fa:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    30fc:	87 e3       	ldi	r24, 0x37	; 55
    30fe:	8e 83       	std	Y+6, r24	; 0x06
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:208
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3100:	c8 01       	movw	r24, r16
    3102:	0e 94 67 08 	call	0x10ce	; 0x10ce <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:211
            }
        }   
        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    3106:	c8 01       	movw	r24, r16
    3108:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	81 11       	cpse	r24, r1
    3110:	5a c0       	rjmp	.+180    	; 0x31c6 <main+0xc92>
    3112:	ce 01       	movw	r24, r28
    3114:	43 96       	adiw	r24, 0x13	; 19
    3116:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    311a:	88 8d       	ldd	r24, Y+24	; 0x18
    311c:	81 11       	cpse	r24, r1
    311e:	53 c0       	rjmp	.+166    	; 0x31c6 <main+0xc92>
    3120:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3124:	ab 01       	movw	r20, r22
    3126:	bc 01       	movw	r22, r24
    3128:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timrAmp>
    312c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timrAmp+0x1>
    3130:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <timrAmp+0x2>
    3134:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <timrAmp+0x3>
    3138:	88 5b       	subi	r24, 0xB8	; 184
    313a:	91 41       	sbci	r25, 0x11	; 17
    313c:	af 4f       	sbci	r26, 0xFF	; 255
    313e:	bf 4f       	sbci	r27, 0xFF	; 255
    3140:	84 17       	cp	r24, r20
    3142:	95 07       	cpc	r25, r21
    3144:	a6 07       	cpc	r26, r22
    3146:	b7 07       	cpc	r27, r23
    3148:	f0 f5       	brcc	.+124    	; 0x31c6 <main+0xc92>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:213
        {
            bell = rtc.now();
    314a:	c8 01       	movw	r24, r16
    314c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3150:	86 e0       	ldi	r24, 0x06	; 6
    3152:	f8 01       	movw	r30, r16
    3154:	ad e6       	ldi	r26, 0x6D	; 109
    3156:	b4 e0       	ldi	r27, 0x04	; 4
    3158:	01 90       	ld	r0, Z+
    315a:	0d 92       	st	X+, r0
    315c:	8a 95       	dec	r24
    315e:	e1 f7       	brne	.-8      	; 0x3158 <main+0xc24>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:214
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    3160:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <bell+0x3>
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <config+0xf>
    316a:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <config+0x10>
    316e:	82 17       	cp	r24, r18
    3170:	93 07       	cpc	r25, r19
    3172:	4c f1       	brlt	.+82     	; 0x31c6 <main+0xc92>
    3174:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <config+0x11>
    3178:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <config+0x12>
    317c:	28 17       	cp	r18, r24
    317e:	39 07       	cpc	r19, r25
    3180:	14 f1       	brlt	.+68     	; 0x31c6 <main+0xc92>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:216
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    3182:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <config+0x17>
    3186:	88 23       	and	r24, r24
    3188:	09 f4       	brne	.+2      	; 0x318c <main+0xc58>
    318a:	55 c1       	rjmp	.+682    	; 0x3436 <main+0xf02>
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <DateTime::dayOfTheWeek() const [clone .constprop.20]>
    3190:	88 23       	and	r24, r24
    3192:	09 f4       	brne	.+2      	; 0x3196 <main+0xc62>
    3194:	50 c1       	rjmp	.+672    	; 0x3436 <main+0xf02>
    3196:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <bell+0x3>
    319a:	8a 50       	subi	r24, 0x0A	; 10
    319c:	87 30       	cpi	r24, 0x07	; 7
    319e:	08 f0       	brcs	.+2      	; 0x31a2 <main+0xc6e>
    31a0:	4a c1       	rjmp	.+660    	; 0x3436 <main+0xf02>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:221
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    31a2:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:222
                    lcd.setCursor(0,0);
    31a6:	60 e0       	ldi	r22, 0x00	; 0
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:223
                    lcd.print("School Zone : ON");
    31ae:	83 ef       	ldi	r24, 0xF3	; 243
    31b0:	91 e0       	ldi	r25, 0x01	; 1
    31b2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:224
                    delay(1000);
    31b6:	68 ee       	ldi	r22, 0xE8	; 232
    31b8:	73 e0       	ldi	r23, 0x03	; 3
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:232
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    31c2:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:236
                }
            }
        }
        if (millis() - timr_Time > 1000)
    31c6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    31ca:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <timr_Time>
    31ce:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <timr_Time+0x1>
    31d2:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <timr_Time+0x2>
    31d6:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <timr_Time+0x3>
    31da:	62 1b       	sub	r22, r18
    31dc:	73 0b       	sbc	r23, r19
    31de:	84 0b       	sbc	r24, r20
    31e0:	95 0b       	sbc	r25, r21
    31e2:	69 3e       	cpi	r22, 0xE9	; 233
    31e4:	73 40       	sbci	r23, 0x03	; 3
    31e6:	81 05       	cpc	r24, r1
    31e8:	91 05       	cpc	r25, r1
    31ea:	08 f4       	brcc	.+2      	; 0x31ee <main+0xcba>
    31ec:	bb c0       	rjmp	.+374    	; 0x3364 <main+0xe30>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:238
        {
            timr_Time = millis();
    31ee:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    31f2:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timr_Time>
    31f6:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timr_Time+0x1>
    31fa:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timr_Time+0x2>
    31fe:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timr_Time+0x3>
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:381
void showTime()
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    3202:	ce 01       	movw	r24, r28
    3204:	43 96       	adiw	r24, 0x13	; 19
    3206:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:538
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    320a:	6e 89       	ldd	r22, Y+22	; 0x16
    320c:	66 23       	and	r22, r22
    320e:	09 f4       	brne	.+2      	; 0x3212 <main+0xcde>
    3210:	24 c1       	rjmp	.+584    	; 0x345a <main+0xf26>
    3212:	6c 30       	cpi	r22, 0x0C	; 12
    3214:	11 f0       	breq	.+4      	; 0x321a <main+0xce6>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:540
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    3216:	08 f0       	brcs	.+2      	; 0x321a <main+0xce6>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:541
    return hh - 12;
    3218:	6c 50       	subi	r22, 0x0C	; 12
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:381
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	c8 01       	movw	r24, r16
    321e:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:382
    lpad(h, intbuf, '0', 2);
    3222:	42 e0       	ldi	r20, 0x02	; 2
    3224:	b8 01       	movw	r22, r16
    3226:	ce 01       	movw	r24, r28
    3228:	c1 96       	adiw	r24, 0x31	; 49
    322a:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:383
    inttostr(intbuf, rtc.now().minute());
    322e:	ce 01       	movw	r24, r28
    3230:	43 96       	adiw	r24, 0x13	; 19
    3232:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3236:	6f 89       	ldd	r22, Y+23	; 0x17
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	c8 01       	movw	r24, r16
    323c:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:384
    lpad(m, intbuf, '0', 2);
    3240:	42 e0       	ldi	r20, 0x02	; 2
    3242:	b8 01       	movw	r22, r16
    3244:	ce 01       	movw	r24, r28
    3246:	8e 96       	adiw	r24, 0x2e	; 46
    3248:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:385
    inttostr(intbuf, rtc.now().second());
    324c:	ce 01       	movw	r24, r28
    324e:	43 96       	adiw	r24, 0x13	; 19
    3250:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3254:	68 8d       	ldd	r22, Y+24	; 0x18
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	c8 01       	movw	r24, r16
    325a:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:386
    lpad(s, intbuf, '0', 2);
    325e:	42 e0       	ldi	r20, 0x02	; 2
    3260:	b8 01       	movw	r22, r16
    3262:	ce 01       	movw	r24, r28
    3264:	8b 96       	adiw	r24, 0x2b	; 43
    3266:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:388

    lcd.setCursor(2, 0);
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:389
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    3272:	ce 01       	movw	r24, r28
    3274:	43 96       	adiw	r24, 0x13	; 19
    3276:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    327a:	8e 89       	ldd	r24, Y+22	; 0x16
    327c:	8c 30       	cpi	r24, 0x0C	; 12
    327e:	08 f4       	brcc	.+2      	; 0x3282 <main+0xd4e>
    3280:	ee c0       	rjmp	.+476    	; 0x345e <main+0xf2a>
main():
    3282:	8f e6       	ldi	r24, 0x6F	; 111
    3284:	91 e0       	ldi	r25, 0x01	; 1
showTime():
    3286:	9f 93       	push	r25
    3288:	8f 93       	push	r24
    328a:	6a ad       	ldd	r22, Y+58	; 0x3a
    328c:	6f 93       	push	r22
    328e:	89 ad       	ldd	r24, Y+57	; 0x39
    3290:	8f 93       	push	r24
    3292:	84 e0       	ldi	r24, 0x04	; 4
    3294:	92 e0       	ldi	r25, 0x02	; 2
    3296:	9f 93       	push	r25
    3298:	8f 93       	push	r24
    329a:	e8 ad       	ldd	r30, Y+56	; 0x38
    329c:	ef 93       	push	r30
    329e:	ff a9       	ldd	r31, Y+55	; 0x37
    32a0:	ff 93       	push	r31
    32a2:	9f 93       	push	r25
    32a4:	8f 93       	push	r24
    32a6:	2e a9       	ldd	r18, Y+54	; 0x36
    32a8:	2f 93       	push	r18
    32aa:	3d a9       	ldd	r19, Y+53	; 0x35
    32ac:	3f 93       	push	r19
    32ae:	66 e0       	ldi	r22, 0x06	; 6
    32b0:	66 2e       	mov	r6, r22
    32b2:	6f 92       	push	r6
    32b4:	7c ee       	ldi	r23, 0xEC	; 236
    32b6:	87 2e       	mov	r8, r23
    32b8:	73 e0       	ldi	r23, 0x03	; 3
    32ba:	97 2e       	mov	r9, r23
    32bc:	9f 92       	push	r9
    32be:	8f 92       	push	r8
    32c0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    32c4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:391

    inttostr(intbuf, rtc.now().day());
    32c8:	ce 01       	movw	r24, r28
    32ca:	43 96       	adiw	r24, 0x13	; 19
    32cc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    32d0:	6d 89       	ldd	r22, Y+21	; 0x15
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	c8 01       	movw	r24, r16
    32d6:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:392
    lpad(dat, intbuf, '0', 2);
    32da:	42 e0       	ldi	r20, 0x02	; 2
    32dc:	b8 01       	movw	r22, r16
    32de:	c6 01       	movw	r24, r12
    32e0:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:393
    inttostr(intbuf, rtc.now().year());
    32e4:	ce 01       	movw	r24, r28
    32e6:	43 96       	adiw	r24, 0x13	; 19
    32e8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    32ec:	6b 89       	ldd	r22, Y+19	; 0x13
    32ee:	70 e0       	ldi	r23, 0x00	; 0
    32f0:	60 53       	subi	r22, 0x30	; 48
    32f2:	78 4f       	sbci	r23, 0xF8	; 248
showTime():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:393
    32f4:	c8 01       	movw	r24, r16
    32f6:	0e 94 2d 0a 	call	0x145a	; 0x145a <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:394
    lpad(year, intbuf, '0', 4);
    32fa:	44 e0       	ldi	r20, 0x04	; 4
    32fc:	b8 01       	movw	r22, r16
    32fe:	c7 01       	movw	r24, r14
    3300:	0e 94 a6 0a 	call	0x154c	; 0x154c <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:395
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    3304:	ce 01       	movw	r24, r28
    3306:	43 96       	adiw	r24, 0x13	; 19
    3308:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    330c:	8c 89       	ldd	r24, Y+20	; 0x14
    330e:	81 50       	subi	r24, 0x01	; 1
    3310:	99 0b       	sbc	r25, r25
    3312:	68 9e       	mul	r6, r24
    3314:	f0 01       	movw	r30, r0
    3316:	69 9e       	mul	r6, r25
    3318:	f0 0d       	add	r31, r0
    331a:	11 24       	eor	r1, r1
    331c:	eb 5d       	subi	r30, 0xDB	; 219
    331e:	fb 4f       	sbci	r31, 0xFB	; 251
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	c5 01       	movw	r24, r10
    3326:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:397

    lcd.setCursor(2, 1);
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:398
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
    3332:	ff 92       	push	r15
    3334:	ef 92       	push	r14
    3336:	86 e0       	ldi	r24, 0x06	; 6
    3338:	92 e0       	ldi	r25, 0x02	; 2
    333a:	9f 93       	push	r25
    333c:	8f 93       	push	r24
    333e:	bf 92       	push	r11
    3340:	af 92       	push	r10
    3342:	9f 93       	push	r25
    3344:	8f 93       	push	r24
    3346:	df 92       	push	r13
    3348:	cf 92       	push	r12
    334a:	85 e0       	ldi	r24, 0x05	; 5
    334c:	8f 93       	push	r24
    334e:	9f 92       	push	r9
    3350:	8f 92       	push	r8
    3352:	0e 94 76 0b 	call	0x16ec	; 0x16ec <fmt(char*, unsigned char, ...)>
    3356:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:241
        if (millis() - timr_Time > 1000)
        {
            timr_Time = millis();
            showTime();
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    3364:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3368:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <timrLCD>
    336c:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <timrLCD+0x1>
    3370:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <timrLCD+0x2>
    3374:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <timrLCD+0x3>
    3378:	1b 01       	movw	r2, r22
    337a:	2c 01       	movw	r4, r24
    337c:	22 1a       	sub	r2, r18
    337e:	33 0a       	sbc	r3, r19
    3380:	44 0a       	sbc	r4, r20
    3382:	55 0a       	sbc	r5, r21
    3384:	a0 91 3e 03 	lds	r26, 0x033E	; 0x80033e <config+0x13>
    3388:	b0 91 3f 03 	lds	r27, 0x033F	; 0x80033f <config+0x14>
    338c:	28 ee       	ldi	r18, 0xE8	; 232
    338e:	33 e0       	ldi	r19, 0x03	; 3
    3390:	0e 94 ba 21 	call	0x4374	; 0x4374 <__usmulhisi3>
    3394:	62 15       	cp	r22, r2
    3396:	73 05       	cpc	r23, r3
    3398:	84 05       	cpc	r24, r4
    339a:	95 05       	cpc	r25, r5
    339c:	08 f0       	brcs	.+2      	; 0x33a0 <main+0xe6c>
    339e:	36 cd       	rjmp	.-1428   	; 0x2e0c <main+0x8d8>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    33a0:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	83 e7       	ldi	r24, 0x73	; 115
    33a8:	94 e0       	ldi	r25, 0x04	; 4
    33aa:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    33ae:	2e cd       	rjmp	.-1444   	; 0x2e0c <main+0x8d8>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:190
        {
            appMode = APP_MENU_MODE;
            refreshMenuDisplay(REFRESH_DESCEND);
            timrMNU = millis();
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    33b0:	21 e0       	ldi	r18, 0x01	; 1
    33b2:	92 12       	cpse	r9, r18
    33b4:	6f ce       	rjmp	.-802    	; 0x3094 <main+0xb60>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:192
        {
            selButPreCount += 1;
    33b6:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <selButPreCount>
    33ba:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <selButPreCount+0x1>
    33be:	01 96       	adiw	r24, 0x01	; 1
    33c0:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <selButPreCount+0x1>
    33c4:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:193
            if (selButPreCount >= 4)
    33c8:	04 97       	sbiw	r24, 0x04	; 4
    33ca:	0c f4       	brge	.+2      	; 0x33ce <main+0xe9a>
    33cc:	63 ce       	rjmp	.-826    	; 0x3094 <main+0xb60>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:195
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    33ce:	c8 01       	movw	r24, r16
    33d0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    33d4:	8d 81       	ldd	r24, Y+5	; 0x05
    33d6:	8f 31       	cpi	r24, 0x1F	; 31
    33d8:	88 f0       	brcs	.+34     	; 0x33fc <main+0xec8>
    33da:	ce 01       	movw	r24, r28
    33dc:	43 96       	adiw	r24, 0x13	; 19
    33de:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    33e2:	8e 89       	ldd	r24, Y+22	; 0x16
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    33ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:196
                appMode = APP_DEMO_MODE;
    33f0:	84 e0       	ldi	r24, 0x04	; 4
    33f2:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:197
                lcd.clear();
    33f6:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
    33fa:	4c ce       	rjmp	.-872    	; 0x3094 <main+0xb60>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:195
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    33fc:	c7 01       	movw	r24, r14
    33fe:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3402:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	f0 cf       	rjmp	.-32     	; 0x33e8 <main+0xeb4>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:208
            {
                timrAmp = millis() - 71000L;
                if (rtc.now().minute() < 30)
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3408:	ce 01       	movw	r24, r28
    340a:	43 96       	adiw	r24, 0x13	; 19
    340c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3410:	9e 88       	ldd	r9, Y+22	; 0x16
    3412:	c7 01       	movw	r24, r14
    3414:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3418:	8b 8c       	ldd	r8, Y+27	; 0x1b
    341a:	c5 01       	movw	r24, r10
    341c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3420:	68 a0       	ldd	r6, Y+32	; 0x20
    3422:	c6 01       	movw	r24, r12
    3424:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3428:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    342a:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    342c:	6a 82       	std	Y+2, r6	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    342e:	8b 82       	std	Y+3, r8	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3430:	9c 82       	std	Y+4, r9	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3432:	8b e3       	ldi	r24, 0x3B	; 59
    3434:	62 ce       	rjmp	.-828    	; 0x30fa <main+0xbc6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:229
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	8c e0       	ldi	r24, 0x0C	; 12
    343a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:230
                    timrAmp = millis();
    343e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3442:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <timrAmp>
    3446:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <timrAmp+0x1>
    344a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <timrAmp+0x2>
    344e:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:231
                    appMode = APP_CHANT_MODE;
    3452:	83 e0       	ldi	r24, 0x03	; 3
    3454:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
    3458:	b4 ce       	rjmp	.-664    	; 0x31c2 <main+0xc8e>
main():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:539
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    345a:	6c e0       	ldi	r22, 0x0C	; 12
    345c:	de ce       	rjmp	.-580    	; 0x321a <main+0xce6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:389
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    345e:	86 e7       	ldi	r24, 0x76	; 118
    3460:	91 e0       	ldi	r25, 0x01	; 1
    3462:	11 cf       	rjmp	.-478    	; 0x3286 <main+0xd52>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    3464:	88 e0       	ldi	r24, 0x08	; 8
    3466:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	83 e7       	ldi	r24, 0x73	; 115
    346e:	94 e0       	ldi	r25, 0x04	; 4
    3470:	0e 94 f4 06 	call	0xde8	; 0xde8 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:249
        }
        break;
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    3474:	61 e0       	ldi	r22, 0x01	; 1
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:250
        lcd.print("CHANT PLAYING...");
    347c:	88 e0       	ldi	r24, 0x08	; 8
    347e:	92 e0       	ldi	r25, 0x02	; 2
    3480:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:251
        if (millis() >= timrAmp + ampDelay)
    3484:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3488:	ab 01       	movw	r20, r22
    348a:	bc 01       	movw	r22, r24
    348c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timrAmp>
    3490:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timrAmp+0x1>
    3494:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <timrAmp+0x2>
    3498:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <timrAmp+0x3>
    349c:	88 57       	subi	r24, 0x78	; 120
    349e:	9c 4e       	sbci	r25, 0xEC	; 236
    34a0:	af 4f       	sbci	r26, 0xFF	; 255
    34a2:	bf 4f       	sbci	r27, 0xFF	; 255
    34a4:	48 17       	cp	r20, r24
    34a6:	59 07       	cpc	r21, r25
    34a8:	6a 07       	cpc	r22, r26
    34aa:	7b 07       	cpc	r23, r27
    34ac:	10 f0       	brcs	.+4      	; 0x34b2 <main+0xf7e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:252
            PlayChant();
    34ae:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:253
        if (btn == BUTTON_LEFT_SHORT_RELEASE && testMode)
    34b2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    34b6:	84 34       	cpi	r24, 0x44	; 68
    34b8:	09 f0       	breq	.+2      	; 0x34bc <main+0xf88>
    34ba:	a8 cc       	rjmp	.-1712   	; 0x2e0c <main+0x8d8>
    34bc:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <testMode>
    34c0:	88 23       	and	r24, r24
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <main+0xf92>
    34c4:	a3 cc       	rjmp	.-1722   	; 0x2e0c <main+0x8d8>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	86 e1       	ldi	r24, 0x16	; 22
    34cc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
    34d0:	9d cc       	rjmp	.-1734   	; 0x2e0c <main+0x8d8>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    34d2:	9e 8e       	std	Y+30, r9	; 0x1e
    34d4:	8d 8e       	std	Y+29, r8	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    34d6:	b8 01       	movw	r22, r16
    34d8:	89 8d       	ldd	r24, Y+25	; 0x19
    34da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34dc:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
    34e0:	42 cd       	rjmp	.-1404   	; 0x2f66 <main+0xa32>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:285
            lcd.print("VOLUME : ");
            lcd.print(config.vol);
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    34e2:	83 30       	cpi	r24, 0x03	; 3
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <main+0xfb4>
    34e6:	92 cc       	rjmp	.-1756   	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:287
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    34e8:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    34ec:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	8a 30       	cpi	r24, 0x0A	; 10
    34f4:	91 05       	cpc	r25, r1
    34f6:	0c f0       	brlt	.+2      	; 0x34fa <main+0xfc6>
    34f8:	96 cd       	rjmp	.-1236   	; 0x3026 <main+0xaf2>
main():
    34fa:	8e e1       	ldi	r24, 0x1E	; 30
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	93 cd       	rjmp	.-1242   	; 0x3026 <main+0xaf2>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:300
        }
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > menuTimeOut)
    3500:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3504:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <timrMNU>
    3508:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <timrMNU+0x1>
    350c:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <timrMNU+0x2>
    3510:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <timrMNU+0x3>
    3514:	62 1b       	sub	r22, r18
    3516:	73 0b       	sbc	r23, r19
    3518:	84 0b       	sbc	r24, r20
    351a:	95 0b       	sbc	r25, r21
    351c:	61 33       	cpi	r22, 0x31	; 49
    351e:	75 47       	sbci	r23, 0x75	; 117
    3520:	81 05       	cpc	r24, r1
    3522:	91 05       	cpc	r25, r1
    3524:	a0 f0       	brcs	.+40     	; 0x354e <main+0x101a>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3526:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1>
    352a:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <Menu1+0x1>
    352e:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Menu1+0x4>
    3532:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3536:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x2>
    353a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    353e:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    3542:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:303
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3546:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:304
            lcd.clear();
    354a:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:307
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    354e:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:308
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3552:	81 30       	cpi	r24, 0x01	; 1
    3554:	09 f0       	breq	.+2      	; 0x3558 <main+0x1024>
    3556:	88 c0       	rjmp	.+272    	; 0x3668 <main+0x1134>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:311
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    3558:	c8 01       	movw	r24, r16
    355a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    355e:	8b 81       	ldd	r24, Y+3	; 0x03
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <StDate+0x1>
    3566:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:312
            StMonth = rtc.now().month();
    356a:	c8 01       	movw	r24, r16
    356c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <StMonth+0x1>
    3578:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:313
            StYear = rtc.now().year();
    357c:	c8 01       	movw	r24, r16
    357e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	80 53       	subi	r24, 0x30	; 48
    3588:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:313
    358a:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <StYear+0x1>
    358e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <StYear>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:314
            StHr = rtc.now().hour();
    3592:	c8 01       	movw	r24, r16
    3594:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    3598:	8c 81       	ldd	r24, Y+4	; 0x04
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <StHr+0x1>
    35a0:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <StHr>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:315
            StMin = rtc.now().minute();
    35a4:	c8 01       	movw	r24, r16
    35a6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <RTC_DS1307::now() [clone .constprop.79]>
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <StMin+0x1>
    35b2:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <StMin>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:317
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    35b6:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    35ba:	83 30       	cpi	r24, 0x03	; 3
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <main+0x108c>
    35be:	5f c0       	rjmp	.+190    	; 0x367e <main+0x114a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:319
        {
            blinkMode = setHr;
    35c0:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <blinkMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:326
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    35c4:	90 90 20 03 	lds	r9, 0x0320	; 0x800320 <btn>
    35c8:	24 e8       	ldi	r18, 0x84	; 132
    35ca:	92 12       	cpse	r9, r18
    35cc:	14 c0       	rjmp	.+40     	; 0x35f6 <main+0x10c2>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    35ce:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1>
    35d2:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <Menu1+0x1>
    35d6:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Menu1+0x4>
    35da:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    35de:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x2>
    35e2:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    35e6:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    35ea:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:329
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    35ee:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:330
            lcd.clear();
    35f2:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:819
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    35f6:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:821

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    35fa:	89 2d       	mov	r24, r9
    35fc:	8f 77       	andi	r24, 0x7F	; 127
    35fe:	82 30       	cpi	r24, 0x02	; 2
    3600:	09 f4       	brne	.+2      	; 0x3604 <main+0x10d0>
    3602:	45 c0       	rjmp	.+138    	; 0x368e <main+0x115a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:823
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3604:	83 30       	cpi	r24, 0x03	; 3
    3606:	09 f4       	brne	.+2      	; 0x360a <main+0x10d6>
    3608:	45 c0       	rjmp	.+138    	; 0x3694 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:825
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    360a:	31 e0       	ldi	r19, 0x01	; 1
    360c:	93 16       	cp	r9, r19
    360e:	09 f4       	brne	.+2      	; 0x3612 <main+0x10de>
    3610:	44 c0       	rjmp	.+136    	; 0x369a <main+0x1166>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:827
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    3612:	64 e4       	ldi	r22, 0x44	; 68
    3614:	96 16       	cp	r9, r22
    3616:	09 f4       	brne	.+2      	; 0x361a <main+0x10e6>
    3618:	43 c0       	rjmp	.+134    	; 0x36a0 <main+0x116c>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:818
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    361a:	91 2c       	mov	r9, r1
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    361c:	8d ef       	ldi	r24, 0xFD	; 253
    361e:	89 0d       	add	r24, r9
    3620:	82 30       	cpi	r24, 0x02	; 2
    3622:	08 f0       	brcs	.+2      	; 0x3626 <main+0x10f2>
    3624:	bf c0       	rjmp	.+382    	; 0x37a4 <main+0x1270>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    3626:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    362a:	88 23       	and	r24, r24
    362c:	e1 f1       	breq	.+120    	; 0x36a6 <main+0x1172>
    362e:	84 e0       	ldi	r24, 0x04	; 4
    3630:	98 16       	cp	r9, r24
    3632:	c9 f1       	breq	.+114    	; 0x36a6 <main+0x1172>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    3634:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.100]>
    3638:	81 11       	cpse	r24, r1
    363a:	71 c0       	rjmp	.+226    	; 0x371e <main+0x11ea>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:341
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:342
            if (Menu1.getCurrentItemCmdId())
    3642:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    3646:	88 23       	and	r24, r24
    3648:	09 f4       	brne	.+2      	; 0x364c <main+0x1118>
    364a:	e0 cb       	rjmp	.-2112   	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:344
            {
                lcd.setCursor(0, 1);
    364c:	61 e0       	ldi	r22, 0x01	; 1
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:345
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    3654:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:366
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    3656:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <strbuf>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:367
            strbuf[1] = 0;
    365a:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:368
            lcd.print(strbuf);
    365e:	8c ee       	ldi	r24, 0xEC	; 236
    3660:	93 e0       	ldi	r25, 0x03	; 3
    3662:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
    3666:	d2 cb       	rjmp	.-2140   	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:308
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3668:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:307
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	09 f4       	brne	.+2      	; 0x3672 <main+0x113e>
    3670:	73 cf       	rjmp	.-282    	; 0x3558 <main+0x1024>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:309
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    3672:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:308
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3676:	83 30       	cpi	r24, 0x03	; 3
    3678:	09 f0       	breq	.+2      	; 0x367c <main+0x1148>
    367a:	9d cf       	rjmp	.-198    	; 0x35b6 <main+0x1082>
    367c:	6d cf       	rjmp	.-294    	; 0x3558 <main+0x1024>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:321
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    367e:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    3682:	82 30       	cpi	r24, 0x02	; 2
    3684:	09 f0       	breq	.+2      	; 0x3688 <main+0x1154>
    3686:	9e cf       	rjmp	.-196    	; 0x35c4 <main+0x1090>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:323
        {
            blinkMode = setDate;
    3688:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blinkMode>
    368c:	9b cf       	rjmp	.-202    	; 0x35c4 <main+0x1090>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:822
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    368e:	99 24       	eor	r9, r9
    3690:	93 94       	inc	r9
    3692:	c4 cf       	rjmp	.-120    	; 0x361c <main+0x10e8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:824
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    3694:	52 e0       	ldi	r21, 0x02	; 2
    3696:	95 2e       	mov	r9, r21
    3698:	c1 cf       	rjmp	.-126    	; 0x361c <main+0x10e8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:826
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    369a:	43 e0       	ldi	r20, 0x03	; 3
    369c:	94 2e       	mov	r9, r20
    369e:	be cf       	rjmp	.-132    	; 0x361c <main+0x10e8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:828
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    36a0:	34 e0       	ldi	r19, 0x04	; 4
    36a2:	93 2e       	mov	r9, r19
    36a4:	bb cf       	rjmp	.-138    	; 0x361c <main+0x10e8>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    36a6:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    36aa:	81 11       	cpse	r24, r1
    36ac:	13 c0       	rjmp	.+38     	; 0x36d4 <main+0x11a0>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    36ae:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1>
    36b2:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <Menu1+0x1>
    36b6:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Menu1+0x4>
    36ba:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    36be:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x2>
    36c2:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    36c6:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:336
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            lcd.clear();
    36ca:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:337
            appMode = APP_NORMAL_MODE;
    36ce:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
    36d2:	9c cb       	rjmp	.-2248   	; 0x2e0c <main+0x8d8>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    36d4:	81 50       	subi	r24, 0x01	; 1
    36d6:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    36da:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    36dc:	dc 01       	movw	r26, r24
    36de:	aa 0f       	add	r26, r26
    36e0:	bb 1f       	adc	r27, r27
    36e2:	aa 0f       	add	r26, r26
    36e4:	bb 1f       	adc	r27, r27
    36e6:	a3 50       	subi	r26, 0x03	; 3
    36e8:	bc 4f       	sbci	r27, 0xFC	; 252
    36ea:	19 96       	adiw	r26, 0x09	; 9
    36ec:	2d 91       	ld	r18, X+
    36ee:	3c 91       	ld	r19, X
    36f0:	1a 97       	sbiw	r26, 0x0a	; 10
    36f2:	30 93 01 04 	sts	0x0401, r19	; 0x800401 <Menu1+0x4>
    36f6:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    36fa:	88 0f       	add	r24, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	fc 01       	movw	r30, r24
    3704:	eb 5f       	subi	r30, 0xFB	; 251
    3706:	fb 4f       	sbci	r31, 0xFB	; 251
    3708:	80 81       	ld	r24, Z
    370a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    370e:	17 96       	adiw	r26, 0x07	; 7
    3710:	8c 91       	ld	r24, X
    3712:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    3716:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    3718:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <refreshMenuDisplay(unsigned char)>
    371c:	77 cb       	rjmp	.-2322   	; 0x2e0c <main+0x8d8>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    371e:	0e 94 a1 01 	call	0x342	; 0x342 <MenuManager::currentItemHasChildren() [clone .constprop.100]>
    3722:	88 23       	and	r24, r24
    3724:	09 f4       	brne	.+2      	; 0x3728 <main+0x11f4>
    3726:	3c c0       	rjmp	.+120    	; 0x37a0 <main+0x126c>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3728:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <Menu1+0x6>
    372c:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <Menu1+0x3>
    3730:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    3734:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <Menu1+0x1b>
    3738:	25 30       	cpi	r18, 0x05	; 5
    373a:	e8 f4       	brcc	.+58     	; 0x3776 <main+0x1242>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    373c:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    3740:	82 2f       	mov	r24, r18
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	dc 01       	movw	r26, r24
    3746:	aa 0f       	add	r26, r26
    3748:	bb 1f       	adc	r27, r27
    374a:	aa 0f       	add	r26, r26
    374c:	bb 1f       	adc	r27, r27
    374e:	a3 50       	subi	r26, 0x03	; 3
    3750:	bc 4f       	sbci	r27, 0xFC	; 252
    3752:	17 96       	adiw	r26, 0x07	; 7
    3754:	3c 93       	st	X, r19
    3756:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	88 0f       	add	r24, r24
    375e:	99 1f       	adc	r25, r25
    3760:	8b 5f       	subi	r24, 0xFB	; 251
    3762:	9b 4f       	sbci	r25, 0xFB	; 251
    3764:	fc 01       	movw	r30, r24
    3766:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    3768:	1a 96       	adiw	r26, 0x0a	; 10
    376a:	7c 93       	st	X, r23
    376c:	6e 93       	st	-X, r22
    376e:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:215
    menuStackCount++;
    3770:	2f 5f       	subi	r18, 0xFF	; 255
    3772:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    3776:	cb 01       	movw	r24, r22
    3778:	f6 e0       	ldi	r31, 0x06	; 6
    377a:	3f 9f       	mul	r19, r31
    377c:	80 0d       	add	r24, r0
    377e:	91 1d       	adc	r25, r1
    3780:	11 24       	eor	r1, r1
    3782:	fc 01       	movw	r30, r24
    3784:	35 96       	adiw	r30, 0x05	; 5
    3786:	e4 91       	lpm	r30, Z
    3788:	e0 93 02 04 	sts	0x0402, r30	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    378c:	fc 01       	movw	r30, r24
    378e:	33 96       	adiw	r30, 0x03	; 3
    3790:	85 91       	lpm	r24, Z+
    3792:	94 91       	lpm	r25, Z
    3794:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Menu1+0x4>
    3798:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    379c:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    37a0:	83 e0       	ldi	r24, 0x03	; 3
    37a2:	ba cf       	rjmp	.-140    	; 0x3718 <main+0x11e4>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    37a4:	21 e0       	ldi	r18, 0x01	; 1
    37a6:	92 12       	cpse	r9, r18
    37a8:	0a c0       	rjmp	.+20     	; 0x37be <main+0x128a>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    37aa:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <Menu1+0x6>
    37ae:	88 23       	and	r24, r24
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <main+0x1280>
    37b2:	2c cb       	rjmp	.-2472   	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    37b4:	81 50       	subi	r24, 0x01	; 1
    37b6:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	ad cf       	rjmp	.-166    	; 0x3718 <main+0x11e4>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    37be:	32 e0       	ldi	r19, 0x02	; 2
    37c0:	93 12       	cpse	r9, r19
    37c2:	24 cb       	rjmp	.-2488   	; 0x2e0c <main+0x8d8>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    37c4:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <Menu1+0x6>
    37c8:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <Menu1+0x5>
    37cc:	21 50       	subi	r18, 0x01	; 1
    37ce:	33 0b       	sbc	r19, r19
    37d0:	82 17       	cp	r24, r18
    37d2:	13 06       	cpc	r1, r19
    37d4:	0c f0       	brlt	.+2      	; 0x37d8 <main+0x12a4>
    37d6:	1a cb       	rjmp	.-2508   	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    37d8:	8f 5f       	subi	r24, 0xFF	; 255
    37da:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	9b cf       	rjmp	.-202    	; 0x3718 <main+0x11e4>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:354
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    37e2:	0e 94 b3 01 	call	0x366	; 0x366 <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    37e6:	68 2e       	mov	r6, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:410

    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }
    switch (cmdId)
    37e8:	ee ef       	ldi	r30, 0xFE	; 254
    37ea:	e8 0f       	add	r30, r24
    37ec:	e4 31       	cpi	r30, 0x14	; 20
    37ee:	08 f0       	brcs	.+2      	; 0x37f2 <main+0x12be>
    37f0:	2e c0       	rjmp	.+92     	; 0x384e <main+0x131a>
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	e2 50       	subi	r30, 0x02	; 2
    37f6:	f4 4e       	sbci	r31, 0xE4	; 228
    37f8:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__tablejump2__>
    37fc:	12 1c       	adc	r1, r2
    37fe:	aa 1c       	adc	r10, r10
    3800:	27 1c       	adc	r2, r7
    3802:	ff 1c       	adc	r15, r15
    3804:	70 1d       	adc	r23, r0
    3806:	90 1d       	adc	r25, r0
    3808:	ab 1d       	adc	r26, r11
    380a:	27 1c       	adc	r2, r7
    380c:	db 1d       	adc	r29, r11
    380e:	ff 1d       	adc	r31, r15
    3810:	27 1c       	adc	r2, r7
    3812:	15 1e       	adc	r1, r21
    3814:	36 1e       	adc	r3, r22
    3816:	5a 1e       	adc	r5, r26
    3818:	7b 1e       	adc	r7, r27
    381a:	9f 1e       	adc	r9, r31
    381c:	27 1c       	adc	r2, r7
    381e:	e9 1e       	adc	r14, r25
    3820:	c9 1e       	adc	r12, r25
    3822:	af 1e       	adc	r10, r31
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:414
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    3824:	62 e0       	ldi	r22, 0x02	; 2
    3826:	96 12       	cpse	r9, r22
    3828:	37 c0       	rjmp	.+110    	; 0x3898 <main+0x1364>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:416
        {
            if (blinkMode == setDate)
    382a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    382e:	82 30       	cpi	r24, 0x02	; 2
    3830:	81 f4       	brne	.+32     	; 0x3852 <main+0x131e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:417
                StDate = ++StDate > 31 ? 1 : StDate;
    3832:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <StDate>
    3836:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <StDate+0x1>
    383a:	01 96       	adiw	r24, 0x01	; 1
    383c:	80 32       	cpi	r24, 0x20	; 32
    383e:	91 05       	cpc	r25, r1
    3840:	14 f0       	brlt	.+4      	; 0x3846 <main+0x1312>
main():
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:426
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
    3846:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <StDate+0x1>
    384a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:588
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    384e:	81 2c       	mov	r8, r1
    3850:	ea c0       	rjmp	.+468    	; 0x3a26 <main+0x14f2>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:418
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    3852:	83 30       	cpi	r24, 0x03	; 3
    3854:	79 f4       	brne	.+30     	; 0x3874 <main+0x1340>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:419
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    3856:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <StMonth>
    385a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <StMonth+0x1>
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	8d 30       	cpi	r24, 0x0D	; 13
    3862:	91 05       	cpc	r25, r1
    3864:	14 f0       	brlt	.+4      	; 0x386a <main+0x1336>
main():
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:428
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
    386a:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <StMonth+0x1>
    386e:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <StMonth>
    3872:	ed cf       	rjmp	.-38     	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:420
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    3874:	84 30       	cpi	r24, 0x04	; 4
    3876:	59 f7       	brne	.-42     	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:421
                StYear = ++StYear > 2050 ? 2020 : StYear;
    3878:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <StYear>
    387c:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <StYear+0x1>
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	83 30       	cpi	r24, 0x03	; 3
    3884:	e8 e0       	ldi	r30, 0x08	; 8
    3886:	9e 07       	cpc	r25, r30
    3888:	14 f0       	brlt	.+4      	; 0x388e <main+0x135a>
main():
    388a:	84 ee       	ldi	r24, 0xE4	; 228
    388c:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:430
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2020 ? 2050 : StYear;
    388e:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <StYear+0x1>
    3892:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <StYear>
    3896:	db cf       	rjmp	.-74     	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:423
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    3898:	f3 e0       	ldi	r31, 0x03	; 3
    389a:	9f 12       	cpse	r9, r31
    389c:	2b c0       	rjmp	.+86     	; 0x38f4 <main+0x13c0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:425
        {
            if (blinkMode == setDate)
    389e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    38a2:	82 30       	cpi	r24, 0x02	; 2
    38a4:	59 f4       	brne	.+22     	; 0x38bc <main+0x1388>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:426
                StDate = --StDate < 1 ? 31 : StDate;
    38a6:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <StDate>
    38aa:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <StDate+0x1>
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	18 16       	cp	r1, r24
    38b2:	19 06       	cpc	r1, r25
    38b4:	44 f2       	brlt	.-112    	; 0x3846 <main+0x1312>
main():
    38b6:	8f e1       	ldi	r24, 0x1F	; 31
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	c5 cf       	rjmp	.-118    	; 0x3846 <main+0x1312>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:427
            else if (blinkMode == setMonth)
    38bc:	83 30       	cpi	r24, 0x03	; 3
    38be:	59 f4       	brne	.+22     	; 0x38d6 <main+0x13a2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:428
                StMonth = --StMonth < 1 ? 12 : StMonth;
    38c0:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <StMonth>
    38c4:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <StMonth+0x1>
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	18 16       	cp	r1, r24
    38cc:	19 06       	cpc	r1, r25
    38ce:	6c f2       	brlt	.-102    	; 0x386a <main+0x1336>
main():
    38d0:	8c e0       	ldi	r24, 0x0C	; 12
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	ca cf       	rjmp	.-108    	; 0x386a <main+0x1336>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:429
            else if (blinkMode == setYear)
    38d6:	84 30       	cpi	r24, 0x04	; 4
    38d8:	09 f0       	breq	.+2      	; 0x38dc <main+0x13a8>
    38da:	b9 cf       	rjmp	.-142    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:430
                StYear = --StYear < 2020 ? 2050 : StYear;
    38dc:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <StYear>
    38e0:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <StYear+0x1>
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	84 3e       	cpi	r24, 0xE4	; 228
    38e8:	27 e0       	ldi	r18, 0x07	; 7
    38ea:	92 07       	cpc	r25, r18
    38ec:	84 f6       	brge	.-96     	; 0x388e <main+0x135a>
main():
    38ee:	82 e0       	ldi	r24, 0x02	; 2
    38f0:	98 e0       	ldi	r25, 0x08	; 8
    38f2:	cd cf       	rjmp	.-102    	; 0x388e <main+0x135a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:432
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    38f4:	31 e0       	ldi	r19, 0x01	; 1
    38f6:	93 12       	cpse	r9, r19
    38f8:	aa cf       	rjmp	.-172    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:434
        {
            if (blinkMode == setDate)
    38fa:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    38fe:	82 30       	cpi	r24, 0x02	; 2
    3900:	21 f4       	brne	.+8      	; 0x390a <main+0x13d6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:436
            {
                blinkMode = setMonth;
    3902:	83 e0       	ldi	r24, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:440
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
    3904:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blinkMode>
    3908:	a2 cf       	rjmp	.-188    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:438
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    390a:	83 30       	cpi	r24, 0x03	; 3
    390c:	11 f4       	brne	.+4      	; 0x3912 <main+0x13de>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:440
            {
                blinkMode = setYear;
    390e:	84 e0       	ldi	r24, 0x04	; 4
    3910:	f9 cf       	rjmp	.-14     	; 0x3904 <main+0x13d0>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:442
            }
            else if (blinkMode == setYear)
    3912:	84 30       	cpi	r24, 0x04	; 4
    3914:	09 f0       	breq	.+2      	; 0x3918 <main+0x13e4>
    3916:	9b cf       	rjmp	.-202    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:475
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    3918:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <StMin>
    391c:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <StHr>
    3920:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <StDate>
    3924:	50 91 27 03 	lds	r21, 0x0327	; 0x800327 <StMonth>
    3928:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <StYear>
    392c:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3930:	80 3d       	cpi	r24, 0xD0	; 208
    3932:	67 e0       	ldi	r22, 0x07	; 7
    3934:	96 07       	cpc	r25, r22
    3936:	10 f0       	brcs	.+4      	; 0x393c <main+0x1408>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    3938:	80 5d       	subi	r24, 0xD0	; 208
    393a:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    393c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    393e:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3940:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3942:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3944:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    3946:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:475
    3948:	c8 01       	movw	r24, r16
    394a:	0e 94 67 08 	call	0x10ce	; 0x10ce <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:477
                complete = true;
                blink = true;
    394e:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    3952:	15 c0       	rjmp	.+42     	; 0x397e <main+0x144a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:453
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3954:	82 e0       	ldi	r24, 0x02	; 2
    3956:	98 12       	cpse	r9, r24
    3958:	26 c0       	rjmp	.+76     	; 0x39a6 <main+0x1472>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:455
        {
            if (blinkMode == setHr)
    395a:	90 90 0a 03 	lds	r9, 0x030A	; 0x80030a <blinkMode>
    395e:	91 10       	cpse	r9, r1
    3960:	10 c0       	rjmp	.+32     	; 0x3982 <main+0x144e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:456
                StHr = ++StHr > 23 ? 0 : StHr;
    3962:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <StHr>
    3966:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <StHr+0x1>
    396a:	01 96       	adiw	r24, 0x01	; 1
    396c:	88 31       	cpi	r24, 0x18	; 24
    396e:	91 05       	cpc	r25, r1
    3970:	14 f0       	brlt	.+4      	; 0x3976 <main+0x1442>
main():
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:463
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
    3976:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <StHr+0x1>
    397a:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:404
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    397e:	81 2c       	mov	r8, r1
    3980:	69 c0       	rjmp	.+210    	; 0x3a54 <main+0x1520>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:457
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	99 12       	cpse	r9, r25
    3986:	63 cf       	rjmp	.-314    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:458
                StMin = ++StMin > 59 ? 0 : StMin;
    3988:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <StMin>
    398c:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <StMin+0x1>
    3990:	01 96       	adiw	r24, 0x01	; 1
    3992:	8c 33       	cpi	r24, 0x3C	; 60
    3994:	91 05       	cpc	r25, r1
    3996:	14 f0       	brlt	.+4      	; 0x399c <main+0x1468>
main():
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:465
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
    399c:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <StMin+0x1>
    39a0:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <StMin>
    39a4:	54 cf       	rjmp	.-344    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:460
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    39a6:	e3 e0       	ldi	r30, 0x03	; 3
    39a8:	9e 12       	cpse	r9, r30
    39aa:	1b c0       	rjmp	.+54     	; 0x39e2 <main+0x14ae>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:462
        {
            if (blinkMode == setHr)
    39ac:	90 90 0a 03 	lds	r9, 0x030A	; 0x80030a <blinkMode>
    39b0:	91 10       	cpse	r9, r1
    39b2:	0a c0       	rjmp	.+20     	; 0x39c8 <main+0x1494>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:463
                StHr = --StHr < 0 ? 23 : StHr;
    39b4:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <StHr>
    39b8:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <StHr+0x1>
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	97 ff       	sbrs	r25, 7
    39c0:	da cf       	rjmp	.-76     	; 0x3976 <main+0x1442>
main():
    39c2:	87 e1       	ldi	r24, 0x17	; 23
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	d7 cf       	rjmp	.-82     	; 0x3976 <main+0x1442>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:464
            else if (blinkMode == setMin)
    39c8:	f1 e0       	ldi	r31, 0x01	; 1
    39ca:	9f 12       	cpse	r9, r31
    39cc:	40 cf       	rjmp	.-384    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:465
                StMin = --StMin < 0 ? 59 : StMin;
    39ce:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <StMin>
    39d2:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <StMin+0x1>
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	97 ff       	sbrs	r25, 7
    39da:	e0 cf       	rjmp	.-64     	; 0x399c <main+0x1468>
main():
    39dc:	8b e3       	ldi	r24, 0x3B	; 59
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	dd cf       	rjmp	.-70     	; 0x399c <main+0x1468>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:467
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    39e2:	21 e0       	ldi	r18, 0x01	; 1
    39e4:	92 12       	cpse	r9, r18
    39e6:	33 cf       	rjmp	.-410    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:469
        {
            if (blinkMode == setHr)
    39e8:	90 90 0a 03 	lds	r9, 0x030A	; 0x80030a <blinkMode>
    39ec:	91 10       	cpse	r9, r1
    39ee:	03 c0       	rjmp	.+6      	; 0x39f6 <main+0x14c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:471
            {
                blinkMode = setMin;
    39f0:	70 92 0a 03 	sts	0x030A, r7	; 0x80030a <blinkMode>
    39f4:	c4 cf       	rjmp	.-120    	; 0x397e <main+0x144a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:473
            }
            else if (blinkMode == setMin)
    39f6:	31 e0       	ldi	r19, 0x01	; 1
    39f8:	93 12       	cpse	r9, r19
    39fa:	29 cf       	rjmp	.-430    	; 0x384e <main+0x131a>
    39fc:	8d cf       	rjmp	.-230    	; 0x3918 <main+0x13e4>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:485
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    39fe:	89 2d       	mov	r24, r9
    3a00:	8f 77       	andi	r24, 0x7F	; 127
    3a02:	82 30       	cpi	r24, 0x02	; 2
    3a04:	91 f4       	brne	.+36     	; 0x3a2a <main+0x14f6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:487
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    3a06:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0xf>
    3a0a:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x10>
    3a0e:	01 96       	adiw	r24, 0x01	; 1
    3a10:	88 31       	cpi	r24, 0x18	; 24
    3a12:	91 05       	cpc	r25, r1
    3a14:	14 f0       	brlt	.+4      	; 0x3a1a <main+0x14e6>
main():
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:491
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    3a1a:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x10>
    3a1e:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:528
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    3a22:	88 24       	eor	r8, r8
    3a24:	83 94       	inc	r8
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:403
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3a26:	91 2c       	mov	r9, r1
    3a28:	15 c0       	rjmp	.+42     	; 0x3a54 <main+0x1520>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:489
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3a2a:	83 30       	cpi	r24, 0x03	; 3
    3a2c:	51 f4       	brne	.+20     	; 0x3a42 <main+0x150e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:491
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    3a2e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0xf>
    3a32:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x10>
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	97 ff       	sbrs	r25, 7
    3a3a:	ef cf       	rjmp	.-34     	; 0x3a1a <main+0x14e6>
main():
    3a3c:	87 e1       	ldi	r24, 0x17	; 23
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	ec cf       	rjmp	.-40     	; 0x3a1a <main+0x14e6>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:493
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	98 12       	cpse	r9, r24
    3a46:	03 cf       	rjmp	.-506    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:495
        {
            config.save();
    3a48:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <Config::save() [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:484
        }
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
    3a4c:	88 24       	eor	r8, r8
    3a4e:	83 94       	inc	r8
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:496
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    3a50:	99 24       	eor	r9, r9
    3a52:	93 94       	inc	r9
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:765
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    3a54:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <btn>
    3a58:	84 34       	cpi	r24, 0x44	; 68
    3a5a:	19 f0       	breq	.+6      	; 0x3a62 <main+0x152e>
    3a5c:	99 20       	and	r9, r9
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <main+0x152e>
    3a60:	14 c2       	rjmp	.+1064   	; 0x3e8a <main+0x1956>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:768
    {
        complete = true;
        lcd.setCursor(1, 1);
    3a62:	61 e0       	ldi	r22, 0x01	; 1
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:769
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3a6a:	86 2d       	mov	r24, r6
    3a6c:	0e 94 cf 0b 	call	0x179e	; 0x179e <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    3a70:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    3a74:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:767
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    3a78:	88 24       	eor	r8, r8
    3a7a:	83 94       	inc	r8
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:355
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > menuTimeOut)
    3a7c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3a80:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <timrMNU>
    3a84:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <timrMNU+0x1>
    3a88:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <timrMNU+0x2>
    3a8c:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <timrMNU+0x3>
    3a90:	62 1b       	sub	r22, r18
    3a92:	73 0b       	sbc	r23, r19
    3a94:	84 0b       	sbc	r24, r20
    3a96:	95 0b       	sbc	r25, r21
    3a98:	61 33       	cpi	r22, 0x31	; 49
    3a9a:	75 47       	sbci	r23, 0x75	; 117
    3a9c:	81 05       	cpc	r24, r1
    3a9e:	91 05       	cpc	r25, r1
    3aa0:	a0 f0       	brcs	.+40     	; 0x3aca <main+0x1596>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3aa2:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1>
    3aa6:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <Menu1+0x1>
    3aaa:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Menu1+0x4>
    3aae:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3ab2:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x2>
    3ab6:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3aba:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    3abe:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:358
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3ac2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:359
            lcd.clear();
    3ac6:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:361
        }
        if (processingComplete)
    3aca:	88 20       	and	r8, r8
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <main+0x159c>
    3ace:	9e c9       	rjmp	.-3268   	; 0x2e0c <main+0x8d8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:363
        {
            appMode = APP_MENU_MODE;
    3ad0:	70 92 15 03 	sts	0x0315, r7	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:365
            // clear forward arrow
            lcd.setCursor(0, 1);
    3ad4:	61 e0       	ldi	r22, 0x01	; 1
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:366
            strbuf[0] = ' '; // clear forward arrow
    3adc:	80 e2       	ldi	r24, 0x20	; 32
    3ade:	bb cd       	rjmp	.-1162   	; 0x3656 <main+0x1122>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:507
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3ae0:	89 2d       	mov	r24, r9
    3ae2:	8f 77       	andi	r24, 0x7F	; 127
    3ae4:	82 30       	cpi	r24, 0x02	; 2
    3ae6:	79 f4       	brne	.+30     	; 0x3b06 <main+0x15d2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:509
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    3ae8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x11>
    3aec:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <config+0x12>
    3af0:	01 96       	adiw	r24, 0x01	; 1
    3af2:	88 31       	cpi	r24, 0x18	; 24
    3af4:	91 05       	cpc	r25, r1
    3af6:	14 f0       	brlt	.+4      	; 0x3afc <main+0x15c8>
main():
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:513
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    3afc:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <config+0x12>
    3b00:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x11>
    3b04:	8e cf       	rjmp	.-228    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:511
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b06:	83 30       	cpi	r24, 0x03	; 3
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <main+0x15d8>
    3b0a:	15 c1       	rjmp	.+554    	; 0x3d36 <main+0x1802>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:513
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    3b0c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x11>
    3b10:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <config+0x12>
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	97 ff       	sbrs	r25, 7
    3b18:	f1 cf       	rjmp	.-30     	; 0x3afc <main+0x15c8>
main():
    3b1a:	87 e1       	ldi	r24, 0x17	; 23
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	ee cf       	rjmp	.-36     	; 0x3afc <main+0x15c8>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:529
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3b20:	89 2d       	mov	r24, r9
    3b22:	8f 77       	andi	r24, 0x7F	; 127
    3b24:	82 30       	cpi	r24, 0x02	; 2
    3b26:	51 f4       	brne	.+20     	; 0x3b3c <main+0x1608>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:531
        {
            config.Song1_Count = ++config.Song1_Count;
    3b28:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <config+0x18>
    3b2c:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <config+0x19>
    3b30:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:535
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    3b32:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x19>
    3b36:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x18>
    3b3a:	73 cf       	rjmp	.-282    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:533
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b3c:	83 30       	cpi	r24, 0x03	; 3
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <main+0x160e>
    3b40:	0a c1       	rjmp	.+532    	; 0x3d56 <main+0x1822>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:535
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    3b42:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <config+0x18>
    3b46:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <config+0x19>
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	97 ff       	sbrs	r25, 7
    3b4e:	f1 cf       	rjmp	.-30     	; 0x3b32 <main+0x15fe>
main():
    3b50:	84 e6       	ldi	r24, 0x64	; 100
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	ee cf       	rjmp	.-36     	; 0x3b32 <main+0x15fe>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:551
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3b56:	89 2d       	mov	r24, r9
    3b58:	8f 77       	andi	r24, 0x7F	; 127
    3b5a:	82 30       	cpi	r24, 0x02	; 2
    3b5c:	79 f4       	brne	.+30     	; 0x3b7c <main+0x1648>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:553
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    3b5e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    3b62:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    3b66:	01 96       	adiw	r24, 0x01	; 1
    3b68:	8f 31       	cpi	r24, 0x1F	; 31
    3b6a:	91 05       	cpc	r25, r1
    3b6c:	14 f0       	brlt	.+4      	; 0x3b72 <main+0x163e>
main():
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:557
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    3b72:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    3b76:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
    3b7a:	53 cf       	rjmp	.-346    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:555
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b7c:	83 30       	cpi	r24, 0x03	; 3
    3b7e:	59 f4       	brne	.+22     	; 0x3b96 <main+0x1662>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:557
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    3b80:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <config+0x15>
    3b84:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <config+0x16>
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	18 16       	cp	r1, r24
    3b8c:	19 06       	cpc	r1, r25
    3b8e:	8c f3       	brlt	.-30     	; 0x3b72 <main+0x163e>
main():
    3b90:	8e e1       	ldi	r24, 0x1E	; 30
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	ee cf       	rjmp	.-36     	; 0x3b72 <main+0x163e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:559
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3b96:	f1 e0       	ldi	r31, 0x01	; 1
    3b98:	9f 12       	cpse	r9, r31
    3b9a:	59 ce       	rjmp	.-846    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:561
        {
            config.save();
    3b9c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <Config::save() [clone .constprop.28]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3ba0:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <config+0x15>
    3ba4:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <config+0x16>
    3ba8:	77 27       	eor	r23, r23
    3baa:	86 e0       	ldi	r24, 0x06	; 6
    3bac:	0e 94 ee 04 	call	0x9dc	; 0x9dc <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.59]>
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:573
        }
        break;
    }
    case mnuCmdselectTime:
    {
        configChanged = true;
    3bb0:	88 24       	eor	r8, r8
    3bb2:	83 94       	inc	r8
    3bb4:	4f cf       	rjmp	.-354    	; 0x3a54 <main+0x1520>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:574
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3bb6:	89 2d       	mov	r24, r9
    3bb8:	8f 77       	andi	r24, 0x7F	; 127
    3bba:	82 30       	cpi	r24, 0x02	; 2
    3bbc:	79 f4       	brne	.+30     	; 0x3bdc <main+0x16a8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:576
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    3bbe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    3bc2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    3bc6:	01 96       	adiw	r24, 0x01	; 1
    3bc8:	88 31       	cpi	r24, 0x18	; 24
    3bca:	91 05       	cpc	r25, r1
    3bcc:	14 f0       	brlt	.+4      	; 0x3bd2 <main+0x169e>
main():
    3bce:	84 e0       	ldi	r24, 0x04	; 4
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:580
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3bd2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    3bd6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
    3bda:	23 cf       	rjmp	.-442    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:578
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3bdc:	83 30       	cpi	r24, 0x03	; 3
    3bde:	59 f4       	brne	.+22     	; 0x3bf6 <main+0x16c2>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:580
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3be0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    3be4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	84 30       	cpi	r24, 0x04	; 4
    3bec:	91 05       	cpc	r25, r1
    3bee:	8c f7       	brge	.-30     	; 0x3bd2 <main+0x169e>
main():
    3bf0:	87 e1       	ldi	r24, 0x17	; 23
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	ee cf       	rjmp	.-36     	; 0x3bd2 <main+0x169e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:582
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3bf6:	21 e0       	ldi	r18, 0x01	; 1
    3bf8:	92 12       	cpse	r9, r18
    3bfa:	29 ce       	rjmp	.-942    	; 0x384e <main+0x131a>
    3bfc:	d9 cf       	rjmp	.-78     	; 0x3bb0 <main+0x167c>
reset():
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3bfe:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <Menu1>
    3c02:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <Menu1+0x1>
    3c06:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Menu1+0x4>
    3c0a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3c0e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x2>
    3c12:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3c16:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.2/MenuManager.cpp:21
  menuStackCount = 0;
    3c1a:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:595
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    3c1e:	84 e0       	ldi	r24, 0x04	; 4
    3c20:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:596
        lcd.clear();
    3c24:	0e 94 6e 07 	call	0xedc	; 0xedc <LiquidCrystal_I2C::clear() [clone .constprop.65]>
    3c28:	12 ce       	rjmp	.-988    	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:602
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3c2a:	89 2d       	mov	r24, r9
    3c2c:	8f 77       	andi	r24, 0x7F	; 127
    3c2e:	82 30       	cpi	r24, 0x02	; 2
    3c30:	79 f4       	brne	.+30     	; 0x3c50 <main+0x171c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:604
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    3c32:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <config+0x20>
    3c36:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <config+0x21>
    3c3a:	01 96       	adiw	r24, 0x01	; 1
    3c3c:	89 30       	cpi	r24, 0x09	; 9
    3c3e:	91 05       	cpc	r25, r1
    3c40:	14 f0       	brlt	.+4      	; 0x3c46 <main+0x1712>
main():
    3c42:	83 e0       	ldi	r24, 0x03	; 3
    3c44:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:608
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    3c46:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x21>
    3c4a:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x20>
    3c4e:	e9 ce       	rjmp	.-558    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:606
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3c50:	83 30       	cpi	r24, 0x03	; 3
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <main+0x1722>
    3c54:	ba c0       	rjmp	.+372    	; 0x3dca <main+0x1896>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:608
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    3c56:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <config+0x20>
    3c5a:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <config+0x21>
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	83 30       	cpi	r24, 0x03	; 3
    3c62:	91 05       	cpc	r25, r1
    3c64:	84 f7       	brge	.-32     	; 0x3c46 <main+0x1712>
main():
    3c66:	88 e0       	ldi	r24, 0x08	; 8
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	ed cf       	rjmp	.-38     	; 0x3c46 <main+0x1712>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:624
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3c6c:	89 2d       	mov	r24, r9
    3c6e:	8f 77       	andi	r24, 0x7F	; 127
    3c70:	82 30       	cpi	r24, 0x02	; 2
    3c72:	79 f4       	brne	.+30     	; 0x3c92 <main+0x175e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:626
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    3c74:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <config+0x24>
    3c78:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <config+0x25>
    3c7c:	01 96       	adiw	r24, 0x01	; 1
    3c7e:	89 30       	cpi	r24, 0x09	; 9
    3c80:	91 05       	cpc	r25, r1
    3c82:	14 f0       	brlt	.+4      	; 0x3c88 <main+0x1754>
main():
    3c84:	83 e0       	ldi	r24, 0x03	; 3
    3c86:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:630
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    3c88:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x25>
    3c8c:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x24>
    3c90:	c8 ce       	rjmp	.-624    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:628
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3c92:	83 30       	cpi	r24, 0x03	; 3
    3c94:	59 f4       	brne	.+22     	; 0x3cac <main+0x1778>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:630
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    3c96:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <config+0x24>
    3c9a:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <config+0x25>
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	83 30       	cpi	r24, 0x03	; 3
    3ca2:	91 05       	cpc	r25, r1
    3ca4:	8c f7       	brge	.-30     	; 0x3c88 <main+0x1754>
main():
    3ca6:	88 e0       	ldi	r24, 0x08	; 8
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	ee cf       	rjmp	.-36     	; 0x3c88 <main+0x1754>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:632
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3cac:	61 e0       	ldi	r22, 0x01	; 1
    3cae:	96 12       	cpse	r9, r22
    3cb0:	ce cd       	rjmp	.-1124   	; 0x384e <main+0x131a>
    3cb2:	ca ce       	rjmp	.-620    	; 0x3a48 <main+0x1514>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:646
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3cb4:	89 2d       	mov	r24, r9
    3cb6:	8f 77       	andi	r24, 0x7F	; 127
    3cb8:	82 30       	cpi	r24, 0x02	; 2
    3cba:	79 f4       	brne	.+30     	; 0x3cda <main+0x17a6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:648
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    3cbc:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <config+0x28>
    3cc0:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <config+0x29>
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	85 31       	cpi	r24, 0x15	; 21
    3cc8:	91 05       	cpc	r25, r1
    3cca:	14 f0       	brlt	.+4      	; 0x3cd0 <main+0x179c>
main():
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:652
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    3cd0:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x29>
    3cd4:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x28>
    3cd8:	a4 ce       	rjmp	.-696    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:650
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3cda:	83 30       	cpi	r24, 0x03	; 3
    3cdc:	09 f0       	breq	.+2      	; 0x3ce0 <main+0x17ac>
    3cde:	b1 ce       	rjmp	.-670    	; 0x3a42 <main+0x150e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:652
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    3ce0:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <config+0x28>
    3ce4:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <config+0x29>
    3ce8:	01 97       	sbiw	r24, 0x01	; 1
    3cea:	18 16       	cp	r1, r24
    3cec:	19 06       	cpc	r1, r25
    3cee:	84 f3       	brlt	.-32     	; 0x3cd0 <main+0x179c>
main():
    3cf0:	84 e1       	ldi	r24, 0x14	; 20
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	ed cf       	rjmp	.-38     	; 0x3cd0 <main+0x179c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:668
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3cf6:	89 2d       	mov	r24, r9
    3cf8:	8f 77       	andi	r24, 0x7F	; 127
    3cfa:	82 30       	cpi	r24, 0x02	; 2
    3cfc:	79 f4       	brne	.+30     	; 0x3d1c <main+0x17e8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:670
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    3cfe:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <config+0x2a>
    3d02:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <config+0x2b>
    3d06:	01 96       	adiw	r24, 0x01	; 1
    3d08:	85 31       	cpi	r24, 0x15	; 21
    3d0a:	91 05       	cpc	r25, r1
    3d0c:	14 f0       	brlt	.+4      	; 0x3d12 <main+0x17de>
main():
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:674
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3d12:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <config+0x2b>
    3d16:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <config+0x2a>
    3d1a:	83 ce       	rjmp	.-762    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:672
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3d1c:	83 30       	cpi	r24, 0x03	; 3
    3d1e:	59 f4       	brne	.+22     	; 0x3d36 <main+0x1802>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:674
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3d20:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <config+0x2a>
    3d24:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <config+0x2b>
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	18 16       	cp	r1, r24
    3d2c:	19 06       	cpc	r1, r25
    3d2e:	8c f3       	brlt	.-30     	; 0x3d12 <main+0x17de>
main():
    3d30:	84 e1       	ldi	r24, 0x14	; 20
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	ee cf       	rjmp	.-36     	; 0x3d12 <main+0x17de>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:676
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	99 12       	cpse	r9, r25
    3d3a:	89 cd       	rjmp	.-1262   	; 0x384e <main+0x131a>
    3d3c:	85 ce       	rjmp	.-758    	; 0x3a48 <main+0x1514>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:690
        break;
    }
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    3d3e:	8e ef       	ldi	r24, 0xFE	; 254
    3d40:	89 0d       	add	r24, r9
    3d42:	82 30       	cpi	r24, 0x02	; 2
    3d44:	40 f4       	brcc	.+16     	; 0x3d56 <main+0x1822>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:692
        {
            config.SchlZone = !config.SchlZone;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <config+0x17>
    3d4c:	91 11       	cpse	r25, r1
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <config+0x17>
    3d54:	66 ce       	rjmp	.-820    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:694
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3d56:	e1 e0       	ldi	r30, 0x01	; 1
    3d58:	9e 12       	cpse	r9, r30
    3d5a:	79 cd       	rjmp	.-1294   	; 0x384e <main+0x131a>
    3d5c:	75 ce       	rjmp	.-790    	; 0x3a48 <main+0x1514>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:708
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3d5e:	89 2d       	mov	r24, r9
    3d60:	8f 77       	andi	r24, 0x7F	; 127
    3d62:	82 30       	cpi	r24, 0x02	; 2
    3d64:	51 f4       	brne	.+20     	; 0x3d7a <main+0x1846>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:710
        {
            config.SerialNo = ++config.SerialNo;
    3d66:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <config+0x1e>
    3d6a:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <config+0x1f>
    3d6e:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:714
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
    3d70:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x1f>
    3d74:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x1e>
    3d78:	54 ce       	rjmp	.-856    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:712
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3d7a:	83 30       	cpi	r24, 0x03	; 3
    3d7c:	31 f4       	brne	.+12     	; 0x3d8a <main+0x1856>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:714
        {
            config.SerialNo = --config.SerialNo;
    3d7e:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <config+0x1e>
    3d82:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <config+0x1f>
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	f3 cf       	rjmp	.-26     	; 0x3d70 <main+0x183c>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:716
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3d8a:	f1 e0       	ldi	r31, 0x01	; 1
    3d8c:	9f 12       	cpse	r9, r31
    3d8e:	5f cd       	rjmp	.-1346   	; 0x384e <main+0x131a>
    3d90:	5b ce       	rjmp	.-842    	; 0x3a48 <main+0x1514>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:730
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3d92:	89 2d       	mov	r24, r9
    3d94:	8f 77       	andi	r24, 0x7F	; 127
    3d96:	82 30       	cpi	r24, 0x02	; 2
    3d98:	51 f4       	brne	.+20     	; 0x3dae <main+0x187a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:732
        {
            config.DataYear = ++config.DataYear;
    3d9a:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <config+0x1c>
    3d9e:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <config+0x1d>
    3da2:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:736
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    3da4:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x1d>
    3da8:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x1c>
    3dac:	3a ce       	rjmp	.-908    	; 0x3a22 <main+0x14ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:734
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3dae:	83 30       	cpi	r24, 0x03	; 3
    3db0:	61 f4       	brne	.+24     	; 0x3dca <main+0x1896>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:736
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    3db2:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <config+0x1c>
    3db6:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <config+0x1d>
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	86 3e       	cpi	r24, 0xE6	; 230
    3dbe:	27 e0       	ldi	r18, 0x07	; 7
    3dc0:	92 07       	cpc	r25, r18
    3dc2:	84 f7       	brge	.-32     	; 0x3da4 <main+0x1870>
    3dc4:	86 ee       	ldi	r24, 0xE6	; 230
    3dc6:	97 e0       	ldi	r25, 0x07	; 7
    3dc8:	ed cf       	rjmp	.-38     	; 0x3da4 <main+0x1870>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:738
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3dca:	31 e0       	ldi	r19, 0x01	; 1
    3dcc:	93 12       	cpse	r9, r19
    3dce:	3f cd       	rjmp	.-1410   	; 0x384e <main+0x131a>
    3dd0:	3b ce       	rjmp	.-906    	; 0x3a48 <main+0x1514>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:751
        }
        break;
    }
    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    3dd2:	61 e8       	ldi	r22, 0x81	; 129
    3dd4:	96 12       	cpse	r9, r22
    3dd6:	53 c0       	rjmp	.+166    	; 0x3e7e <main+0x194a>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    3dd8:	67 e2       	ldi	r22, 0x27	; 39
    3dda:	71 e0       	ldi	r23, 0x01	; 1
    3ddc:	8b e2       	ldi	r24, 0x2B	; 43
    3dde:	93 e0       	ldi	r25, 0x03	; 3
    3de0:	0e 94 c0 23 	call	0x4780	; 0x4780 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:12
  Song1_Count = 100;
    3de4:	84 e6       	ldi	r24, 0x64	; 100
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x19>
    3dec:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:13
  Song2_Count = 100;
    3df0:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x1b>
    3df4:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:14
  startTime = 5; //5AM
    3df8:	e5 e0       	ldi	r30, 0x05	; 5
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	f0 93 3b 03 	sts	0x033B, r31	; 0x80033b <config+0x10>
    3e00:	e0 93 3a 03 	sts	0x033A, r30	; 0x80033a <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:15
  endTime = 22; // 10PM
    3e04:	86 e1       	ldi	r24, 0x16	; 22
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <config+0x12>
    3e0c:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:16
  vol = 20;
    3e10:	84 e1       	ldi	r24, 0x14	; 20
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <config+0x16>
    3e18:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:17
  backLightDur = 20;
    3e1c:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <config+0x14>
    3e20:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:18
  MorSong1Time = 3;
    3e24:	83 e0       	ldi	r24, 0x03	; 3
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x21>
    3e2c:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x20>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:19
  EveSong1Time = 3;
    3e30:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x25>
    3e34:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:20
  MorSongNo = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x29>
    3e40:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:21
  EveSongNo = 2;
    3e44:	82 e0       	ldi	r24, 0x02	; 2
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <config+0x2b>
    3e4c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:22
  SchlZone = 0;
    3e50:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:23
  SerialNo = 240;
    3e54:	80 ef       	ldi	r24, 0xF0	; 240
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x1f>
    3e5c:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.2/Config.cpp:24
  DataYear = 2022;
    3e60:	86 ee       	ldi	r24, 0xE6	; 230
    3e62:	97 e0       	ldi	r25, 0x07	; 7
    3e64:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x1d>
    3e68:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x1c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:754
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:755
            lcd.print("Defaults loaded");
    3e74:	80 e3       	ldi	r24, 0x30	; 48
    3e76:	92 e0       	ldi	r25, 0x02	; 2
    3e78:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
    3e7c:	e8 cc       	rjmp	.-1584   	; 0x384e <main+0x131a>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:757
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	f1 ec       	ldi	r31, 0xC1	; 193
    3e82:	9f 12       	cpse	r9, r31
    3e84:	80 e0       	ldi	r24, 0x00	; 0
main():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:403
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3e86:	98 2e       	mov	r9, r24
    3e88:	7a cd       	rjmp	.-1292   	; 0x397e <main+0x144a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:771
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    3e8a:	88 20       	and	r8, r8
    3e8c:	69 f0       	breq	.+26     	; 0x3ea8 <main+0x1974>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:773
    {
        lcd.setCursor(1, 1);
    3e8e:	61 e0       	ldi	r22, 0x01	; 1
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:774
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3e96:	86 2d       	mov	r24, r6
    3e98:	0e 94 cf 0b 	call	0x179e	; 0x179e <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    3e9c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    3ea0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
    3ea4:	81 2c       	mov	r8, r1
    3ea6:	ea cd       	rjmp	.-1068   	; 0x3a7c <main+0x1548>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:778
    }
    else
    {
        if (millis() - timr_Time > 300)
    3ea8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3eac:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <timr_Time>
    3eb0:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <timr_Time+0x1>
    3eb4:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <timr_Time+0x2>
    3eb8:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <timr_Time+0x3>
    3ebc:	62 1b       	sub	r22, r18
    3ebe:	73 0b       	sbc	r23, r19
    3ec0:	84 0b       	sbc	r24, r20
    3ec2:	95 0b       	sbc	r25, r21
    3ec4:	6d 32       	cpi	r22, 0x2D	; 45
    3ec6:	71 40       	sbci	r23, 0x01	; 1
    3ec8:	81 05       	cpc	r24, r1
    3eca:	91 05       	cpc	r25, r1
    3ecc:	08 f4       	brcc	.+2      	; 0x3ed0 <main+0x199c>
    3ece:	d6 cd       	rjmp	.-1108   	; 0x3a7c <main+0x1548>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:780
        {
            if (blink)
    3ed0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    3ed4:	88 23       	and	r24, r24
    3ed6:	c1 f0       	breq	.+48     	; 0x3f08 <main+0x19d4>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:782
            {
                lcd.setCursor(1, 1);
    3ed8:	61 e0       	ldi	r22, 0x01	; 1
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:783
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3ee0:	86 2d       	mov	r24, r6
    3ee2:	0e 94 cf 0b 	call	0x179e	; 0x179e <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    3ee6:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    3eea:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:784
                blink = false;
    3eee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:809
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    3ef2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <millis>
    3ef6:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <timr_Time>
    3efa:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <timr_Time+0x1>
    3efe:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timr_Time+0x2>
    3f02:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timr_Time+0x3>
    3f06:	ba cd       	rjmp	.-1164   	; 0x3a7c <main+0x1548>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:788
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime)
    3f08:	33 e0       	ldi	r19, 0x03	; 3
    3f0a:	63 12       	cpse	r6, r19
    3f0c:	14 c0       	rjmp	.+40     	; 0x3f36 <main+0x1a02>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:790
                {
                    if (blinkMode == setHr)
    3f0e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    3f12:	81 11       	cpse	r24, r1
    3f14:	0b c0       	rjmp	.+22     	; 0x3f2c <main+0x19f8>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:791
                        lcd.setCursor(1, 1);
    3f16:	61 e0       	ldi	r22, 0x01	; 1
    3f18:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:793
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    3f1a:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:794
                    lcd.print(F("  "));
    3f1e:	88 e8       	ldi	r24, 0x88	; 136
    3f20:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:805
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    3f22:	0e 94 7e 07 	call	0xefc	; 0xefc <Print::print(__FlashStringHelper const*) [clone .constprop.55]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:806
                    blink = true;
    3f26:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    3f2a:	e3 cf       	rjmp	.-58     	; 0x3ef2 <main+0x19be>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:792
            {
                if (cmdId == mnuCmdSetTime)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    3f2c:	81 30       	cpi	r24, 0x01	; 1
    3f2e:	b9 f7       	brne	.-18     	; 0x3f1e <main+0x19ea>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:793
                        lcd.setCursor(4, 1);
    3f30:	61 e0       	ldi	r22, 0x01	; 1
    3f32:	84 e0       	ldi	r24, 0x04	; 4
    3f34:	f2 cf       	rjmp	.-28     	; 0x3f1a <main+0x19e6>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:797
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    3f36:	62 e0       	ldi	r22, 0x02	; 2
    3f38:	66 12       	cpse	r6, r22
    3f3a:	db cf       	rjmp	.-74     	; 0x3ef2 <main+0x19be>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:799
                {
                    if (blinkMode == setDate)
    3f3c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <blinkMode>
    3f40:	82 30       	cpi	r24, 0x02	; 2
    3f42:	39 f4       	brne	.+14     	; 0x3f52 <main+0x1a1e>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:800
                        lcd.setCursor(1, 1);
    3f44:	61 e0       	ldi	r22, 0x01	; 1
    3f46:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:804
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    3f48:	0e 94 3b 07 	call	0xe76	; 0xe76 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:805
                    lcd.print(F("  "));
    3f4c:	85 e8       	ldi	r24, 0x85	; 133
    3f4e:	92 e0       	ldi	r25, 0x02	; 2
    3f50:	e8 cf       	rjmp	.-48     	; 0x3f22 <main+0x19ee>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:801
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    3f52:	83 30       	cpi	r24, 0x03	; 3
    3f54:	19 f4       	brne	.+6      	; 0x3f5c <main+0x1a28>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:802
                        lcd.setCursor(4, 1);
    3f56:	61 e0       	ldi	r22, 0x01	; 1
    3f58:	84 e0       	ldi	r24, 0x04	; 4
    3f5a:	f6 cf       	rjmp	.-20     	; 0x3f48 <main+0x1a14>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:803
                    if (blinkMode == setYear)
    3f5c:	84 30       	cpi	r24, 0x04	; 4
    3f5e:	b1 f7       	brne	.-20     	; 0x3f4c <main+0x1a18>
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:804
                        lcd.setCursor(9, 1);
    3f60:	61 e0       	ldi	r22, 0x01	; 1
    3f62:	89 e0       	ldi	r24, 0x09	; 9
    3f64:	f1 cf       	rjmp	.-30     	; 0x3f48 <main+0x1a14>

00003f66 <_GLOBAL__sub_D_ampDelay>:
_GLOBAL__sub_D_ampDelay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:990
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:58
    setMonth,
    setYear
};
byte blinkMode = setHr;

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    3f6a:	cd e6       	ldi	r28, 0x6D	; 109
    3f6c:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    3f6e:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    3f70:	88 81       	ld	r24, Y
    3f72:	99 81       	ldd	r25, Y+1	; 0x01
    3f74:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:58
    3f78:	24 e0       	ldi	r18, 0x04	; 4
    3f7a:	c5 32       	cpi	r28, 0x25	; 37
    3f7c:	d2 07       	cpc	r29, r18
    3f7e:	b9 f7       	brne	.-18     	; 0x3f6e <_GLOBAL__sub_D_ampDelay+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    3f80:	8e e5       	ldi	r24, 0x5E	; 94
    3f82:	91 e0       	ldi	r25, 0x01	; 1
    3f84:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <mySoftwareSerial+0x1>
    3f88:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    3f8c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SoftwareSerial::active_object>
    3f90:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    3f94:	85 5a       	subi	r24, 0xA5	; 165
    3f96:	94 40       	sbci	r25, 0x04	; 4
    3f98:	71 f4       	brne	.+28     	; 0x3fb6 <_GLOBAL__sub_D_ampDelay+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    3f9a:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <mySoftwareSerial+0x13>
    3f9e:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <mySoftwareSerial+0x14>
    3fa2:	90 81       	ld	r25, Z
    3fa4:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <mySoftwareSerial+0x15>
    3fa8:	80 95       	com	r24
    3faa:	89 23       	and	r24, r25
    3fac:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    3fae:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <SoftwareSerial::active_object+0x1>
    3fb2:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <SoftwareSerial::active_object>
_GLOBAL__sub_D_ampDelay():
e:\Arduino\Arduino Git\ChantBellv2.2/ChantBellv2.2.ino:990
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    3fb6:	df 91       	pop	r29
    3fb8:	cf 91       	pop	r28
    3fba:	08 95       	ret

00003fbc <random_r>:
random_r():
    3fbc:	8f 92       	push	r8
    3fbe:	9f 92       	push	r9
    3fc0:	af 92       	push	r10
    3fc2:	bf 92       	push	r11
    3fc4:	cf 92       	push	r12
    3fc6:	df 92       	push	r13
    3fc8:	ef 92       	push	r14
    3fca:	ff 92       	push	r15
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	ec 01       	movw	r28, r24
    3fd2:	68 81       	ld	r22, Y
    3fd4:	79 81       	ldd	r23, Y+1	; 0x01
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fda:	61 15       	cp	r22, r1
    3fdc:	71 05       	cpc	r23, r1
    3fde:	81 05       	cpc	r24, r1
    3fe0:	91 05       	cpc	r25, r1
    3fe2:	21 f4       	brne	.+8      	; 0x3fec <random_r+0x30>
    3fe4:	64 e2       	ldi	r22, 0x24	; 36
    3fe6:	79 ed       	ldi	r23, 0xD9	; 217
    3fe8:	8b e5       	ldi	r24, 0x5B	; 91
    3fea:	97 e0       	ldi	r25, 0x07	; 7
    3fec:	2d e1       	ldi	r18, 0x1D	; 29
    3fee:	33 ef       	ldi	r19, 0xF3	; 243
    3ff0:	41 e0       	ldi	r20, 0x01	; 1
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divmodsi4>
    3ff8:	49 01       	movw	r8, r18
    3ffa:	5a 01       	movw	r10, r20
    3ffc:	9b 01       	movw	r18, r22
    3ffe:	ac 01       	movw	r20, r24
    4000:	a7 ea       	ldi	r26, 0xA7	; 167
    4002:	b1 e4       	ldi	r27, 0x41	; 65
    4004:	0e 94 05 21 	call	0x420a	; 0x420a <__muluhisi3>
    4008:	6b 01       	movw	r12, r22
    400a:	7c 01       	movw	r14, r24
    400c:	ac ee       	ldi	r26, 0xEC	; 236
    400e:	b4 ef       	ldi	r27, 0xF4	; 244
    4010:	a5 01       	movw	r20, r10
    4012:	94 01       	movw	r18, r8
    4014:	0e 94 13 21 	call	0x4226	; 0x4226 <__mulohisi3>
    4018:	c6 0e       	add	r12, r22
    401a:	d7 1e       	adc	r13, r23
    401c:	e8 1e       	adc	r14, r24
    401e:	f9 1e       	adc	r15, r25
    4020:	f7 fe       	sbrs	r15, 7
    4022:	06 c0       	rjmp	.+12     	; 0x4030 <random_r+0x74>
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	c8 1a       	sub	r12, r24
    4028:	d1 08       	sbc	r13, r1
    402a:	e1 08       	sbc	r14, r1
    402c:	80 e8       	ldi	r24, 0x80	; 128
    402e:	f8 0a       	sbc	r15, r24
    4030:	c8 82       	st	Y, r12
    4032:	d9 82       	std	Y+1, r13	; 0x01
    4034:	ea 82       	std	Y+2, r14	; 0x02
    4036:	fb 82       	std	Y+3, r15	; 0x03
    4038:	c7 01       	movw	r24, r14
    403a:	b6 01       	movw	r22, r12
    403c:	9f 77       	andi	r25, 0x7F	; 127
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	ff 90       	pop	r15
    4044:	ef 90       	pop	r14
    4046:	df 90       	pop	r13
    4048:	cf 90       	pop	r12
    404a:	bf 90       	pop	r11
    404c:	af 90       	pop	r10
    404e:	9f 90       	pop	r9
    4050:	8f 90       	pop	r8
    4052:	08 95       	ret

00004054 <random>:
random():
    4054:	8f 92       	push	r8
    4056:	9f 92       	push	r9
    4058:	af 92       	push	r10
    405a:	bf 92       	push	r11
    405c:	cf 92       	push	r12
    405e:	df 92       	push	r13
    4060:	ef 92       	push	r14
    4062:	ff 92       	push	r15
    4064:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <next>
    4068:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <next+0x1>
    406c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <next+0x2>
    4070:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <next+0x3>
    4074:	61 15       	cp	r22, r1
    4076:	71 05       	cpc	r23, r1
    4078:	81 05       	cpc	r24, r1
    407a:	91 05       	cpc	r25, r1
    407c:	21 f4       	brne	.+8      	; 0x4086 <random+0x32>
    407e:	64 e2       	ldi	r22, 0x24	; 36
    4080:	79 ed       	ldi	r23, 0xD9	; 217
    4082:	8b e5       	ldi	r24, 0x5B	; 91
    4084:	97 e0       	ldi	r25, 0x07	; 7
    4086:	2d e1       	ldi	r18, 0x1D	; 29
    4088:	33 ef       	ldi	r19, 0xF3	; 243
    408a:	41 e0       	ldi	r20, 0x01	; 1
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divmodsi4>
    4092:	49 01       	movw	r8, r18
    4094:	5a 01       	movw	r10, r20
    4096:	9b 01       	movw	r18, r22
    4098:	ac 01       	movw	r20, r24
    409a:	a7 ea       	ldi	r26, 0xA7	; 167
    409c:	b1 e4       	ldi	r27, 0x41	; 65
    409e:	0e 94 05 21 	call	0x420a	; 0x420a <__muluhisi3>
    40a2:	6b 01       	movw	r12, r22
    40a4:	7c 01       	movw	r14, r24
    40a6:	ac ee       	ldi	r26, 0xEC	; 236
    40a8:	b4 ef       	ldi	r27, 0xF4	; 244
    40aa:	a5 01       	movw	r20, r10
    40ac:	94 01       	movw	r18, r8
    40ae:	0e 94 13 21 	call	0x4226	; 0x4226 <__mulohisi3>
    40b2:	c6 0e       	add	r12, r22
    40b4:	d7 1e       	adc	r13, r23
    40b6:	e8 1e       	adc	r14, r24
    40b8:	f9 1e       	adc	r15, r25
    40ba:	f7 fe       	sbrs	r15, 7
    40bc:	06 c0       	rjmp	.+12     	; 0x40ca <random+0x76>
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	c8 1a       	sub	r12, r24
    40c2:	d1 08       	sbc	r13, r1
    40c4:	e1 08       	sbc	r14, r1
    40c6:	80 e8       	ldi	r24, 0x80	; 128
    40c8:	f8 0a       	sbc	r15, r24
    40ca:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <next>
    40ce:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <next+0x1>
    40d2:	e0 92 07 01 	sts	0x0107, r14	; 0x800107 <next+0x2>
    40d6:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <next+0x3>
    40da:	c7 01       	movw	r24, r14
    40dc:	b6 01       	movw	r22, r12
    40de:	9f 77       	andi	r25, 0x7F	; 127
    40e0:	ff 90       	pop	r15
    40e2:	ef 90       	pop	r14
    40e4:	df 90       	pop	r13
    40e6:	cf 90       	pop	r12
    40e8:	bf 90       	pop	r11
    40ea:	af 90       	pop	r10
    40ec:	9f 90       	pop	r9
    40ee:	8f 90       	pop	r8
    40f0:	08 95       	ret

000040f2 <srandom>:
srandom():
    40f2:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <next>
    40f6:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <next+0x1>
    40fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next+0x2>
    40fe:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x3>
    4102:	08 95       	ret

00004104 <strcpy_P>:
strcpy_P():
    4104:	fb 01       	movw	r30, r22
    4106:	dc 01       	movw	r26, r24
    4108:	05 90       	lpm	r0, Z+
    410a:	0d 92       	st	X+, r0
    410c:	00 20       	and	r0, r0
    410e:	e1 f7       	brne	.-8      	; 0x4108 <strcpy_P+0x4>
    4110:	08 95       	ret

00004112 <__itoa_ncheck>:
__itoa_ncheck():
    4112:	bb 27       	eor	r27, r27
    4114:	4a 30       	cpi	r20, 0x0A	; 10
    4116:	31 f4       	brne	.+12     	; 0x4124 <__itoa_ncheck+0x12>
    4118:	99 23       	and	r25, r25
    411a:	22 f4       	brpl	.+8      	; 0x4124 <__itoa_ncheck+0x12>
    411c:	bd e2       	ldi	r27, 0x2D	; 45
    411e:	90 95       	com	r25
    4120:	81 95       	neg	r24
    4122:	9f 4f       	sbci	r25, 0xFF	; 255
    4124:	0c 94 95 20 	jmp	0x412a	; 0x412a <__utoa_common>

00004128 <__utoa_ncheck>:
__utoa_ncheck():
    4128:	bb 27       	eor	r27, r27

0000412a <__utoa_common>:
    412a:	fb 01       	movw	r30, r22
    412c:	55 27       	eor	r21, r21
    412e:	aa 27       	eor	r26, r26
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	aa 1f       	adc	r26, r26
    4136:	a4 17       	cp	r26, r20
    4138:	10 f0       	brcs	.+4      	; 0x413e <__utoa_common+0x14>
    413a:	a4 1b       	sub	r26, r20
    413c:	83 95       	inc	r24
    413e:	50 51       	subi	r21, 0x10	; 16
    4140:	b9 f7       	brne	.-18     	; 0x4130 <__utoa_common+0x6>
    4142:	a0 5d       	subi	r26, 0xD0	; 208
    4144:	aa 33       	cpi	r26, 0x3A	; 58
    4146:	08 f0       	brcs	.+2      	; 0x414a <__utoa_common+0x20>
    4148:	a9 5d       	subi	r26, 0xD9	; 217
    414a:	a1 93       	st	Z+, r26
    414c:	00 97       	sbiw	r24, 0x00	; 0
    414e:	79 f7       	brne	.-34     	; 0x412e <__utoa_common+0x4>
    4150:	b1 11       	cpse	r27, r1
    4152:	b1 93       	st	Z+, r27
    4154:	11 92       	st	Z+, r1
    4156:	cb 01       	movw	r24, r22
    4158:	0c 94 ae 20 	jmp	0x415c	; 0x415c <strrev>

0000415c <strrev>:
strrev():
    415c:	dc 01       	movw	r26, r24
    415e:	fc 01       	movw	r30, r24
    4160:	67 2f       	mov	r22, r23
    4162:	71 91       	ld	r23, Z+
    4164:	77 23       	and	r23, r23
    4166:	e1 f7       	brne	.-8      	; 0x4160 <strrev+0x4>
    4168:	32 97       	sbiw	r30, 0x02	; 2
    416a:	04 c0       	rjmp	.+8      	; 0x4174 <strrev+0x18>
    416c:	7c 91       	ld	r23, X
    416e:	6d 93       	st	X+, r22
    4170:	70 83       	st	Z, r23
    4172:	62 91       	ld	r22, -Z
    4174:	ae 17       	cp	r26, r30
    4176:	bf 07       	cpc	r27, r31
    4178:	c8 f3       	brcs	.-14     	; 0x416c <strrev+0x10>
    417a:	08 95       	ret

0000417c <eeprom_read_block>:
eeprom_read_block():
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22

00004180 <eeprom_read_blraw>:
    4180:	fc 01       	movw	r30, r24
    4182:	f9 99       	sbic	0x1f, 1	; 31
    4184:	fe cf       	rjmp	.-4      	; 0x4182 <eeprom_read_blraw+0x2>
    4186:	06 c0       	rjmp	.+12     	; 0x4194 <eeprom_read_blraw+0x14>
    4188:	f2 bd       	out	0x22, r31	; 34
    418a:	e1 bd       	out	0x21, r30	; 33
    418c:	f8 9a       	sbi	0x1f, 0	; 31
    418e:	31 96       	adiw	r30, 0x01	; 1
    4190:	00 b4       	in	r0, 0x20	; 32
    4192:	0d 92       	st	X+, r0
    4194:	41 50       	subi	r20, 0x01	; 1
    4196:	50 40       	sbci	r21, 0x00	; 0
    4198:	b8 f7       	brcc	.-18     	; 0x4188 <eeprom_read_blraw+0x8>
    419a:	08 95       	ret

0000419c <eeprom_write_block>:
eeprom_write_block():
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	03 c0       	rjmp	.+6      	; 0x41a8 <eeprom_write_block+0xc>
    41a2:	2d 91       	ld	r18, X+
    41a4:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_write_r18>
    41a8:	41 50       	subi	r20, 0x01	; 1
    41aa:	50 40       	sbci	r21, 0x00	; 0
    41ac:	d0 f7       	brcc	.-12     	; 0x41a2 <eeprom_write_block+0x6>
    41ae:	08 95       	ret

000041b0 <eeprom_write_byte>:
eeprom_write_byte():
    41b0:	26 2f       	mov	r18, r22

000041b2 <eeprom_write_r18>:
    41b2:	f9 99       	sbic	0x1f, 1	; 31
    41b4:	fe cf       	rjmp	.-4      	; 0x41b2 <eeprom_write_r18>
    41b6:	1f ba       	out	0x1f, r1	; 31
    41b8:	92 bd       	out	0x22, r25	; 34
    41ba:	81 bd       	out	0x21, r24	; 33
    41bc:	20 bd       	out	0x20, r18	; 32
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	fa 9a       	sbi	0x1f, 2	; 31
    41c4:	f9 9a       	sbi	0x1f, 1	; 31
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	01 96       	adiw	r24, 0x01	; 1
    41ca:	08 95       	ret

000041cc <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    41cc:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    41ce:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    41d0:	1e f4       	brtc	.+6      	; 0x41d8 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    41d2:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    41d4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    41d8:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    41da:	07 d0       	rcall	.+14     	; 0x41ea <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    41dc:	0e 94 4f 21 	call	0x429e	; 0x429e <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    41e0:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    41e2:	03 d0       	rcall	.+6      	; 0x41ea <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    41e4:	4e f4       	brtc	.+18     	; 0x41f8 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    41e6:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__negsi2>

000041ea <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    41ea:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    41ec:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    41ee:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    41f0:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    41f2:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    41f4:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    41f6:	5f 4f       	sbci	r21, 0xFF	; 255

000041f8 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    41f8:	08 95       	ret

000041fa <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    41fa:	90 95       	com	r25
    41fc:	80 95       	com	r24
    41fe:	70 95       	com	r23
    4200:	61 95       	neg	r22
    4202:	7f 4f       	sbci	r23, 0xFF	; 255
    4204:	8f 4f       	sbci	r24, 0xFF	; 255
    4206:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    4208:	08 95       	ret

0000420a <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    420a:	0e 94 71 21 	call	0x42e2	; 0x42e2 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    420e:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4210:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4212:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4214:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4216:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4218:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    421a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    421c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    421e:	08 95       	ret

00004220 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    4220:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    4222:	0c 94 05 21 	jmp	0x420a	; 0x420a <__muluhisi3>

00004226 <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    4226:	0e 94 05 21 	call	0x420a	; 0x420a <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    422a:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    422c:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    422e:	08 95       	ret

00004230 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    4230:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    4232:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    4234:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    4236:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    4238:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    423a:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    423c:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    423e:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    4240:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    4242:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    4244:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    4246:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    4248:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    424a:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    424c:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    424e:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    4250:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    4252:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    4254:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    4256:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    4258:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    425a:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    425c:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    425e:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    4260:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    4262:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    4264:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    4266:	09 94       	ijmp

00004268 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    4268:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    426a:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    426c:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    426e:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    4270:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    4272:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    4274:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    4276:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    4278:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    427a:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    427c:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    427e:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    4280:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    4282:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    4284:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    4286:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    4288:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    428a:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    428c:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    428e:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    4290:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    4292:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    4294:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    4296:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    4298:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    429a:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    429c:	08 95       	ret

0000429e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    429e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    42a0:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    42a2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    42a4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    42a6:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    42a8:	0d c0       	rjmp	.+26     	; 0x42c4 <__udivmodsi4_ep>

000042aa <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    42aa:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    42ac:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    42ae:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    42b0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    42b2:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    42b4:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    42b6:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    42b8:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    42ba:	20 f0       	brcs	.+8      	; 0x42c4 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    42bc:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    42be:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    42c0:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    42c2:	f5 0b       	sbc	r31, r21

000042c4 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    42c4:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    42c6:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    42c8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    42ca:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    42cc:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    42ce:	69 f7       	brne	.-38     	; 0x42aa <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    42d0:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    42d2:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    42d4:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    42d6:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    42d8:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    42da:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    42dc:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    42de:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    42e0:	08 95       	ret

000042e2 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    42e2:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    42e4:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    42e6:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    42e8:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    42ea:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    42ec:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    42ee:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    42f0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    42f2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    42f4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    42f6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    42f8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    42fa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    42fc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    42fe:	08 95       	ret

00004300 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    4300:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    4302:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    4304:	04 c0       	rjmp	.+8      	; 0x430e <__udivmodqi4_ep>

00004306 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    4306:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    4308:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    430a:	08 f0       	brcs	.+2      	; 0x430e <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    430c:	96 1b       	sub	r25, r22

0000430e <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    430e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    4310:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    4312:	c9 f7       	brne	.-14     	; 0x4306 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    4314:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    4316:	08 95       	ret

00004318 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4318:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    431a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    431c:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    431e:	07 c0       	rjmp	.+14     	; 0x432e <__udivmodhi4_ep>

00004320 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4320:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4322:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4324:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4326:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4328:	10 f0       	brcs	.+4      	; 0x432e <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    432a:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    432c:	b7 0b       	sbc	r27, r23

0000432e <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    432e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4330:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4332:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4334:	a9 f7       	brne	.-22     	; 0x4320 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4336:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4338:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    433a:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    433c:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    433e:	08 95       	ret

00004340 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    4340:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    4342:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    4344:	16 f4       	brtc	.+4      	; 0x434a <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    4346:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    4348:	07 d0       	rcall	.+14     	; 0x4358 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    434a:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    434c:	09 d0       	rcall	.+18     	; 0x4360 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    434e:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    4352:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    4354:	05 d0       	rcall	.+10     	; 0x4360 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    4356:	3e f4       	brtc	.+14     	; 0x4366 <__divmodhi4_exit>

00004358 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    4358:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    435a:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    435c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    435e:	08 95       	ret

00004360 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    4360:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    4362:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    4364:	7f 4f       	sbci	r23, 0xFF	; 255

00004366 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    4366:	08 95       	ret

00004368 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4368:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    436a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    436c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    436e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4370:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4372:	09 94       	ijmp

00004374 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    4374:	0e 94 71 21 	call	0x42e2	; 0x42e2 <__umulhisi3>

00004378 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    4378:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    437a:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    437c:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    437e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    4380:	08 95       	ret

00004382 <malloc>:
malloc():
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	82 30       	cpi	r24, 0x02	; 2
    438c:	91 05       	cpc	r25, r1
    438e:	10 f4       	brcc	.+4      	; 0x4394 <malloc+0x12>
    4390:	82 e0       	ldi	r24, 0x02	; 2
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <__flp>
    4398:	f0 91 c7 04 	lds	r31, 0x04C7	; 0x8004c7 <__flp+0x1>
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	a0 e0       	ldi	r26, 0x00	; 0
    43a4:	30 97       	sbiw	r30, 0x00	; 0
    43a6:	99 f4       	brne	.+38     	; 0x43ce <malloc+0x4c>
    43a8:	21 15       	cp	r18, r1
    43aa:	31 05       	cpc	r19, r1
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <malloc+0x2e>
    43ae:	4a c0       	rjmp	.+148    	; 0x4444 <malloc+0xc2>
    43b0:	28 1b       	sub	r18, r24
    43b2:	39 0b       	sbc	r19, r25
    43b4:	24 30       	cpi	r18, 0x04	; 4
    43b6:	31 05       	cpc	r19, r1
    43b8:	d8 f5       	brcc	.+118    	; 0x4430 <malloc+0xae>
    43ba:	8a 81       	ldd	r24, Y+2	; 0x02
    43bc:	9b 81       	ldd	r25, Y+3	; 0x03
    43be:	61 15       	cp	r22, r1
    43c0:	71 05       	cpc	r23, r1
    43c2:	89 f1       	breq	.+98     	; 0x4426 <malloc+0xa4>
    43c4:	fb 01       	movw	r30, r22
    43c6:	93 83       	std	Z+3, r25	; 0x03
    43c8:	82 83       	std	Z+2, r24	; 0x02
    43ca:	fe 01       	movw	r30, r28
    43cc:	11 c0       	rjmp	.+34     	; 0x43f0 <malloc+0x6e>
    43ce:	40 81       	ld	r20, Z
    43d0:	51 81       	ldd	r21, Z+1	; 0x01
    43d2:	02 81       	ldd	r16, Z+2	; 0x02
    43d4:	13 81       	ldd	r17, Z+3	; 0x03
    43d6:	48 17       	cp	r20, r24
    43d8:	59 07       	cpc	r21, r25
    43da:	e0 f0       	brcs	.+56     	; 0x4414 <malloc+0x92>
    43dc:	48 17       	cp	r20, r24
    43de:	59 07       	cpc	r21, r25
    43e0:	99 f4       	brne	.+38     	; 0x4408 <malloc+0x86>
    43e2:	10 97       	sbiw	r26, 0x00	; 0
    43e4:	61 f0       	breq	.+24     	; 0x43fe <malloc+0x7c>
    43e6:	12 96       	adiw	r26, 0x02	; 2
    43e8:	0c 93       	st	X, r16
    43ea:	12 97       	sbiw	r26, 0x02	; 2
    43ec:	13 96       	adiw	r26, 0x03	; 3
    43ee:	1c 93       	st	X, r17
    43f0:	32 96       	adiw	r30, 0x02	; 2
    43f2:	cf 01       	movw	r24, r30
    43f4:	df 91       	pop	r29
    43f6:	cf 91       	pop	r28
    43f8:	1f 91       	pop	r17
    43fa:	0f 91       	pop	r16
    43fc:	08 95       	ret
    43fe:	00 93 c6 04 	sts	0x04C6, r16	; 0x8004c6 <__flp>
    4402:	10 93 c7 04 	sts	0x04C7, r17	; 0x8004c7 <__flp+0x1>
    4406:	f4 cf       	rjmp	.-24     	; 0x43f0 <malloc+0x6e>
    4408:	21 15       	cp	r18, r1
    440a:	31 05       	cpc	r19, r1
    440c:	51 f0       	breq	.+20     	; 0x4422 <malloc+0xa0>
    440e:	42 17       	cp	r20, r18
    4410:	53 07       	cpc	r21, r19
    4412:	38 f0       	brcs	.+14     	; 0x4422 <malloc+0xa0>
    4414:	a9 01       	movw	r20, r18
    4416:	db 01       	movw	r26, r22
    4418:	9a 01       	movw	r18, r20
    441a:	bd 01       	movw	r22, r26
    441c:	df 01       	movw	r26, r30
    441e:	f8 01       	movw	r30, r16
    4420:	c1 cf       	rjmp	.-126    	; 0x43a4 <malloc+0x22>
    4422:	ef 01       	movw	r28, r30
    4424:	f9 cf       	rjmp	.-14     	; 0x4418 <malloc+0x96>
    4426:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <__flp+0x1>
    442a:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <__flp>
    442e:	cd cf       	rjmp	.-102    	; 0x43ca <malloc+0x48>
    4430:	fe 01       	movw	r30, r28
    4432:	e2 0f       	add	r30, r18
    4434:	f3 1f       	adc	r31, r19
    4436:	81 93       	st	Z+, r24
    4438:	91 93       	st	Z+, r25
    443a:	22 50       	subi	r18, 0x02	; 2
    443c:	31 09       	sbc	r19, r1
    443e:	39 83       	std	Y+1, r19	; 0x01
    4440:	28 83       	st	Y, r18
    4442:	d7 cf       	rjmp	.-82     	; 0x43f2 <malloc+0x70>
    4444:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <__brkval>
    4448:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <__brkval+0x1>
    444c:	23 2b       	or	r18, r19
    444e:	41 f4       	brne	.+16     	; 0x4460 <malloc+0xde>
    4450:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_start>
    4454:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_start+0x1>
    4458:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <__brkval+0x1>
    445c:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <__brkval>
    4460:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_end>
    4464:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    4468:	21 15       	cp	r18, r1
    446a:	31 05       	cpc	r19, r1
    446c:	41 f4       	brne	.+16     	; 0x447e <malloc+0xfc>
    446e:	2d b7       	in	r18, 0x3d	; 61
    4470:	3e b7       	in	r19, 0x3e	; 62
    4472:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    4476:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    447a:	24 1b       	sub	r18, r20
    447c:	35 0b       	sbc	r19, r21
    447e:	e0 91 c4 04 	lds	r30, 0x04C4	; 0x8004c4 <__brkval>
    4482:	f0 91 c5 04 	lds	r31, 0x04C5	; 0x8004c5 <__brkval+0x1>
    4486:	e2 17       	cp	r30, r18
    4488:	f3 07       	cpc	r31, r19
    448a:	a0 f4       	brcc	.+40     	; 0x44b4 <malloc+0x132>
    448c:	2e 1b       	sub	r18, r30
    448e:	3f 0b       	sbc	r19, r31
    4490:	28 17       	cp	r18, r24
    4492:	39 07       	cpc	r19, r25
    4494:	78 f0       	brcs	.+30     	; 0x44b4 <malloc+0x132>
    4496:	ac 01       	movw	r20, r24
    4498:	4e 5f       	subi	r20, 0xFE	; 254
    449a:	5f 4f       	sbci	r21, 0xFF	; 255
    449c:	24 17       	cp	r18, r20
    449e:	35 07       	cpc	r19, r21
    44a0:	48 f0       	brcs	.+18     	; 0x44b4 <malloc+0x132>
    44a2:	4e 0f       	add	r20, r30
    44a4:	5f 1f       	adc	r21, r31
    44a6:	50 93 c5 04 	sts	0x04C5, r21	; 0x8004c5 <__brkval+0x1>
    44aa:	40 93 c4 04 	sts	0x04C4, r20	; 0x8004c4 <__brkval>
    44ae:	81 93       	st	Z+, r24
    44b0:	91 93       	st	Z+, r25
    44b2:	9f cf       	rjmp	.-194    	; 0x43f2 <malloc+0x70>
    44b4:	f0 e0       	ldi	r31, 0x00	; 0
    44b6:	e0 e0       	ldi	r30, 0x00	; 0
    44b8:	9c cf       	rjmp	.-200    	; 0x43f2 <malloc+0x70>

000044ba <free>:
free():
    44ba:	cf 93       	push	r28
    44bc:	df 93       	push	r29
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	e9 f0       	breq	.+58     	; 0x44fc <free+0x42>
    44c2:	fc 01       	movw	r30, r24
    44c4:	32 97       	sbiw	r30, 0x02	; 2
    44c6:	13 82       	std	Z+3, r1	; 0x03
    44c8:	12 82       	std	Z+2, r1	; 0x02
    44ca:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <__flp>
    44ce:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <__flp+0x1>
    44d2:	ed 01       	movw	r28, r26
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	10 97       	sbiw	r26, 0x00	; 0
    44da:	a1 f4       	brne	.+40     	; 0x4504 <free+0x4a>
    44dc:	20 81       	ld	r18, Z
    44de:	31 81       	ldd	r19, Z+1	; 0x01
    44e0:	82 0f       	add	r24, r18
    44e2:	93 1f       	adc	r25, r19
    44e4:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <__brkval>
    44e8:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <__brkval+0x1>
    44ec:	28 17       	cp	r18, r24
    44ee:	39 07       	cpc	r19, r25
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <free+0x3a>
    44f2:	61 c0       	rjmp	.+194    	; 0x45b6 <free+0xfc>
    44f4:	f0 93 c5 04 	sts	0x04C5, r31	; 0x8004c5 <__brkval+0x1>
    44f8:	e0 93 c4 04 	sts	0x04C4, r30	; 0x8004c4 <__brkval>
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	08 95       	ret
    4502:	ea 01       	movw	r28, r20
    4504:	ce 17       	cp	r28, r30
    4506:	df 07       	cpc	r29, r31
    4508:	e8 f5       	brcc	.+122    	; 0x4584 <free+0xca>
    450a:	4a 81       	ldd	r20, Y+2	; 0x02
    450c:	5b 81       	ldd	r21, Y+3	; 0x03
    450e:	9e 01       	movw	r18, r28
    4510:	41 15       	cp	r20, r1
    4512:	51 05       	cpc	r21, r1
    4514:	b1 f7       	brne	.-20     	; 0x4502 <free+0x48>
    4516:	e9 01       	movw	r28, r18
    4518:	fb 83       	std	Y+3, r31	; 0x03
    451a:	ea 83       	std	Y+2, r30	; 0x02
    451c:	49 91       	ld	r20, Y+
    451e:	59 91       	ld	r21, Y+
    4520:	c4 0f       	add	r28, r20
    4522:	d5 1f       	adc	r29, r21
    4524:	ec 17       	cp	r30, r28
    4526:	fd 07       	cpc	r31, r29
    4528:	61 f4       	brne	.+24     	; 0x4542 <free+0x88>
    452a:	80 81       	ld	r24, Z
    452c:	91 81       	ldd	r25, Z+1	; 0x01
    452e:	02 96       	adiw	r24, 0x02	; 2
    4530:	84 0f       	add	r24, r20
    4532:	95 1f       	adc	r25, r21
    4534:	e9 01       	movw	r28, r18
    4536:	99 83       	std	Y+1, r25	; 0x01
    4538:	88 83       	st	Y, r24
    453a:	82 81       	ldd	r24, Z+2	; 0x02
    453c:	93 81       	ldd	r25, Z+3	; 0x03
    453e:	9b 83       	std	Y+3, r25	; 0x03
    4540:	8a 83       	std	Y+2, r24	; 0x02
    4542:	f0 e0       	ldi	r31, 0x00	; 0
    4544:	e0 e0       	ldi	r30, 0x00	; 0
    4546:	12 96       	adiw	r26, 0x02	; 2
    4548:	8d 91       	ld	r24, X+
    454a:	9c 91       	ld	r25, X
    454c:	13 97       	sbiw	r26, 0x03	; 3
    454e:	00 97       	sbiw	r24, 0x00	; 0
    4550:	b9 f5       	brne	.+110    	; 0x45c0 <free+0x106>
    4552:	2d 91       	ld	r18, X+
    4554:	3c 91       	ld	r19, X
    4556:	11 97       	sbiw	r26, 0x01	; 1
    4558:	cd 01       	movw	r24, r26
    455a:	02 96       	adiw	r24, 0x02	; 2
    455c:	82 0f       	add	r24, r18
    455e:	93 1f       	adc	r25, r19
    4560:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <__brkval>
    4564:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <__brkval+0x1>
    4568:	28 17       	cp	r18, r24
    456a:	39 07       	cpc	r19, r25
    456c:	39 f6       	brne	.-114    	; 0x44fc <free+0x42>
    456e:	30 97       	sbiw	r30, 0x00	; 0
    4570:	51 f5       	brne	.+84     	; 0x45c6 <free+0x10c>
    4572:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <__flp+0x1>
    4576:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <__flp>
    457a:	b0 93 c5 04 	sts	0x04C5, r27	; 0x8004c5 <__brkval+0x1>
    457e:	a0 93 c4 04 	sts	0x04C4, r26	; 0x8004c4 <__brkval>
    4582:	bc cf       	rjmp	.-136    	; 0x44fc <free+0x42>
    4584:	d3 83       	std	Z+3, r29	; 0x03
    4586:	c2 83       	std	Z+2, r28	; 0x02
    4588:	40 81       	ld	r20, Z
    458a:	51 81       	ldd	r21, Z+1	; 0x01
    458c:	84 0f       	add	r24, r20
    458e:	95 1f       	adc	r25, r21
    4590:	c8 17       	cp	r28, r24
    4592:	d9 07       	cpc	r29, r25
    4594:	61 f4       	brne	.+24     	; 0x45ae <free+0xf4>
    4596:	4e 5f       	subi	r20, 0xFE	; 254
    4598:	5f 4f       	sbci	r21, 0xFF	; 255
    459a:	88 81       	ld	r24, Y
    459c:	99 81       	ldd	r25, Y+1	; 0x01
    459e:	48 0f       	add	r20, r24
    45a0:	59 1f       	adc	r21, r25
    45a2:	51 83       	std	Z+1, r21	; 0x01
    45a4:	40 83       	st	Z, r20
    45a6:	8a 81       	ldd	r24, Y+2	; 0x02
    45a8:	9b 81       	ldd	r25, Y+3	; 0x03
    45aa:	93 83       	std	Z+3, r25	; 0x03
    45ac:	82 83       	std	Z+2, r24	; 0x02
    45ae:	21 15       	cp	r18, r1
    45b0:	31 05       	cpc	r19, r1
    45b2:	09 f0       	breq	.+2      	; 0x45b6 <free+0xfc>
    45b4:	b0 cf       	rjmp	.-160    	; 0x4516 <free+0x5c>
    45b6:	f0 93 c7 04 	sts	0x04C7, r31	; 0x8004c7 <__flp+0x1>
    45ba:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <__flp>
    45be:	9e cf       	rjmp	.-196    	; 0x44fc <free+0x42>
    45c0:	fd 01       	movw	r30, r26
    45c2:	dc 01       	movw	r26, r24
    45c4:	c0 cf       	rjmp	.-128    	; 0x4546 <free+0x8c>
    45c6:	13 82       	std	Z+3, r1	; 0x03
    45c8:	12 82       	std	Z+2, r1	; 0x02
    45ca:	d7 cf       	rjmp	.-82     	; 0x457a <free+0xc0>

000045cc <realloc>:
realloc():
    45cc:	b0 e0       	ldi	r27, 0x00	; 0
    45ce:	a0 e0       	ldi	r26, 0x00	; 0
    45d0:	ec ee       	ldi	r30, 0xEC	; 236
    45d2:	f2 e2       	ldi	r31, 0x22	; 34
    45d4:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__prologue_saves__+0x4>
    45d8:	8c 01       	movw	r16, r24
    45da:	00 97       	sbiw	r24, 0x00	; 0
    45dc:	51 f4       	brne	.+20     	; 0x45f2 <realloc+0x26>
    45de:	cb 01       	movw	r24, r22
    45e0:	0e 94 c1 21 	call	0x4382	; 0x4382 <malloc>
    45e4:	8c 01       	movw	r16, r24
    45e6:	c8 01       	movw	r24, r16
    45e8:	cd b7       	in	r28, 0x3d	; 61
    45ea:	de b7       	in	r29, 0x3e	; 62
    45ec:	e0 e1       	ldi	r30, 0x10	; 16
    45ee:	0c 94 36 21 	jmp	0x426c	; 0x426c <__epilogue_restores__+0x4>
    45f2:	fc 01       	movw	r30, r24
    45f4:	e6 0f       	add	r30, r22
    45f6:	f7 1f       	adc	r31, r23
    45f8:	9c 01       	movw	r18, r24
    45fa:	22 50       	subi	r18, 0x02	; 2
    45fc:	31 09       	sbc	r19, r1
    45fe:	e2 17       	cp	r30, r18
    4600:	f3 07       	cpc	r31, r19
    4602:	08 f4       	brcc	.+2      	; 0x4606 <realloc+0x3a>
    4604:	9d c0       	rjmp	.+314    	; 0x4740 <realloc+0x174>
    4606:	d9 01       	movw	r26, r18
    4608:	cd 91       	ld	r28, X+
    460a:	dc 91       	ld	r29, X
    460c:	11 97       	sbiw	r26, 0x01	; 1
    460e:	c6 17       	cp	r28, r22
    4610:	d7 07       	cpc	r29, r23
    4612:	98 f0       	brcs	.+38     	; 0x463a <realloc+0x6e>
    4614:	c5 30       	cpi	r28, 0x05	; 5
    4616:	d1 05       	cpc	r29, r1
    4618:	30 f3       	brcs	.-52     	; 0x45e6 <realloc+0x1a>
    461a:	ce 01       	movw	r24, r28
    461c:	04 97       	sbiw	r24, 0x04	; 4
    461e:	86 17       	cp	r24, r22
    4620:	97 07       	cpc	r25, r23
    4622:	08 f3       	brcs	.-62     	; 0x45e6 <realloc+0x1a>
    4624:	c6 1b       	sub	r28, r22
    4626:	d7 0b       	sbc	r29, r23
    4628:	22 97       	sbiw	r28, 0x02	; 2
    462a:	c1 93       	st	Z+, r28
    462c:	d1 93       	st	Z+, r29
    462e:	6d 93       	st	X+, r22
    4630:	7c 93       	st	X, r23
    4632:	cf 01       	movw	r24, r30
    4634:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
    4638:	d6 cf       	rjmp	.-84     	; 0x45e6 <realloc+0x1a>
    463a:	5b 01       	movw	r10, r22
    463c:	ac 1a       	sub	r10, r28
    463e:	bd 0a       	sbc	r11, r29
    4640:	4c 01       	movw	r8, r24
    4642:	8c 0e       	add	r8, r28
    4644:	9d 1e       	adc	r9, r29
    4646:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <__flp>
    464a:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <__flp+0x1>
    464e:	51 2c       	mov	r5, r1
    4650:	41 2c       	mov	r4, r1
    4652:	f1 2c       	mov	r15, r1
    4654:	e1 2c       	mov	r14, r1
    4656:	10 97       	sbiw	r26, 0x00	; 0
    4658:	31 f5       	brne	.+76     	; 0x46a6 <realloc+0xda>
    465a:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <__brkval>
    465e:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <__brkval+0x1>
    4662:	88 15       	cp	r24, r8
    4664:	99 05       	cpc	r25, r9
    4666:	09 f0       	breq	.+2      	; 0x466a <realloc+0x9e>
    4668:	5c c0       	rjmp	.+184    	; 0x4722 <realloc+0x156>
    466a:	46 16       	cp	r4, r22
    466c:	57 06       	cpc	r5, r23
    466e:	08 f0       	brcs	.+2      	; 0x4672 <realloc+0xa6>
    4670:	58 c0       	rjmp	.+176    	; 0x4722 <realloc+0x156>
    4672:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__malloc_heap_end>
    4676:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	41 f4       	brne	.+16     	; 0x468e <realloc+0xc2>
    467e:	8d b7       	in	r24, 0x3d	; 61
    4680:	9e b7       	in	r25, 0x3e	; 62
    4682:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    4686:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    468a:	84 1b       	sub	r24, r20
    468c:	95 0b       	sbc	r25, r21
    468e:	e8 17       	cp	r30, r24
    4690:	f9 07       	cpc	r31, r25
    4692:	08 f0       	brcs	.+2      	; 0x4696 <realloc+0xca>
    4694:	55 c0       	rjmp	.+170    	; 0x4740 <realloc+0x174>
    4696:	f0 93 c5 04 	sts	0x04C5, r31	; 0x8004c5 <__brkval+0x1>
    469a:	e0 93 c4 04 	sts	0x04C4, r30	; 0x8004c4 <__brkval>
    469e:	f9 01       	movw	r30, r18
    46a0:	71 83       	std	Z+1, r23	; 0x01
    46a2:	60 83       	st	Z, r22
    46a4:	a0 cf       	rjmp	.-192    	; 0x45e6 <realloc+0x1a>
    46a6:	8d 91       	ld	r24, X+
    46a8:	9c 91       	ld	r25, X
    46aa:	11 97       	sbiw	r26, 0x01	; 1
    46ac:	12 96       	adiw	r26, 0x02	; 2
    46ae:	6c 90       	ld	r6, X
    46b0:	12 97       	sbiw	r26, 0x02	; 2
    46b2:	13 96       	adiw	r26, 0x03	; 3
    46b4:	7c 90       	ld	r7, X
    46b6:	13 97       	sbiw	r26, 0x03	; 3
    46b8:	a8 15       	cp	r26, r8
    46ba:	b9 05       	cpc	r27, r9
    46bc:	59 f5       	brne	.+86     	; 0x4714 <realloc+0x148>
    46be:	6c 01       	movw	r12, r24
    46c0:	42 e0       	ldi	r20, 0x02	; 2
    46c2:	c4 0e       	add	r12, r20
    46c4:	d1 1c       	adc	r13, r1
    46c6:	ca 14       	cp	r12, r10
    46c8:	db 04       	cpc	r13, r11
    46ca:	20 f1       	brcs	.+72     	; 0x4714 <realloc+0x148>
    46cc:	ac 01       	movw	r20, r24
    46ce:	4a 19       	sub	r20, r10
    46d0:	5b 09       	sbc	r21, r11
    46d2:	da 01       	movw	r26, r20
    46d4:	12 96       	adiw	r26, 0x02	; 2
    46d6:	15 97       	sbiw	r26, 0x05	; 5
    46d8:	80 f0       	brcs	.+32     	; 0x46fa <realloc+0x12e>
    46da:	62 82       	std	Z+2, r6	; 0x02
    46dc:	73 82       	std	Z+3, r7	; 0x03
    46de:	51 83       	std	Z+1, r21	; 0x01
    46e0:	40 83       	st	Z, r20
    46e2:	d9 01       	movw	r26, r18
    46e4:	6d 93       	st	X+, r22
    46e6:	7c 93       	st	X, r23
    46e8:	e1 14       	cp	r14, r1
    46ea:	f1 04       	cpc	r15, r1
    46ec:	71 f0       	breq	.+28     	; 0x470a <realloc+0x13e>
    46ee:	d7 01       	movw	r26, r14
    46f0:	13 96       	adiw	r26, 0x03	; 3
    46f2:	fc 93       	st	X, r31
    46f4:	ee 93       	st	-X, r30
    46f6:	12 97       	sbiw	r26, 0x02	; 2
    46f8:	76 cf       	rjmp	.-276    	; 0x45e6 <realloc+0x1a>
    46fa:	22 96       	adiw	r28, 0x02	; 2
    46fc:	8c 0f       	add	r24, r28
    46fe:	9d 1f       	adc	r25, r29
    4700:	f9 01       	movw	r30, r18
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	80 83       	st	Z, r24
    4706:	f3 01       	movw	r30, r6
    4708:	ef cf       	rjmp	.-34     	; 0x46e8 <realloc+0x11c>
    470a:	f0 93 c7 04 	sts	0x04C7, r31	; 0x8004c7 <__flp+0x1>
    470e:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <__flp>
    4712:	69 cf       	rjmp	.-302    	; 0x45e6 <realloc+0x1a>
    4714:	48 16       	cp	r4, r24
    4716:	59 06       	cpc	r5, r25
    4718:	08 f4       	brcc	.+2      	; 0x471c <realloc+0x150>
    471a:	2c 01       	movw	r4, r24
    471c:	7d 01       	movw	r14, r26
    471e:	d3 01       	movw	r26, r6
    4720:	9a cf       	rjmp	.-204    	; 0x4656 <realloc+0x8a>
    4722:	cb 01       	movw	r24, r22
    4724:	0e 94 c1 21 	call	0x4382	; 0x4382 <malloc>
    4728:	7c 01       	movw	r14, r24
    472a:	00 97       	sbiw	r24, 0x00	; 0
    472c:	49 f0       	breq	.+18     	; 0x4740 <realloc+0x174>
    472e:	ae 01       	movw	r20, r28
    4730:	b8 01       	movw	r22, r16
    4732:	0e 94 a3 23 	call	0x4746	; 0x4746 <memcpy>
    4736:	c8 01       	movw	r24, r16
    4738:	0e 94 5d 22 	call	0x44ba	; 0x44ba <free>
    473c:	87 01       	movw	r16, r14
    473e:	53 cf       	rjmp	.-346    	; 0x45e6 <realloc+0x1a>
    4740:	10 e0       	ldi	r17, 0x00	; 0
    4742:	00 e0       	ldi	r16, 0x00	; 0
    4744:	50 cf       	rjmp	.-352    	; 0x45e6 <realloc+0x1a>

00004746 <memcpy>:
memcpy():
    4746:	fb 01       	movw	r30, r22
    4748:	dc 01       	movw	r26, r24
    474a:	02 c0       	rjmp	.+4      	; 0x4750 <memcpy+0xa>
    474c:	01 90       	ld	r0, Z+
    474e:	0d 92       	st	X+, r0
    4750:	41 50       	subi	r20, 0x01	; 1
    4752:	50 40       	sbci	r21, 0x00	; 0
    4754:	d8 f7       	brcc	.-10     	; 0x474c <memcpy+0x6>
    4756:	08 95       	ret

00004758 <strcat>:
strcat():
    4758:	fb 01       	movw	r30, r22
    475a:	dc 01       	movw	r26, r24
    475c:	0d 90       	ld	r0, X+
    475e:	00 20       	and	r0, r0
    4760:	e9 f7       	brne	.-6      	; 0x475c <strcat+0x4>
    4762:	11 97       	sbiw	r26, 0x01	; 1
    4764:	01 90       	ld	r0, Z+
    4766:	0d 92       	st	X+, r0
    4768:	00 20       	and	r0, r0
    476a:	e1 f7       	brne	.-8      	; 0x4764 <strcat+0xc>
    476c:	08 95       	ret

0000476e <strcmp>:
strcmp():
    476e:	fb 01       	movw	r30, r22
    4770:	dc 01       	movw	r26, r24
    4772:	8d 91       	ld	r24, X+
    4774:	01 90       	ld	r0, Z+
    4776:	80 19       	sub	r24, r0
    4778:	01 10       	cpse	r0, r1
    477a:	d9 f3       	breq	.-10     	; 0x4772 <strcmp+0x4>
    477c:	99 0b       	sbc	r25, r25
    477e:	08 95       	ret

00004780 <strcpy>:
strcpy():
    4780:	fb 01       	movw	r30, r22
    4782:	dc 01       	movw	r26, r24
    4784:	01 90       	ld	r0, Z+
    4786:	0d 92       	st	X+, r0
    4788:	00 20       	and	r0, r0
    478a:	e1 f7       	brne	.-8      	; 0x4784 <strcpy+0x4>
    478c:	08 95       	ret

0000478e <strncpy>:
strncpy():
    478e:	fb 01       	movw	r30, r22
    4790:	dc 01       	movw	r26, r24
    4792:	41 50       	subi	r20, 0x01	; 1
    4794:	50 40       	sbci	r21, 0x00	; 0
    4796:	48 f0       	brcs	.+18     	; 0x47aa <strncpy+0x1c>
    4798:	01 90       	ld	r0, Z+
    479a:	0d 92       	st	X+, r0
    479c:	00 20       	and	r0, r0
    479e:	c9 f7       	brne	.-14     	; 0x4792 <strncpy+0x4>
    47a0:	01 c0       	rjmp	.+2      	; 0x47a4 <strncpy+0x16>
    47a2:	1d 92       	st	X+, r1
    47a4:	41 50       	subi	r20, 0x01	; 1
    47a6:	50 40       	sbci	r21, 0x00	; 0
    47a8:	e0 f7       	brcc	.-8      	; 0x47a2 <strncpy+0x14>
    47aa:	08 95       	ret

000047ac <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    47ac:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    47ae:	c6 e7       	ldi	r28, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    47b0:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    47b2:	04 c0       	rjmp	.+8      	; 0x47bc <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    47b4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    47b6:	0e 94 b4 21 	call	0x4368	; 0x4368 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    47ba:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    47bc:	c7 37       	cpi	r28, 0x77	; 119
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    47be:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    47c0:	c9 f7       	brne	.-14     	; 0x47b4 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    47c2:	f8 94       	cli

000047c4 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    47c4:	ff cf       	rjmp	.-2      	; 0x47c4 <__stop_program>
