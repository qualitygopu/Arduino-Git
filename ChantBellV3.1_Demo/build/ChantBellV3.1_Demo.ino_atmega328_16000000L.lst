
e:\Arduino\Arduino Git\ChantBellV3.1_Demo\build/ChantBellV3.1_Demo.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__dtors_end>
       4:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
       8:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
       c:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__vector_3>
      10:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__vector_3>
      14:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__vector_3>
      18:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      1c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      20:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      24:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      28:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      2c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      30:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      34:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      38:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      3c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      40:	0c 94 ae 24 	jmp	0x495c	; 0x495c <__vector_16>
      44:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      48:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      4c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      50:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      54:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      58:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      5c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
      60:	0c 94 70 25 	jmp	0x4ae0	; 0x4ae0 <__vector_24>
      64:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	53 4f       	sbci	r21, 0xF3	; 243
      6a:	4e 47       	sbci	r20, 0x7E	; 126
      6c:	53 20       	and	r5, r3
      6e:	44 45       	sbci	r20, 0x54	; 84
      70:	4d 4f       	sbci	r20, 0xFD	; 253
	...

00000073 <demoMenu_1>:
      73:	56 4f 49 43 45 20 44 45 4d 4f 00                    VOICE DEMO.

0000007e <sampleMenu_2_7_7>:
      7e:	53 4f 4e 47 20 43 4f 55 4e 54 00                    SONG COUNT.

00000089 <sampleMenu_2_7_6>:
      89:	45 56 45 20 53 4f 4e 47 20 32 20 54 49 4d 45 00     EVE SONG 2 TIME.

00000099 <sampleMenu_2_7_5>:
      99:	4d 4f 52 20 53 4f 4e 47 20 32 20 54 49 4d 45 00     MOR SONG 2 TIME.

000000a9 <sampleMenu_2_7_4>:
      a9:	45 56 45 20 53 4f 4e 47 20 31 20 4e 6f 2e 00        EVE SONG 1 No..

000000b8 <sampleMenu_2_7_3>:
      b8:	45 56 45 20 53 4f 4e 47 20 31 20 54 49 4d 45 00     EVE SONG 1 TIME.

000000c8 <sampleMenu_2_7_2>:
      c8:	4d 4f 52 20 53 4f 4e 47 20 31 20 4e 6f 2e 00        MOR SONG 1 No..

000000d7 <sampleMenu_2_7_1>:
      d7:	4d 4f 52 20 53 4f 4e 47 20 31 20 54 49 4d 45 00     MOR SONG 1 TIME.

000000e7 <sampleMenu_2_6_2>:
      e7:	50 4c 41 59 00                                      PLAY.

000000ec <sampleMenu_2_6_1>:
      ec:	53 45 4c 45 43 54 20 54 49 4d 45 00                 SELECT TIME.

000000f8 <sampleMenu_4_4>:
      f8:	50 4c 59 52 20 45 56 45 20 44 55 52 00              PLYR EVE DUR.

00000105 <sampleMenu_4_3>:
     105:	50 4c 59 52 20 45 56 45 20 4f 4e 20 54 49 4d 00     PLYR EVE ON TIM.

00000115 <sampleMenu_4_2>:
     115:	50 4c 59 52 20 4d 4f 52 20 44 55 52 00              PLYR MOR DUR.

00000122 <sampleMenu_4_1>:
     122:	50 4c 59 52 20 4d 4f 52 20 4f 4e 20 54 49 4d 00     PLYR MOR ON TIM.

00000132 <sampleMenu_3_2>:
     132:	4c 49 47 48 54 20 4f 46 46 20 54 49 4d 45 00        LIGHT OFF TIME.

00000141 <sampleMenu_3_1>:
     141:	4c 49 47 48 54 20 4f 4e 20 54 49 4d 45 00           LIGHT ON TIME.

0000014f <sampleMenu_List_2_7>:
     14f:	0f d7 00 00 00 00 14 c8 00 00 00 00 11 b8 00 00     ................
     15f:	00 00 15 a9 00 00 00 00 10 99 00 00 00 00 12 89     ................
     16f:	00 00 00 00 13 7e 00 00 00 00 00 ea 01 00 00 00     .....~..........

0000017f <sampleMenu_2_7>:
     17f:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

0000018c <sampleMenu_List_2_6>:
     18c:	0c ec 00 00 00 00 0d e7 00 00 00 00 00 ea 01 00     ................
	...

0000019e <sampleMenu_2_6>:
     19e:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

000001a8 <sampleMenu_2_8>:
     1a8:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

000001b4 <sampleMenu_2_5>:
     1b4:	56 4f 4c 55 4d 45 00                                VOLUME.

000001bb <sampleMenu_2_4>:
     1bb:	42 41 43 4b 4c 49 47 48 54 20 44 55 52 00           BACKLIGHT DUR.

000001c9 <sampleMenu_2_3>:
     1c9:	53 4c 4f 47 41 4d 20 43 4f 55 4e 54 00              SLOGAM COUNT.

000001d6 <sampleMenu_2_2>:
     1d6:	45 4e 44 20 54 49 4d 45 00                          END TIME.

000001df <sampleMenu_2_1>:
     1df:	53 54 41 52 54 20 54 49 4d 45 00                    START TIME.

000001ea <sampleMenu_back>:
     1ea:	42 41 43 4b 00                                      BACK.

000001ef <sampleMenu_1_2>:
     1ef:	53 45 54 20 54 49 4d 45 00                          SET TIME.

000001f8 <sampleMenu_1_1>:
     1f8:	53 45 54 20 44 41 54 45 00                          SET DATE.

00000201 <sampleMenu_List_5>:
     201:	05 df 01 00 00 00 06 d6 01 00 00 00 0b 9e 01 8c     ................
     211:	01 03 0a a8 01 00 00 00 00 ea 01 00 00 00           ..............

0000021f <sampleMenu_5>:
     21f:	43 4c 4f 43 4b 20 53 45 54 54 49 4e 47 00           CLOCK SETTING.

0000022d <sampleMenu_exit>:
     22d:	45 58 49 54 00                                      EXIT.

00000232 <sampleMenu_6>:
     232:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

00000240 <sampleMenu_List_4>:
     240:	1b 22 01 00 00 00 1c 15 01 00 00 00 1d 05 01 00     ."..............
     250:	00 00 1e f8 00 00 00 00 00 ea 01 00 00 00           ..............

0000025e <sampleMenu_4>:
     25e:	50 4c 41 59 45 52 20 53 45 54 54 49 4e 47 00        PLAYER SETTING.

0000026d <sampleMenu_List_3>:
     26d:	18 41 01 00 00 00 19 32 01 00 00 00 00 ea 01 00     .A.....2........
	...

0000027f <sampleMenu_3>:
     27f:	4c 49 47 48 54 53 20 53 45 54 54 49 4e 47 00        LIGHTS SETTING.

0000028e <sampleMenu_List_2>:
     28e:	05 df 01 00 00 00 06 d6 01 00 00 00 07 c9 01 00     ................
     29e:	00 00 08 bb 01 00 00 00 09 b4 01 00 00 00 0a a8     ................
     2ae:	01 00 00 00 0b 9e 01 8c 01 03 0e 7f 01 4f 01 08     .............O..
     2be:	00 ea 01 00 00 00                                   ......

000002c4 <sampleMenu_2>:
     2c4:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

000002d1 <sampleMenu_List_1>:
     2d1:	02 f8 01 00 00 00 03 ef 01 00 00 00 00 ea 01 00     ................
	...

000002e3 <sampleMenu_1>:
     2e3:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

000002f1 <processMenuCommand(unsigned char)::__c>:
     2f1:	20 20 00                                              .

000002f4 <processMenuCommand(unsigned char)::__c>:
     2f4:	20 20 00                                              .

000002f7 <loop::__c>:
     2f7:	20 50 4c 41 59 45 52 20 4d 4f 44 45 20 4f 4e 20      PLAYER MODE ON 
	...

00000308 <loop::__c>:
     308:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

00000319 <demoMenu_Root>:
     319:	20 73 00 00 00 00 21 68 00 00 00 00 00 2d 02 00      s....!h.....-..
	...

0000032b <loop::__c>:
     32b:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 46 46 20      AUTO LIGHT OFF 
	...

0000033c <loop::__c>:
     33c:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 4e 20 20      AUTO LIGHT ON  
	...

0000034d <loop::__c>:
     34d:	20 41 55 54 4f 20 50 4c 41 59 20 4f 46 46 20 20      AUTO PLAY OFF  
	...

0000035e <loop::__c>:
     35e:	20 20 41 55 54 4f 20 50 4c 41 59 20 4f 4e 20 20       AUTO PLAY ON  
	...

0000036f <port_to_mode_PGM>:
     36f:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000379 <digital_pin_to_timer_PGM>:
     379:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     389:	00 00 00 00 00 00 00                                .......

00000390 <normalMenu_Root>:
     390:	17 7f 02 6d 02 03 1a 5e 02 40 02 05 01 e3 02 d1     ...m...^.@......
     3a0:	02 03 1f 1f 02 01 02 05 00 2d 02 00 00 00           .........-....

000003ae <serviceMenu_Root>:
     3ae:	01 e3 02 d1 02 03 04 c4 02 8e 02 09 17 7f 02 6d     ...............m
     3be:	02 03 1a 5e 02 40 02 05 16 32 02 00 00 00 00 2d     ...^.@...2.....-
     3ce:	02 00 00 00                                         ....

000003d2 <setup::__c>:
     3d2:	45 52 52 20 30 33 00                                ERR 03.

000003d9 <setup::__c>:
     3d9:	45 52 52 20 30 32 00                                ERR 02.

000003e0 <setup::__c>:
     3e0:	45 52 52 20 30 31 00                                ERR 01.

000003e7 <setup::__c>:
     3e7:	56 65 72 73 69 6f 6e 20 3a 20 33 2e 31 00           Version : 3.1.

000003f5 <setup::__c>:
     3f5:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

00000406 <setup::__c>:
     406:	51 54 52 4f 4e 00                                   QTRON.

0000040c <daysInMonth>:
     40c:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

00000417 <port_to_input_PGM>:
     417:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000421 <port_to_output_PGM>:
     421:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000042b <digital_pin_to_port_PGM>:
     42b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     43b:	03 03 03 03 02 02 03                                .......

00000442 <digital_pin_to_bit_mask_PGM>:
     442:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     452:	04 08 10 20 40 80 40 00                             ... @.@.

0000045a <__ctors_start>:
__ctors_start():
     45a:	8f 26       	eor	r8, r31

0000045c <__ctors_end>:
__dtors_start():
     45c:	67 2b       	or	r22, r23

0000045e <__dtors_end>:
__dtors_end():
     45e:	11 24       	eor	r1, r1
     460:	1f be       	out	0x3f, r1	; 63
     462:	cf ef       	ldi	r28, 0xFF	; 255
     464:	d8 e0       	ldi	r29, 0x08	; 8
     466:	de bf       	out	0x3e, r29	; 62
     468:	cd bf       	out	0x3d, r28	; 61

0000046a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     46a:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     46c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     46e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     470:	ee e2       	ldi	r30, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     472:	ff e5       	ldi	r31, 0x5F	; 95
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     474:	02 c0       	rjmp	.+4      	; 0x47a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     476:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     478:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     47a:	ac 34       	cpi	r26, 0x4C	; 76
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     47c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     47e:	d9 f7       	brne	.-10     	; 0x476 <__do_copy_data+0xc>

00000480 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     480:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     482:	ac e4       	ldi	r26, 0x4C	; 76
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     484:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     486:	01 c0       	rjmp	.+2      	; 0x48a <.do_clear_bss_start>

00000488 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     488:	1d 92       	st	X+, r1

0000048a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     48a:	a9 30       	cpi	r26, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     48c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     48e:	e1 f7       	brne	.-8      	; 0x488 <.do_clear_bss_loop>

00000490 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     490:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     492:	ce e2       	ldi	r28, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     494:	d2 e0       	ldi	r29, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     498:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     49a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     49c:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     4a0:	cd 32       	cpi	r28, 0x2D	; 45
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     4a2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     4a4:	c9 f7       	brne	.-14     	; 0x498 <__do_global_ctors+0x8>
     4a6:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <main>
     4aa:	0c 94 8a 2f 	jmp	0x5f14	; 0x5f14 <__do_global_dtors>

000004ae <__bad_interrupt>:
__vector_22():
     4ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004b2 <MenuManager::currentItemHasChildren() [clone .constprop.95]>:
_ZN11MenuManager22currentItemHasChildrenEv.constprop.95():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     4b2:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <Menu1+0x6>
     4b6:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <Menu1+0x3>
     4ba:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <Menu1+0x4>
     4be:	96 e0       	ldi	r25, 0x06	; 6
     4c0:	89 9f       	mul	r24, r25
     4c2:	e0 0d       	add	r30, r0
     4c4:	f1 1d       	adc	r31, r1
     4c6:	11 24       	eor	r1, r1
     4c8:	35 96       	adiw	r30, 0x05	; 5
     4ca:	e4 91       	lpm	r30, Z
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	e1 11       	cpse	r30, r1
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <MenuManager::currentItemHasChildren() [clone .constprop.95]+0x22>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:116
}
     4d4:	08 95       	ret

000004d6 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]>:
_ZN7TwoWire15endTransmissionEh.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:173
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     4d6:	98 2f       	mov	r25, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     4d8:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     4de:	21 32       	cpi	r18, 0x21	; 33
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xe>
     4e2:	43 c0       	rjmp	.+134    	; 0x56a <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     4e4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_state>
     4e8:	81 11       	cpse	r24, r1
     4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     4ec:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     4f0:	32 e0       	ldi	r19, 0x02	; 2
     4f2:	30 93 88 04 	sts	0x0488, r19	; 0x800488 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     4f6:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     4fa:	9f ef       	ldi	r25, 0xFF	; 255
     4fc:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     500:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     504:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <twi_masterBufferLength>
     508:	ab e8       	ldi	r26, 0x8B	; 139
     50a:	b4 e0       	ldi	r27, 0x04	; 4
     50c:	e4 e6       	ldi	r30, 0x64	; 100
     50e:	f4 e0       	ldi	r31, 0x04	; 4
_ZN7TwoWire15endTransmissionEh.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     510:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     512:	29 13       	cpse	r18, r25
     514:	31 c0       	rjmp	.+98     	; 0x578 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xa2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     516:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     51a:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <twi_slarw>
     51e:	88 0f       	add	r24, r24
     520:	89 2b       	or	r24, r25
     522:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     526:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <twi_inRepStart>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	49 f5       	brne	.+82     	; 0x580 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     52e:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     532:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <twi_slarw>
     536:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     53a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     53e:	83 fd       	sbrc	r24, 3
     540:	f8 cf       	rjmp	.-16     	; 0x532 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     542:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     544:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     548:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_state>
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	e1 f3       	breq	.-8      	; 0x548 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     550:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_error>
     554:	8f 3f       	cpi	r24, 0xFF	; 255
     556:	b1 f0       	breq	.+44     	; 0x584 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     558:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_error>
     55c:	80 32       	cpi	r24, 0x20	; 32
     55e:	a1 f0       	breq	.+40     	; 0x588 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     560:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_error>
     564:	80 33       	cpi	r24, 0x30	; 48
     566:	91 f0       	breq	.+36     	; 0x58c <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0xb6>
_ZN7TwoWire15endTransmissionEh.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     568:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     56a:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     56e:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     572:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:183
  return ret;
}
     576:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     578:	3d 91       	ld	r19, X+
     57a:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     57c:	9f 5f       	subi	r25, 0xFF	; 255
     57e:	c9 cf       	rjmp	.-110    	; 0x512 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     580:	85 ee       	ldi	r24, 0xE5	; 229
     582:	e0 cf       	rjmp	.-64     	; 0x544 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x6e>
_ZN7TwoWire15endTransmissionEh.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	f1 cf       	rjmp	.-30     	; 0x56a <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	ef cf       	rjmp	.-34     	; 0x56a <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	ed cf       	rjmp	.-38     	; 0x56a <TwoWire::endTransmission(unsigned char) [clone .constprop.83]+0x94>

00000590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>:
_ZN11MenuManager19getCurrentItemCmdIdEv.constprop.78():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     590:	ee e3       	ldi	r30, 0x3E	; 62
     592:	f5 e0       	ldi	r31, 0x05	; 5
     594:	86 81       	ldd	r24, Z+6	; 0x06
     596:	03 80       	ldd	r0, Z+3	; 0x03
     598:	f4 81       	ldd	r31, Z+4	; 0x04
     59a:	e0 2d       	mov	r30, r0
     59c:	96 e0       	ldi	r25, 0x06	; 6
     59e:	89 9f       	mul	r24, r25
     5a0:	e0 0d       	add	r30, r0
     5a2:	f1 1d       	adc	r31, r1
     5a4:	11 24       	eor	r1, r1
     5a6:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:60
}
     5a8:	08 95       	ret

000005aa <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     5aa:	08 95       	ret

000005ac <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     5ac:	08 95       	ret

000005ae <DateTime::dayOfTheWeek() const [clone .constprop.14]>:
_ZNK8DateTime12dayOfTheWeekEv.constprop.14():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:554
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     5ae:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <bell+0x1>
     5b2:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <bell>
     5b6:	49 2f       	mov	r20, r25
     5b8:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:110
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     5ba:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <bell+0x2>
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	ec e0       	ldi	r30, 0x0C	; 12
     5c4:	f4 e0       	ldi	r31, 0x04	; 4
_ZNK8DateTime12dayOfTheWeekEv.constprop.14():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
  for (uint8_t i = 1; i < m; ++i)
     5c6:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     5c8:	86 17       	cp	r24, r22
     5ca:	30 f4       	brcc	.+12     	; 0x5d8 <DateTime::dayOfTheWeek() const [clone .constprop.14]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:112
    days += pgm_read_byte(daysInMonth + i - 1);
     5cc:	74 91       	lpm	r23, Z
     5ce:	27 0f       	add	r18, r23
     5d0:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	31 96       	adiw	r30, 0x01	; 1
     5d6:	f8 cf       	rjmp	.-16     	; 0x5c8 <DateTime::dayOfTheWeek() const [clone .constprop.14]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:113
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     5d8:	63 30       	cpi	r22, 0x03	; 3
     5da:	20 f0       	brcs	.+8      	; 0x5e4 <DateTime::dayOfTheWeek() const [clone .constprop.14]+0x36>
     5dc:	93 70       	andi	r25, 0x03	; 3
     5de:	11 f4       	brne	.+4      	; 0x5e4 <DateTime::dayOfTheWeek() const [clone .constprop.14]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:114
    ++days;
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  return days + 365 * y + (y + 3) / 4 - 1;
     5e4:	6d e6       	ldi	r22, 0x6D	; 109
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	46 9f       	mul	r20, r22
     5ea:	c0 01       	movw	r24, r0
     5ec:	47 9f       	mul	r20, r23
     5ee:	90 0d       	add	r25, r0
     5f0:	56 9f       	mul	r21, r22
     5f2:	90 0d       	add	r25, r0
     5f4:	11 24       	eor	r1, r1
_ZNK8DateTime12dayOfTheWeekEv.constprop.14():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     5f6:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     5f8:	4d 5f       	subi	r20, 0xFD	; 253
     5fa:	5f 4f       	sbci	r21, 0xFF	; 255
     5fc:	56 95       	lsr	r21
     5fe:	47 95       	ror	r20
     600:	56 95       	lsr	r21
     602:	47 95       	ror	r20
_ZNK8DateTime12dayOfTheWeekEv.constprop.14():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     604:	84 0f       	add	r24, r20
     606:	95 1f       	adc	r25, r21
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	67 e0       	ldi	r22, 0x07	; 7
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:556
}
     614:	08 95       	ret

00000616 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     616:	af 92       	push	r10
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	6c 01       	movw	r12, r24
     62c:	7b 01       	movw	r14, r22
     62e:	8b 01       	movw	r16, r22
     630:	04 0f       	add	r16, r20
     632:	15 1f       	adc	r17, r21
     634:	eb 01       	movw	r28, r22
     636:	5e 01       	movw	r10, r28
     638:	ae 18       	sub	r10, r14
     63a:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     63c:	c0 17       	cp	r28, r16
     63e:	d1 07       	cpc	r29, r17
     640:	59 f0       	breq	.+22     	; 0x658 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     642:	69 91       	ld	r22, Y+
     644:	d6 01       	movw	r26, r12
     646:	ed 91       	ld	r30, X+
     648:	fc 91       	ld	r31, X
     64a:	01 90       	ld	r0, Z+
     64c:	f0 81       	ld	r31, Z
     64e:	e0 2d       	mov	r30, r0
     650:	c6 01       	movw	r24, r12
     652:	09 95       	icall
     654:	89 2b       	or	r24, r25
     656:	79 f7       	brne	.-34     	; 0x636 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     658:	c5 01       	movw	r24, r10
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	08 95       	ret

00000670 <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     670:	84 30       	cpi	r24, 0x04	; 4
     672:	81 f0       	breq	.+32     	; 0x694 <turnOffPWM+0x24>
     674:	28 f4       	brcc	.+10     	; 0x680 <turnOffPWM+0x10>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	e9 f0       	breq	.+58     	; 0x6b4 <turnOffPWM+0x44>
     67a:	83 30       	cpi	r24, 0x03	; 3
     67c:	f9 f0       	breq	.+62     	; 0x6bc <turnOffPWM+0x4c>
     67e:	08 95       	ret
     680:	88 30       	cpi	r24, 0x08	; 8
     682:	71 f0       	breq	.+28     	; 0x6a0 <turnOffPWM+0x30>
     684:	89 30       	cpi	r24, 0x09	; 9
     686:	91 f0       	breq	.+36     	; 0x6ac <turnOffPWM+0x3c>
     688:	85 30       	cpi	r24, 0x05	; 5
     68a:	b9 f4       	brne	.+46     	; 0x6ba <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     68c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     690:	8f 7d       	andi	r24, 0xDF	; 223
     692:	03 c0       	rjmp	.+6      	; 0x69a <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     694:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     698:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     69a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     69e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     6a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     6a4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     6a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     6aa:	08 95       	ret
     6ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     6b0:	8f 7d       	andi	r24, 0xDF	; 223
     6b2:	f9 cf       	rjmp	.-14     	; 0x6a6 <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     6b4:	84 b5       	in	r24, 0x24	; 36
     6b6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     6b8:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     6ba:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     6bc:	84 b5       	in	r24, 0x24	; 36
     6be:	8f 7d       	andi	r24, 0xDF	; 223
     6c0:	fb cf       	rjmp	.-10     	; 0x6b8 <turnOffPWM+0x48>

000006c2 <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	e7 58       	subi	r30, 0x87	; 135
     6ce:	fc 4f       	sbci	r31, 0xFC	; 252
     6d0:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     6d2:	f9 01       	movw	r30, r18
     6d4:	ee 5b       	subi	r30, 0xBE	; 190
     6d6:	fb 4f       	sbci	r31, 0xFB	; 251
     6d8:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     6da:	f9 01       	movw	r30, r18
     6dc:	e5 5d       	subi	r30, 0xD5	; 213
     6de:	fb 4f       	sbci	r31, 0xFB	; 251
     6e0:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     6e2:	cc 23       	and	r28, r28
     6e4:	a1 f0       	breq	.+40     	; 0x70e <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6e6:	81 11       	cpse	r24, r1
     6e8:	0e 94 38 03 	call	0x670	; 0x670 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     6ec:	ec 2f       	mov	r30, r28
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e9 5e       	subi	r30, 0xE9	; 233
     6f6:	fb 4f       	sbci	r31, 0xFB	; 251
     6f8:	a5 91       	lpm	r26, Z+
     6fa:	b4 91       	lpm	r27, Z
     6fc:	ec 91       	ld	r30, X
     6fe:	ed 23       	and	r30, r29
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	09 f4       	brne	.+2      	; 0x708 <digitalRead+0x46>
     706:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fa cf       	rjmp	.-12     	; 0x708 <digitalRead+0x46>

00000714 <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     71a:	28 2f       	mov	r18, r24
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	e7 58       	subi	r30, 0x87	; 135
     722:	fc 4f       	sbci	r31, 0xFC	; 252
     724:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     726:	f9 01       	movw	r30, r18
     728:	ee 5b       	subi	r30, 0xBE	; 190
     72a:	fb 4f       	sbci	r31, 0xFB	; 251
     72c:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     72e:	f9 01       	movw	r30, r18
     730:	e5 5d       	subi	r30, 0xD5	; 213
     732:	fb 4f       	sbci	r31, 0xFB	; 251
     734:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     736:	cc 23       	and	r28, r28
     738:	a9 f0       	breq	.+42     	; 0x764 <digitalWrite+0x50>
     73a:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     73c:	81 11       	cpse	r24, r1
     73e:	0e 94 38 03 	call	0x670	; 0x670 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     742:	ec 2f       	mov	r30, r28
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	ef 5d       	subi	r30, 0xDF	; 223
     74c:	fb 4f       	sbci	r31, 0xFB	; 251
     74e:	a5 91       	lpm	r26, Z+
     750:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     752:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     754:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     756:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     758:	11 11       	cpse	r17, r1
     75a:	08 c0       	rjmp	.+16     	; 0x76c <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     75c:	d0 95       	com	r29
     75e:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     760:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     762:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     76c:	de 2b       	or	r29, r30
     76e:	f8 cf       	rjmp	.-16     	; 0x760 <digitalWrite+0x4c>

00000770 <TwoWire::begin() [clone .constprop.40]>:
_ZN7TwoWire5beginEv.constprop.40():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     770:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     774:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     778:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     77c:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     780:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     78a:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	82 e1       	ldi	r24, 0x12	; 18
     792:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	83 e1       	ldi	r24, 0x13	; 19
     79a:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     79e:	e9 eb       	ldi	r30, 0xB9	; 185
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	8e 7f       	andi	r24, 0xFE	; 254
     7a6:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     7a8:	80 81       	ld	r24, Z
     7aa:	8d 7f       	andi	r24, 0xFD	; 253
     7ac:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     7ae:	88 e4       	ldi	r24, 0x48	; 72
     7b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     7b4:	85 e4       	ldi	r24, 0x45	; 69
     7b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     7ba:	85 ed       	ldi	r24, 0xD5	; 213
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <twi_onSlaveTransmit+0x1>
     7c2:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     7c6:	86 ed       	ldi	r24, 0xD6	; 214
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <twi_onSlaveReceive+0x1>
     7ce:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.40():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     7d2:	08 95       	ret

000007d4 <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	ee 5b       	subi	r30, 0xBE	; 190
     7de:	fb 4f       	sbci	r31, 0xFB	; 251
     7e0:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     7e2:	85 5d       	subi	r24, 0xD5	; 213
     7e4:	9b 4f       	sbci	r25, 0xFB	; 251
     7e6:	fc 01       	movw	r30, r24
     7e8:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     7ea:	88 23       	and	r24, r24
     7ec:	c9 f0       	breq	.+50     	; 0x820 <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	fc 01       	movw	r30, r24
     7f6:	e1 59       	subi	r30, 0x91	; 145
     7f8:	fc 4f       	sbci	r31, 0xFC	; 252
     7fa:	a5 91       	lpm	r26, Z+
     7fc:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     7fe:	fc 01       	movw	r30, r24
     800:	ef 5d       	subi	r30, 0xDF	; 223
     802:	fb 4f       	sbci	r31, 0xFB	; 251
     804:	c5 91       	lpm	r28, Z+
     806:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     808:	61 11       	cpse	r22, r1
     80a:	0d c0       	rjmp	.+26     	; 0x826 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     80c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     80e:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     810:	8c 91       	ld	r24, X
     812:	20 95       	com	r18
     814:	82 23       	and	r24, r18
     816:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     818:	88 81       	ld	r24, Y
     81a:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     81c:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     81e:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     826:	62 30       	cpi	r22, 0x02	; 2
     828:	51 f4       	brne	.+20     	; 0x83e <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     82a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     82c:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     82e:	3c 91       	ld	r19, X
     830:	82 2f       	mov	r24, r18
     832:	80 95       	com	r24
     834:	83 23       	and	r24, r19
     836:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     838:	e8 81       	ld	r30, Y
     83a:	2e 2b       	or	r18, r30
     83c:	ef cf       	rjmp	.-34     	; 0x81c <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     83e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     840:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     842:	ec 91       	ld	r30, X
     844:	2e 2b       	or	r18, r30
     846:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     848:	8f bf       	out	0x3f, r24	; 63
     84a:	ea cf       	rjmp	.-44     	; 0x820 <pinMode+0x4c>

0000084c <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	91 05       	cpc	r25, r1
     850:	39 f0       	breq	.+14     	; 0x860 <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     85a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     860:	08 95       	ret

00000862 <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     862:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     864:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     866:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <timer0_overflow_count>
     86a:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <timer0_overflow_count+0x1>
     86e:	a0 91 2f 04 	lds	r26, 0x042F	; 0x80042f <timer0_overflow_count+0x2>
     872:	b0 91 30 04 	lds	r27, 0x0430	; 0x800430 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     876:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     878:	a8 9b       	sbis	0x15, 0	; 21
     87a:	05 c0       	rjmp	.+10     	; 0x886 <micros+0x24>
     87c:	2f 3f       	cpi	r18, 0xFF	; 255
     87e:	19 f0       	breq	.+6      	; 0x886 <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	a1 1d       	adc	r26, r1
     884:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     886:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     888:	ba 2f       	mov	r27, r26
     88a:	a9 2f       	mov	r26, r25
     88c:	98 2f       	mov	r25, r24
     88e:	88 27       	eor	r24, r24
     890:	bc 01       	movw	r22, r24
     892:	cd 01       	movw	r24, r26
     894:	62 0f       	add	r22, r18
     896:	71 1d       	adc	r23, r1
     898:	81 1d       	adc	r24, r1
     89a:	91 1d       	adc	r25, r1
     89c:	42 e0       	ldi	r20, 0x02	; 2
     89e:	66 0f       	add	r22, r22
     8a0:	77 1f       	adc	r23, r23
     8a2:	88 1f       	adc	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	4a 95       	dec	r20
     8a8:	d1 f7       	brne	.-12     	; 0x89e <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     8aa:	08 95       	ret

000008ac <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     8ac:	8f 92       	push	r8
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	6b 01       	movw	r12, r22
     8be:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     8c0:	0e 94 31 04 	call	0x862	; 0x862 <micros>
     8c4:	4b 01       	movw	r8, r22
     8c6:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     8c8:	c1 14       	cp	r12, r1
     8ca:	d1 04       	cpc	r13, r1
     8cc:	e1 04       	cpc	r14, r1
     8ce:	f1 04       	cpc	r15, r1
     8d0:	b9 f0       	breq	.+46     	; 0x900 <__stack+0x1>
     8d2:	0e 94 31 04 	call	0x862	; 0x862 <micros>
     8d6:	68 19       	sub	r22, r8
     8d8:	79 09       	sbc	r23, r9
     8da:	8a 09       	sbc	r24, r10
     8dc:	9b 09       	sbc	r25, r11
     8de:	68 3e       	cpi	r22, 0xE8	; 232
     8e0:	73 40       	sbci	r23, 0x03	; 3
     8e2:	81 05       	cpc	r24, r1
     8e4:	91 05       	cpc	r25, r1
     8e6:	80 f3       	brcs	.-32     	; 0x8c8 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	c2 1a       	sub	r12, r18
     8ec:	d1 08       	sbc	r13, r1
     8ee:	e1 08       	sbc	r14, r1
     8f0:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     8f2:	88 ee       	ldi	r24, 0xE8	; 232
     8f4:	88 0e       	add	r8, r24
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	98 1e       	adc	r9, r24
     8fa:	a1 1c       	adc	r10, r1
     8fc:	b1 1c       	adc	r11, r1
     8fe:	e4 cf       	rjmp	.-56     	; 0x8c8 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	bf 90       	pop	r11
     90a:	af 90       	pop	r10
     90c:	9f 90       	pop	r9
     90e:	8f 90       	pop	r8
     910:	08 95       	ret

00000912 <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     912:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     914:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     916:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <timer0_millis>
     91a:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <timer0_millis+0x1>
     91e:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <timer0_millis+0x2>
     922:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     926:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     928:	08 95       	ret

0000092a <DFRobotDFPlayerMini::available() [clone .constprop.63]>:
_ZN19DFRobotDFPlayerMini9availableEv.constprop.63():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     92e:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <myDFPlayer>
     932:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <myDFPlayer+0x1>
     936:	dc 01       	movw	r26, r24
     938:	ed 91       	ld	r30, X+
     93a:	fc 91       	ld	r31, X
     93c:	00 84       	ldd	r0, Z+8	; 0x08
     93e:	f1 85       	ldd	r31, Z+9	; 0x09
     940:	e0 2d       	mov	r30, r0
     942:	09 95       	icall
     944:	89 2b       	or	r24, r25
     946:	09 f4       	brne	.+2      	; 0x94a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x20>
     948:	d7 c0       	rjmp	.+430    	; 0xaf8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x1ce>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	cb 01       	movw	r24, r22
     950:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     954:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <myDFPlayer+0x1e>
     958:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <myDFPlayer>
     95c:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     960:	dc 01       	movw	r26, r24
     962:	ed 91       	ld	r30, X+
     964:	fc 91       	ld	r31, X
     966:	02 84       	ldd	r0, Z+10	; 0x0a
     968:	f3 85       	ldd	r31, Z+11	; 0x0b
     96a:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     96c:	21 11       	cpse	r18, r1
     96e:	0b c0       	rjmp	.+22     	; 0x986 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x5c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     970:	09 95       	icall
     972:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     976:	8e 37       	cpi	r24, 0x7E	; 126
     978:	d1 f6       	brne	.-76     	; 0x92e <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     97a:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <myDFPlayer+0x1e>
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <myDFPlayer+0x1e>
     984:	d4 cf       	rjmp	.-88     	; 0x92e <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     986:	09 95       	icall
     988:	90 91 de 05 	lds	r25, 0x05DE	; 0x8005de <myDFPlayer+0x1e>
     98c:	e9 2f       	mov	r30, r25
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e0 54       	subi	r30, 0x40	; 64
     992:	fa 4f       	sbci	r31, 0xFA	; 250
     994:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     996:	92 30       	cpi	r25, 0x02	; 2
     998:	b9 f0       	breq	.+46     	; 0x9c8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x9e>
     99a:	99 30       	cpi	r25, 0x09	; 9
     99c:	d9 f0       	breq	.+54     	; 0x9d4 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0xaa>
     99e:	91 30       	cpi	r25, 0x01	; 1
     9a0:	a9 f4       	brne	.+42     	; 0x9cc <DFRobotDFPlayerMini::available() [clone .constprop.63]+0xa2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     9a2:	8f 3f       	cpi	r24, 0xFF	; 255
     9a4:	99 f0       	breq	.+38     	; 0x9cc <DFRobotDFPlayerMini::available() [clone .constprop.63]+0xa2>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     9a6:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     9b0:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <myDFPlayer+0x23>
     9b4:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     9b8:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     9bc:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <myDFPlayer+0x25>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.63():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     9c8:	86 30       	cpi	r24, 0x06	; 6
     9ca:	69 f7       	brne	.-38     	; 0x9a6 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     9cc:	9f 5f       	subi	r25, 0xFF	; 255
     9ce:	90 93 de 05 	sts	0x05DE, r25	; 0x8005de <myDFPlayer+0x1e>
     9d2:	ad cf       	rjmp	.-166    	; 0x92e <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     9d4:	8f 3e       	cpi	r24, 0xEF	; 239
     9d6:	39 f7       	brne	.-50     	; 0x9a6 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x7c>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     9d8:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <myDFPlayer+0xc>
     9dc:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <myDFPlayer+0xb>
     9e0:	28 0f       	add	r18, r24
     9e2:	33 27       	eor	r19, r19
     9e4:	33 1f       	adc	r19, r19
     9e6:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <myDFPlayer+0xd>
     9ea:	c9 01       	movw	r24, r18
     9ec:	8e 0f       	add	r24, r30
     9ee:	91 1d       	adc	r25, r1
     9f0:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <myDFPlayer+0xe>
     9f4:	28 0f       	add	r18, r24
     9f6:	39 2f       	mov	r19, r25
     9f8:	31 1d       	adc	r19, r1
     9fa:	40 91 cf 05 	lds	r20, 0x05CF	; 0x8005cf <myDFPlayer+0xf>
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	24 0f       	add	r18, r20
     a02:	35 1f       	adc	r19, r21
     a04:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <myDFPlayer+0x10>
     a08:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     a0a:	60 91 d1 05 	lds	r22, 0x05D1	; 0x8005d1 <myDFPlayer+0x11>
     a0e:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     a10:	76 2f       	mov	r23, r22
     a12:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     a14:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <myDFPlayer+0x12>
     a18:	6f 0f       	add	r22, r31
     a1a:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     a1c:	28 0f       	add	r18, r24
     a1e:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     a20:	31 95       	neg	r19
     a22:	21 95       	neg	r18
     a24:	31 09       	sbc	r19, r1
_ZN19DFRobotDFPlayerMini9availableEv.constprop.63():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     a26:	62 17       	cp	r22, r18
     a28:	73 07       	cpc	r23, r19
     a2a:	09 f0       	breq	.+2      	; 0xa2e <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x104>
     a2c:	bc cf       	rjmp	.-136    	; 0x9a6 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     a2e:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     a32:	e1 34       	cpi	r30, 0x41	; 65
     a34:	19 f4       	brne	.+6      	; 0xa3c <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x112>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     a36:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <myDFPlayer+0x25>
     a3a:	2f c0       	rjmp	.+94     	; 0xa9a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x170>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     a3c:	e0 93 e1 05 	sts	0x05E1, r30	; 0x8005e1 <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     a40:	54 2f       	mov	r21, r20
     a42:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     a48:	90 93 e3 05 	sts	0x05E3, r25	; 0x8005e3 <myDFPlayer+0x23>
     a4c:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     a50:	ea 53       	subi	r30, 0x3A	; 58
     a52:	e6 31       	cpi	r30, 0x16	; 22
     a54:	08 f0       	brcs	.+2      	; 0xa58 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x12e>
     a56:	46 c0       	rjmp	.+140    	; 0xae4 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x1ba>
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ef 5c       	subi	r30, 0xCF	; 207
     a5c:	fa 4f       	sbci	r31, 0xFA	; 250
     a5e:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__tablejump2__>
     a62:	5e 05       	cpc	r21, r14
     a64:	66 05       	cpc	r22, r6
     a66:	70 05       	cpc	r23, r0
     a68:	47 05       	cpc	r20, r7
     a6a:	70 05       	cpc	r23, r0
     a6c:	50 05       	cpc	r21, r0
     a6e:	6e 05       	cpc	r22, r14
     a70:	72 05       	cpc	r23, r2
     a72:	70 05       	cpc	r23, r0
     a74:	70 05       	cpc	r23, r0
     a76:	70 05       	cpc	r23, r0
     a78:	70 05       	cpc	r23, r0
     a7a:	70 05       	cpc	r23, r0
     a7c:	70 05       	cpc	r23, r0
     a7e:	70 05       	cpc	r23, r0
     a80:	70 05       	cpc	r23, r0
     a82:	72 05       	cpc	r23, r2
     a84:	70 05       	cpc	r23, r0
     a86:	70 05       	cpc	r23, r0
     a88:	70 05       	cpc	r23, r0
     a8a:	70 05       	cpc	r23, r0
     a8c:	70 05       	cpc	r23, r0
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <myDFPlayer+0x24>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.63():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     a9a:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <myDFPlayer+0x24>
     a9e:	91 cf       	rjmp	.-222    	; 0x9c2 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x98>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     aa0:	80 ff       	sbrs	r24, 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x17e>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     aa4:	89 e0       	ldi	r24, 0x09	; 9
     aa6:	f4 cf       	rjmp	.-24     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     aa8:	81 ff       	sbrs	r24, 1
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x186>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	f0 cf       	rjmp	.-32     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     ab0:	83 70       	andi	r24, 0x03	; 3
     ab2:	99 27       	eor	r25, r25
     ab4:	89 2b       	or	r24, r25
     ab6:	89 f3       	breq	.-30     	; 0xa9a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x170>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     ab8:	8a e0       	ldi	r24, 0x0A	; 10
     aba:	ea cf       	rjmp	.-44     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     abc:	80 ff       	sbrs	r24, 0
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x19a>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     ac0:	87 e0       	ldi	r24, 0x07	; 7
     ac2:	e6 cf       	rjmp	.-52     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     ac4:	81 ff       	sbrs	r24, 1
     ac6:	e9 cf       	rjmp	.-46     	; 0xa9a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x170>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	e2 cf       	rjmp	.-60     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     acc:	80 ff       	sbrs	r24, 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x1aa>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	de cf       	rjmp	.-68     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     ad4:	81 ff       	sbrs	r24, 1
     ad6:	e1 cf       	rjmp	.-62     	; 0xa9a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x170>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	da cf       	rjmp	.-76     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
     adc:	86 e0       	ldi	r24, 0x06	; 6
     ade:	d8 cf       	rjmp	.-80     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
     ae0:	8b e0       	ldi	r24, 0x0B	; 11
     ae2:	d6 cf       	rjmp	.-84     	; 0xa90 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x166>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     aea:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <myDFPlayer+0x23>
     aee:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     af2:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <myDFPlayer+0x24>
     af6:	9f cf       	rjmp	.-194    	; 0xa36 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x10c>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.63():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     af8:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <myDFPlayer+0x25>
     afc:	88 23       	and	r24, r24
     afe:	69 f2       	breq	.-102    	; 0xa9a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x170>
     b00:	0e 94 89 04 	call	0x912	; 0x912 <millis>
     b04:	00 91 c2 05 	lds	r16, 0x05C2	; 0x8005c2 <myDFPlayer+0x2>
     b08:	10 91 c3 05 	lds	r17, 0x05C3	; 0x8005c3 <myDFPlayer+0x3>
     b0c:	20 91 c4 05 	lds	r18, 0x05C4	; 0x8005c4 <myDFPlayer+0x4>
     b10:	30 91 c5 05 	lds	r19, 0x05C5	; 0x8005c5 <myDFPlayer+0x5>
     b14:	60 1b       	sub	r22, r16
     b16:	71 0b       	sbc	r23, r17
     b18:	82 0b       	sbc	r24, r18
     b1a:	93 0b       	sbc	r25, r19
     b1c:	00 91 c6 05 	lds	r16, 0x05C6	; 0x8005c6 <myDFPlayer+0x6>
     b20:	10 91 c7 05 	lds	r17, 0x05C7	; 0x8005c7 <myDFPlayer+0x7>
     b24:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <myDFPlayer+0x8>
     b28:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <myDFPlayer+0x9>
     b2c:	60 17       	cp	r22, r16
     b2e:	71 07       	cpc	r23, r17
     b30:	82 07       	cpc	r24, r18
     b32:	93 07       	cpc	r25, r19
     b34:	08 f4       	brcc	.+2      	; 0xb38 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x20e>
     b36:	b1 cf       	rjmp	.-158    	; 0xa9a <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x170>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     b38:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     b3c:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     b40:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <myDFPlayer+0x23>
     b44:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	36 cf       	rjmp	.-404    	; 0x9b8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x8e>

00000b4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>:
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     b4c:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     b50:	27 2f       	mov	r18, r23
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	70 93 d9 05 	sts	0x05D9, r23	; 0x8005d9 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     b58:	60 93 da 05 	sts	0x05DA, r22	; 0x8005da <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     b5c:	40 91 d6 05 	lds	r20, 0x05D6	; 0x8005d6 <myDFPlayer+0x16>
     b60:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <myDFPlayer+0x15>
     b64:	49 0f       	add	r20, r25
     b66:	55 27       	eor	r21, r21
     b68:	55 1f       	adc	r21, r21
     b6a:	84 0f       	add	r24, r20
     b6c:	95 2f       	mov	r25, r21
     b6e:	91 1d       	adc	r25, r1
     b70:	40 91 d8 05 	lds	r20, 0x05D8	; 0x8005d8 <myDFPlayer+0x18>
     b74:	84 0f       	add	r24, r20
     b76:	91 1d       	adc	r25, r1
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	68 0f       	add	r22, r24
     b7e:	79 2f       	mov	r23, r25
     b80:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     b82:	71 95       	neg	r23
     b84:	61 95       	neg	r22
     b86:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     b88:	70 93 db 05 	sts	0x05DB, r23	; 0x8005db <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     b8c:	60 93 dc 05 	sts	0x05DC, r22	; 0x8005dc <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     b90:	44 23       	and	r20, r20
     b92:	61 f0       	breq	.+24     	; 0xbac <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     b94:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <myDFPlayer+0x25>
     b98:	88 23       	and	r24, r24
     b9a:	41 f0       	breq	.+16     	; 0xbac <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	cb 01       	movw	r24, r22
     ba2:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     ba6:	0e 94 95 04 	call	0x92a	; 0x92a <DFRobotDFPlayerMini::available() [clone .constprop.63]>
     baa:	f4 cf       	rjmp	.-24     	; 0xb94 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     bac:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <myDFPlayer>
     bb0:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <myDFPlayer+0x1>
     bb4:	dc 01       	movw	r26, r24
     bb6:	ed 91       	ld	r30, X+
     bb8:	fc 91       	ld	r31, X
     bba:	02 80       	ldd	r0, Z+2	; 0x02
     bbc:	f3 81       	ldd	r31, Z+3	; 0x03
     bbe:	e0 2d       	mov	r30, r0
     bc0:	4a e0       	ldi	r20, 0x0A	; 10
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	64 ed       	ldi	r22, 0xD4	; 212
     bc6:	75 e0       	ldi	r23, 0x05	; 5
     bc8:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     bca:	0e 94 89 04 	call	0x912	; 0x912 <millis>
     bce:	60 93 c2 05 	sts	0x05C2, r22	; 0x8005c2 <myDFPlayer+0x2>
     bd2:	70 93 c3 05 	sts	0x05C3, r23	; 0x8005c3 <myDFPlayer+0x3>
     bd6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <myDFPlayer+0x4>
     bda:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     bde:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <myDFPlayer+0x18>
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	81 11       	cpse	r24, r1
     be6:	01 c0       	rjmp	.+2      	; 0xbea <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x9e>
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	90 93 e5 05 	sts	0x05E5, r25	; 0x8005e5 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     bee:	81 11       	cpse	r24, r1
     bf0:	06 c0       	rjmp	.+12     	; 0xbfe <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     bf2:	6a e0       	ldi	r22, 0x0A	; 10
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <delay>
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.61():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     bfe:	08 95       	ret

00000c00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>:
_ZN19DFRobotDFPlayerMini10playFolderEhh.constprop.21():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     c00:	78 2f       	mov	r23, r24
     c02:	8f e0       	ldi	r24, 0x0F	; 15
     c04:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>

00000c08 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     c08:	08 95       	ret

00000c0a <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     c0a:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <SoftwareSerial::active_object>
     c0e:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <SoftwareSerial::active_object+0x1>
     c12:	28 17       	cp	r18, r24
     c14:	39 07       	cpc	r19, r25
     c16:	71 f4       	brne	.+28     	; 0xc34 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     c18:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
     c1c:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
     c20:	98 17       	cp	r25, r24
     c22:	41 f0       	breq	.+16     	; 0xc34 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     c24:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	e8 51       	subi	r30, 0x18	; 24
     c2c:	fc 4f       	sbci	r31, 0xFC	; 252
     c2e:	80 81       	ld	r24, Z
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     c38:	08 95       	ret

00000c3a <SoftwareSerial::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     c3a:	08 95       	ret

00000c3c <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     c4a:	5c 96       	adiw	r26, 0x1c	; 28
     c4c:	ed 90       	ld	r14, X+
     c4e:	fc 90       	ld	r15, X
     c50:	5d 97       	sbiw	r26, 0x1d	; 29
     c52:	e1 14       	cp	r14, r1
     c54:	f1 04       	cpc	r15, r1
     c56:	79 f4       	brne	.+30     	; 0xc76 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	9c 93       	st	X, r25
     c60:	8e 93       	st	-X, r24
     c62:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     c76:	51 96       	adiw	r26, 0x11	; 17
     c78:	ed 91       	ld	r30, X+
     c7a:	fc 91       	ld	r31, X
     c7c:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     c7e:	50 96       	adiw	r26, 0x10	; 16
     c80:	8c 91       	ld	r24, X
     c82:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     c84:	98 2f       	mov	r25, r24
     c86:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     c88:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     c8a:	5e 96       	adiw	r26, 0x1e	; 30
     c8c:	2c 91       	ld	r18, X
     c8e:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     c90:	12 2f       	mov	r17, r18
     c92:	12 70       	andi	r17, 0x02	; 2
     c94:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     c96:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     c98:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     c9a:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     c9c:	11 23       	and	r17, r17
     c9e:	19 f1       	breq	.+70     	; 0xce6 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     ca0:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     ca2:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     ca4:	e7 01       	movw	r28, r14
     ca6:	21 97       	sbiw	r28, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <SoftwareSerial::write(unsigned char)+0x6a>
     caa:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     cac:	46 2f       	mov	r20, r22
     cae:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     cb0:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     cb2:	60 ff       	sbrs	r22, 0
     cb4:	1a c0       	rjmp	.+52     	; 0xcea <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     cb6:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     cb8:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     cba:	e7 01       	movw	r28, r14
     cbc:	21 97       	sbiw	r28, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     cc0:	ba 01       	movw	r22, r20
     cc2:	75 95       	asr	r23
     cc4:	67 95       	ror	r22
     cc6:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     cc8:	89 f7       	brne	.-30     	; 0xcac <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     cca:	11 23       	and	r17, r17
     ccc:	81 f0       	breq	.+32     	; 0xcee <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     cce:	80 81       	ld	r24, Z
     cd0:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     cd2:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     cd4:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     cd6:	5c 96       	adiw	r26, 0x1c	; 28
     cd8:	8d 91       	ld	r24, X+
     cda:	9c 91       	ld	r25, X
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	c1 cf       	rjmp	.-126    	; 0xc68 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     ce6:	29 23       	and	r18, r25
     ce8:	dc cf       	rjmp	.-72     	; 0xca2 <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     cea:	39 23       	and	r19, r25
     cec:	e5 cf       	rjmp	.-54     	; 0xcb8 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     cee:	90 81       	ld	r25, Z
     cf0:	89 2b       	or	r24, r25
     cf2:	ef cf       	rjmp	.-34     	; 0xcd2 <SoftwareSerial::write(unsigned char)+0x96>

00000cf4 <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     cf4:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <SoftwareSerial::active_object>
     cf8:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <SoftwareSerial::active_object+0x1>
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	71 f4       	brne	.+28     	; 0xd1e <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     d02:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
     d06:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	80 5c       	subi	r24, 0xC0	; 192
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	82 1b       	sub	r24, r18
     d12:	91 09       	sbc	r25, r1
     d14:	60 e4       	ldi	r22, 0x40	; 64
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__divmodhi4>
     d1c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     d22:	08 95       	ret

00000d24 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     d24:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <SoftwareSerial::active_object>
     d28:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <SoftwareSerial::active_object+0x1>
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	b9 f4       	brne	.+46     	; 0xd60 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     d32:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
     d36:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
     d3a:	98 17       	cp	r25, r24
     d3c:	89 f0       	breq	.+34     	; 0xd60 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     d3e:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	e8 51       	subi	r30, 0x18	; 24
     d46:	fc 4f       	sbci	r31, 0xFC	; 252
     d48:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     d4a:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	2f 5f       	subi	r18, 0xFF	; 255
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	2f 73       	andi	r18, 0x3F	; 63
     d56:	33 27       	eor	r19, r19
     d58:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     d64:	08 95       	ret

00000d66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j.part.1():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:95
 *            ensure the content of this buffer doesn't change.
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ea 01       	movw	r28, r20
     d6e:	12 2f       	mov	r17, r18
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:121
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
     d70:	dc 01       	movw	r26, r24
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	dc 01       	movw	r26, r24
     d7a:	ed 91       	ld	r30, X+
     d7c:	fc 91       	ld	r31, X
     d7e:	02 80       	ldd	r0, Z+2	; 0x02
     d80:	f3 81       	ldd	r31, Z+3	; 0x03
     d82:	e0 2d       	mov	r30, r0
     d84:	09 95       	icall
     d86:	c8 17       	cp	r28, r24
     d88:	d9 07       	cpc	r29, r25
     d8a:	29 f4       	brne	.+10     	; 0xd96 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]+0x30>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
     d8c:	81 2f       	mov	r24, r17
     d8e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]>
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	81 11       	cpse	r24, r1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:125
  // Write the data itself
  if (_wire->write(buffer, len) != len) {
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice failed to write"));
#endif
    return false;
     d96:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:166
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     d98:	89 2f       	mov	r24, r25
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	08 95       	ret

00000da2 <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:62
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	88 23       	and	r24, r24
     dac:	a1 f0       	breq	.+40     	; 0xdd6 <Adafruit_I2CDevice::detected()+0x34>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:69
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
     dae:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     db6:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     dba:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     dbe:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]>
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:70
  if (_wire->endTransmission() == 0) {
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	81 11       	cpse	r24, r1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:80
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
     dce:	89 2f       	mov	r24, r25
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
     dd6:	0e 94 b8 03 	call	0x770	; 0x770 <TwoWire::begin() [clone .constprop.40]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 d1 06 	call	0xda2	; 0xda2 <Adafruit_I2CDevice::detected()>
     de4:	98 2f       	mov	r25, r24
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     de6:	81 11       	cpse	r24, r1
     de8:	e2 cf       	rjmp	.-60     	; 0xdae <Adafruit_I2CDevice::detected()+0xc>
     dea:	f1 cf       	rjmp	.-30     	; 0xdce <Adafruit_I2CDevice::detected()+0x2c>

00000dec <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     dec:	85 ed       	ldi	r24, 0xD5	; 213
     dee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     df2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     df6:	84 fd       	sbrc	r24, 4
     df8:	fc cf       	rjmp	.-8      	; 0xdf2 <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     dfa:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     dfe:	08 95       	ret

00000e00 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     e00:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <twi_txBufferLength>
     e04:	26 0f       	add	r18, r22
     e06:	33 27       	eor	r19, r19
     e08:	33 1f       	adc	r19, r19
     e0a:	21 32       	cpi	r18, 0x21	; 33
     e0c:	31 05       	cpc	r19, r1
     e0e:	ec f4       	brge	.+58     	; 0xe4a <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     e10:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <twi_state>
     e14:	fc 01       	movw	r30, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	24 30       	cpi	r18, 0x04	; 4
     e1c:	69 f0       	breq	.+26     	; 0xe38 <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     e20:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     e22:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <twi_txBufferLength>
     e26:	21 91       	ld	r18, Z+
     e28:	ac 01       	movw	r20, r24
     e2a:	4b 55       	subi	r20, 0x5B	; 91
     e2c:	5c 4f       	sbci	r21, 0xFC	; 252
     e2e:	a4 0f       	add	r26, r20
     e30:	b5 2f       	mov	r27, r21
     e32:	b1 1d       	adc	r27, r1
     e34:	2c 93       	st	X, r18
     e36:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     e38:	86 17       	cp	r24, r22
     e3a:	98 f3       	brcs	.-26     	; 0xe22 <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     e3c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_txBufferLength>
     e40:	68 0f       	add	r22, r24
     e42:	60 93 c5 03 	sts	0x03C5, r22	; 0x8003c5 <twi_txBufferLength>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 95       	ret

00000e4e <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     e4e:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <TwoWire::rxBufferIndex>
     e52:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <TwoWire::rxBufferLength>
     e56:	e8 17       	cp	r30, r24
     e58:	30 f4       	brcc	.+12     	; 0xe66 <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ee 5b       	subi	r30, 0xBE	; 190
     e5e:	fb 4f       	sbci	r31, 0xFB	; 251
     e60:	80 81       	ld	r24, Z
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     e6a:	08 95       	ret

00000e6c <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     e6c:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <TwoWire::rxBufferIndex>
     e70:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     e74:	2f ef       	ldi	r18, 0xFF	; 255
     e76:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     e78:	98 17       	cp	r25, r24
     e7a:	48 f4       	brcc	.+18     	; 0xe8e <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     e7c:	e9 2f       	mov	r30, r25
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	ee 5b       	subi	r30, 0xBE	; 190
     e82:	fb 4f       	sbci	r31, 0xFB	; 251
     e84:	20 81       	ld	r18, Z
     e86:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     e8e:	c9 01       	movw	r24, r18
     e90:	08 95       	ret

00000e92 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     e92:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <TwoWire::rxBufferLength>
     e96:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     e9a:	89 1b       	sub	r24, r25
     e9c:	99 0b       	sbc	r25, r25
     e9e:	08 95       	ret

00000ea0 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	7c 01       	movw	r14, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     eb6:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <TwoWire::transmitting>
     eba:	22 23       	and	r18, r18
     ebc:	89 f0       	breq	.+34     	; 0xee0 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     ebe:	eb 01       	movw	r28, r22
     ec0:	6b 01       	movw	r12, r22
     ec2:	c4 0e       	add	r12, r20
     ec4:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     ec6:	cc 15       	cp	r28, r12
     ec8:	dd 05       	cpc	r29, r13
     eca:	69 f0       	breq	.+26     	; 0xee6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     ecc:	69 91       	ld	r22, Y+
     ece:	d7 01       	movw	r26, r14
     ed0:	ed 91       	ld	r30, X+
     ed2:	fc 91       	ld	r31, X
     ed4:	01 90       	ld	r0, Z+
     ed6:	f0 81       	ld	r31, Z
     ed8:	e0 2d       	mov	r30, r0
     eda:	c7 01       	movw	r24, r14
     edc:	09 95       	icall
     ede:	f3 cf       	rjmp	.-26     	; 0xec6 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     ee0:	64 2f       	mov	r22, r20
     ee2:	0e 94 00 07 	call	0xe00	; 0xe00 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     ee6:	c8 01       	movw	r24, r16
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	08 95       	ret

00000efa <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	1f 92       	push	r1
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     f06:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <TwoWire::transmitting>
     f0a:	22 23       	and	r18, r18
     f0c:	f9 f0       	breq	.+62     	; 0xf4c <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     f0e:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <TwoWire::txBufferLength>
     f12:	20 32       	cpi	r18, 0x20	; 32
     f14:	58 f0       	brcs	.+22     	; 0xf2c <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	33 83       	std	Z+3, r19	; 0x03
     f1e:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     f2c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <TwoWire::txBufferIndex>
     f30:	e8 2f       	mov	r30, r24
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	e5 57       	subi	r30, 0x75	; 117
     f36:	fb 4f       	sbci	r31, 0xFB	; 251
     f38:	99 81       	ldd	r25, Y+1	; 0x01
     f3a:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     f42:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	ec cf       	rjmp	.-40     	; 0xf24 <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 00 07 	call	0xe00	; 0xe00 <twi_transmit>
     f56:	f7 cf       	rjmp	.-18     	; 0xf46 <TwoWire::write(unsigned char)+0x4c>

00000f58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     f58:	fc 01       	movw	r30, r24
     f5a:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     f5c:	31 e0       	ldi	r19, 0x01	; 1
     f5e:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     f62:	20 93 ab 04 	sts	0x04AB, r18	; 0x8004ab <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     f66:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     f6a:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     f6e:	83 85       	ldd	r24, Z+11	; 0x0b
     f70:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     f72:	8a e5       	ldi	r24, 0x5A	; 90
     f74:	95 e0       	ldi	r25, 0x05	; 5
     f76:	0e 94 7d 07 	call	0xefa	; 0xefa <TwoWire::write(unsigned char)>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <TwoWire::endTransmission(unsigned char) [clone .constprop.83]>

00000f80 <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	8c 01       	movw	r16, r24
     f88:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     f8a:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     f8e:	6c 2f       	mov	r22, r28
     f90:	64 60       	ori	r22, 0x04	; 4
     f92:	c8 01       	movw	r24, r16
     f94:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 26 04 	call	0x84c	; 0x84c <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     fa0:	6c 2f       	mov	r22, r28
     fa2:	6b 7f       	andi	r22, 0xFB	; 251
     fa4:	c8 01       	movw	r24, r16
     fa6:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     faa:	82 e3       	ldi	r24, 0x32	; 50
     fac:	90 e0       	ldi	r25, 0x00	; 0
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     fb4:	0c 94 26 04 	jmp	0x84c	; 0x84c <delayMicroseconds>

00000fb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	8c 01       	movw	r16, r24
     fc2:	d6 2f       	mov	r29, r22
     fc4:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     fc6:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     fc8:	64 2b       	or	r22, r20
     fca:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     fce:	80 e1       	ldi	r24, 0x10	; 16
     fd0:	d8 9f       	mul	r29, r24
     fd2:	b0 01       	movw	r22, r0
     fd4:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     fd6:	6c 2b       	or	r22, r28
     fd8:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     fe2:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000fe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>:
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	28 97       	sbiw	r28, 0x08	; 8
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     ffa:	98 e0       	ldi	r25, 0x08	; 8
     ffc:	e1 e1       	ldi	r30, 0x11	; 17
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	de 01       	movw	r26, r28
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	01 90       	ld	r0, Z+
    1006:	0d 92       	st	X+, r0
    1008:	9a 95       	dec	r25
    100a:	e1 f7       	brne	.-8      	; 0x1004 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
    100c:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <lcd+0x8>
    1010:	96 17       	cp	r25, r22
    1012:	08 f4       	brcc	.+2      	; 0x1016 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
    1014:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    1016:	26 2f       	mov	r18, r22
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	4c 0f       	add	r20, r28
    1024:	5d 1f       	adc	r21, r29
    1026:	24 0f       	add	r18, r20
    1028:	35 1f       	adc	r19, r21
    102a:	f9 01       	movw	r30, r18
    102c:	60 81       	ld	r22, Z
    102e:	68 0f       	add	r22, r24
    1030:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	84 eb       	ldi	r24, 0xB4	; 180
    1036:	95 e0       	ldi	r25, 0x05	; 5
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
    1038:	28 96       	adiw	r28, 0x08	; 8
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    1048:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

0000104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>:
_ZN17LiquidCrystal_I2C5clearEv.constprop.67():
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	84 eb       	ldi	r24, 0xB4	; 180
    1052:	95 e0       	ldi	r25, 0x05	; 5
    1054:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    1058:	80 ed       	ldi	r24, 0xD0	; 208
    105a:	97 e0       	ldi	r25, 0x07	; 7
    105c:	0c 94 26 04 	jmp	0x84c	; 0x84c <delayMicroseconds>

00001060 <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	08 95       	ret

0000106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.57():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1076:	d0 e0       	ldi	r29, 0x00	; 0
    1078:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    107a:	f8 01       	movw	r30, r16
    107c:	ec 0f       	add	r30, r28
    107e:	fd 1f       	adc	r31, r29
    1080:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
    1082:	66 23       	and	r22, r22
    1084:	39 f0       	breq	.+14     	; 0x1094 <Print::print(__FlashStringHelper const*) [clone .constprop.57]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	84 eb       	ldi	r24, 0xB4	; 180
    108a:	95 e0       	ldi	r25, 0x05	; 5
    108c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
_ZN5Print5printEPK19__FlashStringHelper.constprop.57():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
    1090:	21 96       	adiw	r28, 0x01	; 1
    1092:	f3 cf       	rjmp	.-26     	; 0x107a <Print::print(__FlashStringHelper const*) [clone .constprop.57]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
    1094:	ce 01       	movw	r24, r28
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret

000010a6 <queueButton(unsigned char)>:
_Z11queueButtonh():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:200

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
    10a6:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <buttonBufferCount>
    10aa:	25 30       	cpi	r18, 0x05	; 5
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <queueButton(unsigned char)+0xa>
    10ae:	90 f4       	brcc	.+36     	; 0x10d4 <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:202
  {
    buttonBuffer [button_write_pos] = button;
    10b0:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <button_write_pos>
    10b4:	e9 2f       	mov	r30, r25
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	e2 56       	subi	r30, 0x62	; 98
    10ba:	fc 4f       	sbci	r31, 0xFC	; 252
    10bc:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:203
    buttonBufferCount++;
    10be:	2f 5f       	subi	r18, 0xFF	; 255
    10c0:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:204
    button_write_pos++;
    10c4:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:206
    
    if (button_write_pos >= sizeof (buttonBuffer))
    10c6:	95 30       	cpi	r25, 0x05	; 5
    10c8:	18 f4       	brcc	.+6      	; 0x10d0 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:204
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
    10ca:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <button_write_pos>
    10ce:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:208
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
    10d0:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <button_write_pos>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:211
    }
  }
}
    10d4:	08 95       	ret

000010d6 <stopPreSong()>:
_Z11stopPreSongv():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1485
    myDFPlayer.playFolder(fol, song);
    delay(500);
}
void stopPreSong()
{
    digitalWrite(AMP, LOW);
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	8c e0       	ldi	r24, 0x0C	; 12
    10da:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	86 e1       	ldi	r24, 0x16	; 22
    10e4:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>

000010e8 <startPreSong(unsigned char, unsigned char)>:
_Z12startPreSonghh():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1478
        }
    }
}

void startPreSong(byte fol, byte song)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	c8 2f       	mov	r28, r24
    10ee:	d6 2f       	mov	r29, r22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1479
    digitalWrite(AMP, HIGH);
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	8c e0       	ldi	r24, 0x0C	; 12
    10f4:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1480
    myDFPlayer.playFolder(fol, song);
    10f8:	6d 2f       	mov	r22, r29
    10fa:	8c 2f       	mov	r24, r28
    10fc:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1481
    delay(500);
    1100:	64 ef       	ldi	r22, 0xF4	; 244
    1102:	71 e0       	ldi	r23, 0x01	; 1
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1482
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1481

void startPreSong(byte fol, byte song)
{
    digitalWrite(AMP, HIGH);
    myDFPlayer.playFolder(fol, song);
    delay(500);
    110c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <delay>

00001110 <TriggerPlayer()>:
_Z13TriggerPlayerv():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:635
        }
    }
}

void TriggerPlayer()
{
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:637
    // Validate Player Morning
    if (CurTime >= config.PlayerMorTime && CurTime <= config.PlayerMorTime + config.PlayerMorDur && config.PlayerMorDur != 0)
    1114:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <config+0x42>
    1118:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <config+0x43>
    111c:	a0 91 f7 04 	lds	r26, 0x04F7	; 0x8004f7 <config+0x44>
    1120:	b0 91 f8 04 	lds	r27, 0x04F8	; 0x8004f8 <config+0x45>
    1124:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <CurTime>
    1128:	50 91 99 03 	lds	r21, 0x0399	; 0x800399 <CurTime+0x1>
    112c:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <CurTime+0x2>
    1130:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <CurTime+0x3>
    1134:	48 17       	cp	r20, r24
    1136:	59 07       	cpc	r21, r25
    1138:	6a 07       	cpc	r22, r26
    113a:	7b 07       	cpc	r23, r27
    113c:	1c f1       	brlt	.+70     	; 0x1184 <TriggerPlayer()+0x74>
    113e:	00 91 f9 04 	lds	r16, 0x04F9	; 0x8004f9 <config+0x46>
    1142:	10 91 fa 04 	lds	r17, 0x04FA	; 0x8004fa <config+0x47>
    1146:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <config+0x48>
    114a:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <config+0x49>
    114e:	80 0f       	add	r24, r16
    1150:	91 1f       	adc	r25, r17
    1152:	a2 1f       	adc	r26, r18
    1154:	b3 1f       	adc	r27, r19
    1156:	84 17       	cp	r24, r20
    1158:	95 07       	cpc	r25, r21
    115a:	a6 07       	cpc	r26, r22
    115c:	b7 07       	cpc	r27, r23
    115e:	94 f0       	brlt	.+36     	; 0x1184 <TriggerPlayer()+0x74>
    1160:	01 2b       	or	r16, r17
    1162:	02 2b       	or	r16, r18
    1164:	03 2b       	or	r16, r19
    1166:	71 f0       	breq	.+28     	; 0x1184 <TriggerPlayer()+0x74>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:639
    {
        if (PlayerONMor == 0)
    1168:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <PlayerONMor>
    116c:	81 11       	cpse	r24, r1
    116e:	50 c0       	rjmp	.+160    	; 0x1210 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:641
        {
            PlayerONMor = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:652
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
    1176:	85 e0       	ldi	r24, 0x05	; 5
    1178:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:671
                lcd.clear();
                appMode = APP_NORMAL_MODE;
            }
        }
    }
}
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:653
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
            lcd.clear();
    1180:	0c 94 26 08 	jmp	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:647
            appMode = APP_PLAYER_MODE;
            lcd.clear();
        }
    }
    // Validate Player Evening
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    1184:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <config+0x4a>
    1188:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <config+0x4b>
    118c:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <config+0x4c>
    1190:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <config+0x4d>
    1194:	48 17       	cp	r20, r24
    1196:	59 07       	cpc	r21, r25
    1198:	6a 07       	cpc	r22, r26
    119a:	7b 07       	cpc	r23, r27
    119c:	ec f0       	brlt	.+58     	; 0x11d8 <TriggerPlayer()+0xc8>
    119e:	00 91 01 05 	lds	r16, 0x0501	; 0x800501 <config+0x4e>
    11a2:	10 91 02 05 	lds	r17, 0x0502	; 0x800502 <config+0x4f>
    11a6:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <config+0x50>
    11aa:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <config+0x51>
    11ae:	80 0f       	add	r24, r16
    11b0:	91 1f       	adc	r25, r17
    11b2:	a2 1f       	adc	r26, r18
    11b4:	b3 1f       	adc	r27, r19
    11b6:	84 17       	cp	r24, r20
    11b8:	95 07       	cpc	r25, r21
    11ba:	a6 07       	cpc	r26, r22
    11bc:	b7 07       	cpc	r27, r23
    11be:	64 f0       	brlt	.+24     	; 0x11d8 <TriggerPlayer()+0xc8>
    11c0:	01 2b       	or	r16, r17
    11c2:	02 2b       	or	r16, r18
    11c4:	03 2b       	or	r16, r19
    11c6:	41 f0       	breq	.+16     	; 0x11d8 <TriggerPlayer()+0xc8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:649
    {
        if (PlayerONEve == 0)
    11c8:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <PlayerONEve>
    11cc:	81 11       	cpse	r24, r1
    11ce:	20 c0       	rjmp	.+64     	; 0x1210 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:651
        {
            PlayerONEve = 1;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <PlayerONEve>
    11d6:	cf cf       	rjmp	.-98     	; 0x1176 <TriggerPlayer()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:658
            lcd.clear();
        }
    }
    else
    {
        if (appMode == APP_PLAYER_MODE)
    11d8:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <appMode>
    11dc:	85 30       	cpi	r24, 0x05	; 5
    11de:	c1 f4       	brne	.+48     	; 0x1210 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:660
        {
            if (PlayerONEve == 1 || PlayerONMor == 1)
    11e0:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <PlayerONEve>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <TriggerPlayer()+0xe0>
    11e8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <PlayerONMor>
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	81 f4       	brne	.+32     	; 0x1210 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:662
            {
                digitalWrite(AMP, LOW);
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8c e0       	ldi	r24, 0x0C	; 12
    11f4:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:663
                digitalWrite(AUDCONT, LOW);
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	8a e0       	ldi	r24, 0x0A	; 10
    11fc:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:664
                PlayerONMor = 0;
    1200:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:665
                PlayerONEve = 0;
    1204:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <PlayerONEve>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:666
                lcd.clear();
    1208:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:667
                appMode = APP_NORMAL_MODE;
    120c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:671
            }
        }
    }
}
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]>:
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.46():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:176
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    1216:	2f 92       	push	r2
    1218:	3f 92       	push	r3
    121a:	4f 92       	push	r4
    121c:	5f 92       	push	r5
    121e:	6f 92       	push	r6
    1220:	7f 92       	push	r7
    1222:	8f 92       	push	r8
    1224:	9f 92       	push	r9
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	3b 01       	movw	r6, r22
    123e:	7a 01       	movw	r14, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:177
  size_t pos = 0;
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	00 e0       	ldi	r16, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
  }
  twi_state = TWI_MRX;
    1244:	55 24       	eor	r5, r5
    1246:	53 94       	inc	r5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1248:	44 24       	eor	r4, r4
    124a:	4a 94       	dec	r4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    124c:	85 ee       	ldi	r24, 0xE5	; 229
    124e:	38 2e       	mov	r3, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1250:	95 ec       	ldi	r25, 0xC5	; 197
    1252:	29 2e       	mov	r2, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1254:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_state>
    1258:	81 11       	cpse	r24, r1
    125a:	fc cf       	rjmp	.-8      	; 0x1254 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x3e>
    125c:	d6 01       	movw	r26, r12
    125e:	14 96       	adiw	r26, 0x04	; 4
    1260:	8d 91       	ld	r24, X+
    1262:	9c 91       	ld	r25, X
    1264:	e7 01       	movw	r28, r14
    1266:	c0 1b       	sub	r28, r16
    1268:	d1 0b       	sbc	r29, r17
    126a:	8c 17       	cp	r24, r28
    126c:	9d 07       	cpc	r25, r29
    126e:	08 f4       	brcc	.+2      	; 0x1272 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x5c>
    1270:	ec 01       	movw	r28, r24
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:195
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1272:	f6 01       	movw	r30, r12
    1274:	90 81       	ld	r25, Z
    1276:	8c 2f       	mov	r24, r28
    1278:	c1 32       	cpi	r28, 0x21	; 33
    127a:	08 f0       	brcs	.+2      	; 0x127e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x68>
    127c:	80 e2       	ldi	r24, 0x20	; 32
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    127e:	50 92 88 04 	sts	0x0488, r5	; 0x800488 <twi_state>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.46():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:181
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	97 01       	movw	r18, r14
    1286:	2c 1b       	sub	r18, r28
    1288:	3d 0b       	sbc	r19, r29
    128a:	02 17       	cp	r16, r18
    128c:	13 07       	cpc	r17, r19
    128e:	08 f4       	brcc	.+2      	; 0x1292 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x7c>
    1290:	40 e0       	ldi	r20, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    1292:	40 93 87 04 	sts	0x0487, r20	; 0x800487 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1296:	40 92 86 04 	sts	0x0486, r4	; 0x800486 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    129a:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    129e:	2f ef       	ldi	r18, 0xFF	; 255
    12a0:	28 0f       	add	r18, r24
    12a2:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    12a6:	50 92 63 04 	sts	0x0463, r5	; 0x800463 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    12aa:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <twi_slarw>
    12ae:	99 0f       	add	r25, r25
    12b0:	92 2b       	or	r25, r18
    12b2:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    12b6:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <twi_inRepStart>
    12ba:	91 30       	cpi	r25, 0x01	; 1
    12bc:	e9 f5       	brne	.+122    	; 0x1338 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x122>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    12be:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
    12c2:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <twi_slarw>
    12c6:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    12ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    12ce:	93 fd       	sbrc	r25, 3
    12d0:	f8 cf       	rjmp	.-16     	; 0x12c2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0xac>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    12d2:	20 92 bc 00 	sts	0x00BC, r2	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    12d6:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <twi_state>
    12da:	91 30       	cpi	r25, 0x01	; 1
    12dc:	e1 f3       	breq	.-8      	; 0x12d6 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    12de:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <twi_masterBufferIndex>
    12e2:	98 17       	cp	r25, r24
    12e4:	10 f4       	brcc	.+4      	; 0x12ea <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0xd4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    12e6:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <twi_masterBufferIndex>
    12ea:	a4 e6       	ldi	r26, 0x64	; 100
    12ec:	b4 e0       	ldi	r27, 0x04	; 4
    12ee:	e2 e4       	ldi	r30, 0x42	; 66
    12f0:	f4 e0       	ldi	r31, 0x04	; 4
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.46():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    12f2:	90 e0       	ldi	r25, 0x00	; 0
twi_readFrom():
    12f4:	98 13       	cpse	r25, r24
    12f6:	23 c0       	rjmp	.+70     	; 0x133e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x128>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    12f8:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    12fc:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <TwoWire::rxBufferLength>
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:198
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
#endif

  if (recv != len) {
    1300:	9c 17       	cp	r25, r28
    1302:	1d 06       	cpc	r1, r29
    1304:	d1 f5       	brne	.+116    	; 0x137a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x164>
    1306:	43 01       	movw	r8, r6
    1308:	80 0e       	add	r8, r16
    130a:	91 1e       	adc	r9, r17
    130c:	54 01       	movw	r10, r8
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    130e:	c5 01       	movw	r24, r10
    1310:	88 19       	sub	r24, r8
    1312:	99 09       	sbc	r25, r9
    1314:	8c 17       	cp	r24, r28
    1316:	9d 07       	cpc	r25, r29
    1318:	b0 f4       	brcc	.+44     	; 0x1346 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x130>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:208
    buffer[i] = _wire->read();
    131a:	d6 01       	movw	r26, r12
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	8d 91       	ld	r24, X+
    1320:	9c 91       	ld	r25, X
    1322:	dc 01       	movw	r26, r24
    1324:	ed 91       	ld	r30, X+
    1326:	fc 91       	ld	r31, X
    1328:	02 84       	ldd	r0, Z+10	; 0x0a
    132a:	f3 85       	ldd	r31, Z+11	; 0x0b
    132c:	e0 2d       	mov	r30, r0
    132e:	09 95       	icall
    1330:	f5 01       	movw	r30, r10
    1332:	81 93       	st	Z+, r24
    1334:	5f 01       	movw	r10, r30
    1336:	eb cf       	rjmp	.-42     	; 0x130e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0xf8>
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1338:	30 92 bc 00 	sts	0x00BC, r3	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    133c:	cc cf       	rjmp	.-104    	; 0x12d6 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    133e:	2d 91       	ld	r18, X+
    1340:	21 93       	st	Z+, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1342:	9f 5f       	subi	r25, 0xFF	; 255
    1344:	d7 cf       	rjmp	.-82     	; 0x12f4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0xde>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.46():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:184
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
    1346:	0c 0f       	add	r16, r28
    1348:	1d 1f       	adc	r17, r29
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    134a:	0e 15       	cp	r16, r14
    134c:	1f 05       	cpc	r17, r15
    134e:	08 f4       	brcc	.+2      	; 0x1352 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x13c>
    1350:	81 cf       	rjmp	.-254    	; 0x1254 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x3e>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:186
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    1352:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:187
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	7f 90       	pop	r7
    136e:	6f 90       	pop	r6
    1370:	5f 90       	pop	r5
    1372:	4f 90       	pop	r4
    1374:	3f 90       	pop	r3
    1376:	2f 90       	pop	r2
    1378:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:183
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	eb cf       	rjmp	.-42     	; 0x1354 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]+0x13e>

0000137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>:
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:37
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	28 97       	sbiw	r28, 0x08	; 8
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	dc 01       	movw	r26, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:38
  uint8_t buffer[8] = {0,
    1398:	8e 01       	movw	r16, r28
    139a:	0f 5f       	subi	r16, 0xFF	; 255
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	86 e0       	ldi	r24, 0x06	; 6
    13a0:	f8 01       	movw	r30, r16
    13a2:	11 92       	st	Z+, r1
    13a4:	8a 95       	dec	r24
    13a6:	e9 f7       	brne	.-6      	; 0x13a2 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]+0x24>
    13a8:	15 96       	adiw	r26, 0x05	; 5
    13aa:	3c 91       	ld	r19, X
    13ac:	15 97       	sbiw	r26, 0x05	; 5
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    13ae:	2a e0       	ldi	r18, 0x0A	; 10
    13b0:	83 2f       	mov	r24, r19
    13b2:	62 2f       	mov	r22, r18
    13b4:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    13b8:	98 2f       	mov	r25, r24
    13ba:	88 0f       	add	r24, r24
    13bc:	89 0f       	add	r24, r25
    13be:	88 0f       	add	r24, r24
    13c0:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       0,
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	14 96       	adiw	r26, 0x04	; 4
    13c6:	3c 91       	ld	r19, X
    13c8:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13ca:	83 2f       	mov	r24, r19
    13cc:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    13d0:	98 2f       	mov	r25, r24
    13d2:	88 0f       	add	r24, r24
    13d4:	89 0f       	add	r24, r25
    13d6:	88 0f       	add	r24, r24
    13d8:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13da:	8b 83       	std	Y+3, r24	; 0x03
    13dc:	13 96       	adiw	r26, 0x03	; 3
    13de:	3c 91       	ld	r19, X
    13e0:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13e2:	83 2f       	mov	r24, r19
    13e4:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    13e8:	98 2f       	mov	r25, r24
    13ea:	88 0f       	add	r24, r24
    13ec:	89 0f       	add	r24, r25
    13ee:	88 0f       	add	r24, r24
    13f0:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	12 96       	adiw	r26, 0x02	; 2
    13f6:	3c 91       	ld	r19, X
    13f8:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13fa:	83 2f       	mov	r24, r19
    13fc:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    1400:	98 2f       	mov	r25, r24
    1402:	88 0f       	add	r24, r24
    1404:	89 0f       	add	r24, r25
    1406:	88 0f       	add	r24, r24
    1408:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    140a:	8e 83       	std	Y+6, r24	; 0x06
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	3c 91       	ld	r19, X
    1410:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1412:	83 2f       	mov	r24, r19
    1414:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    1418:	98 2f       	mov	r25, r24
    141a:	88 0f       	add	r24, r24
    141c:	89 0f       	add	r24, r25
    141e:	88 0f       	add	r24, r24
    1420:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1422:	8f 83       	std	Y+7, r24	; 0x07
    1424:	3c 91       	ld	r19, X
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1426:	83 2f       	mov	r24, r19
    1428:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    142c:	98 2f       	mov	r25, r24
    142e:	88 0f       	add	r24, r24
    1430:	89 0f       	add	r24, r25
    1432:	88 0f       	add	r24, r24
    1434:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1436:	88 87       	std	Y+8, r24	; 0x08
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:46
  i2c_dev->write(buffer, 8);
    1438:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <rtc>
    143c:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    1440:	fc 01       	movw	r30, r24
    1442:	24 81       	ldd	r18, Z+4	; 0x04
    1444:	35 81       	ldd	r19, Z+5	; 0x05
    1446:	28 30       	cpi	r18, 0x08	; 8
    1448:	31 05       	cpc	r19, r1
    144a:	80 f0       	brcs	.+32     	; 0x146c <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]+0xee>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    144c:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    144e:	31 e0       	ldi	r19, 0x01	; 1
    1450:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    1454:	20 93 ab 04 	sts	0x04AB, r18	; 0x8004ab <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1458:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    145c:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
write():
    1460:	21 e0       	ldi	r18, 0x01	; 1
    1462:	48 e0       	ldi	r20, 0x08	; 8
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	b8 01       	movw	r22, r16
    1468:	0e 94 b3 06 	call	0xd66	; 0xd66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
_ZN10RTC_DS13076adjustERK8DateTime.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:47
}
    146c:	28 96       	adiw	r28, 0x08	; 8
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <RTC_DS1307::now() [clone .constprop.23]>:
_ZN10RTC_DS13073nowEv.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:55
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	00 d0       	rcall	.+0      	; 0x1490 <RTC_DS1307::now() [clone .constprop.23]+0xe>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <RTC_DS1307::now() [clone .constprop.23]+0x10>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <RTC_DS1307::now() [clone .constprop.23]+0x12>
    1494:	1f 92       	push	r1
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	8c 01       	movw	r16, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:57
  uint8_t buffer[7];
  buffer[0] = 0;
    149c:	19 82       	std	Y+1, r1	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:58
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    149e:	e0 90 3a 04 	lds	r14, 0x043A	; 0x80043a <rtc>
    14a2:	f0 90 3b 04 	lds	r15, 0x043B	; 0x80043b <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    14a6:	d7 01       	movw	r26, r14
    14a8:	14 96       	adiw	r26, 0x04	; 4
    14aa:	8d 91       	ld	r24, X+
    14ac:	9c 91       	ld	r25, X
    14ae:	15 97       	sbiw	r26, 0x05	; 5
    14b0:	89 2b       	or	r24, r25
    14b2:	e9 f0       	breq	.+58     	; 0x14ee <RTC_DS1307::now() [clone .constprop.23]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    14b4:	8c 91       	ld	r24, X
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    14bc:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    14c0:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    14c4:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
write():
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	be 01       	movw	r22, r28
    14d0:	6f 5f       	subi	r22, 0xFF	; 255
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	c7 01       	movw	r24, r14
    14d6:	0e 94 b3 06 	call	0xd66	; 0xd66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
write_then_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:243
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    14da:	88 23       	and	r24, r24
    14dc:	41 f0       	breq	.+16     	; 0x14ee <RTC_DS1307::now() [clone .constprop.23]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
    return false;
  }

  return read(read_buffer, read_len);
    14de:	47 e0       	ldi	r20, 0x07	; 7
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	be 01       	movw	r22, r28
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	c7 01       	movw	r24, r14
    14ea:	0e 94 0b 09 	call	0x1216	; 0x1216 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]>
_ZN10RTC_DS13073nowEv.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:62

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	ef 77       	andi	r30, 0x7F	; 127
    14f2:	fa 81       	ldd	r31, Y+2	; 0x02
    14f4:	fb 80       	ldd	r15, Y+3	; 0x03
    14f6:	4d 81       	ldd	r20, Y+5	; 0x05
    14f8:	5e 81       	ldd	r21, Y+6	; 0x06
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:60
DateTime RTC_DS1307::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
  i2c_dev->write_then_read(buffer, 1, buffer, 7);

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
    14fa:	8f 81       	ldd	r24, Y+7	; 0x07
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
      @brief  Convert a binary coded decimal value to binary. RTC stores
    time/date values as BCD.
      @param val BCD value
      @return Binary value
  */
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	94 e0       	ldi	r25, 0x04	; 4
    1502:	35 95       	asr	r19
    1504:	27 95       	ror	r18
    1506:	9a 95       	dec	r25
    1508:	e1 f7       	brne	.-8      	; 0x1502 <RTC_DS1307::now() [clone .constprop.23]+0x80>
    150a:	92 2f       	mov	r25, r18
    150c:	99 0f       	add	r25, r25
    150e:	99 0f       	add	r25, r25
    1510:	29 1b       	sub	r18, r25
    1512:	22 0f       	add	r18, r18
    1514:	28 0f       	add	r18, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    1516:	d8 01       	movw	r26, r16
    1518:	2c 93       	st	X, r18
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    151a:	85 2f       	mov	r24, r21
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	24 e0       	ldi	r18, 0x04	; 4
    1520:	95 95       	asr	r25
    1522:	87 95       	ror	r24
    1524:	2a 95       	dec	r18
    1526:	e1 f7       	brne	.-8      	; 0x1520 <RTC_DS1307::now() [clone .constprop.23]+0x9e>
    1528:	98 2f       	mov	r25, r24
    152a:	99 0f       	add	r25, r25
    152c:	99 0f       	add	r25, r25
    152e:	89 1b       	sub	r24, r25
    1530:	88 0f       	add	r24, r24
    1532:	85 0f       	add	r24, r21
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	8c 93       	st	X, r24
    1538:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    153a:	64 2f       	mov	r22, r20
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	34 e0       	ldi	r19, 0x04	; 4
    1540:	75 95       	asr	r23
    1542:	67 95       	ror	r22
    1544:	3a 95       	dec	r19
    1546:	e1 f7       	brne	.-8      	; 0x1540 <RTC_DS1307::now() [clone .constprop.23]+0xbe>
    1548:	86 2f       	mov	r24, r22
    154a:	88 0f       	add	r24, r24
    154c:	88 0f       	add	r24, r24
    154e:	68 1b       	sub	r22, r24
    1550:	66 0f       	add	r22, r22
    1552:	64 0f       	add	r22, r20
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    1554:	12 96       	adiw	r26, 0x02	; 2
    1556:	6c 93       	st	X, r22
    1558:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    155a:	4f 2d       	mov	r20, r15
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	64 e0       	ldi	r22, 0x04	; 4
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	6a 95       	dec	r22
    1566:	e1 f7       	brne	.-8      	; 0x1560 <RTC_DS1307::now() [clone .constprop.23]+0xde>
    1568:	84 2f       	mov	r24, r20
    156a:	88 0f       	add	r24, r24
    156c:	88 0f       	add	r24, r24
    156e:	48 1b       	sub	r20, r24
    1570:	44 0f       	add	r20, r20
    1572:	4f 0d       	add	r20, r15
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    1574:	13 96       	adiw	r26, 0x03	; 3
    1576:	4c 93       	st	X, r20
    1578:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    157a:	2f 2f       	mov	r18, r31
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	74 e0       	ldi	r23, 0x04	; 4
    1580:	35 95       	asr	r19
    1582:	27 95       	ror	r18
    1584:	7a 95       	dec	r23
    1586:	e1 f7       	brne	.-8      	; 0x1580 <RTC_DS1307::now() [clone .constprop.23]+0xfe>
    1588:	82 2f       	mov	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	88 0f       	add	r24, r24
    158e:	28 1b       	sub	r18, r24
    1590:	22 0f       	add	r18, r18
    1592:	2f 0f       	add	r18, r31
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    1594:	14 96       	adiw	r26, 0x04	; 4
    1596:	2c 93       	st	X, r18
    1598:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    159a:	8e 2f       	mov	r24, r30
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	f4 e0       	ldi	r31, 0x04	; 4
    15a0:	95 95       	asr	r25
    15a2:	87 95       	ror	r24
    15a4:	fa 95       	dec	r31
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <RTC_DS1307::now() [clone .constprop.23]+0x11e>
    15a8:	98 2f       	mov	r25, r24
    15aa:	99 0f       	add	r25, r25
    15ac:	99 0f       	add	r25, r25
    15ae:	89 1b       	sub	r24, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	8e 0f       	add	r24, r30
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    15b4:	15 96       	adiw	r26, 0x05	; 5
    15b6:	8c 93       	st	X, r24
_ZN10RTC_DS13073nowEv.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:63
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
}
    15b8:	c8 01       	movw	r24, r16
    15ba:	27 96       	adiw	r28, 0x07	; 7
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	08 95       	ret

000015d4 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    15da:	88 81       	ld	r24, Y
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <String::invalidate()+0x12>
    15e2:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    15e6:	19 82       	std	Y+1, r1	; 0x01
    15e8:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    15ea:	1d 82       	std	Y+5, r1	; 0x05
    15ec:	1c 82       	std	Y+4, r1	; 0x04
    15ee:	1b 82       	std	Y+3, r1	; 0x03
    15f0:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <Print::print(char const*) [clone .constprop.92]>:
_ZN5Print5printEPKc.constprop.92():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	69 f0       	breq	.+26     	; 0x1616 <Print::print(char const*) [clone .constprop.92]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    15fc:	fc 01       	movw	r30, r24
    15fe:	01 90       	ld	r0, Z+
    1600:	00 20       	and	r0, r0
    1602:	e9 f7       	brne	.-6      	; 0x15fe <Print::print(char const*) [clone .constprop.92]+0x6>
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	af 01       	movw	r20, r30
    1608:	48 1b       	sub	r20, r24
    160a:	59 0b       	sbc	r21, r25
    160c:	bc 01       	movw	r22, r24
    160e:	84 eb       	ldi	r24, 0xB4	; 180
    1610:	95 e0       	ldi	r25, 0x05	; 5
    1612:	0c 94 0b 03 	jmp	0x616	; 0x616 <Print::write(unsigned char const*, unsigned int)>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	08 95       	ret

0000161c <inttostr(char*, short)>:
_Z8inttostrPcs():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:79
  pulseWidth++;
}

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    1626:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:80
  if (integer == 0)
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	59 f4       	brne	.+22     	; 0x1642 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:82
  {
    strcpy(dest, "0");
    162c:	66 e9       	ldi	r22, 0x96	; 150
    162e:	71 e0       	ldi	r23, 0x01	; 1
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:112
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    1636:	ce 01       	movw	r24, r28
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:86
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    1642:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:88
    
    if (integer < 0)
    1644:	77 ff       	sbrs	r23, 7
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:91
    {
      sign = 1;
      dest[0] = '-';
    1648:	2d e2       	ldi	r18, 0x2D	; 45
    164a:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:92
      integer = integer * -1;
    164c:	91 95       	neg	r25
    164e:	81 95       	neg	r24
    1650:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:90
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    1652:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1654:	80 31       	cpi	r24, 0x10	; 16
    1656:	37 e2       	ldi	r19, 0x27	; 39
    1658:	93 07       	cpc	r25, r19
    165a:	0c f5       	brge	.+66     	; 0x169e <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    165c:	88 3e       	cpi	r24, 0xE8	; 232
    165e:	33 e0       	ldi	r19, 0x03	; 3
    1660:	93 07       	cpc	r25, r19
    1662:	fc f4       	brge	.+62     	; 0x16a2 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:99
    else if (integer > 99) idx = 2;
    1664:	32 e0       	ldi	r19, 0x02	; 2
    1666:	84 36       	cpi	r24, 0x64	; 100
    1668:	91 05       	cpc	r25, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:100
    else if (integer > 9) idx = 1;
    166c:	31 e0       	ldi	r19, 0x01	; 1
    166e:	8a 30       	cpi	r24, 0x0A	; 10
    1670:	91 05       	cpc	r25, r1
    1672:	0c f4       	brge	.+2      	; 0x1676 <inttostr(char*, short)+0x5a>
    1674:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:103
    else if (integer > 0) idx = 0;    

    idx += sign;
    1676:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:104
    dest[idx+1] = 0;
    1678:	fe 01       	movw	r30, r28
    167a:	e2 0f       	add	r30, r18
    167c:	f1 1d       	adc	r31, r1
    167e:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:108
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    1680:	0a e0       	ldi	r16, 0x0A	; 10
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	fe 01       	movw	r30, r28
    1686:	e2 0f       	add	r30, r18
    1688:	f1 1d       	adc	r31, r1
    168a:	b8 01       	movw	r22, r16
    168c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__divmodhi4>
    1690:	80 5d       	subi	r24, 0xD0	; 208
    1692:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:106
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    1694:	cb 01       	movw	r24, r22
    1696:	21 50       	subi	r18, 0x01	; 1
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	a1 f7       	brne	.-24     	; 0x1684 <inttostr(char*, short)+0x68>
    169c:	cc cf       	rjmp	.-104    	; 0x1636 <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    169e:	34 e0       	ldi	r19, 0x04	; 4
    16a0:	ea cf       	rjmp	.-44     	; 0x1676 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    16a2:	33 e0       	ldi	r19, 0x03	; 3
    16a4:	e8 cf       	rjmp	.-48     	; 0x1676 <inttostr(char*, short)+0x5a>

000016a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>:
_Z4rpadPcPKcch.constprop.91():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:140
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:142
{
  unsigned char len = strlen(str);
    16ac:	ec 01       	movw	r28, r24
    16ae:	09 90       	ld	r0, Y+
    16b0:	00 20       	and	r0, r0
    16b2:	e9 f7       	brne	.-6      	; 0x16ae <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x8>
    16b4:	21 97       	sbiw	r28, 0x01	; 1
    16b6:	c8 1b       	sub	r28, r24
    16b8:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:146
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    16ba:	c0 31       	cpi	r28, 0x10	; 16
    16bc:	08 f5       	brcc	.+66     	; 0x1700 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:148
  {
    strcpy(dest, str);
    16be:	8d e2       	ldi	r24, 0x2D	; 45
    16c0:	95 e0       	ldi	r25, 0x05	; 5
    16c2:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:149
    strcat(dest, padc(chr, width - len));
    16c6:	80 e1       	ldi	r24, 0x10	; 16
    16c8:	8c 1b       	sub	r24, r28
    16ca:	ec e1       	ldi	r30, 0x1C	; 28
    16cc:	f5 e0       	ldi	r31, 0x05	; 5
padc():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    16ce:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    16d0:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    16d2:	af 01       	movw	r20, r30
    16d4:	4c 51       	subi	r20, 0x1C	; 28
    16d6:	55 40       	sbci	r21, 0x05	; 5
    16d8:	48 17       	cp	r20, r24
    16da:	59 07       	cpc	r21, r25
    16dc:	14 f4       	brge	.+4      	; 0x16e2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x3c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    16de:	21 93       	st	Z+, r18
    16e0:	f8 cf       	rjmp	.-16     	; 0x16d2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    16e2:	84 5e       	subi	r24, 0xE4	; 228
    16e4:	9a 4f       	sbci	r25, 0xFA	; 250
    16e6:	fc 01       	movw	r30, r24
    16e8:	10 82       	st	Z, r1
_Z4rpadPcPKcch.constprop.91():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:149
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    16ea:	6c e1       	ldi	r22, 0x1C	; 28
    16ec:	75 e0       	ldi	r23, 0x05	; 5
    16ee:	8d e2       	ldi	r24, 0x2D	; 45
    16f0:	95 e0       	ldi	r25, 0x05	; 5
    16f2:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <strcat>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:156
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    16f6:	8d e2       	ldi	r24, 0x2D	; 45
    16f8:	95 e0       	ldi	r25, 0x05	; 5
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:153
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    1700:	41 e1       	ldi	r20, 0x11	; 17
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	8d e2       	ldi	r24, 0x2D	; 45
    1706:	95 e0       	ldi	r25, 0x05	; 5
    1708:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <strncpy>
    170c:	f4 cf       	rjmp	.-24     	; 0x16f6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x50>

0000170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>:
_Z4lpadPcPKcch.constprop.90():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:159
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	ec 01       	movw	r28, r24
    1718:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:161
{
  unsigned char len = strlen(str);
    171a:	fb 01       	movw	r30, r22
    171c:	01 90       	ld	r0, Z+
    171e:	00 20       	and	r0, r0
    1720:	e9 f7       	brne	.-6      	; 0x171c <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0xe>
    1722:	31 97       	sbiw	r30, 0x01	; 1
    1724:	e6 1b       	sub	r30, r22
    1726:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:165
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    1728:	e0 31       	cpi	r30, 0x10	; 16
    172a:	28 f5       	brcc	.+74     	; 0x1776 <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0x68>
    172c:	e4 17       	cp	r30, r20
    172e:	18 f5       	brcc	.+70     	; 0x1776 <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0x68>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:167
  {
    strcpy(dest, padc(chr, width - len));
    1730:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:183
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    1732:	41 31       	cpi	r20, 0x11	; 17
    1734:	08 f0       	brcs	.+2      	; 0x1738 <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0x2a>
    1736:	40 e1       	ldi	r20, 0x10	; 16
    1738:	ec e1       	ldi	r30, 0x1C	; 28
    173a:	f5 e0       	ldi	r31, 0x05	; 5
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:186

  int i;
  for (i=0; i < count; i++)
    173c:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    173e:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1740:	9f 01       	movw	r18, r30
    1742:	2c 51       	subi	r18, 0x1C	; 28
    1744:	35 40       	sbci	r19, 0x05	; 5
    1746:	24 17       	cp	r18, r20
    1748:	35 07       	cpc	r19, r21
    174a:	14 f4       	brge	.+4      	; 0x1750 <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0x42>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    174c:	81 93       	st	Z+, r24
    174e:	f8 cf       	rjmp	.-16     	; 0x1740 <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0x32>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    1750:	44 5e       	subi	r20, 0xE4	; 228
    1752:	5a 4f       	sbci	r21, 0xFA	; 250
    1754:	fa 01       	movw	r30, r20
    1756:	10 82       	st	Z, r1
_Z4lpadPcPKcch.constprop.90():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:167
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    1758:	6c e1       	ldi	r22, 0x1C	; 28
    175a:	75 e0       	ldi	r23, 0x05	; 5
    175c:	ce 01       	movw	r24, r28
    175e:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:168
    strcat(dest, str);
    1762:	b8 01       	movw	r22, r16
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <strcat>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:175
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    176a:	ce 01       	movw	r24, r28
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:172
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	4f 5f       	subi	r20, 0xFF	; 255
    177a:	5f 4f       	sbci	r21, 0xFF	; 255
    177c:	b8 01       	movw	r22, r16
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <strncpy>
    1784:	f2 cf       	rjmp	.-28     	; 0x176a <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]+0x5c>

00001786 <Config::save() [clone .constprop.19]>:
_ZN6Config4saveEv.constprop.19():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:225
  DataYear = 2022;
}

void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    1786:	42 e5       	ldi	r20, 0x52	; 82
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	83 eb       	ldi	r24, 0xB3	; 179
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <eeprom_write_block>

00001796 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    17a0:	88 81       	ld	r24, Y
    17a2:	99 81       	ldd	r25, Y+1	; 0x01
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	59 f0       	breq	.+22     	; 0x17be <String::reserve(unsigned int)+0x28>
    17a8:	2a 81       	ldd	r18, Y+2	; 0x02
    17aa:	3b 81       	ldd	r19, Y+3	; 0x03
    17ac:	26 17       	cp	r18, r22
    17ae:	37 07       	cpc	r19, r23
    17b0:	30 f0       	brcs	.+12     	; 0x17be <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret
    17be:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    17cc:	99 83       	std	Y+1, r25	; 0x01
    17ce:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    17d0:	1b 83       	std	Y+3, r17	; 0x03
    17d2:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    17d4:	2c 81       	ldd	r18, Y+4	; 0x04
    17d6:	3d 81       	ldd	r19, Y+5	; 0x05
    17d8:	23 2b       	or	r18, r19
    17da:	59 f7       	brne	.-42     	; 0x17b2 <String::reserve(unsigned int)+0x1c>
    17dc:	fc 01       	movw	r30, r24
    17de:	10 82       	st	Z, r1
    17e0:	e8 cf       	rjmp	.-48     	; 0x17b2 <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	e7 cf       	rjmp	.-50     	; 0x17b4 <String::reserve(unsigned int)+0x1e>

000017e6 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    17f4:	fb 01       	movw	r30, r22
    17f6:	e0 80       	ld	r14, Z
    17f8:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    17fa:	e1 14       	cp	r14, r1
    17fc:	f1 04       	cpc	r15, r1
    17fe:	11 f1       	breq	.+68     	; 0x1844 <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1800:	04 81       	ldd	r16, Z+4	; 0x04
    1802:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    1804:	01 15       	cp	r16, r1
    1806:	11 05       	cpc	r17, r1
    1808:	a9 f0       	breq	.+42     	; 0x1834 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	08 0f       	add	r16, r24
    1810:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1812:	b8 01       	movw	r22, r16
    1814:	ce 01       	movw	r24, r28
    1816:	0e 94 cb 0b 	call	0x1796	; 0x1796 <String::reserve(unsigned int)>
    181a:	88 23       	and	r24, r24
    181c:	99 f0       	breq	.+38     	; 0x1844 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    181e:	28 81       	ld	r18, Y
    1820:	39 81       	ldd	r19, Y+1	; 0x01
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	b7 01       	movw	r22, r14
    1828:	82 0f       	add	r24, r18
    182a:	93 1f       	adc	r25, r19
    182c:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    1830:	1d 83       	std	Y+5, r17	; 0x05
    1832:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    1834:	ce 01       	movw	r24, r28
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1844:	ce 01       	movw	r24, r28
    1846:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <String::invalidate()>
    184a:	f4 cf       	rjmp	.-24     	; 0x1834 <operator+(StringSumHelper const&, String const&)+0x4e>

0000184c <String::String(char const*)>:
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    185a:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    185c:	19 82       	std	Y+1, r1	; 0x01
    185e:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1860:	1b 82       	std	Y+3, r1	; 0x03
    1862:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1864:	1d 82       	std	Y+5, r1	; 0x05
    1866:	1c 82       	std	Y+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    1868:	fb 01       	movw	r30, r22
    186a:	01 90       	ld	r0, Z+
    186c:	00 20       	and	r0, r0
    186e:	e9 f7       	brne	.-6      	; 0x186a <String::String(char const*)+0x1e>
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	8f 01       	movw	r16, r30
    1874:	06 1b       	sub	r16, r22
    1876:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    1878:	b8 01       	movw	r22, r16
    187a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <String::reserve(unsigned int)>
    187e:	81 11       	cpse	r24, r1
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    1882:	ce 01       	movw	r24, r28
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    1890:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    1894:	1d 83       	std	Y+5, r17	; 0x05
    1896:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    1898:	b7 01       	movw	r22, r14
    189a:	88 81       	ld	r24, Y
    189c:	99 81       	ldd	r25, Y+1	; 0x01
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    18aa:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <strcpy>

000018ae <fmt(char*, unsigned char, ...)>:
_Z3fmtPchz():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:117
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    18ae:	6f 92       	push	r6
    18b0:	7f 92       	push	r7
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	e9 88       	ldd	r14, Y+17	; 0x11
    18d0:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:122
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    18d2:	fe 01       	movw	r30, r28
    18d4:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:124

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    18d6:	d1 2c       	mov	r13, r1
    18d8:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:118


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    18da:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    18dc:	ab 88       	ldd	r10, Y+19	; 0x13
    18de:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:128
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    18e0:	80 e1       	ldi	r24, 0x10	; 16
    18e2:	68 2e       	mov	r6, r24
    18e4:	87 2d       	mov	r24, r7
    18e6:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    18e8:	ca 14       	cp	r12, r10
    18ea:	db 04       	cpc	r13, r11
    18ec:	2c f5       	brge	.+74     	; 0x1938 <fmt(char*, unsigned char, ...)+0x8a>
    18ee:	2f e0       	ldi	r18, 0x0F	; 15
    18f0:	27 15       	cp	r18, r7
    18f2:	10 f1       	brcs	.+68     	; 0x1938 <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    18f4:	4f 01       	movw	r8, r30
    18f6:	22 e0       	ldi	r18, 0x02	; 2
    18f8:	82 0e       	add	r8, r18
    18fa:	91 1c       	adc	r9, r1
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:127
    unsigned char len = strlen(str);
    1900:	fb 01       	movw	r30, r22
    1902:	01 90       	ld	r0, Z+
    1904:	00 20       	and	r0, r0
    1906:	e9 f7       	brne	.-6      	; 0x1902 <fmt(char*, unsigned char, ...)+0x54>
    1908:	31 97       	sbiw	r30, 0x01	; 1
    190a:	8f 01       	movw	r16, r30
    190c:	06 1b       	sub	r16, r22
    190e:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:128
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    1910:	9c 01       	movw	r18, r24
    1912:	20 0f       	add	r18, r16
    1914:	31 1d       	adc	r19, r1
    1916:	46 2d       	mov	r20, r6
    1918:	47 19       	sub	r20, r7
    191a:	21 31       	cpi	r18, 0x11	; 17
    191c:	31 05       	cpc	r19, r1
    191e:	0c f4       	brge	.+2      	; 0x1922 <fmt(char*, unsigned char, ...)+0x74>
    1920:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:130

    strncpy((dest + buflen), str, cpylen);
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	8e 0d       	add	r24, r14
    1926:	9f 1d       	adc	r25, r15
    1928:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <strncpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:131
    buflen += len;
    192c:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	c8 1a       	sub	r12, r24
    1932:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    1934:	f4 01       	movw	r30, r8
    1936:	d6 cf       	rjmp	.-84     	; 0x18e4 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:134

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    1938:	8e 0d       	add	r24, r14
    193a:	9f 1d       	adc	r25, r15
    193c:	fc 01       	movw	r30, r24
    193e:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:136
  return dest;
}
    1940:	c7 01       	movw	r24, r14
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	9f 90       	pop	r9
    1958:	8f 90       	pop	r8
    195a:	7f 90       	pop	r7
    195c:	6f 90       	pop	r6
    195e:	08 95       	ret

00001960 <toDurStr(char*, long, char) [clone .constprop.89]>:
_Z8toDurStrPclc.constprop.89():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:36

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
  return buf;
}

char *toDurStr(char *buf, long timeval, char separator)
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	60 97       	sbiw	r28, 0x10	; 16
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:38
{
  char sepstr[] = {separator, 0};
    1980:	18 8a       	std	Y+16, r1	; 0x10
    1982:	1f 86       	std	Y+15, r1	; 0x0f
    1984:	2a e3       	ldi	r18, 0x3A	; 58
    1986:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:40

  short hours = timeval / 60;
    1988:	2c e3       	ldi	r18, 0x3C	; 60
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__divmodsi4>
    1994:	6b 01       	movw	r12, r22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:46
  short mins = timeval % 60;
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hours);
    1996:	b9 01       	movw	r22, r18
    1998:	ce 01       	movw	r24, r28
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:47
  lpad(h, intbuf, '0', 2);
    19a0:	8e 01       	movw	r16, r28
    19a2:	04 5f       	subi	r16, 0xF4	; 244
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	42 e0       	ldi	r20, 0x02	; 2
    19a8:	be 01       	movw	r22, r28
    19aa:	6f 5f       	subi	r22, 0xFF	; 255
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	c8 01       	movw	r24, r16
    19b0:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:48
  inttostr(intbuf, mins);
    19b4:	b6 01       	movw	r22, r12
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:49
  lpad(m, intbuf, '0', 2);
    19be:	7e 01       	movw	r14, r28
    19c0:	89 e0       	ldi	r24, 0x09	; 9
    19c2:	e8 0e       	add	r14, r24
    19c4:	f1 1c       	adc	r15, r1
    19c6:	42 e0       	ldi	r20, 0x02	; 2
    19c8:	be 01       	movw	r22, r28
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	c7 01       	movw	r24, r14
    19d0:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:51

  fmt(buf, 3, h, sepstr, m);
    19d4:	ff 92       	push	r15
    19d6:	ef 92       	push	r14
    19d8:	ce 01       	movw	r24, r28
    19da:	0f 96       	adiw	r24, 0x0f	; 15
    19dc:	9f 93       	push	r25
    19de:	8f 93       	push	r24
    19e0:	1f 93       	push	r17
    19e2:	0f 93       	push	r16
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	8f 93       	push	r24
    19e8:	8b e0       	ldi	r24, 0x0B	; 11
    19ea:	95 e0       	ldi	r25, 0x05	; 5
    19ec:	9f 93       	push	r25
    19ee:	8f 93       	push	r24
    19f0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:52
  return buf;
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:53
}
    19fe:	8b e0       	ldi	r24, 0x0B	; 11
    1a00:	95 e0       	ldi	r25, 0x05	; 5
    1a02:	60 96       	adiw	r28, 0x10	; 16
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	08 95       	ret

00001a20 <toTimeStr(char*, long, char) [clone .constprop.88]>:
_Z9toTimeStrPclc.constprop.88():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:16
                          "Perumal Songs", "Murugan Potri", "Murugan Songs", 
                          "Ramar Songs", "Abirami Anthathi", "Thirukural", "Bagavath Geethai"};
short voiceCount = sizeof(gods)/sizeof(gods[0]);
short demoSongCount = sizeof(demoSong)/sizeof(demoSong[0]);

char *toTimeStr(char *buf, long timeval, char separator)
    1a20:	8f 92       	push	r8
    1a22:	9f 92       	push	r9
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	60 97       	sbiw	r28, 0x10	; 16
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:18
{
  char sepstr[] = {separator, 0};
    1a48:	18 8a       	std	Y+16, r1	; 0x10
    1a4a:	1f 86       	std	Y+15, r1	; 0x0f
    1a4c:	2a e3       	ldi	r18, 0x3A	; 58
    1a4e:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:20

  short hours = timeval / 60;
    1a50:	2c e3       	ldi	r18, 0x3C	; 60
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__divmodsi4>
    1a5c:	4b 01       	movw	r8, r22
    1a5e:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:22
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    1a60:	2d 30       	cpi	r18, 0x0D	; 13
    1a62:	31 05       	cpc	r19, r1
    1a64:	14 f0       	brlt	.+4      	; 0x1a6a <toTimeStr(char*, long, char) [clone .constprop.88]+0x4a>
    1a66:	2c 50       	subi	r18, 0x0C	; 12
    1a68:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:27
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:28
  lpad(h, intbuf, '0', 2);
    1a74:	8e 01       	movw	r16, r28
    1a76:	04 5f       	subi	r16, 0xF4	; 244
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	42 e0       	ldi	r20, 0x02	; 2
    1a7c:	be 01       	movw	r22, r28
    1a7e:	6f 5f       	subi	r22, 0xFF	; 255
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	c8 01       	movw	r24, r16
    1a84:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:29
  inttostr(intbuf, mins);
    1a88:	b4 01       	movw	r22, r8
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:30
  lpad(m, intbuf, '0', 2);
    1a92:	6e 01       	movw	r12, r28
    1a94:	99 e0       	ldi	r25, 0x09	; 9
    1a96:	c9 0e       	add	r12, r25
    1a98:	d1 1c       	adc	r13, r1
    1a9a:	42 e0       	ldi	r20, 0x02	; 2
    1a9c:	be 01       	movw	r22, r28
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	c6 01       	movw	r24, r12
    1aa4:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:32

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1aa8:	8c e0       	ldi	r24, 0x0C	; 12
    1aaa:	e8 16       	cp	r14, r24
    1aac:	f1 04       	cpc	r15, r1
    1aae:	74 f5       	brge	.+92     	; 0x1b0c <toTimeStr(char*, long, char) [clone .constprop.88]+0xec>
    1ab0:	82 ea       	ldi	r24, 0xA2	; 162
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	9f 93       	push	r25
    1ab6:	8f 93       	push	r24
    1ab8:	df 92       	push	r13
    1aba:	cf 92       	push	r12
    1abc:	ce 01       	movw	r24, r28
    1abe:	0f 96       	adiw	r24, 0x0f	; 15
    1ac0:	9f 93       	push	r25
    1ac2:	8f 93       	push	r24
    1ac4:	1f 93       	push	r17
    1ac6:	0f 93       	push	r16
    1ac8:	84 e0       	ldi	r24, 0x04	; 4
    1aca:	8f 93       	push	r24
    1acc:	8b e0       	ldi	r24, 0x0B	; 11
    1ace:	95 e0       	ldi	r25, 0x05	; 5
    1ad0:	9f 93       	push	r25
    1ad2:	8f 93       	push	r24
    1ad4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:33
  return buf;
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:34
}
    1ae2:	8b e0       	ldi	r24, 0x0B	; 11
    1ae4:	95 e0       	ldi	r25, 0x05	; 5
    1ae6:	60 96       	adiw	r28, 0x10	; 16
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	ff 90       	pop	r15
    1afc:	ef 90       	pop	r14
    1afe:	df 90       	pop	r13
    1b00:	cf 90       	pop	r12
    1b02:	bf 90       	pop	r11
    1b04:	af 90       	pop	r10
    1b06:	9f 90       	pop	r9
    1b08:	8f 90       	pop	r8
    1b0a:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:32
  inttostr(intbuf, hrs);
  lpad(h, intbuf, '0', 2);
  inttostr(intbuf, mins);
  lpad(m, intbuf, '0', 2);

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1b0c:	8b e9       	ldi	r24, 0x9B	; 155
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	d1 cf       	rjmp	.-94     	; 0x1ab4 <toTimeStr(char*, long, char) [clone .constprop.88]+0x94>

00001b12 <Config::getFormattedStr(unsigned char) [clone .constprop.86]>:
_ZN6Config15getFormattedStrEh.constprop.86():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:82
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	65 97       	sbiw	r28, 0x15	; 21
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:86
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    1b32:	82 50       	subi	r24, 0x02	; 2
    1b34:	80 32       	cpi	r24, 0x20	; 32
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x28>
    1b38:	f1 c1       	rjmp	.+994    	; 0x1f1c <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x40a>
    1b3a:	e8 2f       	mov	r30, r24
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	ed 55       	subi	r30, 0x5D	; 93
    1b40:	f2 4f       	sbci	r31, 0xF2	; 242
    1b42:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__tablejump2__>
    1b46:	c3 0d       	add	r28, r3
    1b48:	19 0e       	add	r1, r25
    1b4a:	8e 0f       	add	r24, r30
    1b4c:	40 0e       	add	r4, r16
    1b4e:	6c 0e       	add	r6, r28
    1b50:	8b 0e       	add	r8, r27
    1b52:	96 0e       	add	r9, r22
    1b54:	a3 0e       	add	r10, r19
    1b56:	d3 0e       	add	r13, r19
    1b58:	8e 0f       	add	r24, r30
    1b5a:	ae 0e       	add	r10, r30
    1b5c:	dd 0e       	add	r13, r29
    1b5e:	8e 0f       	add	r24, r30
    1b60:	e6 0e       	add	r14, r22
    1b62:	f3 0e       	add	r15, r19
    1b64:	f8 0e       	add	r15, r24
    1b66:	06 0f       	add	r16, r22
    1b68:	0b 0f       	add	r16, r27
    1b6a:	10 0f       	add	r17, r16
    1b6c:	32 0f       	add	r19, r18
    1b6e:	6f 0f       	add	r22, r31
    1b70:	8e 0f       	add	r24, r30
    1b72:	37 0f       	add	r19, r23
    1b74:	40 0f       	add	r20, r16
    1b76:	8e 0f       	add	r24, r30
    1b78:	49 0f       	add	r20, r25
    1b7a:	52 0f       	add	r21, r18
    1b7c:	5d 0f       	add	r21, r29
    1b7e:	66 0f       	add	r22, r22
    1b80:	8e 0f       	add	r24, r30
    1b82:	72 0f       	add	r23, r18
    1b84:	82 0f       	add	r24, r18
toDateStr():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:57
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1b86:	1d 8a       	std	Y+21, r1	; 0x15
    1b88:	1c 8a       	std	Y+20, r1	; 0x14
    1b8a:	8f e2       	ldi	r24, 0x2F	; 47
    1b8c:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:61
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1b8e:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <StDate>
    1b92:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <StDate+0x1>
    1b96:	ce 01       	movw	r24, r28
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:62
  lpad(dat, intbuf, '0', 2);
    1b9e:	8e 01       	movw	r16, r28
    1ba0:	0f 5e       	subi	r16, 0xEF	; 239
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	42 e0       	ldi	r20, 0x02	; 2
    1ba6:	be 01       	movw	r22, r28
    1ba8:	6f 5f       	subi	r22, 0xFF	; 255
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	c8 01       	movw	r24, r16
    1bae:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:63
  inttostr(intbuf, StMonth);
    1bb2:	60 91 af 04 	lds	r22, 0x04AF	; 0x8004af <StMonth>
    1bb6:	70 91 b0 04 	lds	r23, 0x04B0	; 0x8004b0 <StMonth+0x1>
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:64
  lpad(mon, intbuf, '0', 2);
    1bc2:	7e 01       	movw	r14, r28
    1bc4:	8e e0       	ldi	r24, 0x0E	; 14
    1bc6:	e8 0e       	add	r14, r24
    1bc8:	f1 1c       	adc	r15, r1
    1bca:	42 e0       	ldi	r20, 0x02	; 2
    1bcc:	be 01       	movw	r22, r28
    1bce:	6f 5f       	subi	r22, 0xFF	; 255
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:65
  inttostr(intbuf, StYear);
    1bd8:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <StYear>
    1bdc:	70 91 ae 04 	lds	r23, 0x04AE	; 0x8004ae <StYear+0x1>
    1be0:	ce 01       	movw	r24, r28
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:66
  lpad(year, intbuf, '0', 4);
    1be8:	6e 01       	movw	r12, r28
    1bea:	99 e0       	ldi	r25, 0x09	; 9
    1bec:	c9 0e       	add	r12, r25
    1bee:	d1 1c       	adc	r13, r1
    1bf0:	44 e0       	ldi	r20, 0x04	; 4
    1bf2:	be 01       	movw	r22, r28
    1bf4:	6f 5f       	subi	r22, 0xFF	; 255
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	c6 01       	movw	r24, r12
    1bfa:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:68

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    1bfe:	df 92       	push	r13
    1c00:	cf 92       	push	r12
    1c02:	ce 01       	movw	r24, r28
    1c04:	44 96       	adiw	r24, 0x14	; 20
    1c06:	9f 93       	push	r25
    1c08:	8f 93       	push	r24
    1c0a:	ff 92       	push	r15
    1c0c:	ef 92       	push	r14
    1c0e:	9f 93       	push	r25
    1c10:	8f 93       	push	r24
    1c12:	1f 93       	push	r17
    1c14:	0f 93       	push	r16
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	8f 93       	push	r24
    1c1a:	8b e0       	ldi	r24, 0x0B	; 11
    1c1c:	95 e0       	ldi	r25, 0x05	; 5
    1c1e:	9f 93       	push	r25
    1c20:	8f 93       	push	r24
    1c22:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
_ZN6Config15getFormattedStrEh.constprop.86():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:175
  case mnuCmdReset:
    strbuf[0] = 0;
    break;
  
  case mnuCmdVoiceDemo:
    fmt(strbuf, 2, gods[voiceNo], " >");
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	16 c0       	rjmp	.+44     	; 0x1c5e <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x14c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:95
  // case mnuCmdSetYear:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    1c32:	a0 91 09 05 	lds	r26, 0x0509	; 0x800509 <StHr>
    1c36:	b0 91 0a 05 	lds	r27, 0x050A	; 0x80050a <StHr+0x1>
    1c3a:	2c e3       	ldi	r18, 0x3C	; 60
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <__usmulhisi3>
    1c42:	00 91 07 05 	lds	r16, 0x0507	; 0x800507 <StMin>
    1c46:	10 91 08 05 	lds	r17, 0x0508	; 0x800508 <StMin+0x1>
    1c4a:	01 2e       	mov	r0, r17
    1c4c:	00 0c       	add	r0, r0
    1c4e:	22 0b       	sbc	r18, r18
    1c50:	33 0b       	sbc	r19, r19
    1c52:	60 0f       	add	r22, r16
    1c54:	71 1f       	adc	r23, r17
    1c56:	82 1f       	adc	r24, r18
    1c58:	93 1f       	adc	r25, r19
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:153
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1c5a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <toTimeStr(char*, long, char) [clone .constprop.88]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:186
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1c5e:	8b e0       	ldi	r24, 0x0B	; 11
    1c60:	95 e0       	ldi	r25, 0x05	; 5
    1c62:	65 96       	adiw	r28, 0x15	; 21
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:98
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    1c80:	60 91 c2 04 	lds	r22, 0x04C2	; 0x8004c2 <config+0xf>
    1c84:	70 91 c3 04 	lds	r23, 0x04C3	; 0x8004c3 <config+0x10>
    1c88:	6d 30       	cpi	r22, 0x0D	; 13
    1c8a:	71 05       	cpc	r23, r1
    1c8c:	14 f0       	brlt	.+4      	; 0x1c92 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x180>
    1c8e:	6c 50       	subi	r22, 0x0C	; 12
    1c90:	71 09       	sbc	r23, r1
    1c92:	ce 01       	movw	r24, r28
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:99
    lpad(h, intbuf, '0', 2);
    1c9a:	8e 01       	movw	r16, r28
    1c9c:	07 5f       	subi	r16, 0xF7	; 247
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	42 e0       	ldi	r20, 0x02	; 2
    1ca2:	be 01       	movw	r22, r28
    1ca4:	6f 5f       	subi	r22, 0xFF	; 255
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	c8 01       	movw	r24, r16
    1caa:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:100
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1cae:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <config+0xf>
    1cb2:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <config+0x10>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:105
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1cb6:	0c 97       	sbiw	r24, 0x0c	; 12
    1cb8:	5c f5       	brge	.+86     	; 0x1d10 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x1fe>
    1cba:	8f e9       	ldi	r24, 0x9F	; 159
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	9f 93       	push	r25
    1cc0:	8f 93       	push	r24
    1cc2:	1f 93       	push	r17
    1cc4:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:175
  case mnuCmdReset:
    strbuf[0] = 0;
    break;
  
  case mnuCmdVoiceDemo:
    fmt(strbuf, 2, gods[voiceNo], " >");
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	8f 93       	push	r24
    1cca:	8b e0       	ldi	r24, 0x0B	; 11
    1ccc:	95 e0       	ldi	r25, 0x05	; 5
    1cce:	9f 93       	push	r25
    1cd0:	8f 93       	push	r24
    1cd2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
    1cd6:	a7 cf       	rjmp	.-178    	; 0x1c26 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x114>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:103
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    1cd8:	60 91 c4 04 	lds	r22, 0x04C4	; 0x8004c4 <config+0x11>
    1cdc:	70 91 c5 04 	lds	r23, 0x04C5	; 0x8004c5 <config+0x12>
    1ce0:	6d 30       	cpi	r22, 0x0D	; 13
    1ce2:	71 05       	cpc	r23, r1
    1ce4:	14 f0       	brlt	.+4      	; 0x1cea <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x1d8>
    1ce6:	6c 50       	subi	r22, 0x0C	; 12
    1ce8:	71 09       	sbc	r23, r1
    1cea:	ce 01       	movw	r24, r28
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:104
    lpad(h, intbuf, '0', 2);
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	07 5f       	subi	r16, 0xF7	; 247
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	42 e0       	ldi	r20, 0x02	; 2
    1cfa:	be 01       	movw	r22, r28
    1cfc:	6f 5f       	subi	r22, 0xFF	; 255
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:105
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1d06:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <config+0x11>
    1d0a:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <config+0x12>
    1d0e:	d3 cf       	rjmp	.-90     	; 0x1cb6 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x1a4>
    1d10:	88 e9       	ldi	r24, 0x98	; 152
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	d4 cf       	rjmp	.-88     	; 0x1cbe <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x1ac>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:108
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    1d16:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <config+0x1c>
    1d1a:	70 91 d0 04 	lds	r23, 0x04D0	; 0x8004d0 <config+0x1d>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:140
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
    1d26:	2a eb       	ldi	r18, 0xBA	; 186
    1d28:	32 e0       	ldi	r19, 0x02	; 2
    1d2a:	0a c0       	rjmp	.+20     	; 0x1d40 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x22e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:111
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    break;
  case mnuCmdBakLitDur:
    fmt(strbuf, 2, inttostr(intbuf, backLightDur), " Seconds");
    1d2c:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <config+0x13>
    1d30:	70 91 c7 04 	lds	r23, 0x04C7	; 0x8004c7 <config+0x14>
    1d34:	ce 01       	movw	r24, r28
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
    1d3c:	2a ea       	ldi	r18, 0xAA	; 170
    1d3e:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:140
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1d40:	3f 93       	push	r19
    1d42:	2f 93       	push	r18
    1d44:	40 c0       	rjmp	.+128    	; 0x1dc6 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2b4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:114
    break;
  case mnuCmdBakLitDur:
    fmt(strbuf, 2, inttostr(intbuf, backLightDur), " Seconds");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    1d46:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <config+0x15>
    1d4a:	70 91 c9 04 	lds	r23, 0x04C9	; 0x8004c9 <config+0x16>
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:122
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1d56:	9f 93       	push	r25
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:178
  
  case mnuCmdVoiceDemo:
    fmt(strbuf, 2, gods[voiceNo], " >");
    break;
  case mnuCmdSongsDemo:
    fmt(strbuf, 1, demoSong[demoSongNo]);
    1d58:	8f 93       	push	r24
    1d5a:	76 c0       	rjmp	.+236    	; 0x1e48 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x336>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:117
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    1d5c:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <demoTime>
    1d60:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <demoTime+0x1>
    1d64:	b8 01       	movw	r22, r16
    1d66:	0d 30       	cpi	r16, 0x0D	; 13
    1d68:	11 05       	cpc	r17, r1
    1d6a:	14 f0       	brlt	.+4      	; 0x1d70 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x25e>
    1d6c:	6c 50       	subi	r22, 0x0C	; 12
    1d6e:	71 09       	sbc	r23, r1
    1d70:	ce 01       	movw	r24, r28
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:118
    lpad(h, intbuf, '0', 2);
    1d78:	7e 01       	movw	r14, r28
    1d7a:	99 e0       	ldi	r25, 0x09	; 9
    1d7c:	e9 0e       	add	r14, r25
    1d7e:	f1 1c       	adc	r15, r1
    1d80:	42 e0       	ldi	r20, 0x02	; 2
    1d82:	be 01       	movw	r22, r28
    1d84:	6f 5f       	subi	r22, 0xFF	; 255
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	c7 01       	movw	r24, r14
    1d8a:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:119
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1d8e:	8f e9       	ldi	r24, 0x9F	; 159
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	0c 30       	cpi	r16, 0x0C	; 12
    1d94:	11 05       	cpc	r17, r1
    1d96:	14 f0       	brlt	.+4      	; 0x1d9c <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x28a>
    1d98:	88 e9       	ldi	r24, 0x98	; 152
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	9f 93       	push	r25
    1d9e:	8f 93       	push	r24
    1da0:	ff 92       	push	r15
    1da2:	ef 92       	push	r14
    1da4:	90 cf       	rjmp	.-224    	; 0x1cc6 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x1b4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:122
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1da6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <config+0x19>
    1daa:	88 23       	and	r24, r24
    1dac:	19 f0       	breq	.+6      	; 0x1db4 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2a2>
    1dae:	80 ee       	ldi	r24, 0xE0	; 224
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	d1 cf       	rjmp	.-94     	; 0x1d56 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x244>
    1db4:	86 ea       	ldi	r24, 0xA6	; 166
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	ce cf       	rjmp	.-100    	; 0x1d56 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x244>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:125
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1dba:	83 eb       	ldi	r24, 0xB3	; 179
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	9f 93       	push	r25
    1dc0:	8f 93       	push	r24
    1dc2:	8b eb       	ldi	r24, 0xBB	; 187
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:140
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1dc6:	9f 93       	push	r25
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:175
  case mnuCmdReset:
    strbuf[0] = 0;
    break;
  
  case mnuCmdVoiceDemo:
    fmt(strbuf, 2, gods[voiceNo], " >");
    1dc8:	8f 93       	push	r24
    1dca:	7d cf       	rjmp	.-262    	; 0x1cc6 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x1b4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:128
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1dcc:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <config+0x26>
    1dd0:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <config+0x27>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:131
    break;
  case mnuCmdMorSong2Time:
    fmt(strbuf, 2, MorSong2Time == 3 ? "OFF" : inttostr(intbuf, MorSong2Time), MorSong2Time == 3 ? "" : " AM");
    1dd4:	63 30       	cpi	r22, 0x03	; 3
    1dd6:	71 05       	cpc	r23, r1
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2ca>
    1dda:	a7 c0       	rjmp	.+334    	; 0x1f2a <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x418>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:137
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    1ddc:	2d ec       	ldi	r18, 0xCD	; 205
    1dde:	31 e0       	ldi	r19, 0x01	; 1
    1de0:	86 ea       	ldi	r24, 0xA6	; 166
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	ad cf       	rjmp	.-166    	; 0x1d40 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x22e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:131
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdMorSong2Time:
    fmt(strbuf, 2, MorSong2Time == 3 ? "OFF" : inttostr(intbuf, MorSong2Time), MorSong2Time == 3 ? "" : " AM");
    1de6:	60 91 db 04 	lds	r22, 0x04DB	; 0x8004db <config+0x28>
    1dea:	70 91 dc 04 	lds	r23, 0x04DC	; 0x8004dc <config+0x29>
    1dee:	f2 cf       	rjmp	.-28     	; 0x1dd4 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2c2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:134
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1df0:	60 91 dd 04 	lds	r22, 0x04DD	; 0x8004dd <config+0x2a>
    1df4:	70 91 de 04 	lds	r23, 0x04DE	; 0x8004de <config+0x2b>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:137
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    1df8:	63 30       	cpi	r22, 0x03	; 3
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	79 f3       	breq	.-34     	; 0x1ddc <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2ca>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
    1e06:	2b e9       	ldi	r18, 0x9B	; 155
    1e08:	31 e0       	ldi	r19, 0x01	; 1
    1e0a:	9a cf       	rjmp	.-204    	; 0x1d40 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x22e>
    1e0c:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <config+0x2c>
    1e10:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <config+0x2d>
    1e14:	f1 cf       	rjmp	.-30     	; 0x1df8 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2e6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:140
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1e16:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <config+0x1e>
    1e1a:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <config+0x1f>
    1e1e:	7f cf       	rjmp	.-258    	; 0x1d1e <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x20c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:143
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1e20:	60 91 e1 04 	lds	r22, 0x04E1	; 0x8004e1 <config+0x2e>
    1e24:	70 91 e2 04 	lds	r23, 0x04E2	; 0x8004e2 <config+0x2f>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:148
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1e28:	ce 01       	movw	r24, r28
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:149
    lpad(h, intbuf, '0', 3);
    1e30:	8e 01       	movw	r16, r28
    1e32:	07 5f       	subi	r16, 0xF7	; 247
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	43 e0       	ldi	r20, 0x03	; 3
    1e38:	be 01       	movw	r22, r28
    1e3a:	6f 5f       	subi	r22, 0xFF	; 255
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:150
    fmt(strbuf, 1, h);
    1e44:	1f 93       	push	r17
    1e46:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:178
  
  case mnuCmdVoiceDemo:
    fmt(strbuf, 2, gods[voiceNo], " >");
    break;
  case mnuCmdSongsDemo:
    fmt(strbuf, 1, demoSong[demoSongNo]);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	8f 93       	push	r24
    1e4c:	8b e0       	ldi	r24, 0x0B	; 11
    1e4e:	95 e0       	ldi	r25, 0x05	; 5
    1e50:	9f 93       	push	r25
    1e52:	8f 93       	push	r24
    1e54:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	fd ce       	rjmp	.-518    	; 0x1c5e <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x14c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:148
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1e64:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <config+0x30>
    1e68:	70 91 e4 04 	lds	r23, 0x04E4	; 0x8004e4 <config+0x31>
    1e6c:	dd cf       	rjmp	.-70     	; 0x1e28 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x316>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:153
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1e6e:	60 91 e5 04 	lds	r22, 0x04E5	; 0x8004e5 <config+0x32>
    1e72:	70 91 e6 04 	lds	r23, 0x04E6	; 0x8004e6 <config+0x33>
    1e76:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <config+0x34>
    1e7a:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <config+0x35>
    1e7e:	ed ce       	rjmp	.-550    	; 0x1c5a <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x148>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:156
    break;
  case mnuCmdLt1OffTime:  
    toTimeStr(strbuf, Light1Off);
    1e80:	60 91 e9 04 	lds	r22, 0x04E9	; 0x8004e9 <config+0x36>
    1e84:	70 91 ea 04 	lds	r23, 0x04EA	; 0x8004ea <config+0x37>
    1e88:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <config+0x38>
    1e8c:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <config+0x39>
    1e90:	e4 ce       	rjmp	.-568    	; 0x1c5a <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x148>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:159
    break;
  case mnuCmdPlrMorOnTime:
    toTimeStr(strbuf, PlayerMorTime);
    1e92:	60 91 f5 04 	lds	r22, 0x04F5	; 0x8004f5 <config+0x42>
    1e96:	70 91 f6 04 	lds	r23, 0x04F6	; 0x8004f6 <config+0x43>
    1e9a:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <config+0x44>
    1e9e:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <config+0x45>
    1ea2:	db ce       	rjmp	.-586    	; 0x1c5a <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x148>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:162
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    1ea4:	60 91 f9 04 	lds	r22, 0x04F9	; 0x8004f9 <config+0x46>
    1ea8:	70 91 fa 04 	lds	r23, 0x04FA	; 0x8004fa <config+0x47>
    1eac:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <config+0x48>
    1eb0:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:168
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1eb4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <toDurStr(char*, long, char) [clone .constprop.89]>
    1eb8:	d2 ce       	rjmp	.-604    	; 0x1c5e <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x14c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:165
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    1eba:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <config+0x4a>
    1ebe:	70 91 fe 04 	lds	r23, 0x04FE	; 0x8004fe <config+0x4b>
    1ec2:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <config+0x4c>
    1ec6:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <config+0x4d>
    1eca:	c7 ce       	rjmp	.-626    	; 0x1c5a <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x148>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:168
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1ecc:	60 91 01 05 	lds	r22, 0x0501	; 0x800501 <config+0x4e>
    1ed0:	70 91 02 05 	lds	r23, 0x0502	; 0x800502 <config+0x4f>
    1ed4:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <config+0x50>
    1ed8:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <config+0x51>
    1edc:	eb cf       	rjmp	.-42     	; 0x1eb4 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x3a2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:171
    break;
  case mnuCmdReset:
    strbuf[0] = 0;
    1ede:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <strbuf>
    1ee2:	bd ce       	rjmp	.-646    	; 0x1c5e <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x14c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:175
    break;
  
  case mnuCmdVoiceDemo:
    fmt(strbuf, 2, gods[voiceNo], " >");
    1ee4:	88 eb       	ldi	r24, 0xB8	; 184
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	9f 93       	push	r25
    1eea:	8f 93       	push	r24
    1eec:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <voiceNo>
    1ef0:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <voiceNo+0x1>
    1ef4:	ee 0f       	add	r30, r30
    1ef6:	ff 1f       	adc	r31, r31
    1ef8:	e8 5a       	subi	r30, 0xA8	; 168
    1efa:	fe 4f       	sbci	r31, 0xFE	; 254
    1efc:	81 81       	ldd	r24, Z+1	; 0x01
    1efe:	8f 93       	push	r24
    1f00:	80 81       	ld	r24, Z
    1f02:	62 cf       	rjmp	.-316    	; 0x1dc8 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x2b6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:178
    break;
  case mnuCmdSongsDemo:
    fmt(strbuf, 1, demoSong[demoSongNo]);
    1f04:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <demoSongNo>
    1f08:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <demoSongNo+0x1>
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	e2 5c       	subi	r30, 0xC2	; 194
    1f12:	fe 4f       	sbci	r31, 0xFE	; 254
    1f14:	81 81       	ldd	r24, Z+1	; 0x01
    1f16:	8f 93       	push	r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	1e cf       	rjmp	.-452    	; 0x1d58 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x246>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:182
    break;

  default:
    strcpy(strbuf, NotImp);
    1f1c:	68 e3       	ldi	r22, 0x38	; 56
    1f1e:	71 e0       	ldi	r23, 0x01	; 1
    1f20:	8b e0       	ldi	r24, 0x0B	; 11
    1f22:	95 e0       	ldi	r25, 0x05	; 5
    1f24:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
    1f28:	9a ce       	rjmp	.-716    	; 0x1c5e <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x14c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:131
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdMorSong2Time:
    fmt(strbuf, 2, MorSong2Time == 3 ? "OFF" : inttostr(intbuf, MorSong2Time), MorSong2Time == 3 ? "" : " AM");
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
    1f32:	22 ea       	ldi	r18, 0xA2	; 162
    1f34:	31 e0       	ldi	r19, 0x01	; 1
    1f36:	04 cf       	rjmp	.-504    	; 0x1d40 <Config::getFormattedStr(unsigned char) [clone .constprop.86]+0x22e>

00001f38 <showTime()>:
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:674

void showTime()
{
    1f38:	6f 92       	push	r6
    1f3a:	7f 92       	push	r7
    1f3c:	9f 92       	push	r9
    1f3e:	af 92       	push	r10
    1f40:	bf 92       	push	r11
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	a3 97       	sbiw	r28, 0x23	; 35
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:678
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    1f62:	ce 01       	movw	r24, r28
    1f64:	09 96       	adiw	r24, 0x09	; 9
    1f66:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:538
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    1f6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f6c:	66 23       	and	r22, r22
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <showTime()+0x3a>
    1f70:	e4 c0       	rjmp	.+456    	; 0x213a <showTime()+0x202>
    1f72:	6c 30       	cpi	r22, 0x0C	; 12
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:540
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:541
    return hh - 12;
    1f78:	6c 50       	subi	r22, 0x0C	; 12
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:678
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:679
    lpad(h, intbuf, '0', 2);
    1f84:	8e 01       	movw	r16, r28
    1f86:	08 5e       	subi	r16, 0xE8	; 232
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	42 e0       	ldi	r20, 0x02	; 2
    1f8c:	be 01       	movw	r22, r28
    1f8e:	6f 5f       	subi	r22, 0xFF	; 255
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	c8 01       	movw	r24, r16
    1f94:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:680
    inttostr(intbuf, rtc.now().minute());
    1f98:	ce 01       	movw	r24, r28
    1f9a:	09 96       	adiw	r24, 0x09	; 9
    1f9c:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    1fa0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:681
    lpad(m, intbuf, '0', 2);
    1fac:	7e 01       	movw	r14, r28
    1fae:	2b e1       	ldi	r18, 0x1B	; 27
    1fb0:	e2 0e       	add	r14, r18
    1fb2:	f1 1c       	adc	r15, r1
    1fb4:	42 e0       	ldi	r20, 0x02	; 2
    1fb6:	be 01       	movw	r22, r28
    1fb8:	6f 5f       	subi	r22, 0xFF	; 255
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:682
    inttostr(intbuf, rtc.now().second());
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	09 96       	adiw	r24, 0x09	; 9
    1fc6:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    1fca:	6e 85       	ldd	r22, Y+14	; 0x0e
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	ce 01       	movw	r24, r28
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:683
    lpad(s, intbuf, '0', 2);
    1fd6:	6e 01       	movw	r12, r28
    1fd8:	3e e1       	ldi	r19, 0x1E	; 30
    1fda:	c3 0e       	add	r12, r19
    1fdc:	d1 1c       	adc	r13, r1
    1fde:	42 e0       	ldi	r20, 0x02	; 2
    1fe0:	be 01       	movw	r22, r28
    1fe2:	6f 5f       	subi	r22, 0xFF	; 255
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	c6 01       	movw	r24, r12
    1fe8:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:685

    lcd.setCursor(0, 0);
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:686
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	09 96       	adiw	r24, 0x09	; 9
    1ff8:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    1ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ffe:	8c 30       	cpi	r24, 0x0C	; 12
    2000:	08 f0       	brcs	.+2      	; 0x2004 <showTime()+0xcc>
    2002:	9d c0       	rjmp	.+314    	; 0x213e <showTime()+0x206>
    2004:	87 ec       	ldi	r24, 0xC7	; 199
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	df 92       	push	r13
    200e:	cf 92       	push	r12
    2010:	8e ec       	ldi	r24, 0xCE	; 206
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	9f 93       	push	r25
    2016:	8f 93       	push	r24
    2018:	ff 92       	push	r15
    201a:	ef 92       	push	r14
    201c:	9f 93       	push	r25
    201e:	8f 93       	push	r24
    2020:	1f 93       	push	r17
    2022:	0f 93       	push	r16
    2024:	8b ec       	ldi	r24, 0xCB	; 203
    2026:	e8 2e       	mov	r14, r24
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	f8 2e       	mov	r15, r24
    202c:	ff 92       	push	r15
    202e:	ef 92       	push	r14
    2030:	97 e0       	ldi	r25, 0x07	; 7
    2032:	99 2e       	mov	r9, r25
    2034:	9f 92       	push	r9
    2036:	0d e2       	ldi	r16, 0x2D	; 45
    2038:	15 e0       	ldi	r17, 0x05	; 5
    203a:	1f 93       	push	r17
    203c:	0f 93       	push	r16
    203e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
    2042:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:688

    inttostr(intbuf, rtc.now().day());
    2046:	ce 01       	movw	r24, r28
    2048:	09 96       	adiw	r24, 0x09	; 9
    204a:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	ce 01       	movw	r24, r28
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:689
    lpad(dat, intbuf, '0', 2);
    205a:	6e 01       	movw	r12, r28
    205c:	81 e2       	ldi	r24, 0x21	; 33
    205e:	c8 0e       	add	r12, r24
    2060:	d1 1c       	adc	r13, r1
    2062:	42 e0       	ldi	r20, 0x02	; 2
    2064:	be 01       	movw	r22, r28
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	c6 01       	movw	r24, r12
    206c:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:690
    inttostr(intbuf, rtc.now().year());
    2070:	ce 01       	movw	r24, r28
    2072:	09 96       	adiw	r24, 0x09	; 9
    2074:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    2078:	69 85       	ldd	r22, Y+9	; 0x09
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	60 53       	subi	r22, 0x30	; 48
    207e:	78 4f       	sbci	r23, 0xF8	; 248
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:690
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:691
    lpad(year, intbuf, '0', 4);
    2088:	3e 01       	movw	r6, r28
    208a:	2f e0       	ldi	r18, 0x0F	; 15
    208c:	62 0e       	add	r6, r18
    208e:	71 1c       	adc	r7, r1
    2090:	44 e0       	ldi	r20, 0x04	; 4
    2092:	be 01       	movw	r22, r28
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	c3 01       	movw	r24, r6
    209a:	0e 94 87 0b 	call	0x170e	; 0x170e <lpad(char*, char const*, char, unsigned char) [clone .constprop.90]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:692
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    209e:	ce 01       	movw	r24, r28
    20a0:	09 96       	adiw	r24, 0x09	; 9
    20a2:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    20a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a8:	81 50       	subi	r24, 0x01	; 1
    20aa:	99 0b       	sbc	r25, r25
    20ac:	26 e0       	ldi	r18, 0x06	; 6
    20ae:	28 9f       	mul	r18, r24
    20b0:	f0 01       	movw	r30, r0
    20b2:	29 9f       	mul	r18, r25
    20b4:	f0 0d       	add	r31, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	ea 59       	subi	r30, 0x9A	; 154
    20ba:	fa 4f       	sbci	r31, 0xFA	; 250
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	5e 01       	movw	r10, r28
    20c2:	34 e1       	ldi	r19, 0x14	; 20
    20c4:	a3 0e       	add	r10, r19
    20c6:	b1 1c       	adc	r11, r1
    20c8:	c5 01       	movw	r24, r10
    20ca:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:694

    lcd.setCursor(0, 1);
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:695
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
    20d6:	8a ec       	ldi	r24, 0xCA	; 202
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	9f 93       	push	r25
    20dc:	8f 93       	push	r24
    20de:	7f 92       	push	r7
    20e0:	6f 92       	push	r6
    20e2:	80 ed       	ldi	r24, 0xD0	; 208
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	9f 93       	push	r25
    20e8:	8f 93       	push	r24
    20ea:	bf 92       	push	r11
    20ec:	af 92       	push	r10
    20ee:	9f 93       	push	r25
    20f0:	8f 93       	push	r24
    20f2:	df 92       	push	r13
    20f4:	cf 92       	push	r12
    20f6:	ff 92       	push	r15
    20f8:	ef 92       	push	r14
    20fa:	9f 92       	push	r9
    20fc:	1f 93       	push	r17
    20fe:	0f 93       	push	r16
    2100:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:696
}
    2112:	a3 96       	adiw	r28, 0x23	; 35
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	bf 90       	pop	r11
    2130:	af 90       	pop	r10
    2132:	9f 90       	pop	r9
    2134:	7f 90       	pop	r7
    2136:	6f 90       	pop	r6
    2138:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:539
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    213a:	6c e0       	ldi	r22, 0x0C	; 12
    213c:	1e cf       	rjmp	.-452    	; 0x1f7a <showTime()+0x42>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:686
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(0, 0);
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    213e:	80 ec       	ldi	r24, 0xC0	; 192
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	62 cf       	rjmp	.-316    	; 0x2008 <showTime()+0xd0>

00002144 <PlayChant()>:
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1491
    myDFPlayer.stop();
}

int n = 1;
void PlayChant()
{
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1493
    // Serial.println(String(hr));
    switch (playSong)
    214c:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <playSong>
    2150:	e9 30       	cpi	r30, 0x09	; 9
    2152:	08 f5       	brcc	.+66     	; 0x2196 <PlayChant()+0x52>
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	e1 55       	subi	r30, 0x51	; 81
    2158:	ff 4e       	sbci	r31, 0xEF	; 239
    215a:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__tablejump2__>
    215e:	b8 10       	cpse	r11, r8
    2160:	d0 10       	cpse	r13, r0
    2162:	e2 10       	cpse	r14, r2
    2164:	f4 10       	cpse	r15, r4
    2166:	06 11       	cpse	r16, r6
    2168:	1b 11       	cpse	r17, r11
    216a:	50 11       	cpse	r21, r0
    216c:	96 11       	cpse	r25, r6
    216e:	a4 11       	cpse	r26, r4
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1496
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    2170:	84 e0       	ldi	r24, 0x04	; 4
    2172:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    2176:	89 2b       	or	r24, r25
    2178:	71 f0       	breq	.+28     	; 0x2196 <PlayChant()+0x52>
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	82 e1       	ldi	r24, 0x12	; 18
    2180:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1499
        {
            myDFPlayer.playMp3Folder(0);
            delay(1000);
    2184:	68 ee       	ldi	r22, 0xE8	; 232
    2186:	73 e0       	ldi	r23, 0x03	; 3
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1500
            playSong = Time;
    2190:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1587
    case Song_2:
        // if (digitalRead(STA_PIN))
        // {
        //     myDFPlayer.playFolder(6,random(1,config.Song2_Count));
        //     delay(1000);
            playSong = End_of_Song;
    2192:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <playSong>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1601
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    2196:	ff 90       	pop	r15
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1504
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    21a0:	84 e0       	ldi	r24, 0x04	; 4
    21a2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    21a6:	89 2b       	or	r24, r25
    21a8:	b1 f3       	breq	.-20     	; 0x2196 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1506
        {
            myDFPlayer.playFolder(1, bell.hour());
    21aa:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <bell+0x3>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1507
            delay(1000);
    21b4:	68 ee       	ldi	r22, 0xE8	; 232
    21b6:	73 e0       	ldi	r23, 0x03	; 3
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1508
            playSong = English_Month;
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	e7 cf       	rjmp	.-50     	; 0x2192 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1512
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    21c4:	84 e0       	ldi	r24, 0x04	; 4
    21c6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    21ca:	89 2b       	or	r24, r25
    21cc:	21 f3       	breq	.-56     	; 0x2196 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1514
        {
            myDFPlayer.playFolder(47, bell.month());
    21ce:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <bell+0x1>
    21d2:	8f e2       	ldi	r24, 0x2F	; 47
    21d4:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1515
            delay(1000);
    21d8:	68 ee       	ldi	r22, 0xE8	; 232
    21da:	73 e0       	ldi	r23, 0x03	; 3
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1516
            playSong = English_Date;
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	d5 cf       	rjmp	.-86     	; 0x2192 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1520
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    21e8:	84 e0       	ldi	r24, 0x04	; 4
    21ea:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    21ee:	89 2b       	or	r24, r25
    21f0:	91 f2       	breq	.-92     	; 0x2196 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1522
        {
            myDFPlayer.playFolder(48, bell.day());
    21f2:	60 91 b0 05 	lds	r22, 0x05B0	; 0x8005b0 <bell+0x2>
    21f6:	80 e3       	ldi	r24, 0x30	; 48
    21f8:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1523
            delay(1000);
    21fc:	68 ee       	ldi	r22, 0xE8	; 232
    21fe:	73 e0       	ldi	r23, 0x03	; 3
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1524
            playSong = Day_of_Week;
    2208:	84 e0       	ldi	r24, 0x04	; 4
    220a:	c3 cf       	rjmp	.-122    	; 0x2192 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1528
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    220c:	84 e0       	ldi	r24, 0x04	; 4
    220e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    2212:	89 2b       	or	r24, r25
    2214:	09 f4       	brne	.+2      	; 0x2218 <PlayChant()+0xd4>
    2216:	bf cf       	rjmp	.-130    	; 0x2196 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1530
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    2218:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DateTime::dayOfTheWeek() const [clone .constprop.14]>
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	68 0f       	add	r22, r24
    2220:	81 e3       	ldi	r24, 0x31	; 49
    2222:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1531
            delay(1000);
    2226:	68 ee       	ldi	r22, 0xE8	; 232
    2228:	73 e0       	ldi	r23, 0x03	; 3
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1532
            playSong = Tamil_Date;
    2232:	85 e0       	ldi	r24, 0x05	; 5
    2234:	ae cf       	rjmp	.-164    	; 0x2192 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1536
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    2236:	84 e0       	ldi	r24, 0x04	; 4
    2238:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    223c:	89 2b       	or	r24, r25
    223e:	09 f4       	brne	.+2      	; 0x2242 <PlayChant()+0xfe>
    2240:	aa cf       	rjmp	.-172    	; 0x2196 <PlayChant()+0x52>
    2242:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <bell+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1538
        {
            if (bell.hour() == 6 || bell.hour() == 8 || bell.hour() == 10)
    2246:	86 30       	cpi	r24, 0x06	; 6
    2248:	19 f0       	breq	.+6      	; 0x2250 <PlayChant()+0x10c>
    224a:	8d 7f       	andi	r24, 0xFD	; 253
    224c:	88 30       	cpi	r24, 0x08	; 8
    224e:	c9 f4       	brne	.+50     	; 0x2282 <PlayChant()+0x13e>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    2250:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <bell>
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	80 53       	subi	r24, 0x30	; 48
    2258:	98 4f       	sbci	r25, 0xF8	; 248
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1540
            {
                if (bell.year() == config.DataYear)
    225a:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <config+0x22>
    225e:	30 91 d6 04 	lds	r19, 0x04D6	; 0x8004d6 <config+0x23>
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	79 f4       	brne	.+30     	; 0x2286 <PlayChant()+0x142>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1542
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    2268:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <bell+0x1>
    226c:	60 91 b0 05 	lds	r22, 0x05B0	; 0x8005b0 <bell+0x2>
    2270:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1547
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    2272:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1548
                    delay(1000);
    2276:	68 ee       	ldi	r22, 0xE8	; 232
    2278:	73 e0       	ldi	r23, 0x03	; 3
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1554
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    2282:	86 e0       	ldi	r24, 0x06	; 6
    2284:	86 cf       	rjmp	.-244    	; 0x2192 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1545
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    2286:	21 50       	subi	r18, 0x01	; 1
    2288:	31 09       	sbc	r19, r1
    228a:	28 17       	cp	r18, r24
    228c:	39 07       	cpc	r19, r25
    228e:	c9 f7       	brne	.-14     	; 0x2282 <PlayChant()+0x13e>
    2290:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <bell+0x1>
    2294:	8c 30       	cpi	r24, 0x0C	; 12
    2296:	a9 f7       	brne	.-22     	; 0x2282 <PlayChant()+0x13e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1547
                {
                    myDFPlayer.playFolder(50, bell.day());
    2298:	60 91 b0 05 	lds	r22, 0x05B0	; 0x8005b0 <bell+0x2>
    229c:	82 e3       	ldi	r24, 0x32	; 50
    229e:	e9 cf       	rjmp	.-46     	; 0x2272 <PlayChant()+0x12e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1560
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    22a0:	84 e0       	ldi	r24, 0x04	; 4
    22a2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    22a6:	89 2b       	or	r24, r25
    22a8:	09 f4       	brne	.+2      	; 0x22ac <PlayChant()+0x168>
    22aa:	75 cf       	rjmp	.-278    	; 0x2196 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1562
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    22ac:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <config+0x26>
    22b0:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <config+0x27>
    22b4:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <bell+0x3>
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	28 17       	cp	r18, r24
    22bc:	39 07       	cpc	r19, r25
    22be:	19 f4       	brne	.+6      	; 0x22c6 <PlayChant()+0x182>
    22c0:	23 30       	cpi	r18, 0x03	; 3
    22c2:	31 05       	cpc	r19, r1
    22c4:	a9 f5       	brne	.+106    	; 0x2330 <PlayChant()+0x1ec>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1568
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    22c6:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <config+0x2a>
    22ca:	30 91 de 04 	lds	r19, 0x04DE	; 0x8004de <config+0x2b>
    22ce:	a9 01       	movw	r20, r18
    22d0:	44 5f       	subi	r20, 0xF4	; 244
    22d2:	5f 4f       	sbci	r21, 0xFF	; 255
    22d4:	84 17       	cp	r24, r20
    22d6:	95 07       	cpc	r25, r21
    22d8:	89 f1       	breq	.+98     	; 0x233c <PlayChant()+0x1f8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1576
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
    22da:	c0 90 cf 04 	lds	r12, 0x04CF	; 0x8004cf <config+0x1c>
    22de:	d0 90 d0 04 	lds	r13, 0x04D0	; 0x8004d0 <config+0x1d>
    22e2:	0d 2c       	mov	r0, r13
    22e4:	00 0c       	add	r0, r0
    22e6:	ee 08       	sbc	r14, r14
    22e8:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	c8 16       	cp	r12, r24
    22f6:	d1 04       	cpc	r13, r1
    22f8:	e1 04       	cpc	r14, r1
    22fa:	f1 04       	cpc	r15, r1
    22fc:	74 f0       	brlt	.+28     	; 0x231a <PlayChant()+0x1d6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    22fe:	0e 94 de 2b 	call	0x57bc	; 0x57bc <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    2302:	a7 01       	movw	r20, r14
    2304:	96 01       	movw	r18, r12
    2306:	21 50       	subi	r18, 0x01	; 1
    2308:	31 09       	sbc	r19, r1
    230a:	41 09       	sbc	r20, r1
    230c:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    230e:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2312:	6f 5f       	subi	r22, 0xFF	; 255
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	8f 4f       	sbci	r24, 0xFF	; 255
    2318:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
    231a:	82 e1       	ldi	r24, 0x12	; 18
    231c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1571
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
                delay(1000);
    2320:	68 ee       	ldi	r22, 0xE8	; 232
    2322:	73 e0       	ldi	r23, 0x03	; 3
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1587
    case Song_2:
        // if (digitalRead(STA_PIN))
        // {
        //     myDFPlayer.playFolder(6,random(1,config.Song2_Count));
        //     delay(1000);
            playSong = End_of_Song;
    232c:	88 e0       	ldi	r24, 0x08	; 8
    232e:	31 cf       	rjmp	.-414    	; 0x2192 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1564
    case Song_1:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    2330:	60 91 e1 04 	lds	r22, 0x04E1	; 0x8004e1 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1570
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	0e 94 00 06 	call	0xc00	; 0xc00 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.21]>
    233a:	f2 cf       	rjmp	.-28     	; 0x2320 <PlayChant()+0x1dc>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1568
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    233c:	23 30       	cpi	r18, 0x03	; 3
    233e:	31 05       	cpc	r19, r1
    2340:	61 f2       	breq	.-104    	; 0x22da <PlayChant()+0x196>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1570
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    2342:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <config+0x30>
    2346:	f6 cf       	rjmp	.-20     	; 0x2334 <PlayChant()+0x1f0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1591
        //     delay(1000);
            playSong = End_of_Song;
        // }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    234e:	89 2b       	or	r24, r25
    2350:	09 f4       	brne	.+2      	; 0x2354 <PlayChant()+0x210>
    2352:	21 cf       	rjmp	.-446    	; 0x2196 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1593
        {
            playSong = Starting_Song;
    2354:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <playSong>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1594
            lcd.clear();
    2358:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1595
            appMode = APP_NORMAL_MODE;
    235c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1596
            timrLCD = millis();
    2360:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2364:	60 93 35 04 	sts	0x0435, r22	; 0x800435 <timrLCD>
    2368:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <timrLCD+0x1>
    236c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <timrLCD+0x2>
    2370:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1597
            digitalWrite(AMP, LOW);
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1601
        }
        break;
    }
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	df 90       	pop	r13
    237e:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1597
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    2380:	0c 94 8a 03 	jmp	0x714	; 0x714 <digitalWrite>

00002384 <refreshMenuDisplay(unsigned char)>:
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1432
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	61 97       	sbiw	r28, 0x11	; 17
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1435
    char nameBuf[LCD_COLS + 1];
    byte cmdId;
    cmdId = Menu1.getCurrentItemCmdId();
    239a:	0e 94 c8 02 	call	0x590	; 0x590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    239e:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1436
    lcd.setCursor(0, 0);
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1437
    if (Menu1.currentItemHasChildren())
    23a8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <MenuManager::currentItemHasChildren() [clone .constprop.95]>
    23ac:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <Menu1+0x6>
    23b0:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <Menu1+0x3>
    23b4:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <Menu1+0x4>
    23b8:	88 23       	and	r24, r24
    23ba:	49 f1       	breq	.+82     	; 0x240e <refreshMenuDisplay(unsigned char)+0x8a>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    23bc:	86 e0       	ldi	r24, 0x06	; 6
    23be:	98 9f       	mul	r25, r24
    23c0:	e0 0d       	add	r30, r0
    23c2:	f1 1d       	adc	r31, r1
    23c4:	11 24       	eor	r1, r1
    23c6:	31 96       	adiw	r30, 0x01	; 1
    23c8:	65 91       	lpm	r22, Z+
    23ca:	74 91       	lpm	r23, Z
    23cc:	ce 01       	movw	r24, r28
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1439
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    23d4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1440
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    23d8:	8e e7       	ldi	r24, 0x7E	; 126
    23da:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1441
        lcd.print(strbuf);
    23de:	8d e2       	ldi	r24, 0x2D	; 45
    23e0:	95 e0       	ldi	r25, 0x05	; 5
    23e2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1442
        if (cmdId == mnuCmdLt1OnTime ||
    23e6:	88 ee       	ldi	r24, 0xE8	; 232
    23e8:	81 0f       	add	r24, r17
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	20 f0       	brcs	.+8      	; 0x23f6 <refreshMenuDisplay(unsigned char)+0x72>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1443
            cmdId == mnuCmdLt1OffTime ||
    23ee:	1b 31       	cpi	r17, 0x1B	; 27
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <refreshMenuDisplay(unsigned char)+0x72>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1444
            cmdId == mnuCmdPlrMorOnTime ||
    23f2:	1d 31       	cpi	r17, 0x1D	; 29
    23f4:	31 f5       	brne	.+76     	; 0x2442 <refreshMenuDisplay(unsigned char)+0xbe>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1470
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1471
            lcd.print(" ");
    23fe:	8c ec       	ldi	r24, 0xCC	; 204
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1472
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    2406:	81 2f       	mov	r24, r17
    2408:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Config::getFormattedStr(unsigned char) [clone .constprop.86]>
    240c:	20 c0       	rjmp	.+64     	; 0x244e <refreshMenuDisplay(unsigned char)+0xca>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:53
    240e:	86 e0       	ldi	r24, 0x06	; 6
    2410:	98 9f       	mul	r25, r24
    2412:	e0 0d       	add	r30, r0
    2414:	f1 1d       	adc	r31, r1
    2416:	11 24       	eor	r1, r1
    2418:	31 96       	adiw	r30, 0x01	; 1
    241a:	65 91       	lpm	r22, Z+
    241c:	74 91       	lpm	r23, Z
    241e:	ce 01       	movw	r24, r28
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1459
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
        }
    }
    else
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    2426:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1460
        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    242a:	0e 94 c8 02 	call	0x590	; 0x590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    242e:	18 2f       	mov	r17, r24
    2430:	81 11       	cpse	r24, r1
    2432:	1b c0       	rjmp	.+54     	; 0x246a <refreshMenuDisplay(unsigned char)+0xe6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1462
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    2434:	8f e7       	ldi	r24, 0x7F	; 127
    2436:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1463
            lcd.print(strbuf);
    243a:	8d e2       	ldi	r24, 0x2D	; 45
    243c:	95 e0       	ldi	r25, 0x05	; 5
    243e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1464
            lcd.setCursor(0, 1);
    2442:	61 e0       	ldi	r22, 0x01	; 1
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1465
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    244a:	88 e2       	ldi	r24, 0x28	; 40
    244c:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1472
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    244e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    2452:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1475
        }
    }
}
    2456:	61 96       	adiw	r28, 0x11	; 17
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1469
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
    246a:	8d e2       	ldi	r24, 0x2D	; 45
    246c:	95 e0       	ldi	r25, 0x05	; 5
    246e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
    2472:	c1 cf       	rjmp	.-126    	; 0x23f6 <refreshMenuDisplay(unsigned char)+0x72>

00002474 <loop>:
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:177
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));
    
}

void loop()
{
    2474:	4f 92       	push	r4
    2476:	5f 92       	push	r5
    2478:	6f 92       	push	r6
    247a:	7f 92       	push	r7
    247c:	8f 92       	push	r8
    247e:	9f 92       	push	r9
    2480:	af 92       	push	r10
    2482:	bf 92       	push	r11
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	ec 97       	sbiw	r28, 0x3c	; 60
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:238

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    24a4:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    24a8:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <buttonSampleTime>
    24ac:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <buttonSampleTime+0x1>
    24b0:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <buttonSampleTime+0x2>
    24b4:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <buttonSampleTime+0x3>
    24b8:	60 1b       	sub	r22, r16
    24ba:	71 0b       	sbc	r23, r17
    24bc:	82 0b       	sbc	r24, r18
    24be:	93 0b       	sbc	r25, r19
    24c0:	64 31       	cpi	r22, 0x14	; 20
    24c2:	71 05       	cpc	r23, r1
    24c4:	81 05       	cpc	r24, r1
    24c6:	91 05       	cpc	r25, r1
    24c8:	08 f4       	brcc	.+2      	; 0x24cc <loop+0x58>
    24ca:	a0 c0       	rjmp	.+320    	; 0x260c <loop+0x198>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:240
  {
    buttonSampleTime = millis();
    24cc:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    24d0:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <buttonSampleTime>
    24d4:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <buttonSampleTime+0x1>
    24d8:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <buttonSampleTime+0x2>
    24dc:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    24e0:	85 e0       	ldi	r24, 0x05	; 5
    24e2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    24e6:	8c 01       	movw	r16, r24
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:247
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    24e8:	86 e0       	ldi	r24, 0x06	; 6
    24ea:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
loop():
    24ee:	77 24       	eor	r7, r7
    24f0:	73 94       	inc	r7
buttonHandlerCycle():
    24f2:	89 2b       	or	r24, r25
    24f4:	31 f0       	breq	.+12     	; 0x2502 <loop+0x8e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	01 2b       	or	r16, r17
    24fa:	09 f4       	brne	.+2      	; 0x24fe <loop+0x8a>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	78 2e       	mov	r7, r24
    2500:	71 94       	neg	r7
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:248
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    2502:	87 e0       	ldi	r24, 0x07	; 7
    2504:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    2508:	89 2b       	or	r24, r25
    250a:	11 f4       	brne	.+4      	; 0x2510 <loop+0x9c>
loop():
    250c:	42 e0       	ldi	r20, 0x02	; 2
    250e:	74 2e       	mov	r7, r20
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:249
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    2510:	88 e0       	ldi	r24, 0x08	; 8
    2512:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    2516:	89 2b       	or	r24, r25
    2518:	11 f4       	brne	.+4      	; 0x251e <loop+0xaa>
loop():
    251a:	33 e0       	ldi	r19, 0x03	; 3
    251c:	73 2e       	mov	r7, r19
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:250
    if (digitalRead(MODE_BUT) == LOW) curBut = 4;
    251e:	80 e1       	ldi	r24, 0x10	; 16
    2520:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    2524:	89 2b       	or	r24, r25
    2526:	11 f4       	brne	.+4      	; 0x252c <loop+0xb8>
loop():
    2528:	24 e0       	ldi	r18, 0x04	; 4
    252a:	72 2e       	mov	r7, r18
    252c:	0c e4       	ldi	r16, 0x4C	; 76
    252e:	e0 2e       	mov	r14, r16
    2530:	03 e0       	ldi	r16, 0x03	; 3
    2532:	f0 2e       	mov	r15, r16
    2534:	00 e6       	ldi	r16, 0x60	; 96
    2536:	13 e0       	ldi	r17, 0x03	; 3
    2538:	84 e7       	ldi	r24, 0x74	; 116
    253a:	88 2e       	mov	r8, r24
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	98 2e       	mov	r9, r24
    2540:	93 e2       	ldi	r25, 0x23	; 35
    2542:	a9 2e       	mov	r10, r25
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	b9 2e       	mov	r11, r25
    2548:	64 01       	movw	r12, r8
    254a:	66 24       	eor	r6, r6
    254c:	63 94       	inc	r6
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:254

    

    byte buttonIdentified = 0;
    254e:	41 2c       	mov	r4, r1
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:259
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    2550:	41 10       	cpse	r4, r1
    2552:	2d c1       	rjmp	.+602    	; 0x27ae <loop+0x33a>
    2554:	f5 01       	movw	r30, r10
    2556:	80 81       	ld	r24, Z
    2558:	87 11       	cpse	r24, r7
    255a:	29 c1       	rjmp	.+594    	; 0x27ae <loop+0x33a>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:262
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    255c:	44 24       	eor	r4, r4
    255e:	43 94       	inc	r4
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:261
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    2560:	55 24       	eor	r5, r5
    2562:	53 94       	inc	r5
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:271
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    2564:	f6 01       	movw	r30, r12
    2566:	81 91       	ld	r24, Z+
    2568:	6f 01       	movw	r12, r30
    256a:	85 15       	cp	r24, r5
    256c:	a9 f0       	breq	.+42     	; 0x2598 <loop+0x124>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:274
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    256e:	55 20       	and	r5, r5
    2570:	09 f4       	brne	.+2      	; 0x2574 <loop+0x100>
    2572:	1f c1       	rjmp	.+574    	; 0x27b2 <loop+0x33e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:276
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    2574:	86 2d       	mov	r24, r6
    2576:	0e 94 53 08 	call	0x10a6	; 0x10a6 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:277
          buttonPressTime[i] = millis();
    257a:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    257e:	f8 01       	movw	r30, r16
    2580:	60 83       	st	Z, r22
    2582:	71 83       	std	Z+1, r23	; 0x01
    2584:	82 83       	std	Z+2, r24	; 0x02
    2586:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:278
          buttonHoldTime[i] = buttonPressTime[i];
    2588:	f7 01       	movw	r30, r14
    258a:	60 83       	st	Z, r22
    258c:	71 83       	std	Z+1, r23	; 0x01
    258e:	82 83       	std	Z+2, r24	; 0x02
    2590:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:292
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    2592:	f6 01       	movw	r30, r12
    2594:	31 97       	sbiw	r30, 0x01	; 1
    2596:	50 82       	st	Z, r5
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:296
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    2598:	55 20       	and	r5, r5
    259a:	61 f1       	breq	.+88     	; 0x25f4 <loop+0x180>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:298
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    259c:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    25a0:	f8 01       	movw	r30, r16
    25a2:	20 81       	ld	r18, Z
    25a4:	31 81       	ldd	r19, Z+1	; 0x01
    25a6:	42 81       	ldd	r20, Z+2	; 0x02
    25a8:	53 81       	ldd	r21, Z+3	; 0x03
    25aa:	62 1b       	sub	r22, r18
    25ac:	73 0b       	sbc	r23, r19
    25ae:	84 0b       	sbc	r24, r20
    25b0:	95 0b       	sbc	r25, r21
    25b2:	61 3d       	cpi	r22, 0xD1	; 209
    25b4:	77 40       	sbci	r23, 0x07	; 7
    25b6:	81 05       	cpc	r24, r1
    25b8:	91 05       	cpc	r25, r1
    25ba:	e0 f0       	brcs	.+56     	; 0x25f4 <loop+0x180>
    25bc:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    25c0:	f7 01       	movw	r30, r14
    25c2:	20 81       	ld	r18, Z
    25c4:	31 81       	ldd	r19, Z+1	; 0x01
    25c6:	42 81       	ldd	r20, Z+2	; 0x02
    25c8:	53 81       	ldd	r21, Z+3	; 0x03
    25ca:	62 1b       	sub	r22, r18
    25cc:	73 0b       	sbc	r23, r19
    25ce:	84 0b       	sbc	r24, r20
    25d0:	95 0b       	sbc	r25, r21
    25d2:	6b 3f       	cpi	r22, 0xFB	; 251
    25d4:	71 05       	cpc	r23, r1
    25d6:	81 05       	cpc	r24, r1
    25d8:	91 05       	cpc	r25, r1
    25da:	60 f0       	brcs	.+24     	; 0x25f4 <loop+0x180>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:300
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    25dc:	8c 2d       	mov	r24, r12
    25de:	88 19       	sub	r24, r8
    25e0:	80 68       	ori	r24, 0x80	; 128
    25e2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:301
          buttonHoldTime[i] = millis();
    25e6:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    25ea:	f7 01       	movw	r30, r14
    25ec:	60 83       	st	Z, r22
    25ee:	71 83       	std	Z+1, r23	; 0x01
    25f0:	82 83       	std	Z+2, r24	; 0x02
    25f2:	93 83       	std	Z+3, r25	; 0x03
    25f4:	63 94       	inc	r6
    25f6:	f4 e0       	ldi	r31, 0x04	; 4
    25f8:	ef 0e       	add	r14, r31
    25fa:	f1 1c       	adc	r15, r1
    25fc:	0c 5f       	subi	r16, 0xFC	; 252
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	2f ef       	ldi	r18, 0xFF	; 255
    2602:	a2 1a       	sub	r10, r18
    2604:	b2 0a       	sbc	r11, r18
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:256

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    2606:	66 e0       	ldi	r22, 0x06	; 6
    2608:	66 12       	cpse	r6, r22
    260a:	a2 cf       	rjmp	.-188    	; 0x2550 <loop+0xdc>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:220
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    260c:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <buttonBufferCount>
    2610:	19 16       	cp	r1, r25
    2612:	0c f4       	brge	.+2      	; 0x2616 <loop+0x1a2>
    2614:	e6 c0       	rjmp	.+460    	; 0x27e2 <loop+0x36e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:178
    btn = getButton();
    2616:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <btn>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:208
            // lcd.clear();
            config.save();
            ButLongPress = true;
        }
    }
    if (btn == BUTTON_DOWN_LONG_PRESSED)
    261a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    261e:	83 38       	cpi	r24, 0x83	; 131
    2620:	19 f5       	brne	.+70     	; 0x2668 <loop+0x1f4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:210
    {
        if (!ButLongPress)
    2622:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <ButLongPress>
    2626:	81 11       	cpse	r24, r1
    2628:	1f c0       	rjmp	.+62     	; 0x2668 <loop+0x1f4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:212
        {
            if (config.AutoLight == 0)
    262a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <config+0x18>
    262e:	81 11       	cpse	r24, r1
    2630:	3c c1       	rjmp	.+632    	; 0x28aa <loop+0x436>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:214
            {
                config.AutoLight = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:215
                lcd.setCursor(0, 1);
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:216
                lcd.print(F(" AUTO LIGHT ON  "));
    2640:	8c e3       	ldi	r24, 0x3C	; 60
    2642:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:222
            }
            else
            {
                config.AutoLight = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT OFF "));
    2644:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:224
            }
            digitalWrite(AUTOLIGHT, config.AutoLight);
    2648:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <config+0x18>
    264c:	8f e0       	ldi	r24, 0x0F	; 15
    264e:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:225
            delay(1000);
    2652:	68 ee       	ldi	r22, 0xE8	; 232
    2654:	73 e0       	ldi	r23, 0x03	; 3
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:227
            // lcd.clear();
            config.save();
    265e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Config::save() [clone .constprop.19]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:228
            ButLongPress = true;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:231
        }
    }
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    2668:	10 91 95 03 	lds	r17, 0x0395	; 0x800395 <btn>
    266c:	00 91 9c 03 	lds	r16, 0x039C	; 0x80039c <appMode>
    2670:	8e e3       	ldi	r24, 0x3E	; 62
    2672:	81 0f       	add	r24, r17
    2674:	84 30       	cpi	r24, 0x04	; 4
    2676:	08 f0       	brcs	.+2      	; 0x267a <loop+0x206>
    2678:	21 c1       	rjmp	.+578    	; 0x28bc <loop+0x448>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:233
    {
        ButLongPress = false;
    267a:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:245
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
            Light1ON = !Light1ON;
        }
    }
    if (millis() - timrLCD > 500)
    267e:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2682:	c0 90 35 04 	lds	r12, 0x0435	; 0x800435 <timrLCD>
    2686:	d0 90 36 04 	lds	r13, 0x0436	; 0x800436 <timrLCD+0x1>
    268a:	e0 90 37 04 	lds	r14, 0x0437	; 0x800437 <timrLCD+0x2>
    268e:	f0 90 38 04 	lds	r15, 0x0438	; 0x800438 <timrLCD+0x3>
    2692:	6c 19       	sub	r22, r12
    2694:	7d 09       	sbc	r23, r13
    2696:	8e 09       	sbc	r24, r14
    2698:	9f 09       	sbc	r25, r15
    269a:	65 3f       	cpi	r22, 0xF5	; 245
    269c:	71 40       	sbci	r23, 0x01	; 1
    269e:	81 05       	cpc	r24, r1
    26a0:	91 05       	cpc	r25, r1
    26a2:	40 f0       	brcs	.+16     	; 0x26b4 <loop+0x240>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:247
    {
        downButPreCount = 0;
    26a4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <downButPreCount+0x1>
    26a8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:248
        selButPreCount = 0;
    26ac:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <selButPreCount+0x1>
    26b0:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:252
        upButPreCount = 0;
    }

    if (millis() - timrTrigger > 500 && config.AutoLight)
    26b4:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    26b8:	c0 90 87 03 	lds	r12, 0x0387	; 0x800387 <timrTrigger>
    26bc:	d0 90 88 03 	lds	r13, 0x0388	; 0x800388 <timrTrigger+0x1>
    26c0:	e0 90 89 03 	lds	r14, 0x0389	; 0x800389 <timrTrigger+0x2>
    26c4:	f0 90 8a 03 	lds	r15, 0x038A	; 0x80038a <timrTrigger+0x3>
    26c8:	6c 19       	sub	r22, r12
    26ca:	7d 09       	sbc	r23, r13
    26cc:	8e 09       	sbc	r24, r14
    26ce:	9f 09       	sbc	r25, r15
    26d0:	65 3f       	cpi	r22, 0xF5	; 245
    26d2:	71 40       	sbci	r23, 0x01	; 1
    26d4:	81 05       	cpc	r24, r1
    26d6:	91 05       	cpc	r25, r1
    26d8:	08 f4       	brcc	.+2      	; 0x26dc <loop+0x268>
    26da:	4e c0       	rjmp	.+156    	; 0x2778 <loop+0x304>
    26dc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <config+0x18>
    26e0:	88 23       	and	r24, r24
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <loop+0x272>
    26e4:	49 c0       	rjmp	.+146    	; 0x2778 <loop+0x304>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:254
    {
        timrTrigger = millis();
    26e6:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    26ea:	60 93 87 03 	sts	0x0387, r22	; 0x800387 <timrTrigger>
    26ee:	70 93 88 03 	sts	0x0388, r23	; 0x800388 <timrTrigger+0x1>
    26f2:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <timrTrigger+0x2>
    26f6:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <timrTrigger+0x3>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:591
}

void TriggerLights()
{
    // Validate Light 1
    if (config.Light1On != 0 && config.Light1Off != 0)
    26fa:	80 90 e5 04 	lds	r8, 0x04E5	; 0x8004e5 <config+0x32>
    26fe:	90 90 e6 04 	lds	r9, 0x04E6	; 0x8004e6 <config+0x33>
    2702:	a0 90 e7 04 	lds	r10, 0x04E7	; 0x8004e7 <config+0x34>
    2706:	b0 90 e8 04 	lds	r11, 0x04E8	; 0x8004e8 <config+0x35>
    270a:	81 14       	cp	r8, r1
    270c:	91 04       	cpc	r9, r1
    270e:	a1 04       	cpc	r10, r1
    2710:	b1 04       	cpc	r11, r1
    2712:	91 f1       	breq	.+100    	; 0x2778 <loop+0x304>
    2714:	c0 90 e9 04 	lds	r12, 0x04E9	; 0x8004e9 <config+0x36>
    2718:	d0 90 ea 04 	lds	r13, 0x04EA	; 0x8004ea <config+0x37>
    271c:	e0 90 eb 04 	lds	r14, 0x04EB	; 0x8004eb <config+0x38>
    2720:	f0 90 ec 04 	lds	r15, 0x04EC	; 0x8004ec <config+0x39>
    2724:	c1 14       	cp	r12, r1
    2726:	d1 04       	cpc	r13, r1
    2728:	e1 04       	cpc	r14, r1
    272a:	f1 04       	cpc	r15, r1
    272c:	29 f1       	breq	.+74     	; 0x2778 <loop+0x304>
    272e:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <CurTime>
    2732:	50 91 99 03 	lds	r21, 0x0399	; 0x800399 <CurTime+0x1>
    2736:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <CurTime+0x2>
    273a:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <CurTime+0x3>
    273e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <Light1ON>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:593
    {
        if (config.Light1Off > config.Light1On)
    2742:	8c 14       	cp	r8, r12
    2744:	9d 04       	cpc	r9, r13
    2746:	ae 04       	cpc	r10, r14
    2748:	bf 04       	cpc	r11, r15
    274a:	0c f0       	brlt	.+2      	; 0x274e <loop+0x2da>
    274c:	e7 c0       	rjmp	.+462    	; 0x291c <loop+0x4a8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:595
        {
            if (CurTime >= config.Light1On && CurTime < config.Light1Off)
    274e:	48 15       	cp	r20, r8
    2750:	59 05       	cpc	r21, r9
    2752:	6a 05       	cpc	r22, r10
    2754:	7b 05       	cpc	r23, r11
    2756:	0c f4       	brge	.+2      	; 0x275a <loop+0x2e6>
    2758:	d7 c0       	rjmp	.+430    	; 0x2908 <loop+0x494>
    275a:	4c 15       	cp	r20, r12
    275c:	5d 05       	cpc	r21, r13
    275e:	6e 05       	cpc	r22, r14
    2760:	7f 05       	cpc	r23, r15
    2762:	0c f0       	brlt	.+2      	; 0x2766 <loop+0x2f2>
    2764:	d1 c0       	rjmp	.+418    	; 0x2908 <loop+0x494>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:597
            {
                if (Light1ON == 0)
    2766:	81 11       	cpse	r24, r1
    2768:	07 c0       	rjmp	.+14     	; 0x2778 <loop+0x304>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:599
                {
                    digitalWrite(RELAY1, HIGH);
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	8b e0       	ldi	r24, 0x0B	; 11
    276e:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:600
                    Light1ON = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <Light1ON>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:257
    if (millis() - timrTrigger > 500 && config.AutoLight)
    {
        timrTrigger = millis();
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    2778:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <config+0x18>
    277c:	8f e0       	ldi	r24, 0x0F	; 15
    277e:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:258
    digitalWrite(AUTOPLAY, config.AutoPlay);
    2782:	60 91 ca 04 	lds	r22, 0x04CA	; 0x8004ca <config+0x17>
    2786:	8e e0       	ldi	r24, 0x0E	; 14
    2788:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:260

    switch (appMode)
    278c:	08 30       	cpi	r16, 0x08	; 8
    278e:	08 f0       	brcs	.+2      	; 0x2792 <loop+0x31e>
    2790:	4d c2       	rjmp	.+1178   	; 0x2c2c <loop+0x7b8>
    2792:	e0 2f       	mov	r30, r16
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	e1 53       	subi	r30, 0x31	; 49
    2798:	fc 4e       	sbci	r31, 0xEC	; 236
    279a:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__tablejump2__>
    279e:	95 14       	cp	r9, r5
    27a0:	c6 17       	cp	r28, r22
    27a2:	11 19       	sub	r17, r1
    27a4:	9d 17       	cp	r25, r29
    27a6:	7d 23       	and	r23, r29
    27a8:	26 24       	eor	r2, r6
    27aa:	2d 16       	cp	r2, r29
    27ac:	e6 16       	cp	r14, r22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:266
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    27ae:	51 2c       	mov	r5, r1
    27b0:	d9 ce       	rjmp	.-590    	; 0x2564 <loop+0xf0>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:283
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    27b2:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    27b6:	f8 01       	movw	r30, r16
    27b8:	20 81       	ld	r18, Z
    27ba:	31 81       	ldd	r19, Z+1	; 0x01
    27bc:	42 81       	ldd	r20, Z+2	; 0x02
    27be:	53 81       	ldd	r21, Z+3	; 0x03
    27c0:	62 1b       	sub	r22, r18
    27c2:	73 0b       	sbc	r23, r19
    27c4:	84 0b       	sbc	r24, r20
    27c6:	95 0b       	sbc	r25, r21
    27c8:	61 3d       	cpi	r22, 0xD1	; 209
    27ca:	77 40       	sbci	r23, 0x07	; 7
    27cc:	81 05       	cpc	r24, r1
    27ce:	91 05       	cpc	r25, r1
    27d0:	28 f0       	brcs	.+10     	; 0x27dc <loop+0x368>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:285
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    27d2:	86 2d       	mov	r24, r6
    27d4:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:289
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    27d6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <queueButton(unsigned char)>
    27da:	db ce       	rjmp	.-586    	; 0x2592 <loop+0x11e>
    27dc:	86 2d       	mov	r24, r6
    27de:	80 64       	ori	r24, 0x40	; 64
    27e0:	fa cf       	rjmp	.-12     	; 0x27d6 <loop+0x362>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:222
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    27e2:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <button_read_pos>
    27e6:	e8 2f       	mov	r30, r24
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	e2 56       	subi	r30, 0x62	; 98
    27ec:	fc 4f       	sbci	r31, 0xFC	; 252
    27ee:	10 81       	ld	r17, Z
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:223
    buttonBufferCount--;
    27f0:	91 50       	subi	r25, 0x01	; 1
    27f2:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:224
    button_read_pos++;
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:226
    
    if (button_read_pos >= sizeof (buttonBuffer))
    27f8:	85 30       	cpi	r24, 0x05	; 5
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <loop+0x38a>
    27fc:	4a c0       	rjmp	.+148    	; 0x2892 <loop+0x41e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:224
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    27fe:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:178
    
}

void loop()
{
    btn = getButton();
    2802:	10 93 95 03 	sts	0x0395, r17	; 0x800395 <btn>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:179
    if (btn)
    2806:	11 23       	and	r17, r17
    2808:	09 f4       	brne	.+2      	; 0x280c <loop+0x398>
    280a:	2e cf       	rjmp	.-420    	; 0x2668 <loop+0x1f4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:181
    {
        timrLCD = millis();
    280c:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2810:	60 93 35 04 	sts	0x0435, r22	; 0x800435 <timrLCD>
    2814:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <timrLCD+0x1>
    2818:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <timrLCD+0x2>
    281c:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:182
        timrMNU = millis();
    2820:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2824:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timrMNU>
    2828:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timrMNU+0x1>
    282c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <timrMNU+0x2>
    2830:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2834:	88 e0       	ldi	r24, 0x08	; 8
    2836:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	84 eb       	ldi	r24, 0xB4	; 180
    283e:	95 e0       	ldi	r25, 0x05	; 5
    2840:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:185
        lcd.backlight();
    }
    if (btn == BUTTON_UP_LONG_PRESSED)
    2844:	12 38       	cpi	r17, 0x82	; 130
    2846:	09 f0       	breq	.+2      	; 0x284a <loop+0x3d6>
    2848:	e8 ce       	rjmp	.-560    	; 0x261a <loop+0x1a6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:187
    {
        if (!ButLongPress)
    284a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <ButLongPress>
    284e:	81 11       	cpse	r24, r1
    2850:	0b cf       	rjmp	.-490    	; 0x2668 <loop+0x1f4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:189
        {
            if (config.AutoPlay == 0)
    2852:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <config+0x17>
    2856:	81 11       	cpse	r24, r1
    2858:	1f c0       	rjmp	.+62     	; 0x2898 <loop+0x424>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:191
            {
                config.AutoPlay = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:192
                lcd.setCursor(0, 1);
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:193
                lcd.print(F("  AUTO PLAY ON  "));
    2868:	8e e5       	ldi	r24, 0x5E	; 94
    286a:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:199
            }
            else
            {
                config.AutoPlay = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO PLAY OFF  "));
    286c:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:201
            }
            digitalWrite(AUTOPLAY, config.AutoPlay);
    2870:	60 91 ca 04 	lds	r22, 0x04CA	; 0x8004ca <config+0x17>
    2874:	8e e0       	ldi	r24, 0x0E	; 14
    2876:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:202
            delay(1000);
    287a:	68 ee       	ldi	r22, 0xE8	; 232
    287c:	73 e0       	ldi	r23, 0x03	; 3
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:204
            // lcd.clear();
            config.save();
    2886:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Config::save() [clone .constprop.19]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:205
            ButLongPress = true;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <ButLongPress>
    2890:	c4 ce       	rjmp	.-632    	; 0x261a <loop+0x1a6>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/LcdKeypad.cpp:228
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    2892:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <button_read_pos>
    2896:	b5 cf       	rjmp	.-150    	; 0x2802 <loop+0x38e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:197
                lcd.setCursor(0, 1);
                lcd.print(F("  AUTO PLAY ON  "));
            }
            else
            {
                config.AutoPlay = 0;
    2898:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:198
                lcd.setCursor(0, 1);
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:199
                lcd.print(F(" AUTO PLAY OFF  "));
    28a4:	8d e4       	ldi	r24, 0x4D	; 77
    28a6:	93 e0       	ldi	r25, 0x03	; 3
    28a8:	e1 cf       	rjmp	.-62     	; 0x286c <loop+0x3f8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:220
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT ON  "));
            }
            else
            {
                config.AutoLight = 0;
    28aa:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:221
                lcd.setCursor(0, 1);
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:222
                lcd.print(F(" AUTO LIGHT OFF "));
    28b6:	8b e2       	ldi	r24, 0x2B	; 43
    28b8:	93 e0       	ldi	r25, 0x03	; 3
    28ba:	c4 ce       	rjmp	.-632    	; 0x2644 <loop+0x1d0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:236
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    {
        ButLongPress = false;
    }

    if (btn == BUTTON_DOWN_PRESSED && (appMode == APP_NORMAL_MODE || appMode == APP_PLAYER_MODE))
    28bc:	13 30       	cpi	r17, 0x03	; 3
    28be:	09 f0       	breq	.+2      	; 0x28c2 <loop+0x44e>
    28c0:	de ce       	rjmp	.-580    	; 0x267e <loop+0x20a>
    28c2:	00 23       	and	r16, r16
    28c4:	19 f0       	breq	.+6      	; 0x28cc <loop+0x458>
    28c6:	05 30       	cpi	r16, 0x05	; 5
    28c8:	09 f0       	breq	.+2      	; 0x28cc <loop+0x458>
    28ca:	d9 ce       	rjmp	.-590    	; 0x267e <loop+0x20a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:238
    {
        downButPreCount += 1;
    28cc:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <downButPreCount>
    28d0:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <downButPreCount+0x1>
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <downButPreCount+0x1>
    28da:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:239
        if (downButPreCount >= 2)
    28de:	02 97       	sbiw	r24, 0x02	; 2
    28e0:	0c f4       	brge	.+2      	; 0x28e4 <loop+0x470>
    28e2:	cd ce       	rjmp	.-614    	; 0x267e <loop+0x20a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:241
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
    28e4:	8b e0       	ldi	r24, 0x0B	; 11
    28e6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	89 2b       	or	r24, r25
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <loop+0x47e>
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	8b e0       	ldi	r24, 0x0B	; 11
    28f4:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:242
            Light1ON = !Light1ON;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <Light1ON>
    28fe:	91 11       	cpse	r25, r1
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <Light1ON>
    2906:	bb ce       	rjmp	.-650    	; 0x267e <loop+0x20a>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:605
                    Light1ON = 1;
                }
            }
            else
            {
                if (Light1ON == 1)
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	09 f0       	breq	.+2      	; 0x290e <loop+0x49a>
    290c:	35 cf       	rjmp	.-406    	; 0x2778 <loop+0x304>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:607
                {
                    digitalWrite(RELAY1, LOW);
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	8b e0       	ldi	r24, 0x0B	; 11
    2912:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:608
                    Light1ON = 0;
    2916:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <Light1ON>
    291a:	2e cf       	rjmp	.-420    	; 0x2778 <loop+0x304>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:614
                }
            }
        }
        else
        {
            if (CurTime < config.Light1On && CurTime >= config.Light1Off)
    291c:	48 15       	cp	r20, r8
    291e:	59 05       	cpc	r21, r9
    2920:	6a 05       	cpc	r22, r10
    2922:	7b 05       	cpc	r23, r11
    2924:	0c f0       	brlt	.+2      	; 0x2928 <loop+0x4b4>
    2926:	1f cf       	rjmp	.-450    	; 0x2766 <loop+0x2f2>
    2928:	18 cf       	rjmp	.-464    	; 0x275a <loop+0x2e6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:263
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    {
    case APP_NORMAL_MODE:
        digitalWrite(AMP, LOW);
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	8c e0       	ldi	r24, 0x0C	; 12
    292e:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:264
        digitalWrite(AUDCONT, LOW);
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	8a e0       	ldi	r24, 0x0A	; 10
    2936:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:265
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    293a:	11 38       	cpi	r17, 0x81	; 129
    293c:	19 f5       	brne	.+70     	; 0x2984 <loop+0x510>
attach():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    293e:	20 e9       	ldi	r18, 0x90	; 144
    2940:	33 e0       	ldi	r19, 0x03	; 3
    2942:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <Menu1+0x1>
    2946:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    294a:	85 e0       	ldi	r24, 0x05	; 5
    294c:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2950:	30 93 42 05 	sts	0x0542, r19	; 0x800542 <Menu1+0x4>
    2954:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2958:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    295c:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:12
  menuStackCount = 0;
    2960:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:268
        {
            Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));
            appMode = APP_MENU_MODE;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:269
            refreshMenuDisplay(REFRESH_DESCEND);
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	0e 94 c2 11 	call	0x2384	; 0x2384 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:270
            timrMNU = millis();
    2970:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2974:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timrMNU>
    2978:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timrMNU+0x1>
    297c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <timrMNU+0x2>
    2980:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:272
        }
        if (btn == BUTTON_SELECT_SHORT_RELEASE)
    2984:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2988:	81 34       	cpi	r24, 0x41	; 65
    298a:	19 f5       	brne	.+70     	; 0x29d2 <loop+0x55e>
attach():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    298c:	29 e1       	ldi	r18, 0x19	; 25
    298e:	33 e0       	ldi	r19, 0x03	; 3
    2990:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <Menu1+0x1>
    2994:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    299e:	30 93 42 05 	sts	0x0542, r19	; 0x800542 <Menu1+0x4>
    29a2:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    29a6:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    29aa:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:12
  menuStackCount = 0;
    29ae:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:275
        {
            Menu1.attach(demoMenu_Root, menuCount(demoMenu_Root));
            appMode = APP_MENU_MODE;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:276
            refreshMenuDisplay(REFRESH_DESCEND);
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	0e 94 c2 11 	call	0x2384	; 0x2384 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:277
            timrMNU = millis();
    29be:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    29c2:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timrMNU>
    29c6:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timrMNU+0x1>
    29ca:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <timrMNU+0x2>
    29ce:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:281
        }


        if (btn == BUTTON_LEFT_PRESSED)
    29d2:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    29d6:	84 30       	cpi	r24, 0x04	; 4
    29d8:	19 f5       	brne	.+70     	; 0x2a20 <loop+0x5ac>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:283
        {
            selButPreCount += 1;
    29da:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <selButPreCount>
    29de:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <selButPreCount+0x1>
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <selButPreCount+0x1>
    29e8:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:284
            if (selButPreCount >= 4)
    29ec:	04 97       	sbiw	r24, 0x04	; 4
    29ee:	c4 f0       	brlt	.+48     	; 0x2a20 <loop+0x5ac>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:286
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    29f0:	ce 01       	movw	r24, r28
    29f2:	49 96       	adiw	r24, 0x19	; 25
    29f4:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    29f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fa:	8f 31       	cpi	r24, 0x1F	; 31
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <loop+0x58c>
    29fe:	ea c0       	rjmp	.+468    	; 0x2bd4 <loop+0x760>
    2a00:	ce 01       	movw	r24, r28
    2a02:	43 96       	adiw	r24, 0x13	; 19
    2a04:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2a08:	8e 89       	ldd	r24, Y+22	; 0x16
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <demoTime+0x1>
    2a12:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <demoTime>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:287
                appMode = APP_DEMO_MODE;
    2a16:	84 e0       	ldi	r24, 0x04	; 4
    2a18:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:288
                lcd.clear();
    2a1c:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:292
            }
        }

        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    2a20:	ce 01       	movw	r24, r28
    2a22:	43 96       	adiw	r24, 0x13	; 19
    2a24:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2a28:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	5d c0       	rjmp	.+186    	; 0x2ae8 <loop+0x674>
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2a36:	8e 81       	ldd	r24, Y+6	; 0x06
    2a38:	81 11       	cpse	r24, r1
    2a3a:	56 c0       	rjmp	.+172    	; 0x2ae8 <loop+0x674>
    2a3c:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2a40:	ab 01       	movw	r20, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timrAmp>
    2a48:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timrAmp+0x1>
    2a4c:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timrAmp+0x2>
    2a50:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timrAmp+0x3>
    2a54:	88 5b       	subi	r24, 0xB8	; 184
    2a56:	91 41       	sbci	r25, 0x11	; 17
    2a58:	af 4f       	sbci	r26, 0xFF	; 255
    2a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5c:	84 17       	cp	r24, r20
    2a5e:	95 07       	cpc	r25, r21
    2a60:	a6 07       	cpc	r26, r22
    2a62:	b7 07       	cpc	r27, r23
    2a64:	08 f0       	brcs	.+2      	; 0x2a68 <loop+0x5f4>
    2a66:	40 c0       	rjmp	.+128    	; 0x2ae8 <loop+0x674>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:294
        {
            bell = rtc.now();
    2a68:	ce 01       	movw	r24, r28
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2a70:	86 e0       	ldi	r24, 0x06	; 6
    2a72:	fe 01       	movw	r30, r28
    2a74:	31 96       	adiw	r30, 0x01	; 1
    2a76:	ae ea       	ldi	r26, 0xAE	; 174
    2a78:	b5 e0       	ldi	r27, 0x05	; 5
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	0d 92       	st	X+, r0
    2a7e:	8a 95       	dec	r24
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <loop+0x606>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:295
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    2a82:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <bell+0x3>
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <config+0xf>
    2a8c:	30 91 c3 04 	lds	r19, 0x04C3	; 0x8004c3 <config+0x10>
    2a90:	82 17       	cp	r24, r18
    2a92:	93 07       	cpc	r25, r19
    2a94:	4c f1       	brlt	.+82     	; 0x2ae8 <loop+0x674>
    2a96:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <config+0x11>
    2a9a:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <config+0x12>
    2a9e:	28 17       	cp	r18, r24
    2aa0:	39 07       	cpc	r19, r25
    2aa2:	14 f1       	brlt	.+68     	; 0x2ae8 <loop+0x674>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:297
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    2aa4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <config+0x19>
    2aa8:	88 23       	and	r24, r24
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <loop+0x63a>
    2aac:	9a c0       	rjmp	.+308    	; 0x2be2 <loop+0x76e>
    2aae:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DateTime::dayOfTheWeek() const [clone .constprop.14]>
    2ab2:	88 23       	and	r24, r24
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <loop+0x644>
    2ab6:	95 c0       	rjmp	.+298    	; 0x2be2 <loop+0x76e>
    2ab8:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <bell+0x3>
    2abc:	8a 50       	subi	r24, 0x0A	; 10
    2abe:	87 30       	cpi	r24, 0x07	; 7
    2ac0:	08 f0       	brcs	.+2      	; 0x2ac4 <loop+0x650>
    2ac2:	8f c0       	rjmp	.+286    	; 0x2be2 <loop+0x76e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:302
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    2ac4:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:303
                    lcd.setCursor(0,0);
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:304
                    lcd.print("School Zone : ON");
    2ad0:	82 ed       	ldi	r24, 0xD2	; 210
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:305
                    delay(1000);
    2ad8:	68 ee       	ldi	r22, 0xE8	; 232
    2ada:	73 e0       	ldi	r23, 0x03	; 3
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:313
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    2ae4:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:317
                }
            }
        }
        if (millis() - timr_Time > 1000)
    2ae8:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2aec:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <timr_Time>
    2af0:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <timr_Time+0x1>
    2af4:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <timr_Time+0x2>
    2af8:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timr_Time+0x3>
    2afc:	60 1b       	sub	r22, r16
    2afe:	71 0b       	sbc	r23, r17
    2b00:	82 0b       	sbc	r24, r18
    2b02:	93 0b       	sbc	r25, r19
    2b04:	69 3e       	cpi	r22, 0xE9	; 233
    2b06:	73 40       	sbci	r23, 0x03	; 3
    2b08:	81 05       	cpc	r24, r1
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	70 f1       	brcs	.+92     	; 0x2b6a <loop+0x6f6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:319
        {
            timr_Time = millis();
    2b0e:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2b12:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <timr_Time>
    2b16:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <timr_Time+0x1>
    2b1a:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timr_Time+0x2>
    2b1e:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:320
            showTime();
    2b22:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:321
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    2b26:	ce 01       	movw	r24, r28
    2b28:	43 96       	adiw	r24, 0x13	; 19
    2b2a:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2b2e:	8e 89       	ldd	r24, Y+22	; 0x16
    2b30:	6c e3       	ldi	r22, 0x3C	; 60
    2b32:	86 9f       	mul	r24, r22
    2b34:	80 01       	movw	r16, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	80 0f       	add	r24, r16
    2b44:	91 2f       	mov	r25, r17
    2b46:	91 1d       	adc	r25, r1
    2b48:	09 2e       	mov	r0, r25
    2b4a:	00 0c       	add	r0, r0
    2b4c:	aa 0b       	sbc	r26, r26
    2b4e:	bb 0b       	sbc	r27, r27
    2b50:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <CurTime>
    2b54:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <CurTime+0x1>
    2b58:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <CurTime+0x2>
    2b5c:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:322
            if (config.AutoPlay)
    2b60:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <config+0x17>
    2b64:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:323
                TriggerPlayer();
    2b66:	0e 94 88 08 	call	0x1110	; 0x1110 <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:325
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    2b6a:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2b6e:	00 91 35 04 	lds	r16, 0x0435	; 0x800435 <timrLCD>
    2b72:	10 91 36 04 	lds	r17, 0x0436	; 0x800436 <timrLCD+0x1>
    2b76:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <timrLCD+0x2>
    2b7a:	30 91 38 04 	lds	r19, 0x0438	; 0x800438 <timrLCD+0x3>
    2b7e:	6b 01       	movw	r12, r22
    2b80:	7c 01       	movw	r14, r24
    2b82:	c0 1a       	sub	r12, r16
    2b84:	d1 0a       	sbc	r13, r17
    2b86:	e2 0a       	sbc	r14, r18
    2b88:	f3 0a       	sbc	r15, r19
    2b8a:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <config+0x13>
    2b8e:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <config+0x14>
    2b92:	28 ee       	ldi	r18, 0xE8	; 232
    2b94:	33 e0       	ldi	r19, 0x03	; 3
    2b96:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <__usmulhisi3>
    2b9a:	6c 15       	cp	r22, r12
    2b9c:	7d 05       	cpc	r23, r13
    2b9e:	8e 05       	cpc	r24, r14
    2ba0:	9f 05       	cpc	r25, r15
    2ba2:	38 f4       	brcc	.+14     	; 0x2bb2 <loop+0x73e>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    2ba4:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	84 eb       	ldi	r24, 0xB4	; 180
    2bac:	95 e0       	ldi	r25, 0x05	; 5
    2bae:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:329
        {
            lcd.noBacklight();
        }
        if (btn == BUTTON_MODE_LONG_PRESSED)
    2bb2:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2bb6:	85 38       	cpi	r24, 0x85	; 133
    2bb8:	31 f5       	brne	.+76     	; 0x2c06 <loop+0x792>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:331
        {
            if (!ButLongPress)
    2bba:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <ButLongPress>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	35 c0       	rjmp	.+106    	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:333
            {
                appMode = APP_PLAYER_MODE;
    2bc2:	85 e0       	ldi	r24, 0x05	; 5
    2bc4:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:579
            if (!ButLongPress)
            {
                appMode = APP_NORMAL_MODE;
                PlayerONMor = 0;
                PlayerONEve = 0;
                lcd.clear();
    2bc8:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:580
                ButLongPress = true;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <ButLongPress>
    2bd2:	2c c0       	rjmp	.+88     	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:286
        if (btn == BUTTON_LEFT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	01 96       	adiw	r24, 0x01	; 1
    2bd8:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	16 cf       	rjmp	.-468    	; 0x2a0e <loop+0x59a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:310
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    2be2:	61 e0       	ldi	r22, 0x01	; 1
    2be4:	8c e0       	ldi	r24, 0x0C	; 12
    2be6:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:311
                    timrAmp = millis();
    2bea:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2bee:	60 93 83 03 	sts	0x0383, r22	; 0x800383 <timrAmp>
    2bf2:	70 93 84 03 	sts	0x0384, r23	; 0x800384 <timrAmp+0x1>
    2bf6:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <timrAmp+0x2>
    2bfa:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:312
                    appMode = APP_CHANT_MODE;
    2bfe:	83 e0       	ldi	r24, 0x03	; 3
    2c00:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
    2c04:	6f cf       	rjmp	.-290    	; 0x2ae4 <loop+0x670>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:338
                appMode = APP_PLAYER_MODE;
                lcd.clear();
                ButLongPress = true;
            }
        }
        if (btn == BUTTON_LEFT_LONG_PRESSED)
    2c06:	84 38       	cpi	r24, 0x84	; 132
    2c08:	89 f4       	brne	.+34     	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:340
        {
            if (!ButLongPress)
    2c0a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <ButLongPress>
    2c0e:	81 11       	cpse	r24, r1
    2c10:	0d c0       	rjmp	.+26     	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:342
            {
                appMode = APP_SETHR_MODE;
    2c12:	86 e0       	ldi	r24, 0x06	; 6
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:390
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }
        if (btn == BUTTON_LEFT_PRESSED)
        {
            appMode = APP_SETMIN_MODE;
    2c14:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:391
            timrMNU = millis();
    2c18:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2c1c:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timrMNU>
    2c20:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timrMNU+0x1>
    2c24:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <timrMNU+0x2>
    2c28:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:586
            }
        }
        break;
    }
    }
}
    2c2c:	ec 96       	adiw	r28, 0x3c	; 60
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	df 90       	pop	r13
    2c46:	cf 90       	pop	r12
    2c48:	bf 90       	pop	r11
    2c4a:	af 90       	pop	r10
    2c4c:	9f 90       	pop	r9
    2c4e:	8f 90       	pop	r8
    2c50:	7f 90       	pop	r7
    2c52:	6f 90       	pop	r6
    2c54:	5f 90       	pop	r5
    2c56:	4f 90       	pop	r4
    2c58:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:349
            }
        }
        break;
    case APP_SETHR_MODE:
    {
        if (millis() - timr_Time > 300)
    2c5a:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2c5e:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <timr_Time>
    2c62:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <timr_Time+0x1>
    2c66:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <timr_Time+0x2>
    2c6a:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timr_Time+0x3>
    2c6e:	60 1b       	sub	r22, r16
    2c70:	71 0b       	sbc	r23, r17
    2c72:	82 0b       	sbc	r24, r18
    2c74:	93 0b       	sbc	r25, r19
    2c76:	6d 32       	cpi	r22, 0x2D	; 45
    2c78:	71 40       	sbci	r23, 0x01	; 1
    2c7a:	81 05       	cpc	r24, r1
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	98 f0       	brcs	.+38     	; 0x2ca6 <loop+0x832>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:351
        {
            if (blink)
    2c80:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    2c84:	88 23       	and	r24, r24
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <loop+0x816>
    2c88:	81 c0       	rjmp	.+258    	; 0x2d8c <loop+0x918>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:353
            {
                showTime();
    2c8a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:354
                blink = false;
    2c8e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:362
            {
                lcd.setCursor(2, 0);
                lcd.print("  ");
                blink = true;
            }
            timr_Time = millis();
    2c92:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2c96:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <timr_Time>
    2c9a:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <timr_Time+0x1>
    2c9e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timr_Time+0x2>
    2ca2:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:365
        }

        if (btn == BUTTON_UP_PRESSED)
    2ca6:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2caa:	82 30       	cpi	r24, 0x02	; 2
    2cac:	89 f5       	brne	.+98     	; 0x2d10 <loop+0x89c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:372
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() > 23 ? 0 : rtc.now().hour() + 1,
                                rtc.now().minute(),
                                rtc.now().second()));
    2cae:	ce 01       	movw	r24, r28
    2cb0:	c1 96       	adiw	r24, 0x31	; 49
    2cb2:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2cb6:	0e a9       	ldd	r16, Y+54	; 0x36
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:371
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() > 23 ? 0 : rtc.now().hour() + 1,
                                rtc.now().minute(),
    2cb8:	ce 01       	movw	r24, r28
    2cba:	8b 96       	adiw	r24, 0x2b	; 43
    2cbc:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2cc0:	ff a4       	ldd	r15, Y+47	; 0x2f
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:370
        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() > 23 ? 0 : rtc.now().hour() + 1,
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	85 96       	adiw	r24, 0x25	; 37
    2cc6:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:367
            timr_Time = millis();
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2cca:	88 a5       	ldd	r24, Y+40	; 0x28
    2ccc:	10 e0       	ldi	r17, 0x00	; 0
    2cce:	88 31       	cpi	r24, 0x18	; 24
    2cd0:	30 f4       	brcc	.+12     	; 0x2cde <loop+0x86a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:370
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() > 23 ? 0 : rtc.now().hour() + 1,
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	4f 96       	adiw	r24, 0x1f	; 31
    2cd6:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:367
            timr_Time = millis();
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2cda:	1a a1       	ldd	r17, Y+34	; 0x22
    2cdc:	1f 5f       	subi	r17, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:369
                                rtc.now().month(),
                                rtc.now().day(),
    2cde:	ce 01       	movw	r24, r28
    2ce0:	49 96       	adiw	r24, 0x19	; 25
    2ce2:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2ce6:	eb 8c       	ldd	r14, Y+27	; 0x1b
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:368
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
    2ce8:	ce 01       	movw	r24, r28
    2cea:	43 96       	adiw	r24, 0x13	; 19
    2cec:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2cf0:	dc 88       	ldd	r13, Y+20	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:367
            timr_Time = millis();
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    2cfc:	8f ab       	std	Y+55, r24	; 0x37
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    2cfe:	d8 ae       	std	Y+56, r13	; 0x38
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    2d00:	e9 ae       	std	Y+57, r14	; 0x39
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    2d02:	1a af       	std	Y+58, r17	; 0x3a
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    2d04:	fb ae       	std	Y+59, r15	; 0x3b
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    2d06:	0c af       	std	Y+60, r16	; 0x3c
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:367
    2d08:	ce 01       	movw	r24, r28
    2d0a:	c7 96       	adiw	r24, 0x37	; 55
    2d0c:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:374
                                rtc.now().day(),
                                rtc.now().hour() > 23 ? 0 : rtc.now().hour() + 1,
                                rtc.now().minute(),
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
    2d10:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2d14:	83 30       	cpi	r24, 0x03	; 3
    2d16:	69 f5       	brne	.+90     	; 0x2d72 <loop+0x8fe>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:381
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() < 0 ? 23 : rtc.now().hour() - 1,
                                rtc.now().minute(),
                                rtc.now().second()));
    2d18:	ce 01       	movw	r24, r28
    2d1a:	c1 96       	adiw	r24, 0x31	; 49
    2d1c:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2d20:	0e a9       	ldd	r16, Y+54	; 0x36
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:380
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() < 0 ? 23 : rtc.now().hour() - 1,
                                rtc.now().minute(),
    2d22:	ce 01       	movw	r24, r28
    2d24:	8b 96       	adiw	r24, 0x2b	; 43
    2d26:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2d2a:	ff a4       	ldd	r15, Y+47	; 0x2f
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:379
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour() < 0 ? 23 : rtc.now().hour() - 1,
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	85 96       	adiw	r24, 0x25	; 37
    2d30:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2d34:	ce 01       	movw	r24, r28
    2d36:	4f 96       	adiw	r24, 0x1f	; 31
    2d38:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:376
                                rtc.now().minute(),
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2d3c:	1a a1       	ldd	r17, Y+34	; 0x22
    2d3e:	11 50       	subi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:378
                                rtc.now().month(),
                                rtc.now().day(),
    2d40:	ce 01       	movw	r24, r28
    2d42:	49 96       	adiw	r24, 0x19	; 25
    2d44:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2d48:	eb 8c       	ldd	r14, Y+27	; 0x1b
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:377
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	43 96       	adiw	r24, 0x13	; 19
    2d4e:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2d52:	dc 88       	ldd	r13, Y+20	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:376
                                rtc.now().minute(),
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2d54:	ce 01       	movw	r24, r28
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    2d5e:	8f ab       	std	Y+55, r24	; 0x37
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    2d60:	d8 ae       	std	Y+56, r13	; 0x38
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    2d62:	e9 ae       	std	Y+57, r14	; 0x39
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    2d64:	1a af       	std	Y+58, r17	; 0x3a
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    2d66:	fb ae       	std	Y+59, r15	; 0x3b
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    2d68:	0c af       	std	Y+60, r16	; 0x3c
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:376
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	c7 96       	adiw	r24, 0x37	; 55
    2d6e:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:383
                                rtc.now().day(),
                                rtc.now().hour() < 0 ? 23 : rtc.now().hour() - 1,
                                rtc.now().minute(),
                                rtc.now().second()));
        }
        if (btn == BUTTON_SELECT_PRESSED || millis() - timrMNU > 10000)
    2d72:	10 91 95 03 	lds	r17, 0x0395	; 0x800395 <btn>
    2d76:	11 30       	cpi	r17, 0x01	; 1
    2d78:	a9 f4       	brne	.+42     	; 0x2da4 <loop+0x930>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:385
        {
            appMode = APP_NORMAL_MODE;
    2d7a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:386
            lcd.clear();
    2d7e:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:388
        }
        if (btn == BUTTON_LEFT_PRESSED)
    2d82:	14 30       	cpi	r17, 0x04	; 4
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <loop+0x914>
    2d86:	52 cf       	rjmp	.-348    	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:390
        {
            appMode = APP_SETMIN_MODE;
    2d88:	87 e0       	ldi	r24, 0x07	; 7
    2d8a:	44 cf       	rjmp	.-376    	; 0x2c14 <loop+0x7a0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:358
                showTime();
                blink = false;
            }
            else
            {
                lcd.setCursor(2, 0);
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:359
                lcd.print("  ");
    2d94:	8b ec       	ldi	r24, 0xCB	; 203
    2d96:	91 e0       	ldi	r25, 0x01	; 1
    2d98:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:360
                blink = true;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    2da2:	77 cf       	rjmp	.-274    	; 0x2c92 <loop+0x81e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:383
                                rtc.now().day(),
                                rtc.now().hour() < 0 ? 23 : rtc.now().hour() - 1,
                                rtc.now().minute(),
                                rtc.now().second()));
        }
        if (btn == BUTTON_SELECT_PRESSED || millis() - timrMNU > 10000)
    2da4:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2da8:	c0 90 91 03 	lds	r12, 0x0391	; 0x800391 <timrMNU>
    2dac:	d0 90 92 03 	lds	r13, 0x0392	; 0x800392 <timrMNU+0x1>
    2db0:	e0 90 93 03 	lds	r14, 0x0393	; 0x800393 <timrMNU+0x2>
    2db4:	f0 90 94 03 	lds	r15, 0x0394	; 0x800394 <timrMNU+0x3>
    2db8:	6c 19       	sub	r22, r12
    2dba:	7d 09       	sbc	r23, r13
    2dbc:	8e 09       	sbc	r24, r14
    2dbe:	9f 09       	sbc	r25, r15
    2dc0:	61 31       	cpi	r22, 0x11	; 17
    2dc2:	77 42       	sbci	r23, 0x27	; 39
    2dc4:	81 05       	cpc	r24, r1
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	c0 f6       	brcc	.-80     	; 0x2d7a <loop+0x906>
    2dca:	db cf       	rjmp	.-74     	; 0x2d82 <loop+0x90e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:397
        }
        break;
    }
    case APP_SETMIN_MODE:
    {
        if (millis() - timr_Time > 300)
    2dcc:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2dd0:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <timr_Time>
    2dd4:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <timr_Time+0x1>
    2dd8:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <timr_Time+0x2>
    2ddc:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timr_Time+0x3>
    2de0:	60 1b       	sub	r22, r16
    2de2:	71 0b       	sbc	r23, r17
    2de4:	82 0b       	sbc	r24, r18
    2de6:	93 0b       	sbc	r25, r19
    2de8:	6d 32       	cpi	r22, 0x2D	; 45
    2dea:	71 40       	sbci	r23, 0x01	; 1
    2dec:	81 05       	cpc	r24, r1
    2dee:	91 05       	cpc	r25, r1
    2df0:	98 f0       	brcs	.+38     	; 0x2e18 <loop+0x9a4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:399
        {
            if (blink)
    2df2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    2df6:	88 23       	and	r24, r24
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <loop+0x988>
    2dfa:	7d c0       	rjmp	.+250    	; 0x2ef6 <loop+0xa82>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:401
            {
                showTime();
    2dfc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:402
                blink = false;
    2e00:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:410
            {
                lcd.setCursor(5, 0);
                lcd.print("  ");
                blink = true;
            }
            timr_Time = millis();
    2e04:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2e08:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <timr_Time>
    2e0c:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <timr_Time+0x1>
    2e10:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timr_Time+0x2>
    2e14:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:413
        }

        if (btn == BUTTON_UP_PRESSED)
    2e18:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2e1c:	82 30       	cpi	r24, 0x02	; 2
    2e1e:	89 f5       	brne	.+98     	; 0x2e82 <loop+0xa0e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:420
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() > 59 ? 0 : rtc.now().minute() + 1,
                                rtc.now().second()));
    2e20:	ce 01       	movw	r24, r28
    2e22:	c1 96       	adiw	r24, 0x31	; 49
    2e24:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e28:	0e a9       	ldd	r16, Y+54	; 0x36
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:419
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() > 59 ? 0 : rtc.now().minute() + 1,
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	8b 96       	adiw	r24, 0x2b	; 43
    2e2e:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:415
            timr_Time = millis();
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e34:	10 e0       	ldi	r17, 0x00	; 0
    2e36:	8c 33       	cpi	r24, 0x3C	; 60
    2e38:	30 f4       	brcc	.+12     	; 0x2e46 <loop+0x9d2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:419
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() > 59 ? 0 : rtc.now().minute() + 1,
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	85 96       	adiw	r24, 0x25	; 37
    2e3e:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:415
            timr_Time = millis();
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2e42:	19 a5       	ldd	r17, Y+41	; 0x29
    2e44:	1f 5f       	subi	r17, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:418
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
    2e46:	ce 01       	movw	r24, r28
    2e48:	4f 96       	adiw	r24, 0x1f	; 31
    2e4a:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e4e:	fa a0       	ldd	r15, Y+34	; 0x22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:417

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
    2e50:	ce 01       	movw	r24, r28
    2e52:	49 96       	adiw	r24, 0x19	; 25
    2e54:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e58:	eb 8c       	ldd	r14, Y+27	; 0x1b
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:416
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	43 96       	adiw	r24, 0x13	; 19
    2e5e:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e62:	dc 88       	ldd	r13, Y+20	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:415
            timr_Time = millis();
        }

        if (btn == BUTTON_UP_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2e64:	ce 01       	movw	r24, r28
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    2e6e:	8f ab       	std	Y+55, r24	; 0x37
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    2e70:	d8 ae       	std	Y+56, r13	; 0x38
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    2e72:	e9 ae       	std	Y+57, r14	; 0x39
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    2e74:	fa ae       	std	Y+58, r15	; 0x3a
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    2e76:	1b af       	std	Y+59, r17	; 0x3b
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    2e78:	0c af       	std	Y+60, r16	; 0x3c
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:415
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	c7 96       	adiw	r24, 0x37	; 55
    2e7e:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:422
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() > 59 ? 0 : rtc.now().minute() + 1,
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
    2e82:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2e86:	83 30       	cpi	r24, 0x03	; 3
    2e88:	69 f5       	brne	.+90     	; 0x2ee4 <loop+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:429
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() < 0 ? 59 : rtc.now().minute() - 1,
                                rtc.now().second()));
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	c1 96       	adiw	r24, 0x31	; 49
    2e8e:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e92:	0e a9       	ldd	r16, Y+54	; 0x36
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:428
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() < 0 ? 59 : rtc.now().minute() - 1,
    2e94:	ce 01       	movw	r24, r28
    2e96:	8b 96       	adiw	r24, 0x2b	; 43
    2e98:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	85 96       	adiw	r24, 0x25	; 37
    2ea0:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:424
                                rtc.now().minute() > 59 ? 0 : rtc.now().minute() + 1,
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2ea4:	19 a5       	ldd	r17, Y+41	; 0x29
    2ea6:	11 50       	subi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:427
                                rtc.now().month(),
                                rtc.now().day(),
                                rtc.now().hour(),
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	4f 96       	adiw	r24, 0x1f	; 31
    2eac:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2eb0:	fa a0       	ldd	r15, Y+34	; 0x22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:426
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
                                rtc.now().day(),
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	49 96       	adiw	r24, 0x19	; 25
    2eb6:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2eba:	eb 8c       	ldd	r14, Y+27	; 0x1b
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:425
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
                                rtc.now().month(),
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	43 96       	adiw	r24, 0x13	; 19
    2ec0:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2ec4:	dc 88       	ldd	r13, Y+20	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:424
                                rtc.now().minute() > 59 ? 0 : rtc.now().minute() + 1,
                                rtc.now().second()));
        }
        if (btn == BUTTON_DOWN_PRESSED)
        {
            rtc.adjust(DateTime(rtc.now().year(),
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    2ed0:	8f ab       	std	Y+55, r24	; 0x37
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    2ed2:	d8 ae       	std	Y+56, r13	; 0x38
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    2ed4:	e9 ae       	std	Y+57, r14	; 0x39
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    2ed6:	fa ae       	std	Y+58, r15	; 0x3a
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    2ed8:	1b af       	std	Y+59, r17	; 0x3b
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    2eda:	0c af       	std	Y+60, r16	; 0x3c
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:424
    2edc:	ce 01       	movw	r24, r28
    2ede:	c7 96       	adiw	r24, 0x37	; 55
    2ee0:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:431
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() < 0 ? 59 : rtc.now().minute() - 1,
                                rtc.now().second()));
        }
        if (btn == BUTTON_SELECT_PRESSED || btn == BUTTON_LEFT_PRESSED || millis() - timrMNU > 10000)
    2ee4:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	89 f4       	brne	.+34     	; 0x2f0e <loop+0xa9a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:433
        {
            appMode = APP_NORMAL_MODE;
    2eec:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:434
            lcd.clear();
    2ef0:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
    2ef4:	9b ce       	rjmp	.-714    	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:406
                showTime();
                blink = false;
            }
            else
            {
                lcd.setCursor(5, 0);
    2ef6:	60 e0       	ldi	r22, 0x00	; 0
    2ef8:	85 e0       	ldi	r24, 0x05	; 5
    2efa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:407
                lcd.print("  ");
    2efe:	8b ec       	ldi	r24, 0xCB	; 203
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:408
                blink = true;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    2f0c:	7b cf       	rjmp	.-266    	; 0x2e04 <loop+0x990>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:431
                                rtc.now().day(),
                                rtc.now().hour(),
                                rtc.now().minute() < 0 ? 59 : rtc.now().minute() - 1,
                                rtc.now().second()));
        }
        if (btn == BUTTON_SELECT_PRESSED || btn == BUTTON_LEFT_PRESSED || millis() - timrMNU > 10000)
    2f0e:	84 30       	cpi	r24, 0x04	; 4
    2f10:	69 f3       	breq	.-38     	; 0x2eec <loop+0xa78>
    2f12:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2f16:	00 91 91 03 	lds	r16, 0x0391	; 0x800391 <timrMNU>
    2f1a:	10 91 92 03 	lds	r17, 0x0392	; 0x800392 <timrMNU+0x1>
    2f1e:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <timrMNU+0x2>
    2f22:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <timrMNU+0x3>
    2f26:	60 1b       	sub	r22, r16
    2f28:	71 0b       	sbc	r23, r17
    2f2a:	82 0b       	sbc	r24, r18
    2f2c:	93 0b       	sbc	r25, r19
    2f2e:	61 31       	cpi	r22, 0x11	; 17
    2f30:	77 42       	sbci	r23, 0x27	; 39
    2f32:	81 05       	cpc	r24, r1
    2f34:	91 05       	cpc	r25, r1
    2f36:	d0 f6       	brcc	.-76     	; 0x2eec <loop+0xa78>
    2f38:	79 ce       	rjmp	.-782    	; 0x2c2c <loop+0x7b8>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2f3a:	88 e0       	ldi	r24, 0x08	; 8
    2f3c:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2f40:	60 e0       	ldi	r22, 0x00	; 0
    2f42:	84 eb       	ldi	r24, 0xB4	; 180
    2f44:	95 e0       	ldi	r25, 0x05	; 5
    2f46:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:441
        break;
    }
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:442
        lcd.print("CHANT PLAYING...");
    2f52:	83 ee       	ldi	r24, 0xE3	; 227
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:443
        if (millis() >= timrAmp + ampDelay)
    2f5a:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    2f5e:	ab 01       	movw	r20, r22
    2f60:	bc 01       	movw	r22, r24
    2f62:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timrAmp>
    2f66:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timrAmp+0x1>
    2f6a:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timrAmp+0x2>
    2f6e:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timrAmp+0x3>
    2f72:	88 57       	subi	r24, 0x78	; 120
    2f74:	9c 4e       	sbci	r25, 0xEC	; 236
    2f76:	af 4f       	sbci	r26, 0xFF	; 255
    2f78:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7a:	48 17       	cp	r20, r24
    2f7c:	59 07       	cpc	r21, r25
    2f7e:	6a 07       	cpc	r22, r26
    2f80:	7b 07       	cpc	r23, r27
    2f82:	08 f4       	brcc	.+2      	; 0x2f86 <loop+0xb12>
    2f84:	53 ce       	rjmp	.-858    	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:444
            PlayChant();
    2f86:	0e 94 a2 10 	call	0x2144	; 0x2144 <PlayChant()>
    2f8a:	50 ce       	rjmp	.-864    	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:460
        //     Menu1.reset();
        //     appMode = APP_NORMAL_MODE;
        //     lcd.clear();
        // }

        switch (Menu1.getCurrentItemCmdId())
    2f8c:	0e 94 c8 02 	call	0x590	; 0x590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    2f90:	8a 31       	cpi	r24, 0x1A	; 26
    2f92:	08 f0       	brcs	.+2      	; 0x2f96 <loop+0xb22>
    2f94:	5c c0       	rjmp	.+184    	; 0x304e <loop+0xbda>
    2f96:	88 31       	cpi	r24, 0x18	; 24
    2f98:	08 f0       	brcs	.+2      	; 0x2f9c <loop+0xb28>
    2f9a:	5d c0       	rjmp	.+186    	; 0x3056 <loop+0xbe2>
    2f9c:	82 30       	cpi	r24, 0x02	; 2
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <loop+0xb2e>
    2fa0:	92 c0       	rjmp	.+292    	; 0x30c6 <loop+0xc52>
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <loop+0xb34>
    2fa6:	57 c0       	rjmp	.+174    	; 0x3056 <loop+0xbe2>
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	09 f4       	brne	.+2      	; 0x2fae <loop+0xb3a>
    2fac:	57 c0       	rjmp	.+174    	; 0x305c <loop+0xbe8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:483
        case mnuCmdSetDate:
            blinkMode = setDate;
            break;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    2fae:	10 91 95 03 	lds	r17, 0x0395	; 0x800395 <btn>
    2fb2:	14 38       	cpi	r17, 0x84	; 132
    2fb4:	a1 f4       	brne	.+40     	; 0x2fde <loop+0xb6a>
reset():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    2fb6:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <Menu1>
    2fba:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <Menu1+0x1>
    2fbe:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <Menu1+0x4>
    2fc2:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    2fc6:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <Menu1+0x2>
    2fca:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    2fce:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:21
  menuStackCount = 0;
    2fd2:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:486
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    2fd6:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:487
            lcd.clear();
    2fda:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1416
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    2fde:	0e 94 59 02 	call	0x4b2	; 0x4b2 <MenuManager::currentItemHasChildren() [clone .constprop.95]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1418

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    2fe2:	81 2f       	mov	r24, r17
    2fe4:	8f 77       	andi	r24, 0x7F	; 127
    2fe6:	82 30       	cpi	r24, 0x02	; 2
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <loop+0xb78>
    2fea:	70 c0       	rjmp	.+224    	; 0x30cc <loop+0xc58>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1420
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    2fec:	83 30       	cpi	r24, 0x03	; 3
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <loop+0xb7e>
    2ff0:	6f c0       	rjmp	.+222    	; 0x30d0 <loop+0xc5c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1422
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    2ff2:	11 30       	cpi	r17, 0x01	; 1
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <loop+0xb84>
    2ff6:	6e c0       	rjmp	.+220    	; 0x30d4 <loop+0xc60>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1424
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    2ff8:	14 34       	cpi	r17, 0x44	; 68
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <loop+0xb8a>
    2ffc:	6d c0       	rjmp	.+218    	; 0x30d8 <loop+0xc64>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1415
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    2ffe:	10 e0       	ldi	r17, 0x00	; 0
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    3000:	8d ef       	ldi	r24, 0xFD	; 253
    3002:	81 0f       	add	r24, r17
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	08 f0       	brcs	.+2      	; 0x300a <loop+0xb96>
    3008:	ee c0       	rjmp	.+476    	; 0x31e6 <loop+0xd72>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    300a:	0e 94 c8 02 	call	0x590	; 0x590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    300e:	88 23       	and	r24, r24
    3010:	09 f4       	brne	.+2      	; 0x3014 <loop+0xba0>
    3012:	64 c0       	rjmp	.+200    	; 0x30dc <loop+0xc68>
    3014:	14 30       	cpi	r17, 0x04	; 4
    3016:	09 f4       	brne	.+2      	; 0x301a <loop+0xba6>
    3018:	61 c0       	rjmp	.+194    	; 0x30dc <loop+0xc68>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    301a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <MenuManager::currentItemHasChildren() [clone .constprop.95]>
    301e:	81 11       	cpse	r24, r1
    3020:	a0 c0       	rjmp	.+320    	; 0x3162 <loop+0xcee>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:502
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:503
            if (Menu1.getCurrentItemCmdId())
    3028:	0e 94 c8 02 	call	0x590	; 0x590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    302c:	88 23       	and	r24, r24
    302e:	09 f4       	brne	.+2      	; 0x3032 <loop+0xbbe>
    3030:	fd cd       	rjmp	.-1030   	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:505
            {
                lcd.setCursor(0, 1);
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:506
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    303a:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:531
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    303c:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <strbuf>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:532
            strbuf[1] = 0;
    3040:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:533
            lcd.print(strbuf);
    3044:	8d e2       	ldi	r24, 0x2D	; 45
    3046:	95 e0       	ldi	r25, 0x05	; 5
    3048:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
    304c:	ef cd       	rjmp	.-1058   	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:460
        //     Menu1.reset();
        //     appMode = APP_NORMAL_MODE;
        //     lcd.clear();
        // }

        switch (Menu1.getCurrentItemCmdId())
    304e:	8b 51       	subi	r24, 0x1B	; 27
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	08 f0       	brcs	.+2      	; 0x3056 <loop+0xbe2>
    3054:	ac cf       	rjmp	.-168    	; 0x2fae <loop+0xb3a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:476
        case mnuCmdLt1OffTime:
        case mnuCmdPlrMorOnTime:
        case mnuCmdPlrMorDur:
        case mnuCmdPlrEveOnTime:
        case mnuCmdPlrEveDur:
            blinkMode = setHr;
    3056:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <blinkMode>
    305a:	a9 cf       	rjmp	.-174    	; 0x2fae <loop+0xb3a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:463
        // }

        switch (Menu1.getCurrentItemCmdId())
        {
        case mnuCmdSetDateTime:
            StDate = rtc.now().day();
    305c:	ce 01       	movw	r24, r28
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <StDate+0x1>
    306c:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <StDate>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:464
            StMonth = rtc.now().month();
    3070:	ce 01       	movw	r24, r28
    3072:	01 96       	adiw	r24, 0x01	; 1
    3074:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <StMonth+0x1>
    3080:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <StMonth>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:465
            StYear = rtc.now().year();
    3084:	ce 01       	movw	r24, r28
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	80 53       	subi	r24, 0x30	; 48
    3092:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:465
    3094:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <StYear+0x1>
    3098:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <StYear>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:466
            StHr = rtc.now().hour();
    309c:	ce 01       	movw	r24, r28
    309e:	01 96       	adiw	r24, 0x01	; 1
    30a0:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    30a4:	8c 81       	ldd	r24, Y+4	; 0x04
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <StHr+0x1>
    30ac:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <StHr>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:467
            StMin = rtc.now().minute();
    30b0:	ce 01       	movw	r24, r28
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <StMin+0x1>
    30c0:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <StMin>
    30c4:	74 cf       	rjmp	.-280    	; 0x2fae <loop+0xb3a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:479
        case mnuCmdPlrEveOnTime:
        case mnuCmdPlrEveDur:
            blinkMode = setHr;
            break;
        case mnuCmdSetDate:
            blinkMode = setDate;
    30c6:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <blinkMode>
    30ca:	71 cf       	rjmp	.-286    	; 0x2fae <loop+0xb3a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1419
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    30cc:	11 e0       	ldi	r17, 0x01	; 1
    30ce:	98 cf       	rjmp	.-208    	; 0x3000 <loop+0xb8c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1421
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    30d0:	12 e0       	ldi	r17, 0x02	; 2
    30d2:	96 cf       	rjmp	.-212    	; 0x3000 <loop+0xb8c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1423
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    30d4:	13 e0       	ldi	r17, 0x03	; 3
    30d6:	94 cf       	rjmp	.-216    	; 0x3000 <loop+0xb8c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1425
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    30d8:	14 e0       	ldi	r17, 0x04	; 4
    30da:	92 cf       	rjmp	.-220    	; 0x3000 <loop+0xb8c>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    30dc:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    30e0:	81 11       	cpse	r24, r1
    30e2:	1a c0       	rjmp	.+52     	; 0x3118 <loop+0xca4>
reset():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    30e4:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <Menu1>
    30e8:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <Menu1+0x1>
    30ec:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <Menu1+0x4>
    30f0:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    30f4:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <Menu1+0x2>
    30f8:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    30fc:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:493
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            if (!digitalRead(STA_PIN))
    3100:	84 e0       	ldi	r24, 0x04	; 4
    3102:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    3106:	89 2b       	or	r24, r25
    3108:	11 f4       	brne	.+4      	; 0x310e <loop+0xc9a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:495
            {
                stopPreSong();
    310a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:497
            }
            lcd.clear();
    310e:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:498
            appMode = APP_NORMAL_MODE;
    3112:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
    3116:	8a cd       	rjmp	.-1260   	; 0x2c2c <loop+0x7b8>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    3118:	81 50       	subi	r24, 0x01	; 1
    311a:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    311e:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    3120:	dc 01       	movw	r26, r24
    3122:	aa 0f       	add	r26, r26
    3124:	bb 1f       	adc	r27, r27
    3126:	aa 0f       	add	r26, r26
    3128:	bb 1f       	adc	r27, r27
    312a:	a2 5c       	subi	r26, 0xC2	; 194
    312c:	ba 4f       	sbci	r27, 0xFA	; 250
    312e:	19 96       	adiw	r26, 0x09	; 9
    3130:	2d 91       	ld	r18, X+
    3132:	3c 91       	ld	r19, X
    3134:	1a 97       	sbiw	r26, 0x0a	; 10
    3136:	30 93 42 05 	sts	0x0542, r19	; 0x800542 <Menu1+0x4>
    313a:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	fc 01       	movw	r30, r24
    3148:	ea 5b       	subi	r30, 0xBA	; 186
    314a:	fa 4f       	sbci	r31, 0xFA	; 250
    314c:	80 81       	ld	r24, Z
    314e:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    3152:	17 96       	adiw	r26, 0x07	; 7
    3154:	8c 91       	ld	r24, X
    3156:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    315a:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    315c:	0e 94 c2 11 	call	0x2384	; 0x2384 <refreshMenuDisplay(unsigned char)>
    3160:	65 cd       	rjmp	.-1334   	; 0x2c2c <loop+0x7b8>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    3162:	0e 94 59 02 	call	0x4b2	; 0x4b2 <MenuManager::currentItemHasChildren() [clone .constprop.95]>
    3166:	88 23       	and	r24, r24
    3168:	09 f4       	brne	.+2      	; 0x316c <loop+0xcf8>
    316a:	3b c0       	rjmp	.+118    	; 0x31e2 <loop+0xd6e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    316c:	50 91 44 05 	lds	r21, 0x0544	; 0x800544 <Menu1+0x6>
    3170:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <Menu1+0x3>
    3174:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    3178:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <Menu1+0x1b>
    317c:	45 30       	cpi	r20, 0x05	; 5
    317e:	e8 f4       	brcc	.+58     	; 0x31ba <loop+0xd46>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3180:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    3184:	24 2f       	mov	r18, r20
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	d9 01       	movw	r26, r18
    318a:	aa 0f       	add	r26, r26
    318c:	bb 1f       	adc	r27, r27
    318e:	aa 0f       	add	r26, r26
    3190:	bb 1f       	adc	r27, r27
    3192:	a2 5c       	subi	r26, 0xC2	; 194
    3194:	ba 4f       	sbci	r27, 0xFA	; 250
    3196:	17 96       	adiw	r26, 0x07	; 7
    3198:	5c 93       	st	X, r21
    319a:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    319c:	22 0f       	add	r18, r18
    319e:	33 1f       	adc	r19, r19
    31a0:	22 0f       	add	r18, r18
    31a2:	33 1f       	adc	r19, r19
    31a4:	f9 01       	movw	r30, r18
    31a6:	ea 5b       	subi	r30, 0xBA	; 186
    31a8:	fa 4f       	sbci	r31, 0xFA	; 250
    31aa:	60 83       	st	Z, r22
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    31ac:	1a 96       	adiw	r26, 0x0a	; 10
    31ae:	9c 93       	st	X, r25
    31b0:	8e 93       	st	-X, r24
    31b2:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:215
    menuStackCount++;
    31b4:	4f 5f       	subi	r20, 0xFF	; 255
    31b6:	40 93 59 05 	sts	0x0559, r20	; 0x800559 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    31ba:	f6 e0       	ldi	r31, 0x06	; 6
    31bc:	5f 9f       	mul	r21, r31
    31be:	80 0d       	add	r24, r0
    31c0:	91 1d       	adc	r25, r1
    31c2:	11 24       	eor	r1, r1
    31c4:	fc 01       	movw	r30, r24
    31c6:	35 96       	adiw	r30, 0x05	; 5
    31c8:	e4 91       	lpm	r30, Z
    31ca:	e0 93 43 05 	sts	0x0543, r30	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    31ce:	fc 01       	movw	r30, r24
    31d0:	33 96       	adiw	r30, 0x03	; 3
    31d2:	85 91       	lpm	r24, Z+
    31d4:	94 91       	lpm	r25, Z
    31d6:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <Menu1+0x4>
    31da:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    31de:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	bb cf       	rjmp	.-138    	; 0x315c <loop+0xce8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    31e6:	11 30       	cpi	r17, 0x01	; 1
    31e8:	51 f4       	brne	.+20     	; 0x31fe <loop+0xd8a>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    31ea:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <Menu1+0x6>
    31ee:	88 23       	and	r24, r24
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <loop+0xd80>
    31f2:	1c cd       	rjmp	.-1480   	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    31f4:	81 50       	subi	r24, 0x01	; 1
    31f6:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	af cf       	rjmp	.-162    	; 0x315c <loop+0xce8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    31fe:	12 30       	cpi	r17, 0x02	; 2
    3200:	09 f0       	breq	.+2      	; 0x3204 <loop+0xd90>
    3202:	14 cd       	rjmp	.-1496   	; 0x2c2c <loop+0x7b8>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    3204:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <Menu1+0x6>
    3208:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <Menu1+0x5>
    320c:	21 50       	subi	r18, 0x01	; 1
    320e:	33 0b       	sbc	r19, r19
    3210:	82 17       	cp	r24, r18
    3212:	13 06       	cpc	r1, r19
    3214:	0c f0       	brlt	.+2      	; 0x3218 <loop+0xda4>
    3216:	0a cd       	rjmp	.-1516   	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	9d cf       	rjmp	.-198    	; 0x315c <loop+0xce8>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:515
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    3222:	0e 94 c8 02 	call	0x590	; 0x590 <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    3226:	f8 2e       	mov	r15, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:708
    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }

    switch (cmdId)
    3228:	ee ef       	ldi	r30, 0xFE	; 254
    322a:	e8 0f       	add	r30, r24
    322c:	e0 32       	cpi	r30, 0x20	; 32
    322e:	10 f0       	brcs	.+4      	; 0x3234 <loop+0xdc0>
    3230:	0c 94 96 22 	jmp	0x452c	; 0x452c <loop+0x20b8>
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	e1 5e       	subi	r30, 0xE1	; 225
    3238:	f6 4e       	sbci	r31, 0xE6	; 230
    323a:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__tablejump2__>
    323e:	3f 19       	sub	r19, r15
    3240:	1a 1a       	sub	r1, r26
    3242:	96 22       	and	r9, r22
    3244:	a1 1a       	sub	r10, r17
    3246:	d0 1a       	sub	r13, r16
    3248:	fc 1a       	sub	r15, r28
    324a:	24 1b       	sub	r18, r20
    324c:	51 1b       	sub	r21, r17
    324e:	88 1b       	sub	r24, r24
    3250:	96 22       	and	r9, r22
    3252:	9c 1b       	sub	r25, r28
    3254:	cb 1b       	sub	r28, r27
    3256:	96 22       	and	r9, r22
    3258:	e3 1b       	sub	r30, r19
    325a:	3f 1c       	adc	r3, r15
    325c:	11 1c       	adc	r1, r1
    325e:	6d 1c       	adc	r6, r13
    3260:	9b 1c       	adc	r9, r11
    3262:	c3 1c       	adc	r12, r3
    3264:	fd 1c       	adc	r15, r13
    3266:	ca 21       	and	r28, r10
    3268:	96 22       	and	r9, r22
    326a:	32 1d       	adc	r19, r2
    326c:	e7 1d       	adc	r30, r7
    326e:	96 22       	and	r9, r22
    3270:	95 1e       	adc	r9, r21
    3272:	43 1f       	adc	r20, r19
    3274:	f1 1f       	adc	r31, r17
    3276:	9d 20       	and	r9, r13
    3278:	96 22       	and	r9, r22
    327a:	4b 21       	and	r20, r11
    327c:	88 21       	and	r24, r8
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:712
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    327e:	12 30       	cpi	r17, 0x02	; 2
    3280:	09 f0       	breq	.+2      	; 0x3284 <loop+0xe10>
    3282:	59 c0       	rjmp	.+178    	; 0x3336 <loop+0xec2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:714
        {
            if (blinkMode == setDate)
    3284:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	61 f5       	brne	.+88     	; 0x32e4 <loop+0xe70>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:715
                StDate = ++StDate > 31 ? 1 : StDate;
    328c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <StDate>
    3290:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <StDate+0x1>
    3294:	01 96       	adiw	r24, 0x01	; 1
    3296:	80 32       	cpi	r24, 0x20	; 32
    3298:	91 05       	cpc	r25, r1
    329a:	14 f0       	brlt	.+4      	; 0x32a0 <loop+0xe2c>
loop():
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    32a0:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <StDate+0x1>
    32a4:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <StDate>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    32a8:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    32aa:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1357
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    32ac:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    32b0:	84 34       	cpi	r24, 0x44	; 68
    32b2:	21 f0       	breq	.+8      	; 0x32bc <loop+0xe48>
    32b4:	00 23       	and	r16, r16
    32b6:	11 f4       	brne	.+4      	; 0x32bc <loop+0xe48>
    32b8:	0c 94 06 23 	jmp	0x460c	; 0x460c <loop+0x2198>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1360
    {
        complete = true;
        lcd.setCursor(1, 1);
    32bc:	61 e0       	ldi	r22, 0x01	; 1
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1361
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    32c4:	8f 2d       	mov	r24, r15
    32c6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Config::getFormattedStr(unsigned char) [clone .constprop.86]>
    32ca:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    32ce:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:528
        //     appMode = APP_NORMAL_MODE;
        //     lcd.clear();
        // }
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:530
            // clear forward arrow
            lcd.setCursor(0, 1);
    32d8:	61 e0       	ldi	r22, 0x01	; 1
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:531
            strbuf[0] = ' '; // clear forward arrow
    32e0:	80 e2       	ldi	r24, 0x20	; 32
    32e2:	ac ce       	rjmp	.-680    	; 0x303c <loop+0xbc8>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:716
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    32e4:	83 30       	cpi	r24, 0x03	; 3
    32e6:	89 f4       	brne	.+34     	; 0x330a <loop+0xe96>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:717
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    32e8:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <StMonth>
    32ec:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <StMonth+0x1>
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	8d 30       	cpi	r24, 0x0D	; 13
    32f4:	91 05       	cpc	r25, r1
    32f6:	14 f0       	brlt	.+4      	; 0x32fc <loop+0xe88>
loop():
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    32fc:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <StMonth+0x1>
    3300:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <StMonth>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3304:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3306:	00 e0       	ldi	r16, 0x00	; 0
    3308:	d1 cf       	rjmp	.-94     	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    330a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    330c:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:718
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    330e:	84 30       	cpi	r24, 0x04	; 4
    3310:	69 f6       	brne	.-102    	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:719
                StYear = ++StYear > 2050 ? 2020 : StYear;
    3312:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <StYear>
    3316:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <StYear+0x1>
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	83 30       	cpi	r24, 0x03	; 3
    331e:	28 e0       	ldi	r18, 0x08	; 8
    3320:	92 07       	cpc	r25, r18
    3322:	14 f0       	brlt	.+4      	; 0x3328 <loop+0xeb4>
loop():
    3324:	84 ee       	ldi	r24, 0xE4	; 228
    3326:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
    3328:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <StYear+0x1>
    332c:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <StYear>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3330:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3332:	00 e0       	ldi	r16, 0x00	; 0
    3334:	bb cf       	rjmp	.-138    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:721
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    3336:	13 30       	cpi	r17, 0x03	; 3
    3338:	09 f0       	breq	.+2      	; 0x333c <loop+0xec8>
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <loop+0xf46>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:723
        {
            if (blinkMode == setDate)
    333c:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	89 f4       	brne	.+34     	; 0x3366 <loop+0xef2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:724
                StDate = --StDate < 1 ? 31 : StDate;
    3344:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <StDate>
    3348:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <StDate+0x1>
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	18 16       	cp	r1, r24
    3350:	19 06       	cpc	r1, r25
    3352:	14 f0       	brlt	.+4      	; 0x3358 <loop+0xee4>
loop():
    3354:	8f e1       	ldi	r24, 0x1F	; 31
    3356:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3358:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <StDate+0x1>
    335c:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <StDate>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3360:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	a3 cf       	rjmp	.-186    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:725
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
    3366:	83 30       	cpi	r24, 0x03	; 3
    3368:	89 f4       	brne	.+34     	; 0x338c <loop+0xf18>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:726
                StMonth = --StMonth < 1 ? 12 : StMonth;
    336a:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <StMonth>
    336e:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <StMonth+0x1>
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	18 16       	cp	r1, r24
    3376:	19 06       	cpc	r1, r25
    3378:	14 f0       	brlt	.+4      	; 0x337e <loop+0xf0a>
loop():
    337a:	8c e0       	ldi	r24, 0x0C	; 12
    337c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    337e:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <StMonth+0x1>
    3382:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <StMonth>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3386:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3388:	00 e0       	ldi	r16, 0x00	; 0
    338a:	90 cf       	rjmp	.-224    	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    338c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    338e:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:727
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
    3390:	84 30       	cpi	r24, 0x04	; 4
    3392:	09 f0       	breq	.+2      	; 0x3396 <loop+0xf22>
    3394:	8b cf       	rjmp	.-234    	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:728
                StYear = --StYear < 2050 ? 2020 : StYear;
    3396:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <StYear>
    339a:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <StYear+0x1>
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	82 30       	cpi	r24, 0x02	; 2
    33a2:	68 e0       	ldi	r22, 0x08	; 8
    33a4:	96 07       	cpc	r25, r22
    33a6:	14 f4       	brge	.+4      	; 0x33ac <loop+0xf38>
loop():
    33a8:	84 ee       	ldi	r24, 0xE4	; 228
    33aa:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
    33ac:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <StYear+0x1>
    33b0:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <StYear>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    33b4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    33b6:	00 e0       	ldi	r16, 0x00	; 0
    33b8:	79 cf       	rjmp	.-270    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:730
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    33ba:	11 30       	cpi	r17, 0x01	; 1
    33bc:	11 f0       	breq	.+4      	; 0x33c2 <loop+0xf4e>
    33be:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <loop+0x20c0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:732
        {
            if (blinkMode == setDate)
    33c2:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	31 f4       	brne	.+12     	; 0x33d6 <loop+0xf62>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:734
            {
                blinkMode = setMonth;
    33ca:	83 e0       	ldi	r24, 0x03	; 3
    33cc:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <blinkMode>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    33d0:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    33d2:	00 e0       	ldi	r16, 0x00	; 0
    33d4:	6b cf       	rjmp	.-298    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:736
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    33d6:	83 30       	cpi	r24, 0x03	; 3
    33d8:	31 f4       	brne	.+12     	; 0x33e6 <loop+0xf72>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:738
            {
                blinkMode = setYear;
    33da:	84 e0       	ldi	r24, 0x04	; 4
    33dc:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <blinkMode>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    33e0:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    33e2:	00 e0       	ldi	r16, 0x00	; 0
    33e4:	63 cf       	rjmp	.-314    	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    33e6:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    33e8:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:740
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
    33ea:	84 30       	cpi	r24, 0x04	; 4
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <loop+0xf7c>
    33ee:	5e cf       	rjmp	.-324    	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:742
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    33f0:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <StMin>
    33f4:	30 91 09 05 	lds	r19, 0x0509	; 0x800509 <StHr>
    33f8:	40 91 b1 04 	lds	r20, 0x04B1	; 0x8004b1 <StDate>
    33fc:	50 91 af 04 	lds	r21, 0x04AF	; 0x8004af <StMonth>
    3400:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <StYear>
    3404:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3408:	80 3d       	cpi	r24, 0xD0	; 208
    340a:	e7 e0       	ldi	r30, 0x07	; 7
    340c:	9e 07       	cpc	r25, r30
    340e:	10 f0       	brcs	.+4      	; 0x3414 <loop+0xfa0>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    3410:	80 5d       	subi	r24, 0xD0	; 208
    3412:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    3414:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3416:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3418:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    341a:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    341c:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    341e:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:742
    3420:	ce 01       	movw	r24, r28
    3422:	01 96       	adiw	r24, 0x01	; 1
    3424:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:744
                complete = true;
                blink = true;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:743
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
                complete = true;
    342e:	01 e0       	ldi	r16, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	3c cf       	rjmp	.-392    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:751
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3434:	12 30       	cpi	r17, 0x02	; 2
    3436:	49 f5       	brne	.+82     	; 0x348a <loop+0x1016>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:753
        {
            if (blinkMode == setHr)
    3438:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    343c:	01 11       	cpse	r16, r1
    343e:	10 c0       	rjmp	.+32     	; 0x3460 <loop+0xfec>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:754
                StHr = ++StHr > 23 ? 0 : StHr;
    3440:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <StHr>
    3444:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <StHr+0x1>
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	88 31       	cpi	r24, 0x18	; 24
    344c:	91 05       	cpc	r25, r1
    344e:	14 f0       	brlt	.+4      	; 0x3454 <loop+0xfe0>
loop():
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    3454:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <StHr+0x1>
    3458:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <StHr>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    345c:	10 e0       	ldi	r17, 0x00	; 0
    345e:	26 cf       	rjmp	.-436    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:755
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    3460:	01 30       	cpi	r16, 0x01	; 1
    3462:	11 f0       	breq	.+4      	; 0x3468 <loop+0xff4>
    3464:	0c 94 9e 22 	jmp	0x453c	; 0x453c <loop+0x20c8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:756
                StMin = ++StMin > 59 ? 0 : StMin;
    3468:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <StMin>
    346c:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <StMin+0x1>
    3470:	01 96       	adiw	r24, 0x01	; 1
    3472:	8c 33       	cpi	r24, 0x3C	; 60
    3474:	91 05       	cpc	r25, r1
    3476:	14 f0       	brlt	.+4      	; 0x347c <loop+0x1008>
loop():
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    347c:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <StMin+0x1>
    3480:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <StMin>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3484:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3486:	00 e0       	ldi	r16, 0x00	; 0
    3488:	11 cf       	rjmp	.-478    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:758
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    348a:	13 30       	cpi	r17, 0x03	; 3
    348c:	39 f5       	brne	.+78     	; 0x34dc <loop+0x1068>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:760
        {
            if (blinkMode == setHr)
    348e:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3492:	01 11       	cpse	r16, r1
    3494:	0f c0       	rjmp	.+30     	; 0x34b4 <loop+0x1040>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:761
                StHr = --StHr < 0 ? 23 : StHr;
    3496:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <StHr>
    349a:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <StHr+0x1>
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	97 ff       	sbrs	r25, 7
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <loop+0x1034>
loop():
    34a4:	87 e1       	ldi	r24, 0x17	; 23
    34a6:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    34a8:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <StHr+0x1>
    34ac:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <StHr>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    34b0:	10 e0       	ldi	r17, 0x00	; 0
    34b2:	fc ce       	rjmp	.-520    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:762
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
    34b4:	01 30       	cpi	r16, 0x01	; 1
    34b6:	11 f0       	breq	.+4      	; 0x34bc <loop+0x1048>
    34b8:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <loop+0x20d0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:763
                StMin = --StMin < 0 ? 59 : StMin;
    34bc:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <StMin>
    34c0:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <StMin+0x1>
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	97 ff       	sbrs	r25, 7
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <loop+0x105a>
loop():
    34ca:	8b e3       	ldi	r24, 0x3B	; 59
    34cc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    34ce:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <StMin+0x1>
    34d2:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <StMin>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    34d6:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    34d8:	00 e0       	ldi	r16, 0x00	; 0
    34da:	e8 ce       	rjmp	.-560    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:765
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    34dc:	11 30       	cpi	r17, 0x01	; 1
    34de:	11 f0       	breq	.+4      	; 0x34e4 <loop+0x1070>
    34e0:	0c 94 a6 22 	jmp	0x454c	; 0x454c <loop+0x20d8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:767
        {
            if (blinkMode == setHr)
    34e4:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    34e8:	01 11       	cpse	r16, r1
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <loop+0x1084>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:769
            {
                blinkMode = setMin;
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <blinkMode>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    34f2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    34f4:	00 e0       	ldi	r16, 0x00	; 0
    34f6:	da ce       	rjmp	.-588    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:771
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    34f8:	01 30       	cpi	r16, 0x01	; 1
    34fa:	11 f0       	breq	.+4      	; 0x3500 <loop+0x108c>
    34fc:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <loop+0x20e0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:773
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    3500:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <StMin>
    3504:	30 91 09 05 	lds	r19, 0x0509	; 0x800509 <StHr>
    3508:	40 91 b1 04 	lds	r20, 0x04B1	; 0x8004b1 <StDate>
    350c:	50 91 af 04 	lds	r21, 0x04AF	; 0x8004af <StMonth>
    3510:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <StYear>
    3514:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3518:	80 3d       	cpi	r24, 0xD0	; 208
    351a:	f7 e0       	ldi	r31, 0x07	; 7
    351c:	9f 07       	cpc	r25, r31
    351e:	10 f0       	brcs	.+4      	; 0x3524 <loop+0x10b0>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    3520:	80 5d       	subi	r24, 0xD0	; 208
    3522:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    3524:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3526:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3528:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    352a:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    352c:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    352e:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:773
    3530:	ce 01       	movw	r24, r28
    3532:	01 96       	adiw	r24, 0x01	; 1
    3534:	0e 94 bf 09 	call	0x137e	; 0x137e <RTC_DS1307::adjust(DateTime const&) [clone .constprop.16]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:775
                complete = true;
                blink = true;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    353e:	10 e0       	ldi	r17, 0x00	; 0
    3540:	b5 ce       	rjmp	.-662    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:784
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3542:	81 2f       	mov	r24, r17
    3544:	8f 77       	andi	r24, 0x7F	; 127
    3546:	82 30       	cpi	r24, 0x02	; 2
    3548:	89 f4       	brne	.+34     	; 0x356c <loop+0x10f8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:786
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    354a:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <config+0xf>
    354e:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <config+0x10>
    3552:	01 96       	adiw	r24, 0x01	; 1
    3554:	88 31       	cpi	r24, 0x18	; 24
    3556:	91 05       	cpc	r25, r1
    3558:	14 f0       	brlt	.+4      	; 0x355e <loop+0x10ea>
loop():
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    355e:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <config+0x10>
    3562:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <config+0xf>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:783
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    3566:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3568:	00 e0       	ldi	r16, 0x00	; 0
    356a:	a0 ce       	rjmp	.-704    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:788
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    356c:	83 30       	cpi	r24, 0x03	; 3
    356e:	81 f4       	brne	.+32     	; 0x3590 <loop+0x111c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:790
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    3570:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <config+0xf>
    3574:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <config+0x10>
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	97 ff       	sbrs	r25, 7
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <loop+0x110e>
loop():
    357e:	87 e1       	ldi	r24, 0x17	; 23
    3580:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3582:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <config+0x10>
    3586:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <config+0xf>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:783
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    358a:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    358c:	00 e0       	ldi	r16, 0x00	; 0
    358e:	8e ce       	rjmp	.-740    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:792
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3590:	11 30       	cpi	r17, 0x01	; 1
    3592:	09 f0       	breq	.+2      	; 0x3596 <loop+0x1122>
    3594:	e3 c7       	rjmp	.+4038   	; 0x455c <loop+0x20e8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:794
        {
            config.save();
    3596:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Config::save() [clone .constprop.19]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:783
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    359a:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:795
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    359c:	01 e0       	ldi	r16, 0x01	; 1
    359e:	86 ce       	rjmp	.-756    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:806
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    35a0:	81 2f       	mov	r24, r17
    35a2:	8f 77       	andi	r24, 0x7F	; 127
    35a4:	82 30       	cpi	r24, 0x02	; 2
    35a6:	89 f4       	brne	.+34     	; 0x35ca <loop+0x1156>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:808
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    35a8:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <config+0x11>
    35ac:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <config+0x12>
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	88 31       	cpi	r24, 0x18	; 24
    35b4:	91 05       	cpc	r25, r1
    35b6:	14 f0       	brlt	.+4      	; 0x35bc <loop+0x1148>
loop():
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    35bc:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <config+0x12>
    35c0:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <config+0x11>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:805
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    35c4:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    35c6:	00 e0       	ldi	r16, 0x00	; 0
    35c8:	71 ce       	rjmp	.-798    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:810
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    35ca:	83 30       	cpi	r24, 0x03	; 3
    35cc:	81 f4       	brne	.+32     	; 0x35ee <loop+0x117a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:812
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    35ce:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <config+0x11>
    35d2:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <config+0x12>
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	97 ff       	sbrs	r25, 7
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <loop+0x116c>
loop():
    35dc:	87 e1       	ldi	r24, 0x17	; 23
    35de:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    35e0:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <config+0x12>
    35e4:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <config+0x11>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:805
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    35e8:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    35ea:	00 e0       	ldi	r16, 0x00	; 0
    35ec:	5f ce       	rjmp	.-834    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:814
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    35ee:	11 30       	cpi	r17, 0x01	; 1
    35f0:	91 f2       	breq	.-92     	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    35f2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    35f4:	00 e0       	ldi	r16, 0x00	; 0
    35f6:	5a ce       	rjmp	.-844    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:828
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    35f8:	81 2f       	mov	r24, r17
    35fa:	8f 77       	andi	r24, 0x7F	; 127
    35fc:	82 30       	cpi	r24, 0x02	; 2
    35fe:	61 f4       	brne	.+24     	; 0x3618 <loop+0x11a4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:830
        {
            config.Song1_Count = ++config.Song1_Count;
    3600:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <config+0x1c>
    3604:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <config+0x1d>
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <config+0x1d>
    360e:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <config+0x1c>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:827
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    3612:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3614:	00 e0       	ldi	r16, 0x00	; 0
    3616:	4a ce       	rjmp	.-876    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:832
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3618:	83 30       	cpi	r24, 0x03	; 3
    361a:	81 f4       	brne	.+32     	; 0x363c <loop+0x11c8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:834
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    361c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <config+0x1c>
    3620:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <config+0x1d>
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	97 ff       	sbrs	r25, 7
    3628:	02 c0       	rjmp	.+4      	; 0x362e <loop+0x11ba>
loop():
    362a:	84 e6       	ldi	r24, 0x64	; 100
    362c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    362e:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <config+0x1d>
    3632:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <config+0x1c>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:827
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    3636:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3638:	00 e0       	ldi	r16, 0x00	; 0
    363a:	38 ce       	rjmp	.-912    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:836
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    363c:	11 30       	cpi	r17, 0x01	; 1
    363e:	09 f4       	brne	.+2      	; 0x3642 <loop+0x11ce>
    3640:	aa cf       	rjmp	.-172    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3642:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3644:	00 e0       	ldi	r16, 0x00	; 0
    3646:	32 ce       	rjmp	.-924    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:850
        break;
    }
    case mnuCmdBakLitDur:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3648:	81 2f       	mov	r24, r17
    364a:	8f 77       	andi	r24, 0x7F	; 127
    364c:	82 30       	cpi	r24, 0x02	; 2
    364e:	89 f4       	brne	.+34     	; 0x3672 <loop+0x11fe>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:852
        {
            config.backLightDur = ++config.backLightDur > 60 ? 0 : config.backLightDur;
    3650:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <config+0x13>
    3654:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <config+0x14>
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	8d 33       	cpi	r24, 0x3D	; 61
    365c:	91 05       	cpc	r25, r1
    365e:	14 f0       	brlt	.+4      	; 0x3664 <loop+0x11f0>
loop():
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    3664:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <config+0x14>
    3668:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <config+0x13>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:849
        }
        break;
    }
    case mnuCmdBakLitDur:
    {
        configChanged = true;
    366c:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    366e:	00 e0       	ldi	r16, 0x00	; 0
    3670:	1d ce       	rjmp	.-966    	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:854
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.backLightDur = ++config.backLightDur > 60 ? 0 : config.backLightDur;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3672:	83 30       	cpi	r24, 0x03	; 3
    3674:	81 f4       	brne	.+32     	; 0x3696 <loop+0x1222>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:856
        {
            config.backLightDur = --config.backLightDur < 0 ? 60 : config.backLightDur;
    3676:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <config+0x13>
    367a:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <config+0x14>
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	97 ff       	sbrs	r25, 7
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <loop+0x1214>
loop():
    3684:	8c e3       	ldi	r24, 0x3C	; 60
    3686:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3688:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <config+0x14>
    368c:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <config+0x13>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:849
        }
        break;
    }
    case mnuCmdBakLitDur:
    {
        configChanged = true;
    3690:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3692:	00 e0       	ldi	r16, 0x00	; 0
    3694:	0b ce       	rjmp	.-1002   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:858
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.backLightDur = --config.backLightDur < 0 ? 60 : config.backLightDur;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3696:	11 30       	cpi	r17, 0x01	; 1
    3698:	09 f4       	brne	.+2      	; 0x369c <loop+0x1228>
    369a:	7d cf       	rjmp	.-262    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    369c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    369e:	00 e0       	ldi	r16, 0x00	; 0
    36a0:	05 ce       	rjmp	.-1014   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:872
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    36a2:	81 2f       	mov	r24, r17
    36a4:	8f 77       	andi	r24, 0x7F	; 127
    36a6:	82 30       	cpi	r24, 0x02	; 2
    36a8:	89 f4       	brne	.+34     	; 0x36cc <loop+0x1258>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:874
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    36aa:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <config+0x15>
    36ae:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <config+0x16>
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	8f 31       	cpi	r24, 0x1F	; 31
    36b6:	91 05       	cpc	r25, r1
    36b8:	14 f0       	brlt	.+4      	; 0x36be <loop+0x124a>
loop():
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    36be:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <config+0x16>
    36c2:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <config+0x15>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:871
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    36c6:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    36c8:	00 e0       	ldi	r16, 0x00	; 0
    36ca:	f0 cd       	rjmp	.-1056   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:876
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    36cc:	83 30       	cpi	r24, 0x03	; 3
    36ce:	89 f4       	brne	.+34     	; 0x36f2 <loop+0x127e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:878
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    36d0:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <config+0x15>
    36d4:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <config+0x16>
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	18 16       	cp	r1, r24
    36dc:	19 06       	cpc	r1, r25
    36de:	14 f0       	brlt	.+4      	; 0x36e4 <loop+0x1270>
loop():
    36e0:	8e e1       	ldi	r24, 0x1E	; 30
    36e2:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    36e4:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <config+0x16>
    36e8:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <config+0x15>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:871
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    36ec:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    36ee:	00 e0       	ldi	r16, 0x00	; 0
    36f0:	dd cd       	rjmp	.-1094   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:880
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    36f2:	11 30       	cpi	r17, 0x01	; 1
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <loop+0x1284>
    36f6:	36 c7       	rjmp	.+3692   	; 0x4564 <loop+0x20f0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:882
        {
            config.save();
    36f8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Config::save() [clone .constprop.19]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    36fc:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <config+0x15>
    3700:	70 91 c9 04 	lds	r23, 0x04C9	; 0x8004c9 <config+0x16>
    3704:	77 27       	eor	r23, r23
    3706:	86 e0       	ldi	r24, 0x06	; 6
    3708:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:884
            myDFPlayer.volume(config.vol);
            complete = true;
    370c:	01 e0       	ldi	r16, 0x01	; 1
    370e:	ce cd       	rjmp	.-1124   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:896
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    3710:	8e ef       	ldi	r24, 0xFE	; 254
    3712:	81 0f       	add	r24, r17
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	50 f4       	brcc	.+20     	; 0x372c <loop+0x12b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:898
        {
            config.SchlZone = !config.SchlZone;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <config+0x19>
    371e:	91 11       	cpse	r25, r1
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <config+0x19>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:895
        break;
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
    3726:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3728:	00 e0       	ldi	r16, 0x00	; 0
    372a:	c0 cd       	rjmp	.-1152   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:900
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
        {
            config.SchlZone = !config.SchlZone;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    372c:	11 30       	cpi	r17, 0x01	; 1
    372e:	09 f4       	brne	.+2      	; 0x3732 <loop+0x12be>
    3730:	32 cf       	rjmp	.-412    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3732:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3734:	00 e0       	ldi	r16, 0x00	; 0
    3736:	ba cd       	rjmp	.-1164   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:915
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3738:	81 2f       	mov	r24, r17
    373a:	8f 77       	andi	r24, 0x7F	; 127
    373c:	82 30       	cpi	r24, 0x02	; 2
    373e:	89 f4       	brne	.+34     	; 0x3762 <loop+0x12ee>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:917
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    3740:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <demoTime>
    3744:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <demoTime+0x1>
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	88 31       	cpi	r24, 0x18	; 24
    374c:	91 05       	cpc	r25, r1
    374e:	14 f0       	brlt	.+4      	; 0x3754 <loop+0x12e0>
loop():
    3750:	84 e0       	ldi	r24, 0x04	; 4
    3752:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3754:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <demoTime+0x1>
    3758:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <demoTime>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:914
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    375c:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    375e:	00 e0       	ldi	r16, 0x00	; 0
    3760:	a5 cd       	rjmp	.-1206   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:919
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3762:	83 30       	cpi	r24, 0x03	; 3
    3764:	89 f4       	brne	.+34     	; 0x3788 <loop+0x1314>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:921
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3766:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <demoTime>
    376a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <demoTime+0x1>
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	84 30       	cpi	r24, 0x04	; 4
    3772:	91 05       	cpc	r25, r1
    3774:	14 f4       	brge	.+4      	; 0x377a <loop+0x1306>
loop():
    3776:	87 e1       	ldi	r24, 0x17	; 23
    3778:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    377a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <demoTime+0x1>
    377e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <demoTime>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:914
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    3782:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3784:	00 e0       	ldi	r16, 0x00	; 0
    3786:	92 cd       	rjmp	.-1244   	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:925
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            complete = true;
    3788:	01 e0       	ldi	r16, 0x01	; 1
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:923
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    378a:	11 30       	cpi	r17, 0x01	; 1
    378c:	09 f4       	brne	.+2      	; 0x3790 <loop+0x131c>
    378e:	8e cd       	rjmp	.-1252   	; 0x32ac <loop+0xe38>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3790:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3792:	00 e0       	ldi	r16, 0x00	; 0
    3794:	8b cd       	rjmp	.-1258   	; 0x32ac <loop+0xe38>
reset():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3796:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <Menu1>
    379a:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <Menu1+0x1>
    379e:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <Menu1+0x4>
    37a2:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    37a6:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <Menu1+0x2>
    37aa:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    37ae:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:21
  menuStackCount = 0;
    37b2:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:936
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    37b6:	84 e0       	ldi	r24, 0x04	; 4
    37b8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:937
        lcd.clear();
    37bc:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    37c0:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    37c2:	00 e0       	ldi	r16, 0x00	; 0
    37c4:	73 cd       	rjmp	.-1306   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:943
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    37c6:	81 2f       	mov	r24, r17
    37c8:	8f 77       	andi	r24, 0x7F	; 127
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	89 f4       	brne	.+34     	; 0x37f0 <loop+0x137c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:945
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    37ce:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <config+0x26>
    37d2:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <config+0x27>
    37d6:	01 96       	adiw	r24, 0x01	; 1
    37d8:	89 30       	cpi	r24, 0x09	; 9
    37da:	91 05       	cpc	r25, r1
    37dc:	14 f0       	brlt	.+4      	; 0x37e2 <loop+0x136e>
loop():
    37de:	83 e0       	ldi	r24, 0x03	; 3
    37e0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    37e2:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <config+0x27>
    37e6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <config+0x26>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:942
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    37ea:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    37ec:	00 e0       	ldi	r16, 0x00	; 0
    37ee:	5e cd       	rjmp	.-1348   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:947
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    37f0:	83 30       	cpi	r24, 0x03	; 3
    37f2:	89 f4       	brne	.+34     	; 0x3816 <loop+0x13a2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:949
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    37f4:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <config+0x26>
    37f8:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <config+0x27>
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	83 30       	cpi	r24, 0x03	; 3
    3800:	91 05       	cpc	r25, r1
    3802:	14 f4       	brge	.+4      	; 0x3808 <loop+0x1394>
loop():
    3804:	88 e0       	ldi	r24, 0x08	; 8
    3806:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3808:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <config+0x27>
    380c:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <config+0x26>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:942
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    3810:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3812:	00 e0       	ldi	r16, 0x00	; 0
    3814:	4b cd       	rjmp	.-1386   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:951
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3816:	11 30       	cpi	r17, 0x01	; 1
    3818:	09 f4       	brne	.+2      	; 0x381c <loop+0x13a8>
    381a:	bd ce       	rjmp	.-646    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    381c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    381e:	00 e0       	ldi	r16, 0x00	; 0
    3820:	45 cd       	rjmp	.-1398   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:965
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3822:	81 2f       	mov	r24, r17
    3824:	8f 77       	andi	r24, 0x7F	; 127
    3826:	82 30       	cpi	r24, 0x02	; 2
    3828:	89 f4       	brne	.+34     	; 0x384c <loop+0x13d8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:967
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    382a:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <config+0x2a>
    382e:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <config+0x2b>
    3832:	01 96       	adiw	r24, 0x01	; 1
    3834:	89 30       	cpi	r24, 0x09	; 9
    3836:	91 05       	cpc	r25, r1
    3838:	14 f0       	brlt	.+4      	; 0x383e <loop+0x13ca>
loop():
    383a:	83 e0       	ldi	r24, 0x03	; 3
    383c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    383e:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <config+0x2b>
    3842:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <config+0x2a>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:964
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    3846:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3848:	00 e0       	ldi	r16, 0x00	; 0
    384a:	30 cd       	rjmp	.-1440   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:969
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    384c:	83 30       	cpi	r24, 0x03	; 3
    384e:	89 f4       	brne	.+34     	; 0x3872 <loop+0x13fe>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:971
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    3850:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <config+0x2a>
    3854:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <config+0x2b>
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	83 30       	cpi	r24, 0x03	; 3
    385c:	91 05       	cpc	r25, r1
    385e:	14 f4       	brge	.+4      	; 0x3864 <loop+0x13f0>
loop():
    3860:	88 e0       	ldi	r24, 0x08	; 8
    3862:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3864:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <config+0x2b>
    3868:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <config+0x2a>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:964
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    386c:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    386e:	00 e0       	ldi	r16, 0x00	; 0
    3870:	1d cd       	rjmp	.-1478   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:973
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3872:	11 30       	cpi	r17, 0x01	; 1
    3874:	09 f4       	brne	.+2      	; 0x3878 <loop+0x1404>
    3876:	8f ce       	rjmp	.-738    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3878:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    387a:	00 e0       	ldi	r16, 0x00	; 0
    387c:	17 cd       	rjmp	.-1490   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:987
        break;
    }
    case mnuCmdMorSong2Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    387e:	81 2f       	mov	r24, r17
    3880:	8f 77       	andi	r24, 0x7F	; 127
    3882:	82 30       	cpi	r24, 0x02	; 2
    3884:	89 f4       	brne	.+34     	; 0x38a8 <loop+0x1434>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:989
        {
            config.MorSong2Time = ++config.MorSong2Time > 8 ? 3 : config.MorSong2Time;
    3886:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <config+0x28>
    388a:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <config+0x29>
    388e:	01 96       	adiw	r24, 0x01	; 1
    3890:	89 30       	cpi	r24, 0x09	; 9
    3892:	91 05       	cpc	r25, r1
    3894:	14 f0       	brlt	.+4      	; 0x389a <loop+0x1426>
loop():
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    389a:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <config+0x29>
    389e:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <config+0x28>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:986
        }
        break;
    }
    case mnuCmdMorSong2Time:
    {
        configChanged = true;
    38a2:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    38a4:	00 e0       	ldi	r16, 0x00	; 0
    38a6:	02 cd       	rjmp	.-1532   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:991
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong2Time = ++config.MorSong2Time > 8 ? 3 : config.MorSong2Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    38a8:	83 30       	cpi	r24, 0x03	; 3
    38aa:	89 f4       	brne	.+34     	; 0x38ce <loop+0x145a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:993
        {
            config.MorSong2Time = --config.MorSong2Time < 3 ? 8 : config.MorSong2Time;
    38ac:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <config+0x28>
    38b0:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <config+0x29>
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	83 30       	cpi	r24, 0x03	; 3
    38b8:	91 05       	cpc	r25, r1
    38ba:	14 f4       	brge	.+4      	; 0x38c0 <loop+0x144c>
loop():
    38bc:	88 e0       	ldi	r24, 0x08	; 8
    38be:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    38c0:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <config+0x29>
    38c4:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <config+0x28>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:986
        }
        break;
    }
    case mnuCmdMorSong2Time:
    {
        configChanged = true;
    38c8:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    38ca:	00 e0       	ldi	r16, 0x00	; 0
    38cc:	ef cc       	rjmp	.-1570   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:995
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong2Time = --config.MorSong2Time < 3 ? 8 : config.MorSong2Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    38ce:	11 30       	cpi	r17, 0x01	; 1
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <loop+0x1460>
    38d2:	61 ce       	rjmp	.-830    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    38d4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    38d6:	00 e0       	ldi	r16, 0x00	; 0
    38d8:	e9 cc       	rjmp	.-1582   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1009
        break;
    }
    case mnuCmdEveSong2Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    38da:	81 2f       	mov	r24, r17
    38dc:	8f 77       	andi	r24, 0x7F	; 127
    38de:	82 30       	cpi	r24, 0x02	; 2
    38e0:	89 f4       	brne	.+34     	; 0x3904 <loop+0x1490>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1011
        {
            config.EveSong2Time = ++config.EveSong2Time > 8 ? 3 : config.EveSong2Time;
    38e2:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <config+0x2c>
    38e6:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <config+0x2d>
    38ea:	01 96       	adiw	r24, 0x01	; 1
    38ec:	89 30       	cpi	r24, 0x09	; 9
    38ee:	91 05       	cpc	r25, r1
    38f0:	14 f0       	brlt	.+4      	; 0x38f6 <loop+0x1482>
loop():
    38f2:	83 e0       	ldi	r24, 0x03	; 3
    38f4:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    38f6:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <config+0x2d>
    38fa:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <config+0x2c>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1008
        }
        break;
    }
    case mnuCmdEveSong2Time:
    {
        configChanged = true;
    38fe:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3900:	00 e0       	ldi	r16, 0x00	; 0
    3902:	d4 cc       	rjmp	.-1624   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1013
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong2Time = ++config.EveSong2Time > 8 ? 3 : config.EveSong2Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3904:	83 30       	cpi	r24, 0x03	; 3
    3906:	89 f4       	brne	.+34     	; 0x392a <loop+0x14b6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1015
        {
            config.EveSong2Time = --config.EveSong2Time < 3 ? 8 : config.EveSong2Time;
    3908:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <config+0x2c>
    390c:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <config+0x2d>
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	83 30       	cpi	r24, 0x03	; 3
    3914:	91 05       	cpc	r25, r1
    3916:	14 f4       	brge	.+4      	; 0x391c <loop+0x14a8>
loop():
    3918:	88 e0       	ldi	r24, 0x08	; 8
    391a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    391c:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <config+0x2d>
    3920:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <config+0x2c>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1008
        }
        break;
    }
    case mnuCmdEveSong2Time:
    {
        configChanged = true;
    3924:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3926:	00 e0       	ldi	r16, 0x00	; 0
    3928:	c1 cc       	rjmp	.-1662   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1017
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong2Time = --config.EveSong2Time < 3 ? 8 : config.EveSong2Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    392a:	11 30       	cpi	r17, 0x01	; 1
    392c:	09 f4       	brne	.+2      	; 0x3930 <loop+0x14bc>
    392e:	33 ce       	rjmp	.-922    	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3930:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3932:	00 e0       	ldi	r16, 0x00	; 0
    3934:	bb cc       	rjmp	.-1674   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1031
        break;
    }
    case mnuCmdSongCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3936:	81 2f       	mov	r24, r17
    3938:	8f 77       	andi	r24, 0x7F	; 127
    393a:	82 30       	cpi	r24, 0x02	; 2
    393c:	61 f4       	brne	.+24     	; 0x3956 <loop+0x14e2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1033
        {
            config.SongCount = ++config.SongCount;
    393e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <config+0x1e>
    3942:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <config+0x1f>
    3946:	01 96       	adiw	r24, 0x01	; 1
    3948:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <config+0x1f>
    394c:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <config+0x1e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1030
        }
        break;
    }
    case mnuCmdSongCount:
    {
        configChanged = true;
    3950:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3952:	00 e0       	ldi	r16, 0x00	; 0
    3954:	ab cc       	rjmp	.-1706   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1035
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SongCount = ++config.SongCount;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3956:	83 30       	cpi	r24, 0x03	; 3
    3958:	81 f4       	brne	.+32     	; 0x397a <loop+0x1506>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1037
        {
            config.SongCount = --config.SongCount < 0 ? 100 : config.SongCount;
    395a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <config+0x1e>
    395e:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <config+0x1f>
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	97 ff       	sbrs	r25, 7
    3966:	02 c0       	rjmp	.+4      	; 0x396c <loop+0x14f8>
loop():
    3968:	84 e6       	ldi	r24, 0x64	; 100
    396a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    396c:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <config+0x1f>
    3970:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <config+0x1e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1030
        }
        break;
    }
    case mnuCmdSongCount:
    {
        configChanged = true;
    3974:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3976:	00 e0       	ldi	r16, 0x00	; 0
    3978:	99 cc       	rjmp	.-1742   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1039
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SongCount = --config.SongCount < 0 ? 100 : config.SongCount;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    397a:	11 30       	cpi	r17, 0x01	; 1
    397c:	09 f4       	brne	.+2      	; 0x3980 <loop+0x150c>
    397e:	0b ce       	rjmp	.-1002   	; 0x3596 <loop+0x1122>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3980:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3982:	00 e0       	ldi	r16, 0x00	; 0
    3984:	93 cc       	rjmp	.-1754   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1053
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3986:	81 2f       	mov	r24, r17
    3988:	8f 77       	andi	r24, 0x7F	; 127
    398a:	82 30       	cpi	r24, 0x02	; 2
    398c:	a9 f4       	brne	.+42     	; 0x39b8 <loop+0x1544>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1055
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    398e:	60 91 e1 04 	lds	r22, 0x04E1	; 0x8004e1 <config+0x2e>
    3992:	70 91 e2 04 	lds	r23, 0x04E2	; 0x8004e2 <config+0x2f>
    3996:	6f 5f       	subi	r22, 0xFF	; 255
    3998:	7f 4f       	sbci	r23, 0xFF	; 255
    399a:	65 31       	cpi	r22, 0x15	; 21
    399c:	71 05       	cpc	r23, r1
    399e:	14 f0       	brlt	.+4      	; 0x39a4 <loop+0x1530>
loop():
    39a0:	61 e0       	ldi	r22, 0x01	; 1
    39a2:	70 e0       	ldi	r23, 0x00	; 0
processMenuCommand():
    39a4:	70 93 e2 04 	sts	0x04E2, r23	; 0x8004e2 <config+0x2f>
    39a8:	60 93 e1 04 	sts	0x04E1, r22	; 0x8004e1 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1056
            startPreSong(2, config.MorSongNo);
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	0e 94 74 08 	call	0x10e8	; 0x10e8 <startPreSong(unsigned char, unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1052
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    39b2:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    39b4:	00 e0       	ldi	r16, 0x00	; 0
    39b6:	7a cc       	rjmp	.-1804   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1058
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    39b8:	83 30       	cpi	r24, 0x03	; 3
    39ba:	a9 f4       	brne	.+42     	; 0x39e6 <loop+0x1572>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1060
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    39bc:	60 91 e1 04 	lds	r22, 0x04E1	; 0x8004e1 <config+0x2e>
    39c0:	70 91 e2 04 	lds	r23, 0x04E2	; 0x8004e2 <config+0x2f>
    39c4:	61 50       	subi	r22, 0x01	; 1
    39c6:	71 09       	sbc	r23, r1
    39c8:	16 16       	cp	r1, r22
    39ca:	17 06       	cpc	r1, r23
    39cc:	14 f0       	brlt	.+4      	; 0x39d2 <loop+0x155e>
loop():
    39ce:	64 e1       	ldi	r22, 0x14	; 20
    39d0:	70 e0       	ldi	r23, 0x00	; 0
processMenuCommand():
    39d2:	70 93 e2 04 	sts	0x04E2, r23	; 0x8004e2 <config+0x2f>
    39d6:	60 93 e1 04 	sts	0x04E1, r22	; 0x8004e1 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1061
            startPreSong(2, config.MorSongNo);
    39da:	82 e0       	ldi	r24, 0x02	; 2
    39dc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <startPreSong(unsigned char, unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1052
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    39e0:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    39e2:	00 e0       	ldi	r16, 0x00	; 0
    39e4:	63 cc       	rjmp	.-1850   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1063
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    39e6:	11 30       	cpi	r17, 0x01	; 1
    39e8:	09 f0       	breq	.+2      	; 0x39ec <loop+0x1578>
    39ea:	c0 c5       	rjmp	.+2944   	; 0x456c <loop+0x20f8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1065
        {
            stopPreSong();
    39ec:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1066
            config.save();
    39f0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Config::save() [clone .constprop.19]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1052
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    39f4:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1067
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            stopPreSong();
            config.save();
            complete = true;
    39f6:	01 e0       	ldi	r16, 0x01	; 1
    39f8:	59 cc       	rjmp	.-1870   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1078
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    39fa:	81 2f       	mov	r24, r17
    39fc:	8f 77       	andi	r24, 0x7F	; 127
    39fe:	82 30       	cpi	r24, 0x02	; 2
    3a00:	a9 f4       	brne	.+42     	; 0x3a2c <loop+0x15b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1080
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    3a02:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <config+0x30>
    3a06:	70 91 e4 04 	lds	r23, 0x04E4	; 0x8004e4 <config+0x31>
    3a0a:	6f 5f       	subi	r22, 0xFF	; 255
    3a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0e:	65 31       	cpi	r22, 0x15	; 21
    3a10:	71 05       	cpc	r23, r1
    3a12:	14 f0       	brlt	.+4      	; 0x3a18 <loop+0x15a4>
loop():
    3a14:	61 e0       	ldi	r22, 0x01	; 1
    3a16:	70 e0       	ldi	r23, 0x00	; 0
processMenuCommand():
    3a18:	70 93 e4 04 	sts	0x04E4, r23	; 0x8004e4 <config+0x31>
    3a1c:	60 93 e3 04 	sts	0x04E3, r22	; 0x8004e3 <config+0x30>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1081
            startPreSong(2, config.EveSongNo);
    3a20:	82 e0       	ldi	r24, 0x02	; 2
    3a22:	0e 94 74 08 	call	0x10e8	; 0x10e8 <startPreSong(unsigned char, unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1077
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    3a26:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3a28:	00 e0       	ldi	r16, 0x00	; 0
    3a2a:	40 cc       	rjmp	.-1920   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1083
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3a2c:	83 30       	cpi	r24, 0x03	; 3
    3a2e:	a9 f4       	brne	.+42     	; 0x3a5a <loop+0x15e6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1085
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3a30:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <config+0x30>
    3a34:	70 91 e4 04 	lds	r23, 0x04E4	; 0x8004e4 <config+0x31>
    3a38:	61 50       	subi	r22, 0x01	; 1
    3a3a:	71 09       	sbc	r23, r1
    3a3c:	16 16       	cp	r1, r22
    3a3e:	17 06       	cpc	r1, r23
    3a40:	14 f0       	brlt	.+4      	; 0x3a46 <loop+0x15d2>
loop():
    3a42:	64 e1       	ldi	r22, 0x14	; 20
    3a44:	70 e0       	ldi	r23, 0x00	; 0
processMenuCommand():
    3a46:	70 93 e4 04 	sts	0x04E4, r23	; 0x8004e4 <config+0x31>
    3a4a:	60 93 e3 04 	sts	0x04E3, r22	; 0x8004e3 <config+0x30>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1086
            startPreSong(2, config.EveSongNo);
    3a4e:	82 e0       	ldi	r24, 0x02	; 2
    3a50:	0e 94 74 08 	call	0x10e8	; 0x10e8 <startPreSong(unsigned char, unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1077
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    3a54:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3a56:	00 e0       	ldi	r16, 0x00	; 0
    3a58:	29 cc       	rjmp	.-1966   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1088
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3a5a:	11 30       	cpi	r17, 0x01	; 1
    3a5c:	39 f2       	breq	.-114    	; 0x39ec <loop+0x1578>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3a5e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3a60:	00 e0       	ldi	r16, 0x00	; 0
    3a62:	24 cc       	rjmp	.-1976   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1103
        break;
    }

    case mnuCmdLt1OnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3a64:	12 30       	cpi	r17, 0x02	; 2
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <loop+0x15f6>
    3a68:	4c c0       	rjmp	.+152    	; 0x3b02 <loop+0x168e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1105
        {
            if (blinkMode == setHr)
    3a6a:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3a6e:	01 11       	cpse	r16, r1
    3a70:	22 c0       	rjmp	.+68     	; 0x3ab6 <loop+0x1642>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1106
                config.Light1On = addToTime(60, config.Light1On);
    3a72:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <config+0x32>
    3a76:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <config+0x33>
    3a7a:	a0 91 e7 04 	lds	r26, 0x04E7	; 0x8004e7 <config+0x34>
    3a7e:	b0 91 e8 04 	lds	r27, 0x04E8	; 0x8004e8 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3a82:	ac 01       	movw	r20, r24
    3a84:	bd 01       	movw	r22, r26
    3a86:	44 5c       	subi	r20, 0xC4	; 196
    3a88:	5f 4f       	sbci	r21, 0xFF	; 255
    3a8a:	6f 4f       	sbci	r22, 0xFF	; 255
    3a8c:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3a8e:	77 fd       	sbrc	r23, 7
    3a90:	08 c0       	rjmp	.+16     	; 0x3aa2 <loop+0x162e>
    3a92:	40 3a       	cpi	r20, 0xA0	; 160
    3a94:	25 e0       	ldi	r18, 0x05	; 5
    3a96:	52 07       	cpc	r21, r18
    3a98:	61 05       	cpc	r22, r1
    3a9a:	71 05       	cpc	r23, r1
    3a9c:	14 f4       	brge	.+4      	; 0x3aa2 <loop+0x162e>
    3a9e:	db 01       	movw	r26, r22
    3aa0:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1106
    3aa2:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <config+0x32>
    3aa6:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <config+0x33>
    3aaa:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <config+0x34>
    3aae:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <config+0x35>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3ab2:	10 e0       	ldi	r17, 0x00	; 0
    3ab4:	fb cb       	rjmp	.-2058   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1107
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
    3ab6:	01 30       	cpi	r16, 0x01	; 1
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <loop+0x1648>
    3aba:	5c c5       	rjmp	.+2744   	; 0x4574 <loop+0x2100>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1108
                config.Light1On = addToTime(1, config.Light1On);
    3abc:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <config+0x32>
    3ac0:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <config+0x33>
    3ac4:	a0 91 e7 04 	lds	r26, 0x04E7	; 0x8004e7 <config+0x34>
    3ac8:	b0 91 e8 04 	lds	r27, 0x04E8	; 0x8004e8 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3acc:	ac 01       	movw	r20, r24
    3ace:	bd 01       	movw	r22, r26
    3ad0:	4f 5f       	subi	r20, 0xFF	; 255
    3ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad4:	6f 4f       	sbci	r22, 0xFF	; 255
    3ad6:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3ad8:	77 fd       	sbrc	r23, 7
    3ada:	08 c0       	rjmp	.+16     	; 0x3aec <loop+0x1678>
    3adc:	40 3a       	cpi	r20, 0xA0	; 160
    3ade:	e5 e0       	ldi	r30, 0x05	; 5
    3ae0:	5e 07       	cpc	r21, r30
    3ae2:	61 05       	cpc	r22, r1
    3ae4:	71 05       	cpc	r23, r1
    3ae6:	14 f4       	brge	.+4      	; 0x3aec <loop+0x1678>
    3ae8:	db 01       	movw	r26, r22
    3aea:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1108
    3aec:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <config+0x32>
    3af0:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <config+0x33>
    3af4:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <config+0x34>
    3af8:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <config+0x35>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3afc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3afe:	00 e0       	ldi	r16, 0x00	; 0
    3b00:	d5 cb       	rjmp	.-2134   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1110
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(1, config.Light1On);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b02:	81 2f       	mov	r24, r17
    3b04:	8f 77       	andi	r24, 0x7F	; 127
    3b06:	83 30       	cpi	r24, 0x03	; 3
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <loop+0x1698>
    3b0a:	4c c0       	rjmp	.+152    	; 0x3ba4 <loop+0x1730>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1112
        {
            if (blinkMode == setHr)
    3b0c:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3b10:	01 11       	cpse	r16, r1
    3b12:	22 c0       	rjmp	.+68     	; 0x3b58 <loop+0x16e4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1113
                config.Light1On = addToTime(-60, config.Light1On);
    3b14:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <config+0x32>
    3b18:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <config+0x33>
    3b1c:	a0 91 e7 04 	lds	r26, 0x04E7	; 0x8004e7 <config+0x34>
    3b20:	b0 91 e8 04 	lds	r27, 0x04E8	; 0x8004e8 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3b24:	ac 01       	movw	r20, r24
    3b26:	bd 01       	movw	r22, r26
    3b28:	4c 53       	subi	r20, 0x3C	; 60
    3b2a:	51 09       	sbc	r21, r1
    3b2c:	61 09       	sbc	r22, r1
    3b2e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3b30:	77 fd       	sbrc	r23, 7
    3b32:	08 c0       	rjmp	.+16     	; 0x3b44 <loop+0x16d0>
    3b34:	40 3a       	cpi	r20, 0xA0	; 160
    3b36:	f5 e0       	ldi	r31, 0x05	; 5
    3b38:	5f 07       	cpc	r21, r31
    3b3a:	61 05       	cpc	r22, r1
    3b3c:	71 05       	cpc	r23, r1
    3b3e:	14 f4       	brge	.+4      	; 0x3b44 <loop+0x16d0>
    3b40:	db 01       	movw	r26, r22
    3b42:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1113
    3b44:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <config+0x32>
    3b48:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <config+0x33>
    3b4c:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <config+0x34>
    3b50:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <config+0x35>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3b54:	10 e0       	ldi	r17, 0x00	; 0
    3b56:	aa cb       	rjmp	.-2220   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1114
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
    3b58:	01 30       	cpi	r16, 0x01	; 1
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <loop+0x16ea>
    3b5c:	0f c5       	rjmp	.+2590   	; 0x457c <loop+0x2108>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1115
                config.Light1On = addToTime(-1, config.Light1On);
    3b5e:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <config+0x32>
    3b62:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <config+0x33>
    3b66:	a0 91 e7 04 	lds	r26, 0x04E7	; 0x8004e7 <config+0x34>
    3b6a:	b0 91 e8 04 	lds	r27, 0x04E8	; 0x8004e8 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3b6e:	ac 01       	movw	r20, r24
    3b70:	bd 01       	movw	r22, r26
    3b72:	41 50       	subi	r20, 0x01	; 1
    3b74:	51 09       	sbc	r21, r1
    3b76:	61 09       	sbc	r22, r1
    3b78:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3b7a:	77 fd       	sbrc	r23, 7
    3b7c:	08 c0       	rjmp	.+16     	; 0x3b8e <loop+0x171a>
    3b7e:	40 3a       	cpi	r20, 0xA0	; 160
    3b80:	25 e0       	ldi	r18, 0x05	; 5
    3b82:	52 07       	cpc	r21, r18
    3b84:	61 05       	cpc	r22, r1
    3b86:	71 05       	cpc	r23, r1
    3b88:	14 f4       	brge	.+4      	; 0x3b8e <loop+0x171a>
    3b8a:	db 01       	movw	r26, r22
    3b8c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1115
    3b8e:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <config+0x32>
    3b92:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <config+0x33>
    3b96:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <config+0x34>
    3b9a:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <config+0x35>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3b9e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3ba0:	00 e0       	ldi	r16, 0x00	; 0
    3ba2:	84 cb       	rjmp	.-2296   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1117
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(-1, config.Light1On);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3ba4:	11 30       	cpi	r17, 0x01	; 1
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <loop+0x1736>
    3ba8:	ed c4       	rjmp	.+2522   	; 0x4584 <loop+0x2110>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1119
        {
            if (blinkMode == setHr)
    3baa:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    3bae:	88 23       	and	r24, r24
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <loop+0x1740>
    3bb2:	9c cc       	rjmp	.-1736   	; 0x34ec <loop+0x1078>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3bb4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3bb6:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1123
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    3bb8:	81 30       	cpi	r24, 0x01	; 1
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <loop+0x174a>
    3bbc:	77 cb       	rjmp	.-2322   	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1125
            {
                config.save();
    3bbe:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Config::save() [clone .constprop.19]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1127
                complete = true;
                blink = true;
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3bc8:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1126
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                config.save();
                complete = true;
    3bca:	01 e0       	ldi	r16, 0x01	; 1
    3bcc:	6f cb       	rjmp	.-2338   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1135

        break;
    }
    case mnuCmdLt1OffTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3bce:	12 30       	cpi	r17, 0x02	; 2
    3bd0:	09 f0       	breq	.+2      	; 0x3bd4 <loop+0x1760>
    3bd2:	4c c0       	rjmp	.+152    	; 0x3c6c <loop+0x17f8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1137
        {
            if (blinkMode == setHr)
    3bd4:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3bd8:	01 11       	cpse	r16, r1
    3bda:	22 c0       	rjmp	.+68     	; 0x3c20 <loop+0x17ac>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1138
                config.Light1Off = addToTime(60, config.Light1Off);
    3bdc:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <config+0x36>
    3be0:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <config+0x37>
    3be4:	a0 91 eb 04 	lds	r26, 0x04EB	; 0x8004eb <config+0x38>
    3be8:	b0 91 ec 04 	lds	r27, 0x04EC	; 0x8004ec <config+0x39>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3bec:	ac 01       	movw	r20, r24
    3bee:	bd 01       	movw	r22, r26
    3bf0:	44 5c       	subi	r20, 0xC4	; 196
    3bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf4:	6f 4f       	sbci	r22, 0xFF	; 255
    3bf6:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3bf8:	77 fd       	sbrc	r23, 7
    3bfa:	08 c0       	rjmp	.+16     	; 0x3c0c <loop+0x1798>
    3bfc:	40 3a       	cpi	r20, 0xA0	; 160
    3bfe:	e5 e0       	ldi	r30, 0x05	; 5
    3c00:	5e 07       	cpc	r21, r30
    3c02:	61 05       	cpc	r22, r1
    3c04:	71 05       	cpc	r23, r1
    3c06:	14 f4       	brge	.+4      	; 0x3c0c <loop+0x1798>
    3c08:	db 01       	movw	r26, r22
    3c0a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1138
    3c0c:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <config+0x36>
    3c10:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <config+0x37>
    3c14:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <config+0x38>
    3c18:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <config+0x39>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3c1c:	10 e0       	ldi	r17, 0x00	; 0
    3c1e:	46 cb       	rjmp	.-2420   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1139
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
    3c20:	01 30       	cpi	r16, 0x01	; 1
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <loop+0x17b2>
    3c24:	b3 c4       	rjmp	.+2406   	; 0x458c <loop+0x2118>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1140
                config.Light1Off = addToTime(1, config.Light1Off);
    3c26:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <config+0x36>
    3c2a:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <config+0x37>
    3c2e:	a0 91 eb 04 	lds	r26, 0x04EB	; 0x8004eb <config+0x38>
    3c32:	b0 91 ec 04 	lds	r27, 0x04EC	; 0x8004ec <config+0x39>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3c36:	ac 01       	movw	r20, r24
    3c38:	bd 01       	movw	r22, r26
    3c3a:	4f 5f       	subi	r20, 0xFF	; 255
    3c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3e:	6f 4f       	sbci	r22, 0xFF	; 255
    3c40:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3c42:	77 fd       	sbrc	r23, 7
    3c44:	08 c0       	rjmp	.+16     	; 0x3c56 <loop+0x17e2>
    3c46:	40 3a       	cpi	r20, 0xA0	; 160
    3c48:	f5 e0       	ldi	r31, 0x05	; 5
    3c4a:	5f 07       	cpc	r21, r31
    3c4c:	61 05       	cpc	r22, r1
    3c4e:	71 05       	cpc	r23, r1
    3c50:	14 f4       	brge	.+4      	; 0x3c56 <loop+0x17e2>
    3c52:	db 01       	movw	r26, r22
    3c54:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1140
    3c56:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <config+0x36>
    3c5a:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <config+0x37>
    3c5e:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <config+0x38>
    3c62:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <config+0x39>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3c66:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3c68:	00 e0       	ldi	r16, 0x00	; 0
    3c6a:	20 cb       	rjmp	.-2496   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1142
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(1, config.Light1Off);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3c6c:	81 2f       	mov	r24, r17
    3c6e:	8f 77       	andi	r24, 0x7F	; 127
    3c70:	83 30       	cpi	r24, 0x03	; 3
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <loop+0x1802>
    3c74:	4c c0       	rjmp	.+152    	; 0x3d0e <loop+0x189a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1144
        {
            if (blinkMode == setHr)
    3c76:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3c7a:	01 11       	cpse	r16, r1
    3c7c:	22 c0       	rjmp	.+68     	; 0x3cc2 <loop+0x184e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1145
                config.Light1Off = addToTime(-60, config.Light1Off);
    3c7e:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <config+0x36>
    3c82:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <config+0x37>
    3c86:	a0 91 eb 04 	lds	r26, 0x04EB	; 0x8004eb <config+0x38>
    3c8a:	b0 91 ec 04 	lds	r27, 0x04EC	; 0x8004ec <config+0x39>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3c8e:	ac 01       	movw	r20, r24
    3c90:	bd 01       	movw	r22, r26
    3c92:	4c 53       	subi	r20, 0x3C	; 60
    3c94:	51 09       	sbc	r21, r1
    3c96:	61 09       	sbc	r22, r1
    3c98:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3c9a:	77 fd       	sbrc	r23, 7
    3c9c:	08 c0       	rjmp	.+16     	; 0x3cae <loop+0x183a>
    3c9e:	40 3a       	cpi	r20, 0xA0	; 160
    3ca0:	25 e0       	ldi	r18, 0x05	; 5
    3ca2:	52 07       	cpc	r21, r18
    3ca4:	61 05       	cpc	r22, r1
    3ca6:	71 05       	cpc	r23, r1
    3ca8:	14 f4       	brge	.+4      	; 0x3cae <loop+0x183a>
    3caa:	db 01       	movw	r26, r22
    3cac:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1145
    3cae:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <config+0x36>
    3cb2:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <config+0x37>
    3cb6:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <config+0x38>
    3cba:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <config+0x39>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3cbe:	10 e0       	ldi	r17, 0x00	; 0
    3cc0:	f5 ca       	rjmp	.-2582   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1146
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
    3cc2:	01 30       	cpi	r16, 0x01	; 1
    3cc4:	09 f0       	breq	.+2      	; 0x3cc8 <loop+0x1854>
    3cc6:	66 c4       	rjmp	.+2252   	; 0x4594 <loop+0x2120>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1147
                config.Light1Off = addToTime(-1, config.Light1Off);
    3cc8:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <config+0x36>
    3ccc:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <config+0x37>
    3cd0:	a0 91 eb 04 	lds	r26, 0x04EB	; 0x8004eb <config+0x38>
    3cd4:	b0 91 ec 04 	lds	r27, 0x04EC	; 0x8004ec <config+0x39>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3cd8:	ac 01       	movw	r20, r24
    3cda:	bd 01       	movw	r22, r26
    3cdc:	41 50       	subi	r20, 0x01	; 1
    3cde:	51 09       	sbc	r21, r1
    3ce0:	61 09       	sbc	r22, r1
    3ce2:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3ce4:	77 fd       	sbrc	r23, 7
    3ce6:	08 c0       	rjmp	.+16     	; 0x3cf8 <loop+0x1884>
    3ce8:	40 3a       	cpi	r20, 0xA0	; 160
    3cea:	e5 e0       	ldi	r30, 0x05	; 5
    3cec:	5e 07       	cpc	r21, r30
    3cee:	61 05       	cpc	r22, r1
    3cf0:	71 05       	cpc	r23, r1
    3cf2:	14 f4       	brge	.+4      	; 0x3cf8 <loop+0x1884>
    3cf4:	db 01       	movw	r26, r22
    3cf6:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1147
    3cf8:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <config+0x36>
    3cfc:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <config+0x37>
    3d00:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <config+0x38>
    3d04:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <config+0x39>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3d08:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3d0a:	00 e0       	ldi	r16, 0x00	; 0
    3d0c:	cf ca       	rjmp	.-2658   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1149
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(-1, config.Light1Off);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3d0e:	11 30       	cpi	r17, 0x01	; 1
    3d10:	09 f0       	breq	.+2      	; 0x3d14 <loop+0x18a0>
    3d12:	44 c4       	rjmp	.+2184   	; 0x459c <loop+0x2128>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1151
        {
            if (blinkMode == setHr)
    3d14:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    3d18:	88 23       	and	r24, r24
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <loop+0x18aa>
    3d1c:	e7 cb       	rjmp	.-2098   	; 0x34ec <loop+0x1078>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3d1e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3d20:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1155
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    3d22:	81 30       	cpi	r24, 0x01	; 1
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <loop+0x18b4>
    3d26:	c2 ca       	rjmp	.-2684   	; 0x32ac <loop+0xe38>
    3d28:	4a cf       	rjmp	.-364    	; 0x3bbe <loop+0x174a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1166
        }
        break;
    }
    case mnuCmdPlrMorOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3d2a:	12 30       	cpi	r17, 0x02	; 2
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <loop+0x18bc>
    3d2e:	4c c0       	rjmp	.+152    	; 0x3dc8 <loop+0x1954>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1168
        {
            if (blinkMode == setHr)
    3d30:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3d34:	01 11       	cpse	r16, r1
    3d36:	22 c0       	rjmp	.+68     	; 0x3d7c <loop+0x1908>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1169
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
    3d38:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <config+0x42>
    3d3c:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <config+0x43>
    3d40:	a0 91 f7 04 	lds	r26, 0x04F7	; 0x8004f7 <config+0x44>
    3d44:	b0 91 f8 04 	lds	r27, 0x04F8	; 0x8004f8 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3d48:	ac 01       	movw	r20, r24
    3d4a:	bd 01       	movw	r22, r26
    3d4c:	44 5c       	subi	r20, 0xC4	; 196
    3d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d50:	6f 4f       	sbci	r22, 0xFF	; 255
    3d52:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3d54:	77 fd       	sbrc	r23, 7
    3d56:	08 c0       	rjmp	.+16     	; 0x3d68 <loop+0x18f4>
    3d58:	40 3a       	cpi	r20, 0xA0	; 160
    3d5a:	f5 e0       	ldi	r31, 0x05	; 5
    3d5c:	5f 07       	cpc	r21, r31
    3d5e:	61 05       	cpc	r22, r1
    3d60:	71 05       	cpc	r23, r1
    3d62:	14 f4       	brge	.+4      	; 0x3d68 <loop+0x18f4>
    3d64:	db 01       	movw	r26, r22
    3d66:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1169
    3d68:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <config+0x42>
    3d6c:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <config+0x43>
    3d70:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <config+0x44>
    3d74:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <config+0x45>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3d78:	10 e0       	ldi	r17, 0x00	; 0
    3d7a:	98 ca       	rjmp	.-2768   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1170
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    3d7c:	01 30       	cpi	r16, 0x01	; 1
    3d7e:	09 f0       	breq	.+2      	; 0x3d82 <loop+0x190e>
    3d80:	11 c4       	rjmp	.+2082   	; 0x45a4 <loop+0x2130>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1171
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
    3d82:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <config+0x42>
    3d86:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <config+0x43>
    3d8a:	a0 91 f7 04 	lds	r26, 0x04F7	; 0x8004f7 <config+0x44>
    3d8e:	b0 91 f8 04 	lds	r27, 0x04F8	; 0x8004f8 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3d92:	ac 01       	movw	r20, r24
    3d94:	bd 01       	movw	r22, r26
    3d96:	4f 5f       	subi	r20, 0xFF	; 255
    3d98:	5f 4f       	sbci	r21, 0xFF	; 255
    3d9a:	6f 4f       	sbci	r22, 0xFF	; 255
    3d9c:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3d9e:	77 fd       	sbrc	r23, 7
    3da0:	08 c0       	rjmp	.+16     	; 0x3db2 <loop+0x193e>
    3da2:	40 3a       	cpi	r20, 0xA0	; 160
    3da4:	25 e0       	ldi	r18, 0x05	; 5
    3da6:	52 07       	cpc	r21, r18
    3da8:	61 05       	cpc	r22, r1
    3daa:	71 05       	cpc	r23, r1
    3dac:	14 f4       	brge	.+4      	; 0x3db2 <loop+0x193e>
    3dae:	db 01       	movw	r26, r22
    3db0:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1171
    3db2:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <config+0x42>
    3db6:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <config+0x43>
    3dba:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <config+0x44>
    3dbe:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <config+0x45>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3dc2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3dc4:	00 e0       	ldi	r16, 0x00	; 0
    3dc6:	72 ca       	rjmp	.-2844   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1173
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3dc8:	81 2f       	mov	r24, r17
    3dca:	8f 77       	andi	r24, 0x7F	; 127
    3dcc:	83 30       	cpi	r24, 0x03	; 3
    3dce:	09 f0       	breq	.+2      	; 0x3dd2 <loop+0x195e>
    3dd0:	4c c0       	rjmp	.+152    	; 0x3e6a <loop+0x19f6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1175
        {
            if (blinkMode == setHr)
    3dd2:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3dd6:	01 11       	cpse	r16, r1
    3dd8:	22 c0       	rjmp	.+68     	; 0x3e1e <loop+0x19aa>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1176
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
    3dda:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <config+0x42>
    3dde:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <config+0x43>
    3de2:	a0 91 f7 04 	lds	r26, 0x04F7	; 0x8004f7 <config+0x44>
    3de6:	b0 91 f8 04 	lds	r27, 0x04F8	; 0x8004f8 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3dea:	ac 01       	movw	r20, r24
    3dec:	bd 01       	movw	r22, r26
    3dee:	4c 53       	subi	r20, 0x3C	; 60
    3df0:	51 09       	sbc	r21, r1
    3df2:	61 09       	sbc	r22, r1
    3df4:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3df6:	77 fd       	sbrc	r23, 7
    3df8:	08 c0       	rjmp	.+16     	; 0x3e0a <loop+0x1996>
    3dfa:	40 3a       	cpi	r20, 0xA0	; 160
    3dfc:	e5 e0       	ldi	r30, 0x05	; 5
    3dfe:	5e 07       	cpc	r21, r30
    3e00:	61 05       	cpc	r22, r1
    3e02:	71 05       	cpc	r23, r1
    3e04:	14 f4       	brge	.+4      	; 0x3e0a <loop+0x1996>
    3e06:	db 01       	movw	r26, r22
    3e08:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1176
    3e0a:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <config+0x42>
    3e0e:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <config+0x43>
    3e12:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <config+0x44>
    3e16:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <config+0x45>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3e1a:	10 e0       	ldi	r17, 0x00	; 0
    3e1c:	47 ca       	rjmp	.-2930   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1177
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    3e1e:	01 30       	cpi	r16, 0x01	; 1
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <loop+0x19b0>
    3e22:	c4 c3       	rjmp	.+1928   	; 0x45ac <loop+0x2138>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1178
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
    3e24:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <config+0x42>
    3e28:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <config+0x43>
    3e2c:	a0 91 f7 04 	lds	r26, 0x04F7	; 0x8004f7 <config+0x44>
    3e30:	b0 91 f8 04 	lds	r27, 0x04F8	; 0x8004f8 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3e34:	ac 01       	movw	r20, r24
    3e36:	bd 01       	movw	r22, r26
    3e38:	41 50       	subi	r20, 0x01	; 1
    3e3a:	51 09       	sbc	r21, r1
    3e3c:	61 09       	sbc	r22, r1
    3e3e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3e40:	77 fd       	sbrc	r23, 7
    3e42:	08 c0       	rjmp	.+16     	; 0x3e54 <loop+0x19e0>
    3e44:	40 3a       	cpi	r20, 0xA0	; 160
    3e46:	f5 e0       	ldi	r31, 0x05	; 5
    3e48:	5f 07       	cpc	r21, r31
    3e4a:	61 05       	cpc	r22, r1
    3e4c:	71 05       	cpc	r23, r1
    3e4e:	14 f4       	brge	.+4      	; 0x3e54 <loop+0x19e0>
    3e50:	db 01       	movw	r26, r22
    3e52:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1178
    3e54:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <config+0x42>
    3e58:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <config+0x43>
    3e5c:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <config+0x44>
    3e60:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <config+0x45>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3e64:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3e66:	00 e0       	ldi	r16, 0x00	; 0
    3e68:	21 ca       	rjmp	.-3006   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1180
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3e6a:	11 30       	cpi	r17, 0x01	; 1
    3e6c:	09 f0       	breq	.+2      	; 0x3e70 <loop+0x19fc>
    3e6e:	a2 c3       	rjmp	.+1860   	; 0x45b4 <loop+0x2140>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1182
        {
            if (blinkMode == setHr)
    3e70:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    3e74:	88 23       	and	r24, r24
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <loop+0x1a06>
    3e78:	39 cb       	rjmp	.-2446   	; 0x34ec <loop+0x1078>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3e7c:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1186
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    3e7e:	81 30       	cpi	r24, 0x01	; 1
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <loop+0x1a10>
    3e82:	14 ca       	rjmp	.-3032   	; 0x32ac <loop+0xe38>
    3e84:	9c ce       	rjmp	.-712    	; 0x3bbe <loop+0x174a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1197
        }
        break;
    }
    case mnuCmdPlrMorDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    3e86:	12 30       	cpi	r17, 0x02	; 2
    3e88:	09 f0       	breq	.+2      	; 0x3e8c <loop+0x1a18>
    3e8a:	4c c0       	rjmp	.+152    	; 0x3f24 <loop+0x1ab0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1199
        {
            if (blinkMode == setHr)
    3e8c:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3e90:	01 11       	cpse	r16, r1
    3e92:	22 c0       	rjmp	.+68     	; 0x3ed8 <loop+0x1a64>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1200
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
    3e94:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <config+0x46>
    3e98:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <config+0x47>
    3e9c:	a0 91 fb 04 	lds	r26, 0x04FB	; 0x8004fb <config+0x48>
    3ea0:	b0 91 fc 04 	lds	r27, 0x04FC	; 0x8004fc <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3ea4:	ac 01       	movw	r20, r24
    3ea6:	bd 01       	movw	r22, r26
    3ea8:	44 5c       	subi	r20, 0xC4	; 196
    3eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    3eac:	6f 4f       	sbci	r22, 0xFF	; 255
    3eae:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3eb0:	77 fd       	sbrc	r23, 7
    3eb2:	08 c0       	rjmp	.+16     	; 0x3ec4 <loop+0x1a50>
    3eb4:	40 3a       	cpi	r20, 0xA0	; 160
    3eb6:	25 e0       	ldi	r18, 0x05	; 5
    3eb8:	52 07       	cpc	r21, r18
    3eba:	61 05       	cpc	r22, r1
    3ebc:	71 05       	cpc	r23, r1
    3ebe:	14 f4       	brge	.+4      	; 0x3ec4 <loop+0x1a50>
    3ec0:	db 01       	movw	r26, r22
    3ec2:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1200
    3ec4:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <config+0x46>
    3ec8:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <config+0x47>
    3ecc:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <config+0x48>
    3ed0:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <config+0x49>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3ed4:	10 e0       	ldi	r17, 0x00	; 0
    3ed6:	ea c9       	rjmp	.-3116   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1201
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    3ed8:	01 30       	cpi	r16, 0x01	; 1
    3eda:	09 f0       	breq	.+2      	; 0x3ede <loop+0x1a6a>
    3edc:	6f c3       	rjmp	.+1758   	; 0x45bc <loop+0x2148>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1202
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
    3ede:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <config+0x46>
    3ee2:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <config+0x47>
    3ee6:	a0 91 fb 04 	lds	r26, 0x04FB	; 0x8004fb <config+0x48>
    3eea:	b0 91 fc 04 	lds	r27, 0x04FC	; 0x8004fc <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3eee:	ac 01       	movw	r20, r24
    3ef0:	bd 01       	movw	r22, r26
    3ef2:	4b 5f       	subi	r20, 0xFB	; 251
    3ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef6:	6f 4f       	sbci	r22, 0xFF	; 255
    3ef8:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3efa:	77 fd       	sbrc	r23, 7
    3efc:	08 c0       	rjmp	.+16     	; 0x3f0e <loop+0x1a9a>
    3efe:	40 3a       	cpi	r20, 0xA0	; 160
    3f00:	e5 e0       	ldi	r30, 0x05	; 5
    3f02:	5e 07       	cpc	r21, r30
    3f04:	61 05       	cpc	r22, r1
    3f06:	71 05       	cpc	r23, r1
    3f08:	14 f4       	brge	.+4      	; 0x3f0e <loop+0x1a9a>
    3f0a:	db 01       	movw	r26, r22
    3f0c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1202
    3f0e:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <config+0x46>
    3f12:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <config+0x47>
    3f16:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <config+0x48>
    3f1a:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <config+0x49>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3f1e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3f20:	00 e0       	ldi	r16, 0x00	; 0
    3f22:	c4 c9       	rjmp	.-3192   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1204
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3f24:	81 2f       	mov	r24, r17
    3f26:	8f 77       	andi	r24, 0x7F	; 127
    3f28:	83 30       	cpi	r24, 0x03	; 3
    3f2a:	09 f0       	breq	.+2      	; 0x3f2e <loop+0x1aba>
    3f2c:	4c c0       	rjmp	.+152    	; 0x3fc6 <loop+0x1b52>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1206
        {
            if (blinkMode == setHr)
    3f2e:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3f32:	01 11       	cpse	r16, r1
    3f34:	22 c0       	rjmp	.+68     	; 0x3f7a <loop+0x1b06>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1207
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
    3f36:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <config+0x46>
    3f3a:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <config+0x47>
    3f3e:	a0 91 fb 04 	lds	r26, 0x04FB	; 0x8004fb <config+0x48>
    3f42:	b0 91 fc 04 	lds	r27, 0x04FC	; 0x8004fc <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3f46:	ac 01       	movw	r20, r24
    3f48:	bd 01       	movw	r22, r26
    3f4a:	4c 53       	subi	r20, 0x3C	; 60
    3f4c:	51 09       	sbc	r21, r1
    3f4e:	61 09       	sbc	r22, r1
    3f50:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3f52:	77 fd       	sbrc	r23, 7
    3f54:	08 c0       	rjmp	.+16     	; 0x3f66 <loop+0x1af2>
    3f56:	40 3a       	cpi	r20, 0xA0	; 160
    3f58:	f5 e0       	ldi	r31, 0x05	; 5
    3f5a:	5f 07       	cpc	r21, r31
    3f5c:	61 05       	cpc	r22, r1
    3f5e:	71 05       	cpc	r23, r1
    3f60:	14 f4       	brge	.+4      	; 0x3f66 <loop+0x1af2>
    3f62:	db 01       	movw	r26, r22
    3f64:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1207
    3f66:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <config+0x46>
    3f6a:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <config+0x47>
    3f6e:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <config+0x48>
    3f72:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <config+0x49>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3f76:	10 e0       	ldi	r17, 0x00	; 0
    3f78:	99 c9       	rjmp	.-3278   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1208
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    3f7a:	01 30       	cpi	r16, 0x01	; 1
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <loop+0x1b0c>
    3f7e:	22 c3       	rjmp	.+1604   	; 0x45c4 <loop+0x2150>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1209
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
    3f80:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <config+0x46>
    3f84:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <config+0x47>
    3f88:	a0 91 fb 04 	lds	r26, 0x04FB	; 0x8004fb <config+0x48>
    3f8c:	b0 91 fc 04 	lds	r27, 0x04FC	; 0x8004fc <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    3f90:	ac 01       	movw	r20, r24
    3f92:	bd 01       	movw	r22, r26
    3f94:	45 50       	subi	r20, 0x05	; 5
    3f96:	51 09       	sbc	r21, r1
    3f98:	61 09       	sbc	r22, r1
    3f9a:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    3f9c:	77 fd       	sbrc	r23, 7
    3f9e:	08 c0       	rjmp	.+16     	; 0x3fb0 <loop+0x1b3c>
    3fa0:	40 3a       	cpi	r20, 0xA0	; 160
    3fa2:	25 e0       	ldi	r18, 0x05	; 5
    3fa4:	52 07       	cpc	r21, r18
    3fa6:	61 05       	cpc	r22, r1
    3fa8:	71 05       	cpc	r23, r1
    3faa:	14 f4       	brge	.+4      	; 0x3fb0 <loop+0x1b3c>
    3fac:	db 01       	movw	r26, r22
    3fae:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1209
    3fb0:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <config+0x46>
    3fb4:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <config+0x47>
    3fb8:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <config+0x48>
    3fbc:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <config+0x49>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3fc0:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3fc2:	00 e0       	ldi	r16, 0x00	; 0
    3fc4:	73 c9       	rjmp	.-3354   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1211
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3fc6:	11 30       	cpi	r17, 0x01	; 1
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <loop+0x1b58>
    3fca:	00 c3       	rjmp	.+1536   	; 0x45cc <loop+0x2158>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1213
        {
            if (blinkMode == setHr)
    3fcc:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    3fd0:	88 23       	and	r24, r24
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <loop+0x1b62>
    3fd4:	8b ca       	rjmp	.-2794   	; 0x34ec <loop+0x1078>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3fd6:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3fd8:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1217
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    3fda:	81 30       	cpi	r24, 0x01	; 1
    3fdc:	09 f0       	breq	.+2      	; 0x3fe0 <loop+0x1b6c>
    3fde:	66 c9       	rjmp	.-3380   	; 0x32ac <loop+0xe38>
    3fe0:	ee cd       	rjmp	.-1060   	; 0x3bbe <loop+0x174a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1228
        }
        break;
    }
    case mnuCmdPlrEveOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3fe2:	12 30       	cpi	r17, 0x02	; 2
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <loop+0x1b74>
    3fe6:	4c c0       	rjmp	.+152    	; 0x4080 <loop+0x1c0c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1230
        {
            if (blinkMode == setHr)
    3fe8:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    3fec:	01 11       	cpse	r16, r1
    3fee:	22 c0       	rjmp	.+68     	; 0x4034 <loop+0x1bc0>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1231
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
    3ff0:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <config+0x4a>
    3ff4:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <config+0x4b>
    3ff8:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <config+0x4c>
    3ffc:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4000:	ac 01       	movw	r20, r24
    4002:	bd 01       	movw	r22, r26
    4004:	44 5c       	subi	r20, 0xC4	; 196
    4006:	5f 4f       	sbci	r21, 0xFF	; 255
    4008:	6f 4f       	sbci	r22, 0xFF	; 255
    400a:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    400c:	77 fd       	sbrc	r23, 7
    400e:	08 c0       	rjmp	.+16     	; 0x4020 <loop+0x1bac>
    4010:	40 3a       	cpi	r20, 0xA0	; 160
    4012:	e5 e0       	ldi	r30, 0x05	; 5
    4014:	5e 07       	cpc	r21, r30
    4016:	61 05       	cpc	r22, r1
    4018:	71 05       	cpc	r23, r1
    401a:	14 f4       	brge	.+4      	; 0x4020 <loop+0x1bac>
    401c:	db 01       	movw	r26, r22
    401e:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1231
    4020:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <config+0x4a>
    4024:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <config+0x4b>
    4028:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <config+0x4c>
    402c:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <config+0x4d>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4030:	10 e0       	ldi	r17, 0x00	; 0
    4032:	3c c9       	rjmp	.-3464   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1232
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    4034:	01 30       	cpi	r16, 0x01	; 1
    4036:	09 f0       	breq	.+2      	; 0x403a <loop+0x1bc6>
    4038:	cd c2       	rjmp	.+1434   	; 0x45d4 <loop+0x2160>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1233
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
    403a:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <config+0x4a>
    403e:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <config+0x4b>
    4042:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <config+0x4c>
    4046:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    404a:	ac 01       	movw	r20, r24
    404c:	bd 01       	movw	r22, r26
    404e:	4f 5f       	subi	r20, 0xFF	; 255
    4050:	5f 4f       	sbci	r21, 0xFF	; 255
    4052:	6f 4f       	sbci	r22, 0xFF	; 255
    4054:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    4056:	77 fd       	sbrc	r23, 7
    4058:	08 c0       	rjmp	.+16     	; 0x406a <loop+0x1bf6>
    405a:	40 3a       	cpi	r20, 0xA0	; 160
    405c:	f5 e0       	ldi	r31, 0x05	; 5
    405e:	5f 07       	cpc	r21, r31
    4060:	61 05       	cpc	r22, r1
    4062:	71 05       	cpc	r23, r1
    4064:	14 f4       	brge	.+4      	; 0x406a <loop+0x1bf6>
    4066:	db 01       	movw	r26, r22
    4068:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1233
    406a:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <config+0x4a>
    406e:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <config+0x4b>
    4072:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <config+0x4c>
    4076:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <config+0x4d>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    407a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    407c:	00 e0       	ldi	r16, 0x00	; 0
    407e:	16 c9       	rjmp	.-3540   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1235
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    4080:	13 30       	cpi	r17, 0x03	; 3
    4082:	09 f0       	breq	.+2      	; 0x4086 <loop+0x1c12>
    4084:	4c c0       	rjmp	.+152    	; 0x411e <loop+0x1caa>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1237
        {
            if (blinkMode == setHr)
    4086:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    408a:	01 11       	cpse	r16, r1
    408c:	22 c0       	rjmp	.+68     	; 0x40d2 <loop+0x1c5e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1238
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
    408e:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <config+0x4a>
    4092:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <config+0x4b>
    4096:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <config+0x4c>
    409a:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    409e:	ac 01       	movw	r20, r24
    40a0:	bd 01       	movw	r22, r26
    40a2:	4c 53       	subi	r20, 0x3C	; 60
    40a4:	51 09       	sbc	r21, r1
    40a6:	61 09       	sbc	r22, r1
    40a8:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    40aa:	77 fd       	sbrc	r23, 7
    40ac:	08 c0       	rjmp	.+16     	; 0x40be <loop+0x1c4a>
    40ae:	40 3a       	cpi	r20, 0xA0	; 160
    40b0:	25 e0       	ldi	r18, 0x05	; 5
    40b2:	52 07       	cpc	r21, r18
    40b4:	61 05       	cpc	r22, r1
    40b6:	71 05       	cpc	r23, r1
    40b8:	14 f4       	brge	.+4      	; 0x40be <loop+0x1c4a>
    40ba:	db 01       	movw	r26, r22
    40bc:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1238
    40be:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <config+0x4a>
    40c2:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <config+0x4b>
    40c6:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <config+0x4c>
    40ca:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <config+0x4d>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    40ce:	10 e0       	ldi	r17, 0x00	; 0
    40d0:	ed c8       	rjmp	.-3622   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1239
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    40d2:	01 30       	cpi	r16, 0x01	; 1
    40d4:	09 f0       	breq	.+2      	; 0x40d8 <loop+0x1c64>
    40d6:	82 c2       	rjmp	.+1284   	; 0x45dc <loop+0x2168>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1240
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
    40d8:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <config+0x4a>
    40dc:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <config+0x4b>
    40e0:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <config+0x4c>
    40e4:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    40e8:	ac 01       	movw	r20, r24
    40ea:	bd 01       	movw	r22, r26
    40ec:	41 50       	subi	r20, 0x01	; 1
    40ee:	51 09       	sbc	r21, r1
    40f0:	61 09       	sbc	r22, r1
    40f2:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    40f4:	77 fd       	sbrc	r23, 7
    40f6:	08 c0       	rjmp	.+16     	; 0x4108 <loop+0x1c94>
    40f8:	40 3a       	cpi	r20, 0xA0	; 160
    40fa:	e5 e0       	ldi	r30, 0x05	; 5
    40fc:	5e 07       	cpc	r21, r30
    40fe:	61 05       	cpc	r22, r1
    4100:	71 05       	cpc	r23, r1
    4102:	14 f4       	brge	.+4      	; 0x4108 <loop+0x1c94>
    4104:	db 01       	movw	r26, r22
    4106:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1240
    4108:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <config+0x4a>
    410c:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <config+0x4b>
    4110:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <config+0x4c>
    4114:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <config+0x4d>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4118:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    411a:	00 e0       	ldi	r16, 0x00	; 0
    411c:	c7 c8       	rjmp	.-3698   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1242
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    411e:	11 30       	cpi	r17, 0x01	; 1
    4120:	09 f0       	breq	.+2      	; 0x4124 <loop+0x1cb0>
    4122:	60 c2       	rjmp	.+1216   	; 0x45e4 <loop+0x2170>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1244
        {
            if (blinkMode == setHr)
    4124:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    4128:	88 23       	and	r24, r24
    412a:	09 f4       	brne	.+2      	; 0x412e <loop+0x1cba>
    412c:	df c9       	rjmp	.-3138   	; 0x34ec <loop+0x1078>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    412e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4130:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1248
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4132:	81 30       	cpi	r24, 0x01	; 1
    4134:	09 f0       	breq	.+2      	; 0x4138 <loop+0x1cc4>
    4136:	ba c8       	rjmp	.-3724   	; 0x32ac <loop+0xe38>
    4138:	42 cd       	rjmp	.-1404   	; 0x3bbe <loop+0x174a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1259
        }
        break;
    }
    case mnuCmdPlrEveDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    413a:	12 30       	cpi	r17, 0x02	; 2
    413c:	09 f0       	breq	.+2      	; 0x4140 <loop+0x1ccc>
    413e:	4c c0       	rjmp	.+152    	; 0x41d8 <loop+0x1d64>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1261
        {
            if (blinkMode == setHr)
    4140:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    4144:	01 11       	cpse	r16, r1
    4146:	22 c0       	rjmp	.+68     	; 0x418c <loop+0x1d18>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1262
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
    4148:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <config+0x4e>
    414c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <config+0x4f>
    4150:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <config+0x50>
    4154:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <config+0x51>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4158:	ac 01       	movw	r20, r24
    415a:	bd 01       	movw	r22, r26
    415c:	44 5c       	subi	r20, 0xC4	; 196
    415e:	5f 4f       	sbci	r21, 0xFF	; 255
    4160:	6f 4f       	sbci	r22, 0xFF	; 255
    4162:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    4164:	77 fd       	sbrc	r23, 7
    4166:	08 c0       	rjmp	.+16     	; 0x4178 <loop+0x1d04>
    4168:	40 3a       	cpi	r20, 0xA0	; 160
    416a:	f5 e0       	ldi	r31, 0x05	; 5
    416c:	5f 07       	cpc	r21, r31
    416e:	61 05       	cpc	r22, r1
    4170:	71 05       	cpc	r23, r1
    4172:	14 f4       	brge	.+4      	; 0x4178 <loop+0x1d04>
    4174:	db 01       	movw	r26, r22
    4176:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1262
    4178:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <config+0x4e>
    417c:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <config+0x4f>
    4180:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <config+0x50>
    4184:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <config+0x51>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4188:	10 e0       	ldi	r17, 0x00	; 0
    418a:	90 c8       	rjmp	.-3808   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1263
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    418c:	01 30       	cpi	r16, 0x01	; 1
    418e:	09 f0       	breq	.+2      	; 0x4192 <loop+0x1d1e>
    4190:	2d c2       	rjmp	.+1114   	; 0x45ec <loop+0x2178>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1264
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
    4192:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <config+0x4e>
    4196:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <config+0x4f>
    419a:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <config+0x50>
    419e:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <config+0x51>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    41a2:	ac 01       	movw	r20, r24
    41a4:	bd 01       	movw	r22, r26
    41a6:	4b 5f       	subi	r20, 0xFB	; 251
    41a8:	5f 4f       	sbci	r21, 0xFF	; 255
    41aa:	6f 4f       	sbci	r22, 0xFF	; 255
    41ac:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    41ae:	77 fd       	sbrc	r23, 7
    41b0:	08 c0       	rjmp	.+16     	; 0x41c2 <loop+0x1d4e>
    41b2:	40 3a       	cpi	r20, 0xA0	; 160
    41b4:	25 e0       	ldi	r18, 0x05	; 5
    41b6:	52 07       	cpc	r21, r18
    41b8:	61 05       	cpc	r22, r1
    41ba:	71 05       	cpc	r23, r1
    41bc:	14 f4       	brge	.+4      	; 0x41c2 <loop+0x1d4e>
    41be:	db 01       	movw	r26, r22
    41c0:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1264
    41c2:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <config+0x4e>
    41c6:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <config+0x4f>
    41ca:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <config+0x50>
    41ce:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <config+0x51>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    41d2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    41d4:	00 e0       	ldi	r16, 0x00	; 0
    41d6:	6a c8       	rjmp	.-3884   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1266
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    41d8:	81 2f       	mov	r24, r17
    41da:	8f 77       	andi	r24, 0x7F	; 127
    41dc:	83 30       	cpi	r24, 0x03	; 3
    41de:	09 f0       	breq	.+2      	; 0x41e2 <loop+0x1d6e>
    41e0:	4c c0       	rjmp	.+152    	; 0x427a <loop+0x1e06>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1268
        {
            if (blinkMode == setHr)
    41e2:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <blinkMode>
    41e6:	01 11       	cpse	r16, r1
    41e8:	22 c0       	rjmp	.+68     	; 0x422e <loop+0x1dba>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1269
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
    41ea:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <config+0x4e>
    41ee:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <config+0x4f>
    41f2:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <config+0x50>
    41f6:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <config+0x51>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    41fa:	ac 01       	movw	r20, r24
    41fc:	bd 01       	movw	r22, r26
    41fe:	4c 53       	subi	r20, 0x3C	; 60
    4200:	51 09       	sbc	r21, r1
    4202:	61 09       	sbc	r22, r1
    4204:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    4206:	77 fd       	sbrc	r23, 7
    4208:	08 c0       	rjmp	.+16     	; 0x421a <loop+0x1da6>
    420a:	40 3a       	cpi	r20, 0xA0	; 160
    420c:	e5 e0       	ldi	r30, 0x05	; 5
    420e:	5e 07       	cpc	r21, r30
    4210:	61 05       	cpc	r22, r1
    4212:	71 05       	cpc	r23, r1
    4214:	14 f4       	brge	.+4      	; 0x421a <loop+0x1da6>
    4216:	db 01       	movw	r26, r22
    4218:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1269
    421a:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <config+0x4e>
    421e:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <config+0x4f>
    4222:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <config+0x50>
    4226:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <config+0x51>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    422a:	10 e0       	ldi	r17, 0x00	; 0
    422c:	3f c8       	rjmp	.-3970   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1270
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    422e:	01 30       	cpi	r16, 0x01	; 1
    4230:	09 f0       	breq	.+2      	; 0x4234 <loop+0x1dc0>
    4232:	e0 c1       	rjmp	.+960    	; 0x45f4 <loop+0x2180>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1271
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
    4234:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <config+0x4e>
    4238:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <config+0x4f>
    423c:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <config+0x50>
    4240:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <config+0x51>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:74
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4244:	ac 01       	movw	r20, r24
    4246:	bd 01       	movw	r22, r26
    4248:	45 50       	subi	r20, 0x05	; 5
    424a:	51 09       	sbc	r21, r1
    424c:	61 09       	sbc	r22, r1
    424e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:76

  if (newtime >= minval && newtime <= maxval)
    4250:	77 fd       	sbrc	r23, 7
    4252:	08 c0       	rjmp	.+16     	; 0x4264 <loop+0x1df0>
    4254:	40 3a       	cpi	r20, 0xA0	; 160
    4256:	f5 e0       	ldi	r31, 0x05	; 5
    4258:	5f 07       	cpc	r21, r31
    425a:	61 05       	cpc	r22, r1
    425c:	71 05       	cpc	r23, r1
    425e:	14 f4       	brge	.+4      	; 0x4264 <loop+0x1df0>
    4260:	db 01       	movw	r26, r22
    4262:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1271
    4264:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <config+0x4e>
    4268:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <config+0x4f>
    426c:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <config+0x50>
    4270:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <config+0x51>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4274:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4276:	00 e0       	ldi	r16, 0x00	; 0
    4278:	19 c8       	rjmp	.-4046   	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1273
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    427a:	11 30       	cpi	r17, 0x01	; 1
    427c:	09 f0       	breq	.+2      	; 0x4280 <loop+0x1e0c>
    427e:	be c1       	rjmp	.+892    	; 0x45fc <loop+0x2188>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1275
        {
            if (blinkMode == setHr)
    4280:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    4284:	88 23       	and	r24, r24
    4286:	09 f4       	brne	.+2      	; 0x428a <loop+0x1e16>
    4288:	31 c9       	rjmp	.-3486   	; 0x34ec <loop+0x1078>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    428a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    428c:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1279
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    428e:	81 30       	cpi	r24, 0x01	; 1
    4290:	09 f0       	breq	.+2      	; 0x4294 <loop+0x1e20>
    4292:	0c c8       	rjmp	.-4072   	; 0x32ac <loop+0xe38>
    4294:	94 cc       	rjmp	.-1752   	; 0x3bbe <loop+0x174a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1292
    }
    
    case mnuCmdVoiceDemo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4296:	81 2f       	mov	r24, r17
    4298:	8f 77       	andi	r24, 0x7F	; 127
    429a:	82 30       	cpi	r24, 0x02	; 2
    429c:	91 f4       	brne	.+36     	; 0x42c2 <loop+0x1e4e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1294
        {
            voiceNo = ++voiceNo  > voiceCount-1 ? 0 : voiceNo;
    429e:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <voiceNo>
    42a2:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <voiceNo+0x1>
    42a6:	01 96       	adiw	r24, 0x01	; 1
    42a8:	87 30       	cpi	r24, 0x07	; 7
    42aa:	91 05       	cpc	r25, r1
    42ac:	14 f0       	brlt	.+4      	; 0x42b2 <loop+0x1e3e>
loop():
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    42b2:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <voiceNo+0x1>
    42b6:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <voiceNo>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1291
        break;
    }
    
    case mnuCmdVoiceDemo:
    {
        configChanged = true;
    42ba:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42bc:	00 e0       	ldi	r16, 0x00	; 0
    42be:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1296
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            voiceNo = ++voiceNo  > voiceCount-1 ? 0 : voiceNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    42c2:	83 30       	cpi	r24, 0x03	; 3
    42c4:	89 f4       	brne	.+34     	; 0x42e8 <loop+0x1e74>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1298
        {
            voiceNo = --voiceNo  < 0 ? voiceCount-1 : voiceNo;
    42c6:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <voiceNo>
    42ca:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <voiceNo+0x1>
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	97 ff       	sbrs	r25, 7
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <loop+0x1e64>
loop():
    42d4:	86 e0       	ldi	r24, 0x06	; 6
    42d6:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    42d8:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <voiceNo+0x1>
    42dc:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <voiceNo>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1291
        break;
    }
    
    case mnuCmdVoiceDemo:
    {
        configChanged = true;
    42e0:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42e2:	00 e0       	ldi	r16, 0x00	; 0
    42e4:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1300
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            voiceNo = --voiceNo  < 0 ? voiceCount-1 : voiceNo;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    42e8:	11 30       	cpi	r17, 0x01	; 1
    42ea:	49 f4       	brne	.+18     	; 0x42fe <loop+0x1e8a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1302
        {
            startPreSong(10,voiceNo+1);
    42ec:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <voiceNo>
    42f0:	6f 5f       	subi	r22, 0xFF	; 255
    42f2:	8a e0       	ldi	r24, 0x0A	; 10
    42f4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <startPreSong(unsigned char, unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42f8:	00 e0       	ldi	r16, 0x00	; 0
    42fa:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1304
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            startPreSong(10,voiceNo+1);
        }
        else if (btn == BUTTON_LEFT_PRESSED)
    42fe:	14 30       	cpi	r17, 0x04	; 4
    4300:	09 f0       	breq	.+2      	; 0x4304 <loop+0x1e90>
    4302:	80 c1       	rjmp	.+768    	; 0x4604 <loop+0x2190>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1306
        {
            stopPreSong();
    4304:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <stopPreSong()>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1291
        break;
    }
    
    case mnuCmdVoiceDemo:
    {
        configChanged = true;
    4308:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    430a:	00 e0       	ldi	r16, 0x00	; 0
    430c:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1317
        break;
    }
    case mnuCmdSongsDemo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4310:	81 2f       	mov	r24, r17
    4312:	8f 77       	andi	r24, 0x7F	; 127
    4314:	82 30       	cpi	r24, 0x02	; 2
    4316:	91 f4       	brne	.+36     	; 0x433c <loop+0x1ec8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1319
        {
            demoSongNo = ++demoSongNo  > demoSongCount-1 ? 0 : demoSongNo;
    4318:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoSongNo>
    431c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoSongNo+0x1>
    4320:	01 96       	adiw	r24, 0x01	; 1
    4322:	8d 30       	cpi	r24, 0x0D	; 13
    4324:	91 05       	cpc	r25, r1
    4326:	14 f0       	brlt	.+4      	; 0x432c <loop+0x1eb8>
loop():
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    432c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoSongNo+0x1>
    4330:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoSongNo>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1316
        }
        break;
    }
    case mnuCmdSongsDemo:
    {
        configChanged = true;
    4334:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4336:	00 e0       	ldi	r16, 0x00	; 0
    4338:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1321
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoSongNo = ++demoSongNo  > demoSongCount-1 ? 0 : demoSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    433c:	83 30       	cpi	r24, 0x03	; 3
    433e:	89 f4       	brne	.+34     	; 0x4362 <loop+0x1eee>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1323
        {
            demoSongNo = --demoSongNo  < 0 ? demoSongCount-1 : demoSongNo;
    4340:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoSongNo>
    4344:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoSongNo+0x1>
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	97 ff       	sbrs	r25, 7
    434c:	02 c0       	rjmp	.+4      	; 0x4352 <loop+0x1ede>
loop():
    434e:	8c e0       	ldi	r24, 0x0C	; 12
    4350:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4352:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoSongNo+0x1>
    4356:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoSongNo>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1316
        }
        break;
    }
    case mnuCmdSongsDemo:
    {
        configChanged = true;
    435a:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    435c:	00 e0       	ldi	r16, 0x00	; 0
    435e:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1325
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoSongNo = --demoSongNo  < 0 ? demoSongCount-1 : demoSongNo;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4362:	11 30       	cpi	r17, 0x01	; 1
    4364:	81 f4       	brne	.+32     	; 0x4386 <loop+0x1f12>
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    4366:	0e 94 de 2b 	call	0x57bc	; 0x57bc <random>
    436a:	24 e1       	ldi	r18, 0x14	; 20
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	40 e0       	ldi	r20, 0x00	; 0
    4370:	50 e0       	ldi	r21, 0x00	; 0
    4372:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__divmodsi4>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1327
        {
            startPreSong(demoSongNo+11, random(0,20));
    4376:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoSongNo>
    437a:	85 5f       	subi	r24, 0xF5	; 245
    437c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <startPreSong(unsigned char, unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4380:	00 e0       	ldi	r16, 0x00	; 0
    4382:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1329
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            startPreSong(demoSongNo+11, random(0,20));
        }
        else if (btn == BUTTON_LEFT_PRESSED)
    4386:	14 30       	cpi	r17, 0x04	; 4
    4388:	09 f4       	brne	.+2      	; 0x438c <loop+0x1f18>
    438a:	bc cf       	rjmp	.-136    	; 0x4304 <loop+0x1e90>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    438c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    438e:	00 e0       	ldi	r16, 0x00	; 0
    4390:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1343
    }
        

    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    4394:	11 38       	cpi	r17, 0x81	; 129
    4396:	09 f0       	breq	.+2      	; 0x439a <loop+0x1f26>
    4398:	c2 c0       	rjmp	.+388    	; 0x451e <loop+0x20aa>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:190
  return strbuf;
}

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    439a:	69 e2       	ldi	r22, 0x29	; 41
    439c:	71 e0       	ldi	r23, 0x01	; 1
    439e:	83 eb       	ldi	r24, 0xB3	; 179
    43a0:	94 e0       	ldi	r25, 0x04	; 4
    43a2:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:191
  Song1_Count = 100;
    43a6:	84 e6       	ldi	r24, 0x64	; 100
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <config+0x1d>
    43ae:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:192
  startTime = 5; //5AM
    43b2:	85 e0       	ldi	r24, 0x05	; 5
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <config+0x10>
    43ba:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:193
  endTime = 22; // 10PM
    43be:	86 e1       	ldi	r24, 0x16	; 22
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <config+0x12>
    43c6:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:194
  backLightDur = 20; //Sec
    43ca:	84 e1       	ldi	r24, 0x14	; 20
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <config+0x14>
    43d2:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:195
  vol = 14;
    43d6:	8e e0       	ldi	r24, 0x0E	; 14
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <config+0x16>
    43de:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:196
  SlogamOrder = 1;
    43e2:	21 e0       	ldi	r18, 0x01	; 1
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	30 93 ce 04 	sts	0x04CE, r19	; 0x8004ce <config+0x1b>
    43ea:	20 93 cd 04 	sts	0x04CD, r18	; 0x8004cd <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:197
  SongCount = 10;
    43ee:	8a e0       	ldi	r24, 0x0A	; 10
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <config+0x1f>
    43f6:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:198
  SongOrder = 1;
    43fa:	30 93 d4 04 	sts	0x04D4, r19	; 0x8004d4 <config+0x21>
    43fe:	20 93 d3 04 	sts	0x04D3, r18	; 0x8004d3 <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:199
  MorSong1Time = 3;
    4402:	83 e0       	ldi	r24, 0x03	; 3
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <config+0x27>
    440a:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:200
  MorSong2Time = 3;
    440e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <config+0x29>
    4412:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:201
  EveSong2Time = 3;
    4416:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <config+0x2d>
    441a:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:202
  EveSong1Time = 3;
    441e:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <config+0x2b>
    4422:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:203
  MorSongNo = 1;
    4426:	30 93 e2 04 	sts	0x04E2, r19	; 0x8004e2 <config+0x2f>
    442a:	20 93 e1 04 	sts	0x04E1, r18	; 0x8004e1 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:204
  EveSongNo = 2;
    442e:	82 e0       	ldi	r24, 0x02	; 2
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <config+0x31>
    4436:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <config+0x30>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:206

  Light1On = 1079;
    443a:	87 e3       	ldi	r24, 0x37	; 55
    443c:	94 e0       	ldi	r25, 0x04	; 4
    443e:	a0 e0       	ldi	r26, 0x00	; 0
    4440:	b0 e0       	ldi	r27, 0x00	; 0
    4442:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <config+0x32>
    4446:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <config+0x33>
    444a:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <config+0x34>
    444e:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:207
  Light1Off = 359;
    4452:	87 e6       	ldi	r24, 0x67	; 103
    4454:	91 e0       	ldi	r25, 0x01	; 1
    4456:	a0 e0       	ldi	r26, 0x00	; 0
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <config+0x36>
    445e:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <config+0x37>
    4462:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <config+0x38>
    4466:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:208
  Light2On = 0;
    446a:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <config+0x3a>
    446e:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <config+0x3b>
    4472:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <config+0x3c>
    4476:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:209
  Light2Off = 0;
    447a:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <config+0x3e>
    447e:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <config+0x3f>
    4482:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <config+0x40>
    4486:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:210
  PlayerMorTime = 300;
    448a:	8c e2       	ldi	r24, 0x2C	; 44
    448c:	91 e0       	ldi	r25, 0x01	; 1
    448e:	a0 e0       	ldi	r26, 0x00	; 0
    4490:	b0 e0       	ldi	r27, 0x00	; 0
    4492:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <config+0x42>
    4496:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <config+0x43>
    449a:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <config+0x44>
    449e:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:211
  PlayerMorDur= 115;
    44a2:	83 e7       	ldi	r24, 0x73	; 115
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	a0 e0       	ldi	r26, 0x00	; 0
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <config+0x46>
    44ae:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <config+0x47>
    44b2:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <config+0x48>
    44b6:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:212
  PlayerEveTime = 1020;
    44ba:	4c ef       	ldi	r20, 0xFC	; 252
    44bc:	53 e0       	ldi	r21, 0x03	; 3
    44be:	60 e0       	ldi	r22, 0x00	; 0
    44c0:	70 e0       	ldi	r23, 0x00	; 0
    44c2:	40 93 fd 04 	sts	0x04FD, r20	; 0x8004fd <config+0x4a>
    44c6:	50 93 fe 04 	sts	0x04FE, r21	; 0x8004fe <config+0x4b>
    44ca:	60 93 ff 04 	sts	0x04FF, r22	; 0x8004ff <config+0x4c>
    44ce:	70 93 00 05 	sts	0x0500, r23	; 0x800500 <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:213
  PlayerEveDur = 115;
    44d2:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <config+0x4e>
    44d6:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <config+0x4f>
    44da:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <config+0x50>
    44de:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <config+0x51>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:215

  AutoPlay = 0;
    44e2:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:216
  AutoLight = 0;
    44e6:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:217
  SchlZone = 0;
    44ea:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:219

  SerialNo = 174;
    44ee:	8e ea       	ldi	r24, 0xAE	; 174
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <config+0x25>
    44f6:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:220
  DataYear = 2022;
    44fa:	86 ee       	ldi	r24, 0xE6	; 230
    44fc:	97 e0       	ldi	r25, 0x07	; 7
    44fe:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <config+0x23>
    4502:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <config+0x22>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1346
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    4506:	61 e0       	ldi	r22, 0x01	; 1
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1347
            lcd.print("Defaults loaded");
    450e:	84 ef       	ldi	r24, 0xF4	; 244
    4510:	91 e0       	ldi	r25, 0x01	; 1
    4512:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4516:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4518:	00 e0       	ldi	r16, 0x00	; 0
    451a:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1349
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
            lcd.print("Defaults loaded");
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    451e:	01 e0       	ldi	r16, 0x01	; 1
    4520:	11 3c       	cpi	r17, 0xC1	; 193
    4522:	09 f0       	breq	.+2      	; 0x4526 <loop+0x20b2>
    4524:	00 e0       	ldi	r16, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:701
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4526:	10 e0       	ldi	r17, 0x00	; 0
    4528:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
    452c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    452e:	00 e0       	ldi	r16, 0x00	; 0
    4530:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4534:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4536:	00 e0       	ldi	r16, 0x00	; 0
    4538:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    453c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    453e:	00 e0       	ldi	r16, 0x00	; 0
    4540:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4544:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4546:	00 e0       	ldi	r16, 0x00	; 0
    4548:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    454c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    454e:	00 e0       	ldi	r16, 0x00	; 0
    4550:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4554:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4556:	00 e0       	ldi	r16, 0x00	; 0
    4558:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    455c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    455e:	00 e0       	ldi	r16, 0x00	; 0
    4560:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4564:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4566:	00 e0       	ldi	r16, 0x00	; 0
    4568:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    456c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    456e:	00 e0       	ldi	r16, 0x00	; 0
    4570:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4574:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4576:	00 e0       	ldi	r16, 0x00	; 0
    4578:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    457c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    457e:	00 e0       	ldi	r16, 0x00	; 0
    4580:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4584:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4586:	00 e0       	ldi	r16, 0x00	; 0
    4588:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    458c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    458e:	00 e0       	ldi	r16, 0x00	; 0
    4590:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4594:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4596:	00 e0       	ldi	r16, 0x00	; 0
    4598:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    459c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    459e:	00 e0       	ldi	r16, 0x00	; 0
    45a0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45a4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45a6:	00 e0       	ldi	r16, 0x00	; 0
    45a8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45ac:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45ae:	00 e0       	ldi	r16, 0x00	; 0
    45b0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45b4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45b6:	00 e0       	ldi	r16, 0x00	; 0
    45b8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45bc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45be:	00 e0       	ldi	r16, 0x00	; 0
    45c0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45c4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45c6:	00 e0       	ldi	r16, 0x00	; 0
    45c8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45cc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45ce:	00 e0       	ldi	r16, 0x00	; 0
    45d0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45d4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45d6:	00 e0       	ldi	r16, 0x00	; 0
    45d8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45dc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45de:	00 e0       	ldi	r16, 0x00	; 0
    45e0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45e4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45e6:	00 e0       	ldi	r16, 0x00	; 0
    45e8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45ec:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45ee:	00 e0       	ldi	r16, 0x00	; 0
    45f0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45f4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45f6:	00 e0       	ldi	r16, 0x00	; 0
    45f8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45fc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45fe:	00 e0       	ldi	r16, 0x00	; 0
    4600:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:929
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4604:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:700
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4606:	00 e0       	ldi	r16, 0x00	; 0
    4608:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <loop+0xe38>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1363
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    460c:	11 23       	and	r17, r17
    460e:	59 f0       	breq	.+22     	; 0x4626 <loop+0x21b2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1365
    {
        lcd.setCursor(1, 1);
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1366
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    4618:	8f 2d       	mov	r24, r15
    461a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Config::getFormattedStr(unsigned char) [clone .constprop.86]>
    461e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    4622:	0c 94 24 18 	jmp	0x3048	; 0x3048 <loop+0xbd4>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1370
    }
    else
    {
        if (millis() - timr_Time > 300)
    4626:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    462a:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <timr_Time>
    462e:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <timr_Time+0x1>
    4632:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <timr_Time+0x2>
    4636:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timr_Time+0x3>
    463a:	60 1b       	sub	r22, r16
    463c:	71 0b       	sbc	r23, r17
    463e:	82 0b       	sbc	r24, r18
    4640:	93 0b       	sbc	r25, r19
    4642:	6d 32       	cpi	r22, 0x2D	; 45
    4644:	71 40       	sbci	r23, 0x01	; 1
    4646:	81 05       	cpc	r24, r1
    4648:	91 05       	cpc	r25, r1
    464a:	10 f4       	brcc	.+4      	; 0x4650 <loop+0x21dc>
    464c:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1372
        {
            if (blink)
    4650:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    4654:	88 23       	and	r24, r24
    4656:	c9 f0       	breq	.+50     	; 0x468a <loop+0x2216>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1374
            {
                lcd.setCursor(1, 1);
    4658:	61 e0       	ldi	r22, 0x01	; 1
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1375
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    4660:	8f 2d       	mov	r24, r15
    4662:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Config::getFormattedStr(unsigned char) [clone .constprop.86]>
    4666:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
    466a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1376
                blink = false;
    466e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1407
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    4672:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    4676:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <timr_Time>
    467a:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <timr_Time+0x1>
    467e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timr_Time+0x2>
    4682:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timr_Time+0x3>
    4686:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1380
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime ||
    468a:	63 e0       	ldi	r22, 0x03	; 3
    468c:	f6 16       	cp	r15, r22
    468e:	41 f0       	breq	.+16     	; 0x46a0 <loop+0x222c>
    4690:	88 ee       	ldi	r24, 0xE8	; 232
    4692:	8f 0d       	add	r24, r15
    4694:	82 30       	cpi	r24, 0x02	; 2
    4696:	20 f0       	brcs	.+8      	; 0x46a0 <loop+0x222c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1382
                    cmdId == mnuCmdLt1OnTime ||
                    cmdId == mnuCmdLt1OffTime ||
    4698:	85 ee       	ldi	r24, 0xE5	; 229
    469a:	8f 0d       	add	r24, r15
    469c:	84 30       	cpi	r24, 0x04	; 4
    469e:	a8 f4       	brcc	.+42     	; 0x46ca <loop+0x2256>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1388
                    cmdId == mnuCmdPlrMorOnTime ||
                    cmdId == mnuCmdPlrMorDur ||
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
    46a0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    46a4:	81 11       	cpse	r24, r1
    46a6:	0c c0       	rjmp	.+24     	; 0x46c0 <loop+0x224c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1389
                        lcd.setCursor(1, 1);
    46a8:	61 e0       	ldi	r22, 0x01	; 1
    46aa:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1391
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    46ac:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1392
                    lcd.print(F("  "));
    46b0:	84 ef       	ldi	r24, 0xF4	; 244
    46b2:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1403
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    46b4:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1404
                    blink = true;
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    46be:	d9 cf       	rjmp	.-78     	; 0x4672 <loop+0x21fe>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1390
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    46c0:	81 30       	cpi	r24, 0x01	; 1
    46c2:	b1 f7       	brne	.-20     	; 0x46b0 <loop+0x223c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1391
                        lcd.setCursor(4, 1);
    46c4:	61 e0       	ldi	r22, 0x01	; 1
    46c6:	84 e0       	ldi	r24, 0x04	; 4
    46c8:	f1 cf       	rjmp	.-30     	; 0x46ac <loop+0x2238>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1395
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    46ca:	82 e0       	ldi	r24, 0x02	; 2
    46cc:	f8 12       	cpse	r15, r24
    46ce:	d1 cf       	rjmp	.-94     	; 0x4672 <loop+0x21fe>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1397
                {
                    if (blinkMode == setDate)
    46d0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <blinkMode>
    46d4:	82 30       	cpi	r24, 0x02	; 2
    46d6:	39 f4       	brne	.+14     	; 0x46e6 <loop+0x2272>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1398
                        lcd.setCursor(1, 1);
    46d8:	61 e0       	ldi	r22, 0x01	; 1
    46da:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1402
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    46dc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1403
                    lcd.print(F("  "));
    46e0:	81 ef       	ldi	r24, 0xF1	; 241
    46e2:	92 e0       	ldi	r25, 0x02	; 2
    46e4:	e7 cf       	rjmp	.-50     	; 0x46b4 <loop+0x2240>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1399
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    46e6:	83 30       	cpi	r24, 0x03	; 3
    46e8:	19 f4       	brne	.+6      	; 0x46f0 <loop+0x227c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1400
                        lcd.setCursor(4, 1);
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	84 e0       	ldi	r24, 0x04	; 4
    46ee:	f6 cf       	rjmp	.-20     	; 0x46dc <loop+0x2268>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1401
                    if (blinkMode == setYear)
    46f0:	84 30       	cpi	r24, 0x04	; 4
    46f2:	b1 f7       	brne	.-20     	; 0x46e0 <loop+0x226c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1402
                        lcd.setCursor(9, 1);
    46f4:	61 e0       	ldi	r22, 0x01	; 1
    46f6:	89 e0       	ldi	r24, 0x09	; 9
    46f8:	f1 cf       	rjmp	.-30     	; 0x46dc <loop+0x2268>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:539
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:540
        lcd.print(F("  RUNNING DEMO  "));
    4702:	88 e0       	ldi	r24, 0x08	; 8
    4704:	93 e0       	ldi	r25, 0x03	; 3
    4706:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:541
        lcd.setCursor(0, 1);
    470a:	61 e0       	ldi	r22, 0x01	; 1
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:542
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    4712:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <demoTime>
    4716:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <demoTime+0x1>
    471a:	6c e9       	ldi	r22, 0x9C	; 156
    471c:	71 e0       	ldi	r23, 0x01	; 1
    471e:	9c e0       	ldi	r25, 0x0C	; 12
    4720:	e9 16       	cp	r14, r25
    4722:	f1 04       	cpc	r15, r1
    4724:	14 f4       	brge	.+4      	; 0x472a <loop+0x22b6>
    4726:	63 ea       	ldi	r22, 0xA3	; 163
    4728:	71 e0       	ldi	r23, 0x01	; 1
    472a:	ce 01       	movw	r24, r28
    472c:	49 96       	adiw	r24, 0x19	; 25
    472e:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4732:	ed e0       	ldi	r30, 0x0D	; 13
    4734:	ee 16       	cp	r14, r30
    4736:	f1 04       	cpc	r15, r1
    4738:	1c f0       	brlt	.+6      	; 0x4740 <loop+0x22cc>
    473a:	fc e0       	ldi	r31, 0x0C	; 12
    473c:	ef 1a       	sub	r14, r31
    473e:	f1 08       	sbc	r15, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    4740:	1c 8a       	std	Y+20, r1	; 0x14
    4742:	1b 8a       	std	Y+19, r1	; 0x13
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    4744:	1e 8a       	std	Y+22, r1	; 0x16
    4746:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    4748:	18 8e       	std	Y+24, r1	; 0x18
    474a:	1f 8a       	std	Y+23, r1	; 0x17
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    474c:	4a e0       	ldi	r20, 0x0A	; 10
    474e:	8e 01       	movw	r16, r28
    4750:	0f 5f       	subi	r16, 0xFF	; 255
    4752:	1f 4f       	sbci	r17, 0xFF	; 255
    4754:	b8 01       	movw	r22, r16
    4756:	c7 01       	movw	r24, r14
    4758:	0e 94 3d 2c 	call	0x587a	; 0x587a <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    475c:	f8 01       	movw	r30, r16
    475e:	01 90       	ld	r0, Z+
    4760:	00 20       	and	r0, r0
    4762:	e9 f7       	brne	.-6      	; 0x475e <loop+0x22ea>
    4764:	31 97       	sbiw	r30, 0x01	; 1
    4766:	7f 01       	movw	r14, r30
    4768:	e0 1a       	sub	r14, r16
    476a:	f1 0a       	sbc	r15, r17
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    476c:	b7 01       	movw	r22, r14
    476e:	ce 01       	movw	r24, r28
    4770:	43 96       	adiw	r24, 0x13	; 19
    4772:	0e 94 cb 0b 	call	0x1796	; 0x1796 <String::reserve(unsigned int)>
    4776:	81 11       	cpse	r24, r1
    4778:	61 c0       	rjmp	.+194    	; 0x483c <loop+0x23c8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    477a:	ce 01       	movw	r24, r28
    477c:	43 96       	adiw	r24, 0x13	; 19
    477e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    4782:	64 e0       	ldi	r22, 0x04	; 4
    4784:	72 e0       	ldi	r23, 0x02	; 2
    4786:	c8 01       	movw	r24, r16
    4788:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:542
    478c:	be 01       	movw	r22, r28
    478e:	6d 5e       	subi	r22, 0xED	; 237
    4790:	7f 4f       	sbci	r23, 0xFF	; 255
    4792:	c8 01       	movw	r24, r16
    4794:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <operator+(StringSumHelper const&, String const&)>
    4798:	be 01       	movw	r22, r28
    479a:	67 5e       	subi	r22, 0xE7	; 231
    479c:	7f 4f       	sbci	r23, 0xFF	; 255
    479e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    47a2:	fc 01       	movw	r30, r24
    47a4:	44 81       	ldd	r20, Z+4	; 0x04
    47a6:	55 81       	ldd	r21, Z+5	; 0x05
    47a8:	60 81       	ld	r22, Z
    47aa:	71 81       	ldd	r23, Z+1	; 0x01
    47ac:	84 eb       	ldi	r24, 0xB4	; 180
    47ae:	95 e0       	ldi	r25, 0x05	; 5
    47b0:	0e 94 0b 03 	call	0x616	; 0x616 <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    47b4:	89 81       	ldd	r24, Y+1	; 0x01
    47b6:	9a 81       	ldd	r25, Y+2	; 0x02
    47b8:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
    47bc:	8b 89       	ldd	r24, Y+19	; 0x13
    47be:	9c 89       	ldd	r25, Y+20	; 0x14
    47c0:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
    47c4:	89 8d       	ldd	r24, Y+25	; 0x19
    47c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    47c8:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:543
        digitalWrite(AMP, HIGH);
    47cc:	61 e0       	ldi	r22, 0x01	; 1
    47ce:	8c e0       	ldi	r24, 0x0C	; 12
    47d0:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:544
        delay(1000);
    47d4:	68 ee       	ldi	r22, 0xE8	; 232
    47d6:	73 e0       	ldi	r23, 0x03	; 3
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:545
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    47e0:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <demoTime>
    47e4:	ce 01       	movw	r24, r28
    47e6:	49 96       	adiw	r24, 0x19	; 25
    47e8:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    47ec:	eb 8c       	ldd	r14, Y+27	; 0x1b
    47ee:	ce 01       	movw	r24, r28
    47f0:	43 96       	adiw	r24, 0x13	; 19
    47f2:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    47f6:	dc 88       	ldd	r13, Y+20	; 0x14
    47f8:	c8 01       	movw	r24, r16
    47fa:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    47fe:	89 81       	ldd	r24, Y+1	; 0x01
    4800:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <bell>
    4804:	d0 92 af 05 	sts	0x05AF, r13	; 0x8005af <bell+0x1>
    4808:	e0 92 b0 05 	sts	0x05B0, r14	; 0x8005b0 <bell+0x2>
    480c:	f0 92 b1 05 	sts	0x05B1, r15	; 0x8005b1 <bell+0x3>
    4810:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <bell+0x4>
    4814:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <bell+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:546
        PlayChant();
    4818:	0e 94 a2 10 	call	0x2144	; 0x2144 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:547
        if (btn == BUTTON_DOWN_PRESSED)
    481c:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    4820:	83 30       	cpi	r24, 0x03	; 3
    4822:	11 f0       	breq	.+4      	; 0x4828 <loop+0x23b4>
    4824:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:549
        {
            playSong = End_of_Song;
    4828:	88 e0       	ldi	r24, 0x08	; 8
    482a:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    482e:	70 e0       	ldi	r23, 0x00	; 0
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	86 e1       	ldi	r24, 0x16	; 22
    4834:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
    4838:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <loop+0x7b8>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    483c:	f8 8e       	std	Y+24, r15	; 0x18
    483e:	ef 8a       	std	Y+23, r14	; 0x17
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    4840:	b8 01       	movw	r22, r16
    4842:	8b 89       	ldd	r24, Y+19	; 0x13
    4844:	9c 89       	ldd	r25, Y+20	; 0x14
    4846:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
    484a:	9b cf       	rjmp	.-202    	; 0x4782 <loop+0x230e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:556
        }
        break;
    }
    case APP_PLAYER_MODE:
    {
        digitalWrite(AMP, HIGH);
    484c:	61 e0       	ldi	r22, 0x01	; 1
    484e:	8c e0       	ldi	r24, 0x0C	; 12
    4850:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:557
        digitalWrite(AUDCONT, HIGH);
    4854:	61 e0       	ldi	r22, 0x01	; 1
    4856:	8a e0       	ldi	r24, 0x0A	; 10
    4858:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:558
        if (millis() - timr_Time > 1000)
    485c:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    4860:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <timr_Time>
    4864:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <timr_Time+0x1>
    4868:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <timr_Time+0x2>
    486c:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timr_Time+0x3>
    4870:	60 1b       	sub	r22, r16
    4872:	71 0b       	sbc	r23, r17
    4874:	82 0b       	sbc	r24, r18
    4876:	93 0b       	sbc	r25, r19
    4878:	69 3e       	cpi	r22, 0xE9	; 233
    487a:	73 40       	sbci	r23, 0x03	; 3
    487c:	81 05       	cpc	r24, r1
    487e:	91 05       	cpc	r25, r1
    4880:	70 f1       	brcs	.+92     	; 0x48de <loop+0x246a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:560
        {
            timr_Time = millis();
    4882:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    4886:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <timr_Time>
    488a:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <timr_Time+0x1>
    488e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timr_Time+0x2>
    4892:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:561
            showTime();
    4896:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:562
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    489a:	ce 01       	movw	r24, r28
    489c:	43 96       	adiw	r24, 0x13	; 19
    489e:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    48a2:	8e 89       	ldd	r24, Y+22	; 0x16
    48a4:	2c e3       	ldi	r18, 0x3C	; 60
    48a6:	82 9f       	mul	r24, r18
    48a8:	80 01       	movw	r16, r0
    48aa:	11 24       	eor	r1, r1
    48ac:	ce 01       	movw	r24, r28
    48ae:	01 96       	adiw	r24, 0x01	; 1
    48b0:	0e 94 41 0a 	call	0x1482	; 0x1482 <RTC_DS1307::now() [clone .constprop.23]>
    48b4:	8d 81       	ldd	r24, Y+5	; 0x05
    48b6:	80 0f       	add	r24, r16
    48b8:	91 2f       	mov	r25, r17
    48ba:	91 1d       	adc	r25, r1
    48bc:	09 2e       	mov	r0, r25
    48be:	00 0c       	add	r0, r0
    48c0:	aa 0b       	sbc	r26, r26
    48c2:	bb 0b       	sbc	r27, r27
    48c4:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <CurTime>
    48c8:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <CurTime+0x1>
    48cc:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <CurTime+0x2>
    48d0:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:563
            if (config.AutoPlay)
    48d4:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <config+0x17>
    48d8:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:564
                TriggerPlayer();
    48da:	0e 94 88 08 	call	0x1110	; 0x1110 <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:566
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    48de:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    48e2:	00 91 35 04 	lds	r16, 0x0435	; 0x800435 <timrLCD>
    48e6:	10 91 36 04 	lds	r17, 0x0436	; 0x800436 <timrLCD+0x1>
    48ea:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <timrLCD+0x2>
    48ee:	30 91 38 04 	lds	r19, 0x0438	; 0x800438 <timrLCD+0x3>
    48f2:	6b 01       	movw	r12, r22
    48f4:	7c 01       	movw	r14, r24
    48f6:	c0 1a       	sub	r12, r16
    48f8:	d1 0a       	sbc	r13, r17
    48fa:	e2 0a       	sbc	r14, r18
    48fc:	f3 0a       	sbc	r15, r19
    48fe:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <config+0x13>
    4902:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <config+0x14>
    4906:	28 ee       	ldi	r18, 0xE8	; 232
    4908:	33 e0       	ldi	r19, 0x03	; 3
    490a:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <__usmulhisi3>
    490e:	6c 15       	cp	r22, r12
    4910:	7d 05       	cpc	r23, r13
    4912:	8e 05       	cpc	r24, r14
    4914:	9f 05       	cpc	r25, r15
    4916:	38 f4       	brcc	.+14     	; 0x4926 <loop+0x24b2>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    4918:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    491c:	60 e0       	ldi	r22, 0x00	; 0
    491e:	84 eb       	ldi	r24, 0xB4	; 180
    4920:	95 e0       	ldi	r25, 0x05	; 5
    4922:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:570
        {
            lcd.noBacklight();
        }
        lcd.setCursor(0, 1);
    4926:	61 e0       	ldi	r22, 0x01	; 1
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:571
        lcd.print(F(" PLAYER MODE ON "));
    492e:	87 ef       	ldi	r24, 0xF7	; 247
    4930:	92 e0       	ldi	r25, 0x02	; 2
    4932:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:572
        if (btn == BUTTON_MODE_LONG_PRESSED)
    4936:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <btn>
    493a:	85 38       	cpi	r24, 0x85	; 133
    493c:	11 f0       	breq	.+4      	; 0x4942 <loop+0x24ce>
    493e:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:574
        {
            if (!ButLongPress)
    4942:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <ButLongPress>
    4946:	81 11       	cpse	r24, r1
    4948:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <loop+0x7b8>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:576
            {
                appMode = APP_NORMAL_MODE;
    494c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <appMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:577
                PlayerONMor = 0;
    4950:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:578
                PlayerONEve = 0;
    4954:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <PlayerONEve>
    4958:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <loop+0x754>

0000495c <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    495c:	1f 92       	push	r1
    495e:	0f 92       	push	r0
    4960:	0f b6       	in	r0, 0x3f	; 63
    4962:	0f 92       	push	r0
    4964:	11 24       	eor	r1, r1
    4966:	2f 93       	push	r18
    4968:	3f 93       	push	r19
    496a:	8f 93       	push	r24
    496c:	9f 93       	push	r25
    496e:	af 93       	push	r26
    4970:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    4972:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <timer0_millis>
    4976:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <timer0_millis+0x1>
    497a:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <timer0_millis+0x2>
    497e:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    4982:	30 91 28 04 	lds	r19, 0x0428	; 0x800428 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    4986:	23 e0       	ldi	r18, 0x03	; 3
    4988:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    498a:	2d 37       	cpi	r18, 0x7D	; 125
    498c:	68 f1       	brcs	.+90     	; 0x49e8 <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    498e:	26 e8       	ldi	r18, 0x86	; 134
    4990:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    4992:	02 96       	adiw	r24, 0x02	; 2
    4994:	a1 1d       	adc	r26, r1
    4996:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    4998:	20 93 28 04 	sts	0x0428, r18	; 0x800428 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    499c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <timer0_millis>
    49a0:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <timer0_millis+0x1>
    49a4:	a0 93 2b 04 	sts	0x042B, r26	; 0x80042b <timer0_millis+0x2>
    49a8:	b0 93 2c 04 	sts	0x042C, r27	; 0x80042c <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    49ac:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <timer0_overflow_count>
    49b0:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <timer0_overflow_count+0x1>
    49b4:	a0 91 2f 04 	lds	r26, 0x042F	; 0x80042f <timer0_overflow_count+0x2>
    49b8:	b0 91 30 04 	lds	r27, 0x0430	; 0x800430 <timer0_overflow_count+0x3>
    49bc:	01 96       	adiw	r24, 0x01	; 1
    49be:	a1 1d       	adc	r26, r1
    49c0:	b1 1d       	adc	r27, r1
    49c2:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <timer0_overflow_count>
    49c6:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <timer0_overflow_count+0x1>
    49ca:	a0 93 2f 04 	sts	0x042F, r26	; 0x80042f <timer0_overflow_count+0x2>
    49ce:	b0 93 30 04 	sts	0x0430, r27	; 0x800430 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    49d2:	bf 91       	pop	r27
    49d4:	af 91       	pop	r26
    49d6:	9f 91       	pop	r25
    49d8:	8f 91       	pop	r24
    49da:	3f 91       	pop	r19
    49dc:	2f 91       	pop	r18
    49de:	0f 90       	pop	r0
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	0f 90       	pop	r0
    49e4:	1f 90       	pop	r1
    49e6:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    49e8:	01 96       	adiw	r24, 0x01	; 1
    49ea:	a1 1d       	adc	r26, r1
    49ec:	b1 1d       	adc	r27, r1
    49ee:	d4 cf       	rjmp	.-88     	; 0x4998 <__vector_16+0x3c>

000049f0 <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    49f0:	1f 92       	push	r1
    49f2:	0f 92       	push	r0
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	0f 92       	push	r0
    49f8:	11 24       	eor	r1, r1
    49fa:	2f 93       	push	r18
    49fc:	3f 93       	push	r19
    49fe:	4f 93       	push	r20
    4a00:	5f 93       	push	r21
    4a02:	6f 93       	push	r22
    4a04:	7f 93       	push	r23
    4a06:	8f 93       	push	r24
    4a08:	9f 93       	push	r25
    4a0a:	af 93       	push	r26
    4a0c:	bf 93       	push	r27
    4a0e:	ef 93       	push	r30
    4a10:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    4a12:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <SoftwareSerial::active_object>
    4a16:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <SoftwareSerial::active_object+0x1>
    4a1a:	30 97       	sbiw	r30, 0x00	; 0
    4a1c:	49 f0       	breq	.+18     	; 0x4a30 <__vector_3+0x40>
    4a1e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4a20:	b7 85       	ldd	r27, Z+15	; 0x0f
    4a22:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    4a24:	96 8d       	ldd	r25, Z+30	; 0x1e
    4a26:	91 ff       	sbrs	r25, 1
    4a28:	14 c0       	rjmp	.+40     	; 0x4a52 <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4a2a:	9c 91       	ld	r25, X
    4a2c:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    4a2e:	a1 f4       	brne	.+40     	; 0x4a58 <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    4a30:	ff 91       	pop	r31
    4a32:	ef 91       	pop	r30
    4a34:	bf 91       	pop	r27
    4a36:	af 91       	pop	r26
    4a38:	9f 91       	pop	r25
    4a3a:	8f 91       	pop	r24
    4a3c:	7f 91       	pop	r23
    4a3e:	6f 91       	pop	r22
    4a40:	5f 91       	pop	r21
    4a42:	4f 91       	pop	r20
    4a44:	3f 91       	pop	r19
    4a46:	2f 91       	pop	r18
    4a48:	0f 90       	pop	r0
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	0f 90       	pop	r0
    4a4e:	1f 90       	pop	r1
    4a50:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4a52:	9c 91       	ld	r25, X
    4a54:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    4a56:	61 f7       	brne	.-40     	; 0x4a30 <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    4a58:	a3 89       	ldd	r26, Z+19	; 0x13
    4a5a:	b4 89       	ldd	r27, Z+20	; 0x14
    4a5c:	9c 91       	ld	r25, X
    4a5e:	85 89       	ldd	r24, Z+21	; 0x15
    4a60:	80 95       	com	r24
    4a62:	89 23       	and	r24, r25
    4a64:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    4a66:	86 89       	ldd	r24, Z+22	; 0x16
    4a68:	97 89       	ldd	r25, Z+23	; 0x17
    4a6a:	01 97       	sbiw	r24, 0x01	; 1
    4a6c:	f1 f7       	brne	.-4      	; 0x4a6a <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    4a6e:	60 8d       	ldd	r22, Z+24	; 0x18
    4a70:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4a72:	a6 85       	ldd	r26, Z+14	; 0x0e
    4a74:	b7 85       	ldd	r27, Z+15	; 0x0f
    4a76:	55 85       	ldd	r21, Z+13	; 0x0d
    4a78:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    4a82:	82 2f       	mov	r24, r18
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	95 95       	asr	r25
    4a88:	87 95       	ror	r24
    4a8a:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4a8c:	4c 91       	ld	r20, X
    4a8e:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    4a90:	09 f0       	breq	.+2      	; 0x4a94 <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    4a92:	20 68       	ori	r18, 0x80	; 128
    4a94:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    4a96:	91 f7       	brne	.-28     	; 0x4a7c <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    4a98:	86 8d       	ldd	r24, Z+30	; 0x1e
    4a9a:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    4a9c:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    4a9e:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	01 96       	adiw	r24, 0x01	; 1
    4aa6:	8f 73       	andi	r24, 0x3F	; 63
    4aa8:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    4aaa:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <SoftwareSerial::_receive_buffer_head>
    4aae:	38 17       	cp	r19, r24
    4ab0:	99 f0       	breq	.+38     	; 0x4ad8 <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    4ab2:	a0 91 32 04 	lds	r26, 0x0432	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
    4ab6:	b0 e0       	ldi	r27, 0x00	; 0
    4ab8:	a8 51       	subi	r26, 0x18	; 24
    4aba:	bc 4f       	sbci	r27, 0xFC	; 252
    4abc:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    4abe:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    4ac2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ac4:	93 8d       	ldd	r25, Z+27	; 0x1b
    4ac6:	01 97       	sbiw	r24, 0x01	; 1
    4ac8:	f1 f7       	brne	.-4      	; 0x4ac6 <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    4aca:	a3 89       	ldd	r26, Z+19	; 0x13
    4acc:	b4 89       	ldd	r27, Z+20	; 0x14
    4ace:	8c 91       	ld	r24, X
    4ad0:	95 89       	ldd	r25, Z+21	; 0x15
    4ad2:	89 2b       	or	r24, r25
    4ad4:	8c 93       	st	X, r24
    4ad6:	ac cf       	rjmp	.-168    	; 0x4a30 <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    4ad8:	86 8d       	ldd	r24, Z+30	; 0x1e
    4ada:	81 60       	ori	r24, 0x01	; 1
    4adc:	86 8f       	std	Z+30, r24	; 0x1e
    4ade:	f1 cf       	rjmp	.-30     	; 0x4ac2 <__vector_3+0xd2>

00004ae0 <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4ae0:	1f 92       	push	r1
    4ae2:	0f 92       	push	r0
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	0f 92       	push	r0
    4ae8:	11 24       	eor	r1, r1
    4aea:	2f 93       	push	r18
    4aec:	3f 93       	push	r19
    4aee:	4f 93       	push	r20
    4af0:	5f 93       	push	r21
    4af2:	6f 93       	push	r22
    4af4:	7f 93       	push	r23
    4af6:	8f 93       	push	r24
    4af8:	9f 93       	push	r25
    4afa:	af 93       	push	r26
    4afc:	bf 93       	push	r27
    4afe:	ef 93       	push	r30
    4b00:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    4b02:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4b06:	88 7f       	andi	r24, 0xF8	; 248
    4b08:	80 36       	cpi	r24, 0x60	; 96
    4b0a:	09 f4       	brne	.+2      	; 0x4b0e <__vector_24+0x2e>
    4b0c:	4a c0       	rjmp	.+148    	; 0x4ba2 <__vector_24+0xc2>
    4b0e:	f0 f5       	brcc	.+124    	; 0x4b8c <__vector_24+0xac>
    4b10:	88 32       	cpi	r24, 0x28	; 40
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <__vector_24+0x36>
    4b14:	a7 c0       	rjmp	.+334    	; 0x4c64 <__vector_24+0x184>
    4b16:	18 f5       	brcc	.+70     	; 0x4b5e <__vector_24+0x7e>
    4b18:	80 31       	cpi	r24, 0x10	; 16
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <__vector_24+0x3e>
    4b1c:	9b c0       	rjmp	.+310    	; 0x4c54 <__vector_24+0x174>
    4b1e:	b8 f4       	brcc	.+46     	; 0x4b4e <__vector_24+0x6e>
    4b20:	88 23       	and	r24, r24
    4b22:	09 f4       	brne	.+2      	; 0x4b26 <__vector_24+0x46>
    4b24:	f9 c0       	rjmp	.+498    	; 0x4d18 <__vector_24+0x238>
    4b26:	88 30       	cpi	r24, 0x08	; 8
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <__vector_24+0x4c>
    4b2a:	94 c0       	rjmp	.+296    	; 0x4c54 <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4b2c:	ff 91       	pop	r31
    4b2e:	ef 91       	pop	r30
    4b30:	bf 91       	pop	r27
    4b32:	af 91       	pop	r26
    4b34:	9f 91       	pop	r25
    4b36:	8f 91       	pop	r24
    4b38:	7f 91       	pop	r23
    4b3a:	6f 91       	pop	r22
    4b3c:	5f 91       	pop	r21
    4b3e:	4f 91       	pop	r20
    4b40:	3f 91       	pop	r19
    4b42:	2f 91       	pop	r18
    4b44:	0f 90       	pop	r0
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	0f 90       	pop	r0
    4b4a:	1f 90       	pop	r1
    4b4c:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4b4e:	88 31       	cpi	r24, 0x18	; 24
    4b50:	09 f4       	brne	.+2      	; 0x4b54 <__vector_24+0x74>
    4b52:	88 c0       	rjmp	.+272    	; 0x4c64 <__vector_24+0x184>
    4b54:	80 32       	cpi	r24, 0x20	; 32
    4b56:	51 f7       	brne	.-44     	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4b58:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <twi_error>
    4b5c:	14 c0       	rjmp	.+40     	; 0x4b86 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4b5e:	80 34       	cpi	r24, 0x40	; 64
    4b60:	09 f4       	brne	.+2      	; 0x4b64 <__vector_24+0x84>
    4b62:	9d c0       	rjmp	.+314    	; 0x4c9e <__vector_24+0x1be>
    4b64:	40 f4       	brcc	.+16     	; 0x4b76 <__vector_24+0x96>
    4b66:	80 33       	cpi	r24, 0x30	; 48
    4b68:	b9 f3       	breq	.-18     	; 0x4b58 <__vector_24+0x78>
    4b6a:	88 33       	cpi	r24, 0x38	; 56
    4b6c:	f9 f6       	brne	.-66     	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4b6e:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4b72:	85 ec       	ldi	r24, 0xC5	; 197
    4b74:	b0 c0       	rjmp	.+352    	; 0x4cd6 <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4b76:	80 35       	cpi	r24, 0x50	; 80
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <__vector_24+0x9c>
    4b7a:	85 c0       	rjmp	.+266    	; 0x4c86 <__vector_24+0x1a6>
    4b7c:	88 35       	cpi	r24, 0x58	; 88
    4b7e:	09 f4       	brne	.+2      	; 0x4b82 <__vector_24+0xa2>
    4b80:	96 c0       	rjmp	.+300    	; 0x4cae <__vector_24+0x1ce>
    4b82:	88 34       	cpi	r24, 0x48	; 72
    4b84:	99 f6       	brne	.-90     	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    4b86:	0e 94 f6 06 	call	0xdec	; 0xdec <twi_stop>
    4b8a:	d0 cf       	rjmp	.-96     	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4b8c:	88 39       	cpi	r24, 0x98	; 152
    4b8e:	09 f4       	brne	.+2      	; 0x4b92 <__vector_24+0xb2>
    4b90:	8c c0       	rjmp	.+280    	; 0x4caa <__vector_24+0x1ca>
    4b92:	38 f5       	brcc	.+78     	; 0x4be2 <__vector_24+0x102>
    4b94:	88 37       	cpi	r24, 0x78	; 120
    4b96:	29 f0       	breq	.+10     	; 0x4ba2 <__vector_24+0xc2>
    4b98:	50 f4       	brcc	.+20     	; 0x4bae <__vector_24+0xce>
    4b9a:	88 36       	cpi	r24, 0x68	; 104
    4b9c:	11 f0       	breq	.+4      	; 0x4ba2 <__vector_24+0xc2>
    4b9e:	80 37       	cpi	r24, 0x70	; 112
    4ba0:	29 f6       	brne	.-118    	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4ba2:	83 e0       	ldi	r24, 0x03	; 3
    4ba4:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4ba8:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_rxBufferIndex>
    4bac:	57 c0       	rjmp	.+174    	; 0x4c5c <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4bae:	88 38       	cpi	r24, 0x88	; 136
    4bb0:	09 f4       	brne	.+2      	; 0x4bb4 <__vector_24+0xd4>
    4bb2:	7b c0       	rjmp	.+246    	; 0x4caa <__vector_24+0x1ca>
    4bb4:	80 39       	cpi	r24, 0x90	; 144
    4bb6:	19 f0       	breq	.+6      	; 0x4bbe <__vector_24+0xde>
    4bb8:	80 38       	cpi	r24, 0x80	; 128
    4bba:	09 f0       	breq	.+2      	; 0x4bbe <__vector_24+0xde>
    4bbc:	b7 cf       	rjmp	.-146    	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    4bbe:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4bc2:	80 32       	cpi	r24, 0x20	; 32
    4bc4:	08 f0       	brcs	.+2      	; 0x4bc8 <__vector_24+0xe8>
    4bc6:	71 c0       	rjmp	.+226    	; 0x4caa <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4bc8:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	8e 0f       	add	r24, r30
    4bd0:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_rxBufferIndex>
    4bd4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	e9 53       	subi	r30, 0x39	; 57
    4bdc:	fc 4f       	sbci	r31, 0xFC	; 252
    4bde:	80 83       	st	Z, r24
    4be0:	3d c0       	rjmp	.+122    	; 0x4c5c <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4be2:	80 3b       	cpi	r24, 0xB0	; 176
    4be4:	39 f0       	breq	.+14     	; 0x4bf4 <__vector_24+0x114>
    4be6:	e0 f4       	brcc	.+56     	; 0x4c20 <__vector_24+0x140>
    4be8:	80 3a       	cpi	r24, 0xA0	; 160
    4bea:	09 f4       	brne	.+2      	; 0x4bee <__vector_24+0x10e>
    4bec:	79 c0       	rjmp	.+242    	; 0x4ce0 <__vector_24+0x200>
    4bee:	88 3a       	cpi	r24, 0xA8	; 168
    4bf0:	09 f0       	breq	.+2      	; 0x4bf4 <__vector_24+0x114>
    4bf2:	9c cf       	rjmp	.-200    	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4bf4:	84 e0       	ldi	r24, 0x04	; 4
    4bf6:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4bfa:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4bfe:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4c02:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <twi_onSlaveTransmit>
    4c06:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <twi_onSlaveTransmit+0x1>
    4c0a:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4c0c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_txBufferLength>
    4c10:	81 11       	cpse	r24, r1
    4c12:	0f c0       	rjmp	.+30     	; 0x4c32 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    4c1a:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_txBuffer>
    4c1e:	09 c0       	rjmp	.+18     	; 0x4c32 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4c20:	80 3c       	cpi	r24, 0xC0	; 192
    4c22:	09 f4       	brne	.+2      	; 0x4c26 <__vector_24+0x146>
    4c24:	a6 cf       	rjmp	.-180    	; 0x4b72 <__vector_24+0x92>
    4c26:	88 3c       	cpi	r24, 0xC8	; 200
    4c28:	09 f4       	brne	.+2      	; 0x4c2c <__vector_24+0x14c>
    4c2a:	a3 cf       	rjmp	.-186    	; 0x4b72 <__vector_24+0x92>
    4c2c:	88 3b       	cpi	r24, 0xB8	; 184
    4c2e:	09 f0       	breq	.+2      	; 0x4c32 <__vector_24+0x152>
    4c30:	7d cf       	rjmp	.-262    	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4c32:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <twi_txBufferIndex>
    4c36:	81 e0       	ldi	r24, 0x01	; 1
    4c38:	8e 0f       	add	r24, r30
    4c3a:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <twi_txBufferIndex>
    4c3e:	f0 e0       	ldi	r31, 0x00	; 0
    4c40:	eb 55       	subi	r30, 0x5B	; 91
    4c42:	fc 4f       	sbci	r31, 0xFC	; 252
    4c44:	80 81       	ld	r24, Z
    4c46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4c4a:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_txBufferIndex>
    4c4e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_txBufferLength>
    4c52:	29 c0       	rjmp	.+82     	; 0x4ca6 <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4c54:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4c58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4c5c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4c5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4c62:	64 cf       	rjmp	.-312    	; 0x4b2c <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4c64:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <twi_masterBufferIndex>
    4c68:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <twi_masterBufferLength>
    4c6c:	98 17       	cp	r25, r24
    4c6e:	58 f5       	brcc	.+86     	; 0x4cc6 <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4c70:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <twi_masterBufferIndex>
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	8e 0f       	add	r24, r30
    4c78:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <twi_masterBufferIndex>
    4c7c:	f0 e0       	ldi	r31, 0x00	; 0
    4c7e:	ec 59       	subi	r30, 0x9C	; 156
    4c80:	fb 4f       	sbci	r31, 0xFB	; 251
    4c82:	80 81       	ld	r24, Z
    4c84:	e9 cf       	rjmp	.-46     	; 0x4c58 <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4c86:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <twi_masterBufferIndex>
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	8e 0f       	add	r24, r30
    4c8e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <twi_masterBufferIndex>
    4c92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	ec 59       	subi	r30, 0x9C	; 156
    4c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    4c9c:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4c9e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <twi_masterBufferIndex>
    4ca2:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4ca6:	98 17       	cp	r25, r24
    4ca8:	c8 f2       	brcs	.-78     	; 0x4c5c <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4caa:	85 e8       	ldi	r24, 0x85	; 133
    4cac:	d8 cf       	rjmp	.-80     	; 0x4c5e <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4cae:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <twi_masterBufferIndex>
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	8e 0f       	add	r24, r30
    4cb6:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <twi_masterBufferIndex>
    4cba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	ec 59       	subi	r30, 0x9C	; 156
    4cc2:	fb 4f       	sbci	r31, 0xFB	; 251
    4cc4:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    4cc6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <twi_sendStop>
    4cca:	81 11       	cpse	r24, r1
    4ccc:	5c cf       	rjmp	.-328    	; 0x4b86 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    4cce:	81 e0       	ldi	r24, 0x01	; 1
    4cd0:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4cd4:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4cd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4cda:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_state>
    4cde:	26 cf       	rjmp	.-436    	; 0x4b2c <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4ce0:	85 ec       	ldi	r24, 0xC5	; 197
    4ce2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    4ce6:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    4cea:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4cee:	80 32       	cpi	r24, 0x20	; 32
    4cf0:	30 f4       	brcc	.+12     	; 0x4cfe <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4cf2:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4cf6:	f0 e0       	ldi	r31, 0x00	; 0
    4cf8:	e9 53       	subi	r30, 0x39	; 57
    4cfa:	fc 4f       	sbci	r31, 0xFC	; 252
    4cfc:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4cfe:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4d02:	70 e0       	ldi	r23, 0x00	; 0
    4d04:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <twi_onSlaveReceive>
    4d08:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <twi_onSlaveReceive+0x1>
    4d0c:	87 ec       	ldi	r24, 0xC7	; 199
    4d0e:	93 e0       	ldi	r25, 0x03	; 3
    4d10:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4d12:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_rxBufferIndex>
    4d16:	0a cf       	rjmp	.-492    	; 0x4b2c <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4d18:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <twi_error>
    4d1c:	34 cf       	rjmp	.-408    	; 0x4b86 <__vector_24+0xa6>

00004d1e <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644>:
_GLOBAL__I_65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644():
    4d1e:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <Wire+0x3>
    4d22:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <Wire+0x2>
    4d26:	88 ee       	ldi	r24, 0xE8	; 232
    4d28:	93 e0       	ldi	r25, 0x03	; 3
    4d2a:	a0 e0       	ldi	r26, 0x00	; 0
    4d2c:	b0 e0       	ldi	r27, 0x00	; 0
    4d2e:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <Wire+0x4>
    4d32:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <Wire+0x5>
    4d36:	a0 93 60 05 	sts	0x0560, r26	; 0x800560 <Wire+0x6>
    4d3a:	b0 93 61 05 	sts	0x0561, r27	; 0x800561 <Wire+0x7>
    4d3e:	2a e6       	ldi	r18, 0x6A	; 106
    4d40:	31 e0       	ldi	r19, 0x01	; 1
    4d42:	30 93 5b 05 	sts	0x055B, r19	; 0x80055b <Wire+0x1>
    4d46:	20 93 5a 05 	sts	0x055A, r18	; 0x80055a <Wire>
    4d4a:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <mySoftwareSerial+0x3>
    4d4e:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <mySoftwareSerial+0x2>
    4d52:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <mySoftwareSerial+0x4>
    4d56:	90 93 eb 05 	sts	0x05EB, r25	; 0x8005eb <mySoftwareSerial+0x5>
    4d5a:	a0 93 ec 05 	sts	0x05EC, r26	; 0x8005ec <mySoftwareSerial+0x6>
    4d5e:	b0 93 ed 05 	sts	0x05ED, r27	; 0x8005ed <mySoftwareSerial+0x7>
    4d62:	88 e8       	ldi	r24, 0x88	; 136
    4d64:	91 e0       	ldi	r25, 0x01	; 1
    4d66:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <mySoftwareSerial+0x1>
    4d6a:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <mySoftwareSerial>
    4d6e:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <mySoftwareSerial+0x17>
    4d72:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <mySoftwareSerial+0x16>
    4d76:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <mySoftwareSerial+0x19>
    4d7a:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <mySoftwareSerial+0x18>
    4d7e:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <mySoftwareSerial+0x1b>
    4d82:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <mySoftwareSerial+0x1a>
    4d86:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <mySoftwareSerial+0x1d>
    4d8a:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <mySoftwareSerial+0x1c>
    4d8e:	60 91 04 06 	lds	r22, 0x0604	; 0x800604 <mySoftwareSerial+0x1e>
    4d92:	6e 7f       	andi	r22, 0xFE	; 254
    4d94:	6d 7f       	andi	r22, 0xFD	; 253
    4d96:	60 93 04 06 	sts	0x0604, r22	; 0x800604 <mySoftwareSerial+0x1e>
    4d9a:	66 95       	lsr	r22
    4d9c:	61 70       	andi	r22, 0x01	; 1
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	68 27       	eor	r22, r24
    4da2:	83 e0       	ldi	r24, 0x03	; 3
    4da4:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
    4da8:	61 e0       	ldi	r22, 0x01	; 1
    4daa:	83 e0       	ldi	r24, 0x03	; 3
    4dac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
    4db0:	e5 e4       	ldi	r30, 0x45	; 69
    4db2:	f4 e0       	ldi	r31, 0x04	; 4
    4db4:	e4 91       	lpm	r30, Z
    4db6:	e0 93 f6 05 	sts	0x05F6, r30	; 0x8005f6 <mySoftwareSerial+0x10>
    4dba:	ee e2       	ldi	r30, 0x2E	; 46
    4dbc:	f4 e0       	ldi	r31, 0x04	; 4
    4dbe:	e4 91       	lpm	r30, Z
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	ee 0f       	add	r30, r30
    4dc4:	ff 1f       	adc	r31, r31
    4dc6:	ef 5d       	subi	r30, 0xDF	; 223
    4dc8:	fb 4f       	sbci	r31, 0xFB	; 251
    4dca:	85 91       	lpm	r24, Z+
    4dcc:	94 91       	lpm	r25, Z
    4dce:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <mySoftwareSerial+0x12>
    4dd2:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <mySoftwareSerial+0x11>
    4dd6:	60 e0       	ldi	r22, 0x00	; 0
    4dd8:	82 e0       	ldi	r24, 0x02	; 2
    4dda:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
    4dde:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <mySoftwareSerial+0x1e>
    4de2:	81 fd       	sbrc	r24, 1
    4de4:	04 c0       	rjmp	.+8      	; 0x4dee <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0xd0>
    4de6:	61 e0       	ldi	r22, 0x01	; 1
    4de8:	82 e0       	ldi	r24, 0x02	; 2
    4dea:	0e 94 8a 03 	call	0x714	; 0x714 <digitalWrite>
    4dee:	82 e0       	ldi	r24, 0x02	; 2
    4df0:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <mySoftwareSerial+0xc>
    4df4:	e4 e4       	ldi	r30, 0x44	; 68
    4df6:	f4 e0       	ldi	r31, 0x04	; 4
    4df8:	e4 91       	lpm	r30, Z
    4dfa:	e0 93 f3 05 	sts	0x05F3, r30	; 0x8005f3 <mySoftwareSerial+0xd>
    4dfe:	ed e2       	ldi	r30, 0x2D	; 45
    4e00:	f4 e0       	ldi	r31, 0x04	; 4
    4e02:	e4 91       	lpm	r30, Z
    4e04:	f0 e0       	ldi	r31, 0x00	; 0
    4e06:	ee 0f       	add	r30, r30
    4e08:	ff 1f       	adc	r31, r31
    4e0a:	e9 5e       	subi	r30, 0xE9	; 233
    4e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    4e0e:	25 91       	lpm	r18, Z+
    4e10:	34 91       	lpm	r19, Z
    4e12:	30 93 f5 05 	sts	0x05F5, r19	; 0x8005f5 <mySoftwareSerial+0xf>
    4e16:	20 93 f4 05 	sts	0x05F4, r18	; 0x8005f4 <mySoftwareSerial+0xe>
    4e1a:	44 ef       	ldi	r20, 0xF4	; 244
    4e1c:	51 e0       	ldi	r21, 0x01	; 1
    4e1e:	60 e0       	ldi	r22, 0x00	; 0
    4e20:	70 e0       	ldi	r23, 0x00	; 0
    4e22:	40 93 c6 05 	sts	0x05C6, r20	; 0x8005c6 <myDFPlayer+0x6>
    4e26:	50 93 c7 05 	sts	0x05C7, r21	; 0x8005c7 <myDFPlayer+0x7>
    4e2a:	60 93 c8 05 	sts	0x05C8, r22	; 0x8005c8 <myDFPlayer+0x8>
    4e2e:	70 93 c9 05 	sts	0x05C9, r23	; 0x8005c9 <myDFPlayer+0x9>
    4e32:	9a e0       	ldi	r25, 0x0A	; 10
    4e34:	e9 e1       	ldi	r30, 0x19	; 25
    4e36:	f1 e0       	ldi	r31, 0x01	; 1
    4e38:	a4 ed       	ldi	r26, 0xD4	; 212
    4e3a:	b5 e0       	ldi	r27, 0x05	; 5
    4e3c:	01 90       	ld	r0, Z+
    4e3e:	0d 92       	st	X+, r0
    4e40:	9a 95       	dec	r25
    4e42:	e1 f7       	brne	.-8      	; 0x4e3c <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0x11e>
    4e44:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <myDFPlayer+0x1e>
    4e48:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <myDFPlayer+0x1f>
    4e4c:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <myDFPlayer+0x24>
    4e50:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <myDFPlayer+0x25>
    4e54:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <lcd+0x3>
    4e58:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <lcd+0x2>
    4e5c:	2c e7       	ldi	r18, 0x7C	; 124
    4e5e:	31 e0       	ldi	r19, 0x01	; 1
    4e60:	30 93 b5 05 	sts	0x05B5, r19	; 0x8005b5 <lcd+0x1>
    4e64:	20 93 b4 05 	sts	0x05B4, r18	; 0x8005b4 <lcd>
    4e68:	97 e2       	ldi	r25, 0x27	; 39
    4e6a:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <lcd+0x4>
    4e6e:	90 e1       	ldi	r25, 0x10	; 16
    4e70:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <lcd+0x9>
    4e74:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <lcd+0xa>
    4e78:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <lcd+0xb>
    4e7c:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <bell+0x5>
    4e80:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <bell+0x4>
    4e84:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <bell+0x3>
    4e88:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <bell>
    4e8c:	ec e0       	ldi	r30, 0x0C	; 12
    4e8e:	f4 e0       	ldi	r31, 0x04	; 4
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	8c 30       	cpi	r24, 0x0C	; 12
    4e94:	51 f0       	breq	.+20     	; 0x4eaa <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0x18c>
    4e96:	94 91       	lpm	r25, Z
    4e98:	82 30       	cpi	r24, 0x02	; 2
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0x180>
    4e9c:	9f 5f       	subi	r25, 0xFF	; 255
    4e9e:	21 e0       	ldi	r18, 0x01	; 1
    4ea0:	28 0f       	add	r18, r24
    4ea2:	31 96       	adiw	r30, 0x01	; 1
    4ea4:	99 23       	and	r25, r25
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0x18c>
    4ea8:	4d c0       	rjmp	.+154    	; 0x4f44 <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0x226>
    4eaa:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <bell+0x1>
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <bell+0x2>
    4eb4:	61 e1       	ldi	r22, 0x11	; 17
    4eb6:	72 e0       	ldi	r23, 0x02	; 2
    4eb8:	86 e6       	ldi	r24, 0x66	; 102
    4eba:	95 e0       	ldi	r25, 0x05	; 5
    4ebc:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4ec0:	65 e1       	ldi	r22, 0x15	; 21
    4ec2:	72 e0       	ldi	r23, 0x02	; 2
    4ec4:	8c e6       	ldi	r24, 0x6C	; 108
    4ec6:	95 e0       	ldi	r25, 0x05	; 5
    4ec8:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4ecc:	69 e1       	ldi	r22, 0x19	; 25
    4ece:	72 e0       	ldi	r23, 0x02	; 2
    4ed0:	82 e7       	ldi	r24, 0x72	; 114
    4ed2:	95 e0       	ldi	r25, 0x05	; 5
    4ed4:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4ed8:	6d e1       	ldi	r22, 0x1D	; 29
    4eda:	72 e0       	ldi	r23, 0x02	; 2
    4edc:	88 e7       	ldi	r24, 0x78	; 120
    4ede:	95 e0       	ldi	r25, 0x05	; 5
    4ee0:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4ee4:	61 e2       	ldi	r22, 0x21	; 33
    4ee6:	72 e0       	ldi	r23, 0x02	; 2
    4ee8:	8e e7       	ldi	r24, 0x7E	; 126
    4eea:	95 e0       	ldi	r25, 0x05	; 5
    4eec:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4ef0:	65 e2       	ldi	r22, 0x25	; 37
    4ef2:	72 e0       	ldi	r23, 0x02	; 2
    4ef4:	84 e8       	ldi	r24, 0x84	; 132
    4ef6:	95 e0       	ldi	r25, 0x05	; 5
    4ef8:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4efc:	69 e2       	ldi	r22, 0x29	; 41
    4efe:	72 e0       	ldi	r23, 0x02	; 2
    4f00:	8a e8       	ldi	r24, 0x8A	; 138
    4f02:	95 e0       	ldi	r25, 0x05	; 5
    4f04:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4f08:	6d e2       	ldi	r22, 0x2D	; 45
    4f0a:	72 e0       	ldi	r23, 0x02	; 2
    4f0c:	80 e9       	ldi	r24, 0x90	; 144
    4f0e:	95 e0       	ldi	r25, 0x05	; 5
    4f10:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4f14:	61 e3       	ldi	r22, 0x31	; 49
    4f16:	72 e0       	ldi	r23, 0x02	; 2
    4f18:	86 e9       	ldi	r24, 0x96	; 150
    4f1a:	95 e0       	ldi	r25, 0x05	; 5
    4f1c:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4f20:	65 e3       	ldi	r22, 0x35	; 53
    4f22:	72 e0       	ldi	r23, 0x02	; 2
    4f24:	8c e9       	ldi	r24, 0x9C	; 156
    4f26:	95 e0       	ldi	r25, 0x05	; 5
    4f28:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4f2c:	69 e3       	ldi	r22, 0x39	; 57
    4f2e:	72 e0       	ldi	r23, 0x02	; 2
    4f30:	82 ea       	ldi	r24, 0xA2	; 162
    4f32:	95 e0       	ldi	r25, 0x05	; 5
    4f34:	0e 94 26 0c 	call	0x184c	; 0x184c <String::String(char const*)>
    4f38:	6d e3       	ldi	r22, 0x3D	; 61
    4f3a:	72 e0       	ldi	r23, 0x02	; 2
    4f3c:	88 ea       	ldi	r24, 0xA8	; 168
    4f3e:	95 e0       	ldi	r25, 0x05	; 5
    4f40:	0c 94 26 0c 	jmp	0x184c	; 0x184c <String::String(char const*)>
    4f44:	82 2f       	mov	r24, r18
    4f46:	a5 cf       	rjmp	.-182    	; 0x4e92 <global constructors keyed to 65535_0_ChantBellV3.1_Demo.ino.cpp.o.3644+0x174>

00004f48 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	00 d0       	rcall	.+0      	; 0x4f4e <main+0x6>
    4f4e:	00 d0       	rcall	.+0      	; 0x4f50 <main+0x8>
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <main+0xa>
    4f52:	1f 92       	push	r1
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    4f58:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    4f5a:	84 b5       	in	r24, 0x24	; 36
    4f5c:	83 60       	ori	r24, 0x03	; 3
    4f5e:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    4f60:	85 b5       	in	r24, 0x25	; 37
    4f62:	83 60       	ori	r24, 0x03	; 3
    4f64:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    4f66:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    4f6a:	81 60       	ori	r24, 0x01	; 1
    4f6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    4f70:	82 e0       	ldi	r24, 0x02	; 2
    4f72:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    4f76:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4f7a:	81 60       	ori	r24, 0x01	; 1
    4f7c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    4f80:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4f84:	81 60       	ori	r24, 0x01	; 1
    4f86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    4f8a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    4f8e:	84 60       	ori	r24, 0x04	; 4
    4f90:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    4f94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4f98:	81 60       	ori	r24, 0x01	; 1
    4f9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    4f9e:	87 e8       	ldi	r24, 0x87	; 135
    4fa0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    4fa4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    4fa8:	80 e4       	ldi	r24, 0x40	; 64
    4faa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    4fae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    4fb2:	80 64       	ori	r24, 0x40	; 64
    4fb4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    4fb8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    4fbc:	86 fd       	sbrc	r24, 6
    4fbe:	fc cf       	rjmp	.-8      	; 0x4fb8 <main+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    4fc0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    4fc4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    4fc8:	76 2f       	mov	r23, r22
    4fca:	68 2f       	mov	r22, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:93
template <typename T, size_t N>
size_t ArraySize(T (&)[N]) { return N; }

void setup()
{
    randomSeed(analogRead(A0));
    4fcc:	07 2e       	mov	r0, r23
    4fce:	00 0c       	add	r0, r0
    4fd0:	88 0b       	sbc	r24, r24
    4fd2:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    4fd4:	61 15       	cp	r22, r1
    4fd6:	71 05       	cpc	r23, r1
    4fd8:	81 05       	cpc	r24, r1
    4fda:	91 05       	cpc	r25, r1
    4fdc:	11 f0       	breq	.+4      	; 0x4fe2 <main+0x9a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    4fde:	0e 94 2d 2c 	call	0x585a	; 0x585a <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:96
    char intstr[5];
    // Serial.begin(9600);
    pinMode(AMP, OUTPUT);
    4fe2:	61 e0       	ldi	r22, 0x01	; 1
    4fe4:	8c e0       	ldi	r24, 0x0C	; 12
    4fe6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:97
    pinMode(AUDCONT, OUTPUT);
    4fea:	61 e0       	ldi	r22, 0x01	; 1
    4fec:	8a e0       	ldi	r24, 0x0A	; 10
    4fee:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:98
    pinMode(AUTOLIGHT, OUTPUT);
    4ff2:	61 e0       	ldi	r22, 0x01	; 1
    4ff4:	8f e0       	ldi	r24, 0x0F	; 15
    4ff6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:99
    pinMode(AUTOPLAY, OUTPUT);
    4ffa:	61 e0       	ldi	r22, 0x01	; 1
    4ffc:	8e e0       	ldi	r24, 0x0E	; 14
    4ffe:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:100
    pinMode(RELAY1, OUTPUT);
    5002:	61 e0       	ldi	r22, 0x01	; 1
    5004:	8b e0       	ldi	r24, 0x0B	; 11
    5006:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:101
    pinMode(STA_PIN, INPUT_PULLUP);
    500a:	62 e0       	ldi	r22, 0x02	; 2
    500c:	84 e0       	ldi	r24, 0x04	; 4
    500e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:102
    pinMode(SELECT_BUT, INPUT_PULLUP);
    5012:	62 e0       	ldi	r22, 0x02	; 2
    5014:	85 e0       	ldi	r24, 0x05	; 5
    5016:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:103
    pinMode(UP_BUT, INPUT_PULLUP);
    501a:	62 e0       	ldi	r22, 0x02	; 2
    501c:	86 e0       	ldi	r24, 0x06	; 6
    501e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:104
    pinMode(DOWN_BUT, INPUT_PULLUP);
    5022:	62 e0       	ldi	r22, 0x02	; 2
    5024:	87 e0       	ldi	r24, 0x07	; 7
    5026:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:105
    pinMode(BACK_BUT, INPUT_PULLUP);
    502a:	62 e0       	ldi	r22, 0x02	; 2
    502c:	88 e0       	ldi	r24, 0x08	; 8
    502e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:106
    pinMode(MODE_BUT, INPUT_PULLUP);
    5032:	62 e0       	ldi	r22, 0x02	; 2
    5034:	80 e1       	ldi	r24, 0x10	; 16
    5036:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:107
    Wire.begin();
    503a:	0e 94 b8 03 	call	0x770	; 0x770 <TwoWire::begin() [clone .constprop.40]>
load():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:231
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    503e:	42 e5       	ldi	r20, 0x52	; 82
    5040:	50 e0       	ldi	r21, 0x00	; 0
    5042:	70 e0       	ldi	r23, 0x00	; 0
    5044:	60 e0       	ldi	r22, 0x00	; 0
    5046:	83 eb       	ldi	r24, 0xB3	; 179
    5048:	94 e0       	ldi	r25, 0x04	; 4
    504a:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:232
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    504e:	69 e2       	ldi	r22, 0x29	; 41
    5050:	71 e0       	ldi	r23, 0x01	; 1
    5052:	83 eb       	ldi	r24, 0xB3	; 179
    5054:	94 e0       	ldi	r25, 0x04	; 4
    5056:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <strcmp>
    505a:	89 2b       	or	r24, r25
    505c:	09 f4       	brne	.+2      	; 0x5060 <main+0x118>
    505e:	b6 c0       	rjmp	.+364    	; 0x51cc <main+0x284>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:190
  return strbuf;
}

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    5060:	69 e2       	ldi	r22, 0x29	; 41
    5062:	71 e0       	ldi	r23, 0x01	; 1
    5064:	83 eb       	ldi	r24, 0xB3	; 179
    5066:	94 e0       	ldi	r25, 0x04	; 4
    5068:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:191
  Song1_Count = 100;
    506c:	84 e6       	ldi	r24, 0x64	; 100
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <config+0x1d>
    5074:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:192
  startTime = 5; //5AM
    5078:	85 e0       	ldi	r24, 0x05	; 5
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <config+0x10>
    5080:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:193
  endTime = 22; // 10PM
    5084:	86 e1       	ldi	r24, 0x16	; 22
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <config+0x12>
    508c:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:194
  backLightDur = 20; //Sec
    5090:	84 e1       	ldi	r24, 0x14	; 20
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <config+0x14>
    5098:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:195
  vol = 14;
    509c:	8e e0       	ldi	r24, 0x0E	; 14
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <config+0x16>
    50a4:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:196
  SlogamOrder = 1;
    50a8:	21 e0       	ldi	r18, 0x01	; 1
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	30 93 ce 04 	sts	0x04CE, r19	; 0x8004ce <config+0x1b>
    50b0:	20 93 cd 04 	sts	0x04CD, r18	; 0x8004cd <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:197
  SongCount = 10;
    50b4:	8a e0       	ldi	r24, 0x0A	; 10
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <config+0x1f>
    50bc:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:198
  SongOrder = 1;
    50c0:	30 93 d4 04 	sts	0x04D4, r19	; 0x8004d4 <config+0x21>
    50c4:	20 93 d3 04 	sts	0x04D3, r18	; 0x8004d3 <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:199
  MorSong1Time = 3;
    50c8:	83 e0       	ldi	r24, 0x03	; 3
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <config+0x27>
    50d0:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:200
  MorSong2Time = 3;
    50d4:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <config+0x29>
    50d8:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:201
  EveSong2Time = 3;
    50dc:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <config+0x2d>
    50e0:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:202
  EveSong1Time = 3;
    50e4:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <config+0x2b>
    50e8:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:203
  MorSongNo = 1;
    50ec:	30 93 e2 04 	sts	0x04E2, r19	; 0x8004e2 <config+0x2f>
    50f0:	20 93 e1 04 	sts	0x04E1, r18	; 0x8004e1 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:204
  EveSongNo = 2;
    50f4:	82 e0       	ldi	r24, 0x02	; 2
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <config+0x31>
    50fc:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <config+0x30>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:206

  Light1On = 1079;
    5100:	87 e3       	ldi	r24, 0x37	; 55
    5102:	94 e0       	ldi	r25, 0x04	; 4
    5104:	a0 e0       	ldi	r26, 0x00	; 0
    5106:	b0 e0       	ldi	r27, 0x00	; 0
    5108:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <config+0x32>
    510c:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <config+0x33>
    5110:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <config+0x34>
    5114:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:207
  Light1Off = 359;
    5118:	87 e6       	ldi	r24, 0x67	; 103
    511a:	91 e0       	ldi	r25, 0x01	; 1
    511c:	a0 e0       	ldi	r26, 0x00	; 0
    511e:	b0 e0       	ldi	r27, 0x00	; 0
    5120:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <config+0x36>
    5124:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <config+0x37>
    5128:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <config+0x38>
    512c:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:208
  Light2On = 0;
    5130:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <config+0x3a>
    5134:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <config+0x3b>
    5138:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <config+0x3c>
    513c:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:209
  Light2Off = 0;
    5140:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <config+0x3e>
    5144:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <config+0x3f>
    5148:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <config+0x40>
    514c:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:210
  PlayerMorTime = 300;
    5150:	8c e2       	ldi	r24, 0x2C	; 44
    5152:	91 e0       	ldi	r25, 0x01	; 1
    5154:	a0 e0       	ldi	r26, 0x00	; 0
    5156:	b0 e0       	ldi	r27, 0x00	; 0
    5158:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <config+0x42>
    515c:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <config+0x43>
    5160:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <config+0x44>
    5164:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:211
  PlayerMorDur= 115;
    5168:	83 e7       	ldi	r24, 0x73	; 115
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	a0 e0       	ldi	r26, 0x00	; 0
    516e:	b0 e0       	ldi	r27, 0x00	; 0
    5170:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <config+0x46>
    5174:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <config+0x47>
    5178:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <config+0x48>
    517c:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:212
  PlayerEveTime = 1020;
    5180:	4c ef       	ldi	r20, 0xFC	; 252
    5182:	53 e0       	ldi	r21, 0x03	; 3
    5184:	60 e0       	ldi	r22, 0x00	; 0
    5186:	70 e0       	ldi	r23, 0x00	; 0
    5188:	40 93 fd 04 	sts	0x04FD, r20	; 0x8004fd <config+0x4a>
    518c:	50 93 fe 04 	sts	0x04FE, r21	; 0x8004fe <config+0x4b>
    5190:	60 93 ff 04 	sts	0x04FF, r22	; 0x8004ff <config+0x4c>
    5194:	70 93 00 05 	sts	0x0500, r23	; 0x800500 <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:213
  PlayerEveDur = 115;
    5198:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <config+0x4e>
    519c:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <config+0x4f>
    51a0:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <config+0x50>
    51a4:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <config+0x51>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:215

  AutoPlay = 0;
    51a8:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:216
  AutoLight = 0;
    51ac:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:217
  SchlZone = 0;
    51b0:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:219

  SerialNo = 174;
    51b4:	8e ea       	ldi	r24, 0xAE	; 174
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <config+0x25>
    51bc:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/Config.cpp:220
  DataYear = 2022;
    51c0:	86 ee       	ldi	r24, 0xE6	; 230
    51c2:	97 e0       	ldi	r25, 0x07	; 7
    51c4:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <config+0x23>
    51c8:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <config+0x22>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    51cc:	0e 94 b8 03 	call	0x770	; 0x770 <TwoWire::begin() [clone .constprop.40]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    51d0:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    51d4:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    51d8:	82 30       	cpi	r24, 0x02	; 2
    51da:	18 f0       	brcs	.+6      	; 0x51e2 <main+0x29a>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    51dc:	98 e0       	ldi	r25, 0x08	; 8
    51de:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    51e2:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    51e6:	62 e3       	ldi	r22, 0x32	; 50
    51e8:	70 e0       	ldi	r23, 0x00	; 0
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    51f2:	60 91 bf 05 	lds	r22, 0x05BF	; 0x8005bf <lcd+0xb>
    51f6:	84 eb       	ldi	r24, 0xB4	; 180
    51f8:	95 e0       	ldi	r25, 0x05	; 5
    51fa:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    51fe:	68 ee       	ldi	r22, 0xE8	; 232
    5200:	73 e0       	ldi	r23, 0x03	; 3
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    520a:	60 e3       	ldi	r22, 0x30	; 48
    520c:	84 eb       	ldi	r24, 0xB4	; 180
    520e:	95 e0       	ldi	r25, 0x05	; 5
    5210:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    5214:	84 e9       	ldi	r24, 0x94	; 148
    5216:	91 e1       	ldi	r25, 0x11	; 17
    5218:	0e 94 26 04 	call	0x84c	; 0x84c <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    521c:	60 e3       	ldi	r22, 0x30	; 48
    521e:	84 eb       	ldi	r24, 0xB4	; 180
    5220:	95 e0       	ldi	r25, 0x05	; 5
    5222:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    5226:	84 e9       	ldi	r24, 0x94	; 148
    5228:	91 e1       	ldi	r25, 0x11	; 17
    522a:	0e 94 26 04 	call	0x84c	; 0x84c <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    522e:	60 e3       	ldi	r22, 0x30	; 48
    5230:	84 eb       	ldi	r24, 0xB4	; 180
    5232:	95 e0       	ldi	r25, 0x05	; 5
    5234:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    5238:	86 e9       	ldi	r24, 0x96	; 150
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	0e 94 26 04 	call	0x84c	; 0x84c <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    5240:	60 e2       	ldi	r22, 0x20	; 32
    5242:	84 eb       	ldi	r24, 0xB4	; 180
    5244:	95 e0       	ldi	r25, 0x05	; 5
    5246:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    524a:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <lcd+0x5>
    524e:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    5250:	40 e0       	ldi	r20, 0x00	; 0
    5252:	84 eb       	ldi	r24, 0xB4	; 180
    5254:	95 e0       	ldi	r25, 0x05	; 5
    5256:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    525a:	84 e0       	ldi	r24, 0x04	; 4
    525c:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    5260:	40 e0       	ldi	r20, 0x00	; 0
    5262:	6c e0       	ldi	r22, 0x0C	; 12
    5264:	84 eb       	ldi	r24, 0xB4	; 180
    5266:	95 e0       	ldi	r25, 0x05	; 5
    5268:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    526c:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    5270:	82 e0       	ldi	r24, 0x02	; 2
    5272:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    5276:	40 e0       	ldi	r20, 0x00	; 0
    5278:	66 e0       	ldi	r22, 0x06	; 6
    527a:	84 eb       	ldi	r24, 0xB4	; 180
    527c:	95 e0       	ldi	r25, 0x05	; 5
    527e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    5282:	40 e0       	ldi	r20, 0x00	; 0
    5284:	62 e0       	ldi	r22, 0x02	; 2
    5286:	84 eb       	ldi	r24, 0xB4	; 180
    5288:	95 e0       	ldi	r25, 0x05	; 5
    528a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    528e:	80 ed       	ldi	r24, 0xD0	; 208
    5290:	97 e0       	ldi	r25, 0x07	; 7
    5292:	0e 94 26 04 	call	0x84c	; 0x84c <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    5296:	88 e0       	ldi	r24, 0x08	; 8
    5298:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    529c:	60 e0       	ldi	r22, 0x00	; 0
    529e:	84 eb       	ldi	r24, 0xB4	; 180
    52a0:	95 e0       	ldi	r25, 0x05	; 5
    52a2:	0e 94 ac 07 	call	0xf58	; 0xf58 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:111
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	85 e0       	ldi	r24, 0x05	; 5
    52aa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:112
    lcd.print(F("QTRON"));
    52ae:	86 e0       	ldi	r24, 0x06	; 6
    52b0:	94 e0       	ldi	r25, 0x04	; 4
    52b2:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:113
    lcd.setCursor(0, 1);
    52b6:	61 e0       	ldi	r22, 0x01	; 1
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:114
    lcd.print(F("DEVOTIONAL CLOCK"));
    52be:	85 ef       	ldi	r24, 0xF5	; 245
    52c0:	93 e0       	ldi	r25, 0x03	; 3
    52c2:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:115
    delay(2000);
    52c6:	60 ed       	ldi	r22, 0xD0	; 208
    52c8:	77 e0       	ldi	r23, 0x07	; 7
    52ca:	80 e0       	ldi	r24, 0x00	; 0
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:116
    lcd.clear();
    52d2:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:117
    lcd.setCursor(0,0);
    52d6:	60 e0       	ldi	r22, 0x00	; 0
    52d8:	80 e0       	ldi	r24, 0x00	; 0
    52da:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:118
    lcd.print(F("Version : 3.1"));
    52de:	87 ee       	ldi	r24, 0xE7	; 231
    52e0:	93 e0       	ldi	r25, 0x03	; 3
    52e2:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:119
    lcd.setCursor(0,1);
    52e6:	61 e0       	ldi	r22, 0x01	; 1
    52e8:	80 e0       	ldi	r24, 0x00	; 0
    52ea:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:120
    inttostr(intstr, config.SerialNo);
    52ee:	60 91 d7 04 	lds	r22, 0x04D7	; 0x8004d7 <config+0x24>
    52f2:	70 91 d8 04 	lds	r23, 0x04D8	; 0x8004d8 <config+0x25>
    52f6:	ce 01       	movw	r24, r28
    52f8:	01 96       	adiw	r24, 0x01	; 1
    52fa:	0e 94 0e 0b 	call	0x161c	; 0x161c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:121
    lcd.print(fmt(strbuf, 1, "Shop Demo"));
    52fe:	81 e4       	ldi	r24, 0x41	; 65
    5300:	92 e0       	ldi	r25, 0x02	; 2
    5302:	9f 93       	push	r25
    5304:	8f 93       	push	r24
    5306:	11 e0       	ldi	r17, 0x01	; 1
    5308:	1f 93       	push	r17
    530a:	8d e2       	ldi	r24, 0x2D	; 45
    530c:	95 e0       	ldi	r25, 0x05	; 5
    530e:	9f 93       	push	r25
    5310:	8f 93       	push	r24
    5312:	0e 94 57 0c 	call	0x18ae	; 0x18ae <fmt(char*, unsigned char, ...)>
    5316:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:122
    delay(2000);
    531a:	60 ed       	ldi	r22, 0xD0	; 208
    531c:	77 e0       	ldi	r23, 0x07	; 7
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:123
    lcd.clear();
    5326:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:124
    lcd.setCursor(3, 0);
    532a:	60 e0       	ldi	r22, 0x00	; 0
    532c:	83 e0       	ldi	r24, 0x03	; 3
    532e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:125
    lcd.print("Loading...");
    5332:	8b e4       	ldi	r24, 0x4B	; 75
    5334:	92 e0       	ldi	r25, 0x02	; 2
    5336:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:126
    if (!digitalRead(SELECT_BUT))
    533a:	85 e0       	ldi	r24, 0x05	; 5
    533c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    5340:	0f 90       	pop	r0
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	0f 90       	pop	r0
    5348:	0f 90       	pop	r0
    534a:	89 2b       	or	r24, r25
    534c:	e9 f5       	brne	.+122    	; 0x53c8 <main+0x480>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:128
    {
        lcd.setCursor(0, 1);
    534e:	61 e0       	ldi	r22, 0x01	; 1
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:129
        lcd.print("Service Mode");
    5356:	86 e5       	ldi	r24, 0x56	; 86
    5358:	92 e0       	ldi	r25, 0x02	; 2
    535a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Print::print(char const*) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:130
        serviceMode = true;
    535e:	10 93 39 04 	sts	0x0439, r17	; 0x800439 <serviceMode>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    5362:	38 e6       	ldi	r19, 0x68	; 104
    5364:	e3 2e       	mov	r14, r19
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    5366:	4a e5       	ldi	r20, 0x5A	; 90
    5368:	c4 2e       	mov	r12, r20
    536a:	45 e0       	ldi	r20, 0x05	; 5
    536c:	d4 2e       	mov	r13, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    536e:	50 e2       	ldi	r21, 0x20	; 32
    5370:	a5 2e       	mov	r10, r21
    5372:	b1 2c       	mov	r11, r1
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;
    5374:	ff 24       	eor	r15, r15
    5376:	f3 94       	inc	r15
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:15
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS1307::begin(TwoWire *wireInstance) {
  if (i2c_dev)
    5378:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <rtc>
    537c:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <rtc+0x1>
    5380:	00 97       	sbiw	r24, 0x00	; 0
    5382:	11 f0       	breq	.+4      	; 0x5388 <main+0x440>
operator delete():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    5384:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
operator new():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    5388:	86 e0       	ldi	r24, 0x06	; 6
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	0e 94 75 2d 	call	0x5aea	; 0x5aea <malloc>
    5390:	8c 01       	movw	r16, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    5392:	fc 01       	movw	r30, r24
    5394:	e0 82       	st	Z, r14
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    5396:	d2 82       	std	Z+2, r13	; 0x02
    5398:	c1 82       	std	Z+1, r12	; 0x01
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:13
  _begun = false;
    539a:	13 82       	std	Z+3, r1	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    539c:	b5 82       	std	Z+5, r11	; 0x05
    539e:	a4 82       	std	Z+4, r10	; 0x04
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:17
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(DS1307_ADDRESS, wireInstance);
    53a0:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <rtc+0x1>
    53a4:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <rtc>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
    53a8:	0e 94 b8 03 	call	0x770	; 0x770 <TwoWire::begin() [clone .constprop.40]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
    53ac:	f8 01       	movw	r30, r16
    53ae:	f3 82       	std	Z+3, r15	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
    53b0:	c8 01       	movw	r24, r16
    53b2:	0e 94 d1 06 	call	0xda2	; 0xda2 <Adafruit_I2CDevice::detected()>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:18
  if (!i2c_dev->begin())
    53b6:	81 11       	cpse	r24, r1
    53b8:	0a c0       	rjmp	.+20     	; 0x53ce <main+0x486>
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:138
    {
        serviceMode = false;
    }
    while (!rtc.begin())
    {
        lcd.clear();
    53ba:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:139
        lcd.print(F("ERR 01")); // Couldn't find RTC
    53be:	80 ee       	ldi	r24, 0xE0	; 224
    53c0:	93 e0       	ldi	r25, 0x03	; 3
    53c2:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
    53c6:	d8 cf       	rjmp	.-80     	; 0x5378 <main+0x430>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:134
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    53c8:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <serviceMode>
    53cc:	ca cf       	rjmp	.-108    	; 0x5362 <main+0x41a>
    53ce:	1e 82       	std	Y+6, r1	; 0x06
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:80
    @return value of register
*/
/**************************************************************************/
uint8_t RTC_I2C::read_register(uint8_t reg) {
  uint8_t buffer[1];
  i2c_dev->write(&reg, 1);
    53d0:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <rtc>
    53d4:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    53d8:	fc 01       	movw	r30, r24
    53da:	24 81       	ldd	r18, Z+4	; 0x04
    53dc:	35 81       	ldd	r19, Z+5	; 0x05
    53de:	23 2b       	or	r18, r19
    53e0:	89 f0       	breq	.+34     	; 0x5404 <main+0x4bc>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    53e2:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    53e4:	f0 92 89 04 	sts	0x0489, r15	; 0x800489 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    53e8:	20 93 ab 04 	sts	0x04AB, r18	; 0x8004ab <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    53ec:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    53f0:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <TwoWire::txBufferLength>
write():
    53f4:	21 e0       	ldi	r18, 0x01	; 1
    53f6:	41 e0       	ldi	r20, 0x01	; 1
    53f8:	50 e0       	ldi	r21, 0x00	; 0
    53fa:	be 01       	movw	r22, r28
    53fc:	6a 5f       	subi	r22, 0xFA	; 250
    53fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5400:	0e 94 b3 06 	call	0xd66	; 0xd66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:81
  i2c_dev->read(buffer, 1);
    5404:	41 e0       	ldi	r20, 0x01	; 1
    5406:	50 e0       	ldi	r21, 0x00	; 0
    5408:	be 01       	movw	r22, r28
    540a:	69 5f       	subi	r22, 0xF9	; 249
    540c:	7f 4f       	sbci	r23, 0xFF	; 255
    540e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <rtc>
    5412:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <rtc+0x1>
    5416:	0e 94 0b 09 	call	0x1216	; 0x1216 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.46]>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:82
  return buffer[0];
    541a:	8f 81       	ldd	r24, Y+7	; 0x07
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:29
/*!
    @brief  Is the DS1307 running? Check the Clock Halt bit in register 0
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) { return !(read_register(0) >> 7); }
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	88 0f       	add	r24, r24
    5420:	89 2f       	mov	r24, r25
    5422:	88 1f       	adc	r24, r24
    5424:	99 0b       	sbc	r25, r25
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:142
    {
        lcd.clear();
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    if (!rtc.isrunning())
    5426:	89 2b       	or	r24, r25
    5428:	79 f0       	breq	.+30     	; 0x5448 <main+0x500>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:144
    {
        lcd.clear();
    542a:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:145
        lcd.print(F("ERR 02"));
    542e:	89 ed       	ldi	r24, 0xD9	; 217
    5430:	93 e0       	ldi	r25, 0x03	; 3
    5432:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:146
        delay(2000);
    5436:	60 ed       	ldi	r22, 0xD0	; 208
    5438:	77 e0       	ldi	r23, 0x07	; 7
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:147
        serviceMode = true;
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <serviceMode>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:152
    }
    

    // Initialize DF Player...............
    if (digitalRead(BACK_BUT))
    5448:	88 e0       	ldi	r24, 0x08	; 8
    544a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <digitalRead>
    544e:	89 2b       	or	r24, r25
    5450:	09 f4       	brne	.+2      	; 0x5454 <main+0x50c>
    5452:	08 c1       	rjmp	.+528    	; 0x5664 <main+0x71c>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    5454:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <mySoftwareSerial+0x1b>
    5458:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <mySoftwareSerial+0x1a>
    545c:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <mySoftwareSerial+0x19>
    5460:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <mySoftwareSerial+0x18>
    5464:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <mySoftwareSerial+0x17>
    5468:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    546c:	8d e9       	ldi	r24, 0x9D	; 157
    546e:	91 e0       	ldi	r25, 0x01	; 1
    5470:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <mySoftwareSerial+0x1d>
    5474:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    5478:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <mySoftwareSerial+0xc>
    547c:	87 31       	cpi	r24, 0x17	; 23
    547e:	08 f0       	brcs	.+2      	; 0x5482 <main+0x53a>
    5480:	4b c0       	rjmp	.+150    	; 0x5518 <main+0x5d0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5482:	2d eb       	ldi	r18, 0xBD	; 189
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	30 93 fd 05 	sts	0x05FD, r19	; 0x8005fd <mySoftwareSerial+0x17>
    548a:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    548e:	2b e9       	ldi	r18, 0x9B	; 155
    5490:	31 e0       	ldi	r19, 0x01	; 1
    5492:	30 93 ff 05 	sts	0x05FF, r19	; 0x8005ff <mySoftwareSerial+0x19>
    5496:	20 93 fe 05 	sts	0x05FE, r18	; 0x8005fe <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    549a:	2c e2       	ldi	r18, 0x2C	; 44
    549c:	31 e0       	ldi	r19, 0x01	; 1
    549e:	30 93 01 06 	sts	0x0601, r19	; 0x800601 <mySoftwareSerial+0x1b>
    54a2:	20 93 00 06 	sts	0x0600, r18	; 0x800600 <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    54a6:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    54aa:	94 e0       	ldi	r25, 0x04	; 4
begin():
    54ac:	88 30       	cpi	r24, 0x08	; 8
    54ae:	54 f0       	brlt	.+20     	; 0x54c4 <main+0x57c>
main():
    54b0:	91 e0       	ldi	r25, 0x01	; 1
begin():
    54b2:	8e 30       	cpi	r24, 0x0E	; 14
    54b4:	3c f0       	brlt	.+14     	; 0x54c4 <main+0x57c>
main():
    54b6:	92 e0       	ldi	r25, 0x02	; 2
begin():
    54b8:	84 31       	cpi	r24, 0x14	; 20
    54ba:	24 f0       	brlt	.+8      	; 0x54c4 <main+0x57c>
    54bc:	91 e0       	ldi	r25, 0x01	; 1
    54be:	86 31       	cpi	r24, 0x16	; 22
    54c0:	09 f4       	brne	.+2      	; 0x54c4 <main+0x57c>
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	92 2b       	or	r25, r18
    54c6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    54ca:	2d e6       	ldi	r18, 0x6D	; 109
    54cc:	30 e0       	ldi	r19, 0x00	; 0
begin():
    54ce:	88 30       	cpi	r24, 0x08	; 8
    54d0:	74 f0       	brlt	.+28     	; 0x54ee <main+0x5a6>
    54d2:	8e 30       	cpi	r24, 0x0E	; 14
    54d4:	0c f4       	brge	.+2      	; 0x54d8 <main+0x590>
    54d6:	7d c0       	rjmp	.+250    	; 0x55d2 <main+0x68a>
    54d8:	84 31       	cpi	r24, 0x14	; 20
    54da:	3c f0       	brlt	.+14     	; 0x54ea <main+0x5a2>
    54dc:	86 31       	cpi	r24, 0x16	; 22
    54de:	0c f4       	brge	.+2      	; 0x54e2 <main+0x59a>
    54e0:	78 c0       	rjmp	.+240    	; 0x55d2 <main+0x68a>
main():
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	20 e0       	ldi	r18, 0x00	; 0
begin():
    54e6:	86 31       	cpi	r24, 0x16	; 22
    54e8:	11 f4       	brne	.+4      	; 0x54ee <main+0x5a6>
main():
    54ea:	2c e6       	ldi	r18, 0x6C	; 108
    54ec:	30 e0       	ldi	r19, 0x00	; 0
begin():
    54ee:	30 93 fa 05 	sts	0x05FA, r19	; 0x8005fa <mySoftwareSerial+0x14>
    54f2:	20 93 f9 05 	sts	0x05F9, r18	; 0x8005f9 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    54f6:	88 30       	cpi	r24, 0x08	; 8
    54f8:	0c f0       	brlt	.+2      	; 0x54fc <main+0x5b4>
    54fa:	6e c0       	rjmp	.+220    	; 0x55d8 <main+0x690>
    54fc:	91 e0       	ldi	r25, 0x01	; 1
    54fe:	01 c0       	rjmp	.+2      	; 0x5502 <main+0x5ba>
    5500:	99 0f       	add	r25, r25
    5502:	8a 95       	dec	r24
    5504:	ea f7       	brpl	.-6      	; 0x5500 <main+0x5b8>
    5506:	89 2f       	mov	r24, r25
    5508:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    550c:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <mySoftwareSerial+0x1c>
    5510:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <mySoftwareSerial+0x1d>
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	f1 f7       	brne	.-4      	; 0x5514 <main+0x5cc>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    5518:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <mySoftwareSerial+0x1a>
    551c:	90 91 01 06 	lds	r25, 0x0601	; 0x800601 <mySoftwareSerial+0x1b>
    5520:	89 2b       	or	r24, r25
    5522:	49 f1       	breq	.+82     	; 0x5576 <main+0x62e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    5524:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <SoftwareSerial::active_object>
    5528:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <SoftwareSerial::active_object+0x1>
    552c:	25 e0       	ldi	r18, 0x05	; 5
    552e:	e6 3e       	cpi	r30, 0xE6	; 230
    5530:	f2 07       	cpc	r31, r18
    5532:	09 f1       	breq	.+66     	; 0x5576 <main+0x62e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    5534:	30 97       	sbiw	r30, 0x00	; 0
    5536:	39 f0       	breq	.+14     	; 0x5546 <main+0x5fe>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    5538:	a3 89       	ldd	r26, Z+19	; 0x13
    553a:	b4 89       	ldd	r27, Z+20	; 0x14
    553c:	9c 91       	ld	r25, X
    553e:	85 89       	ldd	r24, Z+21	; 0x15
    5540:	80 95       	com	r24
    5542:	89 23       	and	r24, r25
    5544:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    5546:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <mySoftwareSerial+0x1e>
    554a:	8e 7f       	andi	r24, 0xFE	; 254
    554c:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    5550:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <SoftwareSerial::_receive_buffer_tail>
    5554:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    5558:	86 ee       	ldi	r24, 0xE6	; 230
    555a:	95 e0       	ldi	r25, 0x05	; 5
    555c:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <SoftwareSerial::active_object+0x1>
    5560:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    5564:	e0 91 f9 05 	lds	r30, 0x05F9	; 0x8005f9 <mySoftwareSerial+0x13>
    5568:	f0 91 fa 05 	lds	r31, 0x05FA	; 0x8005fa <mySoftwareSerial+0x14>
    556c:	80 81       	ld	r24, Z
    556e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <mySoftwareSerial+0x15>
    5572:	89 2b       	or	r24, r25
    5574:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:155
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    5576:	64 ef       	ldi	r22, 0xF4	; 244
    5578:	71 e0       	ldi	r23, 0x01	; 1
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    5582:	06 ee       	ldi	r16, 0xE6	; 230
    5584:	15 e0       	ldi	r17, 0x05	; 5
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    5586:	bb 24       	eor	r11, r11
    5588:	b3 94       	inc	r11
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    558a:	10 93 c1 05 	sts	0x05C1, r17	; 0x8005c1 <myDFPlayer+0x1>
    558e:	00 93 c0 05 	sts	0x05C0, r16	; 0x8005c0 <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    5592:	b0 92 d8 05 	sts	0x05D8, r11	; 0x8005d8 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    5596:	70 e0       	ldi	r23, 0x00	; 0
    5598:	60 e0       	ldi	r22, 0x00	; 0
    559a:	8c e0       	ldi	r24, 0x0C	; 12
    559c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    55a0:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    55a4:	6b 01       	movw	r12, r22
    55a6:	7c 01       	movw	r14, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    55a8:	0e 94 95 04 	call	0x92a	; 0x92a <DFRobotDFPlayerMini::available() [clone .constprop.63]>
    55ac:	81 11       	cpse	r24, r1
    55ae:	22 c0       	rjmp	.+68     	; 0x55f4 <main+0x6ac>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    55b0:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    55b4:	6c 19       	sub	r22, r12
    55b6:	7d 09       	sbc	r23, r13
    55b8:	8e 09       	sbc	r24, r14
    55ba:	9f 09       	sbc	r25, r15
    55bc:	61 3d       	cpi	r22, 0xD1	; 209
    55be:	77 40       	sbci	r23, 0x07	; 7
    55c0:	81 05       	cpc	r24, r1
    55c2:	91 05       	cpc	r25, r1
    55c4:	b8 f4       	brcc	.+46     	; 0x55f4 <main+0x6ac>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    55c6:	60 e0       	ldi	r22, 0x00	; 0
    55c8:	70 e0       	ldi	r23, 0x00	; 0
    55ca:	cb 01       	movw	r24, r22
    55cc:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
    55d0:	eb cf       	rjmp	.-42     	; 0x55a8 <main+0x660>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    55d2:	2b e6       	ldi	r18, 0x6B	; 107
    55d4:	30 e0       	ldi	r19, 0x00	; 0
    55d6:	8b cf       	rjmp	.-234    	; 0x54ee <main+0x5a6>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    55d8:	8e 30       	cpi	r24, 0x0E	; 14
    55da:	14 f4       	brge	.+4      	; 0x55e0 <main+0x698>
    55dc:	88 50       	subi	r24, 0x08	; 8
    55de:	8e cf       	rjmp	.-228    	; 0x54fc <main+0x5b4>
    55e0:	86 31       	cpi	r24, 0x16	; 22
    55e2:	14 f4       	brge	.+4      	; 0x55e8 <main+0x6a0>
    55e4:	8e 50       	subi	r24, 0x0E	; 14
    55e6:	8a cf       	rjmp	.-236    	; 0x54fc <main+0x5b4>
    55e8:	86 31       	cpi	r24, 0x16	; 22
    55ea:	11 f4       	brne	.+4      	; 0x55f0 <main+0x6a8>
main():
    55ec:	80 e4       	ldi	r24, 0x40	; 64
    55ee:	8c cf       	rjmp	.-232    	; 0x5508 <main+0x5c0>
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	8a cf       	rjmp	.-236    	; 0x5508 <main+0x5c0>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    55f4:	68 ec       	ldi	r22, 0xC8	; 200
    55f6:	70 e0       	ldi	r23, 0x00	; 0
    55f8:	80 e0       	ldi	r24, 0x00	; 0
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    5600:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    5604:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    5608:	84 30       	cpi	r24, 0x04	; 4
    560a:	69 f0       	breq	.+26     	; 0x5626 <main+0x6de>
    560c:	89 30       	cpi	r24, 0x09	; 9
    560e:	59 f0       	breq	.+22     	; 0x5626 <main+0x6de>
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:158
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.clear();
    5610:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:159
            lcd.setCursor(0, 0);
    5614:	60 e0       	ldi	r22, 0x00	; 0
    5616:	80 e0       	ldi	r24, 0x00	; 0
    5618:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:160
            lcd.print(F("ERR 03"));
    561c:	82 ed       	ldi	r24, 0xD2	; 210
    561e:	93 e0       	ldi	r25, 0x03	; 3
    5620:	0e 94 36 08 	call	0x106c	; 0x106c <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
    5624:	b2 cf       	rjmp	.-156    	; 0x558a <main+0x642>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    5626:	84 ef       	ldi	r24, 0xF4	; 244
    5628:	91 e0       	ldi	r25, 0x01	; 1
    562a:	a0 e0       	ldi	r26, 0x00	; 0
    562c:	b0 e0       	ldi	r27, 0x00	; 0
    562e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <myDFPlayer+0x6>
    5632:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <myDFPlayer+0x7>
    5636:	a0 93 c8 05 	sts	0x05C8, r26	; 0x8005c8 <myDFPlayer+0x8>
    563a:	b0 93 c9 05 	sts	0x05C9, r27	; 0x8005c9 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    563e:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <config+0x15>
    5642:	70 91 c9 04 	lds	r23, 0x04C9	; 0x8004c9 <config+0x16>
    5646:	77 27       	eor	r23, r23
    5648:	86 e0       	ldi	r24, 0x06	; 6
    564a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    564e:	62 e0       	ldi	r22, 0x02	; 2
    5650:	70 e0       	ldi	r23, 0x00	; 0
    5652:	89 e0       	ldi	r24, 0x09	; 9
    5654:	0e 94 a6 05 	call	0xb4c	; 0xb4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    5658:	68 ec       	ldi	r22, 0xC8	; 200
    565a:	70 e0       	ldi	r23, 0x00	; 0
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay>
setup():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:166
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    5664:	0e 94 26 08 	call	0x104c	; 0x104c <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:167
    timrLCD = millis();
    5668:	0e 94 89 04 	call	0x912	; 0x912 <millis>
    566c:	60 93 35 04 	sts	0x0435, r22	; 0x800435 <timrLCD>
    5670:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <timrLCD+0x1>
    5674:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <timrLCD+0x2>
    5678:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:169

    if (serviceMode)
    567c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <serviceMode>
    5680:	88 23       	and	r24, r24
    5682:	e9 f0       	breq	.+58     	; 0x56be <main+0x776>
attach():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    5684:	2e ea       	ldi	r18, 0xAE	; 174
    5686:	33 e0       	ldi	r19, 0x03	; 3
    5688:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <Menu1+0x1>
    568c:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    5690:	86 e0       	ldi	r24, 0x06	; 6
    5692:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    5696:	30 93 42 05 	sts	0x0542, r19	; 0x800542 <Menu1+0x4>
    569a:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    569e:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    56a2:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:12
  menuStackCount = 0;
    56a6:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <Menu1+0x1b>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    56aa:	00 e0       	ldi	r16, 0x00	; 0
    56ac:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    56ae:	0e 94 3a 12 	call	0x2474	; 0x2474 <loop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    56b2:	01 15       	cp	r16, r1
    56b4:	11 05       	cpc	r17, r1
    56b6:	d9 f3       	breq	.-10     	; 0x56ae <main+0x766>
    56b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    56bc:	f8 cf       	rjmp	.-16     	; 0x56ae <main+0x766>
attach():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    56be:	20 e9       	ldi	r18, 0x90	; 144
    56c0:	33 e0       	ldi	r19, 0x03	; 3
    56c2:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <Menu1+0x1>
    56c6:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    56ca:	85 e0       	ldi	r24, 0x05	; 5
    56cc:	e2 cf       	rjmp	.-60     	; 0x5692 <main+0x74a>

000056ce <_GLOBAL__sub_D_CurTime>:
_GLOBAL__sub_D_CurTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1601
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    56ce:	cf 93       	push	r28
    56d0:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:43
bool ButLongPress = false;
byte alarmMode = 0;
byte btn;
char strbuf[LCD_COLS + 1];

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    56d2:	ce ea       	ldi	r28, 0xAE	; 174
    56d4:	d5 e0       	ldi	r29, 0x05	; 5
__static_initialization_and_destruction_0():
    56d6:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    56d8:	88 81       	ld	r24, Y
    56da:	99 81       	ldd	r25, Y+1	; 0x01
    56dc:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:43
    56e0:	25 e0       	ldi	r18, 0x05	; 5
    56e2:	c6 36       	cpi	r28, 0x66	; 102
    56e4:	d2 07       	cpc	r29, r18
    56e6:	b9 f7       	brne	.-18     	; 0x56d6 <_GLOBAL__sub_D_CurTime+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    56e8:	88 e8       	ldi	r24, 0x88	; 136
    56ea:	91 e0       	ldi	r25, 0x01	; 1
    56ec:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <mySoftwareSerial+0x1>
    56f0:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    56f4:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <SoftwareSerial::active_object>
    56f8:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <SoftwareSerial::active_object+0x1>
    56fc:	86 5e       	subi	r24, 0xE6	; 230
    56fe:	95 40       	sbci	r25, 0x05	; 5
    5700:	71 f4       	brne	.+28     	; 0x571e <_GLOBAL__sub_D_CurTime+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    5702:	e0 91 f9 05 	lds	r30, 0x05F9	; 0x8005f9 <mySoftwareSerial+0x13>
    5706:	f0 91 fa 05 	lds	r31, 0x05FA	; 0x8005fa <mySoftwareSerial+0x14>
    570a:	90 81       	ld	r25, Z
    570c:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <mySoftwareSerial+0x15>
    5710:	80 95       	com	r24
    5712:	89 23       	and	r24, r25
    5714:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    5716:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <SoftwareSerial::active_object+0x1>
    571a:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <SoftwareSerial::active_object>
_GLOBAL__sub_D_CurTime():
e:\Arduino\Arduino Git\ChantBellV3.1_Demo/ChantBellV3.1_Demo.ino:1601
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    571e:	df 91       	pop	r29
    5720:	cf 91       	pop	r28
    5722:	08 95       	ret

00005724 <random_r>:
random_r():
    5724:	8f 92       	push	r8
    5726:	9f 92       	push	r9
    5728:	af 92       	push	r10
    572a:	bf 92       	push	r11
    572c:	cf 92       	push	r12
    572e:	df 92       	push	r13
    5730:	ef 92       	push	r14
    5732:	ff 92       	push	r15
    5734:	cf 93       	push	r28
    5736:	df 93       	push	r29
    5738:	ec 01       	movw	r28, r24
    573a:	68 81       	ld	r22, Y
    573c:	79 81       	ldd	r23, Y+1	; 0x01
    573e:	8a 81       	ldd	r24, Y+2	; 0x02
    5740:	9b 81       	ldd	r25, Y+3	; 0x03
    5742:	61 15       	cp	r22, r1
    5744:	71 05       	cpc	r23, r1
    5746:	81 05       	cpc	r24, r1
    5748:	91 05       	cpc	r25, r1
    574a:	21 f4       	brne	.+8      	; 0x5754 <random_r+0x30>
    574c:	64 e2       	ldi	r22, 0x24	; 36
    574e:	79 ed       	ldi	r23, 0xD9	; 217
    5750:	8b e5       	ldi	r24, 0x5B	; 91
    5752:	97 e0       	ldi	r25, 0x07	; 7
    5754:	2d e1       	ldi	r18, 0x1D	; 29
    5756:	33 ef       	ldi	r19, 0xF3	; 243
    5758:	41 e0       	ldi	r20, 0x01	; 1
    575a:	50 e0       	ldi	r21, 0x00	; 0
    575c:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__divmodsi4>
    5760:	49 01       	movw	r8, r18
    5762:	5a 01       	movw	r10, r20
    5764:	9b 01       	movw	r18, r22
    5766:	ac 01       	movw	r20, r24
    5768:	a7 ea       	ldi	r26, 0xA7	; 167
    576a:	b1 e4       	ldi	r27, 0x41	; 65
    576c:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    5770:	6b 01       	movw	r12, r22
    5772:	7c 01       	movw	r14, r24
    5774:	ac ee       	ldi	r26, 0xEC	; 236
    5776:	b4 ef       	ldi	r27, 0xF4	; 244
    5778:	a5 01       	movw	r20, r10
    577a:	94 01       	movw	r18, r8
    577c:	0e 94 c7 2c 	call	0x598e	; 0x598e <__mulohisi3>
    5780:	c6 0e       	add	r12, r22
    5782:	d7 1e       	adc	r13, r23
    5784:	e8 1e       	adc	r14, r24
    5786:	f9 1e       	adc	r15, r25
    5788:	f7 fe       	sbrs	r15, 7
    578a:	06 c0       	rjmp	.+12     	; 0x5798 <random_r+0x74>
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	c8 1a       	sub	r12, r24
    5790:	d1 08       	sbc	r13, r1
    5792:	e1 08       	sbc	r14, r1
    5794:	80 e8       	ldi	r24, 0x80	; 128
    5796:	f8 0a       	sbc	r15, r24
    5798:	c8 82       	st	Y, r12
    579a:	d9 82       	std	Y+1, r13	; 0x01
    579c:	ea 82       	std	Y+2, r14	; 0x02
    579e:	fb 82       	std	Y+3, r15	; 0x03
    57a0:	c7 01       	movw	r24, r14
    57a2:	b6 01       	movw	r22, r12
    57a4:	9f 77       	andi	r25, 0x7F	; 127
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	ff 90       	pop	r15
    57ac:	ef 90       	pop	r14
    57ae:	df 90       	pop	r13
    57b0:	cf 90       	pop	r12
    57b2:	bf 90       	pop	r11
    57b4:	af 90       	pop	r10
    57b6:	9f 90       	pop	r9
    57b8:	8f 90       	pop	r8
    57ba:	08 95       	ret

000057bc <random>:
random():
    57bc:	8f 92       	push	r8
    57be:	9f 92       	push	r9
    57c0:	af 92       	push	r10
    57c2:	bf 92       	push	r11
    57c4:	cf 92       	push	r12
    57c6:	df 92       	push	r13
    57c8:	ef 92       	push	r14
    57ca:	ff 92       	push	r15
    57cc:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <next>
    57d0:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <next+0x1>
    57d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <next+0x2>
    57d8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <next+0x3>
    57dc:	61 15       	cp	r22, r1
    57de:	71 05       	cpc	r23, r1
    57e0:	81 05       	cpc	r24, r1
    57e2:	91 05       	cpc	r25, r1
    57e4:	21 f4       	brne	.+8      	; 0x57ee <random+0x32>
    57e6:	64 e2       	ldi	r22, 0x24	; 36
    57e8:	79 ed       	ldi	r23, 0xD9	; 217
    57ea:	8b e5       	ldi	r24, 0x5B	; 91
    57ec:	97 e0       	ldi	r25, 0x07	; 7
    57ee:	2d e1       	ldi	r18, 0x1D	; 29
    57f0:	33 ef       	ldi	r19, 0xF3	; 243
    57f2:	41 e0       	ldi	r20, 0x01	; 1
    57f4:	50 e0       	ldi	r21, 0x00	; 0
    57f6:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__divmodsi4>
    57fa:	49 01       	movw	r8, r18
    57fc:	5a 01       	movw	r10, r20
    57fe:	9b 01       	movw	r18, r22
    5800:	ac 01       	movw	r20, r24
    5802:	a7 ea       	ldi	r26, 0xA7	; 167
    5804:	b1 e4       	ldi	r27, 0x41	; 65
    5806:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    580a:	6b 01       	movw	r12, r22
    580c:	7c 01       	movw	r14, r24
    580e:	ac ee       	ldi	r26, 0xEC	; 236
    5810:	b4 ef       	ldi	r27, 0xF4	; 244
    5812:	a5 01       	movw	r20, r10
    5814:	94 01       	movw	r18, r8
    5816:	0e 94 c7 2c 	call	0x598e	; 0x598e <__mulohisi3>
    581a:	c6 0e       	add	r12, r22
    581c:	d7 1e       	adc	r13, r23
    581e:	e8 1e       	adc	r14, r24
    5820:	f9 1e       	adc	r15, r25
    5822:	f7 fe       	sbrs	r15, 7
    5824:	06 c0       	rjmp	.+12     	; 0x5832 <random+0x76>
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	c8 1a       	sub	r12, r24
    582a:	d1 08       	sbc	r13, r1
    582c:	e1 08       	sbc	r14, r1
    582e:	80 e8       	ldi	r24, 0x80	; 128
    5830:	f8 0a       	sbc	r15, r24
    5832:	c0 92 07 01 	sts	0x0107, r12	; 0x800107 <next>
    5836:	d0 92 08 01 	sts	0x0108, r13	; 0x800108 <next+0x1>
    583a:	e0 92 09 01 	sts	0x0109, r14	; 0x800109 <next+0x2>
    583e:	f0 92 0a 01 	sts	0x010A, r15	; 0x80010a <next+0x3>
    5842:	c7 01       	movw	r24, r14
    5844:	b6 01       	movw	r22, r12
    5846:	9f 77       	andi	r25, 0x7F	; 127
    5848:	ff 90       	pop	r15
    584a:	ef 90       	pop	r14
    584c:	df 90       	pop	r13
    584e:	cf 90       	pop	r12
    5850:	bf 90       	pop	r11
    5852:	af 90       	pop	r10
    5854:	9f 90       	pop	r9
    5856:	8f 90       	pop	r8
    5858:	08 95       	ret

0000585a <srandom>:
srandom():
    585a:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <next>
    585e:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <next+0x1>
    5862:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <next+0x2>
    5866:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <next+0x3>
    586a:	08 95       	ret

0000586c <strcpy_P>:
strcpy_P():
    586c:	fb 01       	movw	r30, r22
    586e:	dc 01       	movw	r26, r24
    5870:	05 90       	lpm	r0, Z+
    5872:	0d 92       	st	X+, r0
    5874:	00 20       	and	r0, r0
    5876:	e1 f7       	brne	.-8      	; 0x5870 <strcpy_P+0x4>
    5878:	08 95       	ret

0000587a <__itoa_ncheck>:
__itoa_ncheck():
    587a:	bb 27       	eor	r27, r27
    587c:	4a 30       	cpi	r20, 0x0A	; 10
    587e:	31 f4       	brne	.+12     	; 0x588c <__itoa_ncheck+0x12>
    5880:	99 23       	and	r25, r25
    5882:	22 f4       	brpl	.+8      	; 0x588c <__itoa_ncheck+0x12>
    5884:	bd e2       	ldi	r27, 0x2D	; 45
    5886:	90 95       	com	r25
    5888:	81 95       	neg	r24
    588a:	9f 4f       	sbci	r25, 0xFF	; 255
    588c:	0c 94 49 2c 	jmp	0x5892	; 0x5892 <__utoa_common>

00005890 <__utoa_ncheck>:
__utoa_ncheck():
    5890:	bb 27       	eor	r27, r27

00005892 <__utoa_common>:
    5892:	fb 01       	movw	r30, r22
    5894:	55 27       	eor	r21, r21
    5896:	aa 27       	eor	r26, r26
    5898:	88 0f       	add	r24, r24
    589a:	99 1f       	adc	r25, r25
    589c:	aa 1f       	adc	r26, r26
    589e:	a4 17       	cp	r26, r20
    58a0:	10 f0       	brcs	.+4      	; 0x58a6 <__utoa_common+0x14>
    58a2:	a4 1b       	sub	r26, r20
    58a4:	83 95       	inc	r24
    58a6:	50 51       	subi	r21, 0x10	; 16
    58a8:	b9 f7       	brne	.-18     	; 0x5898 <__utoa_common+0x6>
    58aa:	a0 5d       	subi	r26, 0xD0	; 208
    58ac:	aa 33       	cpi	r26, 0x3A	; 58
    58ae:	08 f0       	brcs	.+2      	; 0x58b2 <__utoa_common+0x20>
    58b0:	a9 5d       	subi	r26, 0xD9	; 217
    58b2:	a1 93       	st	Z+, r26
    58b4:	00 97       	sbiw	r24, 0x00	; 0
    58b6:	79 f7       	brne	.-34     	; 0x5896 <__utoa_common+0x4>
    58b8:	b1 11       	cpse	r27, r1
    58ba:	b1 93       	st	Z+, r27
    58bc:	11 92       	st	Z+, r1
    58be:	cb 01       	movw	r24, r22
    58c0:	0c 94 62 2c 	jmp	0x58c4	; 0x58c4 <strrev>

000058c4 <strrev>:
strrev():
    58c4:	dc 01       	movw	r26, r24
    58c6:	fc 01       	movw	r30, r24
    58c8:	67 2f       	mov	r22, r23
    58ca:	71 91       	ld	r23, Z+
    58cc:	77 23       	and	r23, r23
    58ce:	e1 f7       	brne	.-8      	; 0x58c8 <strrev+0x4>
    58d0:	32 97       	sbiw	r30, 0x02	; 2
    58d2:	04 c0       	rjmp	.+8      	; 0x58dc <strrev+0x18>
    58d4:	7c 91       	ld	r23, X
    58d6:	6d 93       	st	X+, r22
    58d8:	70 83       	st	Z, r23
    58da:	62 91       	ld	r22, -Z
    58dc:	ae 17       	cp	r26, r30
    58de:	bf 07       	cpc	r27, r31
    58e0:	c8 f3       	brcs	.-14     	; 0x58d4 <strrev+0x10>
    58e2:	08 95       	ret

000058e4 <eeprom_read_block>:
eeprom_read_block():
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22

000058e8 <eeprom_read_blraw>:
    58e8:	fc 01       	movw	r30, r24
    58ea:	f9 99       	sbic	0x1f, 1	; 31
    58ec:	fe cf       	rjmp	.-4      	; 0x58ea <eeprom_read_blraw+0x2>
    58ee:	06 c0       	rjmp	.+12     	; 0x58fc <eeprom_read_blraw+0x14>
    58f0:	f2 bd       	out	0x22, r31	; 34
    58f2:	e1 bd       	out	0x21, r30	; 33
    58f4:	f8 9a       	sbi	0x1f, 0	; 31
    58f6:	31 96       	adiw	r30, 0x01	; 1
    58f8:	00 b4       	in	r0, 0x20	; 32
    58fa:	0d 92       	st	X+, r0
    58fc:	41 50       	subi	r20, 0x01	; 1
    58fe:	50 40       	sbci	r21, 0x00	; 0
    5900:	b8 f7       	brcc	.-18     	; 0x58f0 <eeprom_read_blraw+0x8>
    5902:	08 95       	ret

00005904 <eeprom_write_block>:
eeprom_write_block():
    5904:	dc 01       	movw	r26, r24
    5906:	cb 01       	movw	r24, r22
    5908:	03 c0       	rjmp	.+6      	; 0x5910 <eeprom_write_block+0xc>
    590a:	2d 91       	ld	r18, X+
    590c:	0e 94 8d 2c 	call	0x591a	; 0x591a <eeprom_write_r18>
    5910:	41 50       	subi	r20, 0x01	; 1
    5912:	50 40       	sbci	r21, 0x00	; 0
    5914:	d0 f7       	brcc	.-12     	; 0x590a <eeprom_write_block+0x6>
    5916:	08 95       	ret

00005918 <eeprom_write_byte>:
eeprom_write_byte():
    5918:	26 2f       	mov	r18, r22

0000591a <eeprom_write_r18>:
    591a:	f9 99       	sbic	0x1f, 1	; 31
    591c:	fe cf       	rjmp	.-4      	; 0x591a <eeprom_write_r18>
    591e:	1f ba       	out	0x1f, r1	; 31
    5920:	92 bd       	out	0x22, r25	; 34
    5922:	81 bd       	out	0x21, r24	; 33
    5924:	20 bd       	out	0x20, r18	; 32
    5926:	0f b6       	in	r0, 0x3f	; 63
    5928:	f8 94       	cli
    592a:	fa 9a       	sbi	0x1f, 2	; 31
    592c:	f9 9a       	sbi	0x1f, 1	; 31
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	01 96       	adiw	r24, 0x01	; 1
    5932:	08 95       	ret

00005934 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5934:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5936:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5938:	1e f4       	brtc	.+6      	; 0x5940 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    593a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    593c:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    5940:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5942:	07 d0       	rcall	.+14     	; 0x5952 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5944:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5948:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    594a:	03 d0       	rcall	.+6      	; 0x5952 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    594c:	4e f4       	brtc	.+18     	; 0x5960 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    594e:	0c 94 b1 2c 	jmp	0x5962	; 0x5962 <__negsi2>

00005952 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5952:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5954:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5956:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5958:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    595a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    595c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    595e:	5f 4f       	sbci	r21, 0xFF	; 255

00005960 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    5960:	08 95       	ret

00005962 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5962:	90 95       	com	r25
    5964:	80 95       	com	r24
    5966:	70 95       	com	r23
    5968:	61 95       	neg	r22
    596a:	7f 4f       	sbci	r23, 0xFF	; 255
    596c:	8f 4f       	sbci	r24, 0xFF	; 255
    596e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    5970:	08 95       	ret

00005972 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    5972:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    5976:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    5978:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    597a:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    597c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    597e:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    5980:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    5982:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5984:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5986:	08 95       	ret

00005988 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    5988:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    598a:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <__muluhisi3>

0000598e <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    598e:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    5992:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    5994:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    5996:	08 95       	ret

00005998 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    5998:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    599a:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    599c:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    599e:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    59a0:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    59a2:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    59a4:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    59a6:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    59a8:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    59aa:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    59ac:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    59ae:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    59b0:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    59b2:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    59b4:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    59b6:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    59b8:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    59ba:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    59bc:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    59be:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    59c0:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    59c2:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    59c4:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    59c6:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    59c8:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    59ca:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    59cc:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    59ce:	09 94       	ijmp

000059d0 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    59d0:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    59d2:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    59d4:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    59d6:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    59d8:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    59da:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    59dc:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    59de:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    59e0:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    59e2:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    59e4:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    59e6:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    59e8:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    59ea:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    59ec:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    59ee:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    59f0:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    59f2:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    59f4:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    59f6:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    59f8:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    59fa:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    59fc:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    59fe:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    5a00:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    5a02:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    5a04:	08 95       	ret

00005a06 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    5a06:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    5a08:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    5a0a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    5a0c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    5a0e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    5a10:	0d c0       	rjmp	.+26     	; 0x5a2c <__udivmodsi4_ep>

00005a12 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    5a12:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    5a14:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    5a16:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    5a18:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    5a1a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    5a1c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    5a1e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    5a20:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    5a22:	20 f0       	brcs	.+8      	; 0x5a2c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    5a24:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    5a26:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    5a28:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    5a2a:	f5 0b       	sbc	r31, r21

00005a2c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    5a2c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    5a2e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    5a30:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5a32:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    5a34:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5a36:	69 f7       	brne	.-38     	; 0x5a12 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5a38:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5a3a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5a3c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5a3e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5a40:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5a42:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5a44:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5a46:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5a48:	08 95       	ret

00005a4a <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    5a4a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    5a4c:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    5a4e:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    5a50:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5a52:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5a54:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5a56:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5a58:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    5a5a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    5a5c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    5a5e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    5a60:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    5a62:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    5a64:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5a66:	08 95       	ret

00005a68 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    5a68:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    5a6a:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    5a6c:	04 c0       	rjmp	.+8      	; 0x5a76 <__udivmodqi4_ep>

00005a6e <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    5a6e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    5a70:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    5a72:	08 f0       	brcs	.+2      	; 0x5a76 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    5a74:	96 1b       	sub	r25, r22

00005a76 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    5a76:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    5a78:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    5a7a:	c9 f7       	brne	.-14     	; 0x5a6e <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    5a7c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    5a7e:	08 95       	ret

00005a80 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    5a80:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    5a82:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    5a84:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    5a86:	07 c0       	rjmp	.+14     	; 0x5a96 <__udivmodhi4_ep>

00005a88 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    5a88:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    5a8a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    5a8c:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    5a8e:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    5a90:	10 f0       	brcs	.+4      	; 0x5a96 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    5a92:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    5a94:	b7 0b       	sbc	r27, r23

00005a96 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    5a96:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    5a98:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    5a9a:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    5a9c:	a9 f7       	brne	.-22     	; 0x5a88 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    5a9e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    5aa0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    5aa2:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    5aa4:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    5aa6:	08 95       	ret

00005aa8 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    5aa8:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    5aaa:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    5aac:	16 f4       	brtc	.+4      	; 0x5ab2 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    5aae:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    5ab0:	07 d0       	rcall	.+14     	; 0x5ac0 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    5ab2:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    5ab4:	09 d0       	rcall	.+18     	; 0x5ac8 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    5ab6:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    5aba:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    5abc:	05 d0       	rcall	.+10     	; 0x5ac8 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    5abe:	3e f4       	brtc	.+14     	; 0x5ace <__divmodhi4_exit>

00005ac0 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    5ac0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    5ac2:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    5ac4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    5ac6:	08 95       	ret

00005ac8 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    5ac8:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    5aca:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    5acc:	7f 4f       	sbci	r23, 0xFF	; 255

00005ace <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    5ace:	08 95       	ret

00005ad0 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    5ad0:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    5ad2:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    5ad4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    5ad6:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    5ad8:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    5ada:	09 94       	ijmp

00005adc <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    5adc:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__umulhisi3>

00005ae0 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    5ae0:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    5ae2:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    5ae4:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    5ae6:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    5ae8:	08 95       	ret

00005aea <malloc>:
malloc():
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	82 30       	cpi	r24, 0x02	; 2
    5af4:	91 05       	cpc	r25, r1
    5af6:	10 f4       	brcc	.+4      	; 0x5afc <malloc+0x12>
    5af8:	82 e0       	ldi	r24, 0x02	; 2
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	e0 91 07 06 	lds	r30, 0x0607	; 0x800607 <__flp>
    5b00:	f0 91 08 06 	lds	r31, 0x0608	; 0x800608 <__flp+0x1>
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	20 e0       	ldi	r18, 0x00	; 0
    5b08:	b0 e0       	ldi	r27, 0x00	; 0
    5b0a:	a0 e0       	ldi	r26, 0x00	; 0
    5b0c:	30 97       	sbiw	r30, 0x00	; 0
    5b0e:	99 f4       	brne	.+38     	; 0x5b36 <malloc+0x4c>
    5b10:	21 15       	cp	r18, r1
    5b12:	31 05       	cpc	r19, r1
    5b14:	09 f4       	brne	.+2      	; 0x5b18 <malloc+0x2e>
    5b16:	4a c0       	rjmp	.+148    	; 0x5bac <malloc+0xc2>
    5b18:	28 1b       	sub	r18, r24
    5b1a:	39 0b       	sbc	r19, r25
    5b1c:	24 30       	cpi	r18, 0x04	; 4
    5b1e:	31 05       	cpc	r19, r1
    5b20:	d8 f5       	brcc	.+118    	; 0x5b98 <malloc+0xae>
    5b22:	8a 81       	ldd	r24, Y+2	; 0x02
    5b24:	9b 81       	ldd	r25, Y+3	; 0x03
    5b26:	61 15       	cp	r22, r1
    5b28:	71 05       	cpc	r23, r1
    5b2a:	89 f1       	breq	.+98     	; 0x5b8e <malloc+0xa4>
    5b2c:	fb 01       	movw	r30, r22
    5b2e:	93 83       	std	Z+3, r25	; 0x03
    5b30:	82 83       	std	Z+2, r24	; 0x02
    5b32:	fe 01       	movw	r30, r28
    5b34:	11 c0       	rjmp	.+34     	; 0x5b58 <malloc+0x6e>
    5b36:	40 81       	ld	r20, Z
    5b38:	51 81       	ldd	r21, Z+1	; 0x01
    5b3a:	02 81       	ldd	r16, Z+2	; 0x02
    5b3c:	13 81       	ldd	r17, Z+3	; 0x03
    5b3e:	48 17       	cp	r20, r24
    5b40:	59 07       	cpc	r21, r25
    5b42:	e0 f0       	brcs	.+56     	; 0x5b7c <malloc+0x92>
    5b44:	48 17       	cp	r20, r24
    5b46:	59 07       	cpc	r21, r25
    5b48:	99 f4       	brne	.+38     	; 0x5b70 <malloc+0x86>
    5b4a:	10 97       	sbiw	r26, 0x00	; 0
    5b4c:	61 f0       	breq	.+24     	; 0x5b66 <malloc+0x7c>
    5b4e:	12 96       	adiw	r26, 0x02	; 2
    5b50:	0c 93       	st	X, r16
    5b52:	12 97       	sbiw	r26, 0x02	; 2
    5b54:	13 96       	adiw	r26, 0x03	; 3
    5b56:	1c 93       	st	X, r17
    5b58:	32 96       	adiw	r30, 0x02	; 2
    5b5a:	cf 01       	movw	r24, r30
    5b5c:	df 91       	pop	r29
    5b5e:	cf 91       	pop	r28
    5b60:	1f 91       	pop	r17
    5b62:	0f 91       	pop	r16
    5b64:	08 95       	ret
    5b66:	00 93 07 06 	sts	0x0607, r16	; 0x800607 <__flp>
    5b6a:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <__flp+0x1>
    5b6e:	f4 cf       	rjmp	.-24     	; 0x5b58 <malloc+0x6e>
    5b70:	21 15       	cp	r18, r1
    5b72:	31 05       	cpc	r19, r1
    5b74:	51 f0       	breq	.+20     	; 0x5b8a <malloc+0xa0>
    5b76:	42 17       	cp	r20, r18
    5b78:	53 07       	cpc	r21, r19
    5b7a:	38 f0       	brcs	.+14     	; 0x5b8a <malloc+0xa0>
    5b7c:	a9 01       	movw	r20, r18
    5b7e:	db 01       	movw	r26, r22
    5b80:	9a 01       	movw	r18, r20
    5b82:	bd 01       	movw	r22, r26
    5b84:	df 01       	movw	r26, r30
    5b86:	f8 01       	movw	r30, r16
    5b88:	c1 cf       	rjmp	.-126    	; 0x5b0c <malloc+0x22>
    5b8a:	ef 01       	movw	r28, r30
    5b8c:	f9 cf       	rjmp	.-14     	; 0x5b80 <malloc+0x96>
    5b8e:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <__flp+0x1>
    5b92:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__flp>
    5b96:	cd cf       	rjmp	.-102    	; 0x5b32 <malloc+0x48>
    5b98:	fe 01       	movw	r30, r28
    5b9a:	e2 0f       	add	r30, r18
    5b9c:	f3 1f       	adc	r31, r19
    5b9e:	81 93       	st	Z+, r24
    5ba0:	91 93       	st	Z+, r25
    5ba2:	22 50       	subi	r18, 0x02	; 2
    5ba4:	31 09       	sbc	r19, r1
    5ba6:	39 83       	std	Y+1, r19	; 0x01
    5ba8:	28 83       	st	Y, r18
    5baa:	d7 cf       	rjmp	.-82     	; 0x5b5a <malloc+0x70>
    5bac:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <__brkval>
    5bb0:	30 91 06 06 	lds	r19, 0x0606	; 0x800606 <__brkval+0x1>
    5bb4:	23 2b       	or	r18, r19
    5bb6:	41 f4       	brne	.+16     	; 0x5bc8 <malloc+0xde>
    5bb8:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__malloc_heap_start>
    5bbc:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__malloc_heap_start+0x1>
    5bc0:	30 93 06 06 	sts	0x0606, r19	; 0x800606 <__brkval+0x1>
    5bc4:	20 93 05 06 	sts	0x0605, r18	; 0x800605 <__brkval>
    5bc8:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_end>
    5bcc:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_end+0x1>
    5bd0:	21 15       	cp	r18, r1
    5bd2:	31 05       	cpc	r19, r1
    5bd4:	41 f4       	brne	.+16     	; 0x5be6 <malloc+0xfc>
    5bd6:	2d b7       	in	r18, 0x3d	; 61
    5bd8:	3e b7       	in	r19, 0x3e	; 62
    5bda:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <__malloc_margin>
    5bde:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <__malloc_margin+0x1>
    5be2:	24 1b       	sub	r18, r20
    5be4:	35 0b       	sbc	r19, r21
    5be6:	e0 91 05 06 	lds	r30, 0x0605	; 0x800605 <__brkval>
    5bea:	f0 91 06 06 	lds	r31, 0x0606	; 0x800606 <__brkval+0x1>
    5bee:	e2 17       	cp	r30, r18
    5bf0:	f3 07       	cpc	r31, r19
    5bf2:	a0 f4       	brcc	.+40     	; 0x5c1c <malloc+0x132>
    5bf4:	2e 1b       	sub	r18, r30
    5bf6:	3f 0b       	sbc	r19, r31
    5bf8:	28 17       	cp	r18, r24
    5bfa:	39 07       	cpc	r19, r25
    5bfc:	78 f0       	brcs	.+30     	; 0x5c1c <malloc+0x132>
    5bfe:	ac 01       	movw	r20, r24
    5c00:	4e 5f       	subi	r20, 0xFE	; 254
    5c02:	5f 4f       	sbci	r21, 0xFF	; 255
    5c04:	24 17       	cp	r18, r20
    5c06:	35 07       	cpc	r19, r21
    5c08:	48 f0       	brcs	.+18     	; 0x5c1c <malloc+0x132>
    5c0a:	4e 0f       	add	r20, r30
    5c0c:	5f 1f       	adc	r21, r31
    5c0e:	50 93 06 06 	sts	0x0606, r21	; 0x800606 <__brkval+0x1>
    5c12:	40 93 05 06 	sts	0x0605, r20	; 0x800605 <__brkval>
    5c16:	81 93       	st	Z+, r24
    5c18:	91 93       	st	Z+, r25
    5c1a:	9f cf       	rjmp	.-194    	; 0x5b5a <malloc+0x70>
    5c1c:	f0 e0       	ldi	r31, 0x00	; 0
    5c1e:	e0 e0       	ldi	r30, 0x00	; 0
    5c20:	9c cf       	rjmp	.-200    	; 0x5b5a <malloc+0x70>

00005c22 <free>:
free():
    5c22:	cf 93       	push	r28
    5c24:	df 93       	push	r29
    5c26:	00 97       	sbiw	r24, 0x00	; 0
    5c28:	e9 f0       	breq	.+58     	; 0x5c64 <free+0x42>
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	32 97       	sbiw	r30, 0x02	; 2
    5c2e:	13 82       	std	Z+3, r1	; 0x03
    5c30:	12 82       	std	Z+2, r1	; 0x02
    5c32:	a0 91 07 06 	lds	r26, 0x0607	; 0x800607 <__flp>
    5c36:	b0 91 08 06 	lds	r27, 0x0608	; 0x800608 <__flp+0x1>
    5c3a:	ed 01       	movw	r28, r26
    5c3c:	30 e0       	ldi	r19, 0x00	; 0
    5c3e:	20 e0       	ldi	r18, 0x00	; 0
    5c40:	10 97       	sbiw	r26, 0x00	; 0
    5c42:	a1 f4       	brne	.+40     	; 0x5c6c <free+0x4a>
    5c44:	20 81       	ld	r18, Z
    5c46:	31 81       	ldd	r19, Z+1	; 0x01
    5c48:	82 0f       	add	r24, r18
    5c4a:	93 1f       	adc	r25, r19
    5c4c:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <__brkval>
    5c50:	30 91 06 06 	lds	r19, 0x0606	; 0x800606 <__brkval+0x1>
    5c54:	28 17       	cp	r18, r24
    5c56:	39 07       	cpc	r19, r25
    5c58:	09 f0       	breq	.+2      	; 0x5c5c <free+0x3a>
    5c5a:	61 c0       	rjmp	.+194    	; 0x5d1e <free+0xfc>
    5c5c:	f0 93 06 06 	sts	0x0606, r31	; 0x800606 <__brkval+0x1>
    5c60:	e0 93 05 06 	sts	0x0605, r30	; 0x800605 <__brkval>
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	08 95       	ret
    5c6a:	ea 01       	movw	r28, r20
    5c6c:	ce 17       	cp	r28, r30
    5c6e:	df 07       	cpc	r29, r31
    5c70:	e8 f5       	brcc	.+122    	; 0x5cec <free+0xca>
    5c72:	4a 81       	ldd	r20, Y+2	; 0x02
    5c74:	5b 81       	ldd	r21, Y+3	; 0x03
    5c76:	9e 01       	movw	r18, r28
    5c78:	41 15       	cp	r20, r1
    5c7a:	51 05       	cpc	r21, r1
    5c7c:	b1 f7       	brne	.-20     	; 0x5c6a <free+0x48>
    5c7e:	e9 01       	movw	r28, r18
    5c80:	fb 83       	std	Y+3, r31	; 0x03
    5c82:	ea 83       	std	Y+2, r30	; 0x02
    5c84:	49 91       	ld	r20, Y+
    5c86:	59 91       	ld	r21, Y+
    5c88:	c4 0f       	add	r28, r20
    5c8a:	d5 1f       	adc	r29, r21
    5c8c:	ec 17       	cp	r30, r28
    5c8e:	fd 07       	cpc	r31, r29
    5c90:	61 f4       	brne	.+24     	; 0x5caa <free+0x88>
    5c92:	80 81       	ld	r24, Z
    5c94:	91 81       	ldd	r25, Z+1	; 0x01
    5c96:	02 96       	adiw	r24, 0x02	; 2
    5c98:	84 0f       	add	r24, r20
    5c9a:	95 1f       	adc	r25, r21
    5c9c:	e9 01       	movw	r28, r18
    5c9e:	99 83       	std	Y+1, r25	; 0x01
    5ca0:	88 83       	st	Y, r24
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
    5ca6:	9b 83       	std	Y+3, r25	; 0x03
    5ca8:	8a 83       	std	Y+2, r24	; 0x02
    5caa:	f0 e0       	ldi	r31, 0x00	; 0
    5cac:	e0 e0       	ldi	r30, 0x00	; 0
    5cae:	12 96       	adiw	r26, 0x02	; 2
    5cb0:	8d 91       	ld	r24, X+
    5cb2:	9c 91       	ld	r25, X
    5cb4:	13 97       	sbiw	r26, 0x03	; 3
    5cb6:	00 97       	sbiw	r24, 0x00	; 0
    5cb8:	b9 f5       	brne	.+110    	; 0x5d28 <free+0x106>
    5cba:	2d 91       	ld	r18, X+
    5cbc:	3c 91       	ld	r19, X
    5cbe:	11 97       	sbiw	r26, 0x01	; 1
    5cc0:	cd 01       	movw	r24, r26
    5cc2:	02 96       	adiw	r24, 0x02	; 2
    5cc4:	82 0f       	add	r24, r18
    5cc6:	93 1f       	adc	r25, r19
    5cc8:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <__brkval>
    5ccc:	30 91 06 06 	lds	r19, 0x0606	; 0x800606 <__brkval+0x1>
    5cd0:	28 17       	cp	r18, r24
    5cd2:	39 07       	cpc	r19, r25
    5cd4:	39 f6       	brne	.-114    	; 0x5c64 <free+0x42>
    5cd6:	30 97       	sbiw	r30, 0x00	; 0
    5cd8:	51 f5       	brne	.+84     	; 0x5d2e <free+0x10c>
    5cda:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__flp+0x1>
    5cde:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <__flp>
    5ce2:	b0 93 06 06 	sts	0x0606, r27	; 0x800606 <__brkval+0x1>
    5ce6:	a0 93 05 06 	sts	0x0605, r26	; 0x800605 <__brkval>
    5cea:	bc cf       	rjmp	.-136    	; 0x5c64 <free+0x42>
    5cec:	d3 83       	std	Z+3, r29	; 0x03
    5cee:	c2 83       	std	Z+2, r28	; 0x02
    5cf0:	40 81       	ld	r20, Z
    5cf2:	51 81       	ldd	r21, Z+1	; 0x01
    5cf4:	84 0f       	add	r24, r20
    5cf6:	95 1f       	adc	r25, r21
    5cf8:	c8 17       	cp	r28, r24
    5cfa:	d9 07       	cpc	r29, r25
    5cfc:	61 f4       	brne	.+24     	; 0x5d16 <free+0xf4>
    5cfe:	4e 5f       	subi	r20, 0xFE	; 254
    5d00:	5f 4f       	sbci	r21, 0xFF	; 255
    5d02:	88 81       	ld	r24, Y
    5d04:	99 81       	ldd	r25, Y+1	; 0x01
    5d06:	48 0f       	add	r20, r24
    5d08:	59 1f       	adc	r21, r25
    5d0a:	51 83       	std	Z+1, r21	; 0x01
    5d0c:	40 83       	st	Z, r20
    5d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d10:	9b 81       	ldd	r25, Y+3	; 0x03
    5d12:	93 83       	std	Z+3, r25	; 0x03
    5d14:	82 83       	std	Z+2, r24	; 0x02
    5d16:	21 15       	cp	r18, r1
    5d18:	31 05       	cpc	r19, r1
    5d1a:	09 f0       	breq	.+2      	; 0x5d1e <free+0xfc>
    5d1c:	b0 cf       	rjmp	.-160    	; 0x5c7e <free+0x5c>
    5d1e:	f0 93 08 06 	sts	0x0608, r31	; 0x800608 <__flp+0x1>
    5d22:	e0 93 07 06 	sts	0x0607, r30	; 0x800607 <__flp>
    5d26:	9e cf       	rjmp	.-196    	; 0x5c64 <free+0x42>
    5d28:	fd 01       	movw	r30, r26
    5d2a:	dc 01       	movw	r26, r24
    5d2c:	c0 cf       	rjmp	.-128    	; 0x5cae <free+0x8c>
    5d2e:	13 82       	std	Z+3, r1	; 0x03
    5d30:	12 82       	std	Z+2, r1	; 0x02
    5d32:	d7 cf       	rjmp	.-82     	; 0x5ce2 <free+0xc0>

00005d34 <realloc>:
realloc():
    5d34:	b0 e0       	ldi	r27, 0x00	; 0
    5d36:	a0 e0       	ldi	r26, 0x00	; 0
    5d38:	e0 ea       	ldi	r30, 0xA0	; 160
    5d3a:	fe e2       	ldi	r31, 0x2E	; 46
    5d3c:	0c 94 ce 2c 	jmp	0x599c	; 0x599c <__prologue_saves__+0x4>
    5d40:	8c 01       	movw	r16, r24
    5d42:	00 97       	sbiw	r24, 0x00	; 0
    5d44:	51 f4       	brne	.+20     	; 0x5d5a <realloc+0x26>
    5d46:	cb 01       	movw	r24, r22
    5d48:	0e 94 75 2d 	call	0x5aea	; 0x5aea <malloc>
    5d4c:	8c 01       	movw	r16, r24
    5d4e:	c8 01       	movw	r24, r16
    5d50:	cd b7       	in	r28, 0x3d	; 61
    5d52:	de b7       	in	r29, 0x3e	; 62
    5d54:	e0 e1       	ldi	r30, 0x10	; 16
    5d56:	0c 94 ea 2c 	jmp	0x59d4	; 0x59d4 <__epilogue_restores__+0x4>
    5d5a:	fc 01       	movw	r30, r24
    5d5c:	e6 0f       	add	r30, r22
    5d5e:	f7 1f       	adc	r31, r23
    5d60:	9c 01       	movw	r18, r24
    5d62:	22 50       	subi	r18, 0x02	; 2
    5d64:	31 09       	sbc	r19, r1
    5d66:	e2 17       	cp	r30, r18
    5d68:	f3 07       	cpc	r31, r19
    5d6a:	08 f4       	brcc	.+2      	; 0x5d6e <realloc+0x3a>
    5d6c:	9d c0       	rjmp	.+314    	; 0x5ea8 <realloc+0x174>
    5d6e:	d9 01       	movw	r26, r18
    5d70:	cd 91       	ld	r28, X+
    5d72:	dc 91       	ld	r29, X
    5d74:	11 97       	sbiw	r26, 0x01	; 1
    5d76:	c6 17       	cp	r28, r22
    5d78:	d7 07       	cpc	r29, r23
    5d7a:	98 f0       	brcs	.+38     	; 0x5da2 <realloc+0x6e>
    5d7c:	c5 30       	cpi	r28, 0x05	; 5
    5d7e:	d1 05       	cpc	r29, r1
    5d80:	30 f3       	brcs	.-52     	; 0x5d4e <realloc+0x1a>
    5d82:	ce 01       	movw	r24, r28
    5d84:	04 97       	sbiw	r24, 0x04	; 4
    5d86:	86 17       	cp	r24, r22
    5d88:	97 07       	cpc	r25, r23
    5d8a:	08 f3       	brcs	.-62     	; 0x5d4e <realloc+0x1a>
    5d8c:	c6 1b       	sub	r28, r22
    5d8e:	d7 0b       	sbc	r29, r23
    5d90:	22 97       	sbiw	r28, 0x02	; 2
    5d92:	c1 93       	st	Z+, r28
    5d94:	d1 93       	st	Z+, r29
    5d96:	6d 93       	st	X+, r22
    5d98:	7c 93       	st	X, r23
    5d9a:	cf 01       	movw	r24, r30
    5d9c:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
    5da0:	d6 cf       	rjmp	.-84     	; 0x5d4e <realloc+0x1a>
    5da2:	5b 01       	movw	r10, r22
    5da4:	ac 1a       	sub	r10, r28
    5da6:	bd 0a       	sbc	r11, r29
    5da8:	4c 01       	movw	r8, r24
    5daa:	8c 0e       	add	r8, r28
    5dac:	9d 1e       	adc	r9, r29
    5dae:	a0 91 07 06 	lds	r26, 0x0607	; 0x800607 <__flp>
    5db2:	b0 91 08 06 	lds	r27, 0x0608	; 0x800608 <__flp+0x1>
    5db6:	51 2c       	mov	r5, r1
    5db8:	41 2c       	mov	r4, r1
    5dba:	f1 2c       	mov	r15, r1
    5dbc:	e1 2c       	mov	r14, r1
    5dbe:	10 97       	sbiw	r26, 0x00	; 0
    5dc0:	31 f5       	brne	.+76     	; 0x5e0e <realloc+0xda>
    5dc2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__brkval>
    5dc6:	90 91 06 06 	lds	r25, 0x0606	; 0x800606 <__brkval+0x1>
    5dca:	88 15       	cp	r24, r8
    5dcc:	99 05       	cpc	r25, r9
    5dce:	09 f0       	breq	.+2      	; 0x5dd2 <realloc+0x9e>
    5dd0:	5c c0       	rjmp	.+184    	; 0x5e8a <realloc+0x156>
    5dd2:	46 16       	cp	r4, r22
    5dd4:	57 06       	cpc	r5, r23
    5dd6:	08 f0       	brcs	.+2      	; 0x5dda <realloc+0xa6>
    5dd8:	58 c0       	rjmp	.+176    	; 0x5e8a <realloc+0x156>
    5dda:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__malloc_heap_end>
    5dde:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__malloc_heap_end+0x1>
    5de2:	00 97       	sbiw	r24, 0x00	; 0
    5de4:	41 f4       	brne	.+16     	; 0x5df6 <realloc+0xc2>
    5de6:	8d b7       	in	r24, 0x3d	; 61
    5de8:	9e b7       	in	r25, 0x3e	; 62
    5dea:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <__malloc_margin>
    5dee:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <__malloc_margin+0x1>
    5df2:	84 1b       	sub	r24, r20
    5df4:	95 0b       	sbc	r25, r21
    5df6:	e8 17       	cp	r30, r24
    5df8:	f9 07       	cpc	r31, r25
    5dfa:	08 f0       	brcs	.+2      	; 0x5dfe <realloc+0xca>
    5dfc:	55 c0       	rjmp	.+170    	; 0x5ea8 <realloc+0x174>
    5dfe:	f0 93 06 06 	sts	0x0606, r31	; 0x800606 <__brkval+0x1>
    5e02:	e0 93 05 06 	sts	0x0605, r30	; 0x800605 <__brkval>
    5e06:	f9 01       	movw	r30, r18
    5e08:	71 83       	std	Z+1, r23	; 0x01
    5e0a:	60 83       	st	Z, r22
    5e0c:	a0 cf       	rjmp	.-192    	; 0x5d4e <realloc+0x1a>
    5e0e:	8d 91       	ld	r24, X+
    5e10:	9c 91       	ld	r25, X
    5e12:	11 97       	sbiw	r26, 0x01	; 1
    5e14:	12 96       	adiw	r26, 0x02	; 2
    5e16:	6c 90       	ld	r6, X
    5e18:	12 97       	sbiw	r26, 0x02	; 2
    5e1a:	13 96       	adiw	r26, 0x03	; 3
    5e1c:	7c 90       	ld	r7, X
    5e1e:	13 97       	sbiw	r26, 0x03	; 3
    5e20:	a8 15       	cp	r26, r8
    5e22:	b9 05       	cpc	r27, r9
    5e24:	59 f5       	brne	.+86     	; 0x5e7c <realloc+0x148>
    5e26:	6c 01       	movw	r12, r24
    5e28:	42 e0       	ldi	r20, 0x02	; 2
    5e2a:	c4 0e       	add	r12, r20
    5e2c:	d1 1c       	adc	r13, r1
    5e2e:	ca 14       	cp	r12, r10
    5e30:	db 04       	cpc	r13, r11
    5e32:	20 f1       	brcs	.+72     	; 0x5e7c <realloc+0x148>
    5e34:	ac 01       	movw	r20, r24
    5e36:	4a 19       	sub	r20, r10
    5e38:	5b 09       	sbc	r21, r11
    5e3a:	da 01       	movw	r26, r20
    5e3c:	12 96       	adiw	r26, 0x02	; 2
    5e3e:	15 97       	sbiw	r26, 0x05	; 5
    5e40:	80 f0       	brcs	.+32     	; 0x5e62 <realloc+0x12e>
    5e42:	62 82       	std	Z+2, r6	; 0x02
    5e44:	73 82       	std	Z+3, r7	; 0x03
    5e46:	51 83       	std	Z+1, r21	; 0x01
    5e48:	40 83       	st	Z, r20
    5e4a:	d9 01       	movw	r26, r18
    5e4c:	6d 93       	st	X+, r22
    5e4e:	7c 93       	st	X, r23
    5e50:	e1 14       	cp	r14, r1
    5e52:	f1 04       	cpc	r15, r1
    5e54:	71 f0       	breq	.+28     	; 0x5e72 <realloc+0x13e>
    5e56:	d7 01       	movw	r26, r14
    5e58:	13 96       	adiw	r26, 0x03	; 3
    5e5a:	fc 93       	st	X, r31
    5e5c:	ee 93       	st	-X, r30
    5e5e:	12 97       	sbiw	r26, 0x02	; 2
    5e60:	76 cf       	rjmp	.-276    	; 0x5d4e <realloc+0x1a>
    5e62:	22 96       	adiw	r28, 0x02	; 2
    5e64:	8c 0f       	add	r24, r28
    5e66:	9d 1f       	adc	r25, r29
    5e68:	f9 01       	movw	r30, r18
    5e6a:	91 83       	std	Z+1, r25	; 0x01
    5e6c:	80 83       	st	Z, r24
    5e6e:	f3 01       	movw	r30, r6
    5e70:	ef cf       	rjmp	.-34     	; 0x5e50 <realloc+0x11c>
    5e72:	f0 93 08 06 	sts	0x0608, r31	; 0x800608 <__flp+0x1>
    5e76:	e0 93 07 06 	sts	0x0607, r30	; 0x800607 <__flp>
    5e7a:	69 cf       	rjmp	.-302    	; 0x5d4e <realloc+0x1a>
    5e7c:	48 16       	cp	r4, r24
    5e7e:	59 06       	cpc	r5, r25
    5e80:	08 f4       	brcc	.+2      	; 0x5e84 <realloc+0x150>
    5e82:	2c 01       	movw	r4, r24
    5e84:	7d 01       	movw	r14, r26
    5e86:	d3 01       	movw	r26, r6
    5e88:	9a cf       	rjmp	.-204    	; 0x5dbe <realloc+0x8a>
    5e8a:	cb 01       	movw	r24, r22
    5e8c:	0e 94 75 2d 	call	0x5aea	; 0x5aea <malloc>
    5e90:	7c 01       	movw	r14, r24
    5e92:	00 97       	sbiw	r24, 0x00	; 0
    5e94:	49 f0       	breq	.+18     	; 0x5ea8 <realloc+0x174>
    5e96:	ae 01       	movw	r20, r28
    5e98:	b8 01       	movw	r22, r16
    5e9a:	0e 94 57 2f 	call	0x5eae	; 0x5eae <memcpy>
    5e9e:	c8 01       	movw	r24, r16
    5ea0:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <free>
    5ea4:	87 01       	movw	r16, r14
    5ea6:	53 cf       	rjmp	.-346    	; 0x5d4e <realloc+0x1a>
    5ea8:	10 e0       	ldi	r17, 0x00	; 0
    5eaa:	00 e0       	ldi	r16, 0x00	; 0
    5eac:	50 cf       	rjmp	.-352    	; 0x5d4e <realloc+0x1a>

00005eae <memcpy>:
memcpy():
    5eae:	fb 01       	movw	r30, r22
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	02 c0       	rjmp	.+4      	; 0x5eb8 <memcpy+0xa>
    5eb4:	01 90       	ld	r0, Z+
    5eb6:	0d 92       	st	X+, r0
    5eb8:	41 50       	subi	r20, 0x01	; 1
    5eba:	50 40       	sbci	r21, 0x00	; 0
    5ebc:	d8 f7       	brcc	.-10     	; 0x5eb4 <memcpy+0x6>
    5ebe:	08 95       	ret

00005ec0 <strcat>:
strcat():
    5ec0:	fb 01       	movw	r30, r22
    5ec2:	dc 01       	movw	r26, r24
    5ec4:	0d 90       	ld	r0, X+
    5ec6:	00 20       	and	r0, r0
    5ec8:	e9 f7       	brne	.-6      	; 0x5ec4 <strcat+0x4>
    5eca:	11 97       	sbiw	r26, 0x01	; 1
    5ecc:	01 90       	ld	r0, Z+
    5ece:	0d 92       	st	X+, r0
    5ed0:	00 20       	and	r0, r0
    5ed2:	e1 f7       	brne	.-8      	; 0x5ecc <strcat+0xc>
    5ed4:	08 95       	ret

00005ed6 <strcmp>:
strcmp():
    5ed6:	fb 01       	movw	r30, r22
    5ed8:	dc 01       	movw	r26, r24
    5eda:	8d 91       	ld	r24, X+
    5edc:	01 90       	ld	r0, Z+
    5ede:	80 19       	sub	r24, r0
    5ee0:	01 10       	cpse	r0, r1
    5ee2:	d9 f3       	breq	.-10     	; 0x5eda <strcmp+0x4>
    5ee4:	99 0b       	sbc	r25, r25
    5ee6:	08 95       	ret

00005ee8 <strcpy>:
strcpy():
    5ee8:	fb 01       	movw	r30, r22
    5eea:	dc 01       	movw	r26, r24
    5eec:	01 90       	ld	r0, Z+
    5eee:	0d 92       	st	X+, r0
    5ef0:	00 20       	and	r0, r0
    5ef2:	e1 f7       	brne	.-8      	; 0x5eec <strcpy+0x4>
    5ef4:	08 95       	ret

00005ef6 <strncpy>:
strncpy():
    5ef6:	fb 01       	movw	r30, r22
    5ef8:	dc 01       	movw	r26, r24
    5efa:	41 50       	subi	r20, 0x01	; 1
    5efc:	50 40       	sbci	r21, 0x00	; 0
    5efe:	48 f0       	brcs	.+18     	; 0x5f12 <strncpy+0x1c>
    5f00:	01 90       	ld	r0, Z+
    5f02:	0d 92       	st	X+, r0
    5f04:	00 20       	and	r0, r0
    5f06:	c9 f7       	brne	.-14     	; 0x5efa <strncpy+0x4>
    5f08:	01 c0       	rjmp	.+2      	; 0x5f0c <strncpy+0x16>
    5f0a:	1d 92       	st	X+, r1
    5f0c:	41 50       	subi	r20, 0x01	; 1
    5f0e:	50 40       	sbci	r21, 0x00	; 0
    5f10:	e0 f7       	brcc	.-8      	; 0x5f0a <strncpy+0x14>
    5f12:	08 95       	ret

00005f14 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    5f14:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    5f16:	ce e2       	ldi	r28, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    5f18:	d2 e0       	ldi	r29, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    5f1a:	04 c0       	rjmp	.+8      	; 0x5f24 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    5f1c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    5f1e:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    5f22:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    5f24:	cf 32       	cpi	r28, 0x2F	; 47
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    5f26:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    5f28:	c9 f7       	brne	.-14     	; 0x5f1c <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    5f2a:	f8 94       	cli

00005f2c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    5f2c:	ff cf       	rjmp	.-2      	; 0x5f2c <__stop_program>
