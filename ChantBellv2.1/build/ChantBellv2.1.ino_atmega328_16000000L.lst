
e:\Arduino\Arduino Git\ChantBellv2.1\build/ChantBellv2.1.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 9c 01 	jmp	0x338	; 0x338 <__dtors_end>
       4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
       8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
       c:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__vector_3>
      10:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__vector_3>
      14:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__vector_3>
      18:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      1c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      20:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      24:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      28:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      2c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      30:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      34:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      38:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      3c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      40:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_16>
      44:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      48:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      4c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      50:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      54:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      58:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      5c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      60:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__vector_24>
      64:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	53 4f       	sbci	r21, 0xF3	; 243
      6a:	4e 47       	sbci	r20, 0x7E	; 126
      6c:	20 43       	sbci	r18, 0x30	; 48
      6e:	4f 55       	subi	r20, 0x5F	; 95
      70:	4e 54       	subi	r20, 0x4E	; 78
	...

00000073 <sampleMenu_2_7_6>:
      73:	45 56 45 20 53 4f 4e 47 20 32 20 54 49 4d 45 00     EVE SONG 2 TIME.

00000083 <sampleMenu_2_7_5>:
      83:	4d 4f 52 20 53 4f 4e 47 20 32 20 54 49 4d 45 00     MOR SONG 2 TIME.

00000093 <sampleMenu_2_7_4>:
      93:	45 56 45 20 53 4f 4e 47 20 31 20 4e 6f 2e 00        EVE SONG 1 No..

000000a2 <sampleMenu_2_7_3>:
      a2:	45 56 45 20 53 4f 4e 47 20 31 20 54 49 4d 45 00     EVE SONG 1 TIME.

000000b2 <sampleMenu_2_7_2>:
      b2:	4d 4f 52 20 53 4f 4e 47 20 31 20 4e 6f 2e 00        MOR SONG 1 No..

000000c1 <sampleMenu_2_7_1>:
      c1:	4d 4f 52 20 53 4f 4e 47 20 31 20 54 49 4d 45 00     MOR SONG 1 TIME.

000000d1 <sampleMenu_2_6_2>:
      d1:	32 20 50 4c 41 59 00                                2 PLAY.

000000d8 <sampleMenu_2_6_1>:
      d8:	31 20 53 45 4c 45 43 54 20 54 49 4d 45 00           1 SELECT TIME.

000000e6 <sampleMenu_2_9>:
      e6:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

000000f4 <sampleMenu_List_2_7>:
      f4:	0e c1 00 00 00 00 13 b2 00 00 00 00 10 a2 00 00     ................
     104:	00 00 14 93 00 00 00 00 0f 83 00 00 00 00 11 73     ...............s
     114:	00 00 00 00 12 68 00 00 00 00 00 68 01 00 00 00     .....h.....h....

00000124 <sampleMenu_2_7>:
     124:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

00000131 <sampleMenu_List_2_6>:
     131:	0b d8 00 00 00 00 0c d1 00 00 00 00 00 68 01 00     .............h..
	...

00000143 <sampleMenu_2_6>:
     143:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

0000014d <sampleMenu_2_4>:
     14d:	42 41 43 4b 4c 49 47 48 54 20 44 55 52 00           BACKLIGHT DUR.

0000015b <sampleMenu_2_3>:
     15b:	53 4c 4f 47 41 4d 20 43 4f 55 4e 54 00              SLOGAM COUNT.

00000168 <sampleMenu_back>:
     168:	42 41 43 4b 00                                      BACK.

0000016d <configMenu_2>:
     16d:	53 45 54 20 59 45 41 52 00                          SET YEAR.

00000176 <configMenu_1>:
     176:	53 45 54 20 53 45 52 49 41 4c 00                    SET SERIAL.

00000181 <sampleMenu_2_5>:
     181:	56 4f 4c 55 4d 45 00                                VOLUME.

00000188 <sampleMenu_2_8>:
     188:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000194 <sampleMenu_2_2>:
     194:	41 4c 41 52 4d 20 45 4e 44 20 54 49 4d 45 00        ALARM END TIME.

000001a3 <sampleMenu_2_1>:
     1a3:	41 4c 41 52 4d 20 53 54 41 52 54 20 54 49 4d 45     ALARM START TIME
	...

000001b4 <sampleMenu_1_2>:
     1b4:	53 45 54 20 54 49 4d 45 00                          SET TIME.

000001bd <sampleMenu_1_1>:
     1bd:	53 45 54 20 44 41 54 45 00                          SET DATE.

000001c6 <sampleMenu_exit>:
     1c6:	45 58 49 54 00                                      EXIT.

000001cb <sampleMenu_List_2>:
     1cb:	05 a3 01 00 00 00 06 94 01 00 00 00 07 5b 01 00     .............[..
     1db:	00 00 08 4d 01 00 00 00 09 81 01 00 00 00 0a 43     ...M...........C
     1eb:	01 31 01 03 0d 24 01 f4 00 08 15 88 01 00 00 00     .1...$..........
     1fb:	17 e6 00 00 00 00 00 68 01 00 00 00                 .......h....

00000207 <sampleMenu_2>:
     207:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

00000214 <sampleMenu_List_1>:
     214:	02 bd 01 00 00 00 03 b4 01 00 00 00 00 68 01 00     .............h..
	...

00000226 <sampleMenu_1>:
     226:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

00000234 <port_to_mode_PGM>:
     234:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000023e <digital_pin_to_timer_PGM>:
     23e:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     24e:	00 00 00 00 00 00 00                                .......

00000255 <configMenu_Root>:
     255:	19 76 01 00 00 00 18 6d 01 00 00 00 00 c6 01 00     .v.....m........
	...

00000267 <normalMenu_Root>:
     267:	02 bd 01 00 00 00 03 b4 01 00 00 00 05 a3 01 00     ................
     277:	00 00 06 94 01 00 00 00 15 88 01 00 00 00 09 81     ................
     287:	01 00 00 00 00 c6 01 00 00 00                       ..........

00000291 <sampleMenu_Root>:
     291:	01 26 02 14 02 03 04 07 02 cb 01 0a 00 c6 01 00     .&..............
	...

000002a3 <setup::__c>:
     2a3:	45 52 52 20 30 33 00                                ERR 03.

000002aa <setup::__c>:
     2aa:	45 52 52 20 30 32 00                                ERR 02.

000002b1 <setup::__c>:
     2b1:	45 52 52 20 30 31 00                                ERR 01.

000002b8 <setup::__c>:
     2b8:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

000002c9 <setup::__c>:
     2c9:	51 54 52 4f 4e 00                                   QTRON.

000002cf <processMenuCommand(unsigned char)::__c>:
     2cf:	20 20 00                                              .

000002d2 <processMenuCommand(unsigned char)::__c>:
     2d2:	20 20 00                                              .

000002d5 <loop::__c>:
     2d5:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

000002e6 <daysInMonth>:
     2e6:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000002f1 <port_to_input_PGM>:
     2f1:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002fb <port_to_output_PGM>:
     2fb:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000305 <digital_pin_to_port_PGM>:
     305:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     315:	03 03 03 03 02 02 03                                .......

0000031c <digital_pin_to_bit_mask_PGM>:
     31c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     32c:	04 08 10 20 40 80 40 00                             ... @.@.

00000334 <__ctors_start>:
__ctors_start():
     334:	7c 10       	cpse	r7, r12

00000336 <__ctors_end>:
__dtors_start():
     336:	6c 1e       	adc	r6, r28

00000338 <__dtors_end>:
__dtors_end():
     338:	11 24       	eor	r1, r1
     33a:	1f be       	out	0x3f, r1	; 63
     33c:	cf ef       	ldi	r28, 0xFF	; 255
     33e:	d8 e0       	ldi	r29, 0x08	; 8
     340:	de bf       	out	0x3e, r29	; 62
     342:	cd bf       	out	0x3d, r28	; 61

00000344 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     344:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     346:	ac e3       	ldi	r26, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     348:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     34a:	01 c0       	rjmp	.+2      	; 0x34e <.do_clear_bss_start>

0000034c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     34c:	1d 92       	st	X+, r1

0000034e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     34e:	a4 3c       	cpi	r26, 0xC4	; 196
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     350:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     352:	e1 f7       	brne	.-8      	; 0x34c <.do_clear_bss_loop>

00000354 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     354:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     356:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     358:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     35a:	ea ec       	ldi	r30, 0xCA	; 202
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     35c:	f3 e4       	ldi	r31, 0x43	; 67
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     35e:	02 c0       	rjmp	.+4      	; 0x364 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     360:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     362:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     364:	ac 33       	cpi	r26, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     366:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     368:	d9 f7       	brne	.-10     	; 0x360 <__do_copy_data+0xc>

0000036a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     36a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     36c:	cb e9       	ldi	r28, 0x9B	; 155
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     36e:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     370:	04 c0       	rjmp	.+8      	; 0x37a <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     372:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     374:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     376:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     37a:	ca 39       	cpi	r28, 0x9A	; 154
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     37c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     37e:	c9 f7       	brne	.-14     	; 0x372 <__do_global_ctors+0x8>
     380:	0e 94 91 11 	call	0x2322	; 0x2322 <main>
     384:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__do_global_dtors>

00000388 <__bad_interrupt>:
__vector_22():
     388:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038c <MenuManager::currentItemHasChildren() [clone .constprop.86]>:
currentItemHasChildren():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     38c:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x6>
     390:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <Menu1+0x3>
     394:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <Menu1+0x4>
     398:	96 e0       	ldi	r25, 0x06	; 6
     39a:	89 9f       	mul	r24, r25
     39c:	e0 0d       	add	r30, r0
     39e:	f1 1d       	adc	r31, r1
     3a0:	11 24       	eor	r1, r1
     3a2:	35 96       	adiw	r30, 0x05	; 5
     3a4:	e4 91       	lpm	r30, Z
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	e1 11       	cpse	r30, r1
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <MenuManager::currentItemHasChildren() [clone .constprop.86]+0x22>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:116
}
     3ae:	08 95       	ret

000003b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>:
getCurrentItemCmdId():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     3b0:	e9 ef       	ldi	r30, 0xF9	; 249
     3b2:	f3 e0       	ldi	r31, 0x03	; 3
     3b4:	86 81       	ldd	r24, Z+6	; 0x06
     3b6:	03 80       	ldd	r0, Z+3	; 0x03
     3b8:	f4 81       	ldd	r31, Z+4	; 0x04
     3ba:	e0 2d       	mov	r30, r0
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	89 9f       	mul	r24, r25
     3c0:	e0 0d       	add	r30, r0
     3c2:	f1 1d       	adc	r31, r1
     3c4:	11 24       	eor	r1, r1
     3c6:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:60
}
     3c8:	08 95       	ret

000003ca <TwoWire::endTransmission() [clone .constprop.76]>:
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     3ca:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     3d0:	21 32       	cpi	r18, 0x21	; 33
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <TwoWire::endTransmission() [clone .constprop.76]+0xc>
     3d4:	44 c0       	rjmp	.+136    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     3d6:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_state>
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <TwoWire::endTransmission() [clone .constprop.76]+0xc>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     3de:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     3ee:	9f ef       	ldi	r25, 0xFF	; 255
     3f0:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     3f4:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     3f8:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <twi_masterBufferLength>
     3fc:	a5 eb       	ldi	r26, 0xB5	; 181
     3fe:	b3 e0       	ldi	r27, 0x03	; 3
     400:	ee e8       	ldi	r30, 0x8E	; 142
     402:	f3 e0       	ldi	r31, 0x03	; 3
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     404:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     406:	29 13       	cpse	r18, r25
     408:	31 c0       	rjmp	.+98     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     40a:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     40e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <twi_slarw>
     412:	88 0f       	add	r24, r24
     414:	89 2b       	or	r24, r25
     416:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     41a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_inRepStart>
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	49 f5       	brne	.+82     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     422:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     426:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <twi_slarw>
     42a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     42e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     432:	83 fd       	sbrc	r24, 3
     434:	f8 cf       	rjmp	.-16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     436:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     43c:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_state>
     440:	82 30       	cpi	r24, 0x02	; 2
     442:	e1 f3       	breq	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     444:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_error>
     448:	8f 3f       	cpi	r24, 0xFF	; 255
     44a:	b1 f0       	breq	.+44     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     44c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_error>
     450:	80 32       	cpi	r24, 0x20	; 32
     452:	a1 f0       	breq	.+40     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     454:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_error>
     458:	80 33       	cpi	r24, 0x30	; 48
     45a:	91 f0       	breq	.+36     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     45c:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     45e:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     462:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     466:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:191
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     46a:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     46c:	3d 91       	ld	r19, X+
     46e:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     470:	9f 5f       	subi	r25, 0xFF	; 255
     472:	c9 cf       	rjmp	.-110    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     474:	85 ee       	ldi	r24, 0xE5	; 229
     476:	e0 cf       	rjmp	.-64     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	f1 cf       	rjmp	.-30     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	ef cf       	rjmp	.-34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	ed cf       	rjmp	.-38     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>

00000484 <TwoWire::onRequestService()>:
onRequestService():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     484:	08 95       	ret

00000486 <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     486:	08 95       	ret

00000488 <DateTime::dayOfTheWeek() const [clone .constprop.15]>:
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:578
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     488:	60 91 6a 04 	lds	r22, 0x046A	; 0x80046a <bell+0x1>
     48c:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <bell>
     490:	49 2f       	mov	r20, r25
     492:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:134
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     494:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <bell+0x2>
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	e6 ee       	ldi	r30, 0xE6	; 230
     49e:	f2 e0       	ldi	r31, 0x02	; 2
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:135
  for (uint8_t i = 1; i < m; ++i)
     4a0:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     4a2:	86 17       	cp	r24, r22
     4a4:	30 f4       	brcc	.+12     	; 0x4b2 <DateTime::dayOfTheWeek() const [clone .constprop.15]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:136
    days += pgm_read_byte(daysInMonth + i - 1);
     4a6:	74 91       	lpm	r23, Z
     4a8:	27 0f       	add	r18, r23
     4aa:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:135
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	f8 cf       	rjmp	.-16     	; 0x4a2 <DateTime::dayOfTheWeek() const [clone .constprop.15]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:137
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     4b2:	63 30       	cpi	r22, 0x03	; 3
     4b4:	20 f0       	brcs	.+8      	; 0x4be <DateTime::dayOfTheWeek() const [clone .constprop.15]+0x36>
     4b6:	93 70       	andi	r25, 0x03	; 3
     4b8:	11 f4       	brne	.+4      	; 0x4be <DateTime::dayOfTheWeek() const [clone .constprop.15]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:138
    ++days;
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:139
  return days + 365 * y + (y + 3) / 4 - 1;
     4be:	6d e6       	ldi	r22, 0x6D	; 109
     4c0:	71 e0       	ldi	r23, 0x01	; 1
     4c2:	46 9f       	mul	r20, r22
     4c4:	c0 01       	movw	r24, r0
     4c6:	47 9f       	mul	r20, r23
     4c8:	90 0d       	add	r25, r0
     4ca:	56 9f       	mul	r21, r22
     4cc:	90 0d       	add	r25, r0
     4ce:	11 24       	eor	r1, r1
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:579
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     4d0:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:139
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     4d2:	4d 5f       	subi	r20, 0xFD	; 253
     4d4:	5f 4f       	sbci	r21, 0xFF	; 255
     4d6:	56 95       	lsr	r21
     4d8:	47 95       	ror	r20
     4da:	56 95       	lsr	r21
     4dc:	47 95       	ror	r20
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:579
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     4de:	84 0f       	add	r24, r20
     4e0:	95 1f       	adc	r25, r21
     4e2:	82 0f       	add	r24, r18
     4e4:	93 1f       	adc	r25, r19
     4e6:	67 e0       	ldi	r22, 0x07	; 7
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:580
}
     4ee:	08 95       	ret

000004f0 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	6c 01       	movw	r12, r24
     506:	7b 01       	movw	r14, r22
     508:	8b 01       	movw	r16, r22
     50a:	04 0f       	add	r16, r20
     50c:	15 1f       	adc	r17, r21
     50e:	eb 01       	movw	r28, r22
     510:	5e 01       	movw	r10, r28
     512:	ae 18       	sub	r10, r14
     514:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     516:	c0 17       	cp	r28, r16
     518:	d1 07       	cpc	r29, r17
     51a:	59 f0       	breq	.+22     	; 0x532 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     51c:	69 91       	ld	r22, Y+
     51e:	d6 01       	movw	r26, r12
     520:	ed 91       	ld	r30, X+
     522:	fc 91       	ld	r31, X
     524:	01 90       	ld	r0, Z+
     526:	f0 81       	ld	r31, Z
     528:	e0 2d       	mov	r30, r0
     52a:	c6 01       	movw	r24, r12
     52c:	09 95       	icall
     52e:	89 2b       	or	r24, r25
     530:	79 f7       	brne	.-34     	; 0x510 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     532:	c5 01       	movw	r24, r10
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	bf 90       	pop	r11
     546:	af 90       	pop	r10
     548:	08 95       	ret

0000054a <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     54a:	84 30       	cpi	r24, 0x04	; 4
     54c:	81 f0       	breq	.+32     	; 0x56e <turnOffPWM+0x24>
     54e:	28 f4       	brcc	.+10     	; 0x55a <turnOffPWM+0x10>
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	e9 f0       	breq	.+58     	; 0x58e <turnOffPWM+0x44>
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	f9 f0       	breq	.+62     	; 0x596 <turnOffPWM+0x4c>
     558:	08 95       	ret
     55a:	88 30       	cpi	r24, 0x08	; 8
     55c:	71 f0       	breq	.+28     	; 0x57a <turnOffPWM+0x30>
     55e:	89 30       	cpi	r24, 0x09	; 9
     560:	91 f0       	breq	.+36     	; 0x586 <turnOffPWM+0x3c>
     562:	85 30       	cpi	r24, 0x05	; 5
     564:	b9 f4       	brne	.+46     	; 0x594 <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     566:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     56a:	8f 7d       	andi	r24, 0xDF	; 223
     56c:	03 c0       	rjmp	.+6      	; 0x574 <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     56e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     572:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     574:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     578:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     57a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     57e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     580:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     584:	08 95       	ret
     586:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     58a:	8f 7d       	andi	r24, 0xDF	; 223
     58c:	f9 cf       	rjmp	.-14     	; 0x580 <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     58e:	84 b5       	in	r24, 0x24	; 36
     590:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     592:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     594:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     596:	84 b5       	in	r24, 0x24	; 36
     598:	8f 7d       	andi	r24, 0xDF	; 223
     59a:	fb cf       	rjmp	.-10     	; 0x592 <turnOffPWM+0x48>

0000059c <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	e2 5c       	subi	r30, 0xC2	; 194
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253
     5aa:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     5ac:	f9 01       	movw	r30, r18
     5ae:	e4 5e       	subi	r30, 0xE4	; 228
     5b0:	fc 4f       	sbci	r31, 0xFC	; 252
     5b2:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     5b4:	f9 01       	movw	r30, r18
     5b6:	eb 5f       	subi	r30, 0xFB	; 251
     5b8:	fc 4f       	sbci	r31, 0xFC	; 252
     5ba:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     5bc:	cc 23       	and	r28, r28
     5be:	a1 f0       	breq	.+40     	; 0x5e8 <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5c0:	81 11       	cpse	r24, r1
     5c2:	0e 94 a5 02 	call	0x54a	; 0x54a <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     5c6:	ec 2f       	mov	r30, r28
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	ee 0f       	add	r30, r30
     5cc:	ff 1f       	adc	r31, r31
     5ce:	ef 50       	subi	r30, 0x0F	; 15
     5d0:	fd 4f       	sbci	r31, 0xFD	; 253
     5d2:	a5 91       	lpm	r26, Z+
     5d4:	b4 91       	lpm	r27, Z
     5d6:	ec 91       	ld	r30, X
     5d8:	ed 23       	and	r30, r29
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	09 f4       	brne	.+2      	; 0x5e2 <digitalRead+0x46>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fa cf       	rjmp	.-12     	; 0x5e2 <digitalRead+0x46>

000005ee <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	f9 01       	movw	r30, r18
     5fa:	e2 5c       	subi	r30, 0xC2	; 194
     5fc:	fd 4f       	sbci	r31, 0xFD	; 253
     5fe:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     600:	f9 01       	movw	r30, r18
     602:	e4 5e       	subi	r30, 0xE4	; 228
     604:	fc 4f       	sbci	r31, 0xFC	; 252
     606:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     608:	f9 01       	movw	r30, r18
     60a:	eb 5f       	subi	r30, 0xFB	; 251
     60c:	fc 4f       	sbci	r31, 0xFC	; 252
     60e:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     610:	cc 23       	and	r28, r28
     612:	a9 f0       	breq	.+42     	; 0x63e <digitalWrite+0x50>
     614:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     616:	81 11       	cpse	r24, r1
     618:	0e 94 a5 02 	call	0x54a	; 0x54a <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     61c:	ec 2f       	mov	r30, r28
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	e5 50       	subi	r30, 0x05	; 5
     626:	fd 4f       	sbci	r31, 0xFD	; 253
     628:	a5 91       	lpm	r26, Z+
     62a:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     62c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     62e:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     630:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     632:	11 11       	cpse	r17, r1
     634:	08 c0       	rjmp	.+16     	; 0x646 <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     636:	d0 95       	com	r29
     638:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     63a:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     63c:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     646:	de 2b       	or	r29, r30
     648:	f8 cf       	rjmp	.-16     	; 0x63a <digitalWrite+0x4c>

0000064a <TwoWire::begin() [clone .constprop.31]>:
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     64a:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     64e:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     652:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     656:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     65a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     664:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	82 e1       	ldi	r24, 0x12	; 18
     66c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	83 e1       	ldi	r24, 0x13	; 19
     674:	0e 94 f7 02 	call	0x5ee	; 0x5ee <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     678:	e9 eb       	ldi	r30, 0xB9	; 185
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	8e 7f       	andi	r24, 0xFE	; 254
     680:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     682:	80 81       	ld	r24, Z
     684:	8d 7f       	andi	r24, 0xFD	; 253
     686:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     688:	88 e4       	ldi	r24, 0x48	; 72
     68a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     68e:	85 e4       	ldi	r24, 0x45	; 69
     690:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     694:	82 e4       	ldi	r24, 0x42	; 66
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <twi_onSlaveTransmit+0x1>
     69c:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     6a0:	83 e4       	ldi	r24, 0x43	; 67
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <twi_onSlaveReceive+0x1>
     6a8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_onSlaveReceive>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     6ac:	08 95       	ret

000006ae <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	fc 01       	movw	r30, r24
     6b6:	e4 5e       	subi	r30, 0xE4	; 228
     6b8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ba:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     6bc:	8b 5f       	subi	r24, 0xFB	; 251
     6be:	9c 4f       	sbci	r25, 0xFC	; 252
     6c0:	fc 01       	movw	r30, r24
     6c2:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     6c4:	88 23       	and	r24, r24
     6c6:	c9 f0       	breq	.+50     	; 0x6fa <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	fc 01       	movw	r30, r24
     6d0:	ec 5c       	subi	r30, 0xCC	; 204
     6d2:	fd 4f       	sbci	r31, 0xFD	; 253
     6d4:	a5 91       	lpm	r26, Z+
     6d6:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     6d8:	fc 01       	movw	r30, r24
     6da:	e5 50       	subi	r30, 0x05	; 5
     6dc:	fd 4f       	sbci	r31, 0xFD	; 253
     6de:	c5 91       	lpm	r28, Z+
     6e0:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     6e2:	61 11       	cpse	r22, r1
     6e4:	0d c0       	rjmp	.+26     	; 0x700 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     6e6:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     6e8:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     6ea:	8c 91       	ld	r24, X
     6ec:	20 95       	com	r18
     6ee:	82 23       	and	r24, r18
     6f0:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     6f2:	88 81       	ld	r24, Y
     6f4:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     6f6:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     6f8:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     700:	62 30       	cpi	r22, 0x02	; 2
     702:	51 f4       	brne	.+20     	; 0x718 <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     704:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     706:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     708:	3c 91       	ld	r19, X
     70a:	82 2f       	mov	r24, r18
     70c:	80 95       	com	r24
     70e:	83 23       	and	r24, r19
     710:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     712:	e8 81       	ld	r30, Y
     714:	2e 2b       	or	r18, r30
     716:	ef cf       	rjmp	.-34     	; 0x6f6 <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     718:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     71a:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     71c:	ec 91       	ld	r30, X
     71e:	2e 2b       	or	r18, r30
     720:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     722:	8f bf       	out	0x3f, r24	; 63
     724:	ea cf       	rjmp	.-44     	; 0x6fa <pinMode+0x4c>

00000726 <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	91 05       	cpc	r25, r1
     72a:	39 f0       	breq	.+14     	; 0x73a <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     734:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     73a:	08 95       	ret

0000073c <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     73c:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     73e:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     740:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_overflow_count>
     744:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x1>
     748:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x2>
     74c:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     750:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     752:	a8 9b       	sbis	0x15, 0	; 21
     754:	05 c0       	rjmp	.+10     	; 0x760 <micros+0x24>
     756:	2f 3f       	cpi	r18, 0xFF	; 255
     758:	19 f0       	breq	.+6      	; 0x760 <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	a1 1d       	adc	r26, r1
     75e:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     760:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     762:	ba 2f       	mov	r27, r26
     764:	a9 2f       	mov	r26, r25
     766:	98 2f       	mov	r25, r24
     768:	88 27       	eor	r24, r24
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	62 0f       	add	r22, r18
     770:	71 1d       	adc	r23, r1
     772:	81 1d       	adc	r24, r1
     774:	91 1d       	adc	r25, r1
     776:	42 e0       	ldi	r20, 0x02	; 2
     778:	66 0f       	add	r22, r22
     77a:	77 1f       	adc	r23, r23
     77c:	88 1f       	adc	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	4a 95       	dec	r20
     782:	d1 f7       	brne	.-12     	; 0x778 <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     784:	08 95       	ret

00000786 <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     786:	8f 92       	push	r8
     788:	9f 92       	push	r9
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     79a:	0e 94 9e 03 	call	0x73c	; 0x73c <micros>
     79e:	4b 01       	movw	r8, r22
     7a0:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     7a2:	c1 14       	cp	r12, r1
     7a4:	d1 04       	cpc	r13, r1
     7a6:	e1 04       	cpc	r14, r1
     7a8:	f1 04       	cpc	r15, r1
     7aa:	b9 f0       	breq	.+46     	; 0x7da <delay+0x54>
     7ac:	0e 94 9e 03 	call	0x73c	; 0x73c <micros>
     7b0:	68 19       	sub	r22, r8
     7b2:	79 09       	sbc	r23, r9
     7b4:	8a 09       	sbc	r24, r10
     7b6:	9b 09       	sbc	r25, r11
     7b8:	68 3e       	cpi	r22, 0xE8	; 232
     7ba:	73 40       	sbci	r23, 0x03	; 3
     7bc:	81 05       	cpc	r24, r1
     7be:	91 05       	cpc	r25, r1
     7c0:	80 f3       	brcs	.-32     	; 0x7a2 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	c2 1a       	sub	r12, r18
     7c6:	d1 08       	sbc	r13, r1
     7c8:	e1 08       	sbc	r14, r1
     7ca:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     7cc:	88 ee       	ldi	r24, 0xE8	; 232
     7ce:	88 0e       	add	r8, r24
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	98 1e       	adc	r9, r24
     7d4:	a1 1c       	adc	r10, r1
     7d6:	b1 1c       	adc	r11, r1
     7d8:	e4 cf       	rjmp	.-56     	; 0x7a2 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	9f 90       	pop	r9
     7e8:	8f 90       	pop	r8
     7ea:	08 95       	ret

000007ec <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7ec:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7ee:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7f0:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <timer0_millis>
     7f4:	70 91 c2 02 	lds	r23, 0x02C2	; 0x8002c2 <timer0_millis+0x1>
     7f8:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <timer0_millis+0x2>
     7fc:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     800:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     802:	08 95       	ret

00000804 <DFRobotDFPlayerMini::available() [clone .constprop.48]>:
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     808:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <myDFPlayer>
     80c:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <myDFPlayer+0x1>
     810:	dc 01       	movw	r26, r24
     812:	ed 91       	ld	r30, X+
     814:	fc 91       	ld	r31, X
     816:	00 84       	ldd	r0, Z+8	; 0x08
     818:	f1 85       	ldd	r31, Z+9	; 0x09
     81a:	e0 2d       	mov	r30, r0
     81c:	09 95       	icall
     81e:	89 2b       	or	r24, r25
     820:	09 f4       	brne	.+2      	; 0x824 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x20>
     822:	d7 c0       	rjmp	.+430    	; 0x9d2 <__stack+0xd3>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	cb 01       	movw	r24, r22
     82a:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     82e:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <myDFPlayer+0x1e>
     832:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <myDFPlayer>
     836:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     83a:	dc 01       	movw	r26, r24
     83c:	ed 91       	ld	r30, X+
     83e:	fc 91       	ld	r31, X
     840:	02 84       	ldd	r0, Z+10	; 0x0a
     842:	f3 85       	ldd	r31, Z+11	; 0x0b
     844:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     846:	21 11       	cpse	r18, r1
     848:	0b c0       	rjmp	.+22     	; 0x860 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x5c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     84a:	09 95       	icall
     84c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     850:	8e 37       	cpi	r24, 0x7E	; 126
     852:	d1 f6       	brne	.-76     	; 0x808 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     854:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <myDFPlayer+0x1e>
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <myDFPlayer+0x1e>
     85e:	d4 cf       	rjmp	.-88     	; 0x808 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     860:	09 95       	icall
     862:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <myDFPlayer+0x1e>
     866:	e9 2f       	mov	r30, r25
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	e5 58       	subi	r30, 0x85	; 133
     86c:	fb 4f       	sbci	r31, 0xFB	; 251
     86e:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     870:	92 30       	cpi	r25, 0x02	; 2
     872:	b9 f0       	breq	.+46     	; 0x8a2 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x9e>
     874:	99 30       	cpi	r25, 0x09	; 9
     876:	d9 f0       	breq	.+54     	; 0x8ae <DFRobotDFPlayerMini::available() [clone .constprop.48]+0xaa>
     878:	91 30       	cpi	r25, 0x01	; 1
     87a:	a9 f4       	brne	.+42     	; 0x8a6 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0xa2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     87c:	8f 3f       	cpi	r24, 0xFF	; 255
     87e:	99 f0       	breq	.+38     	; 0x8a6 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0xa2>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     880:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     88a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <myDFPlayer+0x23>
     88e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     892:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     896:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <myDFPlayer+0x25>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     89a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     8a2:	86 30       	cpi	r24, 0x06	; 6
     8a4:	69 f7       	brne	.-38     	; 0x880 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     8a6:	9f 5f       	subi	r25, 0xFF	; 255
     8a8:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <myDFPlayer+0x1e>
     8ac:	ad cf       	rjmp	.-166    	; 0x808 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     8ae:	8f 3e       	cpi	r24, 0xEF	; 239
     8b0:	39 f7       	brne	.-50     	; 0x880 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x7c>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     8b2:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <myDFPlayer+0xc>
     8b6:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <myDFPlayer+0xb>
     8ba:	28 0f       	add	r18, r24
     8bc:	33 27       	eor	r19, r19
     8be:	33 1f       	adc	r19, r19
     8c0:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <myDFPlayer+0xd>
     8c4:	c9 01       	movw	r24, r18
     8c6:	8e 0f       	add	r24, r30
     8c8:	91 1d       	adc	r25, r1
     8ca:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <myDFPlayer+0xe>
     8ce:	28 0f       	add	r18, r24
     8d0:	39 2f       	mov	r19, r25
     8d2:	31 1d       	adc	r19, r1
     8d4:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <myDFPlayer+0xf>
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	24 0f       	add	r18, r20
     8dc:	35 1f       	adc	r19, r21
     8de:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <myDFPlayer+0x10>
     8e2:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     8e4:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <myDFPlayer+0x11>
     8e8:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     8ea:	76 2f       	mov	r23, r22
     8ec:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8ee:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <myDFPlayer+0x12>
     8f2:	6f 0f       	add	r22, r31
     8f4:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     8f6:	28 0f       	add	r18, r24
     8f8:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     8fa:	31 95       	neg	r19
     8fc:	21 95       	neg	r18
     8fe:	31 09       	sbc	r19, r1
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     900:	62 17       	cp	r22, r18
     902:	73 07       	cpc	r23, r19
     904:	09 f0       	breq	.+2      	; 0x908 <__stack+0x9>
     906:	bc cf       	rjmp	.-136    	; 0x880 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     908:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     90c:	e1 34       	cpi	r30, 0x41	; 65
     90e:	19 f4       	brne	.+6      	; 0x916 <__stack+0x17>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     910:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <myDFPlayer+0x25>
     914:	2f c0       	rjmp	.+94     	; 0x974 <__stack+0x75>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     916:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     91a:	54 2f       	mov	r21, r20
     91c:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     91e:	84 0f       	add	r24, r20
     920:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     922:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <myDFPlayer+0x23>
     926:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     92a:	ea 53       	subi	r30, 0x3A	; 58
     92c:	e6 31       	cpi	r30, 0x16	; 22
     92e:	08 f0       	brcs	.+2      	; 0x932 <__stack+0x33>
     930:	46 c0       	rjmp	.+140    	; 0x9be <__stack+0xbf>
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e2 56       	subi	r30, 0x62	; 98
     936:	fb 4f       	sbci	r31, 0xFB	; 251
     938:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__tablejump2__>
     93c:	cb 04       	cpc	r12, r11
     93e:	d3 04       	cpc	r13, r3
     940:	dd 04       	cpc	r13, r13
     942:	b4 04       	cpc	r11, r4
     944:	dd 04       	cpc	r13, r13
     946:	bd 04       	cpc	r11, r13
     948:	db 04       	cpc	r13, r11
     94a:	df 04       	cpc	r13, r15
     94c:	dd 04       	cpc	r13, r13
     94e:	dd 04       	cpc	r13, r13
     950:	dd 04       	cpc	r13, r13
     952:	dd 04       	cpc	r13, r13
     954:	dd 04       	cpc	r13, r13
     956:	dd 04       	cpc	r13, r13
     958:	dd 04       	cpc	r13, r13
     95a:	dd 04       	cpc	r13, r13
     95c:	df 04       	cpc	r13, r15
     95e:	dd 04       	cpc	r13, r13
     960:	dd 04       	cpc	r13, r13
     962:	dd 04       	cpc	r13, r13
     964:	dd 04       	cpc	r13, r13
     966:	dd 04       	cpc	r13, r13
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x24>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     974:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <myDFPlayer+0x24>
     978:	91 cf       	rjmp	.-222    	; 0x89c <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x98>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     97a:	80 ff       	sbrs	r24, 0
     97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     97e:	89 e0       	ldi	r24, 0x09	; 9
     980:	f4 cf       	rjmp	.-24     	; 0x96a <__stack+0x6b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     982:	81 ff       	sbrs	r24, 1
     984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x8b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	f0 cf       	rjmp	.-32     	; 0x96a <__stack+0x6b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     98a:	83 70       	andi	r24, 0x03	; 3
     98c:	99 27       	eor	r25, r25
     98e:	89 2b       	or	r24, r25
     990:	89 f3       	breq	.-30     	; 0x974 <__stack+0x75>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	ea cf       	rjmp	.-44     	; 0x96a <__stack+0x6b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     996:	80 ff       	sbrs	r24, 0
     998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     99a:	87 e0       	ldi	r24, 0x07	; 7
     99c:	e6 cf       	rjmp	.-52     	; 0x96a <__stack+0x6b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     99e:	81 ff       	sbrs	r24, 1
     9a0:	e9 cf       	rjmp	.-46     	; 0x974 <__stack+0x75>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	e2 cf       	rjmp	.-60     	; 0x96a <__stack+0x6b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     9a6:	80 ff       	sbrs	r24, 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	de cf       	rjmp	.-68     	; 0x96a <__stack+0x6b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     9ae:	81 ff       	sbrs	r24, 1
     9b0:	e1 cf       	rjmp	.-62     	; 0x974 <__stack+0x75>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	da cf       	rjmp	.-76     	; 0x96a <__stack+0x6b>
     9b6:	86 e0       	ldi	r24, 0x06	; 6
     9b8:	d8 cf       	rjmp	.-80     	; 0x96a <__stack+0x6b>
     9ba:	8b e0       	ldi	r24, 0x0B	; 11
     9bc:	d6 cf       	rjmp	.-84     	; 0x96a <__stack+0x6b>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     9c4:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <myDFPlayer+0x23>
     9c8:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     9cc:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <myDFPlayer+0x24>
     9d0:	9f cf       	rjmp	.-194    	; 0x910 <__stack+0x11>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     9d2:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <myDFPlayer+0x25>
     9d6:	88 23       	and	r24, r24
     9d8:	69 f2       	breq	.-102    	; 0x974 <__stack+0x75>
     9da:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
     9de:	00 91 7d 04 	lds	r16, 0x047D	; 0x80047d <myDFPlayer+0x2>
     9e2:	10 91 7e 04 	lds	r17, 0x047E	; 0x80047e <myDFPlayer+0x3>
     9e6:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <myDFPlayer+0x4>
     9ea:	30 91 80 04 	lds	r19, 0x0480	; 0x800480 <myDFPlayer+0x5>
     9ee:	60 1b       	sub	r22, r16
     9f0:	71 0b       	sbc	r23, r17
     9f2:	82 0b       	sbc	r24, r18
     9f4:	93 0b       	sbc	r25, r19
     9f6:	00 91 81 04 	lds	r16, 0x0481	; 0x800481 <myDFPlayer+0x6>
     9fa:	10 91 82 04 	lds	r17, 0x0482	; 0x800482 <myDFPlayer+0x7>
     9fe:	20 91 83 04 	lds	r18, 0x0483	; 0x800483 <myDFPlayer+0x8>
     a02:	30 91 84 04 	lds	r19, 0x0484	; 0x800484 <myDFPlayer+0x9>
     a06:	60 17       	cp	r22, r16
     a08:	71 07       	cpc	r23, r17
     a0a:	82 07       	cpc	r24, r18
     a0c:	93 07       	cpc	r25, r19
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <__stack+0x113>
     a10:	b1 cf       	rjmp	.-158    	; 0x974 <__stack+0x75>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     a12:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     a16:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     a1a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <myDFPlayer+0x23>
     a1e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	36 cf       	rjmp	.-404    	; 0x892 <DFRobotDFPlayerMini::available() [clone .constprop.48]+0x8e>

00000a26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>:
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     a26:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     a2a:	27 2f       	mov	r18, r23
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     a32:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     a36:	40 91 91 04 	lds	r20, 0x0491	; 0x800491 <myDFPlayer+0x16>
     a3a:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <myDFPlayer+0x15>
     a3e:	49 0f       	add	r20, r25
     a40:	55 27       	eor	r21, r21
     a42:	55 1f       	adc	r21, r21
     a44:	84 0f       	add	r24, r20
     a46:	95 2f       	mov	r25, r21
     a48:	91 1d       	adc	r25, r1
     a4a:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <myDFPlayer+0x18>
     a4e:	84 0f       	add	r24, r20
     a50:	91 1d       	adc	r25, r1
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	68 0f       	add	r22, r24
     a58:	79 2f       	mov	r23, r25
     a5a:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     a5c:	71 95       	neg	r23
     a5e:	61 95       	neg	r22
     a60:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     a62:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     a66:	60 93 97 04 	sts	0x0497, r22	; 0x800497 <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     a6a:	44 23       	and	r20, r20
     a6c:	61 f0       	breq	.+24     	; 0xa86 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     a6e:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <myDFPlayer+0x25>
     a72:	88 23       	and	r24, r24
     a74:	41 f0       	breq	.+16     	; 0xa86 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	cb 01       	movw	r24, r22
     a7c:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     a80:	0e 94 02 04 	call	0x804	; 0x804 <DFRobotDFPlayerMini::available() [clone .constprop.48]>
     a84:	f4 cf       	rjmp	.-24     	; 0xa6e <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     a86:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <myDFPlayer>
     a8a:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <myDFPlayer+0x1>
     a8e:	dc 01       	movw	r26, r24
     a90:	ed 91       	ld	r30, X+
     a92:	fc 91       	ld	r31, X
     a94:	02 80       	ldd	r0, Z+2	; 0x02
     a96:	f3 81       	ldd	r31, Z+3	; 0x03
     a98:	e0 2d       	mov	r30, r0
     a9a:	4a e0       	ldi	r20, 0x0A	; 10
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	6f e8       	ldi	r22, 0x8F	; 143
     aa0:	74 e0       	ldi	r23, 0x04	; 4
     aa2:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     aa4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
     aa8:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <myDFPlayer+0x2>
     aac:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <myDFPlayer+0x3>
     ab0:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <myDFPlayer+0x4>
     ab4:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     ab8:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <myDFPlayer+0x18>
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	81 11       	cpse	r24, r1
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]+0x9e>
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     ac8:	81 11       	cpse	r24, r1
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     acc:	6a e0       	ldi	r22, 0x0A	; 10
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0c 94 c3 03 	jmp	0x786	; 0x786 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     ad8:	08 95       	ret

00000ada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>:
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     ada:	78 2f       	mov	r23, r24
     adc:	8f e0       	ldi	r24, 0x0F	; 15
     ade:	0c 94 13 05 	jmp	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>

00000ae2 <Print::flush()>:
flush():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     ae2:	08 95       	ret

00000ae4 <SoftwareSerial::peek()>:
peek():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     ae4:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <SoftwareSerial::active_object>
     ae8:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <SoftwareSerial::active_object+0x1>
     aec:	28 17       	cp	r18, r24
     aee:	39 07       	cpc	r19, r25
     af0:	71 f4       	brne	.+28     	; 0xb0e <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     af2:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
     af6:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
     afa:	98 17       	cp	r25, r24
     afc:	41 f0       	breq	.+16     	; 0xb0e <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     afe:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	e0 58       	subi	r30, 0x80	; 128
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	80 81       	ld	r24, Z
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     b12:	08 95       	ret

00000b14 <SoftwareSerial::flush()>:
flush():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     b14:	08 95       	ret

00000b16 <SoftwareSerial::write(unsigned char)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     b24:	5c 96       	adiw	r26, 0x1c	; 28
     b26:	ed 90       	ld	r14, X+
     b28:	fc 90       	ld	r15, X
     b2a:	5d 97       	sbiw	r26, 0x1d	; 29
     b2c:	e1 14       	cp	r14, r1
     b2e:	f1 04       	cpc	r15, r1
     b30:	79 f4       	brne	.+30     	; 0xb50 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	9c 93       	st	X, r25
     b3a:	8e 93       	st	-X, r24
     b3c:	12 97       	sbiw	r26, 0x02	; 2
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     b50:	51 96       	adiw	r26, 0x11	; 17
     b52:	ed 91       	ld	r30, X+
     b54:	fc 91       	ld	r31, X
     b56:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     b58:	50 96       	adiw	r26, 0x10	; 16
     b5a:	8c 91       	ld	r24, X
     b5c:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     b5e:	98 2f       	mov	r25, r24
     b60:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     b62:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     b64:	5e 96       	adiw	r26, 0x1e	; 30
     b66:	2c 91       	ld	r18, X
     b68:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     b6a:	12 2f       	mov	r17, r18
     b6c:	12 70       	andi	r17, 0x02	; 2
     b6e:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     b70:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     b72:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     b74:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     b76:	11 23       	and	r17, r17
     b78:	19 f1       	breq	.+70     	; 0xbc0 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     b7a:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     b7c:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b7e:	e7 01       	movw	r28, r14
     b80:	21 97       	sbiw	r28, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <SoftwareSerial::write(unsigned char)+0x6a>
     b84:	28 e0       	ldi	r18, 0x08	; 8
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b86:	46 2f       	mov	r20, r22
     b88:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b8a:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b8c:	60 ff       	sbrs	r22, 0
     b8e:	1a c0       	rjmp	.+52     	; 0xbc4 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b90:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     b92:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b94:	e7 01       	movw	r28, r14
     b96:	21 97       	sbiw	r28, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <SoftwareSerial::write(unsigned char)+0x80>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     b9a:	ba 01       	movw	r22, r20
     b9c:	75 95       	asr	r23
     b9e:	67 95       	ror	r22
     ba0:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     ba2:	89 f7       	brne	.-30     	; 0xb86 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     ba4:	11 23       	and	r17, r17
     ba6:	81 f0       	breq	.+32     	; 0xbc8 <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     ba8:	80 81       	ld	r24, Z
     baa:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     bac:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     bae:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     bb0:	5c 96       	adiw	r26, 0x1c	; 28
     bb2:	8d 91       	ld	r24, X+
     bb4:	9c 91       	ld	r25, X
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <SoftwareSerial::write(unsigned char)+0xa0>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	c1 cf       	rjmp	.-126    	; 0xb42 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     bc0:	29 23       	and	r18, r25
     bc2:	dc cf       	rjmp	.-72     	; 0xb7c <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     bc4:	39 23       	and	r19, r25
     bc6:	e5 cf       	rjmp	.-54     	; 0xb92 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     bc8:	90 81       	ld	r25, Z
     bca:	89 2b       	or	r24, r25
     bcc:	ef cf       	rjmp	.-34     	; 0xbac <SoftwareSerial::write(unsigned char)+0x96>

00000bce <SoftwareSerial::available()>:
available():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     bce:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <SoftwareSerial::active_object>
     bd2:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <SoftwareSerial::active_object+0x1>
     bd6:	28 17       	cp	r18, r24
     bd8:	39 07       	cpc	r19, r25
     bda:	71 f4       	brne	.+28     	; 0xbf8 <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     bdc:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
     be0:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	80 5c       	subi	r24, 0xC0	; 192
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	82 1b       	sub	r24, r18
     bec:	91 09       	sbc	r25, r1
     bee:	60 e4       	ldi	r22, 0x40	; 64
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__divmodhi4>
     bf6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     bfc:	08 95       	ret

00000bfe <SoftwareSerial::read()>:
read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     bfe:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <SoftwareSerial::active_object>
     c02:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <SoftwareSerial::active_object+0x1>
     c06:	28 17       	cp	r18, r24
     c08:	39 07       	cpc	r19, r25
     c0a:	b9 f4       	brne	.+46     	; 0xc3a <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     c0c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
     c10:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
     c14:	98 17       	cp	r25, r24
     c16:	89 f0       	breq	.+34     	; 0xc3a <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     c18:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	e0 58       	subi	r30, 0x80	; 128
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     c24:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	2f 73       	andi	r18, 0x3F	; 63
     c30:	33 27       	eor	r19, r19
     c32:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     c3e:	08 95       	ret

00000c40 <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     c40:	85 ed       	ldi	r24, 0xD5	; 213
     c42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     c46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     c4a:	84 fd       	sbrc	r24, 4
     c4c:	fc cf       	rjmp	.-8      	; 0xc46 <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     c4e:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     c52:	08 95       	ret

00000c54 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     c54:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <twi_txBufferLength>
     c58:	26 0f       	add	r18, r22
     c5a:	33 27       	eor	r19, r19
     c5c:	33 1f       	adc	r19, r19
     c5e:	21 32       	cpi	r18, 0x21	; 33
     c60:	31 05       	cpc	r19, r1
     c62:	ec f4       	brge	.+58     	; 0xc9e <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     c64:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <twi_state>
     c68:	fc 01       	movw	r30, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	24 30       	cpi	r18, 0x04	; 4
     c70:	69 f0       	breq	.+26     	; 0xc8c <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     c72:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     c74:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     c76:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <twi_txBufferLength>
     c7a:	21 91       	ld	r18, Z+
     c7c:	ac 01       	movw	r20, r24
     c7e:	43 5c       	subi	r20, 0xC3	; 195
     c80:	5d 4f       	sbci	r21, 0xFD	; 253
     c82:	a4 0f       	add	r26, r20
     c84:	b5 2f       	mov	r27, r21
     c86:	b1 1d       	adc	r27, r1
     c88:	2c 93       	st	X, r18
     c8a:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     c8c:	86 17       	cp	r24, r22
     c8e:	98 f3       	brcs	.-26     	; 0xc76 <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     c90:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <twi_txBufferLength>
     c94:	68 0f       	add	r22, r24
     c96:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <twi_txBufferLength>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	08 95       	ret

00000ca2 <TwoWire::peek()>:
peek():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     ca2:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <TwoWire::rxBufferIndex>
     ca6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <TwoWire::rxBufferLength>
     caa:	e8 17       	cp	r30, r24
     cac:	30 f4       	brcc	.+12     	; 0xcba <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	e4 59       	subi	r30, 0x94	; 148
     cb2:	fc 4f       	sbci	r31, 0xFC	; 252
     cb4:	80 81       	ld	r24, Z
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     cbe:	08 95       	ret

00000cc0 <TwoWire::read()>:
read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     cc0:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <TwoWire::rxBufferIndex>
     cc4:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     ccc:	98 17       	cp	r25, r24
     cce:	48 f4       	brcc	.+18     	; 0xce2 <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     cd0:	e9 2f       	mov	r30, r25
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	e4 59       	subi	r30, 0x94	; 148
     cd6:	fc 4f       	sbci	r31, 0xFC	; 252
     cd8:	20 81       	ld	r18, Z
     cda:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     cdc:	9f 5f       	subi	r25, 0xFF	; 255
     cde:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     ce2:	c9 01       	movw	r24, r18
     ce4:	08 95       	ret

00000ce6 <TwoWire::available()>:
available():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     ce6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <TwoWire::rxBufferLength>
     cea:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     cee:	89 1b       	sub	r24, r25
     cf0:	99 0b       	sbc	r25, r25
     cf2:	08 95       	ret

00000cf4 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	7c 01       	movw	r14, r24
     d06:	cb 01       	movw	r24, r22
     d08:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     d0a:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <TwoWire::transmitting>
     d0e:	22 23       	and	r18, r18
     d10:	89 f0       	breq	.+34     	; 0xd34 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     d12:	eb 01       	movw	r28, r22
     d14:	6b 01       	movw	r12, r22
     d16:	c4 0e       	add	r12, r20
     d18:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     d1a:	cc 15       	cp	r28, r12
     d1c:	dd 05       	cpc	r29, r13
     d1e:	69 f0       	breq	.+26     	; 0xd3a <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     d20:	69 91       	ld	r22, Y+
     d22:	d7 01       	movw	r26, r14
     d24:	ed 91       	ld	r30, X+
     d26:	fc 91       	ld	r31, X
     d28:	01 90       	ld	r0, Z+
     d2a:	f0 81       	ld	r31, Z
     d2c:	e0 2d       	mov	r30, r0
     d2e:	c7 01       	movw	r24, r14
     d30:	09 95       	icall
     d32:	f3 cf       	rjmp	.-26     	; 0xd1a <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     d34:	64 2f       	mov	r22, r20
     d36:	0e 94 2a 06 	call	0xc54	; 0xc54 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     d3a:	c8 01       	movw	r24, r16
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	08 95       	ret

00000d4e <TwoWire::write(unsigned char)>:
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	1f 92       	push	r1
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     d5a:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <TwoWire::transmitting>
     d5e:	22 23       	and	r18, r18
     d60:	f9 f0       	breq	.+62     	; 0xda0 <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     d62:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <TwoWire::txBufferLength>
     d66:	20 32       	cpi	r18, 0x20	; 32
     d68:	58 f0       	brcs	.+22     	; 0xd80 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	fc 01       	movw	r30, r24
     d70:	33 83       	std	Z+3, r19	; 0x03
     d72:	22 83       	std	Z+2, r18	; 0x02
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     d78:	0f 90       	pop	r0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     d80:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <TwoWire::txBufferIndex>
     d84:	e8 2f       	mov	r30, r24
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	eb 54       	subi	r30, 0x4B	; 75
     d8a:	fc 4f       	sbci	r31, 0xFC	; 252
     d8c:	99 81       	ldd	r25, Y+1	; 0x01
     d8e:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     d96:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	ec cf       	rjmp	.-40     	; 0xd78 <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 2a 06 	call	0xc54	; 0xc54 <twi_transmit>
     daa:	f7 cf       	rjmp	.-18     	; 0xd9a <TwoWire::write(unsigned char)+0x4c>

00000dac <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     dac:	fc 01       	movw	r30, r24
     dae:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     db0:	31 e0       	ldi	r19, 0x01	; 1
     db2:	30 93 b3 03 	sts	0x03B3, r19	; 0x8003b3 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     db6:	20 93 d5 03 	sts	0x03D5, r18	; 0x8003d5 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     dba:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     dbe:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     dc2:	83 85       	ldd	r24, Z+11	; 0x0b
     dc4:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     dc6:	85 e1       	ldi	r24, 0x15	; 21
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:255
	Wire.endTransmission();   
     dce:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <TwoWire::endTransmission() [clone .constprop.76]>

00000dd2 <LiquidCrystal_I2C::write4bits(unsigned char)>:
write4bits():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	8c 01       	movw	r16, r24
     dda:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     ddc:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     de0:	6c 2f       	mov	r22, r28
     de2:	64 60       	ori	r22, 0x04	; 4
     de4:	c8 01       	movw	r24, r16
     de6:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 93 03 	call	0x726	; 0x726 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     df2:	6c 2f       	mov	r22, r28
     df4:	6b 7f       	andi	r22, 0xFB	; 251
     df6:	c8 01       	movw	r24, r16
     df8:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     dfc:	82 e3       	ldi	r24, 0x32	; 50
     dfe:	90 e0       	ldi	r25, 0x00	; 0
write4bits():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     e06:	0c 94 93 03 	jmp	0x726	; 0x726 <delayMicroseconds>

00000e0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
send():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	8c 01       	movw	r16, r24
     e14:	d6 2f       	mov	r29, r22
     e16:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     e18:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     e1a:	64 2b       	or	r22, r20
     e1c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     e20:	80 e1       	ldi	r24, 0x10	; 16
     e22:	d8 9f       	mul	r29, r24
     e24:	b0 01       	movw	r22, r0
     e26:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     e28:	6c 2b       	or	r22, r28
     e2a:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     e34:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000e38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>:
setCursor():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	28 97       	sbiw	r28, 0x08	; 8
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     e4c:	98 e0       	ldi	r25, 0x08	; 8
     e4e:	ec e0       	ldi	r30, 0x0C	; 12
     e50:	f1 e0       	ldi	r31, 0x01	; 1
     e52:	de 01       	movw	r26, r28
     e54:	11 96       	adiw	r26, 0x01	; 1
     e56:	01 90       	ld	r0, Z+
     e58:	0d 92       	st	X+, r0
     e5a:	9a 95       	dec	r25
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     e5e:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <lcd+0x8>
     e62:	96 17       	cp	r25, r22
     e64:	08 f4       	brcc	.+2      	; 0xe68 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     e66:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     e68:	26 2f       	mov	r18, r22
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	4c 0f       	add	r20, r28
     e76:	5d 1f       	adc	r21, r29
     e78:	24 0f       	add	r18, r20
     e7a:	35 1f       	adc	r19, r21
     e7c:	f9 01       	movw	r30, r18
     e7e:	60 81       	ld	r22, Z
     e80:	68 0f       	add	r22, r24
     e82:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	8f e6       	ldi	r24, 0x6F	; 111
     e88:	94 e0       	ldi	r25, 0x04	; 4
setCursor():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     e8a:	28 96       	adiw	r28, 0x08	; 8
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     e9a:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00000e9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>:
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	8f e6       	ldi	r24, 0x6F	; 111
     ea4:	94 e0       	ldi	r25, 0x04	; 4
     ea6:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
clear():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
     eaa:	80 ed       	ldi	r24, 0xD0	; 208
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0c 94 93 03 	jmp	0x726	; 0x726 <delayMicroseconds>

00000eb2 <LiquidCrystal_I2C::write(unsigned char)>:
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	08 95       	ret

00000ebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>:
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     ec8:	d0 e0       	ldi	r29, 0x00	; 0
     eca:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     ecc:	f8 01       	movw	r30, r16
     ece:	ec 0f       	add	r30, r28
     ed0:	fd 1f       	adc	r31, r29
     ed2:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     ed4:	66 23       	and	r22, r22
     ed6:	39 f0       	breq	.+14     	; 0xee6 <Print::print(__FlashStringHelper const*) [clone .constprop.42]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	8f e6       	ldi	r24, 0x6F	; 111
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     ee2:	21 96       	adiw	r28, 0x01	; 1
     ee4:	f3 cf       	rjmp	.-26     	; 0xecc <Print::print(__FlashStringHelper const*) [clone .constprop.42]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     ee6:	ce 01       	movw	r24, r28
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <Print::availableForWrite()>:
availableForWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	08 95       	ret

00000ef8 <queueButton(unsigned char)>:
queueButton():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:152

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
     ef8:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <buttonBufferCount>
     efc:	25 30       	cpi	r18, 0x05	; 5
     efe:	09 f0       	breq	.+2      	; 0xf02 <queueButton(unsigned char)+0xa>
     f00:	90 f4       	brcc	.+36     	; 0xf26 <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:154
  {
    buttonBuffer [button_write_pos] = button;
     f02:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <__data_end>
     f06:	e9 2f       	mov	r30, r25
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	e1 50       	subi	r30, 0x01	; 1
     f0c:	fd 4f       	sbci	r31, 0xFD	; 253
     f0e:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:155
    buttonBufferCount++;
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:156
    button_write_pos++;
     f16:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:158
    
    if (button_write_pos >= sizeof (buttonBuffer))
     f18:	95 30       	cpi	r25, 0x05	; 5
     f1a:	18 f4       	brcc	.+6      	; 0xf22 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:156
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
     f1c:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <__data_end>
     f20:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:160
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
     f22:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:163
    }
  }
}
     f26:	08 95       	ret

00000f28 <TwoWire::requestFrom(int, int) [clone .constprop.67]>:
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     f28:	90 91 b2 03 	lds	r25, 0x03B2	; 0x8003b2 <twi_state>
     f2c:	91 11       	cpse	r25, r1
     f2e:	fc cf       	rjmp	.-8      	; 0xf28 <TwoWire::requestFrom(int, int) [clone .constprop.67]>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:136
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     f30:	28 2f       	mov	r18, r24
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
     f38:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	30 93 b0 03 	sts	0x03B0, r19	; 0x8003b0 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     f42:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     f46:	38 0f       	add	r19, r24
     f48:	30 93 ae 03 	sts	0x03AE, r19	; 0x8003ae <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     f4c:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
     f50:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <twi_slarw>
     f54:	90 6d       	ori	r25, 0xD0	; 208
     f56:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
     f5a:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <twi_inRepStart>
     f5e:	91 30       	cpi	r25, 0x01	; 1
     f60:	19 f5       	brne	.+70     	; 0xfa8 <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x80>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     f62:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
     f66:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <twi_slarw>
     f6a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
     f6e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f72:	93 fd       	sbrc	r25, 3
     f74:	f8 cf       	rjmp	.-16     	; 0xf66 <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x3e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     f76:	95 ec       	ldi	r25, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     f78:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     f7c:	90 91 b2 03 	lds	r25, 0x03B2	; 0x8003b2 <twi_state>
     f80:	91 30       	cpi	r25, 0x01	; 1
     f82:	e1 f3       	breq	.-8      	; 0xf7c <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x54>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
     f84:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <twi_masterBufferIndex>
     f88:	98 17       	cp	r25, r24
     f8a:	10 f4       	brcc	.+4      	; 0xf90 <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x68>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
     f8c:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <twi_masterBufferIndex>
     f90:	ae e8       	ldi	r26, 0x8E	; 142
     f92:	b3 e0       	ldi	r27, 0x03	; 3
     f94:	ec e6       	ldi	r30, 0x6C	; 108
     f96:	f3 e0       	ldi	r31, 0x03	; 3
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     f98:	80 e0       	ldi	r24, 0x00	; 0
twi_readFrom():
     f9a:	82 13       	cpse	r24, r18
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x84>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     f9e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
     fa2:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:137
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
     fa6:	08 95       	ret
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     fa8:	95 ee       	ldi	r25, 0xE5	; 229
     faa:	e6 cf       	rjmp	.-52     	; 0xf78 <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     fac:	9d 91       	ld	r25, X+
     fae:	91 93       	st	Z+, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	f3 cf       	rjmp	.-26     	; 0xf9a <TwoWire::requestFrom(int, int) [clone .constprop.67]+0x72>

00000fb4 <RTC_DS1307::now()>:
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:864
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	6c 01       	movw	r12, r24
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     fca:	88 e6       	ldi	r24, 0x68	; 104
     fcc:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     fd0:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     fd4:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:866
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	85 e1       	ldi	r24, 0x15	; 21
     fdc:	94 e0       	ldi	r25, 0x04	; 4
     fde:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:867
  Wire.endTransmission();
     fe2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TwoWire::endTransmission() [clone .constprop.76]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:869

  Wire.requestFrom(DS1307_ADDRESS, 7);
     fe6:	87 e0       	ldi	r24, 0x07	; 7
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 94 07 	call	0xf28	; 0xf28 <TwoWire::requestFrom(int, int) [clone .constprop.67]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:870
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
     fee:	85 e1       	ldi	r24, 0x15	; 21
     ff0:	94 e0       	ldi	r25, 0x04	; 4
     ff2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
     ff6:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	94 e0       	ldi	r25, 0x04	; 4
     ffe:	35 95       	asr	r19
    1000:	27 95       	ror	r18
    1002:	9a 95       	dec	r25
    1004:	e1 f7       	brne	.-8      	; 0xffe <RTC_DS1307::now()+0x4a>
    1006:	92 2f       	mov	r25, r18
    1008:	99 0f       	add	r25, r25
    100a:	99 0f       	add	r25, r25
    100c:	c2 2f       	mov	r28, r18
    100e:	c9 1b       	sub	r28, r25
    1010:	cc 0f       	add	r28, r28
    1012:	c8 0f       	add	r28, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:871
  Wire._I2C_WRITE((byte)0);
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    1014:	85 e1       	ldi	r24, 0x15	; 21
    1016:	94 e0       	ldi	r25, 0x04	; 4
    1018:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    101c:	9c 01       	movw	r18, r24
    101e:	44 e0       	ldi	r20, 0x04	; 4
    1020:	35 95       	asr	r19
    1022:	27 95       	ror	r18
    1024:	4a 95       	dec	r20
    1026:	e1 f7       	brne	.-8      	; 0x1020 <RTC_DS1307::now()+0x6c>
    1028:	2f 70       	andi	r18, 0x0F	; 15
    102a:	33 27       	eor	r19, r19
    102c:	92 2f       	mov	r25, r18
    102e:	99 0f       	add	r25, r25
    1030:	99 0f       	add	r25, r25
    1032:	d2 2f       	mov	r29, r18
    1034:	d9 1b       	sub	r29, r25
    1036:	dd 0f       	add	r29, r29
    1038:	d8 0f       	add	r29, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:872
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    103a:	85 e1       	ldi	r24, 0x15	; 21
    103c:	94 e0       	ldi	r25, 0x04	; 4
    103e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1042:	9c 01       	movw	r18, r24
    1044:	54 e0       	ldi	r21, 0x04	; 4
    1046:	35 95       	asr	r19
    1048:	27 95       	ror	r18
    104a:	5a 95       	dec	r21
    104c:	e1 f7       	brne	.-8      	; 0x1046 <RTC_DS1307::now()+0x92>
    104e:	2f 70       	andi	r18, 0x0F	; 15
    1050:	33 27       	eor	r19, r19
    1052:	92 2f       	mov	r25, r18
    1054:	99 0f       	add	r25, r25
    1056:	99 0f       	add	r25, r25
    1058:	12 2f       	mov	r17, r18
    105a:	19 1b       	sub	r17, r25
    105c:	11 0f       	add	r17, r17
    105e:	18 0f       	add	r17, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:873

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    1060:	85 e1       	ldi	r24, 0x15	; 21
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:874
  uint8_t d = bcd2bin(Wire._I2C_READ());
    1068:	85 e1       	ldi	r24, 0x15	; 21
    106a:	94 e0       	ldi	r25, 0x04	; 4
    106c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1070:	9c 01       	movw	r18, r24
    1072:	64 e0       	ldi	r22, 0x04	; 4
    1074:	35 95       	asr	r19
    1076:	27 95       	ror	r18
    1078:	6a 95       	dec	r22
    107a:	e1 f7       	brne	.-8      	; 0x1074 <RTC_DS1307::now()+0xc0>
    107c:	2f 70       	andi	r18, 0x0F	; 15
    107e:	33 27       	eor	r19, r19
    1080:	92 2f       	mov	r25, r18
    1082:	99 0f       	add	r25, r25
    1084:	99 0f       	add	r25, r25
    1086:	02 2f       	mov	r16, r18
    1088:	09 1b       	sub	r16, r25
    108a:	00 0f       	add	r16, r16
    108c:	08 0f       	add	r16, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:875
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    108e:	85 e1       	ldi	r24, 0x15	; 21
    1090:	94 e0       	ldi	r25, 0x04	; 4
    1092:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1096:	9c 01       	movw	r18, r24
    1098:	74 e0       	ldi	r23, 0x04	; 4
    109a:	35 95       	asr	r19
    109c:	27 95       	ror	r18
    109e:	7a 95       	dec	r23
    10a0:	e1 f7       	brne	.-8      	; 0x109a <RTC_DS1307::now()+0xe6>
    10a2:	2f 70       	andi	r18, 0x0F	; 15
    10a4:	33 27       	eor	r19, r19
    10a6:	92 2f       	mov	r25, r18
    10a8:	99 0f       	add	r25, r25
    10aa:	99 0f       	add	r25, r25
    10ac:	f2 2e       	mov	r15, r18
    10ae:	f9 1a       	sub	r15, r25
    10b0:	ff 0c       	add	r15, r15
    10b2:	f8 0e       	add	r15, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:876
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;
    10b4:	85 e1       	ldi	r24, 0x15	; 21
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    10bc:	9c 01       	movw	r18, r24
    10be:	e4 e0       	ldi	r30, 0x04	; 4
    10c0:	35 95       	asr	r19
    10c2:	27 95       	ror	r18
    10c4:	ea 95       	dec	r30
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <RTC_DS1307::now()+0x10c>
    10c8:	2f 70       	andi	r18, 0x0F	; 15
    10ca:	33 27       	eor	r19, r19
    10cc:	92 2f       	mov	r25, r18
    10ce:	99 0f       	add	r25, r25
    10d0:	99 0f       	add	r25, r25
    10d2:	29 1b       	sub	r18, r25
    10d4:	22 0f       	add	r18, r18
    10d6:	82 0f       	add	r24, r18
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    10d8:	f6 01       	movw	r30, r12
    10da:	80 83       	st	Z, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    10dc:	f1 82       	std	Z+1, r15	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    10de:	02 83       	std	Z+2, r16	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    10e0:	13 83       	std	Z+3, r17	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    10e2:	d4 83       	std	Z+4, r29	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    10e4:	c5 83       	std	Z+5, r28	; 0x05
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:879
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;

  return DateTime(y, m, d, hh, mm, ss);
}
    10e6:	c6 01       	movw	r24, r12
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	08 95       	ret

000010f8 <String::invalidate()>:
invalidate():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    10fe:	88 81       	ld	r24, Y
    1100:	99 81       	ldd	r25, Y+1	; 0x01
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	11 f0       	breq	.+4      	; 0x110a <String::invalidate()+0x12>
    1106:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    110e:	1d 82       	std	Y+5, r1	; 0x05
    1110:	1c 82       	std	Y+4, r1	; 0x04
    1112:	1b 82       	std	Y+3, r1	; 0x03
    1114:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <Print::print(char const*) [clone .constprop.80]>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	69 f0       	breq	.+26     	; 0x113a <Print::print(char const*) [clone .constprop.80]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    1120:	fc 01       	movw	r30, r24
    1122:	01 90       	ld	r0, Z+
    1124:	00 20       	and	r0, r0
    1126:	e9 f7       	brne	.-6      	; 0x1122 <Print::print(char const*) [clone .constprop.80]+0x6>
    1128:	31 97       	sbiw	r30, 0x01	; 1
    112a:	af 01       	movw	r20, r30
    112c:	48 1b       	sub	r20, r24
    112e:	59 0b       	sbc	r21, r25
    1130:	bc 01       	movw	r22, r24
    1132:	8f e6       	ldi	r24, 0x6F	; 111
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <Print::write(unsigned char const*, unsigned int)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret

00001140 <inttostr(char*, short)>:
inttostr():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:31

char* padc (char chr, unsigned char count = 0);

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:32
  if (integer == 0)
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	59 f4       	brne	.+22     	; 0x1166 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:34
  {
    strcpy(dest, "0");
    1150:	6f ed       	ldi	r22, 0xDF	; 223
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	ce 01       	movw	r24, r28
    1156:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:64
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    115a:	ce 01       	movw	r24, r28
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:38
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    1166:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:40
    
    if (integer < 0)
    1168:	77 ff       	sbrs	r23, 7
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:43
    {
      sign = 1;
      dest[0] = '-';
    116c:	2d e2       	ldi	r18, 0x2D	; 45
    116e:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:44
      integer = integer * -1;
    1170:	91 95       	neg	r25
    1172:	81 95       	neg	r24
    1174:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:42
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    1176:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1178:	80 31       	cpi	r24, 0x10	; 16
    117a:	37 e2       	ldi	r19, 0x27	; 39
    117c:	93 07       	cpc	r25, r19
    117e:	0c f5       	brge	.+66     	; 0x11c2 <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    1180:	88 3e       	cpi	r24, 0xE8	; 232
    1182:	33 e0       	ldi	r19, 0x03	; 3
    1184:	93 07       	cpc	r25, r19
    1186:	fc f4       	brge	.+62     	; 0x11c6 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:51
    else if (integer > 99) idx = 2;
    1188:	32 e0       	ldi	r19, 0x02	; 2
    118a:	84 36       	cpi	r24, 0x64	; 100
    118c:	91 05       	cpc	r25, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:52
    else if (integer > 9) idx = 1;
    1190:	31 e0       	ldi	r19, 0x01	; 1
    1192:	8a 30       	cpi	r24, 0x0A	; 10
    1194:	91 05       	cpc	r25, r1
    1196:	0c f4       	brge	.+2      	; 0x119a <inttostr(char*, short)+0x5a>
    1198:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:55
    else if (integer > 0) idx = 0;    

    idx += sign;
    119a:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:56
    dest[idx+1] = 0;
    119c:	fe 01       	movw	r30, r28
    119e:	e2 0f       	add	r30, r18
    11a0:	f1 1d       	adc	r31, r1
    11a2:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:60
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    11a4:	0a e0       	ldi	r16, 0x0A	; 10
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	fe 01       	movw	r30, r28
    11aa:	e2 0f       	add	r30, r18
    11ac:	f1 1d       	adc	r31, r1
    11ae:	b8 01       	movw	r22, r16
    11b0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__divmodhi4>
    11b4:	80 5d       	subi	r24, 0xD0	; 208
    11b6:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:58
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    11b8:	cb 01       	movw	r24, r22
    11ba:	21 50       	subi	r18, 0x01	; 1
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	a1 f7       	brne	.-24     	; 0x11a8 <inttostr(char*, short)+0x68>
    11c0:	cc cf       	rjmp	.-104    	; 0x115a <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    11c2:	34 e0       	ldi	r19, 0x04	; 4
    11c4:	ea cf       	rjmp	.-44     	; 0x119a <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    11c6:	33 e0       	ldi	r19, 0x03	; 3
    11c8:	e8 cf       	rjmp	.-48     	; 0x119a <inttostr(char*, short)+0x5a>

000011ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>:
rpad():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:92
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:94
{
  unsigned char len = strlen(str);
    11d0:	ec 01       	movw	r28, r24
    11d2:	09 90       	ld	r0, Y+
    11d4:	00 20       	and	r0, r0
    11d6:	e9 f7       	brne	.-6      	; 0x11d2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]+0x8>
    11d8:	21 97       	sbiw	r28, 0x01	; 1
    11da:	c8 1b       	sub	r28, r24
    11dc:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:98
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    11de:	c0 31       	cpi	r28, 0x10	; 16
    11e0:	08 f5       	brcc	.+66     	; 0x1224 <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:100
  {
    strcpy(dest, str);
    11e2:	88 ee       	ldi	r24, 0xE8	; 232
    11e4:	93 e0       	ldi	r25, 0x03	; 3
    11e6:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:101
    strcat(dest, padc(chr, width - len));
    11ea:	80 e1       	ldi	r24, 0x10	; 16
    11ec:	8c 1b       	sub	r24, r28
    11ee:	e7 ed       	ldi	r30, 0xD7	; 215
    11f0:	f3 e0       	ldi	r31, 0x03	; 3
padc():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    11f2:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    11f4:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    11f6:	af 01       	movw	r20, r30
    11f8:	47 5d       	subi	r20, 0xD7	; 215
    11fa:	53 40       	sbci	r21, 0x03	; 3
    11fc:	48 17       	cp	r20, r24
    11fe:	59 07       	cpc	r21, r25
    1200:	14 f4       	brge	.+4      	; 0x1206 <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]+0x3c>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1202:	21 93       	st	Z+, r18
    1204:	f8 cf       	rjmp	.-16     	; 0x11f6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    1206:	89 52       	subi	r24, 0x29	; 41
    1208:	9c 4f       	sbci	r25, 0xFC	; 252
    120a:	fc 01       	movw	r30, r24
    120c:	10 82       	st	Z, r1
rpad():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:101
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    120e:	67 ed       	ldi	r22, 0xD7	; 215
    1210:	73 e0       	ldi	r23, 0x03	; 3
    1212:	88 ee       	ldi	r24, 0xE8	; 232
    1214:	93 e0       	ldi	r25, 0x03	; 3
    1216:	0e 94 ae 21 	call	0x435c	; 0x435c <strcat>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:108
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    121a:	88 ee       	ldi	r24, 0xE8	; 232
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:105
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    1224:	41 e1       	ldi	r20, 0x11	; 17
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	88 ee       	ldi	r24, 0xE8	; 232
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	0e 94 c9 21 	call	0x4392	; 0x4392 <strncpy>
    1230:	f4 cf       	rjmp	.-24     	; 0x121a <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]+0x50>

00001232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>:
lpad():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:111
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
    123c:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:113
{
  unsigned char len = strlen(str);
    123e:	fb 01       	movw	r30, r22
    1240:	01 90       	ld	r0, Z+
    1242:	00 20       	and	r0, r0
    1244:	e9 f7       	brne	.-6      	; 0x1240 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0xe>
    1246:	31 97       	sbiw	r30, 0x01	; 1
    1248:	e6 1b       	sub	r30, r22
    124a:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:117
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    124c:	e0 31       	cpi	r30, 0x10	; 16
    124e:	28 f5       	brcc	.+74     	; 0x129a <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0x68>
    1250:	e4 17       	cp	r30, r20
    1252:	18 f5       	brcc	.+70     	; 0x129a <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0x68>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:119
  {
    strcpy(dest, padc(chr, width - len));
    1254:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:135
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    1256:	41 31       	cpi	r20, 0x11	; 17
    1258:	08 f0       	brcs	.+2      	; 0x125c <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0x2a>
    125a:	40 e1       	ldi	r20, 0x10	; 16
    125c:	e7 ed       	ldi	r30, 0xD7	; 215
    125e:	f3 e0       	ldi	r31, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:138

  int i;
  for (i=0; i < count; i++)
    1260:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1262:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1264:	9f 01       	movw	r18, r30
    1266:	27 5d       	subi	r18, 0xD7	; 215
    1268:	33 40       	sbci	r19, 0x03	; 3
    126a:	24 17       	cp	r18, r20
    126c:	35 07       	cpc	r19, r21
    126e:	14 f4       	brge	.+4      	; 0x1274 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0x42>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1270:	81 93       	st	Z+, r24
    1272:	f8 cf       	rjmp	.-16     	; 0x1264 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0x32>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    1274:	49 52       	subi	r20, 0x29	; 41
    1276:	5c 4f       	sbci	r21, 0xFC	; 252
    1278:	fa 01       	movw	r30, r20
    127a:	10 82       	st	Z, r1
lpad():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:119
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    127c:	67 ed       	ldi	r22, 0xD7	; 215
    127e:	73 e0       	ldi	r23, 0x03	; 3
    1280:	ce 01       	movw	r24, r28
    1282:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:120
    strcat(dest, str);
    1286:	b8 01       	movw	r22, r16
    1288:	ce 01       	movw	r24, r28
    128a:	0e 94 ae 21 	call	0x435c	; 0x435c <strcat>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:127
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    128e:	ce 01       	movw	r24, r28
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:124
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	4f 5f       	subi	r20, 0xFF	; 255
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	b8 01       	movw	r22, r16
    12a2:	ce 01       	movw	r24, r28
    12a4:	0e 94 c9 21 	call	0x4392	; 0x4392 <strncpy>
    12a8:	f2 cf       	rjmp	.-28     	; 0x128e <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]+0x5c>

000012aa <Config::save() [clone .constprop.21]>:
save():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:162
  DataYear = 2022;
}

void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    12aa:	40 e3       	ldi	r20, 0x30	; 48
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	85 e2       	ldi	r24, 0x25	; 37
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <eeprom_write_block>

000012ba <PlayChant()>:
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:913

int n = 1;
void PlayChant()
{
    // Serial.println(String(hr));
    switch (playSong)
    12ba:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <playSong>
    12be:	e1 50       	subi	r30, 0x01	; 1
    12c0:	e9 30       	cpi	r30, 0x09	; 9
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <PlayChant()+0xc>
    12c4:	45 c1       	rjmp	.+650    	; 0x1550 <PlayChant()+0x296>
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	e8 59       	subi	r30, 0x98	; 152
    12ca:	f6 4f       	sbci	r31, 0xF6	; 246
    12cc:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__tablejump2__>
    12d0:	71 09       	sbc	r23, r1
    12d2:	86 09       	sbc	r24, r6
    12d4:	99 09       	sbc	r25, r9
    12d6:	ac 09       	sbc	r26, r12
    12d8:	bf 09       	sbc	r27, r15
    12da:	d4 09       	sbc	r29, r4
    12dc:	a8 0a       	sbc	r10, r24
    12de:	09 0a       	sbc	r0, r25
    12e0:	8e 0a       	sbc	r8, r30
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:916
    {
    case 1: // Temple Name
        if (digitalRead(STA_PIN))
    12e2:	85 e0       	ldi	r24, 0x05	; 5
    12e4:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    12e8:	89 2b       	or	r24, r25
    12ea:	09 f4       	brne	.+2      	; 0x12ee <PlayChant()+0x34>
    12ec:	31 c1       	rjmp	.+610    	; 0x1550 <PlayChant()+0x296>
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	82 e1       	ldi	r24, 0x12	; 18
    12f4:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:919
        {
            myDFPlayer.playMp3Folder(0);
            delay(1000);
    12f8:	68 ee       	ldi	r22, 0xE8	; 232
    12fa:	73 e0       	ldi	r23, 0x03	; 3
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:920
            playSong = 2;
    1304:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:928
    case 2:
        if (digitalRead(STA_PIN)) // Time
        {
            myDFPlayer.playFolder(1, bell.hour());
            delay(1000);
            playSong = 3;
    1306:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <playSong>
    130a:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:924
            delay(1000);
            playSong = 2;
        }
        break;
    case 2:
        if (digitalRead(STA_PIN)) // Time
    130c:	85 e0       	ldi	r24, 0x05	; 5
    130e:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    1312:	89 2b       	or	r24, r25
    1314:	09 f4       	brne	.+2      	; 0x1318 <PlayChant()+0x5e>
    1316:	1c c1       	rjmp	.+568    	; 0x1550 <PlayChant()+0x296>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:926
        {
            myDFPlayer.playFolder(1, bell.hour());
    1318:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <bell+0x3>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:927
            delay(1000);
    1322:	68 ee       	ldi	r22, 0xE8	; 232
    1324:	73 e0       	ldi	r23, 0x03	; 3
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:928
            playSong = 3;
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	ea cf       	rjmp	.-44     	; 0x1306 <PlayChant()+0x4c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:932
        }
        break;
    case 3: // English Month
        if (digitalRead(STA_PIN))
    1332:	85 e0       	ldi	r24, 0x05	; 5
    1334:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    1338:	89 2b       	or	r24, r25
    133a:	09 f4       	brne	.+2      	; 0x133e <PlayChant()+0x84>
    133c:	09 c1       	rjmp	.+530    	; 0x1550 <PlayChant()+0x296>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:934
        {
            myDFPlayer.playFolder(47, bell.month());
    133e:	60 91 6a 04 	lds	r22, 0x046A	; 0x80046a <bell+0x1>
    1342:	8f e2       	ldi	r24, 0x2F	; 47
    1344:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:935
            delay(1000);
    1348:	68 ee       	ldi	r22, 0xE8	; 232
    134a:	73 e0       	ldi	r23, 0x03	; 3
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:936
            playSong = 4;
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	d7 cf       	rjmp	.-82     	; 0x1306 <PlayChant()+0x4c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:940
        }
        break;
    case 4: // Englidh Date
        if (digitalRead(STA_PIN))
    1358:	85 e0       	ldi	r24, 0x05	; 5
    135a:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    135e:	89 2b       	or	r24, r25
    1360:	09 f4       	brne	.+2      	; 0x1364 <PlayChant()+0xaa>
    1362:	f6 c0       	rjmp	.+492    	; 0x1550 <PlayChant()+0x296>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:942
        {
            myDFPlayer.playFolder(48, bell.day());
    1364:	60 91 6b 04 	lds	r22, 0x046B	; 0x80046b <bell+0x2>
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:943
            delay(1000);
    136e:	68 ee       	ldi	r22, 0xE8	; 232
    1370:	73 e0       	ldi	r23, 0x03	; 3
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:944
            playSong = 5;
    137a:	85 e0       	ldi	r24, 0x05	; 5
    137c:	c4 cf       	rjmp	.-120    	; 0x1306 <PlayChant()+0x4c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:948
        }
        break;
    case 5: // Day of Week
        if (digitalRead(STA_PIN))
    137e:	85 e0       	ldi	r24, 0x05	; 5
    1380:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    1384:	89 2b       	or	r24, r25
    1386:	09 f4       	brne	.+2      	; 0x138a <PlayChant()+0xd0>
    1388:	e3 c0       	rjmp	.+454    	; 0x1550 <PlayChant()+0x296>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:950
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    138a:	0e 94 44 02 	call	0x488	; 0x488 <DateTime::dayOfTheWeek() const [clone .constprop.15]>
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	68 0f       	add	r22, r24
    1392:	81 e3       	ldi	r24, 0x31	; 49
    1394:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:951
            delay(1000);
    1398:	68 ee       	ldi	r22, 0xE8	; 232
    139a:	73 e0       	ldi	r23, 0x03	; 3
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:952
            playSong = 6;
    13a4:	86 e0       	ldi	r24, 0x06	; 6
    13a6:	af cf       	rjmp	.-162    	; 0x1306 <PlayChant()+0x4c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:956
        }
        break;
    case 6: // Tamil Date
        if (digitalRead(STA_PIN))
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    13ae:	89 2b       	or	r24, r25
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <PlayChant()+0xfa>
    13b2:	ce c0       	rjmp	.+412    	; 0x1550 <PlayChant()+0x296>
    13b4:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <bell+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:958
        {
            if (bell.hour() == 6 || bell.hour() == 8 || bell.hour() == 10)
    13b8:	86 30       	cpi	r24, 0x06	; 6
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <PlayChant()+0x108>
    13bc:	8d 7f       	andi	r24, 0xFD	; 253
    13be:	88 30       	cpi	r24, 0x08	; 8
    13c0:	c9 f4       	brne	.+50     	; 0x13f4 <PlayChant()+0x13a>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    13c2:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <bell>
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	80 53       	subi	r24, 0x30	; 48
    13ca:	98 4f       	sbci	r25, 0xF8	; 248
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:960
            {
                if (bell.year() == config.DataYear)
    13cc:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <config+0x20>
    13d0:	30 91 46 03 	lds	r19, 0x0346	; 0x800346 <config+0x21>
    13d4:	28 17       	cp	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	79 f4       	brne	.+30     	; 0x13f8 <PlayChant()+0x13e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:962
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    13da:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <bell+0x1>
    13de:	60 91 6b 04 	lds	r22, 0x046B	; 0x80046b <bell+0x2>
    13e2:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:967
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    13e4:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:968
                    delay(1000);
    13e8:	68 ee       	ldi	r22, 0xE8	; 232
    13ea:	73 e0       	ldi	r23, 0x03	; 3
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:974
                }
                playSong = 8;
            }
            else
            {
                playSong = 8;
    13f4:	88 e0       	ldi	r24, 0x08	; 8
    13f6:	87 cf       	rjmp	.-242    	; 0x1306 <PlayChant()+0x4c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:965
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    13f8:	21 50       	subi	r18, 0x01	; 1
    13fa:	31 09       	sbc	r19, r1
    13fc:	28 17       	cp	r18, r24
    13fe:	39 07       	cpc	r19, r25
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <PlayChant()+0x13a>
    1402:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <bell+0x1>
    1406:	8c 30       	cpi	r24, 0x0C	; 12
    1408:	a9 f7       	brne	.-22     	; 0x13f4 <PlayChant()+0x13a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:967
                {
                    myDFPlayer.playFolder(50, bell.day());
    140a:	60 91 6b 04 	lds	r22, 0x046B	; 0x80046b <bell+0x2>
    140e:	82 e3       	ldi	r24, 0x32	; 50
    1410:	e9 cf       	rjmp	.-46     	; 0x13e4 <PlayChant()+0x12a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:980
            }
        }
        break;

    case 8:
        if (digitalRead(STA_PIN))
    1412:	85 e0       	ldi	r24, 0x05	; 5
    1414:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    1418:	89 2b       	or	r24, r25
    141a:	09 f4       	brne	.+2      	; 0x141e <PlayChant()+0x164>
    141c:	99 c0       	rjmp	.+306    	; 0x1550 <PlayChant()+0x296>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:982
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    141e:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <config+0x24>
    1422:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <config+0x25>
    1426:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <bell+0x3>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	28 17       	cp	r18, r24
    142e:	39 07       	cpc	r19, r25
    1430:	21 f4       	brne	.+8      	; 0x143a <PlayChant()+0x180>
    1432:	23 30       	cpi	r18, 0x03	; 3
    1434:	31 05       	cpc	r19, r1
    1436:	09 f0       	breq	.+2      	; 0x143a <PlayChant()+0x180>
    1438:	40 c0       	rjmp	.+128    	; 0x14ba <PlayChant()+0x200>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:987
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
            }
            else if (config.MorSong2Time == bell.hour() && config.MorSong2Time != 3)
    143a:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <config+0x26>
    143e:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <config+0x27>
    1442:	82 17       	cp	r24, r18
    1444:	93 07       	cpc	r25, r19
    1446:	21 f4       	brne	.+8      	; 0x1450 <PlayChant()+0x196>
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	09 f0       	breq	.+2      	; 0x1450 <PlayChant()+0x196>
    144e:	41 c0       	rjmp	.+130    	; 0x14d2 <PlayChant()+0x218>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:996
                if (config.SongOrder > config.SongCount)
                    config.SongOrder = 1;
                config.save();
                delay(1000);
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1450:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <config+0x28>
    1454:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <config+0x29>
    1458:	a9 01       	movw	r20, r18
    145a:	44 5f       	subi	r20, 0xF4	; 244
    145c:	5f 4f       	sbci	r21, 0xFF	; 255
    145e:	84 17       	cp	r24, r20
    1460:	95 07       	cpc	r25, r21
    1462:	19 f4       	brne	.+6      	; 0x146a <PlayChant()+0x1b0>
    1464:	23 30       	cpi	r18, 0x03	; 3
    1466:	31 05       	cpc	r19, r1
    1468:	71 f5       	brne	.+92     	; 0x14c6 <PlayChant()+0x20c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1001
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
                delay(1000);
            }
            else if ((config.EveSong2Time + 12) == bell.hour() && (config.EveSong2Time != 3))
    146a:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <config+0x2a>
    146e:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <config+0x2b>
    1472:	a9 01       	movw	r20, r18
    1474:	44 5f       	subi	r20, 0xF4	; 244
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	84 17       	cp	r24, r20
    147a:	95 07       	cpc	r25, r21
    147c:	39 f1       	breq	.+78     	; 0x14cc <PlayChant()+0x212>
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
    147e:	60 91 3d 03 	lds	r22, 0x033D	; 0x80033d <config+0x18>
    1482:	70 91 3e 03 	lds	r23, 0x033E	; 0x80033e <config+0x19>
    1486:	82 e1       	ldi	r24, 0x12	; 18
    1488:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1013
                delay(1000);
            }
            else
            {
                myDFPlayer.playMp3Folder(config.SlogamOrder);
                config.SlogamOrder++;
    148c:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <config+0x18>
    1490:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <config+0x19>
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <config+0x19>
    149a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1014
                if (config.SlogamOrder > config.SlogamCount)
    149e:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <config+0x1a>
    14a2:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <config+0x1b>
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	74 f5       	brge	.+92     	; 0x1508 <PlayChant()+0x24e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1015
                    config.SlogamOrder = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <config+0x19>
    14b4:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <config+0x18>
    14b8:	27 c0       	rjmp	.+78     	; 0x1508 <PlayChant()+0x24e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:984
    case 8:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    14ba:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:998
                config.save();
                delay(1000);
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
    14c4:	23 c0       	rjmp	.+70     	; 0x150c <PlayChant()+0x252>
    14c6:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <config+0x2e>
    14ca:	f9 cf       	rjmp	.-14     	; 0x14be <PlayChant()+0x204>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1001
                delay(1000);
            }
            else if ((config.EveSong2Time + 12) == bell.hour() && (config.EveSong2Time != 3))
    14cc:	23 30       	cpi	r18, 0x03	; 3
    14ce:	31 05       	cpc	r19, r1
    14d0:	b1 f2       	breq	.-84     	; 0x147e <PlayChant()+0x1c4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:989
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
            }
            else if (config.MorSong2Time == bell.hour() && config.MorSong2Time != 3)
            {
                myDFPlayer.playFolder(4, config.SongOrder);
    14d2:	60 91 43 03 	lds	r22, 0x0343	; 0x800343 <config+0x1e>
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	0e 94 6d 05 	call	0xada	; 0xada <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.17]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:990
                config.SongOrder++;
    14dc:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <config+0x1e>
    14e0:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <config+0x1f>
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x1f>
    14ea:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:991
                if (config.SongOrder > config.SongCount)
    14ee:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <config+0x1c>
    14f2:	30 91 42 03 	lds	r19, 0x0342	; 0x800342 <config+0x1d>
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	34 f4       	brge	.+12     	; 0x1508 <PlayChant()+0x24e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:992
                    config.SongOrder = 1;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <config+0x1f>
    1504:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:993
                config.save();
    1508:	0e 94 55 09 	call	0x12aa	; 0x12aa <Config::save() [clone .constprop.21]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:999
                delay(1000);
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
                delay(1000);
    150c:	68 ee       	ldi	r22, 0xE8	; 232
    150e:	73 e0       	ldi	r23, 0x03	; 3
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1019
                if (config.SlogamOrder > config.SlogamCount)
                    config.SlogamOrder = 1;
                config.save();
                delay(1000);
            }
            playSong = 9;
    1518:	89 e0       	ldi	r24, 0x09	; 9
    151a:	f5 ce       	rjmp	.-534    	; 0x1306 <PlayChant()+0x4c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1023
        }
        break;
    case 9:
        if (digitalRead(STA_PIN))
    151c:	85 e0       	ldi	r24, 0x05	; 5
    151e:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    1522:	89 2b       	or	r24, r25
    1524:	a9 f0       	breq	.+42     	; 0x1550 <PlayChant()+0x296>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1025
        {
            playSong = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <playSong>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1026
            lcd.clear();
    152c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1027
            appMode = APP_NORMAL_MODE;
    1530:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1028
            timrLCD = millis();
    1534:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    1538:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <timrLCD>
    153c:	70 93 17 03 	sts	0x0317, r23	; 0x800317 <timrLCD+0x1>
    1540:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <timrLCD+0x2>
    1544:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1029
            digitalWrite(AMP, LOW);
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	8e e0       	ldi	r24, 0x0E	; 14
    154c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1033
        }
        break;
    }
    1550:	08 95       	ret

00001552 <String::reserve(unsigned int)>:
reserve():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    155c:	88 81       	ld	r24, Y
    155e:	99 81       	ldd	r25, Y+1	; 0x01
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	59 f0       	breq	.+22     	; 0x157a <String::reserve(unsigned int)+0x28>
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	26 17       	cp	r18, r22
    156a:	37 07       	cpc	r19, r23
    156c:	30 f0       	brcs	.+12     	; 0x157a <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    156e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret
    157a:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    157c:	6f 5f       	subi	r22, 0xFF	; 255
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	59 f0       	breq	.+22     	; 0x159e <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    1588:	99 83       	std	Y+1, r25	; 0x01
    158a:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    158c:	1b 83       	std	Y+3, r17	; 0x03
    158e:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	23 2b       	or	r18, r19
    1596:	59 f7       	brne	.-42     	; 0x156e <String::reserve(unsigned int)+0x1c>
    1598:	fc 01       	movw	r30, r24
    159a:	10 82       	st	Z, r1
    159c:	e8 cf       	rjmp	.-48     	; 0x156e <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	e7 cf       	rjmp	.-50     	; 0x1570 <String::reserve(unsigned int)+0x1e>

000015a2 <operator+(StringSumHelper const&, String const&)>:
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    15b0:	fb 01       	movw	r30, r22
    15b2:	e0 80       	ld	r14, Z
    15b4:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    15b6:	e1 14       	cp	r14, r1
    15b8:	f1 04       	cpc	r15, r1
    15ba:	11 f1       	breq	.+68     	; 0x1600 <operator+(StringSumHelper const&, String const&)+0x5e>
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    15bc:	04 81       	ldd	r16, Z+4	; 0x04
    15be:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    15c0:	01 15       	cp	r16, r1
    15c2:	11 05       	cpc	r17, r1
    15c4:	a9 f0       	breq	.+42     	; 0x15f0 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	08 0f       	add	r16, r24
    15cc:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    15ce:	b8 01       	movw	r22, r16
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <String::reserve(unsigned int)>
    15d6:	88 23       	and	r24, r24
    15d8:	99 f0       	breq	.+38     	; 0x1600 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    15da:	28 81       	ld	r18, Y
    15dc:	39 81       	ldd	r19, Y+1	; 0x01
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	b7 01       	movw	r22, r14
    15e4:	82 0f       	add	r24, r18
    15e6:	93 1f       	adc	r25, r19
    15e8:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    15ec:	1d 83       	std	Y+5, r17	; 0x05
    15ee:	0c 83       	std	Y+4, r16	; 0x04
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    15f0:	ce 01       	movw	r24, r28
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <String::invalidate()>
    1606:	f4 cf       	rjmp	.-24     	; 0x15f0 <operator+(StringSumHelper const&, String const&)+0x4e>

00001608 <String::String(char const*)>:
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1608:	ef 92       	push	r14
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	ec 01       	movw	r28, r24
    1616:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    161c:	1b 82       	std	Y+3, r1	; 0x03
    161e:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1620:	1d 82       	std	Y+5, r1	; 0x05
    1622:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    1624:	fb 01       	movw	r30, r22
    1626:	01 90       	ld	r0, Z+
    1628:	00 20       	and	r0, r0
    162a:	e9 f7       	brne	.-6      	; 0x1626 <String::String(char const*)+0x1e>
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	8f 01       	movw	r16, r30
    1630:	06 1b       	sub	r16, r22
    1632:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    1634:	b8 01       	movw	r22, r16
    1636:	0e 94 a9 0a 	call	0x1552	; 0x1552 <String::reserve(unsigned int)>
    163a:	81 11       	cpse	r24, r1
    163c:	09 c0       	rjmp	.+18     	; 0x1650 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    163e:	ce 01       	movw	r24, r28
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    164c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    1650:	1d 83       	std	Y+5, r17	; 0x05
    1652:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    1654:	b7 01       	movw	r22, r14
    1656:	88 81       	ld	r24, Y
    1658:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    1666:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <strcpy>

0000166a <fmt(char*, unsigned char, ...)>:
fmt():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:69
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	e9 88       	ldd	r14, Y+17	; 0x11
    168c:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:74
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    168e:	fe 01       	movw	r30, r28
    1690:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:76

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1692:	d1 2c       	mov	r13, r1
    1694:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:70


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    1696:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1698:	ab 88       	ldd	r10, Y+19	; 0x13
    169a:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:80
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    169c:	80 e1       	ldi	r24, 0x10	; 16
    169e:	68 2e       	mov	r6, r24
    16a0:	87 2d       	mov	r24, r7
    16a2:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    16a4:	ca 14       	cp	r12, r10
    16a6:	db 04       	cpc	r13, r11
    16a8:	2c f5       	brge	.+74     	; 0x16f4 <fmt(char*, unsigned char, ...)+0x8a>
    16aa:	2f e0       	ldi	r18, 0x0F	; 15
    16ac:	27 15       	cp	r18, r7
    16ae:	10 f1       	brcs	.+68     	; 0x16f4 <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    16b0:	4f 01       	movw	r8, r30
    16b2:	22 e0       	ldi	r18, 0x02	; 2
    16b4:	82 0e       	add	r8, r18
    16b6:	91 1c       	adc	r9, r1
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:79
    unsigned char len = strlen(str);
    16bc:	fb 01       	movw	r30, r22
    16be:	01 90       	ld	r0, Z+
    16c0:	00 20       	and	r0, r0
    16c2:	e9 f7       	brne	.-6      	; 0x16be <fmt(char*, unsigned char, ...)+0x54>
    16c4:	31 97       	sbiw	r30, 0x01	; 1
    16c6:	8f 01       	movw	r16, r30
    16c8:	06 1b       	sub	r16, r22
    16ca:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:80
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    16cc:	9c 01       	movw	r18, r24
    16ce:	20 0f       	add	r18, r16
    16d0:	31 1d       	adc	r19, r1
    16d2:	46 2d       	mov	r20, r6
    16d4:	47 19       	sub	r20, r7
    16d6:	21 31       	cpi	r18, 0x11	; 17
    16d8:	31 05       	cpc	r19, r1
    16da:	0c f4       	brge	.+2      	; 0x16de <fmt(char*, unsigned char, ...)+0x74>
    16dc:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:82

    strncpy((dest + buflen), str, cpylen);
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	8e 0d       	add	r24, r14
    16e2:	9f 1d       	adc	r25, r15
    16e4:	0e 94 c9 21 	call	0x4392	; 0x4392 <strncpy>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:83
    buflen += len;
    16e8:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	c8 1a       	sub	r12, r24
    16ee:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    16f0:	f4 01       	movw	r30, r8
    16f2:	d6 cf       	rjmp	.-84     	; 0x16a0 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:86

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    16f4:	8e 0d       	add	r24, r14
    16f6:	9f 1d       	adc	r25, r15
    16f8:	fc 01       	movw	r30, r24
    16fa:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:88
  return dest;
}
    16fc:	c7 01       	movw	r24, r14
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	bf 90       	pop	r11
    1710:	af 90       	pop	r10
    1712:	9f 90       	pop	r9
    1714:	8f 90       	pop	r8
    1716:	7f 90       	pop	r7
    1718:	6f 90       	pop	r6
    171a:	08 95       	ret

0000171c <Config::getFormattedStr(unsigned char) [clone .constprop.62]>:
getFormattedStr():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:55
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	65 97       	sbiw	r28, 0x15	; 21
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:59
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    1744:	82 50       	subi	r24, 0x02	; 2
    1746:	88 31       	cpi	r24, 0x18	; 24
    1748:	08 f0       	brcs	.+2      	; 0x174c <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x30>
    174a:	ec c1       	rjmp	.+984    	; 0x1b24 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x408>
    174c:	e8 2f       	mov	r30, r24
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	e4 55       	subi	r30, 0x54	; 84
    1752:	f4 4f       	sbci	r31, 0xF4	; 244
    1754:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__tablejump2__>
    1758:	c4 0b       	sbc	r28, r20
    175a:	2e 0c       	add	r2, r14
    175c:	92 0d       	add	r25, r2
    175e:	8e 0c       	add	r8, r14
    1760:	ba 0c       	add	r11, r10
    1762:	d9 0c       	add	r13, r9
    1764:	e4 0c       	add	r14, r4
    1766:	f1 0c       	add	r15, r1
    1768:	92 0d       	add	r25, r2
    176a:	fa 0c       	add	r15, r10
    176c:	1f 0d       	add	r17, r15
    176e:	92 0d       	add	r25, r2
    1770:	28 0d       	add	r18, r8
    1772:	35 0d       	add	r19, r5
    1774:	3a 0d       	add	r19, r10
    1776:	48 0d       	add	r20, r8
    1778:	4d 0d       	add	r20, r13
    177a:	52 0d       	add	r21, r2
    177c:	74 0d       	add	r23, r4
    177e:	79 0d       	add	r23, r9
    1780:	92 0d       	add	r25, r2
    1782:	8f 0d       	add	r24, r15
    1784:	8a 0d       	add	r24, r10
    1786:	85 0d       	add	r24, r5
toDateStr():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:30
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1788:	1d 8a       	std	Y+21, r1	; 0x15
    178a:	1c 8a       	std	Y+20, r1	; 0x14
    178c:	8f e2       	ldi	r24, 0x2F	; 47
    178e:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:34
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1790:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <StDate>
    1794:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <StDate+0x1>
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:35
  lpad(dat, intbuf, '0', 2);
    17a0:	8e 01       	movw	r16, r28
    17a2:	0f 5e       	subi	r16, 0xEF	; 239
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	42 e0       	ldi	r20, 0x02	; 2
    17a8:	be 01       	movw	r22, r28
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c8 01       	movw	r24, r16
    17b0:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:36
  inttostr(intbuf, StMonth);
    17b4:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <StMonth>
    17b8:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <StMonth+0x1>
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:37
  lpad(mon, intbuf, '0', 2);
    17c4:	7e 01       	movw	r14, r28
    17c6:	8e e0       	ldi	r24, 0x0E	; 14
    17c8:	e8 0e       	add	r14, r24
    17ca:	f1 1c       	adc	r15, r1
    17cc:	42 e0       	ldi	r20, 0x02	; 2
    17ce:	be 01       	movw	r22, r28
    17d0:	6f 5f       	subi	r22, 0xFF	; 255
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	c7 01       	movw	r24, r14
    17d6:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:38
  inttostr(intbuf, StYear);
    17da:	60 91 1f 03 	lds	r22, 0x031F	; 0x80031f <StYear>
    17de:	70 91 20 03 	lds	r23, 0x0320	; 0x800320 <StYear+0x1>
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:39
  lpad(year, intbuf, '0', 4);
    17ea:	6e 01       	movw	r12, r28
    17ec:	99 e0       	ldi	r25, 0x09	; 9
    17ee:	c9 0e       	add	r12, r25
    17f0:	d1 1c       	adc	r13, r1
    17f2:	44 e0       	ldi	r20, 0x04	; 4
    17f4:	be 01       	movw	r22, r28
    17f6:	6f 5f       	subi	r22, 0xFF	; 255
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	c6 01       	movw	r24, r12
    17fc:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:41

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    1800:	df 92       	push	r13
    1802:	cf 92       	push	r12
    1804:	ce 01       	movw	r24, r28
    1806:	44 96       	adiw	r24, 0x14	; 20
    1808:	9f 93       	push	r25
    180a:	8f 93       	push	r24
    180c:	ff 92       	push	r15
    180e:	ef 92       	push	r14
    1810:	9f 93       	push	r25
    1812:	8f 93       	push	r24
    1814:	1f 93       	push	r17
    1816:	0f 93       	push	r16
    1818:	85 e0       	ldi	r24, 0x05	; 5
    181a:	8f 93       	push	r24
    181c:	89 e5       	ldi	r24, 0x59	; 89
    181e:	93 e0       	ldi	r25, 0x03	; 3
    1820:	9f 93       	push	r25
    1822:	8f 93       	push	r24
    1824:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
toTimeStr():
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
getFormattedStr():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:136
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1832:	89 e5       	ldi	r24, 0x59	; 89
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	65 96       	adiw	r28, 0x15	; 21
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	9f 90       	pop	r9
    1858:	8f 90       	pop	r8
    185a:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:65
  {
  case mnuCmdSetDate:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    185c:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <StHr>
    1860:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <StHr+0x1>
    1864:	2c e3       	ldi	r18, 0x3C	; 60
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__usmulhisi3>
    186c:	00 91 55 03 	lds	r16, 0x0355	; 0x800355 <StMin>
    1870:	10 91 56 03 	lds	r17, 0x0356	; 0x800356 <StMin+0x1>
    1874:	01 2e       	mov	r0, r17
    1876:	00 0c       	add	r0, r0
    1878:	22 0b       	sbc	r18, r18
    187a:	33 0b       	sbc	r19, r19
    187c:	60 0f       	add	r22, r16
    187e:	71 1f       	adc	r23, r17
    1880:	82 1f       	adc	r24, r18
    1882:	93 1f       	adc	r25, r19
toTimeStr():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:10
short StDate, StMonth, StYear, StHr, StMin, demoTime = 5;
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";
char *toTimeStr(char *buf, long timeval, char separator)
{
  char sepstr[] = {separator, 0};
    1884:	1a 8a       	std	Y+18, r1	; 0x12
    1886:	19 8a       	std	Y+17, r1	; 0x11
    1888:	2a e3       	ldi	r18, 0x3A	; 58
    188a:	29 8b       	std	Y+17, r18	; 0x11
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:12

  short hours = timeval / 60;
    188c:	2c e3       	ldi	r18, 0x3C	; 60
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__divmodsi4>
    1898:	4b 01       	movw	r8, r22
    189a:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:14
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    189c:	2d 30       	cpi	r18, 0x0D	; 13
    189e:	31 05       	cpc	r19, r1
    18a0:	14 f0       	brlt	.+4      	; 0x18a6 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x18a>
    18a2:	2c 50       	subi	r18, 0x0C	; 12
    18a4:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:19
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    18a6:	b9 01       	movw	r22, r18
    18a8:	ce 01       	movw	r24, r28
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:20
  lpad(h, intbuf, '0', 2);
    18b0:	8e 01       	movw	r16, r28
    18b2:	02 5f       	subi	r16, 0xF2	; 242
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	be 01       	movw	r22, r28
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	c8 01       	movw	r24, r16
    18c0:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:21
  inttostr(intbuf, mins);
    18c4:	b4 01       	movw	r22, r8
    18c6:	ce 01       	movw	r24, r28
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:22
  lpad(m, intbuf, '0', 2);
    18ce:	6e 01       	movw	r12, r28
    18d0:	89 e0       	ldi	r24, 0x09	; 9
    18d2:	c8 0e       	add	r12, r24
    18d4:	d1 1c       	adc	r13, r1
    18d6:	42 e0       	ldi	r20, 0x02	; 2
    18d8:	be 01       	movw	r22, r28
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	c6 01       	movw	r24, r12
    18e0:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:24

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    18e4:	9c e0       	ldi	r25, 0x0C	; 12
    18e6:	e9 16       	cp	r14, r25
    18e8:	f1 04       	cpc	r15, r1
    18ea:	ac f4       	brge	.+42     	; 0x1916 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x1fa>
getFormattedStr():
    18ec:	83 e7       	ldi	r24, 0x73	; 115
    18ee:	91 e0       	ldi	r25, 0x01	; 1
toTimeStr():
    18f0:	9f 93       	push	r25
    18f2:	8f 93       	push	r24
    18f4:	df 92       	push	r13
    18f6:	cf 92       	push	r12
    18f8:	ce 01       	movw	r24, r28
    18fa:	41 96       	adiw	r24, 0x11	; 17
    18fc:	9f 93       	push	r25
    18fe:	8f 93       	push	r24
    1900:	1f 93       	push	r17
    1902:	0f 93       	push	r16
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	8f 93       	push	r24
    1908:	89 e5       	ldi	r24, 0x59	; 89
    190a:	93 e0       	ldi	r25, 0x03	; 3
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    1914:	89 cf       	rjmp	.-238    	; 0x1828 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x10c>
getFormattedStr():
    1916:	8c e6       	ldi	r24, 0x6C	; 108
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	ea cf       	rjmp	.-44     	; 0x18f0 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x1d4>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:68
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    191c:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <config+0xf>
    1920:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <config+0x10>
    1924:	6d 30       	cpi	r22, 0x0D	; 13
    1926:	71 05       	cpc	r23, r1
    1928:	14 f0       	brlt	.+4      	; 0x192e <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x212>
    192a:	6c 50       	subi	r22, 0x0C	; 12
    192c:	71 09       	sbc	r23, r1
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:69
    lpad(h, intbuf, '0', 2);
    1936:	8e 01       	movw	r16, r28
    1938:	07 5f       	subi	r16, 0xF7	; 247
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	42 e0       	ldi	r20, 0x02	; 2
    193e:	be 01       	movw	r22, r28
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	c8 01       	movw	r24, r16
    1946:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:70
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    194a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <config+0xf>
    194e:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <config+0x10>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:75
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1952:	0c 97       	sbiw	r24, 0x0c	; 12
    1954:	5c f5       	brge	.+86     	; 0x19ac <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x290>
    1956:	80 e7       	ldi	r24, 0x70	; 112
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	9f 93       	push	r25
    195c:	8f 93       	push	r24
    195e:	1f 93       	push	r17
    1960:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:107
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	8f 93       	push	r24
    1966:	89 e5       	ldi	r24, 0x59	; 89
    1968:	93 e0       	ldi	r25, 0x03	; 3
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    1972:	5a cf       	rjmp	.-332    	; 0x1828 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x10c>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:73
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    1974:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <config+0x11>
    1978:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <config+0x12>
    197c:	6d 30       	cpi	r22, 0x0D	; 13
    197e:	71 05       	cpc	r23, r1
    1980:	14 f0       	brlt	.+4      	; 0x1986 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x26a>
    1982:	6c 50       	subi	r22, 0x0C	; 12
    1984:	71 09       	sbc	r23, r1
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:74
    lpad(h, intbuf, '0', 2);
    198e:	8e 01       	movw	r16, r28
    1990:	07 5f       	subi	r16, 0xF7	; 247
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	42 e0       	ldi	r20, 0x02	; 2
    1996:	be 01       	movw	r22, r28
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	c8 01       	movw	r24, r16
    199e:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:75
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    19a2:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <config+0x11>
    19a6:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <config+0x12>
    19aa:	d3 cf       	rjmp	.-90     	; 0x1952 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x236>
    19ac:	89 e6       	ldi	r24, 0x69	; 105
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	d4 cf       	rjmp	.-88     	; 0x195a <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x23e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:78
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, SlogamCount), " Songs");
    19b2:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <config+0x1a>
    19b6:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <config+0x1b>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:107
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
    19c2:	2b e7       	ldi	r18, 0x7B	; 123
    19c4:	31 e0       	ldi	r19, 0x01	; 1
    19c6:	0a c0       	rjmp	.+20     	; 0x19dc <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2c0>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:81
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, SlogamCount), " Songs");
    break;
  case mnuCmdBakLitDur:
    fmt(strbuf, 2, inttostr(intbuf, backLightDur), " Seconds");
    19c8:	60 91 38 03 	lds	r22, 0x0338	; 0x800338 <config+0x13>
    19cc:	70 91 39 03 	lds	r23, 0x0339	; 0x800339 <config+0x14>
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
    19d8:	22 e8       	ldi	r18, 0x82	; 130
    19da:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:107
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    19dc:	3f 93       	push	r19
    19de:	2f 93       	push	r18
    19e0:	34 c0       	rjmp	.+104    	; 0x1a4a <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x32e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:84
    break;
  case mnuCmdBakLitDur:
    fmt(strbuf, 2, inttostr(intbuf, backLightDur), " Seconds");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    19e2:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <config+0x15>
    19e6:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <config+0x16>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:126
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
    19f2:	85 c0       	rjmp	.+266    	; 0x1afe <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x3e2>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:87
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    19f4:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <demoTime>
    19f8:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <demoTime+0x1>
    19fc:	b8 01       	movw	r22, r16
    19fe:	0d 30       	cpi	r16, 0x0D	; 13
    1a00:	11 05       	cpc	r17, r1
    1a02:	14 f0       	brlt	.+4      	; 0x1a08 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2ec>
    1a04:	6c 50       	subi	r22, 0x0C	; 12
    1a06:	71 09       	sbc	r23, r1
    1a08:	ce 01       	movw	r24, r28
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:88
    lpad(h, intbuf, '0', 2);
    1a10:	7e 01       	movw	r14, r28
    1a12:	99 e0       	ldi	r25, 0x09	; 9
    1a14:	e9 0e       	add	r14, r25
    1a16:	f1 1c       	adc	r15, r1
    1a18:	42 e0       	ldi	r20, 0x02	; 2
    1a1a:	be 01       	movw	r22, r28
    1a1c:	6f 5f       	subi	r22, 0xFF	; 255
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	c7 01       	movw	r24, r14
    1a22:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:89
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1a26:	80 e7       	ldi	r24, 0x70	; 112
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	0c 30       	cpi	r16, 0x0C	; 12
    1a2c:	11 05       	cpc	r17, r1
    1a2e:	14 f0       	brlt	.+4      	; 0x1a34 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x318>
    1a30:	89 e6       	ldi	r24, 0x69	; 105
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	9f 93       	push	r25
    1a36:	8f 93       	push	r24
    1a38:	ff 92       	push	r15
    1a3a:	ef 92       	push	r14
    1a3c:	92 cf       	rjmp	.-220    	; 0x1962 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x246>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:92
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1a3e:	8b e8       	ldi	r24, 0x8B	; 139
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	9f 93       	push	r25
    1a44:	8f 93       	push	r24
    1a46:	83 e9       	ldi	r24, 0x93	; 147
    1a48:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:107
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1a4a:	9f 93       	push	r25
    1a4c:	8f 93       	push	r24
    1a4e:	89 cf       	rjmp	.-238    	; 0x1962 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x246>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:95
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1a50:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <config+0x24>
    1a54:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <config+0x25>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:98
    break;
  case mnuCmdMorSong2Time:
    fmt(strbuf, 2, MorSong2Time == 3 ? "OFF" : inttostr(intbuf, MorSong2Time), MorSong2Time == 3 ? "" : " AM");
    1a58:	63 30       	cpi	r22, 0x03	; 3
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x344>
    1a5e:	69 c0       	rjmp	.+210    	; 0x1b32 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x416>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:104
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    1a60:	2b e3       	ldi	r18, 0x3B	; 59
    1a62:	32 e0       	ldi	r19, 0x02	; 2
    1a64:	87 e7       	ldi	r24, 0x77	; 119
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	b9 cf       	rjmp	.-142    	; 0x19dc <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2c0>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:98
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdMorSong2Time:
    fmt(strbuf, 2, MorSong2Time == 3 ? "OFF" : inttostr(intbuf, MorSong2Time), MorSong2Time == 3 ? "" : " AM");
    1a6a:	60 91 4b 03 	lds	r22, 0x034B	; 0x80034b <config+0x26>
    1a6e:	70 91 4c 03 	lds	r23, 0x034C	; 0x80034c <config+0x27>
    1a72:	f2 cf       	rjmp	.-28     	; 0x1a58 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x33c>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:101
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1a74:	60 91 4d 03 	lds	r22, 0x034D	; 0x80034d <config+0x28>
    1a78:	70 91 4e 03 	lds	r23, 0x034E	; 0x80034e <config+0x29>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:104
    break;
  case mnuCmdEveSong2Time:
    fmt(strbuf, 2, EveSong2Time == 3 ? "OFF" : inttostr(intbuf, EveSong2Time), EveSong2Time == 3 ? "" : " PM");
    1a7c:	63 30       	cpi	r22, 0x03	; 3
    1a7e:	71 05       	cpc	r23, r1
    1a80:	79 f3       	breq	.-34     	; 0x1a60 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x344>
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
    1a8a:	2c e6       	ldi	r18, 0x6C	; 108
    1a8c:	31 e0       	ldi	r19, 0x01	; 1
    1a8e:	a6 cf       	rjmp	.-180    	; 0x19dc <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2c0>
    1a90:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <config+0x2a>
    1a94:	70 91 50 03 	lds	r23, 0x0350	; 0x800350 <config+0x2b>
    1a98:	f1 cf       	rjmp	.-30     	; 0x1a7c <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x360>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:107
    break;
  case mnuCmdSongCount:
    fmt(strbuf, 2, inttostr(intbuf, SongCount), " Songs");
    1a9a:	60 91 41 03 	lds	r22, 0x0341	; 0x800341 <config+0x1c>
    1a9e:	70 91 42 03 	lds	r23, 0x0342	; 0x800342 <config+0x1d>
    1aa2:	8b cf       	rjmp	.-234    	; 0x19ba <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x29e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:110
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1aa4:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <config+0x2c>
    1aa8:	70 91 52 03 	lds	r23, 0x0352	; 0x800352 <config+0x2d>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:115
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:116
    lpad(h, intbuf, '0', 3);
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	07 5f       	subi	r16, 0xF7	; 247
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	43 e0       	ldi	r20, 0x03	; 3
    1abc:	be 01       	movw	r22, r28
    1abe:	6f 5f       	subi	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:117
    fmt(strbuf, 1, h);
    1ac8:	1f 93       	push	r17
    1aca:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:126
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	8f 93       	push	r24
    1ad0:	89 e5       	ldi	r24, 0x59	; 89
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	a5 ce       	rjmp	.-694    	; 0x1832 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x116>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:115
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1ae8:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <config+0x2e>
    1aec:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <config+0x2f>
    1af0:	dd cf       	rjmp	.-70     	; 0x1aac <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x390>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:120
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1af2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x17>
    1af6:	88 23       	and	r24, r24
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x3e8>
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:126
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	e4 cf       	rjmp	.-56     	; 0x1acc <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x3b0>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:120
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1b04:	87 e7       	ldi	r24, 0x77	; 119
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	fa cf       	rjmp	.-12     	; 0x1afe <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x3e2>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:123
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    1b0a:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <config+0x22>
    1b0e:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <config+0x23>
    1b12:	6b cf       	rjmp	.-298    	; 0x19ea <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2ce>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:126
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b14:	60 91 45 03 	lds	r22, 0x0345	; 0x800345 <config+0x20>
    1b18:	70 91 46 03 	lds	r23, 0x0346	; 0x800346 <config+0x21>
    1b1c:	66 cf       	rjmp	.-308    	; 0x19ea <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2ce>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:129
    break;      
  case mnuCmdReset:
    strbuf[0] = 0;
    1b1e:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <strbuf>
    1b22:	87 ce       	rjmp	.-754    	; 0x1832 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x116>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:132
    break;
  default:
    strcpy(strbuf, NotImp);
    1b24:	63 e3       	ldi	r22, 0x33	; 51
    1b26:	71 e0       	ldi	r23, 0x01	; 1
    1b28:	89 e5       	ldi	r24, 0x59	; 89
    1b2a:	93 e0       	ldi	r25, 0x03	; 3
    1b2c:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
    1b30:	80 ce       	rjmp	.-768    	; 0x1832 <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x116>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:98
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdMorSong2Time:
    fmt(strbuf, 2, MorSong2Time == 3 ? "OFF" : inttostr(intbuf, MorSong2Time), MorSong2Time == 3 ? "" : " AM");
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
    1b3a:	23 e7       	ldi	r18, 0x73	; 115
    1b3c:	31 e0       	ldi	r19, 0x01	; 1
    1b3e:	4e cf       	rjmp	.-356    	; 0x19dc <Config::getFormattedStr(unsigned char) [clone .constprop.62]+0x2c0>

00001b40 <refreshMenuDisplay(unsigned char)>:
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:869
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	67 97       	sbiw	r28, 0x17	; 23
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:872
    char nameBuf[LCD_COLS + 1];

    lcd.setCursor(0, 0);
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:873
    if (Menu1.currentItemHasChildren())
    1b5e:	0e 94 c6 01 	call	0x38c	; 0x38c <MenuManager::currentItemHasChildren() [clone .constprop.86]>
    1b62:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <Menu1+0x6>
    1b66:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <Menu1+0x3>
    1b6a:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <Menu1+0x4>
    1b6e:	88 23       	and	r24, r24
    1b70:	49 f1       	breq	.+82     	; 0x1bc4 <refreshMenuDisplay(unsigned char)+0x84>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    1b72:	86 e0       	ldi	r24, 0x06	; 6
    1b74:	98 9f       	mul	r25, r24
    1b76:	e0 0d       	add	r30, r0
    1b78:	f1 1d       	adc	r31, r1
    1b7a:	11 24       	eor	r1, r1
    1b7c:	31 96       	adiw	r30, 0x01	; 1
    1b7e:	65 91       	lpm	r22, Z+
    1b80:	74 91       	lpm	r23, Z
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <strcpy_P>
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:875
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1b8a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:876
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    1b8e:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:888
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1b90:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:889
            lcd.print(strbuf);
    1b94:	88 ee       	ldi	r24, 0xE8	; 232
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:890
            lcd.setCursor(0, 1);
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:891
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    1ba4:	8e e1       	ldi	r24, 0x1E	; 30
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:904
                StYear = rtc.now().year();
            }
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1ba8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>
    1bac:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:907
        }
    }
}
    1bb0:	67 96       	adiw	r28, 0x17	; 23
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	08 95       	ret
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:53
    1bc4:	86 e0       	ldi	r24, 0x06	; 6
    1bc6:	98 9f       	mul	r25, r24
    1bc8:	e0 0d       	add	r30, r0
    1bca:	f1 1d       	adc	r31, r1
    1bcc:	11 24       	eor	r1, r1
    1bce:	31 96       	adiw	r30, 0x01	; 1
    1bd0:	65 91       	lpm	r22, Z+
    1bd2:	74 91       	lpm	r23, Z
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <strcpy_P>
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:884
        lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
    }
    else
    {
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1bdc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:886

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    1be0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
    1be4:	18 2f       	mov	r17, r24
    1be6:	81 11       	cpse	r24, r1
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <refreshMenuDisplay(unsigned char)+0xae>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:888
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1bea:	8f e7       	ldi	r24, 0x7F	; 127
    1bec:	d1 cf       	rjmp	.-94     	; 0x1b90 <refreshMenuDisplay(unsigned char)+0x50>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:895
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            if (cmdId == mnuCmdSetDate)
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	01 f5       	brne	.+64     	; 0x1c32 <refreshMenuDisplay(unsigned char)+0xf2>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:897
            {
                StDate = rtc.now().day();
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	42 96       	adiw	r24, 0x12	; 18
    1bf6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    1bfa:	8c 89       	ldd	r24, Y+20	; 0x14
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <StDate+0x1>
    1c02:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:898
                StMonth = rtc.now().month();
    1c06:	ce 01       	movw	r24, r28
    1c08:	42 96       	adiw	r24, 0x12	; 18
    1c0a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    1c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <StMonth+0x1>
    1c16:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:899
                StYear = rtc.now().year();
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	42 96       	adiw	r24, 0x12	; 18
    1c1e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	80 53       	subi	r24, 0x30	; 48
    1c28:	98 4f       	sbci	r25, 0xF8	; 248
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:899
    1c2a:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <StYear+0x1>
    1c2e:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <StYear>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:901
            }
            lcd.print(strbuf);
    1c32:	88 ee       	ldi	r24, 0xE8	; 232
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:902
            lcd.setCursor(0, 1);
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:903
            lcd.print(" ");
    1c42:	8a e3       	ldi	r24, 0x3A	; 58
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:904
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1c4a:	81 2f       	mov	r24, r17
    1c4c:	0e 94 8e 0b 	call	0x171c	; 0x171c <Config::getFormattedStr(unsigned char) [clone .constprop.62]>
    1c50:	ab cf       	rjmp	.-170    	; 0x1ba8 <refreshMenuDisplay(unsigned char)+0x68>

00001c52 <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	8f 93       	push	r24
    1c62:	9f 93       	push	r25
    1c64:	af 93       	push	r26
    1c66:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1c68:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_millis>
    1c6c:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_millis+0x1>
    1c70:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_millis+0x2>
    1c74:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1c78:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1c7c:	23 e0       	ldi	r18, 0x03	; 3
    1c7e:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1c80:	2d 37       	cpi	r18, 0x7D	; 125
    1c82:	68 f1       	brcs	.+90     	; 0x1cde <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1c84:	26 e8       	ldi	r18, 0x86	; 134
    1c86:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1c88:	02 96       	adiw	r24, 0x02	; 2
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1c8e:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1c92:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer0_millis>
    1c96:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer0_millis+0x1>
    1c9a:	a0 93 c3 02 	sts	0x02C3, r26	; 0x8002c3 <timer0_millis+0x2>
    1c9e:	b0 93 c4 02 	sts	0x02C4, r27	; 0x8002c4 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1ca2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_overflow_count>
    1ca6:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x1>
    1caa:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x2>
    1cae:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_overflow_count+0x3>
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	b1 1d       	adc	r27, r1
    1cb8:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <timer0_overflow_count>
    1cbc:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <timer0_overflow_count+0x1>
    1cc0:	a0 93 c7 02 	sts	0x02C7, r26	; 0x8002c7 <timer0_overflow_count+0x2>
    1cc4:	b0 93 c8 02 	sts	0x02C8, r27	; 0x8002c8 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1cc8:	bf 91       	pop	r27
    1cca:	af 91       	pop	r26
    1ccc:	9f 91       	pop	r25
    1cce:	8f 91       	pop	r24
    1cd0:	3f 91       	pop	r19
    1cd2:	2f 91       	pop	r18
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	b1 1d       	adc	r27, r1
    1ce4:	d4 cf       	rjmp	.-88     	; 0x1c8e <__vector_16+0x3c>

00001ce6 <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    1ce6:	1f 92       	push	r1
    1ce8:	0f 92       	push	r0
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	0f 92       	push	r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	2f 93       	push	r18
    1cf2:	3f 93       	push	r19
    1cf4:	4f 93       	push	r20
    1cf6:	5f 93       	push	r21
    1cf8:	6f 93       	push	r22
    1cfa:	7f 93       	push	r23
    1cfc:	8f 93       	push	r24
    1cfe:	9f 93       	push	r25
    1d00:	af 93       	push	r26
    1d02:	bf 93       	push	r27
    1d04:	ef 93       	push	r30
    1d06:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1d08:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <SoftwareSerial::active_object>
    1d0c:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <SoftwareSerial::active_object+0x1>
    1d10:	30 97       	sbiw	r30, 0x00	; 0
    1d12:	49 f0       	breq	.+18     	; 0x1d26 <__vector_3+0x40>
    1d14:	a6 85       	ldd	r26, Z+14	; 0x0e
    1d16:	b7 85       	ldd	r27, Z+15	; 0x0f
    1d18:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1d1a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1d1c:	91 ff       	sbrs	r25, 1
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1d20:	9c 91       	ld	r25, X
    1d22:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1d24:	a1 f4       	brne	.+40     	; 0x1d4e <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1d48:	9c 91       	ld	r25, X
    1d4a:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1d4c:	61 f7       	brne	.-40     	; 0x1d26 <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1d4e:	a3 89       	ldd	r26, Z+19	; 0x13
    1d50:	b4 89       	ldd	r27, Z+20	; 0x14
    1d52:	9c 91       	ld	r25, X
    1d54:	85 89       	ldd	r24, Z+21	; 0x15
    1d56:	80 95       	com	r24
    1d58:	89 23       	and	r24, r25
    1d5a:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    1d5c:	86 89       	ldd	r24, Z+22	; 0x16
    1d5e:	97 89       	ldd	r25, Z+23	; 0x17
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    1d64:	60 8d       	ldd	r22, Z+24	; 0x18
    1d66:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1d68:	a6 85       	ldd	r26, Z+14	; 0x0e
    1d6a:	b7 85       	ldd	r27, Z+15	; 0x0f
    1d6c:	55 85       	ldd	r21, Z+13	; 0x0d
    1d6e:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    1d70:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    1d72:	cb 01       	movw	r24, r22
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    1d78:	82 2f       	mov	r24, r18
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	95 95       	asr	r25
    1d7e:	87 95       	ror	r24
    1d80:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1d82:	4c 91       	ld	r20, X
    1d84:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    1d88:	20 68       	ori	r18, 0x80	; 128
    1d8a:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    1d8c:	91 f7       	brne	.-28     	; 0x1d72 <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    1d8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d90:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    1d92:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    1d94:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	8f 73       	andi	r24, 0x3F	; 63
    1d9e:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    1da0:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
    1da4:	38 17       	cp	r19, r24
    1da6:	99 f0       	breq	.+38     	; 0x1dce <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    1da8:	a0 91 ca 02 	lds	r26, 0x02CA	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	a0 58       	subi	r26, 0x80	; 128
    1db0:	bd 4f       	sbci	r27, 0xFD	; 253
    1db2:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    1db4:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    1db8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dba:	93 8d       	ldd	r25, Z+27	; 0x1b
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    1dc0:	a3 89       	ldd	r26, Z+19	; 0x13
    1dc2:	b4 89       	ldd	r27, Z+20	; 0x14
    1dc4:	8c 91       	ld	r24, X
    1dc6:	95 89       	ldd	r25, Z+21	; 0x15
    1dc8:	89 2b       	or	r24, r25
    1dca:	8c 93       	st	X, r24
    1dcc:	ac cf       	rjmp	.-168    	; 0x1d26 <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    1dce:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dd0:	81 60       	ori	r24, 0x01	; 1
    1dd2:	86 8f       	std	Z+30, r24	; 0x1e
    1dd4:	f1 cf       	rjmp	.-30     	; 0x1db8 <__vector_3+0xd2>

00001dd6 <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    1dd6:	1f 92       	push	r1
    1dd8:	0f 92       	push	r0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	0f 92       	push	r0
    1dde:	11 24       	eor	r1, r1
    1de0:	2f 93       	push	r18
    1de2:	3f 93       	push	r19
    1de4:	4f 93       	push	r20
    1de6:	5f 93       	push	r21
    1de8:	6f 93       	push	r22
    1dea:	7f 93       	push	r23
    1dec:	8f 93       	push	r24
    1dee:	9f 93       	push	r25
    1df0:	af 93       	push	r26
    1df2:	bf 93       	push	r27
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    1df8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1dfc:	88 7f       	andi	r24, 0xF8	; 248
    1dfe:	80 36       	cpi	r24, 0x60	; 96
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <__vector_24+0x2e>
    1e02:	4a c0       	rjmp	.+148    	; 0x1e98 <__vector_24+0xc2>
    1e04:	f0 f5       	brcc	.+124    	; 0x1e82 <__vector_24+0xac>
    1e06:	88 32       	cpi	r24, 0x28	; 40
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <__vector_24+0x36>
    1e0a:	a7 c0       	rjmp	.+334    	; 0x1f5a <__vector_24+0x184>
    1e0c:	18 f5       	brcc	.+70     	; 0x1e54 <__vector_24+0x7e>
    1e0e:	80 31       	cpi	r24, 0x10	; 16
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__vector_24+0x3e>
    1e12:	9b c0       	rjmp	.+310    	; 0x1f4a <__vector_24+0x174>
    1e14:	b8 f4       	brcc	.+46     	; 0x1e44 <__vector_24+0x6e>
    1e16:	88 23       	and	r24, r24
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <__vector_24+0x46>
    1e1a:	f9 c0       	rjmp	.+498    	; 0x200e <__vector_24+0x238>
    1e1c:	88 30       	cpi	r24, 0x08	; 8
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <__vector_24+0x4c>
    1e20:	94 c0       	rjmp	.+296    	; 0x1f4a <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1e22:	ff 91       	pop	r31
    1e24:	ef 91       	pop	r30
    1e26:	bf 91       	pop	r27
    1e28:	af 91       	pop	r26
    1e2a:	9f 91       	pop	r25
    1e2c:	8f 91       	pop	r24
    1e2e:	7f 91       	pop	r23
    1e30:	6f 91       	pop	r22
    1e32:	5f 91       	pop	r21
    1e34:	4f 91       	pop	r20
    1e36:	3f 91       	pop	r19
    1e38:	2f 91       	pop	r18
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	0f 90       	pop	r0
    1e40:	1f 90       	pop	r1
    1e42:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e44:	88 31       	cpi	r24, 0x18	; 24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <__vector_24+0x74>
    1e48:	88 c0       	rjmp	.+272    	; 0x1f5a <__vector_24+0x184>
    1e4a:	80 32       	cpi	r24, 0x20	; 32
    1e4c:	51 f7       	brne	.-44     	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e4e:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <twi_error>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e54:	80 34       	cpi	r24, 0x40	; 64
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <__vector_24+0x84>
    1e58:	9d c0       	rjmp	.+314    	; 0x1f94 <__vector_24+0x1be>
    1e5a:	40 f4       	brcc	.+16     	; 0x1e6c <__vector_24+0x96>
    1e5c:	80 33       	cpi	r24, 0x30	; 48
    1e5e:	b9 f3       	breq	.-18     	; 0x1e4e <__vector_24+0x78>
    1e60:	88 33       	cpi	r24, 0x38	; 56
    1e62:	f9 f6       	brne	.-66     	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e64:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e68:	85 ec       	ldi	r24, 0xC5	; 197
    1e6a:	b0 c0       	rjmp	.+352    	; 0x1fcc <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e6c:	80 35       	cpi	r24, 0x50	; 80
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__vector_24+0x9c>
    1e70:	85 c0       	rjmp	.+266    	; 0x1f7c <__vector_24+0x1a6>
    1e72:	88 35       	cpi	r24, 0x58	; 88
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <__vector_24+0xa2>
    1e76:	96 c0       	rjmp	.+300    	; 0x1fa4 <__vector_24+0x1ce>
    1e78:	88 34       	cpi	r24, 0x48	; 72
    1e7a:	99 f6       	brne	.-90     	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1e7c:	0e 94 20 06 	call	0xc40	; 0xc40 <twi_stop>
    1e80:	d0 cf       	rjmp	.-96     	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e82:	88 39       	cpi	r24, 0x98	; 152
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <__vector_24+0xb2>
    1e86:	8c c0       	rjmp	.+280    	; 0x1fa0 <__vector_24+0x1ca>
    1e88:	38 f5       	brcc	.+78     	; 0x1ed8 <__vector_24+0x102>
    1e8a:	88 37       	cpi	r24, 0x78	; 120
    1e8c:	29 f0       	breq	.+10     	; 0x1e98 <__vector_24+0xc2>
    1e8e:	50 f4       	brcc	.+20     	; 0x1ea4 <__vector_24+0xce>
    1e90:	88 36       	cpi	r24, 0x68	; 104
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <__vector_24+0xc2>
    1e94:	80 37       	cpi	r24, 0x70	; 112
    1e96:	29 f6       	brne	.-118    	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e9e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <twi_rxBufferIndex>
    1ea2:	57 c0       	rjmp	.+174    	; 0x1f52 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ea4:	88 38       	cpi	r24, 0x88	; 136
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <__vector_24+0xd4>
    1ea8:	7b c0       	rjmp	.+246    	; 0x1fa0 <__vector_24+0x1ca>
    1eaa:	80 39       	cpi	r24, 0x90	; 144
    1eac:	19 f0       	breq	.+6      	; 0x1eb4 <__vector_24+0xde>
    1eae:	80 38       	cpi	r24, 0x80	; 128
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <__vector_24+0xde>
    1eb2:	b7 cf       	rjmp	.-146    	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1eb4:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <twi_rxBufferIndex>
    1eb8:	80 32       	cpi	r24, 0x20	; 32
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <__vector_24+0xe8>
    1ebc:	71 c0       	rjmp	.+226    	; 0x1fa0 <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1ebe:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <twi_rxBufferIndex>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	8e 0f       	add	r24, r30
    1ec6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <twi_rxBufferIndex>
    1eca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	e1 5a       	subi	r30, 0xA1	; 161
    1ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed4:	80 83       	st	Z, r24
    1ed6:	3d c0       	rjmp	.+122    	; 0x1f52 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ed8:	80 3b       	cpi	r24, 0xB0	; 176
    1eda:	39 f0       	breq	.+14     	; 0x1eea <__vector_24+0x114>
    1edc:	e0 f4       	brcc	.+56     	; 0x1f16 <__vector_24+0x140>
    1ede:	80 3a       	cpi	r24, 0xA0	; 160
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <__vector_24+0x10e>
    1ee2:	79 c0       	rjmp	.+242    	; 0x1fd6 <__vector_24+0x200>
    1ee4:	88 3a       	cpi	r24, 0xA8	; 168
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <__vector_24+0x114>
    1ee8:	9c cf       	rjmp	.-200    	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ef0:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ef4:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ef8:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_onSlaveTransmit>
    1efc:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <twi_onSlaveTransmit+0x1>
    1f00:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1f02:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <twi_txBufferLength>
    1f06:	81 11       	cpse	r24, r1
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    1f10:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <twi_txBuffer>
    1f14:	09 c0       	rjmp	.+18     	; 0x1f28 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f16:	80 3c       	cpi	r24, 0xC0	; 192
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <__vector_24+0x146>
    1f1a:	a6 cf       	rjmp	.-180    	; 0x1e68 <__vector_24+0x92>
    1f1c:	88 3c       	cpi	r24, 0xC8	; 200
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <__vector_24+0x14c>
    1f20:	a3 cf       	rjmp	.-186    	; 0x1e68 <__vector_24+0x92>
    1f22:	88 3b       	cpi	r24, 0xB8	; 184
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <__vector_24+0x152>
    1f26:	7d cf       	rjmp	.-262    	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1f28:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <twi_txBufferIndex>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	8e 0f       	add	r24, r30
    1f30:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <twi_txBufferIndex>
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	e3 5c       	subi	r30, 0xC3	; 195
    1f38:	fd 4f       	sbci	r31, 0xFD	; 253
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f40:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <twi_txBufferIndex>
    1f44:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <twi_txBufferLength>
    1f48:	29 c0       	rjmp	.+82     	; 0x1f9c <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f4a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f52:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f58:	64 cf       	rjmp	.-312    	; 0x1e22 <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f5a:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <twi_masterBufferIndex>
    1f5e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_masterBufferLength>
    1f62:	98 17       	cp	r25, r24
    1f64:	58 f5       	brcc	.+86     	; 0x1fbc <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f66:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <twi_masterBufferIndex>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	8e 0f       	add	r24, r30
    1f6e:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_masterBufferIndex>
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	e2 57       	subi	r30, 0x72	; 114
    1f76:	fc 4f       	sbci	r31, 0xFC	; 252
    1f78:	80 81       	ld	r24, Z
    1f7a:	e9 cf       	rjmp	.-46     	; 0x1f4e <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f7c:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <twi_masterBufferIndex>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	8e 0f       	add	r24, r30
    1f84:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_masterBufferIndex>
    1f88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	e2 57       	subi	r30, 0x72	; 114
    1f90:	fc 4f       	sbci	r31, 0xFC	; 252
    1f92:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f94:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <twi_masterBufferIndex>
    1f98:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f9c:	98 17       	cp	r25, r24
    1f9e:	c8 f2       	brcs	.-78     	; 0x1f52 <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fa0:	85 e8       	ldi	r24, 0x85	; 133
    1fa2:	d8 cf       	rjmp	.-80     	; 0x1f54 <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fa4:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <twi_masterBufferIndex>
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	8e 0f       	add	r24, r30
    1fac:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_masterBufferIndex>
    1fb0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	e2 57       	subi	r30, 0x72	; 114
    1fb8:	fc 4f       	sbci	r31, 0xFC	; 252
    1fba:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    1fbc:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <twi_sendStop>
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	5c cf       	rjmp	.-328    	; 0x1e7c <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1fca:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1fd0:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_state>
    1fd4:	26 cf       	rjmp	.-436    	; 0x1e22 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1fd6:	85 ec       	ldi	r24, 0xC5	; 197
    1fd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    1fdc:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1fe0:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <twi_rxBufferIndex>
    1fe4:	80 32       	cpi	r24, 0x20	; 32
    1fe6:	30 f4       	brcc	.+12     	; 0x1ff4 <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1fe8:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <twi_rxBufferIndex>
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	e1 5a       	subi	r30, 0xA1	; 161
    1ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff2:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ff4:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <twi_rxBufferIndex>
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_onSlaveReceive>
    1ffe:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <twi_onSlaveReceive+0x1>
    2002:	8f e5       	ldi	r24, 0x5F	; 95
    2004:	92 e0       	ldi	r25, 0x02	; 2
    2006:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2008:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <twi_rxBufferIndex>
    200c:	0a cf       	rjmp	.-492    	; 0x1e22 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    200e:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <twi_error>
    2012:	34 cf       	rjmp	.-408    	; 0x1e7c <__vector_24+0xa6>

00002014 <RTC_DS1307::adjust(DateTime const&)>:
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:845
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	ec 01       	movw	r28, r24
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    2022:	88 e6       	ldi	r24, 0x68	; 104
    2024:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2028:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    202c:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:847
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	85 e1       	ldi	r24, 0x15	; 21
    2034:	94 e0       	ldi	r25, 0x04	; 4
    2036:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
    203a:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    203c:	1a e0       	ldi	r17, 0x0A	; 10
    203e:	82 2f       	mov	r24, r18
    2040:	61 2f       	mov	r22, r17
    2042:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__udivmodqi4>
    2046:	68 2f       	mov	r22, r24
    2048:	66 0f       	add	r22, r22
    204a:	68 0f       	add	r22, r24
    204c:	66 0f       	add	r22, r22
    204e:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:848
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    2050:	85 e1       	ldi	r24, 0x15	; 21
    2052:	94 e0       	ldi	r25, 0x04	; 4
    2054:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
    2058:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    205a:	82 2f       	mov	r24, r18
    205c:	61 2f       	mov	r22, r17
    205e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__udivmodqi4>
    2062:	68 2f       	mov	r22, r24
    2064:	66 0f       	add	r22, r22
    2066:	68 0f       	add	r22, r24
    2068:	66 0f       	add	r22, r22
    206a:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:849
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    206c:	85 e1       	ldi	r24, 0x15	; 21
    206e:	94 e0       	ldi	r25, 0x04	; 4
    2070:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    2076:	82 2f       	mov	r24, r18
    2078:	61 2f       	mov	r22, r17
    207a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__udivmodqi4>
    207e:	68 2f       	mov	r22, r24
    2080:	66 0f       	add	r22, r22
    2082:	68 0f       	add	r22, r24
    2084:	66 0f       	add	r22, r22
    2086:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:850
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    2088:	85 e1       	ldi	r24, 0x15	; 21
    208a:	94 e0       	ldi	r25, 0x04	; 4
    208c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:851
  Wire._I2C_WRITE(bin2bcd(0));
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	85 e1       	ldi	r24, 0x15	; 21
    2094:	94 e0       	ldi	r25, 0x04	; 4
    2096:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
    209a:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    209c:	82 2f       	mov	r24, r18
    209e:	61 2f       	mov	r22, r17
    20a0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__udivmodqi4>
    20a4:	68 2f       	mov	r22, r24
    20a6:	66 0f       	add	r22, r22
    20a8:	68 0f       	add	r22, r24
    20aa:	66 0f       	add	r22, r22
    20ac:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:852
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    20ae:	85 e1       	ldi	r24, 0x15	; 21
    20b0:	94 e0       	ldi	r25, 0x04	; 4
    20b2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
    20b6:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    20b8:	82 2f       	mov	r24, r18
    20ba:	61 2f       	mov	r22, r17
    20bc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__udivmodqi4>
    20c0:	68 2f       	mov	r22, r24
    20c2:	66 0f       	add	r22, r22
    20c4:	68 0f       	add	r22, r24
    20c6:	66 0f       	add	r22, r22
    20c8:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:853
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    20ca:	85 e1       	ldi	r24, 0x15	; 21
    20cc:	94 e0       	ldi	r25, 0x04	; 4
    20ce:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
    20d2:	28 81       	ld	r18, Y
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    20d4:	82 2f       	mov	r24, r18
    20d6:	61 2f       	mov	r22, r17
    20d8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__udivmodqi4>
    20dc:	68 2f       	mov	r22, r24
    20de:	66 0f       	add	r22, r22
    20e0:	68 0f       	add	r22, r24
    20e2:	66 0f       	add	r22, r22
    20e4:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:854
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
    20e6:	85 e1       	ldi	r24, 0x15	; 21
    20e8:	94 e0       	ldi	r25, 0x04	; 4
    20ea:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:856
  Wire.endTransmission();
}
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:855
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
  Wire.endTransmission();
    20f4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <TwoWire::endTransmission() [clone .constprop.76]>

000020f8 <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990>:
_GLOBAL__I_65535_0_ChantBellv2.1.ino.cpp.o.2990():
    20f8:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Wire+0x3>
    20fc:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <Wire+0x2>
    2100:	88 ee       	ldi	r24, 0xE8	; 232
    2102:	93 e0       	ldi	r25, 0x03	; 3
    2104:	a0 e0       	ldi	r26, 0x00	; 0
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Wire+0x4>
    210c:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <Wire+0x5>
    2110:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <Wire+0x6>
    2114:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <Wire+0x7>
    2118:	2d e3       	ldi	r18, 0x3D	; 61
    211a:	31 e0       	ldi	r19, 0x01	; 1
    211c:	30 93 16 04 	sts	0x0416, r19	; 0x800416 <Wire+0x1>
    2120:	20 93 15 04 	sts	0x0415, r18	; 0x800415 <Wire>
    2124:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <mySoftwareSerial+0x3>
    2128:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <mySoftwareSerial+0x2>
    212c:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <mySoftwareSerial+0x4>
    2130:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <mySoftwareSerial+0x5>
    2134:	a0 93 a7 04 	sts	0x04A7, r26	; 0x8004a7 <mySoftwareSerial+0x6>
    2138:	b0 93 a8 04 	sts	0x04A8, r27	; 0x8004a8 <mySoftwareSerial+0x7>
    213c:	8b e5       	ldi	r24, 0x5B	; 91
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <mySoftwareSerial+0x1>
    2144:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <mySoftwareSerial>
    2148:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <mySoftwareSerial+0x17>
    214c:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <mySoftwareSerial+0x16>
    2150:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <mySoftwareSerial+0x19>
    2154:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <mySoftwareSerial+0x18>
    2158:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <mySoftwareSerial+0x1b>
    215c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <mySoftwareSerial+0x1a>
    2160:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <mySoftwareSerial+0x1d>
    2164:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <mySoftwareSerial+0x1c>
    2168:	60 91 bf 04 	lds	r22, 0x04BF	; 0x8004bf <mySoftwareSerial+0x1e>
    216c:	6e 7f       	andi	r22, 0xFE	; 254
    216e:	6d 7f       	andi	r22, 0xFD	; 253
    2170:	60 93 bf 04 	sts	0x04BF, r22	; 0x8004bf <mySoftwareSerial+0x1e>
    2174:	66 95       	lsr	r22
    2176:	61 70       	andi	r22, 0x01	; 1
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	68 27       	eor	r22, r24
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <digitalWrite>
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
    218a:	ef e1       	ldi	r30, 0x1F	; 31
    218c:	f3 e0       	ldi	r31, 0x03	; 3
    218e:	e4 91       	lpm	r30, Z
    2190:	e0 93 b1 04 	sts	0x04B1, r30	; 0x8004b1 <mySoftwareSerial+0x10>
    2194:	e8 e0       	ldi	r30, 0x08	; 8
    2196:	f3 e0       	ldi	r31, 0x03	; 3
    2198:	e4 91       	lpm	r30, Z
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	e5 50       	subi	r30, 0x05	; 5
    21a2:	fd 4f       	sbci	r31, 0xFD	; 253
    21a4:	85 91       	lpm	r24, Z+
    21a6:	94 91       	lpm	r25, Z
    21a8:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <mySoftwareSerial+0x12>
    21ac:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <mySoftwareSerial+0x11>
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
    21b8:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <mySoftwareSerial+0x1e>
    21bc:	81 fd       	sbrc	r24, 1
    21be:	04 c0       	rjmp	.+8      	; 0x21c8 <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0xd0>
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <digitalWrite>
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <mySoftwareSerial+0xc>
    21ce:	ee e1       	ldi	r30, 0x1E	; 30
    21d0:	f3 e0       	ldi	r31, 0x03	; 3
    21d2:	e4 91       	lpm	r30, Z
    21d4:	e0 93 ae 04 	sts	0x04AE, r30	; 0x8004ae <mySoftwareSerial+0xd>
    21d8:	e7 e0       	ldi	r30, 0x07	; 7
    21da:	f3 e0       	ldi	r31, 0x03	; 3
    21dc:	e4 91       	lpm	r30, Z
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	ef 50       	subi	r30, 0x0F	; 15
    21e6:	fd 4f       	sbci	r31, 0xFD	; 253
    21e8:	25 91       	lpm	r18, Z+
    21ea:	34 91       	lpm	r19, Z
    21ec:	30 93 b0 04 	sts	0x04B0, r19	; 0x8004b0 <mySoftwareSerial+0xf>
    21f0:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <mySoftwareSerial+0xe>
    21f4:	44 ef       	ldi	r20, 0xF4	; 244
    21f6:	51 e0       	ldi	r21, 0x01	; 1
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	40 93 81 04 	sts	0x0481, r20	; 0x800481 <myDFPlayer+0x6>
    2200:	50 93 82 04 	sts	0x0482, r21	; 0x800482 <myDFPlayer+0x7>
    2204:	60 93 83 04 	sts	0x0483, r22	; 0x800483 <myDFPlayer+0x8>
    2208:	70 93 84 04 	sts	0x0484, r23	; 0x800484 <myDFPlayer+0x9>
    220c:	9a e0       	ldi	r25, 0x0A	; 10
    220e:	e4 e1       	ldi	r30, 0x14	; 20
    2210:	f1 e0       	ldi	r31, 0x01	; 1
    2212:	af e8       	ldi	r26, 0x8F	; 143
    2214:	b4 e0       	ldi	r27, 0x04	; 4
    2216:	01 90       	ld	r0, Z+
    2218:	0d 92       	st	X+, r0
    221a:	9a 95       	dec	r25
    221c:	e1 f7       	brne	.-8      	; 0x2216 <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0x11e>
    221e:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <myDFPlayer+0x1e>
    2222:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <myDFPlayer+0x1f>
    2226:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <myDFPlayer+0x24>
    222a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <myDFPlayer+0x25>
    222e:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <lcd+0x3>
    2232:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <lcd+0x2>
    2236:	2f e4       	ldi	r18, 0x4F	; 79
    2238:	31 e0       	ldi	r19, 0x01	; 1
    223a:	30 93 70 04 	sts	0x0470, r19	; 0x800470 <lcd+0x1>
    223e:	20 93 6f 04 	sts	0x046F, r18	; 0x80046f <lcd>
    2242:	97 e2       	ldi	r25, 0x27	; 39
    2244:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <lcd+0x4>
    2248:	90 e1       	ldi	r25, 0x10	; 16
    224a:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <lcd+0x9>
    224e:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <lcd+0xa>
    2252:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <lcd+0xb>
    2256:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <bell+0x5>
    225a:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <bell+0x4>
    225e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <bell+0x3>
    2262:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <bell>
    2266:	e6 ee       	ldi	r30, 0xE6	; 230
    2268:	f2 e0       	ldi	r31, 0x02	; 2
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	8c 30       	cpi	r24, 0x0C	; 12
    226e:	51 f0       	breq	.+20     	; 0x2284 <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0x18c>
    2270:	94 91       	lpm	r25, Z
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	09 f4       	brne	.+2      	; 0x2278 <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0x180>
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	28 0f       	add	r18, r24
    227c:	31 96       	adiw	r30, 0x01	; 1
    227e:	99 23       	and	r25, r25
    2280:	09 f4       	brne	.+2      	; 0x2284 <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0x18c>
    2282:	4d c0       	rjmp	.+154    	; 0x231e <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0x226>
    2284:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <bell+0x1>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <bell+0x2>
    228e:	68 e9       	ldi	r22, 0x98	; 152
    2290:	71 e0       	ldi	r23, 0x01	; 1
    2292:	81 e2       	ldi	r24, 0x21	; 33
    2294:	94 e0       	ldi	r25, 0x04	; 4
    2296:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    229a:	6c e9       	ldi	r22, 0x9C	; 156
    229c:	71 e0       	ldi	r23, 0x01	; 1
    229e:	87 e2       	ldi	r24, 0x27	; 39
    22a0:	94 e0       	ldi	r25, 0x04	; 4
    22a2:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22a6:	60 ea       	ldi	r22, 0xA0	; 160
    22a8:	71 e0       	ldi	r23, 0x01	; 1
    22aa:	8d e2       	ldi	r24, 0x2D	; 45
    22ac:	94 e0       	ldi	r25, 0x04	; 4
    22ae:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22b2:	64 ea       	ldi	r22, 0xA4	; 164
    22b4:	71 e0       	ldi	r23, 0x01	; 1
    22b6:	83 e3       	ldi	r24, 0x33	; 51
    22b8:	94 e0       	ldi	r25, 0x04	; 4
    22ba:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22be:	68 ea       	ldi	r22, 0xA8	; 168
    22c0:	71 e0       	ldi	r23, 0x01	; 1
    22c2:	89 e3       	ldi	r24, 0x39	; 57
    22c4:	94 e0       	ldi	r25, 0x04	; 4
    22c6:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22ca:	6c ea       	ldi	r22, 0xAC	; 172
    22cc:	71 e0       	ldi	r23, 0x01	; 1
    22ce:	8f e3       	ldi	r24, 0x3F	; 63
    22d0:	94 e0       	ldi	r25, 0x04	; 4
    22d2:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22d6:	60 eb       	ldi	r22, 0xB0	; 176
    22d8:	71 e0       	ldi	r23, 0x01	; 1
    22da:	85 e4       	ldi	r24, 0x45	; 69
    22dc:	94 e0       	ldi	r25, 0x04	; 4
    22de:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22e2:	64 eb       	ldi	r22, 0xB4	; 180
    22e4:	71 e0       	ldi	r23, 0x01	; 1
    22e6:	8b e4       	ldi	r24, 0x4B	; 75
    22e8:	94 e0       	ldi	r25, 0x04	; 4
    22ea:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22ee:	68 eb       	ldi	r22, 0xB8	; 184
    22f0:	71 e0       	ldi	r23, 0x01	; 1
    22f2:	81 e5       	ldi	r24, 0x51	; 81
    22f4:	94 e0       	ldi	r25, 0x04	; 4
    22f6:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    22fa:	6c eb       	ldi	r22, 0xBC	; 188
    22fc:	71 e0       	ldi	r23, 0x01	; 1
    22fe:	87 e5       	ldi	r24, 0x57	; 87
    2300:	94 e0       	ldi	r25, 0x04	; 4
    2302:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    2306:	60 ec       	ldi	r22, 0xC0	; 192
    2308:	71 e0       	ldi	r23, 0x01	; 1
    230a:	8d e5       	ldi	r24, 0x5D	; 93
    230c:	94 e0       	ldi	r25, 0x04	; 4
    230e:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    2312:	64 ec       	ldi	r22, 0xC4	; 196
    2314:	71 e0       	ldi	r23, 0x01	; 1
    2316:	83 e6       	ldi	r24, 0x63	; 99
    2318:	94 e0       	ldi	r25, 0x04	; 4
    231a:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <String::String(char const*)>
    231e:	82 2f       	mov	r24, r18
    2320:	a5 cf       	rjmp	.-182    	; 0x226c <global constructors keyed to 65535_0_ChantBellv2.1.ino.cpp.o.2990+0x174>

00002322 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	e9 97       	sbiw	r28, 0x39	; 57
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2336:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2338:	84 b5       	in	r24, 0x24	; 36
    233a:	83 60       	ori	r24, 0x03	; 3
    233c:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    233e:	85 b5       	in	r24, 0x25	; 37
    2340:	83 60       	ori	r24, 0x03	; 3
    2342:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2344:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    2348:	81 60       	ori	r24, 0x01	; 1
    234a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2354:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2358:	81 60       	ori	r24, 0x01	; 1
    235a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    235e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2362:	81 60       	ori	r24, 0x01	; 1
    2364:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2368:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    236c:	84 60       	ori	r24, 0x04	; 4
    236e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2372:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2376:	81 60       	ori	r24, 0x01	; 1
    2378:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    237c:	87 e8       	ldi	r24, 0x87	; 135
    237e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2382:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:66
void showTime();

void setup()
{
    char intstr[5];
    pinMode(AMP, OUTPUT);
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	8e e0       	ldi	r24, 0x0E	; 14
    238a:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:67
    pinMode(STA_PIN, INPUT_PULLUP);
    238e:	62 e0       	ldi	r22, 0x02	; 2
    2390:	85 e0       	ldi	r24, 0x05	; 5
    2392:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:68
    pinMode(SELECT_BUT, INPUT_PULLUP);
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	86 e0       	ldi	r24, 0x06	; 6
    239a:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:69
    pinMode(UP_BUT, INPUT_PULLUP);
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	87 e0       	ldi	r24, 0x07	; 7
    23a2:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:70
    pinMode(DOWN_BUT, INPUT_PULLUP);
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	88 e0       	ldi	r24, 0x08	; 8
    23aa:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:71
    pinMode(BACK_BUT, INPUT_PULLUP);
    23ae:	62 e0       	ldi	r22, 0x02	; 2
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	0e 94 57 03 	call	0x6ae	; 0x6ae <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:72
    Wire.begin();
    23b6:	0e 94 25 03 	call	0x64a	; 0x64a <TwoWire::begin() [clone .constprop.31]>
load():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:168
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    23ba:	40 e3       	ldi	r20, 0x30	; 48
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	85 e2       	ldi	r24, 0x25	; 37
    23c4:	93 e0       	ldi	r25, 0x03	; 3
    23c6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:169
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    23ca:	64 e2       	ldi	r22, 0x24	; 36
    23cc:	71 e0       	ldi	r23, 0x01	; 1
    23ce:	85 e2       	ldi	r24, 0x25	; 37
    23d0:	93 e0       	ldi	r25, 0x03	; 3
    23d2:	0e 94 b9 21 	call	0x4372	; 0x4372 <strcmp>
    23d6:	89 2b       	or	r24, r25
    23d8:	09 f4       	brne	.+2      	; 0x23dc <main+0xba>
    23da:	5c c0       	rjmp	.+184    	; 0x2494 <main+0x172>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:140
  return strbuf;
}

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    23dc:	64 e2       	ldi	r22, 0x24	; 36
    23de:	71 e0       	ldi	r23, 0x01	; 1
    23e0:	85 e2       	ldi	r24, 0x25	; 37
    23e2:	93 e0       	ldi	r25, 0x03	; 3
    23e4:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:141
  SlogamCount = 100;
    23e8:	84 e6       	ldi	r24, 0x64	; 100
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <config+0x1b>
    23f0:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:142
  startTime = 5; //5AM
    23f4:	85 e0       	ldi	r24, 0x05	; 5
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <config+0x10>
    23fc:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:143
  endTime = 22; // 10PM
    2400:	86 e1       	ldi	r24, 0x16	; 22
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <config+0x12>
    2408:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:144
  backLightDur = 20; //Sec
    240c:	84 e1       	ldi	r24, 0x14	; 20
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <config+0x14>
    2414:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:145
  vol = 20;
    2418:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x16>
    241c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:146
  SlogamOrder = 1;
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	30 93 3e 03 	sts	0x033E, r19	; 0x80033e <config+0x19>
    2428:	20 93 3d 03 	sts	0x033D, r18	; 0x80033d <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:147
  SongCount = 10;
    242c:	8a e0       	ldi	r24, 0x0A	; 10
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <config+0x1d>
    2434:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:148
  SongOrder = 1;
    2438:	30 93 44 03 	sts	0x0344, r19	; 0x800344 <config+0x1f>
    243c:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:149
  MorSong1Time = 3;
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x25>
    2448:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:150
  MorSong2Time = 3;
    244c:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x27>
    2450:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x26>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:151
  EveSong2Time = 3;
    2454:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x2b>
    2458:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:152
  EveSong1Time = 3;
    245c:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <config+0x29>
    2460:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:153
  MorSongNo = 1;
    2464:	30 93 52 03 	sts	0x0352, r19	; 0x800352 <config+0x2d>
    2468:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:154
  EveSongNo = 2;
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x2f>
    2474:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:155
  SchlZone = 0;
    2478:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:156
  SerialNo = 174;
    247c:	8e ea       	ldi	r24, 0xAE	; 174
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x23>
    2484:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x22>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:157
  DataYear = 2022;
    2488:	86 ee       	ldi	r24, 0xE6	; 230
    248a:	97 e0       	ldi	r25, 0x07	; 7
    248c:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x21>
    2490:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x20>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2494:	0e 94 25 03 	call	0x64a	; 0x64a <TwoWire::begin() [clone .constprop.31]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2498:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    249c:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	18 f0       	brcs	.+6      	; 0x24aa <main+0x188>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    24a4:	98 e0       	ldi	r25, 0x08	; 8
    24a6:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    24aa:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    24ae:	62 e3       	ldi	r22, 0x32	; 50
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    24ba:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <lcd+0xb>
    24be:	8f e6       	ldi	r24, 0x6F	; 111
    24c0:	94 e0       	ldi	r25, 0x04	; 4
    24c2:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    24c6:	68 ee       	ldi	r22, 0xE8	; 232
    24c8:	73 e0       	ldi	r23, 0x03	; 3
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    24d2:	60 e3       	ldi	r22, 0x30	; 48
    24d4:	8f e6       	ldi	r24, 0x6F	; 111
    24d6:	94 e0       	ldi	r25, 0x04	; 4
    24d8:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    24dc:	84 e9       	ldi	r24, 0x94	; 148
    24de:	91 e1       	ldi	r25, 0x11	; 17
    24e0:	0e 94 93 03 	call	0x726	; 0x726 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    24e4:	60 e3       	ldi	r22, 0x30	; 48
    24e6:	8f e6       	ldi	r24, 0x6F	; 111
    24e8:	94 e0       	ldi	r25, 0x04	; 4
    24ea:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    24ee:	84 e9       	ldi	r24, 0x94	; 148
    24f0:	91 e1       	ldi	r25, 0x11	; 17
    24f2:	0e 94 93 03 	call	0x726	; 0x726 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    24f6:	60 e3       	ldi	r22, 0x30	; 48
    24f8:	8f e6       	ldi	r24, 0x6F	; 111
    24fa:	94 e0       	ldi	r25, 0x04	; 4
    24fc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    2500:	86 e9       	ldi	r24, 0x96	; 150
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 93 03 	call	0x726	; 0x726 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2508:	60 e2       	ldi	r22, 0x20	; 32
    250a:	8f e6       	ldi	r24, 0x6F	; 111
    250c:	94 e0       	ldi	r25, 0x04	; 4
    250e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2512:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <lcd+0x5>
    2516:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	8f e6       	ldi	r24, 0x6F	; 111
    251c:	94 e0       	ldi	r25, 0x04	; 4
    251e:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2522:	84 e0       	ldi	r24, 0x04	; 4
    2524:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	6c e0       	ldi	r22, 0x0C	; 12
    252c:	8f e6       	ldi	r24, 0x6F	; 111
    252e:	94 e0       	ldi	r25, 0x04	; 4
    2530:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    2534:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2538:	42 e0       	ldi	r20, 0x02	; 2
    253a:	d4 2e       	mov	r13, r20
    253c:	d0 92 76 04 	sts	0x0476, r13	; 0x800476 <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	66 e0       	ldi	r22, 0x06	; 6
    2544:	8f e6       	ldi	r24, 0x6F	; 111
    2546:	94 e0       	ldi	r25, 0x04	; 4
    2548:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	62 e0       	ldi	r22, 0x02	; 2
    2550:	8f e6       	ldi	r24, 0x6F	; 111
    2552:	94 e0       	ldi	r25, 0x04	; 4
    2554:	0e 94 05 07 	call	0xe0a	; 0xe0a <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    2558:	80 ed       	ldi	r24, 0xD0	; 208
    255a:	97 e0       	ldi	r25, 0x07	; 7
    255c:	0e 94 93 03 	call	0x726	; 0x726 <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2560:	88 e0       	ldi	r24, 0x08	; 8
    2562:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	8f e6       	ldi	r24, 0x6F	; 111
    256a:	94 e0       	ldi	r25, 0x04	; 4
    256c:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:76
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	85 e0       	ldi	r24, 0x05	; 5
    2574:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:77
    lcd.print(F("QTRON"));
    2578:	89 ec       	ldi	r24, 0xC9	; 201
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:78
    lcd.setCursor(0, 1);
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:79
    lcd.print(F("DEVOTIONAL CLOCK"));
    2588:	88 eb       	ldi	r24, 0xB8	; 184
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:80
    delay(2000);
    2590:	60 ed       	ldi	r22, 0xD0	; 208
    2592:	77 e0       	ldi	r23, 0x07	; 7
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:81
    lcd.clear();
    259c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:82
    lcd.setCursor(0, 0);
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:83
    inttostr(intstr, config.DataYear);
    25a8:	60 91 45 03 	lds	r22, 0x0345	; 0x800345 <config+0x20>
    25ac:	70 91 46 03 	lds	r23, 0x0346	; 0x800346 <config+0x21>
    25b0:	8e 01       	movw	r16, r28
    25b2:	0f 5f       	subi	r16, 0xFF	; 255
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	c8 01       	movw	r24, r16
    25b8:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:84
    lcd.print(fmt(strbuf, 2, "Ver : 2.1/", intstr));
    25bc:	1f 93       	push	r17
    25be:	0f 93       	push	r16
    25c0:	88 ec       	ldi	r24, 0xC8	; 200
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	df 92       	push	r13
    25ca:	58 ee       	ldi	r21, 0xE8	; 232
    25cc:	e5 2e       	mov	r14, r21
    25ce:	53 e0       	ldi	r21, 0x03	; 3
    25d0:	f5 2e       	mov	r15, r21
    25d2:	ff 92       	push	r15
    25d4:	ef 92       	push	r14
    25d6:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    25da:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:85
    lcd.setCursor(0, 1);
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:86
    inttostr(intstr, config.SerialNo);
    25e6:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <config+0x22>
    25ea:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <config+0x23>
    25ee:	c8 01       	movw	r24, r16
    25f0:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:87
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    25f4:	1f 93       	push	r17
    25f6:	0f 93       	push	r16
    25f8:	83 ed       	ldi	r24, 0xD3	; 211
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	9f 93       	push	r25
    25fe:	8f 93       	push	r24
    2600:	df 92       	push	r13
    2602:	ff 92       	push	r15
    2604:	ef 92       	push	r14
    2606:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    260a:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:88
    delay(2000);
    260e:	60 ed       	ldi	r22, 0xD0	; 208
    2610:	77 e0       	ldi	r23, 0x07	; 7
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:89
    lcd.clear();
    261a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:90
    lcd.setCursor(3, 0);
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:91
    lcd.print("Loading...");
    2626:	81 ee       	ldi	r24, 0xE1	; 225
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:93

    if (!digitalRead(SELECT_BUT))
    262e:	86 e0       	ldi	r24, 0x06	; 6
    2630:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	89 2b       	or	r24, r25
    2640:	09 f0       	breq	.+2      	; 0x2644 <main+0x322>
    2642:	0a c1       	rjmp	.+532    	; 0x2858 <main+0x536>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:95
    {
        lcd.setCursor(0, 1);
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:96
        lcd.print("Service Mode");
    264c:	8c ee       	ldi	r24, 0xEC	; 236
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:97
        serviceMode = true;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <serviceMode>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    265a:	ee 24       	eor	r14, r14
    265c:	e3 94       	inc	r14
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    265e:	38 e6       	ldi	r19, 0x68	; 104
    2660:	d3 2e       	mov	r13, r19
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:816
    @brief  Start I2C for the DS1307 and test succesful connection
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
boolean RTC_DS1307::begin(void) {
  Wire.begin();
    2662:	0e 94 25 03 	call	0x64a	; 0x64a <TwoWire::begin() [clone .constprop.31]>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2666:	e0 92 b3 03 	sts	0x03B3, r14	; 0x8003b3 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    266a:	d0 92 d5 03 	sts	0x03D5, r13	; 0x8003d5 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    266e:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    2672:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:818
  Wire.beginTransmission(DS1307_ADDRESS);
  if (Wire.endTransmission() == 0)
    2676:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TwoWire::endTransmission() [clone .constprop.76]>
    267a:	f8 2e       	mov	r15, r24
    267c:	81 11       	cpse	r24, r1
    267e:	ef c0       	rjmp	.+478    	; 0x285e <main+0x53c>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2680:	e0 92 b3 03 	sts	0x03B3, r14	; 0x8003b3 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2684:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    2688:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <TwoWire::txBufferLength>
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:831
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	85 e1       	ldi	r24, 0x15	; 21
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:832
  Wire.endTransmission();
    2696:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TwoWire::endTransmission() [clone .constprop.76]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:834

  Wire.requestFrom(DS1307_ADDRESS, 1);
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 94 07 	call	0xf28	; 0xf28 <TwoWire::requestFrom(int, int) [clone .constprop.67]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:835
  uint8_t ss = Wire._I2C_READ();
    26a2:	85 e1       	ldi	r24, 0x15	; 21
    26a4:	94 e0       	ldi	r25, 0x04	; 4
    26a6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TwoWire::read()>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:111
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    // if (rtc.lostPower())

    if (!rtc.isrunning())
    26aa:	87 ff       	sbrs	r24, 7
    26ac:	0e c0       	rjmp	.+28     	; 0x26ca <main+0x3a8>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:113
    {
        lcd.clear();
    26ae:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:114
        lcd.print(F("ERR 02"));
    26b2:	8a ea       	ldi	r24, 0xAA	; 170
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:115
        delay(2000);
    26ba:	60 ed       	ldi	r22, 0xD0	; 208
    26bc:	77 e0       	ldi	r23, 0x07	; 7
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:116
        serviceMode = true;
    26c6:	e0 92 cd 02 	sts	0x02CD, r14	; 0x8002cd <serviceMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:119
    }
    // Initialize DF Player...............
    if (digitalRead(BACK_BUT))
    26ca:	89 e0       	ldi	r24, 0x09	; 9
    26cc:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    26d0:	89 2b       	or	r24, r25
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <main+0x3b4>
    26d4:	12 c1       	rjmp	.+548    	; 0x28fa <main+0x5d8>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    26d6:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <mySoftwareSerial+0x1b>
    26da:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <mySoftwareSerial+0x1a>
    26de:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <mySoftwareSerial+0x19>
    26e2:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <mySoftwareSerial+0x18>
    26e6:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <mySoftwareSerial+0x17>
    26ea:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    26ee:	8d e9       	ldi	r24, 0x9D	; 157
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <mySoftwareSerial+0x1d>
    26f6:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    26fa:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <mySoftwareSerial+0xc>
    26fe:	87 31       	cpi	r24, 0x17	; 23
    2700:	08 f0       	brcs	.+2      	; 0x2704 <main+0x3e2>
    2702:	4b c0       	rjmp	.+150    	; 0x279a <main+0x478>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2704:	2d eb       	ldi	r18, 0xBD	; 189
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	30 93 b8 04 	sts	0x04B8, r19	; 0x8004b8 <mySoftwareSerial+0x17>
    270c:	20 93 b7 04 	sts	0x04B7, r18	; 0x8004b7 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2710:	2b e9       	ldi	r18, 0x9B	; 155
    2712:	31 e0       	ldi	r19, 0x01	; 1
    2714:	30 93 ba 04 	sts	0x04BA, r19	; 0x8004ba <mySoftwareSerial+0x19>
    2718:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    271c:	2c e2       	ldi	r18, 0x2C	; 44
    271e:	31 e0       	ldi	r19, 0x01	; 1
    2720:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <mySoftwareSerial+0x1b>
    2724:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2728:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    272c:	94 e0       	ldi	r25, 0x04	; 4
begin():
    272e:	88 30       	cpi	r24, 0x08	; 8
    2730:	54 f0       	brlt	.+20     	; 0x2746 <main+0x424>
main():
    2732:	91 e0       	ldi	r25, 0x01	; 1
begin():
    2734:	8e 30       	cpi	r24, 0x0E	; 14
    2736:	3c f0       	brlt	.+14     	; 0x2746 <main+0x424>
main():
    2738:	92 e0       	ldi	r25, 0x02	; 2
begin():
    273a:	84 31       	cpi	r24, 0x14	; 20
    273c:	24 f0       	brlt	.+8      	; 0x2746 <main+0x424>
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	86 31       	cpi	r24, 0x16	; 22
    2742:	09 f4       	brne	.+2      	; 0x2746 <main+0x424>
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	92 2b       	or	r25, r18
    2748:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    274c:	2d e6       	ldi	r18, 0x6D	; 109
    274e:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2750:	88 30       	cpi	r24, 0x08	; 8
    2752:	74 f0       	brlt	.+28     	; 0x2770 <main+0x44e>
    2754:	8e 30       	cpi	r24, 0x0E	; 14
    2756:	0c f4       	brge	.+2      	; 0x275a <main+0x438>
    2758:	89 c0       	rjmp	.+274    	; 0x286c <main+0x54a>
    275a:	84 31       	cpi	r24, 0x14	; 20
    275c:	3c f0       	brlt	.+14     	; 0x276c <main+0x44a>
    275e:	86 31       	cpi	r24, 0x16	; 22
    2760:	0c f4       	brge	.+2      	; 0x2764 <main+0x442>
    2762:	84 c0       	rjmp	.+264    	; 0x286c <main+0x54a>
main():
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	20 e0       	ldi	r18, 0x00	; 0
begin():
    2768:	86 31       	cpi	r24, 0x16	; 22
    276a:	11 f4       	brne	.+4      	; 0x2770 <main+0x44e>
main():
    276c:	2c e6       	ldi	r18, 0x6C	; 108
    276e:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2770:	30 93 b5 04 	sts	0x04B5, r19	; 0x8004b5 <mySoftwareSerial+0x14>
    2774:	20 93 b4 04 	sts	0x04B4, r18	; 0x8004b4 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2778:	88 30       	cpi	r24, 0x08	; 8
    277a:	0c f0       	brlt	.+2      	; 0x277e <main+0x45c>
    277c:	7a c0       	rjmp	.+244    	; 0x2872 <main+0x550>
    277e:	ff 24       	eor	r15, r15
    2780:	f3 94       	inc	r15
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <main+0x464>
    2784:	ff 0c       	add	r15, r15
    2786:	8a 95       	dec	r24
    2788:	ea f7       	brpl	.-6      	; 0x2784 <main+0x462>
    278a:	f0 92 b6 04 	sts	0x04B6, r15	; 0x8004b6 <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    278e:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <mySoftwareSerial+0x1c>
    2792:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <mySoftwareSerial+0x1d>
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <main+0x474>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    279a:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <mySoftwareSerial+0x1a>
    279e:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <mySoftwareSerial+0x1b>
    27a2:	89 2b       	or	r24, r25
    27a4:	49 f1       	breq	.+82     	; 0x27f8 <main+0x4d6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    27a6:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <SoftwareSerial::active_object>
    27aa:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <SoftwareSerial::active_object+0x1>
    27ae:	34 e0       	ldi	r19, 0x04	; 4
    27b0:	e1 3a       	cpi	r30, 0xA1	; 161
    27b2:	f3 07       	cpc	r31, r19
    27b4:	09 f1       	breq	.+66     	; 0x27f8 <main+0x4d6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    27b6:	30 97       	sbiw	r30, 0x00	; 0
    27b8:	39 f0       	breq	.+14     	; 0x27c8 <main+0x4a6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    27ba:	a3 89       	ldd	r26, Z+19	; 0x13
    27bc:	b4 89       	ldd	r27, Z+20	; 0x14
    27be:	9c 91       	ld	r25, X
    27c0:	85 89       	ldd	r24, Z+21	; 0x15
    27c2:	80 95       	com	r24
    27c4:	89 23       	and	r24, r25
    27c6:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    27c8:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <mySoftwareSerial+0x1e>
    27cc:	8e 7f       	andi	r24, 0xFE	; 254
    27ce:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    27d2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <SoftwareSerial::_receive_buffer_tail>
    27d6:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    27da:	81 ea       	ldi	r24, 0xA1	; 161
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <SoftwareSerial::active_object+0x1>
    27e2:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    27e6:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <mySoftwareSerial+0x13>
    27ea:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <mySoftwareSerial+0x14>
    27ee:	80 81       	ld	r24, Z
    27f0:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <mySoftwareSerial+0x15>
    27f4:	89 2b       	or	r24, r25
    27f6:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:122
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    27f8:	64 ef       	ldi	r22, 0xF4	; 244
    27fa:	71 e0       	ldi	r23, 0x01	; 1
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2804:	91 ea       	ldi	r25, 0xA1	; 161
    2806:	e9 2e       	mov	r14, r25
    2808:	94 e0       	ldi	r25, 0x04	; 4
    280a:	f9 2e       	mov	r15, r25
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    280c:	dd 24       	eor	r13, r13
    280e:	d3 94       	inc	r13
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2810:	f0 92 7c 04 	sts	0x047C, r15	; 0x80047c <myDFPlayer+0x1>
    2814:	e0 92 7b 04 	sts	0x047B, r14	; 0x80047b <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2818:	d0 92 93 04 	sts	0x0493, r13	; 0x800493 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	8c e0       	ldi	r24, 0x0C	; 12
    2822:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    2826:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    282a:	4b 01       	movw	r8, r22
    282c:	5c 01       	movw	r10, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    282e:	0e 94 02 04 	call	0x804	; 0x804 <DFRobotDFPlayerMini::available() [clone .constprop.48]>
    2832:	81 11       	cpse	r24, r1
    2834:	2c c0       	rjmp	.+88     	; 0x288e <main+0x56c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    2836:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    283a:	68 19       	sub	r22, r8
    283c:	79 09       	sbc	r23, r9
    283e:	8a 09       	sbc	r24, r10
    2840:	9b 09       	sbc	r25, r11
    2842:	61 3d       	cpi	r22, 0xD1	; 209
    2844:	77 40       	sbci	r23, 0x07	; 7
    2846:	81 05       	cpc	r24, r1
    2848:	91 05       	cpc	r25, r1
    284a:	08 f5       	brcc	.+66     	; 0x288e <main+0x56c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	cb 01       	movw	r24, r22
    2852:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
    2856:	eb cf       	rjmp	.-42     	; 0x282e <main+0x50c>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:101
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    2858:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <serviceMode>
    285c:	fe ce       	rjmp	.-516    	; 0x265a <main+0x338>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:105
    }
    while (!rtc.begin())
    {
        lcd.clear();
    285e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:106
        lcd.print(F("ERR 01")); // Couldn't find RTC
    2862:	81 eb       	ldi	r24, 0xB1	; 177
    2864:	92 e0       	ldi	r25, 0x02	; 2
    2866:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
    286a:	fb ce       	rjmp	.-522    	; 0x2662 <main+0x340>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    286c:	2b e6       	ldi	r18, 0x6B	; 107
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	7f cf       	rjmp	.-258    	; 0x2770 <main+0x44e>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2872:	8e 30       	cpi	r24, 0x0E	; 14
    2874:	14 f4       	brge	.+4      	; 0x287a <main+0x558>
    2876:	88 50       	subi	r24, 0x08	; 8
    2878:	82 cf       	rjmp	.-252    	; 0x277e <main+0x45c>
    287a:	86 31       	cpi	r24, 0x16	; 22
    287c:	14 f4       	brge	.+4      	; 0x2882 <main+0x560>
    287e:	8e 50       	subi	r24, 0x0E	; 14
    2880:	7e cf       	rjmp	.-260    	; 0x277e <main+0x45c>
    2882:	86 31       	cpi	r24, 0x16	; 22
    2884:	09 f0       	breq	.+2      	; 0x2888 <main+0x566>
    2886:	81 cf       	rjmp	.-254    	; 0x278a <main+0x468>
main():
    2888:	20 e4       	ldi	r18, 0x40	; 64
    288a:	f2 2e       	mov	r15, r18
    288c:	7e cf       	rjmp	.-260    	; 0x278a <main+0x468>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    288e:	68 ec       	ldi	r22, 0xC8	; 200
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    289a:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    289e:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	59 f0       	breq	.+22     	; 0x28bc <main+0x59a>
    28a6:	89 30       	cpi	r24, 0x09	; 9
    28a8:	49 f0       	breq	.+18     	; 0x28bc <main+0x59a>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:125
    {
        mySoftwareSerial.begin(9600);
        delay(500);
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.setCursor(0, 0);
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:126
            lcd.print(F("ERR 03"));
    28b2:	83 ea       	ldi	r24, 0xA3	; 163
    28b4:	92 e0       	ldi	r25, 0x02	; 2
    28b6:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
    28ba:	aa cf       	rjmp	.-172    	; 0x2810 <main+0x4ee>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    28bc:	84 ef       	ldi	r24, 0xF4	; 244
    28be:	91 e0       	ldi	r25, 0x01	; 1
    28c0:	a0 e0       	ldi	r26, 0x00	; 0
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <myDFPlayer+0x6>
    28c8:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <myDFPlayer+0x7>
    28cc:	a0 93 83 04 	sts	0x0483, r26	; 0x800483 <myDFPlayer+0x8>
    28d0:	b0 93 84 04 	sts	0x0484, r27	; 0x800484 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    28d4:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <config+0x15>
    28d8:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <config+0x16>
    28dc:	77 27       	eor	r23, r23
    28de:	86 e0       	ldi	r24, 0x06	; 6
    28e0:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    28e4:	62 e0       	ldi	r22, 0x02	; 2
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	89 e0       	ldi	r24, 0x09	; 9
    28ea:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    28ee:	68 ec       	ldi	r22, 0xC8	; 200
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:132
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    28fa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:133
    timrLCD = millis();
    28fe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2902:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <timrLCD>
    2906:	70 93 17 03 	sts	0x0317, r23	; 0x800317 <timrLCD+0x1>
    290a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <timrLCD+0x2>
    290e:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:135

    if (serviceMode)
    2912:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <serviceMode>
    2916:	88 23       	and	r24, r24
    2918:	09 f4       	brne	.+2      	; 0x291c <main+0x5fa>
    291a:	3c c1       	rjmp	.+632    	; 0x2b94 <main+0x872>
attach():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    291c:	21 e9       	ldi	r18, 0x91	; 145
    291e:	32 e0       	ldi	r19, 0x02	; 2
    2920:	30 93 fa 03 	sts	0x03FA, r19	; 0x8003fa <Menu1+0x1>
    2924:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    292e:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <Menu1+0x4>
    2932:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2936:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    293a:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:12
  menuStackCount = 0;
    293e:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:140
        Menu1.attach(sampleMenu_Root, menuCount(sampleMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    2942:	87 e0       	ldi	r24, 0x07	; 7
    2944:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    2948:	89 2b       	or	r24, r25
    294a:	f1 f4       	brne	.+60     	; 0x2988 <main+0x666>
    294c:	88 e0       	ldi	r24, 0x08	; 8
    294e:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    2952:	89 2b       	or	r24, r25
    2954:	c9 f4       	brne	.+50     	; 0x2988 <main+0x666>
attach():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2956:	25 e5       	ldi	r18, 0x55	; 85
    2958:	32 e0       	ldi	r19, 0x02	; 2
    295a:	30 93 fa 03 	sts	0x03FA, r19	; 0x8003fa <Menu1+0x1>
    295e:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2962:	83 e0       	ldi	r24, 0x03	; 3
    2964:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2968:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <Menu1+0x4>
    296c:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2970:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2974:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:12
  menuStackCount = 0;
    2978:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:143
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:144
        refreshMenuDisplay(REFRESH_DESCEND);
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <refreshMenuDisplay(unsigned char)>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2988:	7e 01       	movw	r14, r28
    298a:	59 e1       	ldi	r21, 0x19	; 25
    298c:	e5 0e       	add	r14, r21
    298e:	f1 1c       	adc	r15, r1
showTime():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:328
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    lpad(h, intbuf, '0', 2);
    2990:	1e 01       	movw	r2, r28
    2992:	6c e2       	ldi	r22, 0x2C	; 44
    2994:	26 0e       	add	r2, r22
    2996:	31 1c       	adc	r3, r1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:330
    inttostr(intbuf, rtc.now().minute());
    lpad(m, intbuf, '0', 2);
    2998:	ce 01       	movw	r24, r28
    299a:	89 96       	adiw	r24, 0x29	; 41
    299c:	98 ab       	std	Y+48, r25	; 0x30
    299e:	8f a7       	std	Y+47, r24	; 0x2f
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:332
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);
    29a0:	fe 01       	movw	r30, r28
    29a2:	b6 96       	adiw	r30, 0x26	; 38
    29a4:	fa ab       	std	Y+50, r31	; 0x32
    29a6:	e9 ab       	std	Y+49, r30	; 0x31
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:338

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));

    inttostr(intbuf, rtc.now().day());
    lpad(dat, intbuf, '0', 2);
    29a8:	9e 01       	movw	r18, r28
    29aa:	2d 5d       	subi	r18, 0xDD	; 221
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	3c ab       	std	Y+52, r19	; 0x34
    29b0:	2b ab       	std	Y+51, r18	; 0x33
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:341
    inttostr(intbuf, rtc.now().year());
    lpad(year, intbuf, '0', 4);
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    29b2:	ae 01       	movw	r20, r28
    29b4:	41 5e       	subi	r20, 0xE1	; 225
    29b6:	5f 4f       	sbci	r21, 0xFF	; 255
    29b8:	5e ab       	std	Y+54, r21	; 0x36
    29ba:	4d ab       	std	Y+53, r20	; 0x35
main():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:213
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    29bc:	77 24       	eor	r7, r7
    29be:	73 94       	inc	r7
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:190

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    29c0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    29c4:	80 90 fb 02 	lds	r8, 0x02FB	; 0x8002fb <buttonSampleTime>
    29c8:	90 90 fc 02 	lds	r9, 0x02FC	; 0x8002fc <buttonSampleTime+0x1>
    29cc:	a0 90 fd 02 	lds	r10, 0x02FD	; 0x8002fd <buttonSampleTime+0x2>
    29d0:	b0 90 fe 02 	lds	r11, 0x02FE	; 0x8002fe <buttonSampleTime+0x3>
    29d4:	68 19       	sub	r22, r8
    29d6:	79 09       	sbc	r23, r9
    29d8:	8a 09       	sbc	r24, r10
    29da:	9b 09       	sbc	r25, r11
    29dc:	64 31       	cpi	r22, 0x14	; 20
    29de:	71 05       	cpc	r23, r1
    29e0:	81 05       	cpc	r24, r1
    29e2:	91 05       	cpc	r25, r1
    29e4:	08 f4       	brcc	.+2      	; 0x29e8 <main+0x6c6>
    29e6:	a2 c0       	rjmp	.+324    	; 0x2b2c <main+0x80a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:192
  {
    buttonSampleTime = millis();
    29e8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    29ec:	60 93 fb 02 	sts	0x02FB, r22	; 0x8002fb <buttonSampleTime>
    29f0:	70 93 fc 02 	sts	0x02FC, r23	; 0x8002fc <buttonSampleTime+0x1>
    29f4:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <buttonSampleTime+0x2>
    29f8:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    29fc:	86 e0       	ldi	r24, 0x06	; 6
    29fe:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    2a02:	6c 01       	movw	r12, r24
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:199
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    2a04:	87 e0       	ldi	r24, 0x07	; 7
    2a06:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
main():
    2a0a:	66 24       	eor	r6, r6
    2a0c:	63 94       	inc	r6
buttonHandlerCycle():
    2a0e:	89 2b       	or	r24, r25
    2a10:	31 f0       	breq	.+12     	; 0x2a1e <main+0x6fc>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	cd 28       	or	r12, r13
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <main+0x6f8>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	68 2e       	mov	r6, r24
    2a1c:	61 94       	neg	r6
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:200
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    2a1e:	88 e0       	ldi	r24, 0x08	; 8
    2a20:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    2a24:	89 2b       	or	r24, r25
    2a26:	11 f4       	brne	.+4      	; 0x2a2c <main+0x70a>
main():
    2a28:	82 e0       	ldi	r24, 0x02	; 2
    2a2a:	68 2e       	mov	r6, r24
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:201
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    2a2c:	89 e0       	ldi	r24, 0x09	; 9
    2a2e:	0e 94 ce 02 	call	0x59c	; 0x59c <digitalRead>
    2a32:	89 2b       	or	r24, r25
    2a34:	11 f4       	brne	.+4      	; 0x2a3a <main+0x718>
main():
    2a36:	b3 e0       	ldi	r27, 0x03	; 3
    2a38:	6b 2e       	mov	r6, r27
    2a3a:	ee ec       	ldi	r30, 0xCE	; 206
    2a3c:	ae 2e       	mov	r10, r30
    2a3e:	e2 e0       	ldi	r30, 0x02	; 2
    2a40:	be 2e       	mov	r11, r30
    2a42:	f2 ee       	ldi	r31, 0xE2	; 226
    2a44:	cf 2e       	mov	r12, r31
    2a46:	f2 e0       	ldi	r31, 0x02	; 2
    2a48:	df 2e       	mov	r13, r31
    2a4a:	8f e1       	ldi	r24, 0x1F	; 31
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	98 af       	std	Y+56, r25	; 0x38
    2a50:	8f ab       	std	Y+55, r24	; 0x37
    2a52:	a6 ef       	ldi	r26, 0xF6	; 246
    2a54:	8a 2e       	mov	r8, r26
    2a56:	a2 e0       	ldi	r26, 0x02	; 2
    2a58:	9a 2e       	mov	r9, r26
    2a5a:	55 24       	eor	r5, r5
    2a5c:	53 94       	inc	r5
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:205

    

    byte buttonIdentified = 0;
    2a5e:	19 ae       	std	Y+57, r1	; 0x39
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:210
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    2a60:	99 ad       	ldd	r25, Y+57	; 0x39
    2a62:	91 11       	cpse	r25, r1
    2a64:	9f c0       	rjmp	.+318    	; 0x2ba4 <main+0x882>
    2a66:	ef a9       	ldd	r30, Y+55	; 0x37
    2a68:	f8 ad       	ldd	r31, Y+56	; 0x38
    2a6a:	80 81       	ld	r24, Z
    2a6c:	86 11       	cpse	r24, r6
    2a6e:	9a c0       	rjmp	.+308    	; 0x2ba4 <main+0x882>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:213
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2a70:	f1 e0       	ldi	r31, 0x01	; 1
    2a72:	f9 af       	std	Y+57, r31	; 0x39
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:212
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    2a74:	44 24       	eor	r4, r4
    2a76:	43 94       	inc	r4
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:222
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    2a78:	f4 01       	movw	r30, r8
    2a7a:	81 91       	ld	r24, Z+
    2a7c:	4f 01       	movw	r8, r30
    2a7e:	84 15       	cp	r24, r4
    2a80:	a9 f0       	breq	.+42     	; 0x2aac <main+0x78a>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:225
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    2a82:	44 20       	and	r4, r4
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <main+0x766>
    2a86:	90 c0       	rjmp	.+288    	; 0x2ba8 <main+0x886>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:227
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    2a88:	85 2d       	mov	r24, r5
    2a8a:	0e 94 7c 07 	call	0xef8	; 0xef8 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:228
          buttonPressTime[i] = millis();
    2a8e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2a92:	f6 01       	movw	r30, r12
    2a94:	60 83       	st	Z, r22
    2a96:	71 83       	std	Z+1, r23	; 0x01
    2a98:	82 83       	std	Z+2, r24	; 0x02
    2a9a:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:229
          buttonHoldTime[i] = buttonPressTime[i];
    2a9c:	f5 01       	movw	r30, r10
    2a9e:	60 83       	st	Z, r22
    2aa0:	71 83       	std	Z+1, r23	; 0x01
    2aa2:	82 83       	std	Z+2, r24	; 0x02
    2aa4:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:243
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    2aa6:	f4 01       	movw	r30, r8
    2aa8:	31 97       	sbiw	r30, 0x01	; 1
    2aaa:	40 82       	st	Z, r4
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:247
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    2aac:	44 20       	and	r4, r4
    2aae:	71 f1       	breq	.+92     	; 0x2b0c <main+0x7ea>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:249
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    2ab0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2ab4:	f6 01       	movw	r30, r12
    2ab6:	20 81       	ld	r18, Z
    2ab8:	31 81       	ldd	r19, Z+1	; 0x01
    2aba:	42 81       	ldd	r20, Z+2	; 0x02
    2abc:	53 81       	ldd	r21, Z+3	; 0x03
    2abe:	62 1b       	sub	r22, r18
    2ac0:	73 0b       	sbc	r23, r19
    2ac2:	84 0b       	sbc	r24, r20
    2ac4:	95 0b       	sbc	r25, r21
    2ac6:	69 3b       	cpi	r22, 0xB9	; 185
    2ac8:	7b 40       	sbci	r23, 0x0B	; 11
    2aca:	81 05       	cpc	r24, r1
    2acc:	91 05       	cpc	r25, r1
    2ace:	f0 f0       	brcs	.+60     	; 0x2b0c <main+0x7ea>
    2ad0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2ad4:	f5 01       	movw	r30, r10
    2ad6:	20 81       	ld	r18, Z
    2ad8:	31 81       	ldd	r19, Z+1	; 0x01
    2ada:	42 81       	ldd	r20, Z+2	; 0x02
    2adc:	53 81       	ldd	r21, Z+3	; 0x03
    2ade:	62 1b       	sub	r22, r18
    2ae0:	73 0b       	sbc	r23, r19
    2ae2:	84 0b       	sbc	r24, r20
    2ae4:	95 0b       	sbc	r25, r21
    2ae6:	6b 3f       	cpi	r22, 0xFB	; 251
    2ae8:	71 05       	cpc	r23, r1
    2aea:	81 05       	cpc	r24, r1
    2aec:	91 05       	cpc	r25, r1
    2aee:	70 f0       	brcs	.+28     	; 0x2b0c <main+0x7ea>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:251
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    2af0:	88 2d       	mov	r24, r8
    2af2:	26 ef       	ldi	r18, 0xF6	; 246
    2af4:	32 e0       	ldi	r19, 0x02	; 2
    2af6:	82 1b       	sub	r24, r18
    2af8:	80 68       	ori	r24, 0x80	; 128
    2afa:	0e 94 7c 07 	call	0xef8	; 0xef8 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:252
          buttonHoldTime[i] = millis();
    2afe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2b02:	f5 01       	movw	r30, r10
    2b04:	60 83       	st	Z, r22
    2b06:	71 83       	std	Z+1, r23	; 0x01
    2b08:	82 83       	std	Z+2, r24	; 0x02
    2b0a:	93 83       	std	Z+3, r25	; 0x03
    2b0c:	53 94       	inc	r5
    2b0e:	f4 e0       	ldi	r31, 0x04	; 4
    2b10:	af 0e       	add	r10, r31
    2b12:	b1 1c       	adc	r11, r1
    2b14:	24 e0       	ldi	r18, 0x04	; 4
    2b16:	c2 0e       	add	r12, r18
    2b18:	d1 1c       	adc	r13, r1
    2b1a:	4f a9       	ldd	r20, Y+55	; 0x37
    2b1c:	58 ad       	ldd	r21, Y+56	; 0x38
    2b1e:	4f 5f       	subi	r20, 0xFF	; 255
    2b20:	5f 4f       	sbci	r21, 0xFF	; 255
    2b22:	58 af       	std	Y+56, r21	; 0x38
    2b24:	4f ab       	std	Y+55, r20	; 0x37
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:207

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    2b26:	56 e0       	ldi	r21, 0x06	; 6
    2b28:	55 12       	cpse	r5, r21
    2b2a:	9a cf       	rjmp	.-204    	; 0x2a60 <main+0x73e>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:172
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    2b2c:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <buttonBufferCount>
    2b30:	19 16       	cp	r1, r25
    2b32:	0c f4       	brge	.+2      	; 0x2b36 <main+0x814>
    2b34:	51 c0       	rjmp	.+162    	; 0x2bd8 <main+0x8b6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:149
        refreshMenuDisplay(REFRESH_DESCEND);
    }
}
void loop()
{
    btn = getButton();
    2b36:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <btn>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:170
// ----------------------------------------------------------------------------------------------------
byte getButton ()
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
    2b3a:	d1 2c       	mov	r13, r1
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:156
    {
        timrLCD = millis();
        timrMNU = millis();
        lcd.backlight();
    }
    if (millis() - timrLCD > 300)
    2b3c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2b40:	80 90 16 03 	lds	r8, 0x0316	; 0x800316 <timrLCD>
    2b44:	90 90 17 03 	lds	r9, 0x0317	; 0x800317 <timrLCD+0x1>
    2b48:	a0 90 18 03 	lds	r10, 0x0318	; 0x800318 <timrLCD+0x2>
    2b4c:	b0 90 19 03 	lds	r11, 0x0319	; 0x800319 <timrLCD+0x3>
    2b50:	68 19       	sub	r22, r8
    2b52:	79 09       	sbc	r23, r9
    2b54:	8a 09       	sbc	r24, r10
    2b56:	9b 09       	sbc	r25, r11
    2b58:	6d 32       	cpi	r22, 0x2D	; 45
    2b5a:	71 40       	sbci	r23, 0x01	; 1
    2b5c:	81 05       	cpc	r24, r1
    2b5e:	91 05       	cpc	r25, r1
    2b60:	20 f0       	brcs	.+8      	; 0x2b6a <main+0x848>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:159
    {
        downButPreCount = 0;
        selButPreCount = 0;
    2b62:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <selButPreCount+0x1>
    2b66:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:162
        upButPreCount = 0;
    }
    switch (appMode)
    2b6a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <appMode>
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <main+0x852>
    2b72:	4d c4       	rjmp	.+2202   	; 0x340e <main+0x10ec>
    2b74:	08 f0       	brcs	.+2      	; 0x2b78 <main+0x856>
    2b76:	64 c0       	rjmp	.+200    	; 0x2c40 <main+0x91e>
    2b78:	88 23       	and	r24, r24
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <main+0x85c>
    2b7c:	ff c0       	rjmp	.+510    	; 0x2d7c <main+0xa5a>
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <main+0x862>
    2b82:	d4 c2       	rjmp	.+1448   	; 0x312c <main+0xe0a>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	89 2b       	or	r24, r25
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <main+0x86c>
    2b8c:	19 cf       	rjmp	.-462    	; 0x29c0 <main+0x69e>
    2b8e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2b92:	14 cf       	rjmp	.-472    	; 0x29bc <main+0x69a>
attach():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2b94:	27 e6       	ldi	r18, 0x67	; 103
    2b96:	32 e0       	ldi	r19, 0x02	; 2
    2b98:	30 93 fa 03 	sts	0x03FA, r19	; 0x8003fa <Menu1+0x1>
    2b9c:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2ba0:	87 e0       	ldi	r24, 0x07	; 7
    2ba2:	c3 ce       	rjmp	.-634    	; 0x292a <main+0x608>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:217
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    2ba4:	41 2c       	mov	r4, r1
    2ba6:	68 cf       	rjmp	.-304    	; 0x2a78 <main+0x756>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:234
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    2ba8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2bac:	f6 01       	movw	r30, r12
    2bae:	20 81       	ld	r18, Z
    2bb0:	31 81       	ldd	r19, Z+1	; 0x01
    2bb2:	42 81       	ldd	r20, Z+2	; 0x02
    2bb4:	53 81       	ldd	r21, Z+3	; 0x03
    2bb6:	62 1b       	sub	r22, r18
    2bb8:	73 0b       	sbc	r23, r19
    2bba:	84 0b       	sbc	r24, r20
    2bbc:	95 0b       	sbc	r25, r21
    2bbe:	69 3b       	cpi	r22, 0xB9	; 185
    2bc0:	7b 40       	sbci	r23, 0x0B	; 11
    2bc2:	81 05       	cpc	r24, r1
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	28 f0       	brcs	.+10     	; 0x2bd2 <main+0x8b0>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:236
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    2bc8:	85 2d       	mov	r24, r5
    2bca:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:240
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    2bcc:	0e 94 7c 07 	call	0xef8	; 0xef8 <queueButton(unsigned char)>
    2bd0:	6a cf       	rjmp	.-300    	; 0x2aa6 <main+0x784>
    2bd2:	85 2d       	mov	r24, r5
    2bd4:	80 64       	ori	r24, 0x40	; 64
    2bd6:	fa cf       	rjmp	.-12     	; 0x2bcc <main+0x8aa>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:174
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    2bd8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <button_read_pos>
    2bdc:	e8 2f       	mov	r30, r24
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	e1 50       	subi	r30, 0x01	; 1
    2be2:	fd 4f       	sbci	r31, 0xFD	; 253
    2be4:	d0 80       	ld	r13, Z
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:175
    buttonBufferCount--;
    2be6:	91 50       	subi	r25, 0x01	; 1
    2be8:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:176
    button_read_pos++;
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:178
    
    if (button_read_pos >= sizeof (buttonBuffer))
    2bee:	85 30       	cpi	r24, 0x05	; 5
    2bf0:	20 f5       	brcc	.+72     	; 0x2c3a <main+0x918>
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:176
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    2bf2:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:149
        refreshMenuDisplay(REFRESH_DESCEND);
    }
}
void loop()
{
    btn = getButton();
    2bf6:	d0 92 1a 03 	sts	0x031A, r13	; 0x80031a <btn>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:150
    if (btn)
    2bfa:	dd 20       	and	r13, r13
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <main+0x8de>
    2bfe:	9e cf       	rjmp	.-196    	; 0x2b3c <main+0x81a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:152
    {
        timrLCD = millis();
    2c00:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2c04:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <timrLCD>
    2c08:	70 93 17 03 	sts	0x0317, r23	; 0x800317 <timrLCD+0x1>
    2c0c:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <timrLCD+0x2>
    2c10:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:153
        timrMNU = millis();
    2c14:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2c18:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <timrMNU>
    2c1c:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <timrMNU+0x1>
    2c20:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <timrMNU+0x2>
    2c24:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2c28:	88 e0       	ldi	r24, 0x08	; 8
    2c2a:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	8f e6       	ldi	r24, 0x6F	; 111
    2c32:	94 e0       	ldi	r25, 0x04	; 4
    2c34:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    2c38:	81 cf       	rjmp	.-254    	; 0x2b3c <main+0x81a>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.1/LcdKeypad.cpp:180
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    2c3a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <button_read_pos>
    2c3e:	db cf       	rjmp	.-74     	; 0x2bf6 <main+0x8d4>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:162
    {
        downButPreCount = 0;
        selButPreCount = 0;
        upButPreCount = 0;
    }
    switch (appMode)
    2c40:	83 30       	cpi	r24, 0x03	; 3
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <main+0x924>
    2c44:	4a c2       	rjmp	.+1172   	; 0x30da <main+0xdb8>
    2c46:	84 30       	cpi	r24, 0x04	; 4
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <main+0x92a>
    2c4a:	9c cf       	rjmp	.-200    	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:304
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    2c4c:	60 e0       	ldi	r22, 0x00	; 0
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:305
        lcd.print(F("  RUNNING DEMO  "));
    2c54:	85 ed       	ldi	r24, 0xD5	; 213
    2c56:	92 e0       	ldi	r25, 0x02	; 2
    2c58:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:306
        lcd.setCursor(0, 1);
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:307
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    2c64:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <demoTime>
    2c68:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <demoTime+0x1>
main():
    2c6c:	6d e6       	ldi	r22, 0x6D	; 109
    2c6e:	71 e0       	ldi	r23, 0x01	; 1
loop():
    2c70:	4c e0       	ldi	r20, 0x0C	; 12
    2c72:	c4 16       	cp	r12, r20
    2c74:	d1 04       	cpc	r13, r1
    2c76:	14 f4       	brge	.+4      	; 0x2c7c <main+0x95a>
main():
    2c78:	64 e7       	ldi	r22, 0x74	; 116
    2c7a:	71 e0       	ldi	r23, 0x01	; 1
loop():
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	43 96       	adiw	r24, 0x13	; 19
    2c80:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
    2c84:	5d e0       	ldi	r21, 0x0D	; 13
    2c86:	c5 16       	cp	r12, r21
    2c88:	d1 04       	cpc	r13, r1
    2c8a:	1c f0       	brlt	.+6      	; 0x2c92 <main+0x970>
    2c8c:	6c e0       	ldi	r22, 0x0C	; 12
    2c8e:	c6 1a       	sub	r12, r22
    2c90:	d1 08       	sbc	r13, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    2c92:	1a 8e       	std	Y+26, r1	; 0x1a
    2c94:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    2c96:	1c 8e       	std	Y+28, r1	; 0x1c
    2c98:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    2c9a:	1e 8e       	std	Y+30, r1	; 0x1e
    2c9c:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2c9e:	4a e0       	ldi	r20, 0x0A	; 10
    2ca0:	b8 01       	movw	r22, r16
    2ca2:	c6 01       	movw	r24, r12
    2ca4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    2ca8:	f8 01       	movw	r30, r16
    2caa:	01 90       	ld	r0, Z+
    2cac:	00 20       	and	r0, r0
    2cae:	e9 f7       	brne	.-6      	; 0x2caa <main+0x988>
    2cb0:	31 97       	sbiw	r30, 0x01	; 1
    2cb2:	6f 01       	movw	r12, r30
    2cb4:	c0 1a       	sub	r12, r16
    2cb6:	d1 0a       	sbc	r13, r17
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2cb8:	b6 01       	movw	r22, r12
    2cba:	c7 01       	movw	r24, r14
    2cbc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <String::reserve(unsigned int)>
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <main+0x19a4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    2cc6:	c7 01       	movw	r24, r14
    2cc8:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    2ccc:	6f e2       	ldi	r22, 0x2F	; 47
    2cce:	72 e0       	ldi	r23, 0x02	; 2
    2cd0:	c8 01       	movw	r24, r16
    2cd2:	0e 94 04 0b 	call	0x1608	; 0x1608 <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:307
    2cd6:	b7 01       	movw	r22, r14
    2cd8:	c8 01       	movw	r24, r16
    2cda:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <operator+(StringSumHelper const&, String const&)>
    2cde:	be 01       	movw	r22, r28
    2ce0:	6d 5e       	subi	r22, 0xED	; 237
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    2ce8:	fc 01       	movw	r30, r24
    2cea:	44 81       	ldd	r20, Z+4	; 0x04
    2cec:	55 81       	ldd	r21, Z+5	; 0x05
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	8f e6       	ldi	r24, 0x6F	; 111
    2cf4:	94 e0       	ldi	r25, 0x04	; 4
    2cf6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
    2d02:	89 8d       	ldd	r24, Y+25	; 0x19
    2d04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d06:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
    2d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0e:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:308
        digitalWrite(AMP, HIGH);
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	8e e0       	ldi	r24, 0x0E	; 14
    2d16:	0e 94 f7 02 	call	0x5ee	; 0x5ee <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:309
        delay(1000);
    2d1a:	68 ee       	ldi	r22, 0xE8	; 232
    2d1c:	73 e0       	ldi	r23, 0x03	; 3
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:310
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    2d26:	d0 90 04 01 	lds	r13, 0x0104	; 0x800104 <demoTime>
    2d2a:	c8 01       	movw	r24, r16
    2d2c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2d30:	cb 80       	ldd	r12, Y+3	; 0x03
    2d32:	ce 01       	movw	r24, r28
    2d34:	43 96       	adiw	r24, 0x13	; 19
    2d36:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2d3a:	bc 88       	ldd	r11, Y+20	; 0x14
    2d3c:	c7 01       	movw	r24, r14
    2d3e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2d42:	89 8d       	ldd	r24, Y+25	; 0x19
    2d44:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <bell>
    2d48:	b0 92 6a 04 	sts	0x046A, r11	; 0x80046a <bell+0x1>
    2d4c:	c0 92 6b 04 	sts	0x046B, r12	; 0x80046b <bell+0x2>
    2d50:	d0 92 6c 04 	sts	0x046C, r13	; 0x80046c <bell+0x3>
    2d54:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <bell+0x4>
    2d58:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <bell+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:311
        PlayChant();
    2d5c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:312
        if (btn == BUTTON_DOWN_PRESSED)
    2d60:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <btn>
    2d64:	83 30       	cpi	r24, 0x03	; 3
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <main+0xa48>
    2d68:	0d cf       	rjmp	.-486    	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:314
        {
            playSong = 9;
    2d6a:	89 e0       	ldi	r24, 0x09	; 9
    2d6c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	86 e1       	ldi	r24, 0x16	; 22
    2d76:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
    2d7a:	04 cf       	rjmp	.-504    	; 0x2b84 <main+0x862>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:165
        upButPreCount = 0;
    }
    switch (appMode)
    {
    case APP_NORMAL_MODE:
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    2d7c:	f1 e8       	ldi	r31, 0x81	; 129
    2d7e:	df 12       	cpse	r13, r31
    2d80:	69 c1       	rjmp	.+722    	; 0x3054 <main+0xd32>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:167
        {
            appMode = APP_MENU_MODE;
    2d82:	70 92 0f 03 	sts	0x030F, r7	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:168
            refreshMenuDisplay(REFRESH_DESCEND);
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:169
            timrMNU = millis();
    2d8c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2d90:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <timrMNU>
    2d94:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <timrMNU+0x1>
    2d98:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <timrMNU+0x2>
    2d9c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:182
                appMode = APP_DEMO_MODE;
                lcd.clear();
            }
        }

        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    2da0:	c8 01       	movw	r24, r16
    2da2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	81 11       	cpse	r24, r1
    2daa:	5a c0       	rjmp	.+180    	; 0x2e60 <main+0xb3e>
    2dac:	ce 01       	movw	r24, r28
    2dae:	43 96       	adiw	r24, 0x13	; 19
    2db0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2db4:	88 8d       	ldd	r24, Y+24	; 0x18
    2db6:	81 11       	cpse	r24, r1
    2db8:	53 c0       	rjmp	.+166    	; 0x2e60 <main+0xb3e>
    2dba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2dbe:	ab 01       	movw	r20, r22
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <timrAmp>
    2dc6:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <timrAmp+0x1>
    2dca:	a0 91 0d 03 	lds	r26, 0x030D	; 0x80030d <timrAmp+0x2>
    2dce:	b0 91 0e 03 	lds	r27, 0x030E	; 0x80030e <timrAmp+0x3>
    2dd2:	88 5b       	subi	r24, 0xB8	; 184
    2dd4:	91 41       	sbci	r25, 0x11	; 17
    2dd6:	af 4f       	sbci	r26, 0xFF	; 255
    2dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dda:	84 17       	cp	r24, r20
    2ddc:	95 07       	cpc	r25, r21
    2dde:	a6 07       	cpc	r26, r22
    2de0:	b7 07       	cpc	r27, r23
    2de2:	f0 f5       	brcc	.+124    	; 0x2e60 <main+0xb3e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:184
        {
            bell = rtc.now();
    2de4:	c8 01       	movw	r24, r16
    2de6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2dea:	86 e0       	ldi	r24, 0x06	; 6
    2dec:	f8 01       	movw	r30, r16
    2dee:	a9 e6       	ldi	r26, 0x69	; 105
    2df0:	b4 e0       	ldi	r27, 0x04	; 4
    2df2:	01 90       	ld	r0, Z+
    2df4:	0d 92       	st	X+, r0
    2df6:	8a 95       	dec	r24
    2df8:	e1 f7       	brne	.-8      	; 0x2df2 <main+0xad0>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:185
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    2dfa:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <bell+0x3>
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <config+0xf>
    2e04:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <config+0x10>
    2e08:	82 17       	cp	r24, r18
    2e0a:	93 07       	cpc	r25, r19
    2e0c:	4c f1       	brlt	.+82     	; 0x2e60 <main+0xb3e>
    2e0e:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <config+0x11>
    2e12:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <config+0x12>
    2e16:	28 17       	cp	r18, r24
    2e18:	39 07       	cpc	r19, r25
    2e1a:	14 f1       	brlt	.+68     	; 0x2e60 <main+0xb3e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:187
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    2e1c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <config+0x17>
    2e20:	88 23       	and	r24, r24
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <main+0xb04>
    2e24:	43 c1       	rjmp	.+646    	; 0x30ac <main+0xd8a>
    2e26:	0e 94 44 02 	call	0x488	; 0x488 <DateTime::dayOfTheWeek() const [clone .constprop.15]>
    2e2a:	88 23       	and	r24, r24
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <main+0xb0e>
    2e2e:	3e c1       	rjmp	.+636    	; 0x30ac <main+0xd8a>
    2e30:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <bell+0x3>
    2e34:	8a 50       	subi	r24, 0x0A	; 10
    2e36:	87 30       	cpi	r24, 0x07	; 7
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <main+0xb1a>
    2e3a:	38 c1       	rjmp	.+624    	; 0x30ac <main+0xd8a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:192
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    2e3c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:193
                    lcd.setCursor(0,0);
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:194
                    lcd.print("School Zone : ON");
    2e48:	89 ef       	ldi	r24, 0xF9	; 249
    2e4a:	91 e0       	ldi	r25, 0x01	; 1
    2e4c:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:195
                    delay(1000);
    2e50:	68 ee       	ldi	r22, 0xE8	; 232
    2e52:	73 e0       	ldi	r23, 0x03	; 3
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	0e 94 c3 03 	call	0x786	; 0x786 <delay>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:203
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    2e5c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:207
                }
            }
        }
        if (millis() - timr_Time > 1000)
    2e60:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2e64:	80 90 07 03 	lds	r8, 0x0307	; 0x800307 <timr_Time>
    2e68:	90 90 08 03 	lds	r9, 0x0308	; 0x800308 <timr_Time+0x1>
    2e6c:	a0 90 09 03 	lds	r10, 0x0309	; 0x800309 <timr_Time+0x2>
    2e70:	b0 90 0a 03 	lds	r11, 0x030A	; 0x80030a <timr_Time+0x3>
    2e74:	68 19       	sub	r22, r8
    2e76:	79 09       	sbc	r23, r9
    2e78:	8a 09       	sbc	r24, r10
    2e7a:	9b 09       	sbc	r25, r11
    2e7c:	69 3e       	cpi	r22, 0xE9	; 233
    2e7e:	73 40       	sbci	r23, 0x03	; 3
    2e80:	81 05       	cpc	r24, r1
    2e82:	91 05       	cpc	r25, r1
    2e84:	08 f4       	brcc	.+2      	; 0x2e88 <main+0xb66>
    2e86:	be c0       	rjmp	.+380    	; 0x3004 <main+0xce2>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:209
        {
            timr_Time = millis();
    2e88:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    2e8c:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <timr_Time>
    2e90:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <timr_Time+0x1>
    2e94:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <timr_Time+0x2>
    2e98:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <timr_Time+0x3>
showTime():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:327
void showTime()
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	43 96       	adiw	r24, 0x13	; 19
    2ea0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:562
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    2ea4:	6e 89       	ldd	r22, Y+22	; 0x16
    2ea6:	66 23       	and	r22, r22
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <main+0xb8a>
    2eaa:	12 c1       	rjmp	.+548    	; 0x30d0 <main+0xdae>
    2eac:	6c 30       	cpi	r22, 0x0C	; 12
    2eae:	11 f0       	breq	.+4      	; 0x2eb4 <main+0xb92>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:564
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    2eb0:	08 f0       	brcs	.+2      	; 0x2eb4 <main+0xb92>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:565
    return hh - 12;
    2eb2:	6c 50       	subi	r22, 0x0C	; 12
showTime():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:327
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	c8 01       	movw	r24, r16
    2eb8:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:328
    lpad(h, intbuf, '0', 2);
    2ebc:	42 e0       	ldi	r20, 0x02	; 2
    2ebe:	b8 01       	movw	r22, r16
    2ec0:	c1 01       	movw	r24, r2
    2ec2:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:329
    inttostr(intbuf, rtc.now().minute());
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	43 96       	adiw	r24, 0x13	; 19
    2eca:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2ece:	6f 89       	ldd	r22, Y+23	; 0x17
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	c8 01       	movw	r24, r16
    2ed4:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:330
    lpad(m, intbuf, '0', 2);
    2ed8:	42 e0       	ldi	r20, 0x02	; 2
    2eda:	b8 01       	movw	r22, r16
    2edc:	ce 01       	movw	r24, r28
    2ede:	89 96       	adiw	r24, 0x29	; 41
    2ee0:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:331
    inttostr(intbuf, rtc.now().second());
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	43 96       	adiw	r24, 0x13	; 19
    2ee8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2eec:	68 8d       	ldd	r22, Y+24	; 0x18
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	c8 01       	movw	r24, r16
    2ef2:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:332
    lpad(s, intbuf, '0', 2);
    2ef6:	42 e0       	ldi	r20, 0x02	; 2
    2ef8:	b8 01       	movw	r22, r16
    2efa:	ce 01       	movw	r24, r28
    2efc:	86 96       	adiw	r24, 0x26	; 38
    2efe:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:334

    lcd.setCursor(2, 0);
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:335
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	43 96       	adiw	r24, 0x13	; 19
    2f0e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2f12:	8e 89       	ldd	r24, Y+22	; 0x16
    2f14:	8c 30       	cpi	r24, 0x0C	; 12
    2f16:	08 f4       	brcc	.+2      	; 0x2f1a <main+0xbf8>
    2f18:	dd c0       	rjmp	.+442    	; 0x30d4 <main+0xdb2>
main():
    2f1a:	8c e6       	ldi	r24, 0x6C	; 108
    2f1c:	91 e0       	ldi	r25, 0x01	; 1
showTime():
    2f1e:	9f 93       	push	r25
    2f20:	8f 93       	push	r24
    2f22:	4a a9       	ldd	r20, Y+50	; 0x32
    2f24:	4f 93       	push	r20
    2f26:	59 a9       	ldd	r21, Y+49	; 0x31
    2f28:	5f 93       	push	r21
    2f2a:	8a e0       	ldi	r24, 0x0A	; 10
    2f2c:	92 e0       	ldi	r25, 0x02	; 2
    2f2e:	9f 93       	push	r25
    2f30:	8f 93       	push	r24
    2f32:	68 a9       	ldd	r22, Y+48	; 0x30
    2f34:	6f 93       	push	r22
    2f36:	ef a5       	ldd	r30, Y+47	; 0x2f
    2f38:	ef 93       	push	r30
    2f3a:	9f 93       	push	r25
    2f3c:	8f 93       	push	r24
    2f3e:	3f 92       	push	r3
    2f40:	2f 92       	push	r2
    2f42:	66 e0       	ldi	r22, 0x06	; 6
    2f44:	b6 2e       	mov	r11, r22
    2f46:	bf 92       	push	r11
    2f48:	78 ee       	ldi	r23, 0xE8	; 232
    2f4a:	c7 2e       	mov	r12, r23
    2f4c:	73 e0       	ldi	r23, 0x03	; 3
    2f4e:	d7 2e       	mov	r13, r23
    2f50:	df 92       	push	r13
    2f52:	cf 92       	push	r12
    2f54:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    2f58:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:337

    inttostr(intbuf, rtc.now().day());
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	43 96       	adiw	r24, 0x13	; 19
    2f60:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2f64:	6d 89       	ldd	r22, Y+21	; 0x15
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	c8 01       	movw	r24, r16
    2f6a:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:338
    lpad(dat, intbuf, '0', 2);
    2f6e:	42 e0       	ldi	r20, 0x02	; 2
    2f70:	b8 01       	movw	r22, r16
    2f72:	ce 01       	movw	r24, r28
    2f74:	83 96       	adiw	r24, 0x23	; 35
    2f76:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:339
    inttostr(intbuf, rtc.now().year());
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	43 96       	adiw	r24, 0x13	; 19
    2f7e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    2f82:	6b 89       	ldd	r22, Y+19	; 0x13
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	60 53       	subi	r22, 0x30	; 48
    2f88:	78 4f       	sbci	r23, 0xF8	; 248
showTime():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:339
    2f8a:	c8 01       	movw	r24, r16
    2f8c:	0e 94 a0 08 	call	0x1140	; 0x1140 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:340
    lpad(year, intbuf, '0', 4);
    2f90:	44 e0       	ldi	r20, 0x04	; 4
    2f92:	b8 01       	movw	r22, r16
    2f94:	c7 01       	movw	r24, r14
    2f96:	0e 94 19 09 	call	0x1232	; 0x1232 <lpad(char*, char const*, char, unsigned char) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:341
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	43 96       	adiw	r24, 0x13	; 19
    2f9e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    2fa2:	8c 89       	ldd	r24, Y+20	; 0x14
    2fa4:	81 50       	subi	r24, 0x01	; 1
    2fa6:	99 0b       	sbc	r25, r25
    2fa8:	b8 9e       	mul	r11, r24
    2faa:	f0 01       	movw	r30, r0
    2fac:	b9 9e       	mul	r11, r25
    2fae:	f0 0d       	add	r31, r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	ef 5d       	subi	r30, 0xDF	; 223
    2fb4:	fb 4f       	sbci	r31, 0xFB	; 251
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	ce 01       	movw	r24, r28
    2fbc:	4f 96       	adiw	r24, 0x1f	; 31
    2fbe:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:343

    lcd.setCursor(2, 1);
    2fc2:	61 e0       	ldi	r22, 0x01	; 1
    2fc4:	82 e0       	ldi	r24, 0x02	; 2
    2fc6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:344
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
    2fca:	ff 92       	push	r15
    2fcc:	ef 92       	push	r14
    2fce:	8c e0       	ldi	r24, 0x0C	; 12
    2fd0:	92 e0       	ldi	r25, 0x02	; 2
    2fd2:	9f 93       	push	r25
    2fd4:	8f 93       	push	r24
    2fd6:	fe a9       	ldd	r31, Y+54	; 0x36
    2fd8:	ff 93       	push	r31
    2fda:	2d a9       	ldd	r18, Y+53	; 0x35
    2fdc:	2f 93       	push	r18
    2fde:	9f 93       	push	r25
    2fe0:	8f 93       	push	r24
    2fe2:	3c a9       	ldd	r19, Y+52	; 0x34
    2fe4:	3f 93       	push	r19
    2fe6:	4b a9       	ldd	r20, Y+51	; 0x33
    2fe8:	4f 93       	push	r20
    2fea:	85 e0       	ldi	r24, 0x05	; 5
    2fec:	8f 93       	push	r24
    2fee:	df 92       	push	r13
    2ff0:	cf 92       	push	r12
    2ff2:	0e 94 35 0b 	call	0x166a	; 0x166a <fmt(char*, unsigned char, ...)>
    2ff6:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:212
        if (millis() - timr_Time > 1000)
        {
            timr_Time = millis();
            showTime();
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    3004:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    3008:	80 90 16 03 	lds	r8, 0x0316	; 0x800316 <timrLCD>
    300c:	90 90 17 03 	lds	r9, 0x0317	; 0x800317 <timrLCD+0x1>
    3010:	a0 90 18 03 	lds	r10, 0x0318	; 0x800318 <timrLCD+0x2>
    3014:	b0 90 19 03 	lds	r11, 0x0319	; 0x800319 <timrLCD+0x3>
    3018:	9b 01       	movw	r18, r22
    301a:	ac 01       	movw	r20, r24
    301c:	28 19       	sub	r18, r8
    301e:	39 09       	sbc	r19, r9
    3020:	4a 09       	sbc	r20, r10
    3022:	5b 09       	sbc	r21, r11
    3024:	49 01       	movw	r8, r18
    3026:	5a 01       	movw	r10, r20
    3028:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <config+0x13>
    302c:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <config+0x14>
    3030:	28 ee       	ldi	r18, 0xE8	; 232
    3032:	33 e0       	ldi	r19, 0x03	; 3
    3034:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__usmulhisi3>
    3038:	68 15       	cp	r22, r8
    303a:	79 05       	cpc	r23, r9
    303c:	8a 05       	cpc	r24, r10
    303e:	9b 05       	cpc	r25, r11
    3040:	08 f0       	brcs	.+2      	; 0x3044 <main+0xd22>
    3042:	a0 cd       	rjmp	.-1216   	; 0x2b84 <main+0x862>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3044:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	8f e6       	ldi	r24, 0x6F	; 111
    304c:	94 e0       	ldi	r25, 0x04	; 4
    304e:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    3052:	98 cd       	rjmp	.-1232   	; 0x2b84 <main+0x862>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:171
        {
            appMode = APP_MENU_MODE;
            refreshMenuDisplay(REFRESH_DESCEND);
            timrMNU = millis();
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3054:	21 e0       	ldi	r18, 0x01	; 1
    3056:	d2 12       	cpse	r13, r18
    3058:	a3 ce       	rjmp	.-698    	; 0x2da0 <main+0xa7e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:173
        {
            selButPreCount += 1;
    305a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <selButPreCount>
    305e:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <selButPreCount+0x1>
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <selButPreCount+0x1>
    3068:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:174
            if (selButPreCount >= 4)
    306c:	04 97       	sbiw	r24, 0x04	; 4
    306e:	0c f4       	brge	.+2      	; 0x3072 <main+0xd50>
    3070:	97 ce       	rjmp	.-722    	; 0x2da0 <main+0xa7e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:176
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3072:	c8 01       	movw	r24, r16
    3074:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	8f 31       	cpi	r24, 0x1F	; 31
    307c:	88 f0       	brcs	.+34     	; 0x30a0 <main+0xd7e>
    307e:	ce 01       	movw	r24, r28
    3080:	43 96       	adiw	r24, 0x13	; 19
    3082:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    3086:	8e 89       	ldd	r24, Y+22	; 0x16
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <demoTime+0x1>
    3090:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <demoTime>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:177
                appMode = APP_DEMO_MODE;
    3094:	84 e0       	ldi	r24, 0x04	; 4
    3096:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:178
                lcd.clear();
    309a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
    309e:	80 ce       	rjmp	.-768    	; 0x2da0 <main+0xa7e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:176
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    30a0:	c7 01       	movw	r24, r14
    30a2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    30a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	f0 cf       	rjmp	.-32     	; 0x308c <main+0xd6a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:200
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	8e e0       	ldi	r24, 0x0E	; 14
    30b0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:201
                    timrAmp = millis();
    30b4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    30b8:	60 93 0b 03 	sts	0x030B, r22	; 0x80030b <timrAmp>
    30bc:	70 93 0c 03 	sts	0x030C, r23	; 0x80030c <timrAmp+0x1>
    30c0:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <timrAmp+0x2>
    30c4:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:202
                    appMode = APP_CHANT_MODE;
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <appMode>
    30ce:	c6 ce       	rjmp	.-628    	; 0x2e5c <main+0xb3a>
main():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:563
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    30d0:	6c e0       	ldi	r22, 0x0C	; 12
    30d2:	f0 ce       	rjmp	.-544    	; 0x2eb4 <main+0xb92>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:335
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    30d4:	83 e7       	ldi	r24, 0x73	; 115
    30d6:	91 e0       	ldi	r25, 0x01	; 1
    30d8:	22 cf       	rjmp	.-444    	; 0x2f1e <main+0xbfc>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    30da:	88 e0       	ldi	r24, 0x08	; 8
    30dc:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	8f e6       	ldi	r24, 0x6F	; 111
    30e4:	94 e0       	ldi	r25, 0x04	; 4
    30e6:	0e 94 d6 06 	call	0xdac	; 0xdac <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:222
  

    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:223
        lcd.print("CHANT PLAYING...");
    30f2:	8e e0       	ldi	r24, 0x0E	; 14
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:224
        if (millis() >= timrAmp + ampDelay)
    30fa:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    30fe:	ab 01       	movw	r20, r22
    3100:	bc 01       	movw	r22, r24
    3102:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <timrAmp>
    3106:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <timrAmp+0x1>
    310a:	a0 91 0d 03 	lds	r26, 0x030D	; 0x80030d <timrAmp+0x2>
    310e:	b0 91 0e 03 	lds	r27, 0x030E	; 0x80030e <timrAmp+0x3>
    3112:	88 57       	subi	r24, 0x78	; 120
    3114:	9c 4e       	sbci	r25, 0xEC	; 236
    3116:	af 4f       	sbci	r26, 0xFF	; 255
    3118:	bf 4f       	sbci	r27, 0xFF	; 255
    311a:	48 17       	cp	r20, r24
    311c:	59 07       	cpc	r21, r25
    311e:	6a 07       	cpc	r22, r26
    3120:	7b 07       	cpc	r23, r27
    3122:	08 f4       	brcc	.+2      	; 0x3126 <main+0xe04>
    3124:	2f cd       	rjmp	.-1442   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:225
            PlayChant();
    3126:	0e 94 5d 09 	call	0x12ba	; 0x12ba <PlayChant()>
    312a:	2c cd       	rjmp	.-1448   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:230
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > 10000)
    312c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    3130:	80 90 12 03 	lds	r8, 0x0312	; 0x800312 <timrMNU>
    3134:	90 90 13 03 	lds	r9, 0x0313	; 0x800313 <timrMNU+0x1>
    3138:	a0 90 14 03 	lds	r10, 0x0314	; 0x800314 <timrMNU+0x2>
    313c:	b0 90 15 03 	lds	r11, 0x0315	; 0x800315 <timrMNU+0x3>
    3140:	68 19       	sub	r22, r8
    3142:	79 09       	sbc	r23, r9
    3144:	8a 09       	sbc	r24, r10
    3146:	9b 09       	sbc	r25, r11
    3148:	61 31       	cpi	r22, 0x11	; 17
    314a:	77 42       	sbci	r23, 0x27	; 39
    314c:	81 05       	cpc	r24, r1
    314e:	91 05       	cpc	r25, r1
    3150:	a0 f0       	brcs	.+40     	; 0x317a <main+0xe58>
reset():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3152:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <Menu1>
    3156:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <Menu1+0x1>
    315a:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <Menu1+0x4>
    315e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3162:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1+0x2>
    3166:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    316a:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:21
  menuStackCount = 0;
    316e:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:233
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3172:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:234
            lcd.clear();
    3176:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:237
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    317a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:238
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	09 f0       	breq	.+2      	; 0x3184 <main+0xe62>
    3182:	88 c0       	rjmp	.+272    	; 0x3294 <main+0xf72>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:241
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    3184:	c8 01       	movw	r24, r16
    3186:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <StDate+0x1>
    3192:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:242
            StMonth = rtc.now().month();
    3196:	c8 01       	movw	r24, r16
    3198:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <StMonth+0x1>
    31a4:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:243
            StYear = rtc.now().year();
    31a8:	c8 01       	movw	r24, r16
    31aa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	80 53       	subi	r24, 0x30	; 48
    31b4:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:243
    31b6:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <StYear+0x1>
    31ba:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <StYear>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:244
            StHr = rtc.now().hour();
    31be:	c8 01       	movw	r24, r16
    31c0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <StHr+0x1>
    31cc:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <StHr>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:245
            StMin = rtc.now().minute();
    31d0:	c8 01       	movw	r24, r16
    31d2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <RTC_DS1307::now()>
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <StMin+0x1>
    31de:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <StMin>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:247
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    31e2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
    31e6:	83 30       	cpi	r24, 0x03	; 3
    31e8:	09 f0       	breq	.+2      	; 0x31ec <main+0xeca>
    31ea:	5f c0       	rjmp	.+190    	; 0x32aa <main+0xf88>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:249
        {
            blinkMode = setHr;
    31ec:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <blinkMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:256
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    31f0:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <btn>
    31f4:	44 e8       	ldi	r20, 0x84	; 132
    31f6:	d4 12       	cpse	r13, r20
    31f8:	14 c0       	rjmp	.+40     	; 0x3222 <main+0xf00>
reset():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    31fa:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <Menu1>
    31fe:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <Menu1+0x1>
    3202:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <Menu1+0x4>
    3206:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    320a:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1+0x2>
    320e:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3212:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:21
  menuStackCount = 0;
    3216:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:259
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    321a:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:260
            lcd.clear();
    321e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:853
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    3222:	0e 94 c6 01 	call	0x38c	; 0x38c <MenuManager::currentItemHasChildren() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:855

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3226:	8d 2d       	mov	r24, r13
    3228:	8f 77       	andi	r24, 0x7F	; 127
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	09 f4       	brne	.+2      	; 0x3230 <main+0xf0e>
    322e:	45 c0       	rjmp	.+138    	; 0x32ba <main+0xf98>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:857
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3230:	83 30       	cpi	r24, 0x03	; 3
    3232:	09 f4       	brne	.+2      	; 0x3236 <main+0xf14>
    3234:	45 c0       	rjmp	.+138    	; 0x32c0 <main+0xf9e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:859
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    3236:	51 e0       	ldi	r21, 0x01	; 1
    3238:	d5 16       	cp	r13, r21
    323a:	09 f4       	brne	.+2      	; 0x323e <main+0xf1c>
    323c:	44 c0       	rjmp	.+136    	; 0x32c6 <main+0xfa4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:861
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    323e:	64 e4       	ldi	r22, 0x44	; 68
    3240:	d6 16       	cp	r13, r22
    3242:	09 f4       	brne	.+2      	; 0x3246 <main+0xf24>
    3244:	43 c0       	rjmp	.+134    	; 0x32cc <main+0xfaa>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:852
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    3246:	d1 2c       	mov	r13, r1
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    3248:	8d ef       	ldi	r24, 0xFD	; 253
    324a:	8d 0d       	add	r24, r13
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	08 f0       	brcs	.+2      	; 0x3252 <main+0xf30>
    3250:	bf c0       	rjmp	.+382    	; 0x33d0 <main+0x10ae>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    3252:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
    3256:	88 23       	and	r24, r24
    3258:	e1 f1       	breq	.+120    	; 0x32d2 <main+0xfb0>
    325a:	84 e0       	ldi	r24, 0x04	; 4
    325c:	d8 16       	cp	r13, r24
    325e:	c9 f1       	breq	.+114    	; 0x32d2 <main+0xfb0>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    3260:	0e 94 c6 01 	call	0x38c	; 0x38c <MenuManager::currentItemHasChildren() [clone .constprop.86]>
    3264:	81 11       	cpse	r24, r1
    3266:	71 c0       	rjmp	.+226    	; 0x334a <main+0x1028>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:271
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    3268:	82 e0       	ldi	r24, 0x02	; 2
    326a:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:272
            if (Menu1.getCurrentItemCmdId())
    326e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
    3272:	88 23       	and	r24, r24
    3274:	09 f4       	brne	.+2      	; 0x3278 <main+0xf56>
    3276:	86 cc       	rjmp	.-1780   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:274
            {
                lcd.setCursor(0, 1);
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:275
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    3280:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:296
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    3282:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <strbuf>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:297
            strbuf[1] = 0;
    3286:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:298
            lcd.print(strbuf);
    328a:	88 ee       	ldi	r24, 0xE8	; 232
    328c:	93 e0       	ldi	r25, 0x03	; 3
    328e:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
    3292:	78 cc       	rjmp	.-1808   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:238
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3294:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:237
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    3298:	82 30       	cpi	r24, 0x02	; 2
    329a:	09 f4       	brne	.+2      	; 0x329e <main+0xf7c>
    329c:	73 cf       	rjmp	.-282    	; 0x3184 <main+0xe62>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:239
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    329e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:238
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    32a2:	83 30       	cpi	r24, 0x03	; 3
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <main+0xf86>
    32a6:	9d cf       	rjmp	.-198    	; 0x31e2 <main+0xec0>
    32a8:	6d cf       	rjmp	.-294    	; 0x3184 <main+0xe62>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:251
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    32aa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
    32ae:	82 30       	cpi	r24, 0x02	; 2
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <main+0xf92>
    32b2:	9e cf       	rjmp	.-196    	; 0x31f0 <main+0xece>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:253
        {
            blinkMode = setDate;
    32b4:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <blinkMode>
    32b8:	9b cf       	rjmp	.-202    	; 0x31f0 <main+0xece>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:856
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    32ba:	dd 24       	eor	r13, r13
    32bc:	d3 94       	inc	r13
    32be:	c4 cf       	rjmp	.-120    	; 0x3248 <main+0xf26>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:858
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    32c0:	52 e0       	ldi	r21, 0x02	; 2
    32c2:	d5 2e       	mov	r13, r21
    32c4:	c1 cf       	rjmp	.-126    	; 0x3248 <main+0xf26>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:860
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    32c6:	43 e0       	ldi	r20, 0x03	; 3
    32c8:	d4 2e       	mov	r13, r20
    32ca:	be cf       	rjmp	.-132    	; 0x3248 <main+0xf26>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:862
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    32cc:	34 e0       	ldi	r19, 0x04	; 4
    32ce:	d3 2e       	mov	r13, r19
    32d0:	bb cf       	rjmp	.-138    	; 0x3248 <main+0xf26>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    32d2:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    32d6:	81 11       	cpse	r24, r1
    32d8:	13 c0       	rjmp	.+38     	; 0x3300 <main+0xfde>
reset():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    32da:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <Menu1>
    32de:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <Menu1+0x1>
    32e2:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <Menu1+0x4>
    32e6:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    32ea:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1+0x2>
    32ee:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    32f2:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:266
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            lcd.clear();
    32f6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:267
            appMode = APP_NORMAL_MODE;
    32fa:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <appMode>
    32fe:	42 cc       	rjmp	.-1916   	; 0x2b84 <main+0x862>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    3300:	81 50       	subi	r24, 0x01	; 1
    3302:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    3306:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    3308:	dc 01       	movw	r26, r24
    330a:	aa 0f       	add	r26, r26
    330c:	bb 1f       	adc	r27, r27
    330e:	aa 0f       	add	r26, r26
    3310:	bb 1f       	adc	r27, r27
    3312:	a7 50       	subi	r26, 0x07	; 7
    3314:	bc 4f       	sbci	r27, 0xFC	; 252
    3316:	19 96       	adiw	r26, 0x09	; 9
    3318:	2d 91       	ld	r18, X+
    331a:	3c 91       	ld	r19, X
    331c:	1a 97       	sbiw	r26, 0x0a	; 10
    331e:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <Menu1+0x4>
    3322:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    3326:	88 0f       	add	r24, r24
    3328:	99 1f       	adc	r25, r25
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	fc 01       	movw	r30, r24
    3330:	ef 5f       	subi	r30, 0xFF	; 255
    3332:	fb 4f       	sbci	r31, 0xFB	; 251
    3334:	80 81       	ld	r24, Z
    3336:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    333a:	17 96       	adiw	r26, 0x07	; 7
    333c:	8c 91       	ld	r24, X
    333e:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    3342:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    3344:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <refreshMenuDisplay(unsigned char)>
    3348:	1d cc       	rjmp	.-1990   	; 0x2b84 <main+0x862>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    334a:	0e 94 c6 01 	call	0x38c	; 0x38c <MenuManager::currentItemHasChildren() [clone .constprop.86]>
    334e:	88 23       	and	r24, r24
    3350:	09 f4       	brne	.+2      	; 0x3354 <main+0x1032>
    3352:	3c c0       	rjmp	.+120    	; 0x33cc <main+0x10aa>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3354:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <Menu1+0x6>
    3358:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <Menu1+0x3>
    335c:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    3360:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <Menu1+0x1b>
    3364:	25 30       	cpi	r18, 0x05	; 5
    3366:	e8 f4       	brcc	.+58     	; 0x33a2 <main+0x1080>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3368:	40 91 fe 03 	lds	r20, 0x03FE	; 0x8003fe <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    336c:	82 2f       	mov	r24, r18
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	dc 01       	movw	r26, r24
    3372:	aa 0f       	add	r26, r26
    3374:	bb 1f       	adc	r27, r27
    3376:	aa 0f       	add	r26, r26
    3378:	bb 1f       	adc	r27, r27
    337a:	a7 50       	subi	r26, 0x07	; 7
    337c:	bc 4f       	sbci	r27, 0xFC	; 252
    337e:	17 96       	adiw	r26, 0x07	; 7
    3380:	3c 93       	st	X, r19
    3382:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	8f 5f       	subi	r24, 0xFF	; 255
    338e:	9b 4f       	sbci	r25, 0xFB	; 251
    3390:	fc 01       	movw	r30, r24
    3392:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    3394:	1a 96       	adiw	r26, 0x0a	; 10
    3396:	7c 93       	st	X, r23
    3398:	6e 93       	st	-X, r22
    339a:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:215
    menuStackCount++;
    339c:	2f 5f       	subi	r18, 0xFF	; 255
    339e:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    33a2:	cb 01       	movw	r24, r22
    33a4:	f6 e0       	ldi	r31, 0x06	; 6
    33a6:	3f 9f       	mul	r19, r31
    33a8:	80 0d       	add	r24, r0
    33aa:	91 1d       	adc	r25, r1
    33ac:	11 24       	eor	r1, r1
    33ae:	fc 01       	movw	r30, r24
    33b0:	35 96       	adiw	r30, 0x05	; 5
    33b2:	e4 91       	lpm	r30, Z
    33b4:	e0 93 fe 03 	sts	0x03FE, r30	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    33b8:	fc 01       	movw	r30, r24
    33ba:	33 96       	adiw	r30, 0x03	; 3
    33bc:	85 91       	lpm	r24, Z+
    33be:	94 91       	lpm	r25, Z
    33c0:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <Menu1+0x4>
    33c4:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    33c8:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    33cc:	83 e0       	ldi	r24, 0x03	; 3
    33ce:	ba cf       	rjmp	.-140    	; 0x3344 <main+0x1022>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    33d0:	21 e0       	ldi	r18, 0x01	; 1
    33d2:	d2 12       	cpse	r13, r18
    33d4:	0a c0       	rjmp	.+20     	; 0x33ea <main+0x10c8>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    33d6:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x6>
    33da:	88 23       	and	r24, r24
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <main+0x10be>
    33de:	d2 cb       	rjmp	.-2140   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    33e0:	81 50       	subi	r24, 0x01	; 1
    33e2:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	ad cf       	rjmp	.-166    	; 0x3344 <main+0x1022>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    33ea:	32 e0       	ldi	r19, 0x02	; 2
    33ec:	d3 12       	cpse	r13, r19
    33ee:	ca cb       	rjmp	.-2156   	; 0x2b84 <main+0x862>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    33f0:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <Menu1+0x6>
    33f4:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <Menu1+0x5>
    33f8:	21 50       	subi	r18, 0x01	; 1
    33fa:	33 0b       	sbc	r19, r19
    33fc:	82 17       	cp	r24, r18
    33fe:	13 06       	cpc	r1, r19
    3400:	0c f0       	brlt	.+2      	; 0x3404 <main+0x10e2>
    3402:	c0 cb       	rjmp	.-2176   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	9b cf       	rjmp	.-202    	; 0x3344 <main+0x1022>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:284
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    340e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuManager::getCurrentItemCmdId() [clone .constprop.83]>
    3412:	b8 2e       	mov	r11, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:356

    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }
    switch (cmdId)
    3414:	ee ef       	ldi	r30, 0xFE	; 254
    3416:	e8 0f       	add	r30, r24
    3418:	e8 31       	cpi	r30, 0x18	; 24
    341a:	08 f0       	brcs	.+2      	; 0x341e <main+0x10fc>
    341c:	32 c0       	rjmp	.+100    	; 0x3482 <main+0x1160>
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	ec 5e       	subi	r30, 0xEC	; 236
    3422:	f5 4e       	sbci	r31, 0xE5	; 229
    3424:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__tablejump2__>
    3428:	2c 1a       	sub	r2, r28
    342a:	c2 1a       	sub	r12, r18
    342c:	41 1a       	sub	r4, r17
    342e:	17 1b       	sub	r17, r23
    3430:	88 1b       	sub	r24, r24
    3432:	a8 1b       	sub	r26, r24
    3434:	c3 1b       	sub	r28, r19
    3436:	e3 1b       	sub	r30, r19
    3438:	41 1a       	sub	r4, r17
    343a:	13 1c       	adc	r1, r3
    343c:	37 1c       	adc	r3, r7
    343e:	41 1a       	sub	r4, r17
    3440:	4d 1c       	adc	r4, r13
    3442:	92 1c       	adc	r9, r2
    3444:	71 1c       	adc	r7, r1
    3446:	b6 1c       	adc	r11, r6
    3448:	d7 1c       	adc	r13, r7
    344a:	f5 1c       	adc	r15, r5
    344c:	19 1d       	adc	r17, r9
    344e:	3d 1d       	adc	r19, r13
    3450:	41 1a       	sub	r4, r17
    3452:	87 1d       	adc	r24, r7
    3454:	67 1d       	adc	r22, r7
    3456:	4d 1d       	adc	r20, r13
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:360
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    3458:	42 e0       	ldi	r20, 0x02	; 2
    345a:	d4 12       	cpse	r13, r20
    345c:	33 c0       	rjmp	.+102    	; 0x34c4 <main+0x11a2>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:362
        {
            if (blinkMode == setDate)
    345e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <blinkMode>
    3462:	82 30       	cpi	r24, 0x02	; 2
    3464:	81 f4       	brne	.+32     	; 0x3486 <main+0x1164>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:363
                StDate = ++StDate > 31 ? 1 : StDate;
    3466:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <StDate>
    346a:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <StDate+0x1>
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	80 32       	cpi	r24, 0x20	; 32
    3472:	91 05       	cpc	r25, r1
    3474:	14 f0       	brlt	.+4      	; 0x347a <main+0x1158>
main():
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:372
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
    347a:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <StDate+0x1>
    347e:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:556
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3482:	c1 2c       	mov	r12, r1
    3484:	e8 c0       	rjmp	.+464    	; 0x3656 <main+0x1334>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:364
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    3486:	83 30       	cpi	r24, 0x03	; 3
    3488:	79 f4       	brne	.+30     	; 0x34a8 <main+0x1186>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:365
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    348a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <StMonth>
    348e:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <StMonth+0x1>
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	8d 30       	cpi	r24, 0x0D	; 13
    3496:	91 05       	cpc	r25, r1
    3498:	14 f0       	brlt	.+4      	; 0x349e <main+0x117c>
main():
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:374
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
    349e:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <StMonth+0x1>
    34a2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <StMonth>
    34a6:	ed cf       	rjmp	.-38     	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:366
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    34a8:	84 30       	cpi	r24, 0x04	; 4
    34aa:	59 f7       	brne	.-42     	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:367
                StYear = ++StYear > 2050 ? 2020 : StYear;
    34ac:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <StYear>
    34b0:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <StYear+0x1>
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	83 30       	cpi	r24, 0x03	; 3
    34b8:	58 e0       	ldi	r21, 0x08	; 8
    34ba:	95 07       	cpc	r25, r21
    34bc:	74 f1       	brlt	.+92     	; 0x351a <main+0x11f8>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:376
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2050 ? 2020 : StYear;
    34be:	84 ee       	ldi	r24, 0xE4	; 228
    34c0:	97 e0       	ldi	r25, 0x07	; 7
    34c2:	2b c0       	rjmp	.+86     	; 0x351a <main+0x11f8>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:369
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    34c4:	63 e0       	ldi	r22, 0x03	; 3
    34c6:	d6 12       	cpse	r13, r22
    34c8:	2d c0       	rjmp	.+90     	; 0x3524 <main+0x1202>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:371
        {
            if (blinkMode == setDate)
    34ca:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <blinkMode>
    34ce:	82 30       	cpi	r24, 0x02	; 2
    34d0:	59 f4       	brne	.+22     	; 0x34e8 <main+0x11c6>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:372
                StDate = --StDate < 1 ? 31 : StDate;
    34d2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <StDate>
    34d6:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <StDate+0x1>
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	18 16       	cp	r1, r24
    34de:	19 06       	cpc	r1, r25
    34e0:	64 f2       	brlt	.-104    	; 0x347a <main+0x1158>
main():
    34e2:	8f e1       	ldi	r24, 0x1F	; 31
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	c9 cf       	rjmp	.-110    	; 0x347a <main+0x1158>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:373
            else if (blinkMode == setMonth)
    34e8:	83 30       	cpi	r24, 0x03	; 3
    34ea:	59 f4       	brne	.+22     	; 0x3502 <main+0x11e0>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:374
                StMonth = --StMonth < 1 ? 12 : StMonth;
    34ec:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <StMonth>
    34f0:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <StMonth+0x1>
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	18 16       	cp	r1, r24
    34f8:	19 06       	cpc	r1, r25
    34fa:	8c f2       	brlt	.-94     	; 0x349e <main+0x117c>
main():
    34fc:	8c e0       	ldi	r24, 0x0C	; 12
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	ce cf       	rjmp	.-100    	; 0x349e <main+0x117c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:375
            else if (blinkMode == setYear)
    3502:	84 30       	cpi	r24, 0x04	; 4
    3504:	09 f0       	breq	.+2      	; 0x3508 <main+0x11e6>
    3506:	bd cf       	rjmp	.-134    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:376
                StYear = --StYear < 2050 ? 2020 : StYear;
    3508:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <StYear>
    350c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <StYear+0x1>
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	82 30       	cpi	r24, 0x02	; 2
    3514:	e8 e0       	ldi	r30, 0x08	; 8
    3516:	9e 07       	cpc	r25, r30
    3518:	94 f2       	brlt	.-92     	; 0x34be <main+0x119c>
    351a:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <StYear+0x1>
    351e:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <StYear>
    3522:	af cf       	rjmp	.-162    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:378
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3524:	f1 e0       	ldi	r31, 0x01	; 1
    3526:	df 12       	cpse	r13, r31
    3528:	ac cf       	rjmp	.-168    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:380
        {
            if (blinkMode == setDate)
    352a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <blinkMode>
    352e:	82 30       	cpi	r24, 0x02	; 2
    3530:	21 f4       	brne	.+8      	; 0x353a <main+0x1218>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:382
            {
                blinkMode = setMonth;
    3532:	83 e0       	ldi	r24, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:386
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
    3534:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <blinkMode>
    3538:	a4 cf       	rjmp	.-184    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:384
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    353a:	83 30       	cpi	r24, 0x03	; 3
    353c:	11 f4       	brne	.+4      	; 0x3542 <main+0x1220>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:386
            {
                blinkMode = setYear;
    353e:	84 e0       	ldi	r24, 0x04	; 4
    3540:	f9 cf       	rjmp	.-14     	; 0x3534 <main+0x1212>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:388
            }
            else if (blinkMode == setYear)
    3542:	84 30       	cpi	r24, 0x04	; 4
    3544:	09 f0       	breq	.+2      	; 0x3548 <main+0x1226>
    3546:	9d cf       	rjmp	.-198    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:421
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    3548:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <StMin>
    354c:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <StHr>
    3550:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <StDate>
    3554:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <StMonth>
    3558:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <StYear>
    355c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:228
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3560:	80 3d       	cpi	r24, 0xD0	; 208
    3562:	67 e0       	ldi	r22, 0x07	; 7
    3564:	96 07       	cpc	r25, r22
    3566:	10 f0       	brcs	.+4      	; 0x356c <main+0x124a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:229
    year -= 2000U;
    3568:	80 5d       	subi	r24, 0xD0	; 208
    356a:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
  yOff = year;
    356c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    356e:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    3570:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    3572:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    3574:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    3576:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:421
    3578:	c8 01       	movw	r24, r16
    357a:	0e 94 0a 10 	call	0x2014	; 0x2014 <RTC_DS1307::adjust(DateTime const&)>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:423
                complete = true;
                blink = true;
    357e:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    3582:	15 c0       	rjmp	.+42     	; 0x35ae <main+0x128c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:399
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	d8 12       	cpse	r13, r24
    3588:	26 c0       	rjmp	.+76     	; 0x35d6 <main+0x12b4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:401
        {
            if (blinkMode == setHr)
    358a:	d0 90 06 03 	lds	r13, 0x0306	; 0x800306 <blinkMode>
    358e:	d1 10       	cpse	r13, r1
    3590:	10 c0       	rjmp	.+32     	; 0x35b2 <main+0x1290>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:402
                StHr = ++StHr > 23 ? 0 : StHr;
    3592:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <StHr>
    3596:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <StHr+0x1>
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	88 31       	cpi	r24, 0x18	; 24
    359e:	91 05       	cpc	r25, r1
    35a0:	14 f0       	brlt	.+4      	; 0x35a6 <main+0x1284>
main():
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:409
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
    35a6:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <StHr+0x1>
    35aa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:350
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    35ae:	c1 2c       	mov	r12, r1
    35b0:	69 c0       	rjmp	.+210    	; 0x3684 <main+0x1362>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:403
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	d9 12       	cpse	r13, r25
    35b6:	65 cf       	rjmp	.-310    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:404
                StMin = ++StMin > 59 ? 0 : StMin;
    35b8:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <StMin>
    35bc:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <StMin+0x1>
    35c0:	01 96       	adiw	r24, 0x01	; 1
    35c2:	8c 33       	cpi	r24, 0x3C	; 60
    35c4:	91 05       	cpc	r25, r1
    35c6:	14 f0       	brlt	.+4      	; 0x35cc <main+0x12aa>
main():
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:411
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
    35cc:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <StMin+0x1>
    35d0:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <StMin>
    35d4:	56 cf       	rjmp	.-340    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:406
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    35d6:	e3 e0       	ldi	r30, 0x03	; 3
    35d8:	de 12       	cpse	r13, r30
    35da:	1b c0       	rjmp	.+54     	; 0x3612 <main+0x12f0>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:408
        {
            if (blinkMode == setHr)
    35dc:	d0 90 06 03 	lds	r13, 0x0306	; 0x800306 <blinkMode>
    35e0:	d1 10       	cpse	r13, r1
    35e2:	0a c0       	rjmp	.+20     	; 0x35f8 <main+0x12d6>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:409
                StHr = --StHr < 0 ? 23 : StHr;
    35e4:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <StHr>
    35e8:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <StHr+0x1>
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	97 ff       	sbrs	r25, 7
    35f0:	da cf       	rjmp	.-76     	; 0x35a6 <main+0x1284>
main():
    35f2:	87 e1       	ldi	r24, 0x17	; 23
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	d7 cf       	rjmp	.-82     	; 0x35a6 <main+0x1284>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:410
            else if (blinkMode == setMin)
    35f8:	f1 e0       	ldi	r31, 0x01	; 1
    35fa:	df 12       	cpse	r13, r31
    35fc:	42 cf       	rjmp	.-380    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:411
                StMin = --StMin < 0 ? 59 : StMin;
    35fe:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <StMin>
    3602:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <StMin+0x1>
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	97 ff       	sbrs	r25, 7
    360a:	e0 cf       	rjmp	.-64     	; 0x35cc <main+0x12aa>
main():
    360c:	8b e3       	ldi	r24, 0x3B	; 59
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	dd cf       	rjmp	.-70     	; 0x35cc <main+0x12aa>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:413
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3612:	21 e0       	ldi	r18, 0x01	; 1
    3614:	d2 12       	cpse	r13, r18
    3616:	35 cf       	rjmp	.-406    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:415
        {
            if (blinkMode == setHr)
    3618:	d0 90 06 03 	lds	r13, 0x0306	; 0x800306 <blinkMode>
    361c:	d1 10       	cpse	r13, r1
    361e:	03 c0       	rjmp	.+6      	; 0x3626 <main+0x1304>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:417
            {
                blinkMode = setMin;
    3620:	70 92 06 03 	sts	0x0306, r7	; 0x800306 <blinkMode>
    3624:	c4 cf       	rjmp	.-120    	; 0x35ae <main+0x128c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:419
            }
            else if (blinkMode == setMin)
    3626:	31 e0       	ldi	r19, 0x01	; 1
    3628:	d3 12       	cpse	r13, r19
    362a:	2b cf       	rjmp	.-426    	; 0x3482 <main+0x1160>
    362c:	8d cf       	rjmp	.-230    	; 0x3548 <main+0x1226>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:431
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    362e:	8d 2d       	mov	r24, r13
    3630:	8f 77       	andi	r24, 0x7F	; 127
    3632:	82 30       	cpi	r24, 0x02	; 2
    3634:	91 f4       	brne	.+36     	; 0x365a <main+0x1338>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:433
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    3636:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <config+0xf>
    363a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <config+0x10>
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	88 31       	cpi	r24, 0x18	; 24
    3642:	91 05       	cpc	r25, r1
    3644:	14 f0       	brlt	.+4      	; 0x364a <main+0x1328>
main():
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:437
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    364a:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <config+0x10>
    364e:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:474
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    3652:	cc 24       	eor	r12, r12
    3654:	c3 94       	inc	r12
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:349
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3656:	d1 2c       	mov	r13, r1
    3658:	15 c0       	rjmp	.+42     	; 0x3684 <main+0x1362>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:435
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    365a:	83 30       	cpi	r24, 0x03	; 3
    365c:	51 f4       	brne	.+20     	; 0x3672 <main+0x1350>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:437
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    365e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <config+0xf>
    3662:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <config+0x10>
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	97 ff       	sbrs	r25, 7
    366a:	ef cf       	rjmp	.-34     	; 0x364a <main+0x1328>
main():
    366c:	87 e1       	ldi	r24, 0x17	; 23
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	ec cf       	rjmp	.-40     	; 0x364a <main+0x1328>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:439
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	d8 12       	cpse	r13, r24
    3676:	05 cf       	rjmp	.-502    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:441
        {
            config.save();
    3678:	0e 94 55 09 	call	0x12aa	; 0x12aa <Config::save() [clone .constprop.21]>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:430
        }
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
    367c:	cc 24       	eor	r12, r12
    367e:	c3 94       	inc	r12
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:442
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    3680:	dd 24       	eor	r13, r13
    3682:	d3 94       	inc	r13
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:799
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    3684:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <btn>
    3688:	84 34       	cpi	r24, 0x44	; 68
    368a:	19 f0       	breq	.+6      	; 0x3692 <main+0x1370>
    368c:	dd 20       	and	r13, r13
    368e:	09 f4       	brne	.+2      	; 0x3692 <main+0x1370>
    3690:	ac c2       	rjmp	.+1368   	; 0x3bea <main+0x18c8>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:802
    {
        complete = true;
        lcd.setCursor(1, 1);
    3692:	61 e0       	ldi	r22, 0x01	; 1
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:803
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    369a:	8b 2d       	mov	r24, r11
    369c:	0e 94 8e 0b 	call	0x171c	; 0x171c <Config::getFormattedStr(unsigned char) [clone .constprop.62]>
    36a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>
    36a4:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:801
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    36a8:	cc 24       	eor	r12, r12
    36aa:	c3 94       	inc	r12
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:285
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > 30000)
    36ac:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    36b0:	80 90 12 03 	lds	r8, 0x0312	; 0x800312 <timrMNU>
    36b4:	90 90 13 03 	lds	r9, 0x0313	; 0x800313 <timrMNU+0x1>
    36b8:	a0 90 14 03 	lds	r10, 0x0314	; 0x800314 <timrMNU+0x2>
    36bc:	b0 90 15 03 	lds	r11, 0x0315	; 0x800315 <timrMNU+0x3>
    36c0:	68 19       	sub	r22, r8
    36c2:	79 09       	sbc	r23, r9
    36c4:	8a 09       	sbc	r24, r10
    36c6:	9b 09       	sbc	r25, r11
    36c8:	61 33       	cpi	r22, 0x31	; 49
    36ca:	75 47       	sbci	r23, 0x75	; 117
    36cc:	81 05       	cpc	r24, r1
    36ce:	91 05       	cpc	r25, r1
    36d0:	a0 f0       	brcs	.+40     	; 0x36fa <main+0x13d8>
reset():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    36d2:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <Menu1>
    36d6:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <Menu1+0x1>
    36da:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <Menu1+0x4>
    36de:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    36e2:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1+0x2>
    36e6:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    36ea:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:21
  menuStackCount = 0;
    36ee:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:288
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    36f2:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:289
            lcd.clear();
    36f6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:291
        }
        if (processingComplete)
    36fa:	cc 20       	and	r12, r12
    36fc:	09 f4       	brne	.+2      	; 0x3700 <main+0x13de>
    36fe:	42 ca       	rjmp	.-2940   	; 0x2b84 <main+0x862>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:293
        {
            appMode = APP_MENU_MODE;
    3700:	70 92 0f 03 	sts	0x030F, r7	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:295
            // clear forward arrow
            lcd.setCursor(0, 1);
    3704:	61 e0       	ldi	r22, 0x01	; 1
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:296
            strbuf[0] = ' '; // clear forward arrow
    370c:	80 e2       	ldi	r24, 0x20	; 32
    370e:	b9 cd       	rjmp	.-1166   	; 0x3282 <main+0xf60>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:453
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3710:	8d 2d       	mov	r24, r13
    3712:	8f 77       	andi	r24, 0x7F	; 127
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	79 f4       	brne	.+30     	; 0x3736 <main+0x1414>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:455
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    3718:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <config+0x11>
    371c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <config+0x12>
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	88 31       	cpi	r24, 0x18	; 24
    3724:	91 05       	cpc	r25, r1
    3726:	14 f0       	brlt	.+4      	; 0x372c <main+0x140a>
main():
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:459
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    372c:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <config+0x12>
    3730:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <config+0x11>
    3734:	8e cf       	rjmp	.-228    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:457
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3736:	83 30       	cpi	r24, 0x03	; 3
    3738:	09 f0       	breq	.+2      	; 0x373c <main+0x141a>
    373a:	53 c1       	rjmp	.+678    	; 0x39e2 <main+0x16c0>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:459
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    373c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <config+0x11>
    3740:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <config+0x12>
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	97 ff       	sbrs	r25, 7
    3748:	f1 cf       	rjmp	.-30     	; 0x372c <main+0x140a>
main():
    374a:	87 e1       	ldi	r24, 0x17	; 23
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	ee cf       	rjmp	.-36     	; 0x372c <main+0x140a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:475
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3750:	8d 2d       	mov	r24, r13
    3752:	8f 77       	andi	r24, 0x7F	; 127
    3754:	82 30       	cpi	r24, 0x02	; 2
    3756:	51 f4       	brne	.+20     	; 0x376c <main+0x144a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:477
        {
            config.SlogamCount = ++config.SlogamCount;
    3758:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <config+0x1a>
    375c:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <config+0x1b>
    3760:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:481
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SlogamCount = --config.SlogamCount < 0 ? 100 : config.SlogamCount;
    3762:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <config+0x1b>
    3766:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <config+0x1a>
    376a:	73 cf       	rjmp	.-282    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:479
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SlogamCount = ++config.SlogamCount;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    376c:	83 30       	cpi	r24, 0x03	; 3
    376e:	09 f0       	breq	.+2      	; 0x3772 <main+0x1450>
    3770:	5c c1       	rjmp	.+696    	; 0x3a2a <main+0x1708>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:481
        {
            config.SlogamCount = --config.SlogamCount < 0 ? 100 : config.SlogamCount;
    3772:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <config+0x1a>
    3776:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <config+0x1b>
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	97 ff       	sbrs	r25, 7
    377e:	f1 cf       	rjmp	.-30     	; 0x3762 <main+0x1440>
main():
    3780:	84 e6       	ldi	r24, 0x64	; 100
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	ee cf       	rjmp	.-36     	; 0x3762 <main+0x1440>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:497
        break;
    }
    case mnuCmdBakLitDur:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3786:	8d 2d       	mov	r24, r13
    3788:	8f 77       	andi	r24, 0x7F	; 127
    378a:	82 30       	cpi	r24, 0x02	; 2
    378c:	79 f4       	brne	.+30     	; 0x37ac <main+0x148a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:499
        {
            config.backLightDur = ++config.backLightDur > 60 ? 0 : config.backLightDur;
    378e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <config+0x13>
    3792:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <config+0x14>
    3796:	01 96       	adiw	r24, 0x01	; 1
    3798:	8d 33       	cpi	r24, 0x3D	; 61
    379a:	91 05       	cpc	r25, r1
    379c:	14 f0       	brlt	.+4      	; 0x37a2 <main+0x1480>
main():
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:503
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.backLightDur = --config.backLightDur < 0 ? 60 : config.backLightDur;
    37a2:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <config+0x14>
    37a6:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <config+0x13>
    37aa:	53 cf       	rjmp	.-346    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:501
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.backLightDur = ++config.backLightDur > 60 ? 0 : config.backLightDur;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    37ac:	83 30       	cpi	r24, 0x03	; 3
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <main+0x1490>
    37b0:	60 c1       	rjmp	.+704    	; 0x3a72 <main+0x1750>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:503
        {
            config.backLightDur = --config.backLightDur < 0 ? 60 : config.backLightDur;
    37b2:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <config+0x13>
    37b6:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <config+0x14>
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	97 ff       	sbrs	r25, 7
    37be:	f1 cf       	rjmp	.-30     	; 0x37a2 <main+0x1480>
main():
    37c0:	8c e3       	ldi	r24, 0x3C	; 60
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	ee cf       	rjmp	.-36     	; 0x37a2 <main+0x1480>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:519
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    37c6:	8d 2d       	mov	r24, r13
    37c8:	8f 77       	andi	r24, 0x7F	; 127
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	79 f4       	brne	.+30     	; 0x37ec <main+0x14ca>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:521
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    37ce:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0x15>
    37d2:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x16>
    37d6:	01 96       	adiw	r24, 0x01	; 1
    37d8:	8f 31       	cpi	r24, 0x1F	; 31
    37da:	91 05       	cpc	r25, r1
    37dc:	14 f0       	brlt	.+4      	; 0x37e2 <main+0x14c0>
main():
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:525
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    37e2:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x16>
    37e6:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0x15>
    37ea:	33 cf       	rjmp	.-410    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:523
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    37ec:	83 30       	cpi	r24, 0x03	; 3
    37ee:	59 f4       	brne	.+22     	; 0x3806 <main+0x14e4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:525
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    37f0:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <config+0x15>
    37f4:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <config+0x16>
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	18 16       	cp	r1, r24
    37fc:	19 06       	cpc	r1, r25
    37fe:	8c f3       	brlt	.-30     	; 0x37e2 <main+0x14c0>
main():
    3800:	8e e1       	ldi	r24, 0x1E	; 30
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	ee cf       	rjmp	.-36     	; 0x37e2 <main+0x14c0>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:527
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3806:	21 e0       	ldi	r18, 0x01	; 1
    3808:	d2 12       	cpse	r13, r18
    380a:	3b ce       	rjmp	.-906    	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:529
        {
            config.save();
    380c:	0e 94 55 09 	call	0x12aa	; 0x12aa <Config::save() [clone .constprop.21]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3810:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <config+0x15>
    3814:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <config+0x16>
    3818:	77 27       	eor	r23, r23
    381a:	86 e0       	ldi	r24, 0x06	; 6
    381c:	0e 94 13 05 	call	0xa26	; 0xa26 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.46]>
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:541
        }
        break;
    }
    case mnuCmdselectTime:
    {
        configChanged = true;
    3820:	cc 24       	eor	r12, r12
    3822:	c3 94       	inc	r12
    3824:	2f cf       	rjmp	.-418    	; 0x3684 <main+0x1362>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:542
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3826:	8d 2d       	mov	r24, r13
    3828:	8f 77       	andi	r24, 0x7F	; 127
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	79 f4       	brne	.+30     	; 0x384c <main+0x152a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:544
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    382e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <demoTime>
    3832:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <demoTime+0x1>
    3836:	01 96       	adiw	r24, 0x01	; 1
    3838:	88 31       	cpi	r24, 0x18	; 24
    383a:	91 05       	cpc	r25, r1
    383c:	14 f0       	brlt	.+4      	; 0x3842 <main+0x1520>
main():
    383e:	84 e0       	ldi	r24, 0x04	; 4
    3840:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:548
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3842:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <demoTime+0x1>
    3846:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <demoTime>
    384a:	03 cf       	rjmp	.-506    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:546
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    384c:	83 30       	cpi	r24, 0x03	; 3
    384e:	59 f4       	brne	.+22     	; 0x3866 <main+0x1544>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:548
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3850:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <demoTime>
    3854:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <demoTime+0x1>
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	84 30       	cpi	r24, 0x04	; 4
    385c:	91 05       	cpc	r25, r1
    385e:	8c f7       	brge	.-30     	; 0x3842 <main+0x1520>
main():
    3860:	87 e1       	ldi	r24, 0x17	; 23
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	ee cf       	rjmp	.-36     	; 0x3842 <main+0x1520>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:550
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3866:	31 e0       	ldi	r19, 0x01	; 1
    3868:	d3 12       	cpse	r13, r19
    386a:	0b ce       	rjmp	.-1002   	; 0x3482 <main+0x1160>
    386c:	d9 cf       	rjmp	.-78     	; 0x3820 <main+0x14fe>
reset():
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    386e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <Menu1>
    3872:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <Menu1+0x1>
    3876:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <Menu1+0x4>
    387a:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    387e:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Menu1+0x2>
    3882:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3886:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.1/MenuManager.cpp:21
  menuStackCount = 0;
    388a:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:563
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    388e:	84 e0       	ldi	r24, 0x04	; 4
    3890:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <appMode>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:564
        lcd.clear();
    3894:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::clear() [clone .constprop.52]>
    3898:	f4 cd       	rjmp	.-1048   	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:570
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    389a:	8d 2d       	mov	r24, r13
    389c:	8f 77       	andi	r24, 0x7F	; 127
    389e:	82 30       	cpi	r24, 0x02	; 2
    38a0:	79 f4       	brne	.+30     	; 0x38c0 <main+0x159e>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:572
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    38a2:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <config+0x24>
    38a6:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <config+0x25>
    38aa:	01 96       	adiw	r24, 0x01	; 1
    38ac:	89 30       	cpi	r24, 0x09	; 9
    38ae:	91 05       	cpc	r25, r1
    38b0:	14 f0       	brlt	.+4      	; 0x38b6 <main+0x1594>
main():
    38b2:	83 e0       	ldi	r24, 0x03	; 3
    38b4:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:576
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    38b6:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x25>
    38ba:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x24>
    38be:	c9 ce       	rjmp	.-622    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:574
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    38c0:	83 30       	cpi	r24, 0x03	; 3
    38c2:	59 f4       	brne	.+22     	; 0x38da <main+0x15b8>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:576
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    38c4:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <config+0x24>
    38c8:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <config+0x25>
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	83 30       	cpi	r24, 0x03	; 3
    38d0:	91 05       	cpc	r25, r1
    38d2:	8c f7       	brge	.-30     	; 0x38b6 <main+0x1594>
main():
    38d4:	88 e0       	ldi	r24, 0x08	; 8
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	ee cf       	rjmp	.-36     	; 0x38b6 <main+0x1594>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:578
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    38da:	41 e0       	ldi	r20, 0x01	; 1
    38dc:	d4 12       	cpse	r13, r20
    38de:	d1 cd       	rjmp	.-1118   	; 0x3482 <main+0x1160>
    38e0:	cb ce       	rjmp	.-618    	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:592
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    38e2:	8d 2d       	mov	r24, r13
    38e4:	8f 77       	andi	r24, 0x7F	; 127
    38e6:	82 30       	cpi	r24, 0x02	; 2
    38e8:	79 f4       	brne	.+30     	; 0x3908 <main+0x15e6>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:594
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    38ea:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <config+0x28>
    38ee:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <config+0x29>
    38f2:	01 96       	adiw	r24, 0x01	; 1
    38f4:	89 30       	cpi	r24, 0x09	; 9
    38f6:	91 05       	cpc	r25, r1
    38f8:	14 f0       	brlt	.+4      	; 0x38fe <main+0x15dc>
main():
    38fa:	83 e0       	ldi	r24, 0x03	; 3
    38fc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:598
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    38fe:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <config+0x29>
    3902:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <config+0x28>
    3906:	a5 ce       	rjmp	.-694    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:596
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3908:	83 30       	cpi	r24, 0x03	; 3
    390a:	09 f0       	breq	.+2      	; 0x390e <main+0x15ec>
    390c:	fc c0       	rjmp	.+504    	; 0x3b06 <main+0x17e4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:598
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    390e:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <config+0x28>
    3912:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <config+0x29>
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	83 30       	cpi	r24, 0x03	; 3
    391a:	91 05       	cpc	r25, r1
    391c:	84 f7       	brge	.-32     	; 0x38fe <main+0x15dc>
main():
    391e:	88 e0       	ldi	r24, 0x08	; 8
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	ed cf       	rjmp	.-38     	; 0x38fe <main+0x15dc>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:614
        break;
    }
    case mnuCmdMorSong2Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3924:	8d 2d       	mov	r24, r13
    3926:	8f 77       	andi	r24, 0x7F	; 127
    3928:	82 30       	cpi	r24, 0x02	; 2
    392a:	79 f4       	brne	.+30     	; 0x394a <main+0x1628>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:616
        {
            config.MorSong2Time = ++config.MorSong2Time > 8 ? 3 : config.MorSong2Time;
    392c:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <config+0x26>
    3930:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <config+0x27>
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	89 30       	cpi	r24, 0x09	; 9
    3938:	91 05       	cpc	r25, r1
    393a:	14 f0       	brlt	.+4      	; 0x3940 <main+0x161e>
main():
    393c:	83 e0       	ldi	r24, 0x03	; 3
    393e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:620
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong2Time = --config.MorSong2Time < 3 ? 8 : config.MorSong2Time;
    3940:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x27>
    3944:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x26>
    3948:	84 ce       	rjmp	.-760    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:618
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong2Time = ++config.MorSong2Time > 8 ? 3 : config.MorSong2Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    394a:	83 30       	cpi	r24, 0x03	; 3
    394c:	59 f4       	brne	.+22     	; 0x3964 <main+0x1642>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:620
        {
            config.MorSong2Time = --config.MorSong2Time < 3 ? 8 : config.MorSong2Time;
    394e:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <config+0x26>
    3952:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <config+0x27>
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	83 30       	cpi	r24, 0x03	; 3
    395a:	91 05       	cpc	r25, r1
    395c:	8c f7       	brge	.-30     	; 0x3940 <main+0x161e>
main():
    395e:	88 e0       	ldi	r24, 0x08	; 8
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	ee cf       	rjmp	.-36     	; 0x3940 <main+0x161e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:622
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3964:	61 e0       	ldi	r22, 0x01	; 1
    3966:	d6 12       	cpse	r13, r22
    3968:	8c cd       	rjmp	.-1256   	; 0x3482 <main+0x1160>
    396a:	86 ce       	rjmp	.-756    	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:636
        break;
    }
    case mnuCmdEveSong2Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    396c:	8d 2d       	mov	r24, r13
    396e:	8f 77       	andi	r24, 0x7F	; 127
    3970:	82 30       	cpi	r24, 0x02	; 2
    3972:	79 f4       	brne	.+30     	; 0x3992 <main+0x1670>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:638
        {
            config.EveSong2Time = ++config.EveSong2Time > 8 ? 3 : config.EveSong2Time;
    3974:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <config+0x2a>
    3978:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <config+0x2b>
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	89 30       	cpi	r24, 0x09	; 9
    3980:	91 05       	cpc	r25, r1
    3982:	14 f0       	brlt	.+4      	; 0x3988 <main+0x1666>
main():
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:642
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong2Time = --config.EveSong2Time < 3 ? 8 : config.EveSong2Time;
    3988:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x2b>
    398c:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x2a>
    3990:	60 ce       	rjmp	.-832    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:640
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong2Time = ++config.EveSong2Time > 8 ? 3 : config.EveSong2Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3992:	83 30       	cpi	r24, 0x03	; 3
    3994:	09 f0       	breq	.+2      	; 0x3998 <main+0x1676>
    3996:	6d ce       	rjmp	.-806    	; 0x3672 <main+0x1350>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:642
        {
            config.EveSong2Time = --config.EveSong2Time < 3 ? 8 : config.EveSong2Time;
    3998:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <config+0x2a>
    399c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <config+0x2b>
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	83 30       	cpi	r24, 0x03	; 3
    39a4:	91 05       	cpc	r25, r1
    39a6:	84 f7       	brge	.-32     	; 0x3988 <main+0x1666>
main():
    39a8:	88 e0       	ldi	r24, 0x08	; 8
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	ed cf       	rjmp	.-38     	; 0x3988 <main+0x1666>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:658
        break;
    }
    case mnuCmdSongCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    39ae:	8d 2d       	mov	r24, r13
    39b0:	8f 77       	andi	r24, 0x7F	; 127
    39b2:	82 30       	cpi	r24, 0x02	; 2
    39b4:	51 f4       	brne	.+20     	; 0x39ca <main+0x16a8>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:660
        {
            config.SongCount = ++config.SongCount;
    39b6:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <config+0x1c>
    39ba:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <config+0x1d>
    39be:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:664
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SongCount = --config.SongCount < 0 ? 100 : config.SongCount;
    39c0:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <config+0x1d>
    39c4:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <config+0x1c>
    39c8:	44 ce       	rjmp	.-888    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:662
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SongCount = ++config.SongCount;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    39ca:	83 30       	cpi	r24, 0x03	; 3
    39cc:	51 f4       	brne	.+20     	; 0x39e2 <main+0x16c0>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:664
        {
            config.SongCount = --config.SongCount < 0 ? 100 : config.SongCount;
    39ce:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <config+0x1c>
    39d2:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <config+0x1d>
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	97 ff       	sbrs	r25, 7
    39da:	f2 cf       	rjmp	.-28     	; 0x39c0 <main+0x169e>
main():
    39dc:	84 e6       	ldi	r24, 0x64	; 100
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	ef cf       	rjmp	.-34     	; 0x39c0 <main+0x169e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:666
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    39e2:	91 e0       	ldi	r25, 0x01	; 1
    39e4:	d9 12       	cpse	r13, r25
    39e6:	4d cd       	rjmp	.-1382   	; 0x3482 <main+0x1160>
    39e8:	47 ce       	rjmp	.-882    	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:680
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    39ea:	8d 2d       	mov	r24, r13
    39ec:	8f 77       	andi	r24, 0x7F	; 127
    39ee:	82 30       	cpi	r24, 0x02	; 2
    39f0:	79 f4       	brne	.+30     	; 0x3a10 <main+0x16ee>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:682
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    39f2:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <config+0x2c>
    39f6:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <config+0x2d>
    39fa:	01 96       	adiw	r24, 0x01	; 1
    39fc:	85 31       	cpi	r24, 0x15	; 21
    39fe:	91 05       	cpc	r25, r1
    3a00:	14 f0       	brlt	.+4      	; 0x3a06 <main+0x16e4>
main():
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:686
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    3a06:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <config+0x2d>
    3a0a:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <config+0x2c>
    3a0e:	21 ce       	rjmp	.-958    	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:684
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3a10:	83 30       	cpi	r24, 0x03	; 3
    3a12:	59 f4       	brne	.+22     	; 0x3a2a <main+0x1708>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:686
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    3a14:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <config+0x2c>
    3a18:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <config+0x2d>
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	18 16       	cp	r1, r24
    3a20:	19 06       	cpc	r1, r25
    3a22:	8c f3       	brlt	.-30     	; 0x3a06 <main+0x16e4>
main():
    3a24:	84 e1       	ldi	r24, 0x14	; 20
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	ee cf       	rjmp	.-36     	; 0x3a06 <main+0x16e4>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:688
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3a2a:	e1 e0       	ldi	r30, 0x01	; 1
    3a2c:	de 12       	cpse	r13, r30
    3a2e:	29 cd       	rjmp	.-1454   	; 0x3482 <main+0x1160>
    3a30:	23 ce       	rjmp	.-954    	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:702
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3a32:	8d 2d       	mov	r24, r13
    3a34:	8f 77       	andi	r24, 0x7F	; 127
    3a36:	82 30       	cpi	r24, 0x02	; 2
    3a38:	79 f4       	brne	.+30     	; 0x3a58 <main+0x1736>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:704
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    3a3a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <config+0x2e>
    3a3e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <config+0x2f>
    3a42:	01 96       	adiw	r24, 0x01	; 1
    3a44:	85 31       	cpi	r24, 0x15	; 21
    3a46:	91 05       	cpc	r25, r1
    3a48:	14 f0       	brlt	.+4      	; 0x3a4e <main+0x172c>
main():
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:708
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3a4e:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x2f>
    3a52:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x2e>
    3a56:	fd cd       	rjmp	.-1030   	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:706
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3a58:	83 30       	cpi	r24, 0x03	; 3
    3a5a:	59 f4       	brne	.+22     	; 0x3a72 <main+0x1750>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:708
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    3a5c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <config+0x2e>
    3a60:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <config+0x2f>
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	18 16       	cp	r1, r24
    3a68:	19 06       	cpc	r1, r25
    3a6a:	8c f3       	brlt	.-30     	; 0x3a4e <main+0x172c>
main():
    3a6c:	84 e1       	ldi	r24, 0x14	; 20
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	ee cf       	rjmp	.-36     	; 0x3a4e <main+0x172c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:710
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3a72:	f1 e0       	ldi	r31, 0x01	; 1
    3a74:	df 12       	cpse	r13, r31
    3a76:	05 cd       	rjmp	.-1526   	; 0x3482 <main+0x1160>
    3a78:	ff cd       	rjmp	.-1026   	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:724
        break;
    }
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    3a7a:	8e ef       	ldi	r24, 0xFE	; 254
    3a7c:	8d 0d       	add	r24, r13
    3a7e:	82 30       	cpi	r24, 0x02	; 2
    3a80:	40 f4       	brcc	.+16     	; 0x3a92 <main+0x1770>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:726
        {
            config.SchlZone = !config.SchlZone;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <config+0x17>
    3a88:	91 11       	cpse	r25, r1
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <config+0x17>
    3a90:	e0 cd       	rjmp	.-1088   	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:728
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3a92:	21 e0       	ldi	r18, 0x01	; 1
    3a94:	d2 12       	cpse	r13, r18
    3a96:	f5 cc       	rjmp	.-1558   	; 0x3482 <main+0x1160>
    3a98:	ef cd       	rjmp	.-1058   	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:742
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3a9a:	8d 2d       	mov	r24, r13
    3a9c:	8f 77       	andi	r24, 0x7F	; 127
    3a9e:	82 30       	cpi	r24, 0x02	; 2
    3aa0:	51 f4       	brne	.+20     	; 0x3ab6 <main+0x1794>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:744
        {
            config.SerialNo = ++config.SerialNo;
    3aa2:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <config+0x22>
    3aa6:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <config+0x23>
    3aaa:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:748
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
    3aac:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x23>
    3ab0:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x22>
    3ab4:	ce cd       	rjmp	.-1124   	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:746
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3ab6:	83 30       	cpi	r24, 0x03	; 3
    3ab8:	31 f4       	brne	.+12     	; 0x3ac6 <main+0x17a4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:748
        {
            config.SerialNo = --config.SerialNo;
    3aba:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <config+0x22>
    3abe:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <config+0x23>
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f3 cf       	rjmp	.-26     	; 0x3aac <main+0x178a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:750
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3ac6:	31 e0       	ldi	r19, 0x01	; 1
    3ac8:	d3 12       	cpse	r13, r19
    3aca:	db cc       	rjmp	.-1610   	; 0x3482 <main+0x1160>
    3acc:	d5 cd       	rjmp	.-1110   	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:764
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3ace:	8d 2d       	mov	r24, r13
    3ad0:	8f 77       	andi	r24, 0x7F	; 127
    3ad2:	82 30       	cpi	r24, 0x02	; 2
    3ad4:	51 f4       	brne	.+20     	; 0x3aea <main+0x17c8>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:766
        {
            config.DataYear = ++config.DataYear;
    3ad6:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <config+0x20>
    3ada:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <config+0x21>
    3ade:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:770
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    3ae0:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x21>
    3ae4:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x20>
    3ae8:	b4 cd       	rjmp	.-1176   	; 0x3652 <main+0x1330>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:768
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3aea:	83 30       	cpi	r24, 0x03	; 3
    3aec:	61 f4       	brne	.+24     	; 0x3b06 <main+0x17e4>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:770
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    3aee:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <config+0x20>
    3af2:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <config+0x21>
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	86 3e       	cpi	r24, 0xE6	; 230
    3afa:	47 e0       	ldi	r20, 0x07	; 7
    3afc:	94 07       	cpc	r25, r20
    3afe:	84 f7       	brge	.-32     	; 0x3ae0 <main+0x17be>
    3b00:	86 ee       	ldi	r24, 0xE6	; 230
    3b02:	97 e0       	ldi	r25, 0x07	; 7
    3b04:	ed cf       	rjmp	.-38     	; 0x3ae0 <main+0x17be>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:772
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3b06:	51 e0       	ldi	r21, 0x01	; 1
    3b08:	d5 12       	cpse	r13, r21
    3b0a:	bb cc       	rjmp	.-1674   	; 0x3482 <main+0x1160>
    3b0c:	b5 cd       	rjmp	.-1174   	; 0x3678 <main+0x1356>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:785
        }
        break;
    }
    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    3b0e:	61 e8       	ldi	r22, 0x81	; 129
    3b10:	d6 12       	cpse	r13, r22
    3b12:	65 c0       	rjmp	.+202    	; 0x3bde <main+0x18bc>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:140
  return strbuf;
}

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    3b14:	64 e2       	ldi	r22, 0x24	; 36
    3b16:	71 e0       	ldi	r23, 0x01	; 1
    3b18:	85 e2       	ldi	r24, 0x25	; 37
    3b1a:	93 e0       	ldi	r25, 0x03	; 3
    3b1c:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:141
  SlogamCount = 100;
    3b20:	84 e6       	ldi	r24, 0x64	; 100
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <config+0x1b>
    3b28:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:142
  startTime = 5; //5AM
    3b2c:	85 e0       	ldi	r24, 0x05	; 5
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <config+0x10>
    3b34:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:143
  endTime = 22; // 10PM
    3b38:	86 e1       	ldi	r24, 0x16	; 22
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <config+0x12>
    3b40:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:144
  backLightDur = 20; //Sec
    3b44:	84 e1       	ldi	r24, 0x14	; 20
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <config+0x14>
    3b4c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:145
  vol = 20;
    3b50:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <config+0x16>
    3b54:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:146
  SlogamOrder = 1;
    3b58:	21 e0       	ldi	r18, 0x01	; 1
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	30 93 3e 03 	sts	0x033E, r19	; 0x80033e <config+0x19>
    3b60:	20 93 3d 03 	sts	0x033D, r18	; 0x80033d <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:147
  SongCount = 10;
    3b64:	8a e0       	ldi	r24, 0x0A	; 10
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <config+0x1d>
    3b6c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:148
  SongOrder = 1;
    3b70:	30 93 44 03 	sts	0x0344, r19	; 0x800344 <config+0x1f>
    3b74:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:149
  MorSong1Time = 3;
    3b78:	83 e0       	ldi	r24, 0x03	; 3
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <config+0x25>
    3b80:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:150
  MorSong2Time = 3;
    3b84:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <config+0x27>
    3b88:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <config+0x26>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:151
  EveSong2Time = 3;
    3b8c:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <config+0x2b>
    3b90:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:152
  EveSong1Time = 3;
    3b94:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <config+0x29>
    3b98:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:153
  MorSongNo = 1;
    3b9c:	30 93 52 03 	sts	0x0352, r19	; 0x800352 <config+0x2d>
    3ba0:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:154
  EveSongNo = 2;
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <config+0x2f>
    3bac:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:155
  SchlZone = 0;
    3bb0:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:156
  SerialNo = 174;
    3bb4:	8e ea       	ldi	r24, 0xAE	; 174
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <config+0x23>
    3bbc:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <config+0x22>
e:\Arduino\Arduino Git\ChantBellv2.1/Config.cpp:157
  DataYear = 2022;
    3bc0:	86 ee       	ldi	r24, 0xE6	; 230
    3bc2:	97 e0       	ldi	r25, 0x07	; 7
    3bc4:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <config+0x21>
    3bc8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <config+0x20>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:788
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    3bcc:	61 e0       	ldi	r22, 0x01	; 1
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:789
            lcd.print("Defaults loaded");
    3bd4:	8f e1       	ldi	r24, 0x1F	; 31
    3bd6:	92 e0       	ldi	r25, 0x02	; 2
    3bd8:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
    3bdc:	52 cc       	rjmp	.-1884   	; 0x3482 <main+0x1160>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:791
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	91 ec       	ldi	r25, 0xC1	; 193
    3be2:	d9 12       	cpse	r13, r25
    3be4:	80 e0       	ldi	r24, 0x00	; 0
main():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:349
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3be6:	d8 2e       	mov	r13, r24
    3be8:	e2 cc       	rjmp	.-1596   	; 0x35ae <main+0x128c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:805
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    3bea:	cc 20       	and	r12, r12
    3bec:	69 f0       	breq	.+26     	; 0x3c08 <main+0x18e6>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:807
    {
        lcd.setCursor(1, 1);
    3bee:	61 e0       	ldi	r22, 0x01	; 1
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:808
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3bf6:	8b 2d       	mov	r24, r11
    3bf8:	0e 94 8e 0b 	call	0x171c	; 0x171c <Config::getFormattedStr(unsigned char) [clone .constprop.62]>
    3bfc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>
    3c00:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
    3c04:	c1 2c       	mov	r12, r1
    3c06:	52 cd       	rjmp	.-1372   	; 0x36ac <main+0x138a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:812
    }
    else
    {
        if (millis() - timr_Time > 300)
    3c08:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    3c0c:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <timr_Time>
    3c10:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <timr_Time+0x1>
    3c14:	40 91 09 03 	lds	r20, 0x0309	; 0x800309 <timr_Time+0x2>
    3c18:	50 91 0a 03 	lds	r21, 0x030A	; 0x80030a <timr_Time+0x3>
    3c1c:	62 1b       	sub	r22, r18
    3c1e:	73 0b       	sbc	r23, r19
    3c20:	84 0b       	sbc	r24, r20
    3c22:	95 0b       	sbc	r25, r21
    3c24:	6d 32       	cpi	r22, 0x2D	; 45
    3c26:	71 40       	sbci	r23, 0x01	; 1
    3c28:	81 05       	cpc	r24, r1
    3c2a:	91 05       	cpc	r25, r1
    3c2c:	08 f4       	brcc	.+2      	; 0x3c30 <main+0x190e>
    3c2e:	3e cd       	rjmp	.-1412   	; 0x36ac <main+0x138a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:814
        {
            if (blink)
    3c30:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    3c34:	88 23       	and	r24, r24
    3c36:	c1 f0       	breq	.+48     	; 0x3c68 <main+0x1946>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:816
            {
                lcd.setCursor(1, 1);
    3c38:	61 e0       	ldi	r22, 0x01	; 1
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:817
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3c40:	8b 2d       	mov	r24, r11
    3c42:	0e 94 8e 0b 	call	0x171c	; 0x171c <Config::getFormattedStr(unsigned char) [clone .constprop.62]>
    3c46:	0e 94 e5 08 	call	0x11ca	; 0x11ca <rpad(char*, char const*, char, unsigned char) [clone .constprop.84]>
    3c4a:	0e 94 8e 08 	call	0x111c	; 0x111c <Print::print(char const*) [clone .constprop.80]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:818
                blink = false;
    3c4e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:843
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    3c52:	0e 94 f6 03 	call	0x7ec	; 0x7ec <millis>
    3c56:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <timr_Time>
    3c5a:	70 93 08 03 	sts	0x0308, r23	; 0x800308 <timr_Time+0x1>
    3c5e:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <timr_Time+0x2>
    3c62:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <timr_Time+0x3>
    3c66:	22 cd       	rjmp	.-1468   	; 0x36ac <main+0x138a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:822
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime)
    3c68:	f3 e0       	ldi	r31, 0x03	; 3
    3c6a:	bf 12       	cpse	r11, r31
    3c6c:	14 c0       	rjmp	.+40     	; 0x3c96 <main+0x1974>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:824
                {
                    if (blinkMode == setHr)
    3c6e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <blinkMode>
    3c72:	81 11       	cpse	r24, r1
    3c74:	0b c0       	rjmp	.+22     	; 0x3c8c <main+0x196a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:825
                        lcd.setCursor(1, 1);
    3c76:	61 e0       	ldi	r22, 0x01	; 1
    3c78:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:827
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    3c7a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:828
                    lcd.print(F("  "));
    3c7e:	82 ed       	ldi	r24, 0xD2	; 210
    3c80:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:839
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    3c82:	0e 94 5f 07 	call	0xebe	; 0xebe <Print::print(__FlashStringHelper const*) [clone .constprop.42]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:840
                    blink = true;
    3c86:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    3c8a:	e3 cf       	rjmp	.-58     	; 0x3c52 <main+0x1930>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:826
            {
                if (cmdId == mnuCmdSetTime)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    3c8c:	81 30       	cpi	r24, 0x01	; 1
    3c8e:	b9 f7       	brne	.-18     	; 0x3c7e <main+0x195c>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:827
                        lcd.setCursor(4, 1);
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	84 e0       	ldi	r24, 0x04	; 4
    3c94:	f2 cf       	rjmp	.-28     	; 0x3c7a <main+0x1958>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:831
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    3c96:	22 e0       	ldi	r18, 0x02	; 2
    3c98:	b2 12       	cpse	r11, r18
    3c9a:	db cf       	rjmp	.-74     	; 0x3c52 <main+0x1930>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:833
                {
                    if (blinkMode == setDate)
    3c9c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <blinkMode>
    3ca0:	82 30       	cpi	r24, 0x02	; 2
    3ca2:	39 f4       	brne	.+14     	; 0x3cb2 <main+0x1990>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:834
                        lcd.setCursor(1, 1);
    3ca4:	61 e0       	ldi	r22, 0x01	; 1
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:838
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    3ca8:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.72]>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:839
                    lcd.print(F("  "));
    3cac:	8f ec       	ldi	r24, 0xCF	; 207
    3cae:	92 e0       	ldi	r25, 0x02	; 2
    3cb0:	e8 cf       	rjmp	.-48     	; 0x3c82 <main+0x1960>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:835
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    3cb2:	83 30       	cpi	r24, 0x03	; 3
    3cb4:	19 f4       	brne	.+6      	; 0x3cbc <main+0x199a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:836
                        lcd.setCursor(4, 1);
    3cb6:	61 e0       	ldi	r22, 0x01	; 1
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	f6 cf       	rjmp	.-20     	; 0x3ca8 <main+0x1986>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:837
                    if (blinkMode == setYear)
    3cbc:	84 30       	cpi	r24, 0x04	; 4
    3cbe:	b1 f7       	brne	.-20     	; 0x3cac <main+0x198a>
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:838
                        lcd.setCursor(9, 1);
    3cc0:	61 e0       	ldi	r22, 0x01	; 1
    3cc2:	89 e0       	ldi	r24, 0x09	; 9
    3cc4:	f1 cf       	rjmp	.-30     	; 0x3ca8 <main+0x1986>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3cc6:	de 8e       	std	Y+30, r13	; 0x1e
    3cc8:	cd 8e       	std	Y+29, r12	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    3cca:	b8 01       	movw	r22, r16
    3ccc:	89 8d       	ldd	r24, Y+25	; 0x19
    3cce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3cd0:	0e 94 c2 21 	call	0x4384	; 0x4384 <strcpy>
    3cd4:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <main+0x9aa>

00003cd8 <_GLOBAL__sub_D_ampDelay>:
_GLOBAL__sub_D_ampDelay():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1033
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:43
    setMonth,
    setYear
};
byte blinkMode = setHr;

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    3cdc:	c9 e6       	ldi	r28, 0x69	; 105
    3cde:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    3ce0:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    3ce2:	88 81       	ld	r24, Y
    3ce4:	99 81       	ldd	r25, Y+1	; 0x01
    3ce6:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:43
    3cea:	24 e0       	ldi	r18, 0x04	; 4
    3cec:	c1 32       	cpi	r28, 0x21	; 33
    3cee:	d2 07       	cpc	r29, r18
    3cf0:	b9 f7       	brne	.-18     	; 0x3ce0 <_GLOBAL__sub_D_ampDelay+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    3cf2:	8b e5       	ldi	r24, 0x5B	; 91
    3cf4:	91 e0       	ldi	r25, 0x01	; 1
    3cf6:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <mySoftwareSerial+0x1>
    3cfa:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    3cfe:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <SoftwareSerial::active_object>
    3d02:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <SoftwareSerial::active_object+0x1>
    3d06:	81 5a       	subi	r24, 0xA1	; 161
    3d08:	94 40       	sbci	r25, 0x04	; 4
    3d0a:	71 f4       	brne	.+28     	; 0x3d28 <_GLOBAL__sub_D_ampDelay+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    3d0c:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <mySoftwareSerial+0x13>
    3d10:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <mySoftwareSerial+0x14>
    3d14:	90 81       	ld	r25, Z
    3d16:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <mySoftwareSerial+0x15>
    3d1a:	80 95       	com	r24
    3d1c:	89 23       	and	r24, r25
    3d1e:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    3d20:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <SoftwareSerial::active_object+0x1>
    3d24:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <SoftwareSerial::active_object>
_GLOBAL__sub_D_ampDelay():
e:\Arduino\Arduino Git\ChantBellv2.1/ChantBellv2.1.ino:1033
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    3d28:	df 91       	pop	r29
    3d2a:	cf 91       	pop	r28
    3d2c:	08 95       	ret

00003d2e <strcpy_P>:
strcpy_P():
    3d2e:	fb 01       	movw	r30, r22
    3d30:	dc 01       	movw	r26, r24
    3d32:	05 90       	lpm	r0, Z+
    3d34:	0d 92       	st	X+, r0
    3d36:	00 20       	and	r0, r0
    3d38:	e1 f7       	brne	.-8      	; 0x3d32 <strcpy_P+0x4>
    3d3a:	08 95       	ret

00003d3c <__itoa_ncheck>:
__itoa_ncheck():
    3d3c:	bb 27       	eor	r27, r27
    3d3e:	4a 30       	cpi	r20, 0x0A	; 10
    3d40:	31 f4       	brne	.+12     	; 0x3d4e <__itoa_ncheck+0x12>
    3d42:	99 23       	and	r25, r25
    3d44:	22 f4       	brpl	.+8      	; 0x3d4e <__itoa_ncheck+0x12>
    3d46:	bd e2       	ldi	r27, 0x2D	; 45
    3d48:	90 95       	com	r25
    3d4a:	81 95       	neg	r24
    3d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4e:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__utoa_common>

00003d52 <__utoa_ncheck>:
__utoa_ncheck():
    3d52:	bb 27       	eor	r27, r27

00003d54 <__utoa_common>:
    3d54:	fb 01       	movw	r30, r22
    3d56:	55 27       	eor	r21, r21
    3d58:	aa 27       	eor	r26, r26
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	aa 1f       	adc	r26, r26
    3d60:	a4 17       	cp	r26, r20
    3d62:	10 f0       	brcs	.+4      	; 0x3d68 <__utoa_common+0x14>
    3d64:	a4 1b       	sub	r26, r20
    3d66:	83 95       	inc	r24
    3d68:	50 51       	subi	r21, 0x10	; 16
    3d6a:	b9 f7       	brne	.-18     	; 0x3d5a <__utoa_common+0x6>
    3d6c:	a0 5d       	subi	r26, 0xD0	; 208
    3d6e:	aa 33       	cpi	r26, 0x3A	; 58
    3d70:	08 f0       	brcs	.+2      	; 0x3d74 <__utoa_common+0x20>
    3d72:	a9 5d       	subi	r26, 0xD9	; 217
    3d74:	a1 93       	st	Z+, r26
    3d76:	00 97       	sbiw	r24, 0x00	; 0
    3d78:	79 f7       	brne	.-34     	; 0x3d58 <__utoa_common+0x4>
    3d7a:	b1 11       	cpse	r27, r1
    3d7c:	b1 93       	st	Z+, r27
    3d7e:	11 92       	st	Z+, r1
    3d80:	cb 01       	movw	r24, r22
    3d82:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <strrev>

00003d86 <strrev>:
strrev():
    3d86:	dc 01       	movw	r26, r24
    3d88:	fc 01       	movw	r30, r24
    3d8a:	67 2f       	mov	r22, r23
    3d8c:	71 91       	ld	r23, Z+
    3d8e:	77 23       	and	r23, r23
    3d90:	e1 f7       	brne	.-8      	; 0x3d8a <strrev+0x4>
    3d92:	32 97       	sbiw	r30, 0x02	; 2
    3d94:	04 c0       	rjmp	.+8      	; 0x3d9e <strrev+0x18>
    3d96:	7c 91       	ld	r23, X
    3d98:	6d 93       	st	X+, r22
    3d9a:	70 83       	st	Z, r23
    3d9c:	62 91       	ld	r22, -Z
    3d9e:	ae 17       	cp	r26, r30
    3da0:	bf 07       	cpc	r27, r31
    3da2:	c8 f3       	brcs	.-14     	; 0x3d96 <strrev+0x10>
    3da4:	08 95       	ret

00003da6 <eeprom_read_block>:
eeprom_read_block():
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22

00003daa <eeprom_read_blraw>:
    3daa:	fc 01       	movw	r30, r24
    3dac:	f9 99       	sbic	0x1f, 1	; 31
    3dae:	fe cf       	rjmp	.-4      	; 0x3dac <eeprom_read_blraw+0x2>
    3db0:	06 c0       	rjmp	.+12     	; 0x3dbe <eeprom_read_blraw+0x14>
    3db2:	f2 bd       	out	0x22, r31	; 34
    3db4:	e1 bd       	out	0x21, r30	; 33
    3db6:	f8 9a       	sbi	0x1f, 0	; 31
    3db8:	31 96       	adiw	r30, 0x01	; 1
    3dba:	00 b4       	in	r0, 0x20	; 32
    3dbc:	0d 92       	st	X+, r0
    3dbe:	41 50       	subi	r20, 0x01	; 1
    3dc0:	50 40       	sbci	r21, 0x00	; 0
    3dc2:	b8 f7       	brcc	.-18     	; 0x3db2 <eeprom_read_blraw+0x8>
    3dc4:	08 95       	ret

00003dc6 <eeprom_write_block>:
eeprom_write_block():
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	03 c0       	rjmp	.+6      	; 0x3dd2 <eeprom_write_block+0xc>
    3dcc:	2d 91       	ld	r18, X+
    3dce:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <eeprom_write_r18>
    3dd2:	41 50       	subi	r20, 0x01	; 1
    3dd4:	50 40       	sbci	r21, 0x00	; 0
    3dd6:	d0 f7       	brcc	.-12     	; 0x3dcc <eeprom_write_block+0x6>
    3dd8:	08 95       	ret

00003dda <eeprom_write_byte>:
eeprom_write_byte():
    3dda:	26 2f       	mov	r18, r22

00003ddc <eeprom_write_r18>:
    3ddc:	f9 99       	sbic	0x1f, 1	; 31
    3dde:	fe cf       	rjmp	.-4      	; 0x3ddc <eeprom_write_r18>
    3de0:	1f ba       	out	0x1f, r1	; 31
    3de2:	92 bd       	out	0x22, r25	; 34
    3de4:	81 bd       	out	0x21, r24	; 33
    3de6:	20 bd       	out	0x20, r18	; 32
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	f8 94       	cli
    3dec:	fa 9a       	sbi	0x1f, 2	; 31
    3dee:	f9 9a       	sbi	0x1f, 1	; 31
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	01 96       	adiw	r24, 0x01	; 1
    3df4:	08 95       	ret

00003df6 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    3df6:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    3df8:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    3dfa:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    3dfc:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    3dfe:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    3e00:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    3e02:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    3e04:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    3e06:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    3e08:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    3e0a:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    3e0c:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    3e0e:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    3e10:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    3e12:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    3e14:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    3e16:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    3e18:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    3e1a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    3e1c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    3e1e:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    3e20:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    3e22:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    3e24:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    3e26:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    3e28:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    3e2a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    3e2c:	09 94       	ijmp

00003e2e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    3e2e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    3e30:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    3e32:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    3e34:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    3e36:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    3e38:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    3e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    3e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    3e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    3e40:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    3e42:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    3e44:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    3e46:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    3e48:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    3e4a:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    3e4c:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    3e4e:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    3e50:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    3e52:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    3e54:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    3e56:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    3e58:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    3e5a:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    3e5c:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    3e5e:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    3e60:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    3e62:	08 95       	ret

00003e64 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3e64:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3e66:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3e68:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3e6a:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3e6c:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3e6e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3e70:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3e72:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3e74:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3e76:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3e78:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3e7a:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3e7c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3e7e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3e80:	08 95       	ret

00003e82 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    3e82:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    3e84:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <__udivmodqi4_ep>

00003e88 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    3e88:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    3e8a:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    3e8c:	08 f0       	brcs	.+2      	; 0x3e90 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    3e8e:	96 1b       	sub	r25, r22

00003e90 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    3e90:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    3e92:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    3e94:	c9 f7       	brne	.-14     	; 0x3e88 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    3e96:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    3e98:	08 95       	ret

00003e9a <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    3e9a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3e9c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3e9e:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3ea0:	07 c0       	rjmp	.+14     	; 0x3eb0 <__udivmodhi4_ep>

00003ea2 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    3ea2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    3ea4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    3ea6:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    3ea8:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    3eaa:	10 f0       	brcs	.+4      	; 0x3eb0 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3eac:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3eae:	b7 0b       	sbc	r27, r23

00003eb0 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3eb0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3eb2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3eb4:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    3eb6:	a9 f7       	brne	.-22     	; 0x3ea2 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    3eb8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    3eba:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3ebc:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3ebe:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3ec0:	08 95       	ret

00003ec2 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    3ec2:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    3ec4:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    3ec6:	16 f4       	brtc	.+4      	; 0x3ecc <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    3ec8:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    3eca:	07 d0       	rcall	.+14     	; 0x3eda <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    3ecc:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    3ece:	09 d0       	rcall	.+18     	; 0x3ee2 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    3ed0:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    3ed4:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    3ed6:	05 d0       	rcall	.+10     	; 0x3ee2 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    3ed8:	3e f4       	brtc	.+14     	; 0x3ee8 <__divmodhi4_exit>

00003eda <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    3eda:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    3edc:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    3ede:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    3ee0:	08 95       	ret

00003ee2 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    3ee2:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    3ee4:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    3ee6:	7f 4f       	sbci	r23, 0xFF	; 255

00003ee8 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    3ee8:	08 95       	ret

00003eea <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3eea:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3eec:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    3eee:	1e f4       	brtc	.+6      	; 0x3ef6 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    3ef0:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    3ef2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3ef6:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3ef8:	07 d0       	rcall	.+14     	; 0x3f08 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3efa:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    3efe:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    3f00:	03 d0       	rcall	.+6      	; 0x3f08 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    3f02:	4e f4       	brtc	.+18     	; 0x3f16 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3f04:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__negsi2>

00003f08 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3f08:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3f0a:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3f0c:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3f0e:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3f10:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3f12:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3f14:	5f 4f       	sbci	r21, 0xFF	; 255

00003f16 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3f16:	08 95       	ret

00003f18 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3f18:	90 95       	com	r25
    3f1a:	80 95       	com	r24
    3f1c:	70 95       	com	r23
    3f1e:	61 95       	neg	r22
    3f20:	7f 4f       	sbci	r23, 0xFF	; 255
    3f22:	8f 4f       	sbci	r24, 0xFF	; 255
    3f24:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3f26:	08 95       	ret

00003f28 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3f28:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3f2a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    3f2c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    3f2e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    3f30:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    3f32:	09 94       	ijmp

00003f34 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    3f34:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <__umulhisi3>

00003f38 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    3f38:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    3f3a:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    3f3c:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    3f3e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    3f40:	08 95       	ret

00003f42 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3f42:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3f44:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3f46:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3f48:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3f4a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3f4c:	0d c0       	rjmp	.+26     	; 0x3f68 <__udivmodsi4_ep>

00003f4e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3f4e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3f50:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3f52:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3f54:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3f56:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3f58:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3f5a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3f5c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3f5e:	20 f0       	brcs	.+8      	; 0x3f68 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3f60:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3f62:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3f64:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3f66:	f5 0b       	sbc	r31, r21

00003f68 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3f68:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3f6a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3f6c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3f6e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3f70:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3f72:	69 f7       	brne	.-38     	; 0x3f4e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3f74:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3f76:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3f78:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3f7a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3f7c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3f7e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3f80:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3f82:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3f84:	08 95       	ret

00003f86 <malloc>:
malloc():
    3f86:	0f 93       	push	r16
    3f88:	1f 93       	push	r17
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	82 30       	cpi	r24, 0x02	; 2
    3f90:	91 05       	cpc	r25, r1
    3f92:	10 f4       	brcc	.+4      	; 0x3f98 <malloc+0x12>
    3f94:	82 e0       	ldi	r24, 0x02	; 2
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <__flp>
    3f9c:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <__flp+0x1>
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	b0 e0       	ldi	r27, 0x00	; 0
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	30 97       	sbiw	r30, 0x00	; 0
    3faa:	99 f4       	brne	.+38     	; 0x3fd2 <malloc+0x4c>
    3fac:	21 15       	cp	r18, r1
    3fae:	31 05       	cpc	r19, r1
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <malloc+0x2e>
    3fb2:	4a c0       	rjmp	.+148    	; 0x4048 <malloc+0xc2>
    3fb4:	28 1b       	sub	r18, r24
    3fb6:	39 0b       	sbc	r19, r25
    3fb8:	24 30       	cpi	r18, 0x04	; 4
    3fba:	31 05       	cpc	r19, r1
    3fbc:	d8 f5       	brcc	.+118    	; 0x4034 <malloc+0xae>
    3fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc2:	61 15       	cp	r22, r1
    3fc4:	71 05       	cpc	r23, r1
    3fc6:	89 f1       	breq	.+98     	; 0x402a <malloc+0xa4>
    3fc8:	fb 01       	movw	r30, r22
    3fca:	93 83       	std	Z+3, r25	; 0x03
    3fcc:	82 83       	std	Z+2, r24	; 0x02
    3fce:	fe 01       	movw	r30, r28
    3fd0:	11 c0       	rjmp	.+34     	; 0x3ff4 <malloc+0x6e>
    3fd2:	40 81       	ld	r20, Z
    3fd4:	51 81       	ldd	r21, Z+1	; 0x01
    3fd6:	02 81       	ldd	r16, Z+2	; 0x02
    3fd8:	13 81       	ldd	r17, Z+3	; 0x03
    3fda:	48 17       	cp	r20, r24
    3fdc:	59 07       	cpc	r21, r25
    3fde:	e0 f0       	brcs	.+56     	; 0x4018 <malloc+0x92>
    3fe0:	48 17       	cp	r20, r24
    3fe2:	59 07       	cpc	r21, r25
    3fe4:	99 f4       	brne	.+38     	; 0x400c <malloc+0x86>
    3fe6:	10 97       	sbiw	r26, 0x00	; 0
    3fe8:	61 f0       	breq	.+24     	; 0x4002 <malloc+0x7c>
    3fea:	12 96       	adiw	r26, 0x02	; 2
    3fec:	0c 93       	st	X, r16
    3fee:	12 97       	sbiw	r26, 0x02	; 2
    3ff0:	13 96       	adiw	r26, 0x03	; 3
    3ff2:	1c 93       	st	X, r17
    3ff4:	32 96       	adiw	r30, 0x02	; 2
    3ff6:	cf 01       	movw	r24, r30
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	08 95       	ret
    4002:	00 93 c2 04 	sts	0x04C2, r16	; 0x8004c2 <__flp>
    4006:	10 93 c3 04 	sts	0x04C3, r17	; 0x8004c3 <__flp+0x1>
    400a:	f4 cf       	rjmp	.-24     	; 0x3ff4 <malloc+0x6e>
    400c:	21 15       	cp	r18, r1
    400e:	31 05       	cpc	r19, r1
    4010:	51 f0       	breq	.+20     	; 0x4026 <malloc+0xa0>
    4012:	42 17       	cp	r20, r18
    4014:	53 07       	cpc	r21, r19
    4016:	38 f0       	brcs	.+14     	; 0x4026 <malloc+0xa0>
    4018:	a9 01       	movw	r20, r18
    401a:	db 01       	movw	r26, r22
    401c:	9a 01       	movw	r18, r20
    401e:	bd 01       	movw	r22, r26
    4020:	df 01       	movw	r26, r30
    4022:	f8 01       	movw	r30, r16
    4024:	c1 cf       	rjmp	.-126    	; 0x3fa8 <malloc+0x22>
    4026:	ef 01       	movw	r28, r30
    4028:	f9 cf       	rjmp	.-14     	; 0x401c <malloc+0x96>
    402a:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <__flp+0x1>
    402e:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <__flp>
    4032:	cd cf       	rjmp	.-102    	; 0x3fce <malloc+0x48>
    4034:	fe 01       	movw	r30, r28
    4036:	e2 0f       	add	r30, r18
    4038:	f3 1f       	adc	r31, r19
    403a:	81 93       	st	Z+, r24
    403c:	91 93       	st	Z+, r25
    403e:	22 50       	subi	r18, 0x02	; 2
    4040:	31 09       	sbc	r19, r1
    4042:	39 83       	std	Y+1, r19	; 0x01
    4044:	28 83       	st	Y, r18
    4046:	d7 cf       	rjmp	.-82     	; 0x3ff6 <malloc+0x70>
    4048:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <__brkval>
    404c:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <__brkval+0x1>
    4050:	23 2b       	or	r18, r19
    4052:	41 f4       	brne	.+16     	; 0x4064 <malloc+0xde>
    4054:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_start>
    4058:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    405c:	30 93 c1 04 	sts	0x04C1, r19	; 0x8004c1 <__brkval+0x1>
    4060:	20 93 c0 04 	sts	0x04C0, r18	; 0x8004c0 <__brkval>
    4064:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_end>
    4068:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    406c:	21 15       	cp	r18, r1
    406e:	31 05       	cpc	r19, r1
    4070:	41 f4       	brne	.+16     	; 0x4082 <malloc+0xfc>
    4072:	2d b7       	in	r18, 0x3d	; 61
    4074:	3e b7       	in	r19, 0x3e	; 62
    4076:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    407a:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    407e:	24 1b       	sub	r18, r20
    4080:	35 0b       	sbc	r19, r21
    4082:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <__brkval>
    4086:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <__brkval+0x1>
    408a:	e2 17       	cp	r30, r18
    408c:	f3 07       	cpc	r31, r19
    408e:	a0 f4       	brcc	.+40     	; 0x40b8 <malloc+0x132>
    4090:	2e 1b       	sub	r18, r30
    4092:	3f 0b       	sbc	r19, r31
    4094:	28 17       	cp	r18, r24
    4096:	39 07       	cpc	r19, r25
    4098:	78 f0       	brcs	.+30     	; 0x40b8 <malloc+0x132>
    409a:	ac 01       	movw	r20, r24
    409c:	4e 5f       	subi	r20, 0xFE	; 254
    409e:	5f 4f       	sbci	r21, 0xFF	; 255
    40a0:	24 17       	cp	r18, r20
    40a2:	35 07       	cpc	r19, r21
    40a4:	48 f0       	brcs	.+18     	; 0x40b8 <malloc+0x132>
    40a6:	4e 0f       	add	r20, r30
    40a8:	5f 1f       	adc	r21, r31
    40aa:	50 93 c1 04 	sts	0x04C1, r21	; 0x8004c1 <__brkval+0x1>
    40ae:	40 93 c0 04 	sts	0x04C0, r20	; 0x8004c0 <__brkval>
    40b2:	81 93       	st	Z+, r24
    40b4:	91 93       	st	Z+, r25
    40b6:	9f cf       	rjmp	.-194    	; 0x3ff6 <malloc+0x70>
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	e0 e0       	ldi	r30, 0x00	; 0
    40bc:	9c cf       	rjmp	.-200    	; 0x3ff6 <malloc+0x70>

000040be <free>:
free():
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	00 97       	sbiw	r24, 0x00	; 0
    40c4:	e9 f0       	breq	.+58     	; 0x4100 <free+0x42>
    40c6:	fc 01       	movw	r30, r24
    40c8:	32 97       	sbiw	r30, 0x02	; 2
    40ca:	13 82       	std	Z+3, r1	; 0x03
    40cc:	12 82       	std	Z+2, r1	; 0x02
    40ce:	a0 91 c2 04 	lds	r26, 0x04C2	; 0x8004c2 <__flp>
    40d2:	b0 91 c3 04 	lds	r27, 0x04C3	; 0x8004c3 <__flp+0x1>
    40d6:	ed 01       	movw	r28, r26
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	10 97       	sbiw	r26, 0x00	; 0
    40de:	a1 f4       	brne	.+40     	; 0x4108 <free+0x4a>
    40e0:	20 81       	ld	r18, Z
    40e2:	31 81       	ldd	r19, Z+1	; 0x01
    40e4:	82 0f       	add	r24, r18
    40e6:	93 1f       	adc	r25, r19
    40e8:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <__brkval>
    40ec:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <__brkval+0x1>
    40f0:	28 17       	cp	r18, r24
    40f2:	39 07       	cpc	r19, r25
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <free+0x3a>
    40f6:	61 c0       	rjmp	.+194    	; 0x41ba <free+0xfc>
    40f8:	f0 93 c1 04 	sts	0x04C1, r31	; 0x8004c1 <__brkval+0x1>
    40fc:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <__brkval>
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	08 95       	ret
    4106:	ea 01       	movw	r28, r20
    4108:	ce 17       	cp	r28, r30
    410a:	df 07       	cpc	r29, r31
    410c:	e8 f5       	brcc	.+122    	; 0x4188 <free+0xca>
    410e:	4a 81       	ldd	r20, Y+2	; 0x02
    4110:	5b 81       	ldd	r21, Y+3	; 0x03
    4112:	9e 01       	movw	r18, r28
    4114:	41 15       	cp	r20, r1
    4116:	51 05       	cpc	r21, r1
    4118:	b1 f7       	brne	.-20     	; 0x4106 <free+0x48>
    411a:	e9 01       	movw	r28, r18
    411c:	fb 83       	std	Y+3, r31	; 0x03
    411e:	ea 83       	std	Y+2, r30	; 0x02
    4120:	49 91       	ld	r20, Y+
    4122:	59 91       	ld	r21, Y+
    4124:	c4 0f       	add	r28, r20
    4126:	d5 1f       	adc	r29, r21
    4128:	ec 17       	cp	r30, r28
    412a:	fd 07       	cpc	r31, r29
    412c:	61 f4       	brne	.+24     	; 0x4146 <free+0x88>
    412e:	80 81       	ld	r24, Z
    4130:	91 81       	ldd	r25, Z+1	; 0x01
    4132:	02 96       	adiw	r24, 0x02	; 2
    4134:	84 0f       	add	r24, r20
    4136:	95 1f       	adc	r25, r21
    4138:	e9 01       	movw	r28, r18
    413a:	99 83       	std	Y+1, r25	; 0x01
    413c:	88 83       	st	Y, r24
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	9b 83       	std	Y+3, r25	; 0x03
    4144:	8a 83       	std	Y+2, r24	; 0x02
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	e0 e0       	ldi	r30, 0x00	; 0
    414a:	12 96       	adiw	r26, 0x02	; 2
    414c:	8d 91       	ld	r24, X+
    414e:	9c 91       	ld	r25, X
    4150:	13 97       	sbiw	r26, 0x03	; 3
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	b9 f5       	brne	.+110    	; 0x41c4 <free+0x106>
    4156:	2d 91       	ld	r18, X+
    4158:	3c 91       	ld	r19, X
    415a:	11 97       	sbiw	r26, 0x01	; 1
    415c:	cd 01       	movw	r24, r26
    415e:	02 96       	adiw	r24, 0x02	; 2
    4160:	82 0f       	add	r24, r18
    4162:	93 1f       	adc	r25, r19
    4164:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <__brkval>
    4168:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <__brkval+0x1>
    416c:	28 17       	cp	r18, r24
    416e:	39 07       	cpc	r19, r25
    4170:	39 f6       	brne	.-114    	; 0x4100 <free+0x42>
    4172:	30 97       	sbiw	r30, 0x00	; 0
    4174:	51 f5       	brne	.+84     	; 0x41ca <free+0x10c>
    4176:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__flp+0x1>
    417a:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <__flp>
    417e:	b0 93 c1 04 	sts	0x04C1, r27	; 0x8004c1 <__brkval+0x1>
    4182:	a0 93 c0 04 	sts	0x04C0, r26	; 0x8004c0 <__brkval>
    4186:	bc cf       	rjmp	.-136    	; 0x4100 <free+0x42>
    4188:	d3 83       	std	Z+3, r29	; 0x03
    418a:	c2 83       	std	Z+2, r28	; 0x02
    418c:	40 81       	ld	r20, Z
    418e:	51 81       	ldd	r21, Z+1	; 0x01
    4190:	84 0f       	add	r24, r20
    4192:	95 1f       	adc	r25, r21
    4194:	c8 17       	cp	r28, r24
    4196:	d9 07       	cpc	r29, r25
    4198:	61 f4       	brne	.+24     	; 0x41b2 <free+0xf4>
    419a:	4e 5f       	subi	r20, 0xFE	; 254
    419c:	5f 4f       	sbci	r21, 0xFF	; 255
    419e:	88 81       	ld	r24, Y
    41a0:	99 81       	ldd	r25, Y+1	; 0x01
    41a2:	48 0f       	add	r20, r24
    41a4:	59 1f       	adc	r21, r25
    41a6:	51 83       	std	Z+1, r21	; 0x01
    41a8:	40 83       	st	Z, r20
    41aa:	8a 81       	ldd	r24, Y+2	; 0x02
    41ac:	9b 81       	ldd	r25, Y+3	; 0x03
    41ae:	93 83       	std	Z+3, r25	; 0x03
    41b0:	82 83       	std	Z+2, r24	; 0x02
    41b2:	21 15       	cp	r18, r1
    41b4:	31 05       	cpc	r19, r1
    41b6:	09 f0       	breq	.+2      	; 0x41ba <free+0xfc>
    41b8:	b0 cf       	rjmp	.-160    	; 0x411a <free+0x5c>
    41ba:	f0 93 c3 04 	sts	0x04C3, r31	; 0x8004c3 <__flp+0x1>
    41be:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <__flp>
    41c2:	9e cf       	rjmp	.-196    	; 0x4100 <free+0x42>
    41c4:	fd 01       	movw	r30, r26
    41c6:	dc 01       	movw	r26, r24
    41c8:	c0 cf       	rjmp	.-128    	; 0x414a <free+0x8c>
    41ca:	13 82       	std	Z+3, r1	; 0x03
    41cc:	12 82       	std	Z+2, r1	; 0x02
    41ce:	d7 cf       	rjmp	.-82     	; 0x417e <free+0xc0>

000041d0 <realloc>:
realloc():
    41d0:	b0 e0       	ldi	r27, 0x00	; 0
    41d2:	a0 e0       	ldi	r26, 0x00	; 0
    41d4:	ee ee       	ldi	r30, 0xEE	; 238
    41d6:	f0 e2       	ldi	r31, 0x20	; 32
    41d8:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__prologue_saves__+0x4>
    41dc:	8c 01       	movw	r16, r24
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	51 f4       	brne	.+20     	; 0x41f6 <realloc+0x26>
    41e2:	cb 01       	movw	r24, r22
    41e4:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <malloc>
    41e8:	8c 01       	movw	r16, r24
    41ea:	c8 01       	movw	r24, r16
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	e0 e1       	ldi	r30, 0x10	; 16
    41f2:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__epilogue_restores__+0x4>
    41f6:	fc 01       	movw	r30, r24
    41f8:	e6 0f       	add	r30, r22
    41fa:	f7 1f       	adc	r31, r23
    41fc:	9c 01       	movw	r18, r24
    41fe:	22 50       	subi	r18, 0x02	; 2
    4200:	31 09       	sbc	r19, r1
    4202:	e2 17       	cp	r30, r18
    4204:	f3 07       	cpc	r31, r19
    4206:	08 f4       	brcc	.+2      	; 0x420a <realloc+0x3a>
    4208:	9d c0       	rjmp	.+314    	; 0x4344 <realloc+0x174>
    420a:	d9 01       	movw	r26, r18
    420c:	cd 91       	ld	r28, X+
    420e:	dc 91       	ld	r29, X
    4210:	11 97       	sbiw	r26, 0x01	; 1
    4212:	c6 17       	cp	r28, r22
    4214:	d7 07       	cpc	r29, r23
    4216:	98 f0       	brcs	.+38     	; 0x423e <realloc+0x6e>
    4218:	c5 30       	cpi	r28, 0x05	; 5
    421a:	d1 05       	cpc	r29, r1
    421c:	30 f3       	brcs	.-52     	; 0x41ea <realloc+0x1a>
    421e:	ce 01       	movw	r24, r28
    4220:	04 97       	sbiw	r24, 0x04	; 4
    4222:	86 17       	cp	r24, r22
    4224:	97 07       	cpc	r25, r23
    4226:	08 f3       	brcs	.-62     	; 0x41ea <realloc+0x1a>
    4228:	c6 1b       	sub	r28, r22
    422a:	d7 0b       	sbc	r29, r23
    422c:	22 97       	sbiw	r28, 0x02	; 2
    422e:	c1 93       	st	Z+, r28
    4230:	d1 93       	st	Z+, r29
    4232:	6d 93       	st	X+, r22
    4234:	7c 93       	st	X, r23
    4236:	cf 01       	movw	r24, r30
    4238:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
    423c:	d6 cf       	rjmp	.-84     	; 0x41ea <realloc+0x1a>
    423e:	5b 01       	movw	r10, r22
    4240:	ac 1a       	sub	r10, r28
    4242:	bd 0a       	sbc	r11, r29
    4244:	4c 01       	movw	r8, r24
    4246:	8c 0e       	add	r8, r28
    4248:	9d 1e       	adc	r9, r29
    424a:	a0 91 c2 04 	lds	r26, 0x04C2	; 0x8004c2 <__flp>
    424e:	b0 91 c3 04 	lds	r27, 0x04C3	; 0x8004c3 <__flp+0x1>
    4252:	51 2c       	mov	r5, r1
    4254:	41 2c       	mov	r4, r1
    4256:	f1 2c       	mov	r15, r1
    4258:	e1 2c       	mov	r14, r1
    425a:	10 97       	sbiw	r26, 0x00	; 0
    425c:	31 f5       	brne	.+76     	; 0x42aa <realloc+0xda>
    425e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__brkval>
    4262:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <__brkval+0x1>
    4266:	88 15       	cp	r24, r8
    4268:	99 05       	cpc	r25, r9
    426a:	09 f0       	breq	.+2      	; 0x426e <realloc+0x9e>
    426c:	5c c0       	rjmp	.+184    	; 0x4326 <realloc+0x156>
    426e:	46 16       	cp	r4, r22
    4270:	57 06       	cpc	r5, r23
    4272:	08 f0       	brcs	.+2      	; 0x4276 <realloc+0xa6>
    4274:	58 c0       	rjmp	.+176    	; 0x4326 <realloc+0x156>
    4276:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__malloc_heap_end>
    427a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	41 f4       	brne	.+16     	; 0x4292 <realloc+0xc2>
    4282:	8d b7       	in	r24, 0x3d	; 61
    4284:	9e b7       	in	r25, 0x3e	; 62
    4286:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    428a:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    428e:	84 1b       	sub	r24, r20
    4290:	95 0b       	sbc	r25, r21
    4292:	e8 17       	cp	r30, r24
    4294:	f9 07       	cpc	r31, r25
    4296:	08 f0       	brcs	.+2      	; 0x429a <realloc+0xca>
    4298:	55 c0       	rjmp	.+170    	; 0x4344 <realloc+0x174>
    429a:	f0 93 c1 04 	sts	0x04C1, r31	; 0x8004c1 <__brkval+0x1>
    429e:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <__brkval>
    42a2:	f9 01       	movw	r30, r18
    42a4:	71 83       	std	Z+1, r23	; 0x01
    42a6:	60 83       	st	Z, r22
    42a8:	a0 cf       	rjmp	.-192    	; 0x41ea <realloc+0x1a>
    42aa:	8d 91       	ld	r24, X+
    42ac:	9c 91       	ld	r25, X
    42ae:	11 97       	sbiw	r26, 0x01	; 1
    42b0:	12 96       	adiw	r26, 0x02	; 2
    42b2:	6c 90       	ld	r6, X
    42b4:	12 97       	sbiw	r26, 0x02	; 2
    42b6:	13 96       	adiw	r26, 0x03	; 3
    42b8:	7c 90       	ld	r7, X
    42ba:	13 97       	sbiw	r26, 0x03	; 3
    42bc:	a8 15       	cp	r26, r8
    42be:	b9 05       	cpc	r27, r9
    42c0:	59 f5       	brne	.+86     	; 0x4318 <realloc+0x148>
    42c2:	6c 01       	movw	r12, r24
    42c4:	42 e0       	ldi	r20, 0x02	; 2
    42c6:	c4 0e       	add	r12, r20
    42c8:	d1 1c       	adc	r13, r1
    42ca:	ca 14       	cp	r12, r10
    42cc:	db 04       	cpc	r13, r11
    42ce:	20 f1       	brcs	.+72     	; 0x4318 <realloc+0x148>
    42d0:	ac 01       	movw	r20, r24
    42d2:	4a 19       	sub	r20, r10
    42d4:	5b 09       	sbc	r21, r11
    42d6:	da 01       	movw	r26, r20
    42d8:	12 96       	adiw	r26, 0x02	; 2
    42da:	15 97       	sbiw	r26, 0x05	; 5
    42dc:	80 f0       	brcs	.+32     	; 0x42fe <realloc+0x12e>
    42de:	62 82       	std	Z+2, r6	; 0x02
    42e0:	73 82       	std	Z+3, r7	; 0x03
    42e2:	51 83       	std	Z+1, r21	; 0x01
    42e4:	40 83       	st	Z, r20
    42e6:	d9 01       	movw	r26, r18
    42e8:	6d 93       	st	X+, r22
    42ea:	7c 93       	st	X, r23
    42ec:	e1 14       	cp	r14, r1
    42ee:	f1 04       	cpc	r15, r1
    42f0:	71 f0       	breq	.+28     	; 0x430e <realloc+0x13e>
    42f2:	d7 01       	movw	r26, r14
    42f4:	13 96       	adiw	r26, 0x03	; 3
    42f6:	fc 93       	st	X, r31
    42f8:	ee 93       	st	-X, r30
    42fa:	12 97       	sbiw	r26, 0x02	; 2
    42fc:	76 cf       	rjmp	.-276    	; 0x41ea <realloc+0x1a>
    42fe:	22 96       	adiw	r28, 0x02	; 2
    4300:	8c 0f       	add	r24, r28
    4302:	9d 1f       	adc	r25, r29
    4304:	f9 01       	movw	r30, r18
    4306:	91 83       	std	Z+1, r25	; 0x01
    4308:	80 83       	st	Z, r24
    430a:	f3 01       	movw	r30, r6
    430c:	ef cf       	rjmp	.-34     	; 0x42ec <realloc+0x11c>
    430e:	f0 93 c3 04 	sts	0x04C3, r31	; 0x8004c3 <__flp+0x1>
    4312:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <__flp>
    4316:	69 cf       	rjmp	.-302    	; 0x41ea <realloc+0x1a>
    4318:	48 16       	cp	r4, r24
    431a:	59 06       	cpc	r5, r25
    431c:	08 f4       	brcc	.+2      	; 0x4320 <realloc+0x150>
    431e:	2c 01       	movw	r4, r24
    4320:	7d 01       	movw	r14, r26
    4322:	d3 01       	movw	r26, r6
    4324:	9a cf       	rjmp	.-204    	; 0x425a <realloc+0x8a>
    4326:	cb 01       	movw	r24, r22
    4328:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <malloc>
    432c:	7c 01       	movw	r14, r24
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	49 f0       	breq	.+18     	; 0x4344 <realloc+0x174>
    4332:	ae 01       	movw	r20, r28
    4334:	b8 01       	movw	r22, r16
    4336:	0e 94 a5 21 	call	0x434a	; 0x434a <memcpy>
    433a:	c8 01       	movw	r24, r16
    433c:	0e 94 5f 20 	call	0x40be	; 0x40be <free>
    4340:	87 01       	movw	r16, r14
    4342:	53 cf       	rjmp	.-346    	; 0x41ea <realloc+0x1a>
    4344:	10 e0       	ldi	r17, 0x00	; 0
    4346:	00 e0       	ldi	r16, 0x00	; 0
    4348:	50 cf       	rjmp	.-352    	; 0x41ea <realloc+0x1a>

0000434a <memcpy>:
memcpy():
    434a:	fb 01       	movw	r30, r22
    434c:	dc 01       	movw	r26, r24
    434e:	02 c0       	rjmp	.+4      	; 0x4354 <memcpy+0xa>
    4350:	01 90       	ld	r0, Z+
    4352:	0d 92       	st	X+, r0
    4354:	41 50       	subi	r20, 0x01	; 1
    4356:	50 40       	sbci	r21, 0x00	; 0
    4358:	d8 f7       	brcc	.-10     	; 0x4350 <memcpy+0x6>
    435a:	08 95       	ret

0000435c <strcat>:
strcat():
    435c:	fb 01       	movw	r30, r22
    435e:	dc 01       	movw	r26, r24
    4360:	0d 90       	ld	r0, X+
    4362:	00 20       	and	r0, r0
    4364:	e9 f7       	brne	.-6      	; 0x4360 <strcat+0x4>
    4366:	11 97       	sbiw	r26, 0x01	; 1
    4368:	01 90       	ld	r0, Z+
    436a:	0d 92       	st	X+, r0
    436c:	00 20       	and	r0, r0
    436e:	e1 f7       	brne	.-8      	; 0x4368 <strcat+0xc>
    4370:	08 95       	ret

00004372 <strcmp>:
strcmp():
    4372:	fb 01       	movw	r30, r22
    4374:	dc 01       	movw	r26, r24
    4376:	8d 91       	ld	r24, X+
    4378:	01 90       	ld	r0, Z+
    437a:	80 19       	sub	r24, r0
    437c:	01 10       	cpse	r0, r1
    437e:	d9 f3       	breq	.-10     	; 0x4376 <strcmp+0x4>
    4380:	99 0b       	sbc	r25, r25
    4382:	08 95       	ret

00004384 <strcpy>:
strcpy():
    4384:	fb 01       	movw	r30, r22
    4386:	dc 01       	movw	r26, r24
    4388:	01 90       	ld	r0, Z+
    438a:	0d 92       	st	X+, r0
    438c:	00 20       	and	r0, r0
    438e:	e1 f7       	brne	.-8      	; 0x4388 <strcpy+0x4>
    4390:	08 95       	ret

00004392 <strncpy>:
strncpy():
    4392:	fb 01       	movw	r30, r22
    4394:	dc 01       	movw	r26, r24
    4396:	41 50       	subi	r20, 0x01	; 1
    4398:	50 40       	sbci	r21, 0x00	; 0
    439a:	48 f0       	brcs	.+18     	; 0x43ae <strncpy+0x1c>
    439c:	01 90       	ld	r0, Z+
    439e:	0d 92       	st	X+, r0
    43a0:	00 20       	and	r0, r0
    43a2:	c9 f7       	brne	.-14     	; 0x4396 <strncpy+0x4>
    43a4:	01 c0       	rjmp	.+2      	; 0x43a8 <strncpy+0x16>
    43a6:	1d 92       	st	X+, r1
    43a8:	41 50       	subi	r20, 0x01	; 1
    43aa:	50 40       	sbci	r21, 0x00	; 0
    43ac:	e0 f7       	brcc	.-8      	; 0x43a6 <strncpy+0x14>
    43ae:	08 95       	ret

000043b0 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    43b0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    43b2:	cb e9       	ldi	r28, 0x9B	; 155
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    43b4:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    43b6:	04 c0       	rjmp	.+8      	; 0x43c0 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    43b8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    43ba:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    43be:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    43c0:	cc 39       	cpi	r28, 0x9C	; 156
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    43c2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    43c4:	c9 f7       	brne	.-14     	; 0x43b8 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    43c6:	f8 94       	cli

000043c8 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    43c8:	ff cf       	rjmp	.-2      	; 0x43c8 <__stop_program>
