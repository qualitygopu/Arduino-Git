
e:\Arduino\Arduino Git\ChantBellv2.3\build/ChantBellv2.3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 8b 01 	jmp	0x316	; 0x316 <__dtors_end>
       4:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
       8:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
       c:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_3>
      10:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_3>
      14:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_3>
      18:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      1c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      20:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      24:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      28:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      2c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      30:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      34:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      38:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      3c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      40:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_16>
      44:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      48:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      4c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      50:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      54:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      58:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      5c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      60:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__vector_24>
      64:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 56       	subi	r20, 0x65	; 101
      6a:	45 4e       	sbci	r20, 0xE5	; 229
      6c:	49 4e       	sbci	r20, 0xE9	; 233
      6e:	47 20       	and	r4, r7
      70:	53 4f       	sbci	r21, 0xF3	; 243
      72:	4e 47       	sbci	r20, 0x7E	; 126
      74:	20 4e       	sbci	r18, 0xE0	; 224
      76:	6f 2e       	mov	r6, r31
	...

00000079 <sampleMenu_2_7_3>:
      79:	45 56 45 4e 49 4e 47 20 53 4f 4e 47 20 54 49 4d     EVENING SONG TIM
      89:	45 00                                               E.

0000008b <sampleMenu_2_7_2>:
      8b:	4d 4f 52 4e 49 4e 47 20 53 4f 4e 47 20 4e 6f 2e     MORNING SONG No.
	...

0000009c <sampleMenu_2_7_1>:
      9c:	4d 4f 52 4e 49 4e 47 20 53 4f 4e 47 20 54 49 4d     MORNING SONG TIM
      ac:	45 00                                               E.

000000ae <sampleMenu_2_6_2>:
      ae:	32 20 50 4c 41 59 00                                2 PLAY.

000000b5 <sampleMenu_2_6_1>:
      b5:	31 20 53 45 4c 45 43 54 20 54 49 4d 45 00           1 SELECT TIME.

000000c3 <sampleMenu_2_9>:
      c3:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

000000d1 <sampleMenu_2_11>:
      d1:	50 41 4e 43 48 41 4e 47 41 4d 20 54 49 4d 45 00     PANCHANGAM TIME.

000000e1 <sampleMenu_2_10>:
      e1:	41 4c 41 52 4d 20 4f 4e 2f 4f 46 46 00              ALARM ON/OFF.

000000ee <sampleMenu_List_2_7>:
      ee:	0f 9c 00 00 00 00 11 8b 00 00 00 00 10 79 00 00     .............y..
      fe:	00 00 12 68 00 00 00 00 00 41 01 00 00 00           ...h.....A....

0000010c <sampleMenu_2_7>:
     10c:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

00000119 <sampleMenu_List_2_6>:
     119:	0c b5 00 00 00 00 0d ae 00 00 00 00 00 41 01 00     .............A..
	...

0000012b <sampleMenu_2_6>:
     12b:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

00000135 <sampleMenu_2_3>:
     135:	53 4f 4e 47 31 20 43 4f 55 4e 54 00                 SONG1 COUNT.

00000141 <sampleMenu_back>:
     141:	42 41 43 4b 00                                      BACK.

00000146 <configMenu_2>:
     146:	53 45 54 20 59 45 41 52 00                          SET YEAR.

0000014f <sampleMenu_2_5>:
     14f:	56 4f 4c 55 4d 45 00                                VOLUME.

00000156 <sampleMenu_2_8>:
     156:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000162 <sampleMenu_2_2>:
     162:	41 4c 41 52 4d 20 45 4e 44 20 54 49 4d 45 00        ALARM END TIME.

00000171 <sampleMenu_2_1>:
     171:	41 4c 41 52 4d 20 53 54 41 52 54 20 54 49 4d 45     ALARM START TIME
	...

00000182 <sampleMenu_1_2>:
     182:	53 45 54 20 54 49 4d 45 00                          SET TIME.

0000018b <sampleMenu_1_1>:
     18b:	53 45 54 20 44 41 54 45 00                          SET DATE.

00000194 <sampleMenu_exit>:
     194:	45 58 49 54 00                                      EXIT.

00000199 <sampleMenu_List_2>:
     199:	05 71 01 00 00 00 06 62 01 00 00 00 09 35 01 00     .q.....b.....5..
     1a9:	00 00 0a 4f 01 00 00 00 0b 2b 01 19 01 03 0e 0c     ...O.....+......
     1b9:	01 ee 00 05 13 56 01 00 00 00 07 e1 00 00 00 00     .....V..........
     1c9:	08 d1 00 00 00 00 15 c3 00 00 00 00 00 41 01 00     .............A..
	...

000001db <sampleMenu_2>:
     1db:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

000001e8 <sampleMenu_List_1>:
     1e8:	02 8b 01 00 00 00 03 82 01 00 00 00 00 41 01 00     .............A..
	...

000001fa <sampleMenu_1>:
     1fa:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

00000208 <port_to_mode_PGM>:
     208:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000212 <digital_pin_to_timer_PGM>:
     212:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     222:	00 00 00 00 00 00 00                                .......

00000229 <configMenu_Root>:
     229:	16 46 01 00 00 00 00 94 01 00 00 00                 .F..........

00000235 <setup::__c>:
     235:	20 45 4e 54 45 52 20 50 41 53 53 57 4f 52 44 20      ENTER PASSWORD 
	...

00000246 <normalMenu_Root>:
     246:	02 8b 01 00 00 00 03 82 01 00 00 00 05 71 01 00     .............q..
     256:	00 00 06 62 01 00 00 00 13 56 01 00 00 00 0a 4f     ...b.....V.....O
     266:	01 00 00 00 00 94 01 00 00 00                       ..........

00000270 <sampleMenu_Root>:
     270:	01 fa 01 e8 01 03 04 db 01 99 01 0b 00 94 01 00     ................
	...

00000282 <setup::__c>:
     282:	45 52 52 20 30 33 00                                ERR 03.

00000289 <setup::__c>:
     289:	45 52 52 20 30 32 00                                ERR 02.

00000290 <setup::__c>:
     290:	45 52 52 20 30 31 00                                ERR 01.

00000297 <setup::__c>:
     297:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

000002a8 <setup::__c>:
     2a8:	51 54 52 4f 4e 00                                   QTRON.

000002ae <processMenuCommand(unsigned char)::__c>:
     2ae:	20 20 00                                              .

000002b1 <processMenuCommand(unsigned char)::__c>:
     2b1:	20 20 00                                              .

000002b4 <loop::__c>:
     2b4:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

000002c5 <daysInMonth>:
     2c5:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000002d0 <port_to_input_PGM>:
     2d0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002da <port_to_output_PGM>:
     2da:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002e4 <digital_pin_to_port_PGM>:
     2e4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2f4:	03 03 03 03 02 02 03                                .......

000002fb <digital_pin_to_bit_mask_PGM>:
     2fb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     30b:	04 08 10 20 40 80 40                                ... @.@

00000312 <__ctors_start>:
__ctors_start():
     312:	e1 11       	cpse	r30, r1

00000314 <__ctors_end>:
__dtors_start():
     314:	29 22       	and	r2, r25

00000316 <__dtors_end>:
__dtors_end():
     316:	11 24       	eor	r1, r1
     318:	1f be       	out	0x3f, r1	; 63
     31a:	cf ef       	ldi	r28, 0xFF	; 255
     31c:	d8 e0       	ldi	r29, 0x08	; 8
     31e:	de bf       	out	0x3e, r29	; 62
     320:	cd bf       	out	0x3d, r28	; 61

00000322 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     322:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     324:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     326:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     328:	e2 ed       	ldi	r30, 0xD2	; 210
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     32a:	fc e4       	ldi	r31, 0x4C	; 76
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     32e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     330:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     332:	a8 3d       	cpi	r26, 0xD8	; 216
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     334:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0xc>

00000338 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     338:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     33a:	a8 ed       	ldi	r26, 0xD8	; 216
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     33c:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     342:	a3 39       	cpi	r26, 0x93	; 147
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     344:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>

00000348 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     348:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     34a:	ca e8       	ldi	r28, 0x8A	; 138
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     34c:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     34e:	04 c0       	rjmp	.+8      	; 0x358 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     350:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     352:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     354:	0e 94 3a 24 	call	0x4874	; 0x4874 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     358:	c9 38       	cpi	r28, 0x89	; 137
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     35a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     35c:	c9 f7       	brne	.-14     	; 0x350 <__do_global_ctors+0x8>
     35e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <main>
     362:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__do_global_dtors>

00000366 <__bad_interrupt>:
__vector_22():
     366:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000036a <MenuManager::currentItemHasChildren() [clone .constprop.100]>:
_ZN11MenuManager22currentItemHasChildrenEv.constprop.100():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     36a:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <Menu1+0x6>
     36e:	e0 91 cb 04 	lds	r30, 0x04CB	; 0x8004cb <Menu1+0x3>
     372:	f0 91 cc 04 	lds	r31, 0x04CC	; 0x8004cc <Menu1+0x4>
     376:	96 e0       	ldi	r25, 0x06	; 6
     378:	89 9f       	mul	r24, r25
     37a:	e0 0d       	add	r30, r0
     37c:	f1 1d       	adc	r31, r1
     37e:	11 24       	eor	r1, r1
     380:	35 96       	adiw	r30, 0x05	; 5
     382:	e4 91       	lpm	r30, Z
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	e1 11       	cpse	r30, r1
     388:	01 c0       	rjmp	.+2      	; 0x38c <MenuManager::currentItemHasChildren() [clone .constprop.100]+0x22>
     38a:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:116
}
     38c:	08 95       	ret

0000038e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>:
_ZN11MenuManager19getCurrentItemCmdIdEv.constprop.97():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     38e:	e8 ec       	ldi	r30, 0xC8	; 200
     390:	f4 e0       	ldi	r31, 0x04	; 4
     392:	86 81       	ldd	r24, Z+6	; 0x06
     394:	03 80       	ldd	r0, Z+3	; 0x03
     396:	f4 81       	ldd	r31, Z+4	; 0x04
     398:	e0 2d       	mov	r30, r0
     39a:	96 e0       	ldi	r25, 0x06	; 6
     39c:	89 9f       	mul	r24, r25
     39e:	e0 0d       	add	r30, r0
     3a0:	f1 1d       	adc	r31, r1
     3a2:	11 24       	eor	r1, r1
     3a4:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:60
}
     3a6:	08 95       	ret

000003a8 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>:
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:173
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     3a8:	98 2f       	mov	r25, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     3aa:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     3b0:	21 32       	cpi	r18, 0x21	; 33
     3b2:	08 f0       	brcs	.+2      	; 0x3b6 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
     3b4:	43 c0       	rjmp	.+134    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     3b6:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <twi_state>
     3ba:	81 11       	cpse	r24, r1
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     3be:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     3c2:	32 e0       	ldi	r19, 0x02	; 2
     3c4:	30 93 81 04 	sts	0x0481, r19	; 0x800481 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     3c8:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     3cc:	9f ef       	ldi	r25, 0xFF	; 255
     3ce:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     3d2:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     3d6:	20 93 7d 04 	sts	0x047D, r18	; 0x80047d <twi_masterBufferLength>
     3da:	a4 e8       	ldi	r26, 0x84	; 132
     3dc:	b4 e0       	ldi	r27, 0x04	; 4
     3de:	ed e5       	ldi	r30, 0x5D	; 93
     3e0:	f4 e0       	ldi	r31, 0x04	; 4
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     3e2:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     3e4:	29 13       	cpse	r18, r25
     3e6:	31 c0       	rjmp	.+98     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     3e8:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     3ec:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <twi_slarw>
     3f0:	88 0f       	add	r24, r24
     3f2:	89 2b       	or	r24, r25
     3f4:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     3f8:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <twi_inRepStart>
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	49 f5       	brne	.+82     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     400:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     404:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <twi_slarw>
     408:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     40c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     410:	83 fd       	sbrc	r24, 3
     412:	f8 cf       	rjmp	.-16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     414:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     41a:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <twi_state>
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	e1 f3       	breq	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     422:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <twi_error>
     426:	8f 3f       	cpi	r24, 0xFF	; 255
     428:	b1 f0       	breq	.+44     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     42a:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <twi_error>
     42e:	80 32       	cpi	r24, 0x20	; 32
     430:	a1 f0       	breq	.+40     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     432:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <twi_error>
     436:	80 33       	cpi	r24, 0x30	; 48
     438:	91 f0       	breq	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     43a:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     43c:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     440:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     444:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:183
  return ret;
}
     448:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     44a:	3d 91       	ld	r19, X+
     44c:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     44e:	9f 5f       	subi	r25, 0xFF	; 255
     450:	c9 cf       	rjmp	.-110    	; 0x3e4 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     452:	85 ee       	ldi	r24, 0xE5	; 229
     454:	e0 cf       	rjmp	.-64     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	f1 cf       	rjmp	.-30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	ef cf       	rjmp	.-34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	ed cf       	rjmp	.-38     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

00000462 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     462:	08 95       	ret

00000464 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     464:	08 95       	ret

00000466 <DateTime::dayOfTheWeek() const [clone .constprop.20]>:
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:554
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     466:	60 91 39 05 	lds	r22, 0x0539	; 0x800539 <bell+0x1>
     46a:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <bell>
     46e:	49 2f       	mov	r20, r25
     470:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:110
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     472:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <bell+0x2>
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	e5 ec       	ldi	r30, 0xC5	; 197
     47c:	f2 e0       	ldi	r31, 0x02	; 2
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
  for (uint8_t i = 1; i < m; ++i)
     47e:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     480:	86 17       	cp	r24, r22
     482:	30 f4       	brcc	.+12     	; 0x490 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:112
    days += pgm_read_byte(daysInMonth + i - 1);
     484:	74 91       	lpm	r23, Z
     486:	27 0f       	add	r18, r23
     488:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	31 96       	adiw	r30, 0x01	; 1
     48e:	f8 cf       	rjmp	.-16     	; 0x480 <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:113
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     490:	63 30       	cpi	r22, 0x03	; 3
     492:	20 f0       	brcs	.+8      	; 0x49c <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x36>
     494:	93 70       	andi	r25, 0x03	; 3
     496:	11 f4       	brne	.+4      	; 0x49c <DateTime::dayOfTheWeek() const [clone .constprop.20]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:114
    ++days;
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  return days + 365 * y + (y + 3) / 4 - 1;
     49c:	6d e6       	ldi	r22, 0x6D	; 109
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	46 9f       	mul	r20, r22
     4a2:	c0 01       	movw	r24, r0
     4a4:	47 9f       	mul	r20, r23
     4a6:	90 0d       	add	r25, r0
     4a8:	56 9f       	mul	r21, r22
     4aa:	90 0d       	add	r25, r0
     4ac:	11 24       	eor	r1, r1
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     4ae:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     4b0:	4d 5f       	subi	r20, 0xFD	; 253
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	56 95       	lsr	r21
     4b6:	47 95       	ror	r20
     4b8:	56 95       	lsr	r21
     4ba:	47 95       	ror	r20
_ZNK8DateTime12dayOfTheWeekEv.constprop.20():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     4bc:	84 0f       	add	r24, r20
     4be:	95 1f       	adc	r25, r21
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	67 e0       	ldi	r22, 0x07	; 7
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	0e 94 12 24 	call	0x4824	; 0x4824 <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:556
}
     4cc:	08 95       	ret

000004ce <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	6c 01       	movw	r12, r24
     4e4:	7b 01       	movw	r14, r22
     4e6:	8b 01       	movw	r16, r22
     4e8:	04 0f       	add	r16, r20
     4ea:	15 1f       	adc	r17, r21
     4ec:	eb 01       	movw	r28, r22
     4ee:	5e 01       	movw	r10, r28
     4f0:	ae 18       	sub	r10, r14
     4f2:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4f4:	c0 17       	cp	r28, r16
     4f6:	d1 07       	cpc	r29, r17
     4f8:	59 f0       	breq	.+22     	; 0x510 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4fa:	69 91       	ld	r22, Y+
     4fc:	d6 01       	movw	r26, r12
     4fe:	ed 91       	ld	r30, X+
     500:	fc 91       	ld	r31, X
     502:	01 90       	ld	r0, Z+
     504:	f0 81       	ld	r31, Z
     506:	e0 2d       	mov	r30, r0
     508:	c6 01       	movw	r24, r12
     50a:	09 95       	icall
     50c:	89 2b       	or	r24, r25
     50e:	79 f7       	brne	.-34     	; 0x4ee <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     510:	c5 01       	movw	r24, r10
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	af 90       	pop	r10
     526:	08 95       	ret

00000528 <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     528:	84 30       	cpi	r24, 0x04	; 4
     52a:	81 f0       	breq	.+32     	; 0x54c <turnOffPWM+0x24>
     52c:	28 f4       	brcc	.+10     	; 0x538 <turnOffPWM+0x10>
     52e:	82 30       	cpi	r24, 0x02	; 2
     530:	e9 f0       	breq	.+58     	; 0x56c <turnOffPWM+0x44>
     532:	83 30       	cpi	r24, 0x03	; 3
     534:	f9 f0       	breq	.+62     	; 0x574 <turnOffPWM+0x4c>
     536:	08 95       	ret
     538:	88 30       	cpi	r24, 0x08	; 8
     53a:	71 f0       	breq	.+28     	; 0x558 <turnOffPWM+0x30>
     53c:	89 30       	cpi	r24, 0x09	; 9
     53e:	91 f0       	breq	.+36     	; 0x564 <turnOffPWM+0x3c>
     540:	85 30       	cpi	r24, 0x05	; 5
     542:	b9 f4       	brne	.+46     	; 0x572 <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     544:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     548:	8f 7d       	andi	r24, 0xDF	; 223
     54a:	03 c0       	rjmp	.+6      	; 0x552 <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     54c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     550:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     552:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     556:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     558:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     55c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     55e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     562:	08 95       	ret
     564:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     568:	8f 7d       	andi	r24, 0xDF	; 223
     56a:	f9 cf       	rjmp	.-14     	; 0x55e <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     56c:	84 b5       	in	r24, 0x24	; 36
     56e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     570:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     572:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     574:	84 b5       	in	r24, 0x24	; 36
     576:	8f 7d       	andi	r24, 0xDF	; 223
     578:	fb cf       	rjmp	.-10     	; 0x570 <turnOffPWM+0x48>

0000057a <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	ee 5e       	subi	r30, 0xEE	; 238
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     58a:	f9 01       	movw	r30, r18
     58c:	e5 50       	subi	r30, 0x05	; 5
     58e:	fd 4f       	sbci	r31, 0xFD	; 253
     590:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     592:	f9 01       	movw	r30, r18
     594:	ec 51       	subi	r30, 0x1C	; 28
     596:	fd 4f       	sbci	r31, 0xFD	; 253
     598:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     59a:	cc 23       	and	r28, r28
     59c:	a1 f0       	breq	.+40     	; 0x5c6 <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     59e:	81 11       	cpse	r24, r1
     5a0:	0e 94 94 02 	call	0x528	; 0x528 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     5a4:	ec 2f       	mov	r30, r28
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	e0 53       	subi	r30, 0x30	; 48
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	a5 91       	lpm	r26, Z+
     5b2:	b4 91       	lpm	r27, Z
     5b4:	ec 91       	ld	r30, X
     5b6:	ed 23       	and	r30, r29
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <digitalRead+0x46>
     5be:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fa cf       	rjmp	.-12     	; 0x5c0 <digitalRead+0x46>

000005cc <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     5d2:	28 2f       	mov	r18, r24
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	ee 5e       	subi	r30, 0xEE	; 238
     5da:	fd 4f       	sbci	r31, 0xFD	; 253
     5dc:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     5de:	f9 01       	movw	r30, r18
     5e0:	e5 50       	subi	r30, 0x05	; 5
     5e2:	fd 4f       	sbci	r31, 0xFD	; 253
     5e4:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     5e6:	f9 01       	movw	r30, r18
     5e8:	ec 51       	subi	r30, 0x1C	; 28
     5ea:	fd 4f       	sbci	r31, 0xFD	; 253
     5ec:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     5ee:	cc 23       	and	r28, r28
     5f0:	a9 f0       	breq	.+42     	; 0x61c <digitalWrite+0x50>
     5f2:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5f4:	81 11       	cpse	r24, r1
     5f6:	0e 94 94 02 	call	0x528	; 0x528 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     5fa:	ec 2f       	mov	r30, r28
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	e6 52       	subi	r30, 0x26	; 38
     604:	fd 4f       	sbci	r31, 0xFD	; 253
     606:	a5 91       	lpm	r26, Z+
     608:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     60a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     60c:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     60e:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     610:	11 11       	cpse	r17, r1
     612:	08 c0       	rjmp	.+16     	; 0x624 <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     614:	d0 95       	com	r29
     616:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     618:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     61a:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     624:	de 2b       	or	r29, r30
     626:	f8 cf       	rjmp	.-16     	; 0x618 <digitalWrite+0x4c>

00000628 <TwoWire::begin() [clone .constprop.43]>:
_ZN7TwoWire5beginEv.constprop.43():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     628:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     62c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     630:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     634:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     638:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     642:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	82 e1       	ldi	r24, 0x12	; 18
     64a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	83 e1       	ldi	r24, 0x13	; 19
     652:	0e 94 e6 02 	call	0x5cc	; 0x5cc <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     656:	e9 eb       	ldi	r30, 0xB9	; 185
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	8e 7f       	andi	r24, 0xFE	; 254
     65e:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     660:	80 81       	ld	r24, Z
     662:	8d 7f       	andi	r24, 0xFD	; 253
     664:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     666:	88 e4       	ldi	r24, 0x48	; 72
     668:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     66c:	85 e4       	ldi	r24, 0x45	; 69
     66e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     672:	81 e3       	ldi	r24, 0x31	; 49
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <twi_onSlaveTransmit+0x1>
     67a:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     67e:	82 e3       	ldi	r24, 0x32	; 50
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <twi_onSlaveReceive+0x1>
     686:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.43():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     68a:	08 95       	ret

0000068c <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	fc 01       	movw	r30, r24
     694:	e5 50       	subi	r30, 0x05	; 5
     696:	fd 4f       	sbci	r31, 0xFD	; 253
     698:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     69a:	8c 51       	subi	r24, 0x1C	; 28
     69c:	9d 4f       	sbci	r25, 0xFD	; 253
     69e:	fc 01       	movw	r30, r24
     6a0:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     6a2:	88 23       	and	r24, r24
     6a4:	c9 f0       	breq	.+50     	; 0x6d8 <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	fc 01       	movw	r30, r24
     6ae:	e8 5f       	subi	r30, 0xF8	; 248
     6b0:	fd 4f       	sbci	r31, 0xFD	; 253
     6b2:	a5 91       	lpm	r26, Z+
     6b4:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     6b6:	fc 01       	movw	r30, r24
     6b8:	e6 52       	subi	r30, 0x26	; 38
     6ba:	fd 4f       	sbci	r31, 0xFD	; 253
     6bc:	c5 91       	lpm	r28, Z+
     6be:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     6c0:	61 11       	cpse	r22, r1
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     6c4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     6c6:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     6c8:	8c 91       	ld	r24, X
     6ca:	20 95       	com	r18
     6cc:	82 23       	and	r24, r18
     6ce:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     6d0:	88 81       	ld	r24, Y
     6d2:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     6d4:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     6d6:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     6de:	62 30       	cpi	r22, 0x02	; 2
     6e0:	51 f4       	brne	.+20     	; 0x6f6 <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     6e2:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     6e4:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     6e6:	3c 91       	ld	r19, X
     6e8:	82 2f       	mov	r24, r18
     6ea:	80 95       	com	r24
     6ec:	83 23       	and	r24, r19
     6ee:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     6f0:	e8 81       	ld	r30, Y
     6f2:	2e 2b       	or	r18, r30
     6f4:	ef cf       	rjmp	.-34     	; 0x6d4 <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     6f6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     6f8:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     6fa:	ec 91       	ld	r30, X
     6fc:	2e 2b       	or	r18, r30
     6fe:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     700:	8f bf       	out	0x3f, r24	; 63
     702:	ea cf       	rjmp	.-44     	; 0x6d8 <pinMode+0x4c>

00000704 <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	91 05       	cpc	r25, r1
     708:	39 f0       	breq	.+14     	; 0x718 <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     712:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     718:	08 95       	ret

0000071a <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     71a:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     71c:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     71e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_overflow_count>
     722:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_overflow_count+0x1>
     726:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_overflow_count+0x2>
     72a:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     72e:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     730:	a8 9b       	sbis	0x15, 0	; 21
     732:	05 c0       	rjmp	.+10     	; 0x73e <micros+0x24>
     734:	2f 3f       	cpi	r18, 0xFF	; 255
     736:	19 f0       	breq	.+6      	; 0x73e <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	a1 1d       	adc	r26, r1
     73c:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     73e:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     740:	ba 2f       	mov	r27, r26
     742:	a9 2f       	mov	r26, r25
     744:	98 2f       	mov	r25, r24
     746:	88 27       	eor	r24, r24
     748:	bc 01       	movw	r22, r24
     74a:	cd 01       	movw	r24, r26
     74c:	62 0f       	add	r22, r18
     74e:	71 1d       	adc	r23, r1
     750:	81 1d       	adc	r24, r1
     752:	91 1d       	adc	r25, r1
     754:	42 e0       	ldi	r20, 0x02	; 2
     756:	66 0f       	add	r22, r22
     758:	77 1f       	adc	r23, r23
     75a:	88 1f       	adc	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	4a 95       	dec	r20
     760:	d1 f7       	brne	.-12     	; 0x756 <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     762:	08 95       	ret

00000764 <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     778:	0e 94 8d 03 	call	0x71a	; 0x71a <micros>
     77c:	4b 01       	movw	r8, r22
     77e:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     780:	c1 14       	cp	r12, r1
     782:	d1 04       	cpc	r13, r1
     784:	e1 04       	cpc	r14, r1
     786:	f1 04       	cpc	r15, r1
     788:	b9 f0       	breq	.+46     	; 0x7b8 <delay+0x54>
     78a:	0e 94 8d 03 	call	0x71a	; 0x71a <micros>
     78e:	68 19       	sub	r22, r8
     790:	79 09       	sbc	r23, r9
     792:	8a 09       	sbc	r24, r10
     794:	9b 09       	sbc	r25, r11
     796:	68 3e       	cpi	r22, 0xE8	; 232
     798:	73 40       	sbci	r23, 0x03	; 3
     79a:	81 05       	cpc	r24, r1
     79c:	91 05       	cpc	r25, r1
     79e:	80 f3       	brcs	.-32     	; 0x780 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	c2 1a       	sub	r12, r18
     7a4:	d1 08       	sbc	r13, r1
     7a6:	e1 08       	sbc	r14, r1
     7a8:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     7aa:	88 ee       	ldi	r24, 0xE8	; 232
     7ac:	88 0e       	add	r8, r24
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	98 1e       	adc	r9, r24
     7b2:	a1 1c       	adc	r10, r1
     7b4:	b1 1c       	adc	r11, r1
     7b6:	e4 cf       	rjmp	.-56     	; 0x780 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	cf 90       	pop	r12
     7c0:	bf 90       	pop	r11
     7c2:	af 90       	pop	r10
     7c4:	9f 90       	pop	r9
     7c6:	8f 90       	pop	r8
     7c8:	08 95       	ret

000007ca <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7ca:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7cc:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7ce:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <timer0_millis>
     7d2:	70 91 5e 03 	lds	r23, 0x035E	; 0x80035e <timer0_millis+0x1>
     7d6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <timer0_millis+0x2>
     7da:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7de:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     7e0:	08 95       	ret

000007e2 <DFRobotDFPlayerMini::available() [clone .constprop.60]>:
_ZN19DFRobotDFPlayerMini9availableEv.constprop.60():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     7e6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <myDFPlayer>
     7ea:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <myDFPlayer+0x1>
     7ee:	dc 01       	movw	r26, r24
     7f0:	ed 91       	ld	r30, X+
     7f2:	fc 91       	ld	r31, X
     7f4:	00 84       	ldd	r0, Z+8	; 0x08
     7f6:	f1 85       	ldd	r31, Z+9	; 0x09
     7f8:	e0 2d       	mov	r30, r0
     7fa:	09 95       	icall
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f4       	brne	.+2      	; 0x802 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x20>
     800:	d7 c0       	rjmp	.+430    	; 0x9b0 <__stack+0xb1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	cb 01       	movw	r24, r22
     808:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     80c:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <myDFPlayer+0x1e>
     810:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <myDFPlayer>
     814:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     818:	dc 01       	movw	r26, r24
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	02 84       	ldd	r0, Z+10	; 0x0a
     820:	f3 85       	ldd	r31, Z+11	; 0x0b
     822:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     824:	21 11       	cpse	r18, r1
     826:	0b c0       	rjmp	.+22     	; 0x83e <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x5c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     828:	09 95       	icall
     82a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     82e:	8e 37       	cpi	r24, 0x7E	; 126
     830:	d1 f6       	brne	.-76     	; 0x7e6 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     832:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <myDFPlayer+0x1e>
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <myDFPlayer+0x1e>
     83c:	d4 cf       	rjmp	.-88     	; 0x7e6 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     83e:	09 95       	icall
     840:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <myDFPlayer+0x1e>
     844:	e9 2f       	mov	r30, r25
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	e6 5b       	subi	r30, 0xB6	; 182
     84a:	fa 4f       	sbci	r31, 0xFA	; 250
     84c:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     84e:	92 30       	cpi	r25, 0x02	; 2
     850:	b9 f0       	breq	.+46     	; 0x880 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x9e>
     852:	99 30       	cpi	r25, 0x09	; 9
     854:	d9 f0       	breq	.+54     	; 0x88c <DFRobotDFPlayerMini::available() [clone .constprop.60]+0xaa>
     856:	91 30       	cpi	r25, 0x01	; 1
     858:	a9 f4       	brne	.+42     	; 0x884 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0xa2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     85a:	8f 3f       	cpi	r24, 0xFF	; 255
     85c:	99 f0       	breq	.+38     	; 0x884 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0xa2>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     85e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     868:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myDFPlayer+0x23>
     86c:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     870:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     874:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myDFPlayer+0x25>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.60():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     878:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     880:	86 30       	cpi	r24, 0x06	; 6
     882:	69 f7       	brne	.-38     	; 0x85e <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     884:	9f 5f       	subi	r25, 0xFF	; 255
     886:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <myDFPlayer+0x1e>
     88a:	ad cf       	rjmp	.-166    	; 0x7e6 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     88c:	8f 3e       	cpi	r24, 0xEF	; 239
     88e:	39 f7       	brne	.-50     	; 0x85e <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x7c>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     890:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <myDFPlayer+0xc>
     894:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <myDFPlayer+0xb>
     898:	28 0f       	add	r18, r24
     89a:	33 27       	eor	r19, r19
     89c:	33 1f       	adc	r19, r19
     89e:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <myDFPlayer+0xd>
     8a2:	c9 01       	movw	r24, r18
     8a4:	8e 0f       	add	r24, r30
     8a6:	91 1d       	adc	r25, r1
     8a8:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <myDFPlayer+0xe>
     8ac:	28 0f       	add	r18, r24
     8ae:	39 2f       	mov	r19, r25
     8b0:	31 1d       	adc	r19, r1
     8b2:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <myDFPlayer+0xf>
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	24 0f       	add	r18, r20
     8ba:	35 1f       	adc	r19, r21
     8bc:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <myDFPlayer+0x10>
     8c0:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     8c2:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <myDFPlayer+0x11>
     8c6:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     8c8:	76 2f       	mov	r23, r22
     8ca:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8cc:	f0 91 5c 05 	lds	r31, 0x055C	; 0x80055c <myDFPlayer+0x12>
     8d0:	6f 0f       	add	r22, r31
     8d2:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     8d4:	28 0f       	add	r18, r24
     8d6:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     8d8:	31 95       	neg	r19
     8da:	21 95       	neg	r18
     8dc:	31 09       	sbc	r19, r1
_ZN19DFRobotDFPlayerMini9availableEv.constprop.60():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     8de:	62 17       	cp	r22, r18
     8e0:	73 07       	cpc	r23, r19
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x104>
     8e4:	bc cf       	rjmp	.-136    	; 0x85e <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x7c>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     8e6:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     8ea:	e1 34       	cpi	r30, 0x41	; 65
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x112>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     8ee:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myDFPlayer+0x25>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <__stack+0x53>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     8f4:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     8f8:	54 2f       	mov	r21, r20
     8fa:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     8fc:	84 0f       	add	r24, r20
     8fe:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     900:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <myDFPlayer+0x23>
     904:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     908:	ea 53       	subi	r30, 0x3A	; 58
     90a:	e6 31       	cpi	r30, 0x16	; 22
     90c:	08 f0       	brcs	.+2      	; 0x910 <__stack+0x11>
     90e:	46 c0       	rjmp	.+140    	; 0x99c <__stack+0x9d>
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	e3 57       	subi	r30, 0x73	; 115
     914:	fb 4f       	sbci	r31, 0xFB	; 251
     916:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__tablejump2__>
     91a:	ba 04       	cpc	r11, r10
     91c:	c2 04       	cpc	r12, r2
     91e:	cc 04       	cpc	r12, r12
     920:	a3 04       	cpc	r10, r3
     922:	cc 04       	cpc	r12, r12
     924:	ac 04       	cpc	r10, r12
     926:	ca 04       	cpc	r12, r10
     928:	ce 04       	cpc	r12, r14
     92a:	cc 04       	cpc	r12, r12
     92c:	cc 04       	cpc	r12, r12
     92e:	cc 04       	cpc	r12, r12
     930:	cc 04       	cpc	r12, r12
     932:	cc 04       	cpc	r12, r12
     934:	cc 04       	cpc	r12, r12
     936:	cc 04       	cpc	r12, r12
     938:	cc 04       	cpc	r12, r12
     93a:	ce 04       	cpc	r12, r14
     93c:	cc 04       	cpc	r12, r12
     93e:	cc 04       	cpc	r12, r12
     940:	cc 04       	cpc	r12, r12
     942:	cc 04       	cpc	r12, r12
     944:	cc 04       	cpc	r12, r12
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     946:	85 e0       	ldi	r24, 0x05	; 5
     948:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myDFPlayer+0x24>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.60():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     952:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <myDFPlayer+0x24>
     956:	91 cf       	rjmp	.-222    	; 0x87a <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x98>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     958:	80 ff       	sbrs	r24, 0
     95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     95c:	89 e0       	ldi	r24, 0x09	; 9
     95e:	f4 cf       	rjmp	.-24     	; 0x948 <__stack+0x49>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     960:	81 ff       	sbrs	r24, 1
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	f0 cf       	rjmp	.-32     	; 0x948 <__stack+0x49>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     968:	83 70       	andi	r24, 0x03	; 3
     96a:	99 27       	eor	r25, r25
     96c:	89 2b       	or	r24, r25
     96e:	89 f3       	breq	.-30     	; 0x952 <__stack+0x53>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	ea cf       	rjmp	.-44     	; 0x948 <__stack+0x49>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     974:	80 ff       	sbrs	r24, 0
     976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x7d>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     978:	87 e0       	ldi	r24, 0x07	; 7
     97a:	e6 cf       	rjmp	.-52     	; 0x948 <__stack+0x49>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     97c:	81 ff       	sbrs	r24, 1
     97e:	e9 cf       	rjmp	.-46     	; 0x952 <__stack+0x53>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	e2 cf       	rjmp	.-60     	; 0x948 <__stack+0x49>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     984:	80 ff       	sbrs	r24, 0
     986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     988:	88 e0       	ldi	r24, 0x08	; 8
     98a:	de cf       	rjmp	.-68     	; 0x948 <__stack+0x49>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     98c:	81 ff       	sbrs	r24, 1
     98e:	e1 cf       	rjmp	.-62     	; 0x952 <__stack+0x53>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	da cf       	rjmp	.-76     	; 0x948 <__stack+0x49>
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	d8 cf       	rjmp	.-80     	; 0x948 <__stack+0x49>
     998:	8b e0       	ldi	r24, 0x0B	; 11
     99a:	d6 cf       	rjmp	.-84     	; 0x948 <__stack+0x49>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     9a2:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myDFPlayer+0x23>
     9a6:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     9aa:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myDFPlayer+0x24>
     9ae:	9f cf       	rjmp	.-194    	; 0x8ee <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x10c>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.60():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     9b0:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <myDFPlayer+0x25>
     9b4:	88 23       	and	r24, r24
     9b6:	69 f2       	breq	.-102    	; 0x952 <__stack+0x53>
     9b8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
     9bc:	00 91 4c 05 	lds	r16, 0x054C	; 0x80054c <myDFPlayer+0x2>
     9c0:	10 91 4d 05 	lds	r17, 0x054D	; 0x80054d <myDFPlayer+0x3>
     9c4:	20 91 4e 05 	lds	r18, 0x054E	; 0x80054e <myDFPlayer+0x4>
     9c8:	30 91 4f 05 	lds	r19, 0x054F	; 0x80054f <myDFPlayer+0x5>
     9cc:	60 1b       	sub	r22, r16
     9ce:	71 0b       	sbc	r23, r17
     9d0:	82 0b       	sbc	r24, r18
     9d2:	93 0b       	sbc	r25, r19
     9d4:	00 91 50 05 	lds	r16, 0x0550	; 0x800550 <myDFPlayer+0x6>
     9d8:	10 91 51 05 	lds	r17, 0x0551	; 0x800551 <myDFPlayer+0x7>
     9dc:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <myDFPlayer+0x8>
     9e0:	30 91 53 05 	lds	r19, 0x0553	; 0x800553 <myDFPlayer+0x9>
     9e4:	60 17       	cp	r22, r16
     9e6:	71 07       	cpc	r23, r17
     9e8:	82 07       	cpc	r24, r18
     9ea:	93 07       	cpc	r25, r19
     9ec:	08 f4       	brcc	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	b1 cf       	rjmp	.-158    	; 0x952 <__stack+0x53>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     9f0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     9f4:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     9f8:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myDFPlayer+0x23>
     9fc:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	36 cf       	rjmp	.-404    	; 0x870 <DFRobotDFPlayerMini::available() [clone .constprop.60]+0x8e>

00000a04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>:
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.58():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     a04:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     a08:	27 2f       	mov	r18, r23
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	70 93 63 05 	sts	0x0563, r23	; 0x800563 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     a10:	60 93 64 05 	sts	0x0564, r22	; 0x800564 <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     a14:	40 91 60 05 	lds	r20, 0x0560	; 0x800560 <myDFPlayer+0x16>
     a18:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <myDFPlayer+0x15>
     a1c:	49 0f       	add	r20, r25
     a1e:	55 27       	eor	r21, r21
     a20:	55 1f       	adc	r21, r21
     a22:	84 0f       	add	r24, r20
     a24:	95 2f       	mov	r25, r21
     a26:	91 1d       	adc	r25, r1
     a28:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <myDFPlayer+0x18>
     a2c:	84 0f       	add	r24, r20
     a2e:	91 1d       	adc	r25, r1
     a30:	82 0f       	add	r24, r18
     a32:	93 1f       	adc	r25, r19
     a34:	68 0f       	add	r22, r24
     a36:	79 2f       	mov	r23, r25
     a38:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     a3a:	71 95       	neg	r23
     a3c:	61 95       	neg	r22
     a3e:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     a40:	70 93 65 05 	sts	0x0565, r23	; 0x800565 <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     a44:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     a48:	44 23       	and	r20, r20
     a4a:	61 f0       	breq	.+24     	; 0xa64 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     a4c:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <myDFPlayer+0x25>
     a50:	88 23       	and	r24, r24
     a52:	41 f0       	breq	.+16     	; 0xa64 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	cb 01       	movw	r24, r22
     a5a:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     a5e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DFRobotDFPlayerMini::available() [clone .constprop.60]>
     a62:	f4 cf       	rjmp	.-24     	; 0xa4c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     a64:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <myDFPlayer>
     a68:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <myDFPlayer+0x1>
     a6c:	dc 01       	movw	r26, r24
     a6e:	ed 91       	ld	r30, X+
     a70:	fc 91       	ld	r31, X
     a72:	02 80       	ldd	r0, Z+2	; 0x02
     a74:	f3 81       	ldd	r31, Z+3	; 0x03
     a76:	e0 2d       	mov	r30, r0
     a78:	4a e0       	ldi	r20, 0x0A	; 10
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	6e e5       	ldi	r22, 0x5E	; 94
     a7e:	75 e0       	ldi	r23, 0x05	; 5
     a80:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     a82:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
     a86:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <myDFPlayer+0x2>
     a8a:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <myDFPlayer+0x3>
     a8e:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <myDFPlayer+0x4>
     a92:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     a96:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <myDFPlayer+0x18>
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	81 11       	cpse	r24, r1
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]+0x9e>
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     aa6:	81 11       	cpse	r24, r1
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     aaa:	6a e0       	ldi	r22, 0x0A	; 10
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0c 94 b2 03 	jmp	0x764	; 0x764 <delay>
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.58():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     ab6:	08 95       	ret

00000ab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>:
_ZN19DFRobotDFPlayerMini10playFolderEhh.constprop.24():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     ab8:	78 2f       	mov	r23, r24
     aba:	8f e0       	ldi	r24, 0x0F	; 15
     abc:	0c 94 02 05 	jmp	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>

00000ac0 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     ac0:	08 95       	ret

00000ac2 <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     ac2:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <SoftwareSerial::active_object>
     ac6:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <SoftwareSerial::active_object+0x1>
     aca:	28 17       	cp	r18, r24
     acc:	39 07       	cpc	r19, r25
     ace:	71 f4       	brne	.+28     	; 0xaec <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     ad0:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
     ad4:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
     ad8:	98 17       	cp	r25, r24
     ada:	41 f0       	breq	.+16     	; 0xaec <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     adc:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	e4 5e       	subi	r30, 0xE4	; 228
     ae4:	fc 4f       	sbci	r31, 0xFC	; 252
     ae6:	80 81       	ld	r24, Z
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     af0:	08 95       	ret

00000af2 <SoftwareSerial::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     af2:	08 95       	ret

00000af4 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     b02:	5c 96       	adiw	r26, 0x1c	; 28
     b04:	ed 90       	ld	r14, X+
     b06:	fc 90       	ld	r15, X
     b08:	5d 97       	sbiw	r26, 0x1d	; 29
     b0a:	e1 14       	cp	r14, r1
     b0c:	f1 04       	cpc	r15, r1
     b0e:	79 f4       	brne	.+30     	; 0xb2e <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	9c 93       	st	X, r25
     b18:	8e 93       	st	-X, r24
     b1a:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     b2e:	51 96       	adiw	r26, 0x11	; 17
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     b36:	50 96       	adiw	r26, 0x10	; 16
     b38:	8c 91       	ld	r24, X
     b3a:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     b3c:	98 2f       	mov	r25, r24
     b3e:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     b40:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     b42:	5e 96       	adiw	r26, 0x1e	; 30
     b44:	2c 91       	ld	r18, X
     b46:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     b48:	12 2f       	mov	r17, r18
     b4a:	12 70       	andi	r17, 0x02	; 2
     b4c:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     b4e:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     b50:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     b52:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     b54:	11 23       	and	r17, r17
     b56:	19 f1       	breq	.+70     	; 0xb9e <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     b58:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     b5a:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b5c:	e7 01       	movw	r28, r14
     b5e:	21 97       	sbiw	r28, 0x01	; 1
     b60:	f1 f7       	brne	.-4      	; 0xb5e <SoftwareSerial::write(unsigned char)+0x6a>
     b62:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b64:	46 2f       	mov	r20, r22
     b66:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b68:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     b6a:	60 ff       	sbrs	r22, 0
     b6c:	1a c0       	rjmp	.+52     	; 0xba2 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     b6e:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     b70:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b72:	e7 01       	movw	r28, r14
     b74:	21 97       	sbiw	r28, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     b78:	ba 01       	movw	r22, r20
     b7a:	75 95       	asr	r23
     b7c:	67 95       	ror	r22
     b7e:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     b80:	89 f7       	brne	.-30     	; 0xb64 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     b82:	11 23       	and	r17, r17
     b84:	81 f0       	breq	.+32     	; 0xba6 <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     b86:	80 81       	ld	r24, Z
     b88:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     b8a:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     b8c:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b8e:	5c 96       	adiw	r26, 0x1c	; 28
     b90:	8d 91       	ld	r24, X+
     b92:	9c 91       	ld	r25, X
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	c1 cf       	rjmp	.-126    	; 0xb20 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     b9e:	29 23       	and	r18, r25
     ba0:	dc cf       	rjmp	.-72     	; 0xb5a <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     ba2:	39 23       	and	r19, r25
     ba4:	e5 cf       	rjmp	.-54     	; 0xb70 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     ba6:	90 81       	ld	r25, Z
     ba8:	89 2b       	or	r24, r25
     baa:	ef cf       	rjmp	.-34     	; 0xb8a <SoftwareSerial::write(unsigned char)+0x96>

00000bac <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     bac:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <SoftwareSerial::active_object>
     bb0:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <SoftwareSerial::active_object+0x1>
     bb4:	28 17       	cp	r18, r24
     bb6:	39 07       	cpc	r19, r25
     bb8:	71 f4       	brne	.+28     	; 0xbd6 <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     bba:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
     bbe:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	80 5c       	subi	r24, 0xC0	; 192
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	82 1b       	sub	r24, r18
     bca:	91 09       	sbc	r25, r1
     bcc:	60 e4       	ldi	r22, 0x40	; 64
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	0e 94 26 24 	call	0x484c	; 0x484c <__divmodhi4>
     bd4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     bda:	08 95       	ret

00000bdc <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     bdc:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <SoftwareSerial::active_object>
     be0:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <SoftwareSerial::active_object+0x1>
     be4:	28 17       	cp	r18, r24
     be6:	39 07       	cpc	r19, r25
     be8:	b9 f4       	brne	.+46     	; 0xc18 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     bea:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
     bee:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
     bf2:	98 17       	cp	r25, r24
     bf4:	89 f0       	breq	.+34     	; 0xc18 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     bf6:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e4 5e       	subi	r30, 0xE4	; 228
     bfe:	fc 4f       	sbci	r31, 0xFC	; 252
     c00:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     c02:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	2f 73       	andi	r18, 0x3F	; 63
     c0e:	33 27       	eor	r19, r19
     c10:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     c1c:	08 95       	ret

00000c1e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j.part.1():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:95
 *            ensure the content of this buffer doesn't change.
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ea 01       	movw	r28, r20
     c26:	12 2f       	mov	r17, r18
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:121
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
     c28:	dc 01       	movw	r26, r24
     c2a:	11 96       	adiw	r26, 0x01	; 1
     c2c:	8d 91       	ld	r24, X+
     c2e:	9c 91       	ld	r25, X
     c30:	dc 01       	movw	r26, r24
     c32:	ed 91       	ld	r30, X+
     c34:	fc 91       	ld	r31, X
     c36:	02 80       	ldd	r0, Z+2	; 0x02
     c38:	f3 81       	ldd	r31, Z+3	; 0x03
     c3a:	e0 2d       	mov	r30, r0
     c3c:	09 95       	icall
     c3e:	c8 17       	cp	r28, r24
     c40:	d9 07       	cpc	r29, r25
     c42:	29 f4       	brne	.+10     	; 0xc4e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]+0x30>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
     c44:	81 2f       	mov	r24, r17
     c46:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	81 11       	cpse	r24, r1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:125
  // Write the data itself
  if (_wire->write(buffer, len) != len) {
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice failed to write"));
#endif
    return false;
     c4e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:166
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     c50:	89 2f       	mov	r24, r25
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:62
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ec 01       	movw	r28, r24
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	88 23       	and	r24, r24
     c64:	a1 f0       	breq	.+40     	; 0xc8e <Adafruit_I2CDevice::detected()+0x34>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:69
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
     c66:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     c6e:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c72:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     c76:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:70
  if (_wire->endTransmission() == 0) {
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	81 11       	cpse	r24, r1
     c84:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:80
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
     c86:	89 2f       	mov	r24, r25
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
     c8e:	0e 94 14 03 	call	0x628	; 0x628 <TwoWire::begin() [clone .constprop.43]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Adafruit_I2CDevice::detected()>
     c9c:	98 2f       	mov	r25, r24
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     c9e:	81 11       	cpse	r24, r1
     ca0:	e2 cf       	rjmp	.-60     	; 0xc66 <Adafruit_I2CDevice::detected()+0xc>
     ca2:	f1 cf       	rjmp	.-30     	; 0xc86 <Adafruit_I2CDevice::detected()+0x2c>

00000ca4 <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     ca4:	85 ed       	ldi	r24, 0xD5	; 213
     ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     caa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     cae:	84 fd       	sbrc	r24, 4
     cb0:	fc cf       	rjmp	.-8      	; 0xcaa <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     cb2:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     cb6:	08 95       	ret

00000cb8 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     cb8:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <twi_txBufferLength>
     cbc:	26 0f       	add	r18, r22
     cbe:	33 27       	eor	r19, r19
     cc0:	33 1f       	adc	r19, r19
     cc2:	21 32       	cpi	r18, 0x21	; 33
     cc4:	31 05       	cpc	r19, r1
     cc6:	ec f4       	brge	.+58     	; 0xd02 <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     cc8:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <twi_state>
     ccc:	fc 01       	movw	r30, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	24 30       	cpi	r18, 0x04	; 4
     cd4:	69 f0       	breq	.+26     	; 0xcf0 <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     cd6:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     cd8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     cda:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_txBufferLength>
     cde:	21 91       	ld	r18, Z+
     ce0:	ac 01       	movw	r20, r24
     ce2:	47 52       	subi	r20, 0x27	; 39
     ce4:	5d 4f       	sbci	r21, 0xFD	; 253
     ce6:	a4 0f       	add	r26, r20
     ce8:	b5 2f       	mov	r27, r21
     cea:	b1 1d       	adc	r27, r1
     cec:	2c 93       	st	X, r18
     cee:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     cf0:	86 17       	cp	r24, r22
     cf2:	98 f3       	brcs	.-26     	; 0xcda <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     cf4:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <twi_txBufferLength>
     cf8:	68 0f       	add	r22, r24
     cfa:	60 93 f9 02 	sts	0x02F9, r22	; 0x8002f9 <twi_txBufferLength>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	08 95       	ret

00000d06 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     d06:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <TwoWire::rxBufferIndex>
     d0a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <TwoWire::rxBufferLength>
     d0e:	e8 17       	cp	r30, r24
     d10:	30 f4       	brcc	.+12     	; 0xd1e <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	e5 5c       	subi	r30, 0xC5	; 197
     d16:	fb 4f       	sbci	r31, 0xFB	; 251
     d18:	80 81       	ld	r24, Z
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     d22:	08 95       	ret

00000d24 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     d24:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <TwoWire::rxBufferIndex>
     d28:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     d30:	98 17       	cp	r25, r24
     d32:	48 f4       	brcc	.+18     	; 0xd46 <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     d34:	e9 2f       	mov	r30, r25
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	e5 5c       	subi	r30, 0xC5	; 197
     d3a:	fb 4f       	sbci	r31, 0xFB	; 251
     d3c:	20 81       	ld	r18, Z
     d3e:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     d40:	9f 5f       	subi	r25, 0xFF	; 255
     d42:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     d46:	c9 01       	movw	r24, r18
     d48:	08 95       	ret

00000d4a <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     d4a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <TwoWire::rxBufferLength>
     d4e:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     d52:	89 1b       	sub	r24, r25
     d54:	99 0b       	sbc	r25, r25
     d56:	08 95       	ret

00000d58 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	7c 01       	movw	r14, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     d6e:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <TwoWire::transmitting>
     d72:	22 23       	and	r18, r18
     d74:	89 f0       	breq	.+34     	; 0xd98 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     d76:	eb 01       	movw	r28, r22
     d78:	6b 01       	movw	r12, r22
     d7a:	c4 0e       	add	r12, r20
     d7c:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     d7e:	cc 15       	cp	r28, r12
     d80:	dd 05       	cpc	r29, r13
     d82:	69 f0       	breq	.+26     	; 0xd9e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     d84:	69 91       	ld	r22, Y+
     d86:	d7 01       	movw	r26, r14
     d88:	ed 91       	ld	r30, X+
     d8a:	fc 91       	ld	r31, X
     d8c:	01 90       	ld	r0, Z+
     d8e:	f0 81       	ld	r31, Z
     d90:	e0 2d       	mov	r30, r0
     d92:	c7 01       	movw	r24, r14
     d94:	09 95       	icall
     d96:	f3 cf       	rjmp	.-26     	; 0xd7e <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     d98:	64 2f       	mov	r22, r20
     d9a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     d9e:	c8 01       	movw	r24, r16
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	08 95       	ret

00000db2 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	1f 92       	push	r1
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     dbe:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <TwoWire::transmitting>
     dc2:	22 23       	and	r18, r18
     dc4:	f9 f0       	breq	.+62     	; 0xe04 <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     dc6:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <TwoWire::txBufferLength>
     dca:	20 32       	cpi	r18, 0x20	; 32
     dcc:	58 f0       	brcs	.+22     	; 0xde4 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	33 83       	std	Z+3, r19	; 0x03
     dd6:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     de4:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <TwoWire::txBufferIndex>
     de8:	e8 2f       	mov	r30, r24
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	ec 57       	subi	r30, 0x7C	; 124
     dee:	fb 4f       	sbci	r31, 0xFB	; 251
     df0:	99 81       	ldd	r25, Y+1	; 0x01
     df2:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     dfa:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	ec cf       	rjmp	.-40     	; 0xddc <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <twi_transmit>
     e0e:	f7 cf       	rjmp	.-18     	; 0xdfe <TwoWire::write(unsigned char)+0x4c>

00000e10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     e10:	fc 01       	movw	r30, r24
     e12:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     e14:	31 e0       	ldi	r19, 0x01	; 1
     e16:	30 93 82 04 	sts	0x0482, r19	; 0x800482 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     e1a:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     e1e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     e22:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     e26:	83 85       	ldd	r24, Z+11	; 0x0b
     e28:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     e2a:	84 ee       	ldi	r24, 0xE4	; 228
     e2c:	94 e0       	ldi	r25, 0x04	; 4
     e2e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <TwoWire::write(unsigned char)>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>

00000e38 <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	8c 01       	movw	r16, r24
     e40:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     e42:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     e46:	6c 2f       	mov	r22, r28
     e48:	64 60       	ori	r22, 0x04	; 4
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 82 03 	call	0x704	; 0x704 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     e58:	6c 2f       	mov	r22, r28
     e5a:	6b 7f       	andi	r22, 0xFB	; 251
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     e62:	82 e3       	ldi	r24, 0x32	; 50
     e64:	90 e0       	ldi	r25, 0x00	; 0
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     e6c:	0c 94 82 03 	jmp	0x704	; 0x704 <delayMicroseconds>

00000e70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	8c 01       	movw	r16, r24
     e7a:	d6 2f       	mov	r29, r22
     e7c:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     e7e:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     e80:	64 2b       	or	r22, r20
     e82:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     e86:	80 e1       	ldi	r24, 0x10	; 16
     e88:	d8 9f       	mul	r29, r24
     e8a:	b0 01       	movw	r22, r0
     e8c:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     e8e:	6c 2b       	or	r22, r28
     e90:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     e9a:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000e9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>:
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     eb2:	98 e0       	ldi	r25, 0x08	; 8
     eb4:	e3 e1       	ldi	r30, 0x13	; 19
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	de 01       	movw	r26, r28
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	01 90       	ld	r0, Z+
     ebe:	0d 92       	st	X+, r0
     ec0:	9a 95       	dec	r25
     ec2:	e1 f7       	brne	.-8      	; 0xebc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     ec4:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <lcd+0x8>
     ec8:	96 17       	cp	r25, r22
     eca:	08 f4       	brcc	.+2      	; 0xece <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     ecc:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     ece:	26 2f       	mov	r18, r22
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	22 0f       	add	r18, r18
     ed4:	33 1f       	adc	r19, r19
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	4c 0f       	add	r20, r28
     edc:	5d 1f       	adc	r21, r29
     ede:	24 0f       	add	r18, r20
     ee0:	35 1f       	adc	r19, r21
     ee2:	f9 01       	movw	r30, r18
     ee4:	60 81       	ld	r22, Z
     ee6:	68 0f       	add	r22, r24
     ee8:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	8e e3       	ldi	r24, 0x3E	; 62
     eee:	95 e0       	ldi	r25, 0x05	; 5
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     ef0:	28 96       	adiw	r28, 0x08	; 8
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     f00:	0c 94 38 07 	jmp	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00000f04 <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	08 95       	ret

00000f10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.65():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     f1e:	f8 01       	movw	r30, r16
     f20:	ec 0f       	add	r30, r28
     f22:	fd 1f       	adc	r31, r29
     f24:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     f26:	66 23       	and	r22, r22
     f28:	39 f0       	breq	.+14     	; 0xf38 <Print::print(__FlashStringHelper const*) [clone .constprop.65]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	8e e3       	ldi	r24, 0x3E	; 62
     f2e:	95 e0       	ldi	r25, 0x05	; 5
     f30:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
_ZN5Print5printEPK19__FlashStringHelper.constprop.65():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     f34:	21 96       	adiw	r28, 0x01	; 1
     f36:	f3 cf       	rjmp	.-26     	; 0xf1e <Print::print(__FlashStringHelper const*) [clone .constprop.65]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     f38:	ce 01       	movw	r24, r28
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>:
_ZN17LiquidCrystal_I2C5clearEv.constprop.64():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	8e e3       	ldi	r24, 0x3E	; 62
     f4a:	95 e0       	ldi	r25, 0x05	; 5
     f4c:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
     f50:	80 ed       	ldi	r24, 0xD0	; 208
     f52:	97 e0       	ldi	r25, 0x07	; 7
     f54:	0c 94 82 03 	jmp	0x704	; 0x704 <delayMicroseconds>

00000f58 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	08 95       	ret

00000f5e <queueButton(unsigned char)>:
_Z11queueButtonh():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:152

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
     f5e:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <buttonBufferCount>
     f62:	25 30       	cpi	r18, 0x05	; 5
     f64:	09 f0       	breq	.+2      	; 0xf68 <queueButton(unsigned char)+0xa>
     f66:	90 f4       	brcc	.+36     	; 0xf8c <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:154
  {
    buttonBuffer [button_write_pos] = button;
     f68:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <__data_end>
     f6c:	e9 2f       	mov	r30, r25
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	e1 55       	subi	r30, 0x51	; 81
     f72:	fc 4f       	sbci	r31, 0xFC	; 252
     f74:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:155
    buttonBufferCount++;
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	20 93 b5 03 	sts	0x03B5, r18	; 0x8003b5 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:156
    button_write_pos++;
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:158
    
    if (button_write_pos >= sizeof (buttonBuffer))
     f7e:	95 30       	cpi	r25, 0x05	; 5
     f80:	18 f4       	brcc	.+6      	; 0xf88 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:156
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
     f82:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <__data_end>
     f86:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:160
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
     f88:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:163
    }
  }
}
     f8c:	08 95       	ret

00000f8e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]>:
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:176
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
     f8e:	2f 92       	push	r2
     f90:	3f 92       	push	r3
     f92:	4f 92       	push	r4
     f94:	5f 92       	push	r5
     f96:	6f 92       	push	r6
     f98:	7f 92       	push	r7
     f9a:	8f 92       	push	r8
     f9c:	9f 92       	push	r9
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	6c 01       	movw	r12, r24
     fb4:	3b 01       	movw	r6, r22
     fb6:	7a 01       	movw	r14, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:177
  size_t pos = 0;
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	00 e0       	ldi	r16, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
  }
  twi_state = TWI_MRX;
     fbc:	55 24       	eor	r5, r5
     fbe:	53 94       	inc	r5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     fc0:	44 24       	eor	r4, r4
     fc2:	4a 94       	dec	r4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     fc4:	85 ee       	ldi	r24, 0xE5	; 229
     fc6:	38 2e       	mov	r3, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     fc8:	95 ec       	ldi	r25, 0xC5	; 197
     fca:	29 2e       	mov	r2, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     fcc:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <twi_state>
     fd0:	81 11       	cpse	r24, r1
     fd2:	fc cf       	rjmp	.-8      	; 0xfcc <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x3e>
     fd4:	d6 01       	movw	r26, r12
     fd6:	14 96       	adiw	r26, 0x04	; 4
     fd8:	8d 91       	ld	r24, X+
     fda:	9c 91       	ld	r25, X
     fdc:	e7 01       	movw	r28, r14
     fde:	c0 1b       	sub	r28, r16
     fe0:	d1 0b       	sbc	r29, r17
     fe2:	8c 17       	cp	r24, r28
     fe4:	9d 07       	cpc	r25, r29
     fe6:	08 f4       	brcc	.+2      	; 0xfea <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x5c>
     fe8:	ec 01       	movw	r28, r24
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:195
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
     fea:	f6 01       	movw	r30, r12
     fec:	90 81       	ld	r25, Z
     fee:	8c 2f       	mov	r24, r28
     ff0:	c1 32       	cpi	r28, 0x21	; 33
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x68>
     ff4:	80 e2       	ldi	r24, 0x20	; 32
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
     ff6:	50 92 81 04 	sts	0x0481, r5	; 0x800481 <twi_state>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:181
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	97 01       	movw	r18, r14
     ffe:	2c 1b       	sub	r18, r28
    1000:	3d 0b       	sbc	r19, r29
    1002:	02 17       	cp	r16, r18
    1004:	13 07       	cpc	r17, r19
    1006:	08 f4       	brcc	.+2      	; 0x100a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x7c>
    1008:	40 e0       	ldi	r20, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    100a:	40 93 80 04 	sts	0x0480, r20	; 0x800480 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    100e:	40 92 7f 04 	sts	0x047F, r4	; 0x80047f <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1012:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1016:	2f ef       	ldi	r18, 0xFF	; 255
    1018:	28 0f       	add	r18, r24
    101a:	20 93 7d 04 	sts	0x047D, r18	; 0x80047d <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    101e:	50 92 5c 04 	sts	0x045C, r5	; 0x80045c <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    1022:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <twi_slarw>
    1026:	99 0f       	add	r25, r25
    1028:	92 2b       	or	r25, r18
    102a:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    102e:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <twi_inRepStart>
    1032:	91 30       	cpi	r25, 0x01	; 1
    1034:	e9 f5       	brne	.+122    	; 0x10b0 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x122>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    1036:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
    103a:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <twi_slarw>
    103e:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    1042:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1046:	93 fd       	sbrc	r25, 3
    1048:	f8 cf       	rjmp	.-16     	; 0x103a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xac>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    104a:	20 92 bc 00 	sts	0x00BC, r2	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    104e:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <twi_state>
    1052:	91 30       	cpi	r25, 0x01	; 1
    1054:	e1 f3       	breq	.-8      	; 0x104e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    1056:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <twi_masterBufferIndex>
    105a:	98 17       	cp	r25, r24
    105c:	10 f4       	brcc	.+4      	; 0x1062 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xd4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    105e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <twi_masterBufferIndex>
    1062:	ad e5       	ldi	r26, 0x5D	; 93
    1064:	b4 e0       	ldi	r27, 0x04	; 4
    1066:	eb e3       	ldi	r30, 0x3B	; 59
    1068:	f4 e0       	ldi	r31, 0x04	; 4
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    106a:	90 e0       	ldi	r25, 0x00	; 0
twi_readFrom():
    106c:	98 13       	cpse	r25, r24
    106e:	23 c0       	rjmp	.+70     	; 0x10b6 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x128>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1070:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    1074:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <TwoWire::rxBufferLength>
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:198
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
#endif

  if (recv != len) {
    1078:	9c 17       	cp	r25, r28
    107a:	1d 06       	cpc	r1, r29
    107c:	d1 f5       	brne	.+116    	; 0x10f2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x164>
    107e:	43 01       	movw	r8, r6
    1080:	80 0e       	add	r8, r16
    1082:	91 1e       	adc	r9, r17
    1084:	54 01       	movw	r10, r8
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    1086:	c5 01       	movw	r24, r10
    1088:	88 19       	sub	r24, r8
    108a:	99 09       	sbc	r25, r9
    108c:	8c 17       	cp	r24, r28
    108e:	9d 07       	cpc	r25, r29
    1090:	b0 f4       	brcc	.+44     	; 0x10be <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x130>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:208
    buffer[i] = _wire->read();
    1092:	d6 01       	movw	r26, r12
    1094:	11 96       	adiw	r26, 0x01	; 1
    1096:	8d 91       	ld	r24, X+
    1098:	9c 91       	ld	r25, X
    109a:	dc 01       	movw	r26, r24
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	02 84       	ldd	r0, Z+10	; 0x0a
    10a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    10a4:	e0 2d       	mov	r30, r0
    10a6:	09 95       	icall
    10a8:	f5 01       	movw	r30, r10
    10aa:	81 93       	st	Z+, r24
    10ac:	5f 01       	movw	r10, r30
    10ae:	eb cf       	rjmp	.-42     	; 0x1086 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xf8>
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    10b0:	30 92 bc 00 	sts	0x00BC, r3	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    10b4:	cc cf       	rjmp	.-104    	; 0x104e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    10b6:	2d 91       	ld	r18, X+
    10b8:	21 93       	st	Z+, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    10ba:	9f 5f       	subi	r25, 0xFF	; 255
    10bc:	d7 cf       	rjmp	.-82     	; 0x106c <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0xde>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.83():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:184
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
    10be:	0c 0f       	add	r16, r28
    10c0:	1d 1f       	adc	r17, r29
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    10c2:	0e 15       	cp	r16, r14
    10c4:	1f 05       	cpc	r17, r15
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x13c>
    10c8:	81 cf       	rjmp	.-254    	; 0xfcc <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x3e>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:186
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:187
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	9f 90       	pop	r9
    10e2:	8f 90       	pop	r8
    10e4:	7f 90       	pop	r7
    10e6:	6f 90       	pop	r6
    10e8:	5f 90       	pop	r5
    10ea:	4f 90       	pop	r4
    10ec:	3f 90       	pop	r3
    10ee:	2f 90       	pop	r2
    10f0:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:183
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	eb cf       	rjmp	.-42     	; 0x10cc <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]+0x13e>

000010f6 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>:
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:37
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	28 97       	sbiw	r28, 0x08	; 8
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	dc 01       	movw	r26, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:38
  uint8_t buffer[8] = {0,
    1110:	8e 01       	movw	r16, r28
    1112:	0f 5f       	subi	r16, 0xFF	; 255
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	86 e0       	ldi	r24, 0x06	; 6
    1118:	f8 01       	movw	r30, r16
    111a:	11 92       	st	Z+, r1
    111c:	8a 95       	dec	r24
    111e:	e9 f7       	brne	.-6      	; 0x111a <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]+0x24>
    1120:	15 96       	adiw	r26, 0x05	; 5
    1122:	3c 91       	ld	r19, X
    1124:	15 97       	sbiw	r26, 0x05	; 5
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1126:	2a e0       	ldi	r18, 0x0A	; 10
    1128:	83 2f       	mov	r24, r19
    112a:	62 2f       	mov	r22, r18
    112c:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodqi4>
    1130:	98 2f       	mov	r25, r24
    1132:	88 0f       	add	r24, r24
    1134:	89 0f       	add	r24, r25
    1136:	88 0f       	add	r24, r24
    1138:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       0,
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	14 96       	adiw	r26, 0x04	; 4
    113e:	3c 91       	ld	r19, X
    1140:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1142:	83 2f       	mov	r24, r19
    1144:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodqi4>
    1148:	98 2f       	mov	r25, r24
    114a:	88 0f       	add	r24, r24
    114c:	89 0f       	add	r24, r25
    114e:	88 0f       	add	r24, r24
    1150:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	13 96       	adiw	r26, 0x03	; 3
    1156:	3c 91       	ld	r19, X
    1158:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    115a:	83 2f       	mov	r24, r19
    115c:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodqi4>
    1160:	98 2f       	mov	r25, r24
    1162:	88 0f       	add	r24, r24
    1164:	89 0f       	add	r24, r25
    1166:	88 0f       	add	r24, r24
    1168:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    116a:	8c 83       	std	Y+4, r24	; 0x04
    116c:	12 96       	adiw	r26, 0x02	; 2
    116e:	3c 91       	ld	r19, X
    1170:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1172:	83 2f       	mov	r24, r19
    1174:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodqi4>
    1178:	98 2f       	mov	r25, r24
    117a:	88 0f       	add	r24, r24
    117c:	89 0f       	add	r24, r25
    117e:	88 0f       	add	r24, r24
    1180:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1182:	8e 83       	std	Y+6, r24	; 0x06
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	3c 91       	ld	r19, X
    1188:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    118a:	83 2f       	mov	r24, r19
    118c:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodqi4>
    1190:	98 2f       	mov	r25, r24
    1192:	88 0f       	add	r24, r24
    1194:	89 0f       	add	r24, r25
    1196:	88 0f       	add	r24, r24
    1198:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    119a:	8f 83       	std	Y+7, r24	; 0x07
    119c:	3c 91       	ld	r19, X
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    119e:	83 2f       	mov	r24, r19
    11a0:	0e 94 06 24 	call	0x480c	; 0x480c <__udivmodqi4>
    11a4:	98 2f       	mov	r25, r24
    11a6:	88 0f       	add	r24, r24
    11a8:	89 0f       	add	r24, r25
    11aa:	88 0f       	add	r24, r24
    11ac:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    11ae:	88 87       	std	Y+8, r24	; 0x08
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:46
  i2c_dev->write(buffer, 8);
    11b0:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rtc>
    11b4:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    11b8:	fc 01       	movw	r30, r24
    11ba:	24 81       	ldd	r18, Z+4	; 0x04
    11bc:	35 81       	ldd	r19, Z+5	; 0x05
    11be:	28 30       	cpi	r18, 0x08	; 8
    11c0:	31 05       	cpc	r19, r1
    11c2:	80 f0       	brcs	.+32     	; 0x11e4 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]+0xee>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    11c4:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	30 93 82 04 	sts	0x0482, r19	; 0x800482 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    11cc:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    11d0:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    11d4:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
write():
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	48 e0       	ldi	r20, 0x08	; 8
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	b8 01       	movw	r22, r16
    11e0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
_ZN10RTC_DS13076adjustERK8DateTime.constprop.26():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:47
}
    11e4:	28 96       	adiw	r28, 0x08	; 8
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <RTC_DS1307::now() [clone .constprop.79]>:
_ZN10RTC_DS13073nowEv.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:55
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	00 d0       	rcall	.+0      	; 0x1208 <RTC_DS1307::now() [clone .constprop.79]+0xe>
    1208:	00 d0       	rcall	.+0      	; 0x120a <RTC_DS1307::now() [clone .constprop.79]+0x10>
    120a:	00 d0       	rcall	.+0      	; 0x120c <RTC_DS1307::now() [clone .constprop.79]+0x12>
    120c:	1f 92       	push	r1
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8c 01       	movw	r16, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:57
  uint8_t buffer[7];
  buffer[0] = 0;
    1214:	19 82       	std	Y+1, r1	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:58
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    1216:	e0 90 37 04 	lds	r14, 0x0437	; 0x800437 <rtc>
    121a:	f0 90 38 04 	lds	r15, 0x0438	; 0x800438 <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    121e:	d7 01       	movw	r26, r14
    1220:	14 96       	adiw	r26, 0x04	; 4
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	15 97       	sbiw	r26, 0x05	; 5
    1228:	89 2b       	or	r24, r25
    122a:	e9 f0       	breq	.+58     	; 0x1266 <RTC_DS1307::now() [clone .constprop.79]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    122c:	8c 91       	ld	r24, X
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    1234:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1238:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    123c:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
write():
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	be 01       	movw	r22, r28
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	c7 01       	movw	r24, r14
    124e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
write_then_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:243
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    1252:	88 23       	and	r24, r24
    1254:	41 f0       	breq	.+16     	; 0x1266 <RTC_DS1307::now() [clone .constprop.79]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
    return false;
  }

  return read(read_buffer, read_len);
    1256:	47 e0       	ldi	r20, 0x07	; 7
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	be 01       	movw	r22, r28
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	c7 01       	movw	r24, r14
    1262:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]>
_ZN10RTC_DS13073nowEv.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:62

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	ef 77       	andi	r30, 0x7F	; 127
    126a:	fa 81       	ldd	r31, Y+2	; 0x02
    126c:	fb 80       	ldd	r15, Y+3	; 0x03
    126e:	4d 81       	ldd	r20, Y+5	; 0x05
    1270:	5e 81       	ldd	r21, Y+6	; 0x06
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:60
DateTime RTC_DS1307::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
  i2c_dev->write_then_read(buffer, 1, buffer, 7);

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
      @brief  Convert a binary coded decimal value to binary. RTC stores
    time/date values as BCD.
      @param val BCD value
      @return Binary value
  */
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	94 e0       	ldi	r25, 0x04	; 4
    127a:	35 95       	asr	r19
    127c:	27 95       	ror	r18
    127e:	9a 95       	dec	r25
    1280:	e1 f7       	brne	.-8      	; 0x127a <RTC_DS1307::now() [clone .constprop.79]+0x80>
    1282:	92 2f       	mov	r25, r18
    1284:	99 0f       	add	r25, r25
    1286:	99 0f       	add	r25, r25
    1288:	29 1b       	sub	r18, r25
    128a:	22 0f       	add	r18, r18
    128c:	28 0f       	add	r18, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    128e:	d8 01       	movw	r26, r16
    1290:	2c 93       	st	X, r18
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    1292:	85 2f       	mov	r24, r21
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	24 e0       	ldi	r18, 0x04	; 4
    1298:	95 95       	asr	r25
    129a:	87 95       	ror	r24
    129c:	2a 95       	dec	r18
    129e:	e1 f7       	brne	.-8      	; 0x1298 <RTC_DS1307::now() [clone .constprop.79]+0x9e>
    12a0:	98 2f       	mov	r25, r24
    12a2:	99 0f       	add	r25, r25
    12a4:	99 0f       	add	r25, r25
    12a6:	89 1b       	sub	r24, r25
    12a8:	88 0f       	add	r24, r24
    12aa:	85 0f       	add	r24, r21
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	8c 93       	st	X, r24
    12b0:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    12b2:	64 2f       	mov	r22, r20
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	34 e0       	ldi	r19, 0x04	; 4
    12b8:	75 95       	asr	r23
    12ba:	67 95       	ror	r22
    12bc:	3a 95       	dec	r19
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <RTC_DS1307::now() [clone .constprop.79]+0xbe>
    12c0:	86 2f       	mov	r24, r22
    12c2:	88 0f       	add	r24, r24
    12c4:	88 0f       	add	r24, r24
    12c6:	68 1b       	sub	r22, r24
    12c8:	66 0f       	add	r22, r22
    12ca:	64 0f       	add	r22, r20
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	6c 93       	st	X, r22
    12d0:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    12d2:	4f 2d       	mov	r20, r15
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	64 e0       	ldi	r22, 0x04	; 4
    12d8:	55 95       	asr	r21
    12da:	47 95       	ror	r20
    12dc:	6a 95       	dec	r22
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <RTC_DS1307::now() [clone .constprop.79]+0xde>
    12e0:	84 2f       	mov	r24, r20
    12e2:	88 0f       	add	r24, r24
    12e4:	88 0f       	add	r24, r24
    12e6:	48 1b       	sub	r20, r24
    12e8:	44 0f       	add	r20, r20
    12ea:	4f 0d       	add	r20, r15
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    12ec:	13 96       	adiw	r26, 0x03	; 3
    12ee:	4c 93       	st	X, r20
    12f0:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    12f2:	2f 2f       	mov	r18, r31
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	74 e0       	ldi	r23, 0x04	; 4
    12f8:	35 95       	asr	r19
    12fa:	27 95       	ror	r18
    12fc:	7a 95       	dec	r23
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <RTC_DS1307::now() [clone .constprop.79]+0xfe>
    1300:	82 2f       	mov	r24, r18
    1302:	88 0f       	add	r24, r24
    1304:	88 0f       	add	r24, r24
    1306:	28 1b       	sub	r18, r24
    1308:	22 0f       	add	r18, r18
    130a:	2f 0f       	add	r18, r31
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    130c:	14 96       	adiw	r26, 0x04	; 4
    130e:	2c 93       	st	X, r18
    1310:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    1312:	8e 2f       	mov	r24, r30
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	f4 e0       	ldi	r31, 0x04	; 4
    1318:	95 95       	asr	r25
    131a:	87 95       	ror	r24
    131c:	fa 95       	dec	r31
    131e:	e1 f7       	brne	.-8      	; 0x1318 <RTC_DS1307::now() [clone .constprop.79]+0x11e>
    1320:	98 2f       	mov	r25, r24
    1322:	99 0f       	add	r25, r25
    1324:	99 0f       	add	r25, r25
    1326:	89 1b       	sub	r24, r25
    1328:	88 0f       	add	r24, r24
    132a:	8e 0f       	add	r24, r30
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    132c:	15 96       	adiw	r26, 0x05	; 5
    132e:	8c 93       	st	X, r24
_ZN10RTC_DS13073nowEv.constprop.79():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:63
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
}
    1330:	c8 01       	movw	r24, r16
    1332:	27 96       	adiw	r28, 0x07	; 7
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    1352:	88 81       	ld	r24, Y
    1354:	99 81       	ldd	r25, Y+1	; 0x01
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	11 f0       	breq	.+4      	; 0x135e <String::invalidate()+0x12>
    135a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    1362:	1d 82       	std	Y+5, r1	; 0x05
    1364:	1c 82       	std	Y+4, r1	; 0x04
    1366:	1b 82       	std	Y+3, r1	; 0x03
    1368:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>:
_ZN5Print11printNumberEmh.constprop.10():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    1370:	8f 92       	push	r8
    1372:	9f 92       	push	r9
    1374:	af 92       	push	r10
    1376:	bf 92       	push	r11
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	a1 97       	sbiw	r28, 0x21	; 33
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1390:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1392:	42 30       	cpi	r20, 0x02	; 2
    1394:	08 f4       	brcc	.+2      	; 0x1398 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x28>
    1396:	4a e0       	ldi	r20, 0x0A	; 10
    1398:	8e 01       	movw	r16, r28
    139a:	0f 5d       	subi	r16, 0xDF	; 223
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    139e:	84 2e       	mov	r8, r20
    13a0:	91 2c       	mov	r9, r1
    13a2:	b1 2c       	mov	r11, r1
    13a4:	a1 2c       	mov	r10, r1
    13a6:	a5 01       	movw	r20, r10
    13a8:	94 01       	movw	r18, r8
    13aa:	0e 94 c5 23 	call	0x478a	; 0x478a <__udivmodsi4>
    13ae:	e6 2f       	mov	r30, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    13b0:	b9 01       	movw	r22, r18
    13b2:	ca 01       	movw	r24, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    13b4:	ea 30       	cpi	r30, 0x0A	; 10
    13b6:	44 f5       	brge	.+80     	; 0x1408 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x98>
    13b8:	e0 5d       	subi	r30, 0xD0	; 208
    13ba:	d8 01       	movw	r26, r16
    13bc:	ee 93       	st	-X, r30
    13be:	8d 01       	movw	r16, r26
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    13c0:	23 2b       	or	r18, r19
    13c2:	24 2b       	or	r18, r20
    13c4:	25 2b       	or	r18, r21
    13c6:	79 f7       	brne	.-34     	; 0x13a6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
write():
    13cc:	10 97       	sbiw	r26, 0x00	; 0
    13ce:	69 f0       	breq	.+26     	; 0x13ea <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x7a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    13d0:	fd 01       	movw	r30, r26
    13d2:	01 90       	ld	r0, Z+
    13d4:	00 20       	and	r0, r0
    13d6:	e9 f7       	brne	.-6      	; 0x13d2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x62>
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	af 01       	movw	r20, r30
    13dc:	4a 1b       	sub	r20, r26
    13de:	5b 0b       	sbc	r21, r27
    13e0:	bd 01       	movw	r22, r26
    13e2:	8e e3       	ldi	r24, 0x3E	; 62
    13e4:	95 e0       	ldi	r25, 0x05	; 5
    13e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <Print::write(unsigned char const*, unsigned int)>
_ZN5Print11printNumberEmh.constprop.10():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    13ea:	a1 96       	adiw	r28, 0x21	; 33
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	bf 90       	pop	r11
    1400:	af 90       	pop	r10
    1402:	9f 90       	pop	r9
    1404:	8f 90       	pop	r8
    1406:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1408:	e9 5c       	subi	r30, 0xC9	; 201
    140a:	d7 cf       	rjmp	.-82     	; 0x13ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]+0x4a>

0000140c <Print::print(int, int) [clone .constprop.6]>:
_ZN5Print5printEii.constprop.6():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    1414:	6c 01       	movw	r12, r24
    1416:	99 0f       	add	r25, r25
    1418:	ee 08       	sbc	r14, r14
    141a:	ff 08       	sbc	r15, r15
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    141c:	f7 fe       	sbrs	r15, 7
    141e:	16 c0       	rjmp	.+44     	; 0x144c <Print::print(int, int) [clone .constprop.6]+0x40>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	6d e2       	ldi	r22, 0x2D	; 45
    1424:	8e e3       	ldi	r24, 0x3E	; 62
    1426:	95 e0       	ldi	r25, 0x05	; 5
    1428:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    142c:	66 27       	eor	r22, r22
    142e:	77 27       	eor	r23, r23
    1430:	cb 01       	movw	r24, r22
    1432:	6c 19       	sub	r22, r12
    1434:	7d 09       	sbc	r23, r13
    1436:	8e 09       	sbc	r24, r14
    1438:	9f 09       	sbc	r25, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    143a:	4a e0       	ldi	r20, 0x0A	; 10
    143c:	0e 94 b8 09 	call	0x1370	; 0x1370 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>
    1440:	01 96       	adiw	r24, 0x01	; 1
_ZN5Print5printEii.constprop.6():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    144c:	4a e0       	ldi	r20, 0x0A	; 10
    144e:	c7 01       	movw	r24, r14
    1450:	b6 01       	movw	r22, r12
_ZN5Print5printEii.constprop.6():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    145a:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>

0000145e <Print::print(char const*) [clone .constprop.94]>:
_ZN5Print5printEPKc.constprop.94():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f0       	breq	.+26     	; 0x147c <Print::print(char const*) [clone .constprop.94]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    1462:	fc 01       	movw	r30, r24
    1464:	01 90       	ld	r0, Z+
    1466:	00 20       	and	r0, r0
    1468:	e9 f7       	brne	.-6      	; 0x1464 <Print::print(char const*) [clone .constprop.94]+0x6>
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	af 01       	movw	r20, r30
    146e:	48 1b       	sub	r20, r24
    1470:	59 0b       	sbc	r21, r25
    1472:	bc 01       	movw	r22, r24
    1474:	8e e3       	ldi	r24, 0x3E	; 62
    1476:	95 e0       	ldi	r25, 0x05	; 5
    1478:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <Print::write(unsigned char const*, unsigned int)>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	08 95       	ret

00001482 <inttostr(char*, short)>:
_Z8inttostrPcs():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:31

char* padc (char chr, unsigned char count = 0);

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
    148c:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:32
  if (integer == 0)
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	59 f4       	brne	.+22     	; 0x14a8 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:34
  {
    strcpy(dest, "0");
    1492:	6b e1       	ldi	r22, 0x1B	; 27
    1494:	72 e0       	ldi	r23, 0x02	; 2
    1496:	ce 01       	movw	r24, r28
    1498:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:64
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    149c:	ce 01       	movw	r24, r28
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:38
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    14a8:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:40
    
    if (integer < 0)
    14aa:	77 ff       	sbrs	r23, 7
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:43
    {
      sign = 1;
      dest[0] = '-';
    14ae:	2d e2       	ldi	r18, 0x2D	; 45
    14b0:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:44
      integer = integer * -1;
    14b2:	91 95       	neg	r25
    14b4:	81 95       	neg	r24
    14b6:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:42
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    14b8:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    14ba:	80 31       	cpi	r24, 0x10	; 16
    14bc:	37 e2       	ldi	r19, 0x27	; 39
    14be:	93 07       	cpc	r25, r19
    14c0:	0c f5       	brge	.+66     	; 0x1504 <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    14c2:	88 3e       	cpi	r24, 0xE8	; 232
    14c4:	33 e0       	ldi	r19, 0x03	; 3
    14c6:	93 07       	cpc	r25, r19
    14c8:	fc f4       	brge	.+62     	; 0x1508 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:51
    else if (integer > 99) idx = 2;
    14ca:	32 e0       	ldi	r19, 0x02	; 2
    14cc:	84 36       	cpi	r24, 0x64	; 100
    14ce:	91 05       	cpc	r25, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:52
    else if (integer > 9) idx = 1;
    14d2:	31 e0       	ldi	r19, 0x01	; 1
    14d4:	8a 30       	cpi	r24, 0x0A	; 10
    14d6:	91 05       	cpc	r25, r1
    14d8:	0c f4       	brge	.+2      	; 0x14dc <inttostr(char*, short)+0x5a>
    14da:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:55
    else if (integer > 0) idx = 0;    

    idx += sign;
    14dc:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:56
    dest[idx+1] = 0;
    14de:	fe 01       	movw	r30, r28
    14e0:	e2 0f       	add	r30, r18
    14e2:	f1 1d       	adc	r31, r1
    14e4:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:60
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    14e6:	0a e0       	ldi	r16, 0x0A	; 10
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	fe 01       	movw	r30, r28
    14ec:	e2 0f       	add	r30, r18
    14ee:	f1 1d       	adc	r31, r1
    14f0:	b8 01       	movw	r22, r16
    14f2:	0e 94 26 24 	call	0x484c	; 0x484c <__divmodhi4>
    14f6:	80 5d       	subi	r24, 0xD0	; 208
    14f8:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:58
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    14fa:	cb 01       	movw	r24, r22
    14fc:	21 50       	subi	r18, 0x01	; 1
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	a1 f7       	brne	.-24     	; 0x14ea <inttostr(char*, short)+0x68>
    1502:	cc cf       	rjmp	.-104    	; 0x149c <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:49
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1504:	34 e0       	ldi	r19, 0x04	; 4
    1506:	ea cf       	rjmp	.-44     	; 0x14dc <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:50
    else if (integer > 999) idx = 3;
    1508:	33 e0       	ldi	r19, 0x03	; 3
    150a:	e8 cf       	rjmp	.-48     	; 0x14dc <inttostr(char*, short)+0x5a>

0000150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>:
_Z4rpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:92
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:94
{
  unsigned char len = strlen(str);
    1512:	ec 01       	movw	r28, r24
    1514:	09 90       	ld	r0, Y+
    1516:	00 20       	and	r0, r0
    1518:	e9 f7       	brne	.-6      	; 0x1514 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x8>
    151a:	21 97       	sbiw	r28, 0x01	; 1
    151c:	c8 1b       	sub	r28, r24
    151e:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:98
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    1520:	c0 31       	cpi	r28, 0x10	; 16
    1522:	08 f5       	brcc	.+66     	; 0x1566 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x5a>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:100
  {
    strcpy(dest, str);
    1524:	87 eb       	ldi	r24, 0xB7	; 183
    1526:	94 e0       	ldi	r25, 0x04	; 4
    1528:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:101
    strcat(dest, padc(chr, width - len));
    152c:	80 e1       	ldi	r24, 0x10	; 16
    152e:	8c 1b       	sub	r24, r28
    1530:	e6 ea       	ldi	r30, 0xA6	; 166
    1532:	f4 e0       	ldi	r31, 0x04	; 4
padc():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1534:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1536:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1538:	af 01       	movw	r20, r30
    153a:	46 5a       	subi	r20, 0xA6	; 166
    153c:	54 40       	sbci	r21, 0x04	; 4
    153e:	48 17       	cp	r20, r24
    1540:	59 07       	cpc	r21, r25
    1542:	14 f4       	brge	.+4      	; 0x1548 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x3c>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    1544:	21 93       	st	Z+, r18
    1546:	f8 cf       	rjmp	.-16     	; 0x1538 <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    1548:	8a 55       	subi	r24, 0x5A	; 90
    154a:	9b 4f       	sbci	r25, 0xFB	; 251
    154c:	fc 01       	movw	r30, r24
    154e:	10 82       	st	Z, r1
_Z4rpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:101
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    1550:	66 ea       	ldi	r22, 0xA6	; 166
    1552:	74 e0       	ldi	r23, 0x04	; 4
    1554:	87 eb       	ldi	r24, 0xB7	; 183
    1556:	94 e0       	ldi	r25, 0x04	; 4
    1558:	0e 94 32 26 	call	0x4c64	; 0x4c64 <strcat>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:108
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    155c:	87 eb       	ldi	r24, 0xB7	; 183
    155e:	94 e0       	ldi	r25, 0x04	; 4
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:105
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    1566:	41 e1       	ldi	r20, 0x11	; 17
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	87 eb       	ldi	r24, 0xB7	; 183
    156c:	94 e0       	ldi	r25, 0x04	; 4
    156e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <strncpy>
    1572:	f4 cf       	rjmp	.-24     	; 0x155c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x50>

00001574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>:
_Z4lpadPcPKcch.constprop.78():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:111
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	ec 01       	movw	r28, r24
    157e:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:113
{
  unsigned char len = strlen(str);
    1580:	fb 01       	movw	r30, r22
    1582:	01 90       	ld	r0, Z+
    1584:	00 20       	and	r0, r0
    1586:	e9 f7       	brne	.-6      	; 0x1582 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0xe>
    1588:	31 97       	sbiw	r30, 0x01	; 1
    158a:	e6 1b       	sub	r30, r22
    158c:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:117
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    158e:	e0 31       	cpi	r30, 0x10	; 16
    1590:	28 f5       	brcc	.+74     	; 0x15dc <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x68>
    1592:	e4 17       	cp	r30, r20
    1594:	18 f5       	brcc	.+70     	; 0x15dc <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x68>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:119
  {
    strcpy(dest, padc(chr, width - len));
    1596:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:135
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    1598:	41 31       	cpi	r20, 0x11	; 17
    159a:	08 f0       	brcs	.+2      	; 0x159e <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x2a>
    159c:	40 e1       	ldi	r20, 0x10	; 16
    159e:	e6 ea       	ldi	r30, 0xA6	; 166
    15a0:	f4 e0       	ldi	r31, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:138

  int i;
  for (i=0; i < count; i++)
    15a2:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    15a4:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:138
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    15a6:	9f 01       	movw	r18, r30
    15a8:	26 5a       	subi	r18, 0xA6	; 166
    15aa:	34 40       	sbci	r19, 0x04	; 4
    15ac:	24 17       	cp	r18, r20
    15ae:	35 07       	cpc	r19, r21
    15b0:	14 f4       	brge	.+4      	; 0x15b6 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x42>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:140
  {
    strbuf[i] = chr;
    15b2:	81 93       	st	Z+, r24
    15b4:	f8 cf       	rjmp	.-16     	; 0x15a6 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x32>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:142
  }
  strbuf[i] = 0;
    15b6:	4a 55       	subi	r20, 0x5A	; 90
    15b8:	5b 4f       	sbci	r21, 0xFB	; 251
    15ba:	fa 01       	movw	r30, r20
    15bc:	10 82       	st	Z, r1
_Z4lpadPcPKcch.constprop.78():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:119
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    15be:	66 ea       	ldi	r22, 0xA6	; 166
    15c0:	74 e0       	ldi	r23, 0x04	; 4
    15c2:	ce 01       	movw	r24, r28
    15c4:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:120
    strcat(dest, str);
    15c8:	b8 01       	movw	r22, r16
    15ca:	ce 01       	movw	r24, r28
    15cc:	0e 94 32 26 	call	0x4c64	; 0x4c64 <strcat>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:127
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    15d0:	ce 01       	movw	r24, r28
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:124
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	4f 5f       	subi	r20, 0xFF	; 255
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	b8 01       	movw	r22, r16
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <strncpy>
    15ea:	f2 cf       	rjmp	.-28     	; 0x15d0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]+0x5c>

000015ec <Config::save() [clone .constprop.28]>:
_ZN6Config4saveEv.constprop.28():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:188
  return strbuf;
}

void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    15ec:	4b e4       	ldi	r20, 0x4B	; 75
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	87 ed       	ldi	r24, 0xD7	; 215
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	0c 94 44 23 	jmp	0x4688	; 0x4688 <eeprom_write_block>

000015fc <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    1606:	88 81       	ld	r24, Y
    1608:	99 81       	ldd	r25, Y+1	; 0x01
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	59 f0       	breq	.+22     	; 0x1624 <String::reserve(unsigned int)+0x28>
    160e:	2a 81       	ldd	r18, Y+2	; 0x02
    1610:	3b 81       	ldd	r19, Y+3	; 0x03
    1612:	26 17       	cp	r18, r22
    1614:	37 07       	cpc	r19, r23
    1616:	30 f0       	brcs	.+12     	; 0x1624 <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1618:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret
    1624:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1626:	6f 5f       	subi	r22, 0xFF	; 255
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	59 f0       	breq	.+22     	; 0x1648 <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    1632:	99 83       	std	Y+1, r25	; 0x01
    1634:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    1636:	1b 83       	std	Y+3, r17	; 0x03
    1638:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	23 2b       	or	r18, r19
    1640:	59 f7       	brne	.-42     	; 0x1618 <String::reserve(unsigned int)+0x1c>
    1642:	fc 01       	movw	r30, r24
    1644:	10 82       	st	Z, r1
    1646:	e8 cf       	rjmp	.-48     	; 0x1618 <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	e7 cf       	rjmp	.-50     	; 0x161a <String::reserve(unsigned int)+0x1e>

0000164c <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    165a:	fb 01       	movw	r30, r22
    165c:	e0 80       	ld	r14, Z
    165e:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    1660:	e1 14       	cp	r14, r1
    1662:	f1 04       	cpc	r15, r1
    1664:	11 f1       	breq	.+68     	; 0x16aa <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1666:	04 81       	ldd	r16, Z+4	; 0x04
    1668:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    166a:	01 15       	cp	r16, r1
    166c:	11 05       	cpc	r17, r1
    166e:	a9 f0       	breq	.+42     	; 0x169a <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	08 0f       	add	r16, r24
    1676:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1678:	b8 01       	movw	r22, r16
    167a:	ce 01       	movw	r24, r28
    167c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <String::reserve(unsigned int)>
    1680:	88 23       	and	r24, r24
    1682:	99 f0       	breq	.+38     	; 0x16aa <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    1684:	28 81       	ld	r18, Y
    1686:	39 81       	ldd	r19, Y+1	; 0x01
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	b7 01       	movw	r22, r14
    168e:	82 0f       	add	r24, r18
    1690:	93 1f       	adc	r25, r19
    1692:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    1696:	1d 83       	std	Y+5, r17	; 0x05
    1698:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    169a:	ce 01       	movw	r24, r28
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    16aa:	ce 01       	movw	r24, r28
    16ac:	0e 94 a6 09 	call	0x134c	; 0x134c <String::invalidate()>
    16b0:	f4 cf       	rjmp	.-24     	; 0x169a <operator+(StringSumHelper const&, String const&)+0x4e>

000016b2 <String::String(char const*)>:
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ec 01       	movw	r28, r24
    16c0:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    16c6:	1b 82       	std	Y+3, r1	; 0x03
    16c8:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    16ca:	1d 82       	std	Y+5, r1	; 0x05
    16cc:	1c 82       	std	Y+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    16ce:	fb 01       	movw	r30, r22
    16d0:	01 90       	ld	r0, Z+
    16d2:	00 20       	and	r0, r0
    16d4:	e9 f7       	brne	.-6      	; 0x16d0 <String::String(char const*)+0x1e>
    16d6:	31 97       	sbiw	r30, 0x01	; 1
    16d8:	8f 01       	movw	r16, r30
    16da:	06 1b       	sub	r16, r22
    16dc:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    16de:	b8 01       	movw	r22, r16
    16e0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <String::reserve(unsigned int)>
    16e4:	81 11       	cpse	r24, r1
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    16e8:	ce 01       	movw	r24, r28
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    16f6:	0c 94 a6 09 	jmp	0x134c	; 0x134c <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    16fa:	1d 83       	std	Y+5, r17	; 0x05
    16fc:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    16fe:	b7 01       	movw	r22, r14
    1700:	88 81       	ld	r24, Y
    1702:	99 81       	ldd	r25, Y+1	; 0x01
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    1710:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <strcpy>

00001714 <fmt(char*, unsigned char, ...)>:
_Z3fmtPchz():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:69
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    1714:	6f 92       	push	r6
    1716:	7f 92       	push	r7
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	e9 88       	ldd	r14, Y+17	; 0x11
    1736:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:74
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    1738:	fe 01       	movw	r30, r28
    173a:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:76

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    173c:	d1 2c       	mov	r13, r1
    173e:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:70


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    1740:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1742:	ab 88       	ldd	r10, Y+19	; 0x13
    1744:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:80
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    1746:	80 e1       	ldi	r24, 0x10	; 16
    1748:	68 2e       	mov	r6, r24
    174a:	87 2d       	mov	r24, r7
    174c:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    174e:	ca 14       	cp	r12, r10
    1750:	db 04       	cpc	r13, r11
    1752:	2c f5       	brge	.+74     	; 0x179e <fmt(char*, unsigned char, ...)+0x8a>
    1754:	2f e0       	ldi	r18, 0x0F	; 15
    1756:	27 15       	cp	r18, r7
    1758:	10 f1       	brcs	.+68     	; 0x179e <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    175a:	4f 01       	movw	r8, r30
    175c:	22 e0       	ldi	r18, 0x02	; 2
    175e:	82 0e       	add	r8, r18
    1760:	91 1c       	adc	r9, r1
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:79
    unsigned char len = strlen(str);
    1766:	fb 01       	movw	r30, r22
    1768:	01 90       	ld	r0, Z+
    176a:	00 20       	and	r0, r0
    176c:	e9 f7       	brne	.-6      	; 0x1768 <fmt(char*, unsigned char, ...)+0x54>
    176e:	31 97       	sbiw	r30, 0x01	; 1
    1770:	8f 01       	movw	r16, r30
    1772:	06 1b       	sub	r16, r22
    1774:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:80
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    1776:	9c 01       	movw	r18, r24
    1778:	20 0f       	add	r18, r16
    177a:	31 1d       	adc	r19, r1
    177c:	46 2d       	mov	r20, r6
    177e:	47 19       	sub	r20, r7
    1780:	21 31       	cpi	r18, 0x11	; 17
    1782:	31 05       	cpc	r19, r1
    1784:	0c f4       	brge	.+2      	; 0x1788 <fmt(char*, unsigned char, ...)+0x74>
    1786:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:82

    strncpy((dest + buflen), str, cpylen);
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	8e 0d       	add	r24, r14
    178c:	9f 1d       	adc	r25, r15
    178e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <strncpy>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:83
    buflen += len;
    1792:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:76
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	c8 1a       	sub	r12, r24
    1798:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:78
  {
    str = va_arg(ap, char*);
    179a:	f4 01       	movw	r30, r8
    179c:	d6 cf       	rjmp	.-84     	; 0x174a <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:86

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    179e:	8e 0d       	add	r24, r14
    17a0:	9f 1d       	adc	r25, r15
    17a2:	fc 01       	movw	r30, r24
    17a4:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:88
  return dest;
}
    17a6:	c7 01       	movw	r24, r14
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	08 95       	ret

000017c6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]>:
_ZN6Config15getFormattedStrEh.constprop.75():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:109
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    17c6:	8f 92       	push	r8
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	65 97       	sbiw	r28, 0x15	; 21
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:113
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    17ee:	82 50       	subi	r24, 0x02	; 2
    17f0:	86 31       	cpi	r24, 0x16	; 22
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x30>
    17f4:	11 c2       	rjmp	.+1058   	; 0x1c18 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x452>
    17f6:	e8 2f       	mov	r30, r24
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	ef 5f       	subi	r30, 0xFF	; 255
    17fc:	f3 4f       	sbci	r31, 0xF3	; 243
    17fe:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__tablejump2__>
    1802:	17 0c       	add	r1, r7
    1804:	6d 0c       	add	r6, r13
    1806:	0c 0e       	add	r0, r28
    1808:	cd 0c       	add	r12, r13
    180a:	f9 0c       	add	r15, r9
    180c:	c8 0d       	add	r28, r8
    180e:	ef 0d       	add	r30, r15
    1810:	18 0d       	add	r17, r8
    1812:	25 0d       	add	r18, r5
    1814:	0c 0e       	add	r0, r28
    1816:	2e 0d       	add	r18, r14
    1818:	53 0d       	add	r21, r3
    181a:	0c 0e       	add	r0, r28
    181c:	5c 0d       	add	r21, r12
    181e:	69 0d       	add	r22, r9
    1820:	77 0d       	add	r23, r7
    1822:	ad 0d       	add	r26, r13
    1824:	b2 0d       	add	r27, r2
    1826:	0c 0e       	add	r0, r28
    1828:	09 0e       	add	r0, r25
    182a:	c3 0d       	add	r28, r3
    182c:	be 0d       	add	r27, r14
toDateStr():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:84
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    182e:	1d 8a       	std	Y+21, r1	; 0x15
    1830:	1c 8a       	std	Y+20, r1	; 0x14
    1832:	8f e2       	ldi	r24, 0x2F	; 47
    1834:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:88
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1836:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <StDate>
    183a:	70 91 d6 03 	lds	r23, 0x03D6	; 0x8003d6 <StDate+0x1>
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:89
  lpad(dat, intbuf, '0', 2);
    1846:	8e 01       	movw	r16, r28
    1848:	0f 5e       	subi	r16, 0xEF	; 239
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	42 e0       	ldi	r20, 0x02	; 2
    184e:	be 01       	movw	r22, r28
    1850:	6f 5f       	subi	r22, 0xFF	; 255
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	c8 01       	movw	r24, r16
    1856:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:90
  inttostr(intbuf, StMonth);
    185a:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <StMonth>
    185e:	70 91 d4 03 	lds	r23, 0x03D4	; 0x8003d4 <StMonth+0x1>
    1862:	ce 01       	movw	r24, r28
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:91
  lpad(mon, intbuf, '0', 2);
    186a:	7e 01       	movw	r14, r28
    186c:	8e e0       	ldi	r24, 0x0E	; 14
    186e:	e8 0e       	add	r14, r24
    1870:	f1 1c       	adc	r15, r1
    1872:	42 e0       	ldi	r20, 0x02	; 2
    1874:	be 01       	movw	r22, r28
    1876:	6f 5f       	subi	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	c7 01       	movw	r24, r14
    187c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:92
  inttostr(intbuf, StYear);
    1880:	60 91 d1 03 	lds	r22, 0x03D1	; 0x8003d1 <StYear>
    1884:	70 91 d2 03 	lds	r23, 0x03D2	; 0x8003d2 <StYear+0x1>
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:93
  lpad(year, intbuf, '0', 4);
    1890:	6e 01       	movw	r12, r28
    1892:	99 e0       	ldi	r25, 0x09	; 9
    1894:	c9 0e       	add	r12, r25
    1896:	d1 1c       	adc	r13, r1
    1898:	44 e0       	ldi	r20, 0x04	; 4
    189a:	be 01       	movw	r22, r28
    189c:	6f 5f       	subi	r22, 0xFF	; 255
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	c6 01       	movw	r24, r12
    18a2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:95

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    18a6:	df 92       	push	r13
    18a8:	cf 92       	push	r12
    18aa:	ce 01       	movw	r24, r28
    18ac:	44 96       	adiw	r24, 0x14	; 20
    18ae:	9f 93       	push	r25
    18b0:	8f 93       	push	r24
    18b2:	ff 92       	push	r15
    18b4:	ef 92       	push	r14
    18b6:	9f 93       	push	r25
    18b8:	8f 93       	push	r24
    18ba:	1f 93       	push	r17
    18bc:	0f 93       	push	r16
    18be:	85 e0       	ldi	r24, 0x05	; 5
    18c0:	8f 93       	push	r24
    18c2:	86 e2       	ldi	r24, 0x26	; 38
    18c4:	94 e0       	ldi	r25, 0x04	; 4
    18c6:	9f 93       	push	r25
    18c8:	8f 93       	push	r24
    18ca:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
_ZN6Config15getFormattedStrEh.constprop.75():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:174
    break;      
  case mnuCmdAlarmTime:
    fmt(strbuf, 3, Alarm[AlarmTimeCursor], " : ", AlarmTime[AlarmTimeCursor] == true ? "ON" : "OFF");
    break;
  case mnuCmdPanchangamTime:
    fmt(strbuf, 3, Panchangam[PanchangamCursor], " : ", PanchangamTime[PanchangamCursor] == true ? "ON" : "OFF");
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	2b c1       	rjmp	.+598    	; 0x1b30 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x36a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:119
  {
  case mnuCmdSetDate:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    18da:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <StHr>
    18de:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <StHr+0x1>
    18e2:	2c e3       	ldi	r18, 0x3C	; 60
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	0e 94 40 24 	call	0x4880	; 0x4880 <__usmulhisi3>
    18ea:	00 91 22 04 	lds	r16, 0x0422	; 0x800422 <StMin>
    18ee:	10 91 23 04 	lds	r17, 0x0423	; 0x800423 <StMin+0x1>
    18f2:	01 2e       	mov	r0, r17
    18f4:	00 0c       	add	r0, r0
    18f6:	22 0b       	sbc	r18, r18
    18f8:	33 0b       	sbc	r19, r19
    18fa:	60 0f       	add	r22, r16
    18fc:	71 1f       	adc	r23, r17
    18fe:	82 1f       	adc	r24, r18
    1900:	93 1f       	adc	r25, r19
toTimeStr():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:64
  PanchangamTime[6] = 0;
}

char *toTimeStr(char *buf, long timeval, char separator)
{
  char sepstr[] = {separator, 0};
    1902:	1a 8a       	std	Y+18, r1	; 0x12
    1904:	19 8a       	std	Y+17, r1	; 0x11
    1906:	2a e3       	ldi	r18, 0x3A	; 58
    1908:	29 8b       	std	Y+17, r18	; 0x11
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:66

  short hours = timeval / 60;
    190a:	2c e3       	ldi	r18, 0x3C	; 60
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
    1916:	4b 01       	movw	r8, r22
    1918:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:68
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    191a:	2d 30       	cpi	r18, 0x0D	; 13
    191c:	31 05       	cpc	r19, r1
    191e:	14 f0       	brlt	.+4      	; 0x1924 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x15e>
    1920:	2c 50       	subi	r18, 0x0C	; 12
    1922:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:73
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    1924:	b9 01       	movw	r22, r18
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:74
  lpad(h, intbuf, '0', 2);
    192e:	8e 01       	movw	r16, r28
    1930:	02 5f       	subi	r16, 0xF2	; 242
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	42 e0       	ldi	r20, 0x02	; 2
    1936:	be 01       	movw	r22, r28
    1938:	6f 5f       	subi	r22, 0xFF	; 255
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	c8 01       	movw	r24, r16
    193e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:75
  inttostr(intbuf, mins);
    1942:	b4 01       	movw	r22, r8
    1944:	ce 01       	movw	r24, r28
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:76
  lpad(m, intbuf, '0', 2);
    194c:	6e 01       	movw	r12, r28
    194e:	89 e0       	ldi	r24, 0x09	; 9
    1950:	c8 0e       	add	r12, r24
    1952:	d1 1c       	adc	r13, r1
    1954:	42 e0       	ldi	r20, 0x02	; 2
    1956:	be 01       	movw	r22, r28
    1958:	6f 5f       	subi	r22, 0xFF	; 255
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	c6 01       	movw	r24, r12
    195e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:78

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1962:	9c e0       	ldi	r25, 0x0C	; 12
    1964:	e9 16       	cp	r14, r25
    1966:	f1 04       	cpc	r15, r1
    1968:	ac f4       	brge	.+42     	; 0x1994 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x1ce>
_ZN6Config15getFormattedStrEh.constprop.75():
    196a:	88 eb       	ldi	r24, 0xB8	; 184
    196c:	91 e0       	ldi	r25, 0x01	; 1
toTimeStr():
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	df 92       	push	r13
    1974:	cf 92       	push	r12
    1976:	ce 01       	movw	r24, r28
    1978:	41 96       	adiw	r24, 0x11	; 17
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	1f 93       	push	r17
    1980:	0f 93       	push	r16
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	8f 93       	push	r24
    1986:	86 e2       	ldi	r24, 0x26	; 38
    1988:	94 e0       	ldi	r25, 0x04	; 4
    198a:	9f 93       	push	r25
    198c:	8f 93       	push	r24
    198e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    1992:	9d cf       	rjmp	.-198    	; 0x18ce <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x108>
_ZN6Config15getFormattedStrEh.constprop.75():
    1994:	81 eb       	ldi	r24, 0xB1	; 177
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	ea cf       	rjmp	.-44     	; 0x196e <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x1a8>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:122
    break;
  case mnuCmdSetTime:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    199a:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <config+0xf>
    199e:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <config+0x10>
    19a2:	6d 30       	cpi	r22, 0x0D	; 13
    19a4:	71 05       	cpc	r23, r1
    19a6:	14 f0       	brlt	.+4      	; 0x19ac <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x1e6>
    19a8:	6c 50       	subi	r22, 0x0C	; 12
    19aa:	71 09       	sbc	r23, r1
    19ac:	ce 01       	movw	r24, r28
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:123
    lpad(h, intbuf, '0', 2);
    19b4:	8e 01       	movw	r16, r28
    19b6:	07 5f       	subi	r16, 0xF7	; 247
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	42 e0       	ldi	r20, 0x02	; 2
    19bc:	be 01       	movw	r22, r28
    19be:	6f 5f       	subi	r22, 0xFF	; 255
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	c8 01       	movw	r24, r16
    19c4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:124
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    19c8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0xf>
    19cc:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x10>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:129
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    19d0:	0c 97       	sbiw	r24, 0x0c	; 12
    19d2:	5c f5       	brge	.+86     	; 0x1a2a <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x264>
    19d4:	85 eb       	ldi	r24, 0xB5	; 181
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	9f 93       	push	r25
    19da:	8f 93       	push	r24
    19dc:	1f 93       	push	r17
    19de:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:149
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	8f 93       	push	r24
    19e4:	86 e2       	ldi	r24, 0x26	; 38
    19e6:	94 e0       	ldi	r25, 0x04	; 4
    19e8:	9f 93       	push	r25
    19ea:	8f 93       	push	r24
    19ec:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    19f0:	6e cf       	rjmp	.-292    	; 0x18ce <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x108>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:127
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    19f2:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <config+0x11>
    19f6:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <config+0x12>
    19fa:	6d 30       	cpi	r22, 0x0D	; 13
    19fc:	71 05       	cpc	r23, r1
    19fe:	14 f0       	brlt	.+4      	; 0x1a04 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x23e>
    1a00:	6c 50       	subi	r22, 0x0C	; 12
    1a02:	71 09       	sbc	r23, r1
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:128
    lpad(h, intbuf, '0', 2);
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	07 5f       	subi	r16, 0xF7	; 247
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	42 e0       	ldi	r20, 0x02	; 2
    1a14:	be 01       	movw	r22, r28
    1a16:	6f 5f       	subi	r22, 0xFF	; 255
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:129
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1a20:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x11>
    1a24:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x12>
    1a28:	d3 cf       	rjmp	.-90     	; 0x19d0 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x20a>
    1a2a:	8e ea       	ldi	r24, 0xAE	; 174
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	d4 cf       	rjmp	.-88     	; 0x19d8 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x212>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:132
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    1a30:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <config+0x18>
    1a34:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <config+0x19>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
    1a40:	20 ec       	ldi	r18, 0xC0	; 192
    1a42:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:149
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1a44:	3f 93       	push	r19
    1a46:	2f 93       	push	r18
    1a48:	34 c0       	rjmp	.+104    	; 0x1ab2 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2ec>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:135
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    1a4a:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <config+0x15>
    1a4e:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <config+0x16>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:168
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
    1a5a:	8a c0       	rjmp	.+276    	; 0x1b70 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3aa>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:138
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    1a5c:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <demoTime>
    1a60:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <demoTime+0x1>
    1a64:	b8 01       	movw	r22, r16
    1a66:	0d 30       	cpi	r16, 0x0D	; 13
    1a68:	11 05       	cpc	r17, r1
    1a6a:	14 f0       	brlt	.+4      	; 0x1a70 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2aa>
    1a6c:	6c 50       	subi	r22, 0x0C	; 12
    1a6e:	71 09       	sbc	r23, r1
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:139
    lpad(h, intbuf, '0', 2);
    1a78:	7e 01       	movw	r14, r28
    1a7a:	99 e0       	ldi	r25, 0x09	; 9
    1a7c:	e9 0e       	add	r14, r25
    1a7e:	f1 1c       	adc	r15, r1
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	be 01       	movw	r22, r28
    1a84:	6f 5f       	subi	r22, 0xFF	; 255
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	c7 01       	movw	r24, r14
    1a8a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:140
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1a8e:	85 eb       	ldi	r24, 0xB5	; 181
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	0c 30       	cpi	r16, 0x0C	; 12
    1a94:	11 05       	cpc	r17, r1
    1a96:	14 f0       	brlt	.+4      	; 0x1a9c <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x2d6>
    1a98:	8e ea       	ldi	r24, 0xAE	; 174
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	9f 93       	push	r25
    1a9e:	8f 93       	push	r24
    1aa0:	ff 92       	push	r15
    1aa2:	ef 92       	push	r14
    1aa4:	9d cf       	rjmp	.-198    	; 0x19e0 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x21a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:143
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1aa6:	87 ec       	ldi	r24, 0xC7	; 199
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	9f 93       	push	r25
    1aac:	8f 93       	push	r24
    1aae:	8f ec       	ldi	r24, 0xCF	; 207
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:149
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	94 cf       	rjmp	.-216    	; 0x19e0 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x21a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:146
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1ab8:	60 91 f7 03 	lds	r22, 0x03F7	; 0x8003f7 <config+0x20>
    1abc:	70 91 f8 03 	lds	r23, 0x03F8	; 0x8003f8 <config+0x21>
    1ac0:	63 30       	cpi	r22, 0x03	; 3
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x302>
    1ac6:	af c0       	rjmp	.+350    	; 0x1c26 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x460>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:149
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1ac8:	27 e6       	ldi	r18, 0x67	; 103
    1aca:	32 e0       	ldi	r19, 0x02	; 2
    1acc:	8c eb       	ldi	r24, 0xBC	; 188
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	b9 cf       	rjmp	.-142    	; 0x1a44 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x27e>
    1ad2:	60 91 fb 03 	lds	r22, 0x03FB	; 0x8003fb <config+0x24>
    1ad6:	70 91 fc 03 	lds	r23, 0x03FC	; 0x8003fc <config+0x25>
    1ada:	63 30       	cpi	r22, 0x03	; 3
    1adc:	71 05       	cpc	r23, r1
    1ade:	a1 f3       	breq	.-24     	; 0x1ac8 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x302>
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
    1ae8:	21 eb       	ldi	r18, 0xB1	; 177
    1aea:	31 e0       	ldi	r19, 0x01	; 1
    1aec:	ab cf       	rjmp	.-170    	; 0x1a44 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x27e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:152
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1aee:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <config+0x28>
    1af2:	70 91 00 04 	lds	r23, 0x0400	; 0x800400 <config+0x29>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:157
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1af6:	ce 01       	movw	r24, r28
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:158
    lpad(h, intbuf, '0', 3);
    1afe:	8e 01       	movw	r16, r28
    1b00:	07 5f       	subi	r16, 0xF7	; 247
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	43 e0       	ldi	r20, 0x03	; 3
    1b06:	be 01       	movw	r22, r28
    1b08:	6f 5f       	subi	r22, 0xFF	; 255
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:159
    fmt(strbuf, 1, h);
    1b12:	1f 93       	push	r17
    1b14:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:168
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	8f 93       	push	r24
    1b1a:	86 e2       	ldi	r24, 0x26	; 38
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	9f 93       	push	r25
    1b20:	8f 93       	push	r24
    1b22:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:184
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1b30:	86 e2       	ldi	r24, 0x26	; 38
    1b32:	94 e0       	ldi	r25, 0x04	; 4
    1b34:	65 96       	adiw	r28, 0x15	; 21
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:157
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1b5a:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <config+0x2a>
    1b5e:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <config+0x2b>
    1b62:	c9 cf       	rjmp	.-110    	; 0x1af6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x330>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:162
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1b64:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <config+0x17>
    1b68:	88 23       	and	r24, r24
    1b6a:	29 f0       	breq	.+10     	; 0x1b76 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3b0>
    1b6c:	83 e4       	ldi	r24, 0x43	; 67
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:168
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b70:	9f 93       	push	r25
    1b72:	8f 93       	push	r24
    1b74:	d0 cf       	rjmp	.-96     	; 0x1b16 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x350>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:162
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1b76:	8c eb       	ldi	r24, 0xBC	; 188
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	fa cf       	rjmp	.-12     	; 0x1b70 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3aa>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:165
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    1b7c:	60 91 f5 03 	lds	r22, 0x03F5	; 0x8003f5 <config+0x1e>
    1b80:	70 91 f6 03 	lds	r23, 0x03F6	; 0x8003f6 <config+0x1f>
    1b84:	66 cf       	rjmp	.-308    	; 0x1a52 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x28c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:168
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1b86:	60 91 f3 03 	lds	r22, 0x03F3	; 0x8003f3 <config+0x1c>
    1b8a:	70 91 f4 03 	lds	r23, 0x03F4	; 0x8003f4 <config+0x1d>
    1b8e:	61 cf       	rjmp	.-318    	; 0x1a52 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x28c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:171
    break;      
  case mnuCmdAlarmTime:
    fmt(strbuf, 3, Alarm[AlarmTimeCursor], " : ", AlarmTime[AlarmTimeCursor] == true ? "ON" : "OFF");
    1b90:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <AlarmTimeCursor>
    1b94:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    1b98:	df 01       	movw	r26, r30
    1b9a:	a9 52       	subi	r26, 0x29	; 41
    1b9c:	bc 4f       	sbci	r27, 0xFC	; 252
    1b9e:	9c 96       	adiw	r26, 0x2c	; 44
    1ba0:	8c 91       	ld	r24, X
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	19 c0       	rjmp	.+50     	; 0x1bd8 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x412>
    1ba6:	8c eb       	ldi	r24, 0xBC	; 188
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	84 e6       	ldi	r24, 0x64	; 100
    1bb0:	92 e0       	ldi	r25, 0x02	; 2
    1bb2:	9f 93       	push	r25
    1bb4:	8f 93       	push	r24
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	e2 5b       	subi	r30, 0xB2	; 178
    1bbc:	fe 4f       	sbci	r31, 0xFE	; 254
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:174
    break;
  case mnuCmdPanchangamTime:
    fmt(strbuf, 3, Panchangam[PanchangamCursor], " : ", PanchangamTime[PanchangamCursor] == true ? "ON" : "OFF");
    1bbe:	81 81       	ldd	r24, Z+1	; 0x01
    1bc0:	8f 93       	push	r24
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 93       	push	r24
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	8f 93       	push	r24
    1bca:	86 e2       	ldi	r24, 0x26	; 38
    1bcc:	94 e0       	ldi	r25, 0x04	; 4
    1bce:	9f 93       	push	r25
    1bd0:	8f 93       	push	r24
    1bd2:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    1bd6:	7b ce       	rjmp	.-778    	; 0x18ce <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x108>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:171
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    break;      
  case mnuCmdAlarmTime:
    fmt(strbuf, 3, Alarm[AlarmTimeCursor], " : ", AlarmTime[AlarmTimeCursor] == true ? "ON" : "OFF");
    1bd8:	83 e4       	ldi	r24, 0x43	; 67
    1bda:	92 e0       	ldi	r25, 0x02	; 2
    1bdc:	e6 cf       	rjmp	.-52     	; 0x1baa <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3e4>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:174
    break;
  case mnuCmdPanchangamTime:
    fmt(strbuf, 3, Panchangam[PanchangamCursor], " : ", PanchangamTime[PanchangamCursor] == true ? "ON" : "OFF");
    1bde:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <PanchangamCursor>
    1be2:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    1be6:	df 01       	movw	r26, r30
    1be8:	a5 5e       	subi	r26, 0xE5	; 229
    1bea:	bb 4f       	sbci	r27, 0xFB	; 251
    1bec:	8c 91       	ld	r24, X
    1bee:	81 11       	cpse	r24, r1
    1bf0:	0d c0       	rjmp	.+26     	; 0x1c0c <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x446>
    1bf2:	8c eb       	ldi	r24, 0xBC	; 188
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	9f 93       	push	r25
    1bf8:	8f 93       	push	r24
    1bfa:	84 e6       	ldi	r24, 0x64	; 100
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	e0 5c       	subi	r30, 0xC0	; 192
    1c08:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0a:	d9 cf       	rjmp	.-78     	; 0x1bbe <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x3f8>
    1c0c:	83 e4       	ldi	r24, 0x43	; 67
    1c0e:	92 e0       	ldi	r25, 0x02	; 2
    1c10:	f2 cf       	rjmp	.-28     	; 0x1bf6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x430>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:177
    break;
  case mnuCmdReset:
    strbuf[0] = 0;
    1c12:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <strbuf>
    1c16:	8c cf       	rjmp	.-232    	; 0x1b30 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x36a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:180
    break;
  default:
    strcpy(strbuf, NotImp);
    1c18:	6a e3       	ldi	r22, 0x3A	; 58
    1c1a:	71 e0       	ldi	r23, 0x01	; 1
    1c1c:	86 e2       	ldi	r24, 0x26	; 38
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
    1c24:	85 cf       	rjmp	.-246    	; 0x1b30 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x36a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:146
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1c26:	ce 01       	movw	r24, r28
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
    1c2e:	28 eb       	ldi	r18, 0xB8	; 184
    1c30:	31 e0       	ldi	r19, 0x01	; 1
    1c32:	08 cf       	rjmp	.-496    	; 0x1a44 <Config::getFormattedStr(unsigned char) [clone .constprop.75]+0x27e>

00001c34 <PlayChant()>:
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:973
    }
}

int n = 1;
void PlayChant()
{
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:975
    // Serial.println(String(hr));
    switch (playSong)
    1c3c:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <playSong>
    1c40:	e9 30       	cpi	r30, 0x09	; 9
    1c42:	58 f5       	brcc	.+86     	; 0x1c9a <PlayChant()+0x66>
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	e8 5d       	subi	r30, 0xD8	; 216
    1c48:	f1 4f       	sbci	r31, 0xF1	; 241
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1076
            delay(1000);
            playSong = End_of_Song;
         }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:975

int n = 1;
void PlayChant()
{
    // Serial.println(String(hr));
    switch (playSong)
    1c4c:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__tablejump2__>
    1c50:	31 0e       	add	r3, r17
    1c52:	52 0e       	add	r5, r18
    1c54:	63 0e       	add	r6, r19
    1c56:	74 0e       	add	r7, r20
    1c58:	85 0e       	add	r8, r21
    1c5a:	98 0e       	add	r9, r24
    1c5c:	d1 0e       	add	r13, r17
    1c5e:	33 0f       	add	r19, r19
    1c60:	5a 0f       	add	r21, r26
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:978
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    1c62:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1c66:	89 2b       	or	r24, r25
    1c68:	c1 f0       	breq	.+48     	; 0x1c9a <PlayChant()+0x66>
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1c6a:	0e 94 a0 22 	call	0x4540	; 0x4540 <random>
    1c6e:	23 e1       	ldi	r18, 0x13	; 19
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:980
        {
            myDFPlayer.playFolder(0, random(1, 20));
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:981
            delay(1000);
    1c88:	68 ee       	ldi	r22, 0xE8	; 232
    1c8a:	73 e0       	ldi	r23, 0x03	; 3
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:982
            playSong = Time;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1072
    case Song_2:
         if (digitalRead(STA_PIN))
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    1c96:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <playSong>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1086
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:986
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    1ca4:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1ca8:	89 2b       	or	r24, r25
    1caa:	b9 f3       	breq	.-18     	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:988
        {
            myDFPlayer.playFolder(1, bell.hour());
    1cac:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <bell+0x3>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:989
            delay(1000);
    1cb6:	68 ee       	ldi	r22, 0xE8	; 232
    1cb8:	73 e0       	ldi	r23, 0x03	; 3
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:990
            playSong = English_Month;
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	e8 cf       	rjmp	.-48     	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:994
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    1cc6:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1cca:	89 2b       	or	r24, r25
    1ccc:	31 f3       	breq	.-52     	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:996
        {
            myDFPlayer.playFolder(47, bell.month());
    1cce:	60 91 39 05 	lds	r22, 0x0539	; 0x800539 <bell+0x1>
    1cd2:	8f e2       	ldi	r24, 0x2F	; 47
    1cd4:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:997
            delay(1000);
    1cd8:	68 ee       	ldi	r22, 0xE8	; 232
    1cda:	73 e0       	ldi	r23, 0x03	; 3
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:998
            playSong = English_Date;
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	d7 cf       	rjmp	.-82     	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1002
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    1ce8:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1cec:	89 2b       	or	r24, r25
    1cee:	a9 f2       	breq	.-86     	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1004
        {
            myDFPlayer.playFolder(48, bell.day());
    1cf0:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <bell+0x2>
    1cf4:	80 e3       	ldi	r24, 0x30	; 48
    1cf6:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1005
            delay(1000);
    1cfa:	68 ee       	ldi	r22, 0xE8	; 232
    1cfc:	73 e0       	ldi	r23, 0x03	; 3
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1006
            playSong = Day_of_Week;
    1d06:	84 e0       	ldi	r24, 0x04	; 4
    1d08:	c6 cf       	rjmp	.-116    	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1010
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    1d0a:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1d0e:	89 2b       	or	r24, r25
    1d10:	21 f2       	breq	.-120    	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1012
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    1d12:	0e 94 33 02 	call	0x466	; 0x466 <DateTime::dayOfTheWeek() const [clone .constprop.20]>
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	68 0f       	add	r22, r24
    1d1a:	81 e3       	ldi	r24, 0x31	; 49
    1d1c:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1013
            delay(1000);
    1d20:	68 ee       	ldi	r22, 0xE8	; 232
    1d22:	73 e0       	ldi	r23, 0x03	; 3
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1014
            playSong = Tamil_Date;
    1d2c:	85 e0       	ldi	r24, 0x05	; 5
    1d2e:	b3 cf       	rjmp	.-154    	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1018
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    1d30:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1d34:	89 2b       	or	r24, r25
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <PlayChant()+0x106>
    1d38:	b0 cf       	rjmp	.-160    	; 0x1c9a <PlayChant()+0x66>
    1d3a:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <bell+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1020
        {
            if (config.PanchangamTime[bell.hour()-5] && bell.hour() >= 5 && bell.hour() <= 11)
    1d3e:	e8 2f       	mov	r30, r24
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	e9 52       	subi	r30, 0x29	; 41
    1d44:	fc 4f       	sbci	r31, 0xFC	; 252
    1d46:	97 ad       	ldd	r25, Z+63	; 0x3f
    1d48:	99 23       	and	r25, r25
    1d4a:	e1 f0       	breq	.+56     	; 0x1d84 <PlayChant()+0x150>
    1d4c:	85 50       	subi	r24, 0x05	; 5
    1d4e:	87 30       	cpi	r24, 0x07	; 7
    1d50:	c8 f4       	brcc	.+50     	; 0x1d84 <PlayChant()+0x150>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    1d52:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <bell>
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	80 53       	subi	r24, 0x30	; 48
    1d5a:	98 4f       	sbci	r25, 0xF8	; 248
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1022
            {
                if (bell.year() == config.DataYear)
    1d5c:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <config+0x1c>
    1d60:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <config+0x1d>
    1d64:	28 17       	cp	r18, r24
    1d66:	39 07       	cpc	r19, r25
    1d68:	79 f4       	brne	.+30     	; 0x1d88 <PlayChant()+0x154>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1024
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    1d6a:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <bell+0x1>
    1d6e:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <bell+0x2>
    1d72:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1029
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    1d74:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1030
                    delay(1000);
    1d78:	68 ee       	ldi	r22, 0xE8	; 232
    1d7a:	73 e0       	ldi	r23, 0x03	; 3
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1036
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    1d84:	86 e0       	ldi	r24, 0x06	; 6
    1d86:	87 cf       	rjmp	.-242    	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1027
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    1d88:	21 50       	subi	r18, 0x01	; 1
    1d8a:	31 09       	sbc	r19, r1
    1d8c:	28 17       	cp	r18, r24
    1d8e:	39 07       	cpc	r19, r25
    1d90:	c9 f7       	brne	.-14     	; 0x1d84 <PlayChant()+0x150>
    1d92:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <bell+0x1>
    1d96:	8c 30       	cpi	r24, 0x0C	; 12
    1d98:	a9 f7       	brne	.-22     	; 0x1d84 <PlayChant()+0x150>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1029
                {
                    myDFPlayer.playFolder(50, bell.day());
    1d9a:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <bell+0x2>
    1d9e:	82 e3       	ldi	r24, 0x32	; 50
    1da0:	e9 cf       	rjmp	.-46     	; 0x1d74 <PlayChant()+0x140>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1042
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    1da2:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1da6:	89 2b       	or	r24, r25
    1da8:	09 f4       	brne	.+2      	; 0x1dac <PlayChant()+0x178>
    1daa:	77 cf       	rjmp	.-274    	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1044
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    1dac:	20 91 f7 03 	lds	r18, 0x03F7	; 0x8003f7 <config+0x20>
    1db0:	30 91 f8 03 	lds	r19, 0x03F8	; 0x8003f8 <config+0x21>
    1db4:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <bell+0x3>
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	28 17       	cp	r18, r24
    1dbc:	39 07       	cpc	r19, r25
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <PlayChant()+0x192>
    1dc0:	23 30       	cpi	r18, 0x03	; 3
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	d9 f5       	brne	.+118    	; 0x1e3c <PlayChant()+0x208>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1050
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1dc6:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <config+0x24>
    1dca:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <config+0x25>
    1dce:	a9 01       	movw	r20, r18
    1dd0:	44 5f       	subi	r20, 0xF4	; 244
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	84 17       	cp	r24, r20
    1dd6:	95 07       	cpc	r25, r21
    1dd8:	e9 f1       	breq	.+122    	; 0x1e54 <PlayChant()+0x220>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1058
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
    1dda:	c0 90 ef 03 	lds	r12, 0x03EF	; 0x8003ef <config+0x18>
    1dde:	d0 90 f0 03 	lds	r13, 0x03F0	; 0x8003f0 <config+0x19>
    1de2:	0d 2c       	mov	r0, r13
    1de4:	00 0c       	add	r0, r0
    1de6:	ee 08       	sbc	r14, r14
    1de8:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	c8 16       	cp	r12, r24
    1df6:	d1 04       	cpc	r13, r1
    1df8:	e1 04       	cpc	r14, r1
    1dfa:	f1 04       	cpc	r15, r1
    1dfc:	74 f0       	brlt	.+28     	; 0x1e1a <PlayChant()+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1dfe:	0e 94 a0 22 	call	0x4540	; 0x4540 <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    1e02:	a7 01       	movw	r20, r14
    1e04:	96 01       	movw	r18, r12
    1e06:	21 50       	subi	r18, 0x01	; 1
    1e08:	31 09       	sbc	r19, r1
    1e0a:	41 09       	sbc	r20, r1
    1e0c:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1e0e:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1e12:	6f 5f       	subi	r22, 0xFF	; 255
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	8f 4f       	sbci	r24, 0xFF	; 255
    1e18:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    1e1a:	82 e1       	ldi	r24, 0x12	; 18
    1e1c:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1059
                delay(1000);
    1e20:	68 ee       	ldi	r22, 0xE8	; 232
    1e22:	73 e0       	ldi	r23, 0x03	; 3
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1060
                if (config.Song2_Count != 0)
    1e2c:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <config+0x1a>
    1e30:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <config+0x1b>
    1e34:	89 2b       	or	r24, r25
    1e36:	a9 f4       	brne	.+42     	; 0x1e62 <PlayChant()+0x22e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1072
    case Song_2:
         if (digitalRead(STA_PIN))
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    1e38:	88 e0       	ldi	r24, 0x08	; 8
    1e3a:	2d cf       	rjmp	.-422    	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1046
    case Song_1:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    1e3c:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1052
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1070
        }
        break;
    case Song_2:
         if (digitalRead(STA_PIN))
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
    1e42:	0e 94 5c 05 	call	0xab8	; 0xab8 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.24]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1071
            delay(1000);
    1e46:	68 ee       	ldi	r22, 0xE8	; 232
    1e48:	73 e0       	ldi	r23, 0x03	; 3
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
    1e52:	f2 cf       	rjmp	.-28     	; 0x1e38 <PlayChant()+0x204>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1050
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    1e54:	23 30       	cpi	r18, 0x03	; 3
    1e56:	31 05       	cpc	r19, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <PlayChant()+0x228>
    1e5a:	bf cf       	rjmp	.-130    	; 0x1dda <PlayChant()+0x1a6>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1052
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    1e5c:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <config+0x2a>
    1e60:	ef cf       	rjmp	.-34     	; 0x1e40 <PlayChant()+0x20c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1061
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
                delay(1000);
                if (config.Song2_Count != 0)
                    playSong = Song_2;
    1e62:	87 e0       	ldi	r24, 0x07	; 7
    1e64:	18 cf       	rjmp	.-464    	; 0x1c96 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1068
                    playSong = End_of_Song;
            }
        }
        break;
    case Song_2:
         if (digitalRead(STA_PIN))
    1e66:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1e6a:	89 2b       	or	r24, r25
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <PlayChant()+0x23c>
    1e6e:	15 cf       	rjmp	.-470    	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1070
         {
            myDFPlayer.playFolder(6,random(1,config.Song2_Count));
    1e70:	c0 90 f1 03 	lds	r12, 0x03F1	; 0x8003f1 <config+0x1a>
    1e74:	d0 90 f2 03 	lds	r13, 0x03F2	; 0x8003f2 <config+0x1b>
    1e78:	0d 2c       	mov	r0, r13
    1e7a:	00 0c       	add	r0, r0
    1e7c:	ee 08       	sbc	r14, r14
    1e7e:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	c8 16       	cp	r12, r24
    1e8c:	d1 04       	cpc	r13, r1
    1e8e:	e1 04       	cpc	r14, r1
    1e90:	f1 04       	cpc	r15, r1
    1e92:	74 f0       	brlt	.+28     	; 0x1eb0 <PlayChant()+0x27c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1e94:	0e 94 a0 22 	call	0x4540	; 0x4540 <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    1e98:	a7 01       	movw	r20, r14
    1e9a:	96 01       	movw	r18, r12
    1e9c:	21 50       	subi	r18, 0x01	; 1
    1e9e:	31 09       	sbc	r19, r1
    1ea0:	41 09       	sbc	r20, r1
    1ea2:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1ea4:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1ea8:	6f 5f       	subi	r22, 0xFF	; 255
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	8f 4f       	sbci	r24, 0xFF	; 255
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1070
    1eb0:	86 e0       	ldi	r24, 0x06	; 6
    1eb2:	c7 cf       	rjmp	.-114    	; 0x1e42 <PlayChant()+0x20e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1076
            delay(1000);
            playSong = End_of_Song;
         }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    1eb4:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    1eb8:	89 2b       	or	r24, r25
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <PlayChant()+0x28a>
    1ebc:	ee ce       	rjmp	.-548    	; 0x1c9a <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1078
        {
            playSong = Starting_Song;
    1ebe:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <playSong>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1079
            lcd.clear();
    1ec2:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1080
            appMode = APP_NORMAL_MODE;
    1ec6:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1081
            timrLCD = millis();
    1eca:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    1ece:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <timrLCD>
    1ed2:	70 93 c9 03 	sts	0x03C9, r23	; 0x8003c9 <timrLCD+0x1>
    1ed6:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <timrLCD+0x2>
    1eda:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1082
            digitalWrite(AMP, LOW);
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1086
        }
        break;
    }
}
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1082
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    1eea:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <digitalWrite>

00001eee <refreshMenuDisplay(unsigned char)>:
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:931
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	67 97       	sbiw	r28, 0x17	; 23
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:934
    char nameBuf[LCD_COLS + 1];

    lcd.setCursor(0, 0);
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:935
    if (Menu1.currentItemHasChildren())
    1f0c:	0e 94 b5 01 	call	0x36a	; 0x36a <MenuManager::currentItemHasChildren() [clone .constprop.100]>
    1f10:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <Menu1+0x6>
    1f14:	e0 91 cb 04 	lds	r30, 0x04CB	; 0x8004cb <Menu1+0x3>
    1f18:	f0 91 cc 04 	lds	r31, 0x04CC	; 0x8004cc <Menu1+0x4>
    1f1c:	88 23       	and	r24, r24
    1f1e:	49 f1       	breq	.+82     	; 0x1f72 <refreshMenuDisplay(unsigned char)+0x84>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    1f20:	86 e0       	ldi	r24, 0x06	; 6
    1f22:	98 9f       	mul	r25, r24
    1f24:	e0 0d       	add	r30, r0
    1f26:	f1 1d       	adc	r31, r1
    1f28:	11 24       	eor	r1, r1
    1f2a:	31 96       	adiw	r30, 0x01	; 1
    1f2c:	65 91       	lpm	r22, Z+
    1f2e:	74 91       	lpm	r23, Z
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:937
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1f38:	0e 94 86 0a 	call	0x150c	; 0x150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:938
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    1f3c:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:950
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1f3e:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:951
            lcd.print(strbuf);
    1f42:	87 eb       	ldi	r24, 0xB7	; 183
    1f44:	94 e0       	ldi	r25, 0x04	; 4
    1f46:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:952
            lcd.setCursor(0, 1);
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:953
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    1f52:	85 e2       	ldi	r24, 0x25	; 37
    1f54:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:966
                StYear = rtc.now().year();
            }
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1f56:	0e 94 86 0a 	call	0x150c	; 0x150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    1f5a:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:969
        }
    }
}
    1f5e:	67 96       	adiw	r28, 0x17	; 23
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	08 95       	ret
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:53
    1f72:	86 e0       	ldi	r24, 0x06	; 6
    1f74:	98 9f       	mul	r25, r24
    1f76:	e0 0d       	add	r30, r0
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	11 24       	eor	r1, r1
    1f7c:	31 96       	adiw	r30, 0x01	; 1
    1f7e:	65 91       	lpm	r22, Z+
    1f80:	74 91       	lpm	r23, Z
    1f82:	ce 01       	movw	r24, r28
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:946
        lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
    }
    else
    {
        byte cmdId;
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    1f8a:	0e 94 86 0a 	call	0x150c	; 0x150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:948

        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    1f8e:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    1f92:	18 2f       	mov	r17, r24
    1f94:	81 11       	cpse	r24, r1
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <refreshMenuDisplay(unsigned char)+0xae>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:950
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    1f98:	8f e7       	ldi	r24, 0x7F	; 127
    1f9a:	d1 cf       	rjmp	.-94     	; 0x1f3e <refreshMenuDisplay(unsigned char)+0x50>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:957
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            if (cmdId == mnuCmdSetDate)
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	01 f5       	brne	.+64     	; 0x1fe0 <refreshMenuDisplay(unsigned char)+0xf2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:959
            {
                StDate = rtc.now().day();
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	42 96       	adiw	r24, 0x12	; 18
    1fa4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    1fa8:	8c 89       	ldd	r24, Y+20	; 0x14
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <StDate+0x1>
    1fb0:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:960
                StMonth = rtc.now().month();
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	42 96       	adiw	r24, 0x12	; 18
    1fb8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <StMonth+0x1>
    1fc4:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:961
                StYear = rtc.now().year();
    1fc8:	ce 01       	movw	r24, r28
    1fca:	42 96       	adiw	r24, 0x12	; 18
    1fcc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    1fd0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	80 53       	subi	r24, 0x30	; 48
    1fd6:	98 4f       	sbci	r25, 0xF8	; 248
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:961
    1fd8:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <StYear+0x1>
    1fdc:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <StYear>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:963
            }
            lcd.print(strbuf);
    1fe0:	87 eb       	ldi	r24, 0xB7	; 183
    1fe2:	94 e0       	ldi	r25, 0x04	; 4
    1fe4:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:964
            lcd.setCursor(0, 1);
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:965
            lcd.print(" ");
    1ff0:	86 e6       	ldi	r24, 0x66	; 102
    1ff2:	92 e0       	ldi	r25, 0x02	; 2
    1ff4:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:966
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    1ff8:	81 2f       	mov	r24, r17
    1ffa:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    1ffe:	ab cf       	rjmp	.-170    	; 0x1f56 <refreshMenuDisplay(unsigned char)+0x68>

00002000 <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	2f 93       	push	r18
    200c:	3f 93       	push	r19
    200e:	8f 93       	push	r24
    2010:	9f 93       	push	r25
    2012:	af 93       	push	r26
    2014:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    2016:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <timer0_millis>
    201a:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <timer0_millis+0x1>
    201e:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <timer0_millis+0x2>
    2022:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    2026:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    202a:	23 e0       	ldi	r18, 0x03	; 3
    202c:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    202e:	2d 37       	cpi	r18, 0x7D	; 125
    2030:	68 f1       	brcs	.+90     	; 0x208c <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    2032:	26 e8       	ldi	r18, 0x86	; 134
    2034:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    2036:	02 96       	adiw	r24, 0x02	; 2
    2038:	a1 1d       	adc	r26, r1
    203a:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    203c:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    2040:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <timer0_millis>
    2044:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <timer0_millis+0x1>
    2048:	a0 93 5f 03 	sts	0x035F, r26	; 0x80035f <timer0_millis+0x2>
    204c:	b0 93 60 03 	sts	0x0360, r27	; 0x800360 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    2050:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_overflow_count>
    2054:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_overflow_count+0x1>
    2058:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_overflow_count+0x2>
    205c:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_overflow_count+0x3>
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	a1 1d       	adc	r26, r1
    2064:	b1 1d       	adc	r27, r1
    2066:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <timer0_overflow_count>
    206a:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <timer0_overflow_count+0x1>
    206e:	a0 93 63 03 	sts	0x0363, r26	; 0x800363 <timer0_overflow_count+0x2>
    2072:	b0 93 64 03 	sts	0x0364, r27	; 0x800364 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    2076:	bf 91       	pop	r27
    2078:	af 91       	pop	r26
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	3f 91       	pop	r19
    2080:	2f 91       	pop	r18
    2082:	0f 90       	pop	r0
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	0f 90       	pop	r0
    2088:	1f 90       	pop	r1
    208a:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	a1 1d       	adc	r26, r1
    2090:	b1 1d       	adc	r27, r1
    2092:	d4 cf       	rjmp	.-88     	; 0x203c <__vector_16+0x3c>

00002094 <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    20b6:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <SoftwareSerial::active_object>
    20ba:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <SoftwareSerial::active_object+0x1>
    20be:	30 97       	sbiw	r30, 0x00	; 0
    20c0:	49 f0       	breq	.+18     	; 0x20d4 <__vector_3+0x40>
    20c2:	a6 85       	ldd	r26, Z+14	; 0x0e
    20c4:	b7 85       	ldd	r27, Z+15	; 0x0f
    20c6:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    20c8:	96 8d       	ldd	r25, Z+30	; 0x1e
    20ca:	91 ff       	sbrs	r25, 1
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    20ce:	9c 91       	ld	r25, X
    20d0:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    20d2:	a1 f4       	brne	.+40     	; 0x20fc <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    20d4:	ff 91       	pop	r31
    20d6:	ef 91       	pop	r30
    20d8:	bf 91       	pop	r27
    20da:	af 91       	pop	r26
    20dc:	9f 91       	pop	r25
    20de:	8f 91       	pop	r24
    20e0:	7f 91       	pop	r23
    20e2:	6f 91       	pop	r22
    20e4:	5f 91       	pop	r21
    20e6:	4f 91       	pop	r20
    20e8:	3f 91       	pop	r19
    20ea:	2f 91       	pop	r18
    20ec:	0f 90       	pop	r0
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	0f 90       	pop	r0
    20f2:	1f 90       	pop	r1
    20f4:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    20f6:	9c 91       	ld	r25, X
    20f8:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    20fa:	61 f7       	brne	.-40     	; 0x20d4 <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    20fc:	a3 89       	ldd	r26, Z+19	; 0x13
    20fe:	b4 89       	ldd	r27, Z+20	; 0x14
    2100:	9c 91       	ld	r25, X
    2102:	85 89       	ldd	r24, Z+21	; 0x15
    2104:	80 95       	com	r24
    2106:	89 23       	and	r24, r25
    2108:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    210a:	86 89       	ldd	r24, Z+22	; 0x16
    210c:	97 89       	ldd	r25, Z+23	; 0x17
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2112:	60 8d       	ldd	r22, Z+24	; 0x18
    2114:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2116:	a6 85       	ldd	r26, Z+14	; 0x0e
    2118:	b7 85       	ldd	r27, Z+15	; 0x0f
    211a:	55 85       	ldd	r21, Z+13	; 0x0d
    211c:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    211e:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2120:	cb 01       	movw	r24, r22
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2126:	82 2f       	mov	r24, r18
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	95 95       	asr	r25
    212c:	87 95       	ror	r24
    212e:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2130:	4c 91       	ld	r20, X
    2132:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    2134:	09 f0       	breq	.+2      	; 0x2138 <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    2136:	20 68       	ori	r18, 0x80	; 128
    2138:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    213a:	91 f7       	brne	.-28     	; 0x2120 <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    213c:	86 8d       	ldd	r24, Z+30	; 0x1e
    213e:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    2140:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2142:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	8f 73       	andi	r24, 0x3F	; 63
    214c:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    214e:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <SoftwareSerial::_receive_buffer_head>
    2152:	38 17       	cp	r19, r24
    2154:	99 f0       	breq	.+38     	; 0x217c <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2156:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	a4 5e       	subi	r26, 0xE4	; 228
    215e:	bc 4f       	sbci	r27, 0xFC	; 252
    2160:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    2162:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2166:	82 8d       	ldd	r24, Z+26	; 0x1a
    2168:	93 8d       	ldd	r25, Z+27	; 0x1b
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    216e:	a3 89       	ldd	r26, Z+19	; 0x13
    2170:	b4 89       	ldd	r27, Z+20	; 0x14
    2172:	8c 91       	ld	r24, X
    2174:	95 89       	ldd	r25, Z+21	; 0x15
    2176:	89 2b       	or	r24, r25
    2178:	8c 93       	st	X, r24
    217a:	ac cf       	rjmp	.-168    	; 0x20d4 <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    217c:	86 8d       	ldd	r24, Z+30	; 0x1e
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	86 8f       	std	Z+30, r24	; 0x1e
    2182:	f1 cf       	rjmp	.-30     	; 0x2166 <__vector_3+0xd2>

00002184 <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    2184:	1f 92       	push	r1
    2186:	0f 92       	push	r0
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	0f 92       	push	r0
    218c:	11 24       	eor	r1, r1
    218e:	2f 93       	push	r18
    2190:	3f 93       	push	r19
    2192:	4f 93       	push	r20
    2194:	5f 93       	push	r21
    2196:	6f 93       	push	r22
    2198:	7f 93       	push	r23
    219a:	8f 93       	push	r24
    219c:	9f 93       	push	r25
    219e:	af 93       	push	r26
    21a0:	bf 93       	push	r27
    21a2:	ef 93       	push	r30
    21a4:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    21a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    21aa:	88 7f       	andi	r24, 0xF8	; 248
    21ac:	80 36       	cpi	r24, 0x60	; 96
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <__vector_24+0x2e>
    21b0:	4a c0       	rjmp	.+148    	; 0x2246 <__vector_24+0xc2>
    21b2:	f0 f5       	brcc	.+124    	; 0x2230 <__vector_24+0xac>
    21b4:	88 32       	cpi	r24, 0x28	; 40
    21b6:	09 f4       	brne	.+2      	; 0x21ba <__vector_24+0x36>
    21b8:	a7 c0       	rjmp	.+334    	; 0x2308 <__vector_24+0x184>
    21ba:	18 f5       	brcc	.+70     	; 0x2202 <__vector_24+0x7e>
    21bc:	80 31       	cpi	r24, 0x10	; 16
    21be:	09 f4       	brne	.+2      	; 0x21c2 <__vector_24+0x3e>
    21c0:	9b c0       	rjmp	.+310    	; 0x22f8 <__vector_24+0x174>
    21c2:	b8 f4       	brcc	.+46     	; 0x21f2 <__vector_24+0x6e>
    21c4:	88 23       	and	r24, r24
    21c6:	09 f4       	brne	.+2      	; 0x21ca <__vector_24+0x46>
    21c8:	f9 c0       	rjmp	.+498    	; 0x23bc <__vector_24+0x238>
    21ca:	88 30       	cpi	r24, 0x08	; 8
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <__vector_24+0x4c>
    21ce:	94 c0       	rjmp	.+296    	; 0x22f8 <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    21d0:	ff 91       	pop	r31
    21d2:	ef 91       	pop	r30
    21d4:	bf 91       	pop	r27
    21d6:	af 91       	pop	r26
    21d8:	9f 91       	pop	r25
    21da:	8f 91       	pop	r24
    21dc:	7f 91       	pop	r23
    21de:	6f 91       	pop	r22
    21e0:	5f 91       	pop	r21
    21e2:	4f 91       	pop	r20
    21e4:	3f 91       	pop	r19
    21e6:	2f 91       	pop	r18
    21e8:	0f 90       	pop	r0
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	0f 90       	pop	r0
    21ee:	1f 90       	pop	r1
    21f0:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21f2:	88 31       	cpi	r24, 0x18	; 24
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_24+0x74>
    21f6:	88 c0       	rjmp	.+272    	; 0x2308 <__vector_24+0x184>
    21f8:	80 32       	cpi	r24, 0x20	; 32
    21fa:	51 f7       	brne	.-44     	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21fc:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <twi_error>
    2200:	14 c0       	rjmp	.+40     	; 0x222a <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2202:	80 34       	cpi	r24, 0x40	; 64
    2204:	09 f4       	brne	.+2      	; 0x2208 <__vector_24+0x84>
    2206:	9d c0       	rjmp	.+314    	; 0x2342 <__vector_24+0x1be>
    2208:	40 f4       	brcc	.+16     	; 0x221a <__vector_24+0x96>
    220a:	80 33       	cpi	r24, 0x30	; 48
    220c:	b9 f3       	breq	.-18     	; 0x21fc <__vector_24+0x78>
    220e:	88 33       	cpi	r24, 0x38	; 56
    2210:	f9 f6       	brne	.-66     	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2212:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2216:	85 ec       	ldi	r24, 0xC5	; 197
    2218:	b0 c0       	rjmp	.+352    	; 0x237a <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    221a:	80 35       	cpi	r24, 0x50	; 80
    221c:	09 f4       	brne	.+2      	; 0x2220 <__vector_24+0x9c>
    221e:	85 c0       	rjmp	.+266    	; 0x232a <__vector_24+0x1a6>
    2220:	88 35       	cpi	r24, 0x58	; 88
    2222:	09 f4       	brne	.+2      	; 0x2226 <__vector_24+0xa2>
    2224:	96 c0       	rjmp	.+300    	; 0x2352 <__vector_24+0x1ce>
    2226:	88 34       	cpi	r24, 0x48	; 72
    2228:	99 f6       	brne	.-90     	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    222a:	0e 94 52 06 	call	0xca4	; 0xca4 <twi_stop>
    222e:	d0 cf       	rjmp	.-96     	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2230:	88 39       	cpi	r24, 0x98	; 152
    2232:	09 f4       	brne	.+2      	; 0x2236 <__vector_24+0xb2>
    2234:	8c c0       	rjmp	.+280    	; 0x234e <__vector_24+0x1ca>
    2236:	38 f5       	brcc	.+78     	; 0x2286 <__vector_24+0x102>
    2238:	88 37       	cpi	r24, 0x78	; 120
    223a:	29 f0       	breq	.+10     	; 0x2246 <__vector_24+0xc2>
    223c:	50 f4       	brcc	.+20     	; 0x2252 <__vector_24+0xce>
    223e:	88 36       	cpi	r24, 0x68	; 104
    2240:	11 f0       	breq	.+4      	; 0x2246 <__vector_24+0xc2>
    2242:	80 37       	cpi	r24, 0x70	; 112
    2244:	29 f6       	brne	.-118    	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    224c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <twi_rxBufferIndex>
    2250:	57 c0       	rjmp	.+174    	; 0x2300 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2252:	88 38       	cpi	r24, 0x88	; 136
    2254:	09 f4       	brne	.+2      	; 0x2258 <__vector_24+0xd4>
    2256:	7b c0       	rjmp	.+246    	; 0x234e <__vector_24+0x1ca>
    2258:	80 39       	cpi	r24, 0x90	; 144
    225a:	19 f0       	breq	.+6      	; 0x2262 <__vector_24+0xde>
    225c:	80 38       	cpi	r24, 0x80	; 128
    225e:	09 f0       	breq	.+2      	; 0x2262 <__vector_24+0xde>
    2260:	b7 cf       	rjmp	.-146    	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2262:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <twi_rxBufferIndex>
    2266:	80 32       	cpi	r24, 0x20	; 32
    2268:	08 f0       	brcs	.+2      	; 0x226c <__vector_24+0xe8>
    226a:	71 c0       	rjmp	.+226    	; 0x234e <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    226c:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_rxBufferIndex>
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	8e 0f       	add	r24, r30
    2274:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_rxBufferIndex>
    2278:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	e5 50       	subi	r30, 0x05	; 5
    2280:	fd 4f       	sbci	r31, 0xFD	; 253
    2282:	80 83       	st	Z, r24
    2284:	3d c0       	rjmp	.+122    	; 0x2300 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2286:	80 3b       	cpi	r24, 0xB0	; 176
    2288:	39 f0       	breq	.+14     	; 0x2298 <__vector_24+0x114>
    228a:	e0 f4       	brcc	.+56     	; 0x22c4 <__vector_24+0x140>
    228c:	80 3a       	cpi	r24, 0xA0	; 160
    228e:	09 f4       	brne	.+2      	; 0x2292 <__vector_24+0x10e>
    2290:	79 c0       	rjmp	.+242    	; 0x2384 <__vector_24+0x200>
    2292:	88 3a       	cpi	r24, 0xA8	; 168
    2294:	09 f0       	breq	.+2      	; 0x2298 <__vector_24+0x114>
    2296:	9c cf       	rjmp	.-200    	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    229e:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22a2:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22a6:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <twi_onSlaveTransmit>
    22aa:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <twi_onSlaveTransmit+0x1>
    22ae:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22b0:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <twi_txBufferLength>
    22b4:	81 11       	cpse	r24, r1
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    22be:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_txBuffer>
    22c2:	09 c0       	rjmp	.+18     	; 0x22d6 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    22c4:	80 3c       	cpi	r24, 0xC0	; 192
    22c6:	09 f4       	brne	.+2      	; 0x22ca <__vector_24+0x146>
    22c8:	a6 cf       	rjmp	.-180    	; 0x2216 <__vector_24+0x92>
    22ca:	88 3c       	cpi	r24, 0xC8	; 200
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <__vector_24+0x14c>
    22ce:	a3 cf       	rjmp	.-186    	; 0x2216 <__vector_24+0x92>
    22d0:	88 3b       	cpi	r24, 0xB8	; 184
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <__vector_24+0x152>
    22d4:	7d cf       	rjmp	.-262    	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22d6:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <twi_txBufferIndex>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	8e 0f       	add	r24, r30
    22de:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_txBufferIndex>
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	e7 52       	subi	r30, 0x27	; 39
    22e6:	fd 4f       	sbci	r31, 0xFD	; 253
    22e8:	80 81       	ld	r24, Z
    22ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22ee:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <twi_txBufferIndex>
    22f2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <twi_txBufferLength>
    22f6:	29 c0       	rjmp	.+82     	; 0x234a <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    22f8:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2300:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2302:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2306:	64 cf       	rjmp	.-312    	; 0x21d0 <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2308:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <twi_masterBufferIndex>
    230c:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <twi_masterBufferLength>
    2310:	98 17       	cp	r25, r24
    2312:	58 f5       	brcc	.+86     	; 0x236a <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2314:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <twi_masterBufferIndex>
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	8e 0f       	add	r24, r30
    231c:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <twi_masterBufferIndex>
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	e3 5a       	subi	r30, 0xA3	; 163
    2324:	fb 4f       	sbci	r31, 0xFB	; 251
    2326:	80 81       	ld	r24, Z
    2328:	e9 cf       	rjmp	.-46     	; 0x22fc <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    232a:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <twi_masterBufferIndex>
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	8e 0f       	add	r24, r30
    2332:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <twi_masterBufferIndex>
    2336:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	e3 5a       	subi	r30, 0xA3	; 163
    233e:	fb 4f       	sbci	r31, 0xFB	; 251
    2340:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2342:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <twi_masterBufferIndex>
    2346:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    234a:	98 17       	cp	r25, r24
    234c:	c8 f2       	brcs	.-78     	; 0x2300 <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    234e:	85 e8       	ldi	r24, 0x85	; 133
    2350:	d8 cf       	rjmp	.-80     	; 0x2302 <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2352:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <twi_masterBufferIndex>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	8e 0f       	add	r24, r30
    235a:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <twi_masterBufferIndex>
    235e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	e3 5a       	subi	r30, 0xA3	; 163
    2366:	fb 4f       	sbci	r31, 0xFB	; 251
    2368:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    236a:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <twi_sendStop>
    236e:	81 11       	cpse	r24, r1
    2370:	5c cf       	rjmp	.-328    	; 0x222a <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2378:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    237a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    237e:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_state>
    2382:	26 cf       	rjmp	.-436    	; 0x21d0 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2384:	85 ec       	ldi	r24, 0xC5	; 197
    2386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    238a:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    238e:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <twi_rxBufferIndex>
    2392:	80 32       	cpi	r24, 0x20	; 32
    2394:	30 f4       	brcc	.+12     	; 0x23a2 <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2396:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_rxBufferIndex>
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	e5 50       	subi	r30, 0x05	; 5
    239e:	fd 4f       	sbci	r31, 0xFD	; 253
    23a0:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    23a2:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <twi_rxBufferIndex>
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <twi_onSlaveReceive>
    23ac:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <twi_onSlaveReceive+0x1>
    23b0:	8b ef       	ldi	r24, 0xFB	; 251
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    23b6:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <twi_rxBufferIndex>
    23ba:	0a cf       	rjmp	.-492    	; 0x21d0 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23bc:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <twi_error>
    23c0:	34 cf       	rjmp	.-408    	; 0x222a <__vector_24+0xa6>

000023c2 <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569>:
_GLOBAL__I_65535_0_ChantBellv2.3.ino.cpp.o.3569():
    23c2:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <Wire+0x3>
    23c6:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <Wire+0x2>
    23ca:	88 ee       	ldi	r24, 0xE8	; 232
    23cc:	93 e0       	ldi	r25, 0x03	; 3
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <Wire+0x4>
    23d6:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <Wire+0x5>
    23da:	a0 93 ea 04 	sts	0x04EA, r26	; 0x8004ea <Wire+0x6>
    23de:	b0 93 eb 04 	sts	0x04EB, r27	; 0x8004eb <Wire+0x7>
    23e2:	22 e8       	ldi	r18, 0x82	; 130
    23e4:	31 e0       	ldi	r19, 0x01	; 1
    23e6:	30 93 e5 04 	sts	0x04E5, r19	; 0x8004e5 <Wire+0x1>
    23ea:	20 93 e4 04 	sts	0x04E4, r18	; 0x8004e4 <Wire>
    23ee:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <mySoftwareSerial+0x3>
    23f2:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <mySoftwareSerial+0x2>
    23f6:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <mySoftwareSerial+0x4>
    23fa:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <mySoftwareSerial+0x5>
    23fe:	a0 93 76 05 	sts	0x0576, r26	; 0x800576 <mySoftwareSerial+0x6>
    2402:	b0 93 77 05 	sts	0x0577, r27	; 0x800577 <mySoftwareSerial+0x7>
    2406:	80 ea       	ldi	r24, 0xA0	; 160
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <mySoftwareSerial+0x1>
    240e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <mySoftwareSerial>
    2412:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <mySoftwareSerial+0x17>
    2416:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <mySoftwareSerial+0x16>
    241a:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <mySoftwareSerial+0x19>
    241e:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <mySoftwareSerial+0x18>
    2422:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <mySoftwareSerial+0x1b>
    2426:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <mySoftwareSerial+0x1a>
    242a:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <mySoftwareSerial+0x1d>
    242e:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <mySoftwareSerial+0x1c>
    2432:	60 91 8e 05 	lds	r22, 0x058E	; 0x80058e <mySoftwareSerial+0x1e>
    2436:	6e 7f       	andi	r22, 0xFE	; 254
    2438:	6d 7f       	andi	r22, 0xFD	; 253
    243a:	60 93 8e 05 	sts	0x058E, r22	; 0x80058e <mySoftwareSerial+0x1e>
    243e:	66 95       	lsr	r22
    2440:	61 70       	andi	r22, 0x01	; 1
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	68 27       	eor	r22, r24
    2446:	83 e0       	ldi	r24, 0x03	; 3
    2448:	0e 94 e6 02 	call	0x5cc	; 0x5cc <digitalWrite>
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
    2454:	ee ef       	ldi	r30, 0xFE	; 254
    2456:	f2 e0       	ldi	r31, 0x02	; 2
    2458:	e4 91       	lpm	r30, Z
    245a:	e0 93 80 05 	sts	0x0580, r30	; 0x800580 <mySoftwareSerial+0x10>
    245e:	e7 ee       	ldi	r30, 0xE7	; 231
    2460:	f2 e0       	ldi	r31, 0x02	; 2
    2462:	e4 91       	lpm	r30, Z
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	e6 52       	subi	r30, 0x26	; 38
    246c:	fd 4f       	sbci	r31, 0xFD	; 253
    246e:	85 91       	lpm	r24, Z+
    2470:	94 91       	lpm	r25, Z
    2472:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <mySoftwareSerial+0x12>
    2476:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <mySoftwareSerial+0x11>
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
    2482:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <mySoftwareSerial+0x1e>
    2486:	81 fd       	sbrc	r24, 1
    2488:	04 c0       	rjmp	.+8      	; 0x2492 <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0xd0>
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <digitalWrite>
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <mySoftwareSerial+0xc>
    2498:	ed ef       	ldi	r30, 0xFD	; 253
    249a:	f2 e0       	ldi	r31, 0x02	; 2
    249c:	e4 91       	lpm	r30, Z
    249e:	e0 93 7d 05 	sts	0x057D, r30	; 0x80057d <mySoftwareSerial+0xd>
    24a2:	e6 ee       	ldi	r30, 0xE6	; 230
    24a4:	f2 e0       	ldi	r31, 0x02	; 2
    24a6:	e4 91       	lpm	r30, Z
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	e0 53       	subi	r30, 0x30	; 48
    24b0:	fd 4f       	sbci	r31, 0xFD	; 253
    24b2:	25 91       	lpm	r18, Z+
    24b4:	34 91       	lpm	r19, Z
    24b6:	30 93 7f 05 	sts	0x057F, r19	; 0x80057f <mySoftwareSerial+0xf>
    24ba:	20 93 7e 05 	sts	0x057E, r18	; 0x80057e <mySoftwareSerial+0xe>
    24be:	44 ef       	ldi	r20, 0xF4	; 244
    24c0:	51 e0       	ldi	r21, 0x01	; 1
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	40 93 50 05 	sts	0x0550, r20	; 0x800550 <myDFPlayer+0x6>
    24ca:	50 93 51 05 	sts	0x0551, r21	; 0x800551 <myDFPlayer+0x7>
    24ce:	60 93 52 05 	sts	0x0552, r22	; 0x800552 <myDFPlayer+0x8>
    24d2:	70 93 53 05 	sts	0x0553, r23	; 0x800553 <myDFPlayer+0x9>
    24d6:	9a e0       	ldi	r25, 0x0A	; 10
    24d8:	eb e1       	ldi	r30, 0x1B	; 27
    24da:	f1 e0       	ldi	r31, 0x01	; 1
    24dc:	ae e5       	ldi	r26, 0x5E	; 94
    24de:	b5 e0       	ldi	r27, 0x05	; 5
    24e0:	01 90       	ld	r0, Z+
    24e2:	0d 92       	st	X+, r0
    24e4:	9a 95       	dec	r25
    24e6:	e1 f7       	brne	.-8      	; 0x24e0 <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0x11e>
    24e8:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myDFPlayer+0x1e>
    24ec:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <myDFPlayer+0x1f>
    24f0:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <myDFPlayer+0x24>
    24f4:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myDFPlayer+0x25>
    24f8:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <lcd+0x3>
    24fc:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <lcd+0x2>
    2500:	24 e9       	ldi	r18, 0x94	; 148
    2502:	31 e0       	ldi	r19, 0x01	; 1
    2504:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <lcd+0x1>
    2508:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <lcd>
    250c:	97 e2       	ldi	r25, 0x27	; 39
    250e:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <lcd+0x4>
    2512:	90 e1       	ldi	r25, 0x10	; 16
    2514:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <lcd+0x9>
    2518:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <lcd+0xa>
    251c:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <lcd+0xb>
    2520:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <bell+0x5>
    2524:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <bell+0x4>
    2528:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <bell+0x3>
    252c:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <bell>
    2530:	e5 ec       	ldi	r30, 0xC5	; 197
    2532:	f2 e0       	ldi	r31, 0x02	; 2
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	8c 30       	cpi	r24, 0x0C	; 12
    2538:	51 f0       	breq	.+20     	; 0x254e <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0x18c>
    253a:	94 91       	lpm	r25, Z
    253c:	82 30       	cpi	r24, 0x02	; 2
    253e:	09 f4       	brne	.+2      	; 0x2542 <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0x180>
    2540:	9f 5f       	subi	r25, 0xFF	; 255
    2542:	21 e0       	ldi	r18, 0x01	; 1
    2544:	28 0f       	add	r18, r24
    2546:	31 96       	adiw	r30, 0x01	; 1
    2548:	99 23       	and	r25, r25
    254a:	09 f4       	brne	.+2      	; 0x254e <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0x18c>
    254c:	4d c0       	rjmp	.+154    	; 0x25e8 <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0x226>
    254e:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <bell+0x1>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <bell+0x2>
    2558:	64 ed       	ldi	r22, 0xD4	; 212
    255a:	71 e0       	ldi	r23, 0x01	; 1
    255c:	80 ef       	ldi	r24, 0xF0	; 240
    255e:	94 e0       	ldi	r25, 0x04	; 4
    2560:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    2564:	68 ed       	ldi	r22, 0xD8	; 216
    2566:	71 e0       	ldi	r23, 0x01	; 1
    2568:	86 ef       	ldi	r24, 0xF6	; 246
    256a:	94 e0       	ldi	r25, 0x04	; 4
    256c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    2570:	6c ed       	ldi	r22, 0xDC	; 220
    2572:	71 e0       	ldi	r23, 0x01	; 1
    2574:	8c ef       	ldi	r24, 0xFC	; 252
    2576:	94 e0       	ldi	r25, 0x04	; 4
    2578:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    257c:	60 ee       	ldi	r22, 0xE0	; 224
    257e:	71 e0       	ldi	r23, 0x01	; 1
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	95 e0       	ldi	r25, 0x05	; 5
    2584:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    2588:	64 ee       	ldi	r22, 0xE4	; 228
    258a:	71 e0       	ldi	r23, 0x01	; 1
    258c:	88 e0       	ldi	r24, 0x08	; 8
    258e:	95 e0       	ldi	r25, 0x05	; 5
    2590:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    2594:	68 ee       	ldi	r22, 0xE8	; 232
    2596:	71 e0       	ldi	r23, 0x01	; 1
    2598:	8e e0       	ldi	r24, 0x0E	; 14
    259a:	95 e0       	ldi	r25, 0x05	; 5
    259c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    25a0:	6c ee       	ldi	r22, 0xEC	; 236
    25a2:	71 e0       	ldi	r23, 0x01	; 1
    25a4:	84 e1       	ldi	r24, 0x14	; 20
    25a6:	95 e0       	ldi	r25, 0x05	; 5
    25a8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    25ac:	60 ef       	ldi	r22, 0xF0	; 240
    25ae:	71 e0       	ldi	r23, 0x01	; 1
    25b0:	8a e1       	ldi	r24, 0x1A	; 26
    25b2:	95 e0       	ldi	r25, 0x05	; 5
    25b4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    25b8:	64 ef       	ldi	r22, 0xF4	; 244
    25ba:	71 e0       	ldi	r23, 0x01	; 1
    25bc:	80 e2       	ldi	r24, 0x20	; 32
    25be:	95 e0       	ldi	r25, 0x05	; 5
    25c0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    25c4:	68 ef       	ldi	r22, 0xF8	; 248
    25c6:	71 e0       	ldi	r23, 0x01	; 1
    25c8:	86 e2       	ldi	r24, 0x26	; 38
    25ca:	95 e0       	ldi	r25, 0x05	; 5
    25cc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    25d0:	6c ef       	ldi	r22, 0xFC	; 252
    25d2:	71 e0       	ldi	r23, 0x01	; 1
    25d4:	8c e2       	ldi	r24, 0x2C	; 44
    25d6:	95 e0       	ldi	r25, 0x05	; 5
    25d8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	72 e0       	ldi	r23, 0x02	; 2
    25e0:	82 e3       	ldi	r24, 0x32	; 50
    25e2:	95 e0       	ldi	r25, 0x05	; 5
    25e4:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <String::String(char const*)>
    25e8:	82 2f       	mov	r24, r18
    25ea:	a5 cf       	rjmp	.-182    	; 0x2536 <global constructors keyed to 65535_0_ChantBellv2.3.ino.cpp.o.3569+0x174>

000025ec <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	c1 54       	subi	r28, 0x41	; 65
    25f6:	d1 09       	sbc	r29, r1
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2602:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2604:	84 b5       	in	r24, 0x24	; 36
    2606:	83 60       	ori	r24, 0x03	; 3
    2608:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    260a:	85 b5       	in	r24, 0x25	; 37
    260c:	83 60       	ori	r24, 0x03	; 3
    260e:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2610:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    2614:	81 60       	ori	r24, 0x01	; 1
    2616:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2620:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2624:	81 60       	ori	r24, 0x01	; 1
    2626:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    262a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    262e:	81 60       	ori	r24, 0x01	; 1
    2630:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2634:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    2638:	84 60       	ori	r24, 0x04	; 4
    263a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    263e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2642:	81 60       	ori	r24, 0x01	; 1
    2644:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    2648:	87 e8       	ldi	r24, 0x87	; 135
    264a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    264e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    2652:	80 e4       	ldi	r24, 0x40	; 64
    2654:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    2658:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    265c:	80 64       	ori	r24, 0x40	; 64
    265e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    2662:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2666:	86 fd       	sbrc	r24, 6
    2668:	fc cf       	rjmp	.-8      	; 0x2662 <main+0x76>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    266a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    266e:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    2672:	76 2f       	mov	r23, r22
    2674:	68 2f       	mov	r22, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:81
byte processMenuCommand(byte cmdId);
void showTime();

void setup()
{
    randomSeed(analogRead(A0));
    2676:	07 2e       	mov	r0, r23
    2678:	00 0c       	add	r0, r0
    267a:	88 0b       	sbc	r24, r24
    267c:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    267e:	61 15       	cp	r22, r1
    2680:	71 05       	cpc	r23, r1
    2682:	81 05       	cpc	r24, r1
    2684:	91 05       	cpc	r25, r1
    2686:	11 f0       	breq	.+4      	; 0x268c <main+0xa0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    2688:	0e 94 ef 22 	call	0x45de	; 0x45de <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:83
    char intstr[5];
    pinMode(AMP, OUTPUT);
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	8c e0       	ldi	r24, 0x0C	; 12
    2690:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:84
    pinMode(STA_PIN, INPUT_PULLUP);
    2694:	62 e0       	ldi	r22, 0x02	; 2
    2696:	84 e0       	ldi	r24, 0x04	; 4
    2698:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:85
    pinMode(SELECT_BUT, INPUT_PULLUP);
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	85 e0       	ldi	r24, 0x05	; 5
    26a0:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:86
    pinMode(UP_BUT, INPUT_PULLUP);
    26a4:	62 e0       	ldi	r22, 0x02	; 2
    26a6:	86 e0       	ldi	r24, 0x06	; 6
    26a8:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:87
    pinMode(DOWN_BUT, INPUT_PULLUP);
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	87 e0       	ldi	r24, 0x07	; 7
    26b0:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:88
    pinMode(BACK_BUT, INPUT_PULLUP);
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	88 e0       	ldi	r24, 0x08	; 8
    26b8:	0e 94 46 03 	call	0x68c	; 0x68c <pinMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:89
    Wire.begin();
    26bc:	0e 94 14 03 	call	0x628	; 0x628 <TwoWire::begin() [clone .constprop.43]>
load():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:194
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    26c0:	4b e4       	ldi	r20, 0x4B	; 75
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	87 ed       	ldi	r24, 0xD7	; 215
    26ca:	93 e0       	ldi	r25, 0x03	; 3
    26cc:	0e 94 34 23 	call	0x4668	; 0x4668 <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:195
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    26d0:	6b e2       	ldi	r22, 0x2B	; 43
    26d2:	71 e0       	ldi	r23, 0x01	; 1
    26d4:	87 ed       	ldi	r24, 0xD7	; 215
    26d6:	93 e0       	ldi	r25, 0x03	; 3
    26d8:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <strcmp>
    26dc:	89 2b       	or	r24, r25
    26de:	09 f4       	brne	.+2      	; 0x26e2 <main+0xf6>
    26e0:	89 c0       	rjmp	.+274    	; 0x27f4 <main+0x208>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:13
const char* Alarm[] = {"12AM","1AM", "2AM", "3AM", "4AM","5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM",
                       "12PM","1PM", "2PM", "3PM", "4PM","5PM", "6PM", "7PM", "8PM", "9PM", "10PM", "11PM",};
const char* Panchangam[] = {"5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM"};
void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    26e2:	6b e2       	ldi	r22, 0x2B	; 43
    26e4:	71 e0       	ldi	r23, 0x01	; 1
    26e6:	87 ed       	ldi	r24, 0xD7	; 215
    26e8:	93 e0       	ldi	r25, 0x03	; 3
    26ea:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:14
  Song1_Count = 100;
    26ee:	84 e6       	ldi	r24, 0x64	; 100
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <config+0x19>
    26f6:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:15
  Song2_Count = 100;
    26fa:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <config+0x1b>
    26fe:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:16
  startTime = 5; //5AM
    2702:	85 e0       	ldi	r24, 0x05	; 5
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x10>
    270a:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:17
  endTime = 22; // 10PM
    270e:	86 e1       	ldi	r24, 0x16	; 22
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x12>
    2716:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:18
  vol = 20;
    271a:	84 e1       	ldi	r24, 0x14	; 20
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <config+0x16>
    2722:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:19
  backLightDur = 20;
    2726:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <config+0x14>
    272a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:20
  MorSong1Time = 3;
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <config+0x21>
    2736:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <config+0x20>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:21
  EveSong1Time = 3;
    273a:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <config+0x25>
    273e:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:22
  MorSongNo = 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <config+0x29>
    274a:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:23
  EveSongNo = 2;
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <config+0x2b>
    2756:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:24
  SchlZone = 0;
    275a:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:25
  SerialNo = 340;
    275e:	84 e5       	ldi	r24, 0x54	; 84
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <config+0x1f>
    2766:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:26
  DataYear = 2022;
    276a:	86 ee       	ldi	r24, 0xE6	; 230
    276c:	97 e0       	ldi	r25, 0x07	; 7
    276e:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <config+0x1d>
    2772:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:28

  AlarmTime[0] = 0;
    2776:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:29
  AlarmTime[1] = 0;
    277a:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <config+0x2d>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:30
  AlarmTime[2] = 0;
    277e:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:31
  AlarmTime[3] = 0;
    2782:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <config+0x2f>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:32
  AlarmTime[4] = 0;
    2786:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <config+0x30>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:33
  AlarmTime[5] = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <config+0x31>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:34
  AlarmTime[6] = 1;
    2790:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <config+0x32>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:35
  AlarmTime[7] = 1;
    2794:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <config+0x33>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:36
  AlarmTime[8] = 1;
    2798:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <config+0x34>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:37
  AlarmTime[9] = 1;
    279c:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <config+0x35>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:38
  AlarmTime[10] = 1;
    27a0:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <config+0x36>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:39
  AlarmTime[11] = 1;
    27a4:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <config+0x37>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:40
  AlarmTime[12] = 1;
    27a8:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <config+0x38>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:41
  AlarmTime[13] = 1;
    27ac:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <config+0x39>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:42
  AlarmTime[14] = 1;
    27b0:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <config+0x3a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:43
  AlarmTime[15] = 1;
    27b4:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <config+0x3b>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:44
  AlarmTime[16] = 1;
    27b8:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <config+0x3c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:45
  AlarmTime[17] = 1;
    27bc:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:46
  AlarmTime[18] = 1;
    27c0:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <config+0x3e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:47
  AlarmTime[19] = 1;
    27c4:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <config+0x3f>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:48
  AlarmTime[20] = 1;
    27c8:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <config+0x40>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:49
  AlarmTime[21] = 1;
    27cc:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <config+0x41>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:50
  AlarmTime[22] = 1;
    27d0:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <config+0x42>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:51
  AlarmTime[23] = 0;
    27d4:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <config+0x43>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:53

  PanchangamTime[0] = 0;
    27d8:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <config+0x44>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:54
  PanchangamTime[1] = 1;
    27dc:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <config+0x45>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:55
  PanchangamTime[2] = 0;
    27e0:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <config+0x46>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:56
  PanchangamTime[3] = 1;
    27e4:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <config+0x47>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:57
  PanchangamTime[4] = 0;
    27e8:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <config+0x48>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:58
  PanchangamTime[5] = 1;
    27ec:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <config+0x49>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:59
  PanchangamTime[6] = 0;
    27f0:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <config+0x4a>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    27f4:	0e 94 14 03 	call	0x628	; 0x628 <TwoWire::begin() [clone .constprop.43]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    27f8:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    27fc:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	18 f0       	brcs	.+6      	; 0x280a <main+0x21e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    2804:	98 e0       	ldi	r25, 0x08	; 8
    2806:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    280a:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    280e:	62 e3       	ldi	r22, 0x32	; 50
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    281a:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <lcd+0xb>
    281e:	8e e3       	ldi	r24, 0x3E	; 62
    2820:	95 e0       	ldi	r25, 0x05	; 5
    2822:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    2826:	68 ee       	ldi	r22, 0xE8	; 232
    2828:	73 e0       	ldi	r23, 0x03	; 3
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2832:	60 e3       	ldi	r22, 0x30	; 48
    2834:	8e e3       	ldi	r24, 0x3E	; 62
    2836:	95 e0       	ldi	r25, 0x05	; 5
    2838:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    283c:	84 e9       	ldi	r24, 0x94	; 148
    283e:	91 e1       	ldi	r25, 0x11	; 17
    2840:	0e 94 82 03 	call	0x704	; 0x704 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    2844:	60 e3       	ldi	r22, 0x30	; 48
    2846:	8e e3       	ldi	r24, 0x3E	; 62
    2848:	95 e0       	ldi	r25, 0x05	; 5
    284a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    284e:	84 e9       	ldi	r24, 0x94	; 148
    2850:	91 e1       	ldi	r25, 0x11	; 17
    2852:	0e 94 82 03 	call	0x704	; 0x704 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    2856:	60 e3       	ldi	r22, 0x30	; 48
    2858:	8e e3       	ldi	r24, 0x3E	; 62
    285a:	95 e0       	ldi	r25, 0x05	; 5
    285c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    2860:	86 e9       	ldi	r24, 0x96	; 150
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 82 03 	call	0x704	; 0x704 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2868:	60 e2       	ldi	r22, 0x20	; 32
    286a:	8e e3       	ldi	r24, 0x3E	; 62
    286c:	95 e0       	ldi	r25, 0x05	; 5
    286e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2872:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <lcd+0x5>
    2876:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	8e e3       	ldi	r24, 0x3E	; 62
    287c:	95 e0       	ldi	r25, 0x05	; 5
    287e:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2882:	84 e0       	ldi	r24, 0x04	; 4
    2884:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	6c e0       	ldi	r22, 0x0C	; 12
    288c:	8e e3       	ldi	r24, 0x3E	; 62
    288e:	95 e0       	ldi	r25, 0x05	; 5
    2890:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    2894:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2898:	f2 e0       	ldi	r31, 0x02	; 2
    289a:	ff 2e       	mov	r15, r31
    289c:	f0 92 45 05 	sts	0x0545, r15	; 0x800545 <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	66 e0       	ldi	r22, 0x06	; 6
    28a4:	8e e3       	ldi	r24, 0x3E	; 62
    28a6:	95 e0       	ldi	r25, 0x05	; 5
    28a8:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	62 e0       	ldi	r22, 0x02	; 2
    28b0:	8e e3       	ldi	r24, 0x3E	; 62
    28b2:	95 e0       	ldi	r25, 0x05	; 5
    28b4:	0e 94 38 07 	call	0xe70	; 0xe70 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    28b8:	80 ed       	ldi	r24, 0xD0	; 208
    28ba:	97 e0       	ldi	r25, 0x07	; 7
    28bc:	0e 94 82 03 	call	0x704	; 0x704 <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    28c0:	88 e0       	ldi	r24, 0x08	; 8
    28c2:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	8e e3       	ldi	r24, 0x3E	; 62
    28ca:	95 e0       	ldi	r25, 0x05	; 5
    28cc:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:93
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	85 e0       	ldi	r24, 0x05	; 5
    28d4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:94
    lcd.print(F("QTRON"));
    28d8:	88 ea       	ldi	r24, 0xA8	; 168
    28da:	92 e0       	ldi	r25, 0x02	; 2
    28dc:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:95
    lcd.setCursor(0, 1);
    28e0:	61 e0       	ldi	r22, 0x01	; 1
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:96
    lcd.print(F("DEVOTIONAL CLOCK"));
    28e8:	87 e9       	ldi	r24, 0x97	; 151
    28ea:	92 e0       	ldi	r25, 0x02	; 2
    28ec:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:97
    delay(2000);
    28f0:	60 ed       	ldi	r22, 0xD0	; 208
    28f2:	77 e0       	ldi	r23, 0x07	; 7
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:98
    lcd.clear();
    28fc:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:99
    lcd.setCursor(0, 0);
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:100
    inttostr(intstr, config.DataYear);
    2908:	60 91 f3 03 	lds	r22, 0x03F3	; 0x8003f3 <config+0x1c>
    290c:	70 91 f4 03 	lds	r23, 0x03F4	; 0x8003f4 <config+0x1d>
    2910:	3e 01       	movw	r6, r28
    2912:	23 e1       	ldi	r18, 0x13	; 19
    2914:	62 0e       	add	r6, r18
    2916:	71 1c       	adc	r7, r1
    2918:	c3 01       	movw	r24, r6
    291a:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:101
    lcd.print(fmt(strbuf, 2, "Ver : 2.3/", intstr));
    291e:	7f 92       	push	r7
    2920:	6f 92       	push	r6
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	92 e0       	ldi	r25, 0x02	; 2
    2926:	9f 93       	push	r25
    2928:	8f 93       	push	r24
    292a:	ff 92       	push	r15
    292c:	07 eb       	ldi	r16, 0xB7	; 183
    292e:	14 e0       	ldi	r17, 0x04	; 4
    2930:	1f 93       	push	r17
    2932:	0f 93       	push	r16
    2934:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    2938:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:102
    lcd.setCursor(0, 1);
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:103
    inttostr(intstr, config.SerialNo);
    2944:	60 91 f5 03 	lds	r22, 0x03F5	; 0x8003f5 <config+0x1e>
    2948:	70 91 f6 03 	lds	r23, 0x03F6	; 0x8003f6 <config+0x1f>
    294c:	c3 01       	movw	r24, r6
    294e:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:104
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    2952:	7f 92       	push	r7
    2954:	6f 92       	push	r6
    2956:	8f e0       	ldi	r24, 0x0F	; 15
    2958:	92 e0       	ldi	r25, 0x02	; 2
    295a:	9f 93       	push	r25
    295c:	8f 93       	push	r24
    295e:	ff 92       	push	r15
    2960:	1f 93       	push	r17
    2962:	0f 93       	push	r16
    2964:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    2968:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:105
    delay(1000);
    296c:	68 ee       	ldi	r22, 0xE8	; 232
    296e:	73 e0       	ldi	r23, 0x03	; 3
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:106
    lcd.clear();
    2978:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:107
    lcd.setCursor(3, 0);
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:108
    lcd.print("Loading...");
    2984:	8d e1       	ldi	r24, 0x1D	; 29
    2986:	92 e0       	ldi	r25, 0x02	; 2
    2988:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:110

    if (!digitalRead(SELECT_BUT))
    298c:	85 e0       	ldi	r24, 0x05	; 5
    298e:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	89 2b       	or	r24, r25
    299e:	f1 f5       	brne	.+124    	; 0x2a1c <main+0x430>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:112
    {
        lcd.setCursor(0, 1);
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:113
        lcd.print("Service Mode");
    29a8:	88 e2       	ldi	r24, 0x28	; 40
    29aa:	92 e0       	ldi	r25, 0x02	; 2
    29ac:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:114
        serviceMode = true;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <serviceMode>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    29b6:	68 e6       	ldi	r22, 0x68	; 104
    29b8:	e6 2e       	mov	r14, r22
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    29ba:	74 ee       	ldi	r23, 0xE4	; 228
    29bc:	c7 2e       	mov	r12, r23
    29be:	74 e0       	ldi	r23, 0x04	; 4
    29c0:	d7 2e       	mov	r13, r23
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    29c2:	e0 e2       	ldi	r30, 0x20	; 32
    29c4:	ae 2e       	mov	r10, r30
    29c6:	b1 2c       	mov	r11, r1
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;
    29c8:	ff 24       	eor	r15, r15
    29ca:	f3 94       	inc	r15
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:15
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS1307::begin(TwoWire *wireInstance) {
  if (i2c_dev)
    29cc:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rtc>
    29d0:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rtc+0x1>
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	11 f0       	breq	.+4      	; 0x29dc <main+0x3f0>
operator delete():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    29d8:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
operator new():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    29dc:	86 e0       	ldi	r24, 0x06	; 6
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 47 24 	call	0x488e	; 0x488e <malloc>
    29e4:	8c 01       	movw	r16, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    29e6:	fc 01       	movw	r30, r24
    29e8:	e0 82       	st	Z, r14
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    29ea:	d2 82       	std	Z+2, r13	; 0x02
    29ec:	c1 82       	std	Z+1, r12	; 0x01
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:13
  _begun = false;
    29ee:	13 82       	std	Z+3, r1	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    29f0:	b5 82       	std	Z+5, r11	; 0x05
    29f2:	a4 82       	std	Z+4, r10	; 0x04
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:17
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(DS1307_ADDRESS, wireInstance);
    29f4:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <rtc+0x1>
    29f8:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <rtc>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
    29fc:	0e 94 14 03 	call	0x628	; 0x628 <TwoWire::begin() [clone .constprop.43]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
    2a00:	f8 01       	movw	r30, r16
    2a02:	f3 82       	std	Z+3, r15	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
    2a04:	c8 01       	movw	r24, r16
    2a06:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Adafruit_I2CDevice::detected()>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:18
  if (!i2c_dev->begin())
    2a0a:	81 11       	cpse	r24, r1
    2a0c:	0a c0       	rjmp	.+20     	; 0x2a22 <main+0x436>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:122
    {
        serviceMode = false;
    }
    while (!rtc.begin())
    {
        lcd.clear();
    2a0e:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:123
        lcd.print(F("ERR 01")); // Couldn't find RTC
    2a12:	80 e9       	ldi	r24, 0x90	; 144
    2a14:	92 e0       	ldi	r25, 0x02	; 2
    2a16:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
    2a1a:	d8 cf       	rjmp	.-80     	; 0x29cc <main+0x3e0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:118
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    2a1c:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <serviceMode>
    2a20:	ca cf       	rjmp	.-108    	; 0x29b6 <main+0x3ca>
    2a22:	1c aa       	std	Y+52, r1	; 0x34
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:80
    @return value of register
*/
/**************************************************************************/
uint8_t RTC_I2C::read_register(uint8_t reg) {
  uint8_t buffer[1];
  i2c_dev->write(&reg, 1);
    2a24:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rtc>
    2a28:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	24 81       	ldd	r18, Z+4	; 0x04
    2a30:	35 81       	ldd	r19, Z+5	; 0x05
    2a32:	23 2b       	or	r18, r19
    2a34:	89 f0       	breq	.+34     	; 0x2a58 <main+0x46c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    2a36:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2a38:	f0 92 82 04 	sts	0x0482, r15	; 0x800482 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    2a3c:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2a40:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    2a44:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <TwoWire::txBufferLength>
write():
    2a48:	21 e0       	ldi	r18, 0x01	; 1
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	be 01       	movw	r22, r28
    2a50:	6c 5c       	subi	r22, 0xCC	; 204
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	0e 94 0f 06 	call	0xc1e	; 0xc1e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:81
  i2c_dev->read(buffer, 1);
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	0f 5f       	subi	r16, 0xFF	; 255
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	b8 01       	movw	r22, r16
    2a64:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rtc>
    2a68:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rtc+0x1>
    2a6c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.83]>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:82
  return buffer[0];
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:29
/*!
    @brief  Is the DS1307 running? Check the Clock Halt bit in register 0
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) { return !(read_register(0) >> 7); }
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	88 0f       	add	r24, r24
    2a76:	89 2f       	mov	r24, r25
    2a78:	88 1f       	adc	r24, r24
    2a7a:	99 0b       	sbc	r25, r25
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:128
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    // if (rtc.lostPower())

    if (!rtc.isrunning())
    2a7c:	89 2b       	or	r24, r25
    2a7e:	61 f0       	breq	.+24     	; 0x2a98 <main+0x4ac>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:130
    {
        lcd.clear();
    2a80:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:131
        lcd.print(F("ERR 02"));
    2a84:	89 e8       	ldi	r24, 0x89	; 137
    2a86:	92 e0       	ldi	r25, 0x02	; 2
    2a88:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:132
        delay(2000);
    2a8c:	60 ed       	ldi	r22, 0xD0	; 208
    2a8e:	77 e0       	ldi	r23, 0x07	; 7
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2a98:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <mySoftwareSerial+0x1b>
    2a9c:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <mySoftwareSerial+0x1a>
    2aa0:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <mySoftwareSerial+0x19>
    2aa4:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <mySoftwareSerial+0x18>
    2aa8:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <mySoftwareSerial+0x17>
    2aac:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2ab0:	8d e9       	ldi	r24, 0x9D	; 157
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <mySoftwareSerial+0x1d>
    2ab8:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2abc:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <mySoftwareSerial+0xc>
    2ac0:	87 31       	cpi	r24, 0x17	; 23
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <main+0x4da>
    2ac4:	4b c0       	rjmp	.+150    	; 0x2b5c <main+0x570>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2ac6:	2d eb       	ldi	r18, 0xBD	; 189
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	30 93 87 05 	sts	0x0587, r19	; 0x800587 <mySoftwareSerial+0x17>
    2ace:	20 93 86 05 	sts	0x0586, r18	; 0x800586 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2ad2:	2b e9       	ldi	r18, 0x9B	; 155
    2ad4:	31 e0       	ldi	r19, 0x01	; 1
    2ad6:	30 93 89 05 	sts	0x0589, r19	; 0x800589 <mySoftwareSerial+0x19>
    2ada:	20 93 88 05 	sts	0x0588, r18	; 0x800588 <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2ade:	2c e2       	ldi	r18, 0x2C	; 44
    2ae0:	31 e0       	ldi	r19, 0x01	; 1
    2ae2:	30 93 8b 05 	sts	0x058B, r19	; 0x80058b <mySoftwareSerial+0x1b>
    2ae6:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2aea:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    2aee:	94 e0       	ldi	r25, 0x04	; 4
begin():
    2af0:	88 30       	cpi	r24, 0x08	; 8
    2af2:	54 f0       	brlt	.+20     	; 0x2b08 <main+0x51c>
main():
    2af4:	91 e0       	ldi	r25, 0x01	; 1
begin():
    2af6:	8e 30       	cpi	r24, 0x0E	; 14
    2af8:	3c f0       	brlt	.+14     	; 0x2b08 <main+0x51c>
main():
    2afa:	92 e0       	ldi	r25, 0x02	; 2
begin():
    2afc:	84 31       	cpi	r24, 0x14	; 20
    2afe:	24 f0       	brlt	.+8      	; 0x2b08 <main+0x51c>
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	86 31       	cpi	r24, 0x16	; 22
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <main+0x51c>
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	92 2b       	or	r25, r18
    2b0a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b0e:	2d e6       	ldi	r18, 0x6D	; 109
    2b10:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2b12:	88 30       	cpi	r24, 0x08	; 8
    2b14:	74 f0       	brlt	.+28     	; 0x2b32 <main+0x546>
    2b16:	8e 30       	cpi	r24, 0x0E	; 14
    2b18:	0c f4       	brge	.+2      	; 0x2b1c <main+0x530>
    2b1a:	7f c0       	rjmp	.+254    	; 0x2c1a <main+0x62e>
    2b1c:	84 31       	cpi	r24, 0x14	; 20
    2b1e:	3c f0       	brlt	.+14     	; 0x2b2e <main+0x542>
    2b20:	86 31       	cpi	r24, 0x16	; 22
    2b22:	0c f4       	brge	.+2      	; 0x2b26 <main+0x53a>
    2b24:	7a c0       	rjmp	.+244    	; 0x2c1a <main+0x62e>
main():
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	20 e0       	ldi	r18, 0x00	; 0
begin():
    2b2a:	86 31       	cpi	r24, 0x16	; 22
    2b2c:	11 f4       	brne	.+4      	; 0x2b32 <main+0x546>
main():
    2b2e:	2c e6       	ldi	r18, 0x6C	; 108
    2b30:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2b32:	30 93 84 05 	sts	0x0584, r19	; 0x800584 <mySoftwareSerial+0x14>
    2b36:	20 93 83 05 	sts	0x0583, r18	; 0x800583 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b3a:	88 30       	cpi	r24, 0x08	; 8
    2b3c:	0c f0       	brlt	.+2      	; 0x2b40 <main+0x554>
    2b3e:	70 c0       	rjmp	.+224    	; 0x2c20 <main+0x634>
    2b40:	91 e0       	ldi	r25, 0x01	; 1
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <main+0x55a>
    2b44:	99 0f       	add	r25, r25
    2b46:	8a 95       	dec	r24
    2b48:	ea f7       	brpl	.-6      	; 0x2b44 <main+0x558>
    2b4a:	89 2f       	mov	r24, r25
    2b4c:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2b50:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mySoftwareSerial+0x1c>
    2b54:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <mySoftwareSerial+0x1d>
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <main+0x56c>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    2b5c:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <mySoftwareSerial+0x1a>
    2b60:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <mySoftwareSerial+0x1b>
    2b64:	89 2b       	or	r24, r25
    2b66:	49 f1       	breq	.+82     	; 0x2bba <main+0x5ce>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    2b68:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <SoftwareSerial::active_object>
    2b6c:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <SoftwareSerial::active_object+0x1>
    2b70:	25 e0       	ldi	r18, 0x05	; 5
    2b72:	e0 37       	cpi	r30, 0x70	; 112
    2b74:	f2 07       	cpc	r31, r18
    2b76:	09 f1       	breq	.+66     	; 0x2bba <main+0x5ce>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    2b78:	30 97       	sbiw	r30, 0x00	; 0
    2b7a:	39 f0       	breq	.+14     	; 0x2b8a <main+0x59e>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2b7c:	a3 89       	ldd	r26, Z+19	; 0x13
    2b7e:	b4 89       	ldd	r27, Z+20	; 0x14
    2b80:	9c 91       	ld	r25, X
    2b82:	85 89       	ldd	r24, Z+21	; 0x15
    2b84:	80 95       	com	r24
    2b86:	89 23       	and	r24, r25
    2b88:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    2b8a:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <mySoftwareSerial+0x1e>
    2b8e:	8e 7f       	andi	r24, 0xFE	; 254
    2b90:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    2b94:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <SoftwareSerial::_receive_buffer_tail>
    2b98:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    2b9c:	80 e7       	ldi	r24, 0x70	; 112
    2b9e:	95 e0       	ldi	r25, 0x05	; 5
    2ba0:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <SoftwareSerial::active_object+0x1>
    2ba4:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2ba8:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <mySoftwareSerial+0x13>
    2bac:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <mySoftwareSerial+0x14>
    2bb0:	80 81       	ld	r24, Z
    2bb2:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <mySoftwareSerial+0x15>
    2bb6:	89 2b       	or	r24, r25
    2bb8:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:138
    }
    // Initialize DF Player...............
    // if (digitalRead(BACK_BUT))
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    2bba:	64 ef       	ldi	r22, 0xF4	; 244
    2bbc:	71 e0       	ldi	r23, 0x01	; 1
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2bc6:	40 e7       	ldi	r20, 0x70	; 112
    2bc8:	e4 2e       	mov	r14, r20
    2bca:	45 e0       	ldi	r20, 0x05	; 5
    2bcc:	f4 2e       	mov	r15, r20
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2bce:	dd 24       	eor	r13, r13
    2bd0:	d3 94       	inc	r13
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2bd2:	f0 92 4b 05 	sts	0x054B, r15	; 0x80054b <myDFPlayer+0x1>
    2bd6:	e0 92 4a 05 	sts	0x054A, r14	; 0x80054a <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2bda:	d0 92 62 05 	sts	0x0562, r13	; 0x800562 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	8c e0       	ldi	r24, 0x0C	; 12
    2be4:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    2be8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2bec:	4b 01       	movw	r8, r22
    2bee:	5c 01       	movw	r10, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    2bf0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DFRobotDFPlayerMini::available() [clone .constprop.60]>
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	22 c0       	rjmp	.+68     	; 0x2c3c <main+0x650>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    2bf8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2bfc:	68 19       	sub	r22, r8
    2bfe:	79 09       	sbc	r23, r9
    2c00:	8a 09       	sbc	r24, r10
    2c02:	9b 09       	sbc	r25, r11
    2c04:	61 3d       	cpi	r22, 0xD1	; 209
    2c06:	77 40       	sbci	r23, 0x07	; 7
    2c08:	81 05       	cpc	r24, r1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	b8 f4       	brcc	.+46     	; 0x2c3c <main+0x650>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	70 e0       	ldi	r23, 0x00	; 0
    2c12:	cb 01       	movw	r24, r22
    2c14:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
    2c18:	eb cf       	rjmp	.-42     	; 0x2bf0 <main+0x604>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2c1a:	2b e6       	ldi	r18, 0x6B	; 107
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	89 cf       	rjmp	.-238    	; 0x2b32 <main+0x546>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2c20:	8e 30       	cpi	r24, 0x0E	; 14
    2c22:	14 f4       	brge	.+4      	; 0x2c28 <main+0x63c>
    2c24:	88 50       	subi	r24, 0x08	; 8
    2c26:	8c cf       	rjmp	.-232    	; 0x2b40 <main+0x554>
    2c28:	86 31       	cpi	r24, 0x16	; 22
    2c2a:	14 f4       	brge	.+4      	; 0x2c30 <main+0x644>
    2c2c:	8e 50       	subi	r24, 0x0E	; 14
    2c2e:	88 cf       	rjmp	.-240    	; 0x2b40 <main+0x554>
    2c30:	86 31       	cpi	r24, 0x16	; 22
    2c32:	11 f0       	breq	.+4      	; 0x2c38 <main+0x64c>
main():
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	8a cf       	rjmp	.-236    	; 0x2b4c <main+0x560>
    2c38:	80 e4       	ldi	r24, 0x40	; 64
    2c3a:	88 cf       	rjmp	.-240    	; 0x2b4c <main+0x560>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    2c3c:	68 ec       	ldi	r22, 0xC8	; 200
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    2c48:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    2c4c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    2c50:	84 30       	cpi	r24, 0x04	; 4
    2c52:	59 f0       	breq	.+22     	; 0x2c6a <main+0x67e>
    2c54:	89 30       	cpi	r24, 0x09	; 9
    2c56:	49 f0       	breq	.+18     	; 0x2c6a <main+0x67e>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:141
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.setCursor(0, 0);
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:142
            lcd.print(F("ERR 03"));
    2c60:	82 e8       	ldi	r24, 0x82	; 130
    2c62:	92 e0       	ldi	r25, 0x02	; 2
    2c64:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
    2c68:	b4 cf       	rjmp	.-152    	; 0x2bd2 <main+0x5e6>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    2c6a:	84 ef       	ldi	r24, 0xF4	; 244
    2c6c:	91 e0       	ldi	r25, 0x01	; 1
    2c6e:	a0 e0       	ldi	r26, 0x00	; 0
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <myDFPlayer+0x6>
    2c76:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <myDFPlayer+0x7>
    2c7a:	a0 93 52 05 	sts	0x0552, r26	; 0x800552 <myDFPlayer+0x8>
    2c7e:	b0 93 53 05 	sts	0x0553, r27	; 0x800553 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    2c82:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <config+0x15>
    2c86:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <config+0x16>
    2c8a:	77 27       	eor	r23, r23
    2c8c:	86 e0       	ldi	r24, 0x06	; 6
    2c8e:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    2c92:	62 e0       	ldi	r22, 0x02	; 2
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	89 e0       	ldi	r24, 0x09	; 9
    2c98:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    2c9c:	68 ec       	ldi	r22, 0xC8	; 200
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:148
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    2ca8:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:149
    timrLCD = millis();
    2cac:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2cb0:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <timrLCD>
    2cb4:	70 93 c9 03 	sts	0x03C9, r23	; 0x8003c9 <timrLCD+0x1>
    2cb8:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <timrLCD+0x2>
    2cbc:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:151

    if (serviceMode)
    2cc0:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <serviceMode>
    2cc4:	88 23       	and	r24, r24
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <main+0x6de>
    2cc8:	28 c2       	rjmp	.+1104   	; 0x311a <main+0xb2e>
attach():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2cca:	20 e7       	ldi	r18, 0x70	; 112
    2ccc:	32 e0       	ldi	r19, 0x02	; 2
    2cce:	30 93 c9 04 	sts	0x04C9, r19	; 0x8004c9 <Menu1+0x1>
    2cd2:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2cd6:	83 e0       	ldi	r24, 0x03	; 3
    2cd8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2cdc:	30 93 cc 04 	sts	0x04CC, r19	; 0x8004cc <Menu1+0x4>
    2ce0:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2ce4:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2ce8:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:12
  menuStackCount = 0;
    2cec:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:156
        Menu1.attach(sampleMenu_Root, menuCount(sampleMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    2cf0:	86 e0       	ldi	r24, 0x06	; 6
    2cf2:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2cf6:	89 2b       	or	r24, r25
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <main+0x710>
    2cfa:	f0 c0       	rjmp	.+480    	; 0x2edc <main+0x8f0>
    2cfc:	87 e0       	ldi	r24, 0x07	; 7
    2cfe:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2d02:	89 2b       	or	r24, r25
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <main+0x71c>
    2d06:	ea c0       	rjmp	.+468    	; 0x2edc <main+0x8f0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:158
    {
        pwd = (((long(config.DataYear) + long(config.SerialNo)) * long(config.SerialNo)) % 10000L);
    2d08:	60 91 f5 03 	lds	r22, 0x03F5	; 0x8003f5 <config+0x1e>
    2d0c:	70 91 f6 03 	lds	r23, 0x03F6	; 0x8003f6 <config+0x1f>
    2d10:	07 2e       	mov	r0, r23
    2d12:	00 0c       	add	r0, r0
    2d14:	88 0b       	sbc	r24, r24
    2d16:	99 0b       	sbc	r25, r25
    2d18:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <config+0x1c>
    2d1c:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <config+0x1d>
    2d20:	03 2e       	mov	r0, r19
    2d22:	00 0c       	add	r0, r0
    2d24:	44 0b       	sbc	r20, r20
    2d26:	55 0b       	sbc	r21, r21
    2d28:	26 0f       	add	r18, r22
    2d2a:	37 1f       	adc	r19, r23
    2d2c:	48 1f       	adc	r20, r24
    2d2e:	59 1f       	adc	r21, r25
    2d30:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__mulsi3>
    2d34:	20 e1       	ldi	r18, 0x10	; 16
    2d36:	37 e2       	ldi	r19, 0x27	; 39
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	50 e0       	ldi	r21, 0x00	; 0
    2d3c:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
    2d40:	70 93 7c 03 	sts	0x037C, r23	; 0x80037c <pwd+0x1>
    2d44:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <pwd>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:159
        lcd.clear();
    2d48:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:160
        short Pdigit[] = {0, 0, 0, 0};
    2d4c:	88 e0       	ldi	r24, 0x08	; 8
    2d4e:	f8 01       	movw	r30, r16
    2d50:	11 92       	st	Z+, r1
    2d52:	8a 95       	dec	r24
    2d54:	e9 f7       	brne	.-6      	; 0x2d50 <main+0x764>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:161
        short curPos = 0;
    2d56:	f1 2c       	mov	r15, r1
    2d58:	e1 2c       	mov	r14, r1
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:184
            if (!digitalRead(BACK_BUT))
            {
                break;
            }
            
            typedPwd = (Pdigit[0] * 1000) + (Pdigit[1] * 100) + (Pdigit[2] * 10) + (Pdigit[3] * 1);
    2d5a:	88 ee       	ldi	r24, 0xE8	; 232
    2d5c:	88 2e       	mov	r8, r24
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	98 2e       	mov	r9, r24
    2d62:	94 e6       	ldi	r25, 0x64	; 100
    2d64:	59 2e       	mov	r5, r25
    2d66:	2a e0       	ldi	r18, 0x0A	; 10
    2d68:	42 2e       	mov	r4, r18
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:206
                if (blink)
                {
                    lcd.setCursor(4, 1);
                    inttostr(intstr, typedPwd);
                    lpad(valbuf, intstr, '0', 4);
                    lcd.print(fmt(strbuf,1,valbuf));
    2d6a:	37 eb       	ldi	r19, 0xB7	; 183
    2d6c:	a3 2e       	mov	r10, r19
    2d6e:	34 e0       	ldi	r19, 0x04	; 4
    2d70:	b3 2e       	mov	r11, r19
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:164
        lcd.clear();
        short Pdigit[] = {0, 0, 0, 0};
        short curPos = 0;
        while (true)
        {
            if (!digitalRead(SELECT_BUT))
    2d72:	85 e0       	ldi	r24, 0x05	; 5
    2d74:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2d78:	89 2b       	or	r24, r25
    2d7a:	79 f4       	brne	.+30     	; 0x2d9a <main+0x7ae>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:166
            {
                curPos = ++curPos > 3 ? 0 : curPos;
    2d7c:	ff ef       	ldi	r31, 0xFF	; 255
    2d7e:	ef 1a       	sub	r14, r31
    2d80:	ff 0a       	sbc	r15, r31
    2d82:	24 e0       	ldi	r18, 0x04	; 4
    2d84:	e2 16       	cp	r14, r18
    2d86:	f1 04       	cpc	r15, r1
    2d88:	10 f0       	brcs	.+4      	; 0x2d8e <main+0x7a2>
    2d8a:	f1 2c       	mov	r15, r1
    2d8c:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:167
                delay(300);
    2d8e:	6c e2       	ldi	r22, 0x2C	; 44
    2d90:	71 e0       	ldi	r23, 0x01	; 1
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:169
            }
            if (!digitalRead(UP_BUT))
    2d9a:	86 e0       	ldi	r24, 0x06	; 6
    2d9c:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2da0:	89 2b       	or	r24, r25
    2da2:	c9 f4       	brne	.+50     	; 0x2dd6 <main+0x7ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:171
            {
                Pdigit[curPos] = ++Pdigit[curPos] > 9 ? 0 : Pdigit[curPos];
    2da4:	97 01       	movw	r18, r14
    2da6:	22 0f       	add	r18, r18
    2da8:	33 1f       	adc	r19, r19
    2daa:	f8 01       	movw	r30, r16
    2dac:	e2 0f       	add	r30, r18
    2dae:	f3 1f       	adc	r31, r19
    2db0:	80 81       	ld	r24, Z
    2db2:	91 81       	ldd	r25, Z+1	; 0x01
    2db4:	01 96       	adiw	r24, 0x01	; 1
    2db6:	8a 30       	cpi	r24, 0x0A	; 10
    2db8:	91 05       	cpc	r25, r1
    2dba:	14 f0       	brlt	.+4      	; 0x2dc0 <main+0x7d4>
main():
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
setup():
    2dc0:	20 0f       	add	r18, r16
    2dc2:	31 1f       	adc	r19, r17
    2dc4:	f9 01       	movw	r30, r18
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:172
                delay(300);
    2dca:	6c e2       	ldi	r22, 0x2C	; 44
    2dcc:	71 e0       	ldi	r23, 0x01	; 1
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:174
            }
            if (!digitalRead(DOWN_BUT))
    2dd6:	87 e0       	ldi	r24, 0x07	; 7
    2dd8:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2ddc:	89 2b       	or	r24, r25
    2dde:	c1 f4       	brne	.+48     	; 0x2e10 <main+0x824>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:176
            {
                Pdigit[curPos] = --Pdigit[curPos] < 0 ? 9 : Pdigit[curPos];
    2de0:	97 01       	movw	r18, r14
    2de2:	22 0f       	add	r18, r18
    2de4:	33 1f       	adc	r19, r19
    2de6:	f8 01       	movw	r30, r16
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	97 ff       	sbrs	r25, 7
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <main+0x80e>
main():
    2df6:	89 e0       	ldi	r24, 0x09	; 9
    2df8:	90 e0       	ldi	r25, 0x00	; 0
setup():
    2dfa:	20 0f       	add	r18, r16
    2dfc:	31 1f       	adc	r19, r17
    2dfe:	f9 01       	movw	r30, r18
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:177
                delay(300);
    2e04:	6c e2       	ldi	r22, 0x2C	; 44
    2e06:	71 e0       	ldi	r23, 0x01	; 1
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:179
            }
            if (!digitalRead(BACK_BUT))
    2e10:	88 e0       	ldi	r24, 0x08	; 8
    2e12:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2e16:	89 2b       	or	r24, r25
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <main+0x830>
    2e1a:	60 c0       	rjmp	.+192    	; 0x2edc <main+0x8f0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:184
            {
                break;
            }
            
            typedPwd = (Pdigit[0] * 1000) + (Pdigit[1] * 100) + (Pdigit[2] * 10) + (Pdigit[3] * 1);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	88 9d       	mul	r24, r8
    2e22:	60 01       	movw	r12, r0
    2e24:	89 9d       	mul	r24, r9
    2e26:	d0 0c       	add	r13, r0
    2e28:	98 9d       	mul	r25, r8
    2e2a:	d0 0c       	add	r13, r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e30:	3c 81       	ldd	r19, Y+4	; 0x04
    2e32:	52 9e       	mul	r5, r18
    2e34:	c0 01       	movw	r24, r0
    2e36:	53 9e       	mul	r5, r19
    2e38:	90 0d       	add	r25, r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	c8 0e       	add	r12, r24
    2e3e:	d9 1e       	adc	r13, r25
    2e40:	2d 81       	ldd	r18, Y+5	; 0x05
    2e42:	3e 81       	ldd	r19, Y+6	; 0x06
    2e44:	42 9e       	mul	r4, r18
    2e46:	c0 01       	movw	r24, r0
    2e48:	43 9e       	mul	r4, r19
    2e4a:	90 0d       	add	r25, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	c8 0e       	add	r12, r24
    2e50:	d9 1e       	adc	r13, r25
    2e52:	8f 81       	ldd	r24, Y+7	; 0x07
    2e54:	98 85       	ldd	r25, Y+8	; 0x08
    2e56:	c8 0e       	add	r12, r24
    2e58:	d9 1e       	adc	r13, r25
    2e5a:	d0 92 7a 03 	sts	0x037A, r13	; 0x80037a <typedPwd+0x1>
    2e5e:	c0 92 79 03 	sts	0x0379, r12	; 0x800379 <typedPwd>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:186

            lcd.setCursor(0, 0);
    2e62:	60 e0       	ldi	r22, 0x00	; 0
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:187
            lcd.print(F(" ENTER PASSWORD "));
    2e6a:	85 e3       	ldi	r24, 0x35	; 53
    2e6c:	92 e0       	ldi	r25, 0x02	; 2
    2e6e:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:189

            if (pwd   == typedPwd)
    2e72:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <pwd>
    2e76:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <pwd+0x1>
    2e7a:	c8 16       	cp	r12, r24
    2e7c:	d9 06       	cpc	r13, r25
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <main+0x896>
    2e80:	54 c1       	rjmp	.+680    	; 0x312a <main+0xb3e>
attach():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2e82:	29 e2       	ldi	r18, 0x29	; 41
    2e84:	32 e0       	ldi	r19, 0x02	; 2
    2e86:	30 93 c9 04 	sts	0x04C9, r19	; 0x8004c9 <Menu1+0x1>
    2e8a:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2e94:	30 93 cc 04 	sts	0x04CC, r19	; 0x8004cc <Menu1+0x4>
    2e98:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2e9c:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2ea0:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:12
  menuStackCount = 0;
    2ea4:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:192
            {
                Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
                appMode = APP_MENU_MODE;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:193
                refreshMenuDisplay(REFRESH_DESCEND);
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:194
                timrLCD = millis();
    2eb4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2eb8:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <timrLCD>
    2ebc:	70 93 c9 03 	sts	0x03C9, r23	; 0x8003c9 <timrLCD+0x1>
    2ec0:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <timrLCD+0x2>
    2ec4:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:195
                timrMNU = millis();
    2ec8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2ecc:	60 93 c4 03 	sts	0x03C4, r22	; 0x8003c4 <timrMNU>
    2ed0:	70 93 c5 03 	sts	0x03C5, r23	; 0x8003c5 <timrMNU+0x1>
    2ed4:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timrMNU+0x2>
    2ed8:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:219
                }
                timr_Time = millis();
            }
        }
    }
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    2edc:	85 e0       	ldi	r24, 0x05	; 5
    2ede:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2ee2:	89 2b       	or	r24, r25
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <main+0x8fc>
    2ee6:	71 c1       	rjmp	.+738    	; 0x31ca <main+0xbde>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:222
        testMode = true;
    else
        testMode = false;
    2ee8:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <testMode>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    2eec:	4e 01       	movw	r8, r28
    2eee:	29 e1       	ldi	r18, 0x19	; 25
    2ef0:	82 0e       	add	r8, r18
    2ef2:	91 1c       	adc	r9, r1
showTime():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:440
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    lpad(h, intbuf, '0', 2);
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	c1 96       	adiw	r24, 0x31	; 49
    2ef8:	9e ab       	std	Y+54, r25	; 0x36
    2efa:	8d ab       	std	Y+53, r24	; 0x35
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:442
    inttostr(intbuf, rtc.now().minute());
    lpad(m, intbuf, '0', 2);
    2efc:	fe 01       	movw	r30, r28
    2efe:	be 96       	adiw	r30, 0x2e	; 46
    2f00:	f8 af       	std	Y+56, r31	; 0x38
    2f02:	ef ab       	std	Y+55, r30	; 0x37
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:444
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);
    2f04:	9e 01       	movw	r18, r28
    2f06:	25 5d       	subi	r18, 0xD5	; 213
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	3a af       	std	Y+58, r19	; 0x3a
    2f0c:	29 af       	std	Y+57, r18	; 0x39
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:450

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));

    inttostr(intbuf, rtc.now().day());
    lpad(dat, intbuf, '0', 2);
    2f0e:	1e 01       	movw	r2, r28
    2f10:	35 e2       	ldi	r19, 0x25	; 37
    2f12:	23 0e       	add	r2, r19
    2f14:	31 1c       	adc	r3, r1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:453
    inttostr(intbuf, rtc.now().year());
    lpad(year, intbuf, '0', 4);
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    2f16:	2e 01       	movw	r4, r28
    2f18:	6f e1       	ldi	r22, 0x1F	; 31
    2f1a:	46 0e       	add	r4, r22
    2f1c:	51 1c       	adc	r5, r1
main():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:213
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2f1e:	ff 24       	eor	r15, r15
    2f20:	f3 94       	inc	r15
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:190

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    2f22:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2f26:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <buttonSampleTime>
    2f2a:	30 91 ac 03 	lds	r19, 0x03AC	; 0x8003ac <buttonSampleTime+0x1>
    2f2e:	40 91 ad 03 	lds	r20, 0x03AD	; 0x8003ad <buttonSampleTime+0x2>
    2f32:	50 91 ae 03 	lds	r21, 0x03AE	; 0x8003ae <buttonSampleTime+0x3>
    2f36:	62 1b       	sub	r22, r18
    2f38:	73 0b       	sbc	r23, r19
    2f3a:	84 0b       	sbc	r24, r20
    2f3c:	95 0b       	sbc	r25, r21
    2f3e:	64 31       	cpi	r22, 0x14	; 20
    2f40:	71 05       	cpc	r23, r1
    2f42:	81 05       	cpc	r24, r1
    2f44:	91 05       	cpc	r25, r1
    2f46:	08 f4       	brcc	.+2      	; 0x2f4a <main+0x95e>
    2f48:	b4 c0       	rjmp	.+360    	; 0x30b2 <main+0xac6>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:192
  {
    buttonSampleTime = millis();
    2f4a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    2f4e:	60 93 ab 03 	sts	0x03AB, r22	; 0x8003ab <buttonSampleTime>
    2f52:	70 93 ac 03 	sts	0x03AC, r23	; 0x8003ac <buttonSampleTime+0x1>
    2f56:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <buttonSampleTime+0x2>
    2f5a:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2f5e:	85 e0       	ldi	r24, 0x05	; 5
    2f60:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2f64:	6c 01       	movw	r12, r24
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:199
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    2f66:	86 e0       	ldi	r24, 0x06	; 6
    2f68:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2f6c:	89 2b       	or	r24, r25
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <main+0x986>
    2f70:	36 c1       	rjmp	.+620    	; 0x31de <main+0xbf2>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:198
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	cd 28       	or	r12, r13
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <main+0x98e>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	81 95       	neg	r24
main():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:199
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    2f7c:	8c af       	std	Y+60, r24	; 0x3c
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:200
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    2f7e:	87 e0       	ldi	r24, 0x07	; 7
    2f80:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2f84:	89 2b       	or	r24, r25
    2f86:	11 f4       	brne	.+4      	; 0x2f8c <main+0x9a0>
main():
    2f88:	92 e0       	ldi	r25, 0x02	; 2
    2f8a:	9c af       	std	Y+60, r25	; 0x3c
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:201
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    2f8c:	88 e0       	ldi	r24, 0x08	; 8
    2f8e:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    2f92:	89 2b       	or	r24, r25
    2f94:	11 f4       	brne	.+4      	; 0x2f9a <main+0x9ae>
main():
    2f96:	e3 e0       	ldi	r30, 0x03	; 3
    2f98:	ec af       	std	Y+60, r30	; 0x3c
    2f9a:	ee e7       	ldi	r30, 0x7E	; 126
    2f9c:	ae 2e       	mov	r10, r30
    2f9e:	e3 e0       	ldi	r30, 0x03	; 3
    2fa0:	be 2e       	mov	r11, r30
    2fa2:	f2 e9       	ldi	r31, 0x92	; 146
    2fa4:	cf 2e       	mov	r12, r31
    2fa6:	f3 e0       	ldi	r31, 0x03	; 3
    2fa8:	df 2e       	mov	r13, r31
    2faa:	26 e2       	ldi	r18, 0x26	; 38
    2fac:	31 e0       	ldi	r19, 0x01	; 1
    2fae:	21 96       	adiw	r28, 0x01	; 1
    2fb0:	3f af       	std	Y+63, r19	; 0x3f
    2fb2:	2e af       	std	Y+62, r18	; 0x3e
    2fb4:	21 97       	sbiw	r28, 0x01	; 1
    2fb6:	86 ea       	ldi	r24, 0xA6	; 166
    2fb8:	93 e0       	ldi	r25, 0x03	; 3
    2fba:	9e af       	std	Y+62, r25	; 0x3e
    2fbc:	8d af       	std	Y+61, r24	; 0x3d
    2fbe:	91 e0       	ldi	r25, 0x01	; 1
    2fc0:	9b af       	std	Y+59, r25	; 0x3b
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:205

    

    byte buttonIdentified = 0;
    2fc2:	22 96       	adiw	r28, 0x02	; 2
    2fc4:	1f ae       	std	Y+63, r1	; 0x3f
    2fc6:	22 97       	sbiw	r28, 0x02	; 2
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:210
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    2fc8:	22 96       	adiw	r28, 0x02	; 2
    2fca:	ef ad       	ldd	r30, Y+63	; 0x3f
    2fcc:	22 97       	sbiw	r28, 0x02	; 2
    2fce:	e1 11       	cpse	r30, r1
    2fd0:	08 c1       	rjmp	.+528    	; 0x31e2 <main+0xbf6>
    2fd2:	21 96       	adiw	r28, 0x01	; 1
    2fd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fd8:	21 97       	sbiw	r28, 0x01	; 1
    2fda:	80 81       	ld	r24, Z
    2fdc:	fc ad       	ldd	r31, Y+60	; 0x3c
    2fde:	8f 13       	cpse	r24, r31
    2fe0:	00 c1       	rjmp	.+512    	; 0x31e2 <main+0xbf6>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:213
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    2fe2:	21 e0       	ldi	r18, 0x01	; 1
    2fe4:	22 96       	adiw	r28, 0x02	; 2
    2fe6:	2f af       	std	Y+63, r18	; 0x3f
    2fe8:	22 97       	sbiw	r28, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:212
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    2fea:	ee 24       	eor	r14, r14
    2fec:	e3 94       	inc	r14
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:222
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    2fee:	ed ad       	ldd	r30, Y+61	; 0x3d
    2ff0:	fe ad       	ldd	r31, Y+62	; 0x3e
    2ff2:	81 91       	ld	r24, Z+
    2ff4:	fe af       	std	Y+62, r31	; 0x3e
    2ff6:	ed af       	std	Y+61, r30	; 0x3d
    2ff8:	8e 15       	cp	r24, r14
    2ffa:	b1 f0       	breq	.+44     	; 0x3028 <main+0xa3c>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:225
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    2ffc:	ee 20       	and	r14, r14
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <main+0xa16>
    3000:	f2 c0       	rjmp	.+484    	; 0x31e6 <main+0xbfa>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:227
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    3002:	8b ad       	ldd	r24, Y+59	; 0x3b
    3004:	0e 94 af 07 	call	0xf5e	; 0xf5e <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:228
          buttonPressTime[i] = millis();
    3008:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    300c:	f6 01       	movw	r30, r12
    300e:	60 83       	st	Z, r22
    3010:	71 83       	std	Z+1, r23	; 0x01
    3012:	82 83       	std	Z+2, r24	; 0x02
    3014:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:229
          buttonHoldTime[i] = buttonPressTime[i];
    3016:	f5 01       	movw	r30, r10
    3018:	60 83       	st	Z, r22
    301a:	71 83       	std	Z+1, r23	; 0x01
    301c:	82 83       	std	Z+2, r24	; 0x02
    301e:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:243
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    3020:	ed ad       	ldd	r30, Y+61	; 0x3d
    3022:	fe ad       	ldd	r31, Y+62	; 0x3e
    3024:	31 97       	sbiw	r30, 0x01	; 1
    3026:	e0 82       	st	Z, r14
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:247
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    3028:	ee 20       	and	r14, r14
    302a:	71 f1       	breq	.+92     	; 0x3088 <main+0xa9c>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:249
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    302c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3030:	f6 01       	movw	r30, r12
    3032:	20 81       	ld	r18, Z
    3034:	31 81       	ldd	r19, Z+1	; 0x01
    3036:	42 81       	ldd	r20, Z+2	; 0x02
    3038:	53 81       	ldd	r21, Z+3	; 0x03
    303a:	62 1b       	sub	r22, r18
    303c:	73 0b       	sbc	r23, r19
    303e:	84 0b       	sbc	r24, r20
    3040:	95 0b       	sbc	r25, r21
    3042:	69 3b       	cpi	r22, 0xB9	; 185
    3044:	7b 40       	sbci	r23, 0x0B	; 11
    3046:	81 05       	cpc	r24, r1
    3048:	91 05       	cpc	r25, r1
    304a:	f0 f0       	brcs	.+60     	; 0x3088 <main+0xa9c>
    304c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3050:	f5 01       	movw	r30, r10
    3052:	20 81       	ld	r18, Z
    3054:	31 81       	ldd	r19, Z+1	; 0x01
    3056:	42 81       	ldd	r20, Z+2	; 0x02
    3058:	53 81       	ldd	r21, Z+3	; 0x03
    305a:	62 1b       	sub	r22, r18
    305c:	73 0b       	sbc	r23, r19
    305e:	84 0b       	sbc	r24, r20
    3060:	95 0b       	sbc	r25, r21
    3062:	6b 3f       	cpi	r22, 0xFB	; 251
    3064:	71 05       	cpc	r23, r1
    3066:	81 05       	cpc	r24, r1
    3068:	91 05       	cpc	r25, r1
    306a:	70 f0       	brcs	.+28     	; 0x3088 <main+0xa9c>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:251
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    306c:	8d ad       	ldd	r24, Y+61	; 0x3d
    306e:	26 ea       	ldi	r18, 0xA6	; 166
    3070:	33 e0       	ldi	r19, 0x03	; 3
    3072:	82 1b       	sub	r24, r18
    3074:	80 68       	ori	r24, 0x80	; 128
    3076:	0e 94 af 07 	call	0xf5e	; 0xf5e <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:252
          buttonHoldTime[i] = millis();
    307a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    307e:	f5 01       	movw	r30, r10
    3080:	60 83       	st	Z, r22
    3082:	71 83       	std	Z+1, r23	; 0x01
    3084:	82 83       	std	Z+2, r24	; 0x02
    3086:	93 83       	std	Z+3, r25	; 0x03
    3088:	fb ad       	ldd	r31, Y+59	; 0x3b
    308a:	ff 5f       	subi	r31, 0xFF	; 255
    308c:	fb af       	std	Y+59, r31	; 0x3b
    308e:	24 e0       	ldi	r18, 0x04	; 4
    3090:	a2 0e       	add	r10, r18
    3092:	b1 1c       	adc	r11, r1
    3094:	34 e0       	ldi	r19, 0x04	; 4
    3096:	c3 0e       	add	r12, r19
    3098:	d1 1c       	adc	r13, r1
    309a:	21 96       	adiw	r28, 0x01	; 1
    309c:	8e ad       	ldd	r24, Y+62	; 0x3e
    309e:	9f ad       	ldd	r25, Y+63	; 0x3f
    30a0:	21 97       	sbiw	r28, 0x01	; 1
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	21 96       	adiw	r28, 0x01	; 1
    30a6:	9f af       	std	Y+63, r25	; 0x3f
    30a8:	8e af       	std	Y+62, r24	; 0x3e
    30aa:	21 97       	sbiw	r28, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:207

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    30ac:	f6 30       	cpi	r31, 0x06	; 6
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <main+0xac6>
    30b0:	8b cf       	rjmp	.-234    	; 0x2fc8 <main+0x9dc>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:172
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    30b2:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <buttonBufferCount>
    30b6:	19 16       	cp	r1, r25
    30b8:	0c f4       	brge	.+2      	; 0x30bc <main+0xad0>
    30ba:	ad c0       	rjmp	.+346    	; 0x3216 <main+0xc2a>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:226
    else
        testMode = false;
}
void loop()
{
    btn = getButton();
    30bc:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <btn>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:170
// ----------------------------------------------------------------------------------------------------
byte getButton ()
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
    30c0:	e1 2c       	mov	r14, r1
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:233
    {
        timrLCD = millis();
        timrMNU = millis();
        lcd.backlight();
    }
    if (millis() - timrLCD > 300)
    30c2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    30c6:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <timrLCD>
    30ca:	30 91 c9 03 	lds	r19, 0x03C9	; 0x8003c9 <timrLCD+0x1>
    30ce:	40 91 ca 03 	lds	r20, 0x03CA	; 0x8003ca <timrLCD+0x2>
    30d2:	50 91 cb 03 	lds	r21, 0x03CB	; 0x8003cb <timrLCD+0x3>
    30d6:	62 1b       	sub	r22, r18
    30d8:	73 0b       	sbc	r23, r19
    30da:	84 0b       	sbc	r24, r20
    30dc:	95 0b       	sbc	r25, r21
    30de:	6d 32       	cpi	r22, 0x2D	; 45
    30e0:	71 40       	sbci	r23, 0x01	; 1
    30e2:	81 05       	cpc	r24, r1
    30e4:	91 05       	cpc	r25, r1
    30e6:	20 f0       	brcs	.+8      	; 0x30f0 <main+0xb04>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:236
    {
        downButPreCount = 0;
        selButPreCount = 0;
    30e8:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <selButPreCount+0x1>
    30ec:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:239
        upButPreCount = 0;
    }
    switch (appMode)
    30f0:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <appMode>
    30f4:	82 30       	cpi	r24, 0x02	; 2
    30f6:	09 f4       	brne	.+2      	; 0x30fa <main+0xb0e>
    30f8:	36 c5       	rjmp	.+2668   	; 0x3b66 <main+0x157a>
    30fa:	08 f0       	brcs	.+2      	; 0x30fe <main+0xb12>
    30fc:	c0 c0       	rjmp	.+384    	; 0x327e <main+0xc92>
    30fe:	88 23       	and	r24, r24
    3100:	09 f4       	brne	.+2      	; 0x3104 <main+0xb18>
    3102:	83 c1       	rjmp	.+774    	; 0x340a <main+0xe1e>
    3104:	81 30       	cpi	r24, 0x01	; 1
    3106:	09 f4       	brne	.+2      	; 0x310a <main+0xb1e>
    3108:	bd c3       	rjmp	.+1914   	; 0x3884 <main+0x1298>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	89 2b       	or	r24, r25
    3110:	09 f4       	brne	.+2      	; 0x3114 <main+0xb28>
    3112:	07 cf       	rjmp	.-498    	; 0x2f22 <main+0x936>
    3114:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3118:	02 cf       	rjmp	.-508    	; 0x2f1e <main+0x932>
attach():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    311a:	26 e4       	ldi	r18, 0x46	; 70
    311c:	32 e0       	ldi	r19, 0x02	; 2
    311e:	30 93 c9 04 	sts	0x04C9, r19	; 0x8004c9 <Menu1+0x1>
    3122:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <Menu1>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    3126:	87 e0       	ldi	r24, 0x07	; 7
    3128:	d7 cd       	rjmp	.-1106   	; 0x2cd8 <main+0x6ec>
setup():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:199
                timrLCD = millis();
                timrMNU = millis();
                break;
            }

            if (millis() - timr_Time > 300)
    312a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    312e:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <timr_Time>
    3132:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <timr_Time+0x1>
    3136:	40 91 ba 03 	lds	r20, 0x03BA	; 0x8003ba <timr_Time+0x2>
    313a:	50 91 bb 03 	lds	r21, 0x03BB	; 0x8003bb <timr_Time+0x3>
    313e:	62 1b       	sub	r22, r18
    3140:	73 0b       	sbc	r23, r19
    3142:	84 0b       	sbc	r24, r20
    3144:	95 0b       	sbc	r25, r21
    3146:	6d 32       	cpi	r22, 0x2D	; 45
    3148:	71 40       	sbci	r23, 0x01	; 1
    314a:	81 05       	cpc	r24, r1
    314c:	91 05       	cpc	r25, r1
    314e:	08 f4       	brcc	.+2      	; 0x3152 <main+0xb66>
    3150:	10 ce       	rjmp	.-992    	; 0x2d72 <main+0x786>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:201
            {
                if (blink)
    3152:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:203
                {
                    lcd.setCursor(4, 1);
    3156:	61 e0       	ldi	r22, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:201
                break;
            }

            if (millis() - timr_Time > 300)
            {
                if (blink)
    3158:	88 23       	and	r24, r24
    315a:	59 f1       	breq	.+86     	; 0x31b2 <main+0xbc6>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:203
                {
                    lcd.setCursor(4, 1);
    315c:	84 e0       	ldi	r24, 0x04	; 4
    315e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:204
                    inttostr(intstr, typedPwd);
    3162:	b6 01       	movw	r22, r12
    3164:	c3 01       	movw	r24, r6
    3166:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:205
                    lpad(valbuf, intstr, '0', 4);
    316a:	44 e0       	ldi	r20, 0x04	; 4
    316c:	b3 01       	movw	r22, r6
    316e:	89 e6       	ldi	r24, 0x69	; 105
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:206
                    lcd.print(fmt(strbuf,1,valbuf));
    3176:	89 e6       	ldi	r24, 0x69	; 105
    3178:	93 e0       	ldi	r25, 0x03	; 3
    317a:	9f 93       	push	r25
    317c:	8f 93       	push	r24
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	8f 93       	push	r24
    3182:	bf 92       	push	r11
    3184:	af 92       	push	r10
    3186:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    318a:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:207
                    blink = false;
    318e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:215
                {
                    lcd.setCursor(curPos + 4, 1);
                    lcd.print(" ");
                    blink = true;
                }
                timr_Time = millis();
    319c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    31a0:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <timr_Time>
    31a4:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <timr_Time+0x1>
    31a8:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <timr_Time+0x2>
    31ac:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <timr_Time+0x3>
    31b0:	e0 cd       	rjmp	.-1088   	; 0x2d72 <main+0x786>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:211
                    lcd.print(fmt(strbuf,1,valbuf));
                    blink = false;
                }
                else
                {
                    lcd.setCursor(curPos + 4, 1);
    31b2:	84 e0       	ldi	r24, 0x04	; 4
    31b4:	8e 0d       	add	r24, r14
    31b6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:212
                    lcd.print(" ");
    31ba:	86 e6       	ldi	r24, 0x66	; 102
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:213
                    blink = true;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    31c8:	e9 cf       	rjmp	.-46     	; 0x319c <main+0xbb0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:219
                }
                timr_Time = millis();
            }
        }
    }
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    31ca:	88 e0       	ldi	r24, 0x08	; 8
    31cc:	0e 94 bd 02 	call	0x57a	; 0x57a <digitalRead>
    31d0:	89 2b       	or	r24, r25
    31d2:	09 f0       	breq	.+2      	; 0x31d6 <main+0xbea>
    31d4:	89 ce       	rjmp	.-750    	; 0x2ee8 <main+0x8fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:220
        testMode = true;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <testMode>
    31dc:	87 ce       	rjmp	.-754    	; 0x2eec <main+0x900>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:199
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	cd ce       	rjmp	.-614    	; 0x2f7c <main+0x990>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:217
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    31e2:	e1 2c       	mov	r14, r1
    31e4:	04 cf       	rjmp	.-504    	; 0x2fee <main+0xa02>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:234
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    31e6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    31ea:	f6 01       	movw	r30, r12
    31ec:	20 81       	ld	r18, Z
    31ee:	31 81       	ldd	r19, Z+1	; 0x01
    31f0:	42 81       	ldd	r20, Z+2	; 0x02
    31f2:	53 81       	ldd	r21, Z+3	; 0x03
    31f4:	62 1b       	sub	r22, r18
    31f6:	73 0b       	sbc	r23, r19
    31f8:	84 0b       	sbc	r24, r20
    31fa:	95 0b       	sbc	r25, r21
    31fc:	69 3b       	cpi	r22, 0xB9	; 185
    31fe:	7b 40       	sbci	r23, 0x0B	; 11
    3200:	81 05       	cpc	r24, r1
    3202:	91 05       	cpc	r25, r1
    3204:	28 f0       	brcs	.+10     	; 0x3210 <main+0xc24>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:236
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    3206:	8b ad       	ldd	r24, Y+59	; 0x3b
    3208:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:240
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    320a:	0e 94 af 07 	call	0xf5e	; 0xf5e <queueButton(unsigned char)>
    320e:	08 cf       	rjmp	.-496    	; 0x3020 <main+0xa34>
    3210:	8b ad       	ldd	r24, Y+59	; 0x3b
    3212:	80 64       	ori	r24, 0x40	; 64
    3214:	fa cf       	rjmp	.-12     	; 0x320a <main+0xc1e>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:174
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    3216:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <button_read_pos>
    321a:	e8 2f       	mov	r30, r24
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	e1 55       	subi	r30, 0x51	; 81
    3220:	fc 4f       	sbci	r31, 0xFC	; 252
    3222:	e0 80       	ld	r14, Z
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:175
    buttonBufferCount--;
    3224:	91 50       	subi	r25, 0x01	; 1
    3226:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:176
    button_read_pos++;
    322a:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:178
    
    if (button_read_pos >= sizeof (buttonBuffer))
    322c:	85 30       	cpi	r24, 0x05	; 5
    322e:	20 f5       	brcc	.+72     	; 0x3278 <main+0xc8c>
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:176
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    3230:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:226
    else
        testMode = false;
}
void loop()
{
    btn = getButton();
    3234:	e0 92 cc 03 	sts	0x03CC, r14	; 0x8003cc <btn>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:227
    if (btn)
    3238:	ee 20       	and	r14, r14
    323a:	09 f4       	brne	.+2      	; 0x323e <main+0xc52>
    323c:	42 cf       	rjmp	.-380    	; 0x30c2 <main+0xad6>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:229
    {
        timrLCD = millis();
    323e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3242:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <timrLCD>
    3246:	70 93 c9 03 	sts	0x03C9, r23	; 0x8003c9 <timrLCD+0x1>
    324a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <timrLCD+0x2>
    324e:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:230
        timrMNU = millis();
    3252:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3256:	60 93 c4 03 	sts	0x03C4, r22	; 0x8003c4 <timrMNU>
    325a:	70 93 c5 03 	sts	0x03C5, r23	; 0x8003c5 <timrMNU+0x1>
    325e:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timrMNU+0x2>
    3262:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    3266:	88 e0       	ldi	r24, 0x08	; 8
    3268:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	8e e3       	ldi	r24, 0x3E	; 62
    3270:	95 e0       	ldi	r25, 0x05	; 5
    3272:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    3276:	25 cf       	rjmp	.-438    	; 0x30c2 <main+0xad6>
getButton():
e:\Arduino\Arduino Git\ChantBellv2.3/LcdKeypad.cpp:180
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    3278:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <button_read_pos>
    327c:	db cf       	rjmp	.-74     	; 0x3234 <main+0xc48>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:239
    {
        downButPreCount = 0;
        selButPreCount = 0;
        upButPreCount = 0;
    }
    switch (appMode)
    327e:	83 30       	cpi	r24, 0x03	; 3
    3280:	09 f4       	brne	.+2      	; 0x3284 <main+0xc98>
    3282:	b2 c2       	rjmp	.+1380   	; 0x37e8 <main+0x11fc>
    3284:	84 30       	cpi	r24, 0x04	; 4
    3286:	09 f0       	breq	.+2      	; 0x328a <main+0xc9e>
    3288:	40 cf       	rjmp	.-384    	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:319
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:320
        lcd.print(F("  RUNNING DEMO  "));
    3292:	84 eb       	ldi	r24, 0xB4	; 180
    3294:	92 e0       	ldi	r25, 0x02	; 2
    3296:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:321
        lcd.setCursor(0, 1);
    329a:	61 e0       	ldi	r22, 0x01	; 1
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:322
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    32a2:	c0 90 07 01 	lds	r12, 0x0107	; 0x800107 <demoTime>
    32a6:	d0 90 08 01 	lds	r13, 0x0108	; 0x800108 <demoTime+0x1>
main():
    32aa:	62 eb       	ldi	r22, 0xB2	; 178
    32ac:	71 e0       	ldi	r23, 0x01	; 1
loop():
    32ae:	9c e0       	ldi	r25, 0x0C	; 12
    32b0:	c9 16       	cp	r12, r25
    32b2:	d1 04       	cpc	r13, r1
    32b4:	14 f4       	brge	.+4      	; 0x32ba <main+0xcce>
main():
    32b6:	69 eb       	ldi	r22, 0xB9	; 185
    32b8:	71 e0       	ldi	r23, 0x01	; 1
loop():
    32ba:	c3 01       	movw	r24, r6
    32bc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
    32c0:	ed e0       	ldi	r30, 0x0D	; 13
    32c2:	ce 16       	cp	r12, r30
    32c4:	d1 04       	cpc	r13, r1
    32c6:	1c f0       	brlt	.+6      	; 0x32ce <main+0xce2>
    32c8:	fc e0       	ldi	r31, 0x0C	; 12
    32ca:	cf 1a       	sub	r12, r31
    32cc:	d1 08       	sbc	r13, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    32ce:	1a 8e       	std	Y+26, r1	; 0x1a
    32d0:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    32d2:	1c 8e       	std	Y+28, r1	; 0x1c
    32d4:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    32d6:	1e 8e       	std	Y+30, r1	; 0x1e
    32d8:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    32da:	4a e0       	ldi	r20, 0x0A	; 10
    32dc:	b8 01       	movw	r22, r16
    32de:	c6 01       	movw	r24, r12
    32e0:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    32e4:	f8 01       	movw	r30, r16
    32e6:	01 90       	ld	r0, Z+
    32e8:	00 20       	and	r0, r0
    32ea:	e9 f7       	brne	.-6      	; 0x32e6 <main+0xcfa>
    32ec:	31 97       	sbiw	r30, 0x01	; 1
    32ee:	6f 01       	movw	r12, r30
    32f0:	c0 1a       	sub	r12, r16
    32f2:	d1 0a       	sbc	r13, r17
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    32f4:	b6 01       	movw	r22, r12
    32f6:	c4 01       	movw	r24, r8
    32f8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <String::reserve(unsigned int)>
    32fc:	81 11       	cpse	r24, r1
    32fe:	ab c2       	rjmp	.+1366   	; 0x3856 <main+0x126a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    3300:	c4 01       	movw	r24, r8
    3302:	0e 94 a6 09 	call	0x134c	; 0x134c <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    3306:	6b e5       	ldi	r22, 0x5B	; 91
    3308:	72 e0       	ldi	r23, 0x02	; 2
    330a:	c8 01       	movw	r24, r16
    330c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:322
    3310:	b4 01       	movw	r22, r8
    3312:	c8 01       	movw	r24, r16
    3314:	0e 94 26 0b 	call	0x164c	; 0x164c <operator+(StringSumHelper const&, String const&)>
    3318:	b3 01       	movw	r22, r6
    331a:	0e 94 26 0b 	call	0x164c	; 0x164c <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    331e:	fc 01       	movw	r30, r24
    3320:	44 81       	ldd	r20, Z+4	; 0x04
    3322:	55 81       	ldd	r21, Z+5	; 0x05
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	8e e3       	ldi	r24, 0x3E	; 62
    332a:	95 e0       	ldi	r25, 0x05	; 5
    332c:	0e 94 67 02 	call	0x4ce	; 0x4ce <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	9a 81       	ldd	r25, Y+2	; 0x02
    3334:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
    3338:	89 8d       	ldd	r24, Y+25	; 0x19
    333a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    333c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
    3340:	8b 89       	ldd	r24, Y+19	; 0x13
    3342:	9c 89       	ldd	r25, Y+20	; 0x14
    3344:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:323
        digitalWrite(AMP, HIGH);
    3348:	61 e0       	ldi	r22, 0x01	; 1
    334a:	8c e0       	ldi	r24, 0x0C	; 12
    334c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:325
        // delay(1000);
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    3350:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <demoTime>
    3354:	c8 01       	movw	r24, r16
    3356:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    335a:	db 80       	ldd	r13, Y+3	; 0x03
    335c:	c3 01       	movw	r24, r6
    335e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3362:	cc 88       	ldd	r12, Y+20	; 0x14
    3364:	c4 01       	movw	r24, r8
    3366:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    336a:	89 8d       	ldd	r24, Y+25	; 0x19
    336c:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <bell>
    3370:	c0 92 39 05 	sts	0x0539, r12	; 0x800539 <bell+0x1>
    3374:	d0 92 3a 05 	sts	0x053A, r13	; 0x80053a <bell+0x2>
    3378:	e0 92 3b 05 	sts	0x053B, r14	; 0x80053b <bell+0x3>
    337c:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <bell+0x4>
    3380:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <bell+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:326
        PlayChant();
    3384:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:327
        if (btn == BUTTON_LEFT_PRESSED)
    3388:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <btn>
    338c:	84 30       	cpi	r24, 0x04	; 4
    338e:	41 f4       	brne	.+16     	; 0x33a0 <main+0xdb4>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:329
        {
            playSong = End_of_Song;
    3390:	88 e0       	ldi	r24, 0x08	; 8
    3392:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	86 e1       	ldi	r24, 0x16	; 22
    339c:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:332
            myDFPlayer.stop();
        }
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    33a0:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <btn>
    33a4:	8f 77       	andi	r24, 0x7F	; 127
    33a6:	82 30       	cpi	r24, 0x02	; 2
    33a8:	09 f0       	breq	.+2      	; 0x33ac <main+0xdc0>
    33aa:	5d c2       	rjmp	.+1210   	; 0x3866 <main+0x127a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:334
        {
            config.vol = ++config.vol > 30 ? 10 : config.vol;
    33ac:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <config+0x15>
    33b0:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <config+0x16>
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	8f 31       	cpi	r24, 0x1F	; 31
    33b8:	91 05       	cpc	r25, r1
    33ba:	14 f0       	brlt	.+4      	; 0x33c0 <main+0xdd4>
main():
    33bc:	8a e0       	ldi	r24, 0x0A	; 10
    33be:	90 e0       	ldi	r25, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:345
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    33c0:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <config+0x16>
    33c4:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:346
            config.save();
    33c8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Config::save() [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:347
            lcd.clear();
    33cc:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:348
            lcd.setCursor(0, 1);
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:349
            lcd.print("VOLUME : ");
    33d8:	88 e6       	ldi	r24, 0x68	; 104
    33da:	92 e0       	ldi	r25, 0x02	; 2
    33dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:350
            lcd.print(config.vol);
    33e0:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <config+0x15>
    33e4:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <config+0x16>
    33e8:	0e 94 06 0a 	call	0x140c	; 0x140c <Print::print(int, int) [clone .constprop.6]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    33ec:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <config+0x15>
    33f0:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <config+0x16>
    33f4:	77 27       	eor	r23, r23
    33f6:	86 e0       	ldi	r24, 0x06	; 6
    33f8:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:352
            myDFPlayer.volume(config.vol);
            delay(100);
    33fc:	64 e6       	ldi	r22, 0x64	; 100
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
    3408:	80 ce       	rjmp	.-768    	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:242
        upButPreCount = 0;
    }
    switch (appMode)
    {
    case APP_NORMAL_MODE:
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    340a:	f1 e8       	ldi	r31, 0x81	; 129
    340c:	ef 12       	cpse	r14, r31
    340e:	94 c1       	rjmp	.+808    	; 0x3738 <main+0x114c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:244
        {
            appMode = APP_MENU_MODE;
    3410:	f0 92 c1 03 	sts	0x03C1, r15	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:245
            refreshMenuDisplay(REFRESH_DESCEND);
    3414:	83 e0       	ldi	r24, 0x03	; 3
    3416:	0e 94 77 0f 	call	0x1eee	; 0x1eee <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:246
            timrMNU = millis();
    341a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    341e:	60 93 c4 03 	sts	0x03C4, r22	; 0x8003c4 <timrMNU>
    3422:	70 93 c5 03 	sts	0x03C5, r23	; 0x8003c5 <timrMNU+0x1>
    3426:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timrMNU+0x2>
    342a:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:260
                lcd.clear();
            }
        }
        // TEST MODE //   
        {
            if (btn == BUTTON_UP_PRESSED && testMode)
    342e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <btn>
    3432:	82 30       	cpi	r24, 0x02	; 2
    3434:	a1 f5       	brne	.+104    	; 0x349e <main+0xeb2>
    3436:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <testMode>
    343a:	88 23       	and	r24, r24
    343c:	81 f1       	breq	.+96     	; 0x349e <main+0xeb2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:262
            {
                timrAmp = millis() - 71000L;
    343e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3442:	68 55       	subi	r22, 0x58	; 88
    3444:	75 41       	sbci	r23, 0x15	; 21
    3446:	81 40       	sbci	r24, 0x01	; 1
    3448:	91 09       	sbc	r25, r1
    344a:	60 93 bc 03 	sts	0x03BC, r22	; 0x8003bc <timrAmp>
    344e:	70 93 bd 03 	sts	0x03BD, r23	; 0x8003bd <timrAmp+0x1>
    3452:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <timrAmp+0x2>
    3456:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:263
                if (rtc.now().minute() < 30)
    345a:	c8 01       	movw	r24, r16
    345c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3460:	8d 81       	ldd	r24, Y+5	; 0x05
    3462:	8e 31       	cpi	r24, 0x1E	; 30
    3464:	08 f0       	brcs	.+2      	; 0x3468 <main+0xe7c>
    3466:	93 c1       	rjmp	.+806    	; 0x378e <main+0x11a2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:264
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
    3468:	c3 01       	movw	r24, r6
    346a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    346e:	ee 88       	ldd	r14, Y+22	; 0x16
    3470:	c4 01       	movw	r24, r8
    3472:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3476:	db 8c       	ldd	r13, Y+27	; 0x1b
    3478:	c2 01       	movw	r24, r4
    347a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    347e:	c8 a0       	ldd	r12, Y+32	; 0x20
    3480:	c1 01       	movw	r24, r2
    3482:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3486:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3488:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    348a:	ca 82       	std	Y+2, r12	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    348c:	db 82       	std	Y+3, r13	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    348e:	ec 82       	std	Y+4, r14	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3490:	8d e1       	ldi	r24, 0x1D	; 29
    3492:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    3494:	87 e3       	ldi	r24, 0x37	; 55
    3496:	8e 83       	std	Y+6, r24	; 0x06
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:266
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3498:	c8 01       	movw	r24, r16
    349a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:269
            }
        }   
        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    349e:	c8 01       	movw	r24, r16
    34a0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	81 11       	cpse	r24, r1
    34a8:	59 c0       	rjmp	.+178    	; 0x355c <main+0xf70>
    34aa:	c3 01       	movw	r24, r6
    34ac:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    34b0:	88 8d       	ldd	r24, Y+24	; 0x18
    34b2:	81 11       	cpse	r24, r1
    34b4:	53 c0       	rjmp	.+166    	; 0x355c <main+0xf70>
    34b6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    34ba:	ab 01       	movw	r20, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <timrAmp>
    34c2:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <timrAmp+0x1>
    34c6:	a0 91 be 03 	lds	r26, 0x03BE	; 0x8003be <timrAmp+0x2>
    34ca:	b0 91 bf 03 	lds	r27, 0x03BF	; 0x8003bf <timrAmp+0x3>
    34ce:	88 5b       	subi	r24, 0xB8	; 184
    34d0:	91 41       	sbci	r25, 0x11	; 17
    34d2:	af 4f       	sbci	r26, 0xFF	; 255
    34d4:	bf 4f       	sbci	r27, 0xFF	; 255
    34d6:	84 17       	cp	r24, r20
    34d8:	95 07       	cpc	r25, r21
    34da:	a6 07       	cpc	r26, r22
    34dc:	b7 07       	cpc	r27, r23
    34de:	f0 f5       	brcc	.+124    	; 0x355c <main+0xf70>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:271
        {
            bell = rtc.now();
    34e0:	c8 01       	movw	r24, r16
    34e2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    34e6:	86 e0       	ldi	r24, 0x06	; 6
    34e8:	f8 01       	movw	r30, r16
    34ea:	a8 e3       	ldi	r26, 0x38	; 56
    34ec:	b5 e0       	ldi	r27, 0x05	; 5
    34ee:	01 90       	ld	r0, Z+
    34f0:	0d 92       	st	X+, r0
    34f2:	8a 95       	dec	r24
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <main+0xf02>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:272
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    34f6:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <bell+0x3>
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <config+0xf>
    3500:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <config+0x10>
    3504:	82 17       	cp	r24, r18
    3506:	93 07       	cpc	r25, r19
    3508:	4c f1       	brlt	.+82     	; 0x355c <main+0xf70>
    350a:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <config+0x11>
    350e:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <config+0x12>
    3512:	28 17       	cp	r18, r24
    3514:	39 07       	cpc	r19, r25
    3516:	14 f1       	brlt	.+68     	; 0x355c <main+0xf70>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:274
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    3518:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <config+0x17>
    351c:	88 23       	and	r24, r24
    351e:	09 f4       	brne	.+2      	; 0x3522 <main+0xf36>
    3520:	4c c1       	rjmp	.+664    	; 0x37ba <main+0x11ce>
    3522:	0e 94 33 02 	call	0x466	; 0x466 <DateTime::dayOfTheWeek() const [clone .constprop.20]>
    3526:	88 23       	and	r24, r24
    3528:	09 f4       	brne	.+2      	; 0x352c <main+0xf40>
    352a:	47 c1       	rjmp	.+654    	; 0x37ba <main+0x11ce>
    352c:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <bell+0x3>
    3530:	8a 50       	subi	r24, 0x0A	; 10
    3532:	87 30       	cpi	r24, 0x07	; 7
    3534:	08 f0       	brcs	.+2      	; 0x3538 <main+0xf4c>
    3536:	41 c1       	rjmp	.+642    	; 0x37ba <main+0x11ce>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:279
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    3538:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:280
                    lcd.setCursor(0,0);
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:281
                    lcd.print("School Zone : ON");
    3544:	85 e3       	ldi	r24, 0x35	; 53
    3546:	92 e0       	ldi	r25, 0x02	; 2
    3548:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:282
                    delay(1000);
    354c:	68 ee       	ldi	r22, 0xE8	; 232
    354e:	73 e0       	ldi	r23, 0x03	; 3
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 b2 03 	call	0x764	; 0x764 <delay>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:290
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    3558:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:294
                }
            }
        }
        if (millis() - timr_Time > 1000)
    355c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3560:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <timr_Time>
    3564:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <timr_Time+0x1>
    3568:	40 91 ba 03 	lds	r20, 0x03BA	; 0x8003ba <timr_Time+0x2>
    356c:	50 91 bb 03 	lds	r21, 0x03BB	; 0x8003bb <timr_Time+0x3>
    3570:	62 1b       	sub	r22, r18
    3572:	73 0b       	sbc	r23, r19
    3574:	84 0b       	sbc	r24, r20
    3576:	95 0b       	sbc	r25, r21
    3578:	69 3e       	cpi	r22, 0xE9	; 233
    357a:	73 40       	sbci	r23, 0x03	; 3
    357c:	81 05       	cpc	r24, r1
    357e:	91 05       	cpc	r25, r1
    3580:	08 f4       	brcc	.+2      	; 0x3584 <main+0xf98>
    3582:	b4 c0       	rjmp	.+360    	; 0x36ec <main+0x1100>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:296
        {
            timr_Time = millis();
    3584:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3588:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <timr_Time>
    358c:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <timr_Time+0x1>
    3590:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <timr_Time+0x2>
    3594:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <timr_Time+0x3>
showTime():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:439
void showTime()
{
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    3598:	c3 01       	movw	r24, r6
    359a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:538
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    359e:	6e 89       	ldd	r22, Y+22	; 0x16
    35a0:	66 23       	and	r22, r22
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <main+0xfba>
    35a4:	1c c1       	rjmp	.+568    	; 0x37de <main+0x11f2>
    35a6:	6c 30       	cpi	r22, 0x0C	; 12
    35a8:	11 f0       	breq	.+4      	; 0x35ae <main+0xfc2>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:540
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    35aa:	08 f0       	brcs	.+2      	; 0x35ae <main+0xfc2>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:541
    return hh - 12;
    35ac:	6c 50       	subi	r22, 0x0C	; 12
showTime():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:439
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	c8 01       	movw	r24, r16
    35b2:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:440
    lpad(h, intbuf, '0', 2);
    35b6:	42 e0       	ldi	r20, 0x02	; 2
    35b8:	b8 01       	movw	r22, r16
    35ba:	ce 01       	movw	r24, r28
    35bc:	c1 96       	adiw	r24, 0x31	; 49
    35be:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:441
    inttostr(intbuf, rtc.now().minute());
    35c2:	c3 01       	movw	r24, r6
    35c4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    35c8:	6f 89       	ldd	r22, Y+23	; 0x17
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	c8 01       	movw	r24, r16
    35ce:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:442
    lpad(m, intbuf, '0', 2);
    35d2:	42 e0       	ldi	r20, 0x02	; 2
    35d4:	b8 01       	movw	r22, r16
    35d6:	ce 01       	movw	r24, r28
    35d8:	8e 96       	adiw	r24, 0x2e	; 46
    35da:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:443
    inttostr(intbuf, rtc.now().second());
    35de:	c3 01       	movw	r24, r6
    35e0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    35e4:	68 8d       	ldd	r22, Y+24	; 0x18
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	c8 01       	movw	r24, r16
    35ea:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:444
    lpad(s, intbuf, '0', 2);
    35ee:	42 e0       	ldi	r20, 0x02	; 2
    35f0:	b8 01       	movw	r22, r16
    35f2:	ce 01       	movw	r24, r28
    35f4:	8b 96       	adiw	r24, 0x2b	; 43
    35f6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:446

    lcd.setCursor(2, 0);
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:447
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    3602:	c3 01       	movw	r24, r6
    3604:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3608:	8e 89       	ldd	r24, Y+22	; 0x16
    360a:	8c 30       	cpi	r24, 0x0C	; 12
    360c:	08 f4       	brcc	.+2      	; 0x3610 <main+0x1024>
    360e:	e9 c0       	rjmp	.+466    	; 0x37e2 <main+0x11f6>
main():
    3610:	81 eb       	ldi	r24, 0xB1	; 177
    3612:	91 e0       	ldi	r25, 0x01	; 1
showTime():
    3614:	9f 93       	push	r25
    3616:	8f 93       	push	r24
    3618:	6a ad       	ldd	r22, Y+58	; 0x3a
    361a:	6f 93       	push	r22
    361c:	89 ad       	ldd	r24, Y+57	; 0x39
    361e:	8f 93       	push	r24
    3620:	86 e4       	ldi	r24, 0x46	; 70
    3622:	92 e0       	ldi	r25, 0x02	; 2
    3624:	9f 93       	push	r25
    3626:	8f 93       	push	r24
    3628:	e8 ad       	ldd	r30, Y+56	; 0x38
    362a:	ef 93       	push	r30
    362c:	ff a9       	ldd	r31, Y+55	; 0x37
    362e:	ff 93       	push	r31
    3630:	9f 93       	push	r25
    3632:	8f 93       	push	r24
    3634:	2e a9       	ldd	r18, Y+54	; 0x36
    3636:	2f 93       	push	r18
    3638:	3d a9       	ldd	r19, Y+53	; 0x35
    363a:	3f 93       	push	r19
    363c:	66 e0       	ldi	r22, 0x06	; 6
    363e:	e6 2e       	mov	r14, r22
    3640:	ef 92       	push	r14
    3642:	77 eb       	ldi	r23, 0xB7	; 183
    3644:	c7 2e       	mov	r12, r23
    3646:	74 e0       	ldi	r23, 0x04	; 4
    3648:	d7 2e       	mov	r13, r23
    364a:	df 92       	push	r13
    364c:	cf 92       	push	r12
    364e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    3652:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:449

    inttostr(intbuf, rtc.now().day());
    3656:	c3 01       	movw	r24, r6
    3658:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    365c:	6d 89       	ldd	r22, Y+21	; 0x15
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	c8 01       	movw	r24, r16
    3662:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:450
    lpad(dat, intbuf, '0', 2);
    3666:	42 e0       	ldi	r20, 0x02	; 2
    3668:	b8 01       	movw	r22, r16
    366a:	c1 01       	movw	r24, r2
    366c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:451
    inttostr(intbuf, rtc.now().year());
    3670:	c3 01       	movw	r24, r6
    3672:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    3676:	6b 89       	ldd	r22, Y+19	; 0x13
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	60 53       	subi	r22, 0x30	; 48
    367c:	78 4f       	sbci	r23, 0xF8	; 248
showTime():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:451
    367e:	c8 01       	movw	r24, r16
    3680:	0e 94 41 0a 	call	0x1482	; 0x1482 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:452
    lpad(year, intbuf, '0', 4);
    3684:	44 e0       	ldi	r20, 0x04	; 4
    3686:	b8 01       	movw	r22, r16
    3688:	c4 01       	movw	r24, r8
    368a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lpad(char*, char const*, char, unsigned char) [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:453
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    368e:	c3 01       	movw	r24, r6
    3690:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3694:	8c 89       	ldd	r24, Y+20	; 0x14
    3696:	81 50       	subi	r24, 0x01	; 1
    3698:	99 0b       	sbc	r25, r25
    369a:	e8 9e       	mul	r14, r24
    369c:	f0 01       	movw	r30, r0
    369e:	e9 9e       	mul	r14, r25
    36a0:	f0 0d       	add	r31, r0
    36a2:	11 24       	eor	r1, r1
    36a4:	e0 51       	subi	r30, 0x10	; 16
    36a6:	fb 4f       	sbci	r31, 0xFB	; 251
    36a8:	60 81       	ld	r22, Z
    36aa:	71 81       	ldd	r23, Z+1	; 0x01
    36ac:	c2 01       	movw	r24, r4
    36ae:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:455

    lcd.setCursor(2, 1);
    36b2:	61 e0       	ldi	r22, 0x01	; 1
    36b4:	82 e0       	ldi	r24, 0x02	; 2
    36b6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:456
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
    36ba:	9f 92       	push	r9
    36bc:	8f 92       	push	r8
    36be:	88 e4       	ldi	r24, 0x48	; 72
    36c0:	92 e0       	ldi	r25, 0x02	; 2
    36c2:	9f 93       	push	r25
    36c4:	8f 93       	push	r24
    36c6:	5f 92       	push	r5
    36c8:	4f 92       	push	r4
    36ca:	9f 93       	push	r25
    36cc:	8f 93       	push	r24
    36ce:	3f 92       	push	r3
    36d0:	2f 92       	push	r2
    36d2:	85 e0       	ldi	r24, 0x05	; 5
    36d4:	8f 93       	push	r24
    36d6:	df 92       	push	r13
    36d8:	cf 92       	push	r12
    36da:	0e 94 8a 0b 	call	0x1714	; 0x1714 <fmt(char*, unsigned char, ...)>
    36de:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:299
        if (millis() - timr_Time > 1000)
        {
            timr_Time = millis();
            showTime();
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    36ec:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    36f0:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <timrLCD>
    36f4:	30 91 c9 03 	lds	r19, 0x03C9	; 0x8003c9 <timrLCD+0x1>
    36f8:	40 91 ca 03 	lds	r20, 0x03CA	; 0x8003ca <timrLCD+0x2>
    36fc:	50 91 cb 03 	lds	r21, 0x03CB	; 0x8003cb <timrLCD+0x3>
    3700:	5b 01       	movw	r10, r22
    3702:	6c 01       	movw	r12, r24
    3704:	a2 1a       	sub	r10, r18
    3706:	b3 0a       	sbc	r11, r19
    3708:	c4 0a       	sbc	r12, r20
    370a:	d5 0a       	sbc	r13, r21
    370c:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <config+0x13>
    3710:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <config+0x14>
    3714:	28 ee       	ldi	r18, 0xE8	; 232
    3716:	33 e0       	ldi	r19, 0x03	; 3
    3718:	0e 94 40 24 	call	0x4880	; 0x4880 <__usmulhisi3>
    371c:	6a 15       	cp	r22, r10
    371e:	7b 05       	cpc	r23, r11
    3720:	8c 05       	cpc	r24, r12
    3722:	9d 05       	cpc	r25, r13
    3724:	08 f0       	brcs	.+2      	; 0x3728 <main+0x113c>
    3726:	f1 cc       	rjmp	.-1566   	; 0x310a <main+0xb1e>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3728:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	8e e3       	ldi	r24, 0x3E	; 62
    3730:	95 e0       	ldi	r25, 0x05	; 5
    3732:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    3736:	e9 cc       	rjmp	.-1582   	; 0x310a <main+0xb1e>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:248
        {
            appMode = APP_MENU_MODE;
            refreshMenuDisplay(REFRESH_DESCEND);
            timrMNU = millis();
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3738:	21 e0       	ldi	r18, 0x01	; 1
    373a:	e2 12       	cpse	r14, r18
    373c:	78 ce       	rjmp	.-784    	; 0x342e <main+0xe42>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:250
        {
            selButPreCount += 1;
    373e:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <selButPreCount>
    3742:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <selButPreCount+0x1>
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <selButPreCount+0x1>
    374c:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:251
            if (selButPreCount >= 4)
    3750:	04 97       	sbiw	r24, 0x04	; 4
    3752:	0c f4       	brge	.+2      	; 0x3756 <main+0x116a>
    3754:	6c ce       	rjmp	.-808    	; 0x342e <main+0xe42>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:253
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3756:	c8 01       	movw	r24, r16
    3758:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	8f 31       	cpi	r24, 0x1F	; 31
    3760:	80 f0       	brcs	.+32     	; 0x3782 <main+0x1196>
    3762:	c3 01       	movw	r24, r6
    3764:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3768:	8e 89       	ldd	r24, Y+22	; 0x16
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <demoTime+0x1>
    3772:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <demoTime>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:254
                appMode = APP_DEMO_MODE;
    3776:	84 e0       	ldi	r24, 0x04	; 4
    3778:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:255
                lcd.clear();
    377c:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
    3780:	56 ce       	rjmp	.-852    	; 0x342e <main+0xe42>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:253
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3782:	c4 01       	movw	r24, r8
    3784:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3788:	8c 8d       	ldd	r24, Y+28	; 0x1c
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	f0 cf       	rjmp	.-32     	; 0x376e <main+0x1182>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:266
            {
                timrAmp = millis() - 71000L;
                if (rtc.now().minute() < 30)
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    378e:	c3 01       	movw	r24, r6
    3790:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    3794:	ee 88       	ldd	r14, Y+22	; 0x16
    3796:	c4 01       	movw	r24, r8
    3798:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    379c:	db 8c       	ldd	r13, Y+27	; 0x1b
    379e:	c2 01       	movw	r24, r4
    37a0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    37a4:	c8 a0       	ldd	r12, Y+32	; 0x20
    37a6:	c1 01       	movw	r24, r2
    37a8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    37ac:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    37ae:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    37b0:	ca 82       	std	Y+2, r12	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    37b2:	db 82       	std	Y+3, r13	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    37b4:	ec 82       	std	Y+4, r14	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    37b6:	8b e3       	ldi	r24, 0x3B	; 59
    37b8:	6c ce       	rjmp	.-808    	; 0x3492 <main+0xea6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:287
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	8c e0       	ldi	r24, 0x0C	; 12
    37be:	0e 94 e6 02 	call	0x5cc	; 0x5cc <digitalWrite>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:288
                    timrAmp = millis();
    37c2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    37c6:	60 93 bc 03 	sts	0x03BC, r22	; 0x8003bc <timrAmp>
    37ca:	70 93 bd 03 	sts	0x03BD, r23	; 0x8003bd <timrAmp+0x1>
    37ce:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <timrAmp+0x2>
    37d2:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:289
                    appMode = APP_CHANT_MODE;
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <appMode>
    37dc:	bd ce       	rjmp	.-646    	; 0x3558 <main+0xf6c>
main():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:539
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    37de:	6c e0       	ldi	r22, 0x0C	; 12
    37e0:	e6 ce       	rjmp	.-564    	; 0x35ae <main+0xfc2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:447
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(2, 0);
    lcd.print(fmt(strbuf, 6, h, ":", m, ":", s, rtc.now().isPM() ? " PM" : " AM"));
    37e2:	88 eb       	ldi	r24, 0xB8	; 184
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	16 cf       	rjmp	.-468    	; 0x3614 <main+0x1028>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    37e8:	88 e0       	ldi	r24, 0x08	; 8
    37ea:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	8e e3       	ldi	r24, 0x3E	; 62
    37f2:	95 e0       	ldi	r25, 0x05	; 5
    37f4:	0e 94 08 07 	call	0xe10	; 0xe10 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:307
        }
        break;
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:308
        lcd.print("CHANT PLAYING...");
    3800:	8a e4       	ldi	r24, 0x4A	; 74
    3802:	92 e0       	ldi	r25, 0x02	; 2
    3804:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:309
        if (millis() >= timrAmp + ampDelay)
    3808:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    380c:	ab 01       	movw	r20, r22
    380e:	bc 01       	movw	r22, r24
    3810:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <timrAmp>
    3814:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <timrAmp+0x1>
    3818:	a0 91 be 03 	lds	r26, 0x03BE	; 0x8003be <timrAmp+0x2>
    381c:	b0 91 bf 03 	lds	r27, 0x03BF	; 0x8003bf <timrAmp+0x3>
    3820:	88 57       	subi	r24, 0x78	; 120
    3822:	9c 4e       	sbci	r25, 0xEC	; 236
    3824:	af 4f       	sbci	r26, 0xFF	; 255
    3826:	bf 4f       	sbci	r27, 0xFF	; 255
    3828:	48 17       	cp	r20, r24
    382a:	59 07       	cpc	r21, r25
    382c:	6a 07       	cpc	r22, r26
    382e:	7b 07       	cpc	r23, r27
    3830:	10 f0       	brcs	.+4      	; 0x3836 <main+0x124a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:310
            PlayChant();
    3832:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:311
        if (btn == BUTTON_LEFT_SHORT_RELEASE && testMode)
    3836:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <btn>
    383a:	84 34       	cpi	r24, 0x44	; 68
    383c:	09 f0       	breq	.+2      	; 0x3840 <main+0x1254>
    383e:	65 cc       	rjmp	.-1846   	; 0x310a <main+0xb1e>
    3840:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <testMode>
    3844:	88 23       	and	r24, r24
    3846:	09 f4       	brne	.+2      	; 0x384a <main+0x125e>
    3848:	60 cc       	rjmp	.-1856   	; 0x310a <main+0xb1e>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    384a:	70 e0       	ldi	r23, 0x00	; 0
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	86 e1       	ldi	r24, 0x16	; 22
    3850:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
    3854:	5a cc       	rjmp	.-1868   	; 0x310a <main+0xb1e>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3856:	de 8e       	std	Y+30, r13	; 0x1e
    3858:	cd 8e       	std	Y+29, r12	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    385a:	b8 01       	movw	r22, r16
    385c:	89 8d       	ldd	r24, Y+25	; 0x19
    385e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3860:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
    3864:	50 cd       	rjmp	.-1376   	; 0x3306 <main+0xd1a>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:343
            lcd.print("VOLUME : ");
            lcd.print(config.vol);
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3866:	83 30       	cpi	r24, 0x03	; 3
    3868:	09 f0       	breq	.+2      	; 0x386c <main+0x1280>
    386a:	4f cc       	rjmp	.-1890   	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:345
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    386c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <config+0x15>
    3870:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <config+0x16>
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	8a 30       	cpi	r24, 0x0A	; 10
    3878:	91 05       	cpc	r25, r1
    387a:	0c f0       	brlt	.+2      	; 0x387e <main+0x1292>
    387c:	a1 cd       	rjmp	.-1214   	; 0x33c0 <main+0xdd4>
main():
    387e:	8e e1       	ldi	r24, 0x1E	; 30
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9e cd       	rjmp	.-1220   	; 0x33c0 <main+0xdd4>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:358
        }
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > menuTimeOut)
    3884:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3888:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <timrMNU>
    388c:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <timrMNU+0x1>
    3890:	40 91 c6 03 	lds	r20, 0x03C6	; 0x8003c6 <timrMNU+0x2>
    3894:	50 91 c7 03 	lds	r21, 0x03C7	; 0x8003c7 <timrMNU+0x3>
    3898:	62 1b       	sub	r22, r18
    389a:	73 0b       	sbc	r23, r19
    389c:	84 0b       	sbc	r24, r20
    389e:	95 0b       	sbc	r25, r21
    38a0:	61 33       	cpi	r22, 0x31	; 49
    38a2:	75 47       	sbci	r23, 0x75	; 117
    38a4:	81 05       	cpc	r24, r1
    38a6:	91 05       	cpc	r25, r1
    38a8:	a0 f0       	brcs	.+40     	; 0x38d2 <main+0x12e6>
reset():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    38aa:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <Menu1>
    38ae:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <Menu1+0x1>
    38b2:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <Menu1+0x4>
    38b6:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    38ba:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Menu1+0x2>
    38be:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    38c2:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:21
  menuStackCount = 0;
    38c6:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:361
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    38ca:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:362
            lcd.clear();
    38ce:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:365
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    38d2:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:366
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    38d6:	81 30       	cpi	r24, 0x01	; 1
    38d8:	09 f0       	breq	.+2      	; 0x38dc <main+0x12f0>
    38da:	88 c0       	rjmp	.+272    	; 0x39ec <main+0x1400>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:369
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    38dc:	c8 01       	movw	r24, r16
    38de:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <StDate+0x1>
    38ea:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <StDate>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:370
            StMonth = rtc.now().month();
    38ee:	c8 01       	movw	r24, r16
    38f0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    38f4:	8a 81       	ldd	r24, Y+2	; 0x02
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <StMonth+0x1>
    38fc:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <StMonth>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:371
            StYear = rtc.now().year();
    3900:	c8 01       	movw	r24, r16
    3902:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	80 53       	subi	r24, 0x30	; 48
    390c:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:371
    390e:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <StYear+0x1>
    3912:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <StYear>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:372
            StHr = rtc.now().hour();
    3916:	c8 01       	movw	r24, r16
    3918:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    391c:	8c 81       	ldd	r24, Y+4	; 0x04
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <StHr+0x1>
    3924:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <StHr>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:373
            StMin = rtc.now().minute();
    3928:	c8 01       	movw	r24, r16
    392a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <RTC_DS1307::now() [clone .constprop.79]>
    392e:	8d 81       	ldd	r24, Y+5	; 0x05
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <StMin+0x1>
    3936:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <StMin>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:375
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    393a:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    393e:	83 30       	cpi	r24, 0x03	; 3
    3940:	09 f0       	breq	.+2      	; 0x3944 <main+0x1358>
    3942:	5f c0       	rjmp	.+190    	; 0x3a02 <main+0x1416>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:377
        {
            blinkMode = setHr;
    3944:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <blinkMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:384
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    3948:	e0 90 cc 03 	lds	r14, 0x03CC	; 0x8003cc <btn>
    394c:	24 e8       	ldi	r18, 0x84	; 132
    394e:	e2 12       	cpse	r14, r18
    3950:	14 c0       	rjmp	.+40     	; 0x397a <main+0x138e>
reset():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3952:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <Menu1>
    3956:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <Menu1+0x1>
    395a:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <Menu1+0x4>
    395e:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3962:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Menu1+0x2>
    3966:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    396a:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:21
  menuStackCount = 0;
    396e:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:387
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3972:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:388
            lcd.clear();
    3976:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:915
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    397a:	0e 94 b5 01 	call	0x36a	; 0x36a <MenuManager::currentItemHasChildren() [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:917

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    397e:	8e 2d       	mov	r24, r14
    3980:	8f 77       	andi	r24, 0x7F	; 127
    3982:	82 30       	cpi	r24, 0x02	; 2
    3984:	09 f4       	brne	.+2      	; 0x3988 <main+0x139c>
    3986:	45 c0       	rjmp	.+138    	; 0x3a12 <main+0x1426>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:919
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3988:	83 30       	cpi	r24, 0x03	; 3
    398a:	09 f4       	brne	.+2      	; 0x398e <main+0x13a2>
    398c:	45 c0       	rjmp	.+138    	; 0x3a18 <main+0x142c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:921
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    398e:	31 e0       	ldi	r19, 0x01	; 1
    3990:	e3 16       	cp	r14, r19
    3992:	09 f4       	brne	.+2      	; 0x3996 <main+0x13aa>
    3994:	44 c0       	rjmp	.+136    	; 0x3a1e <main+0x1432>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:923
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    3996:	64 e4       	ldi	r22, 0x44	; 68
    3998:	e6 16       	cp	r14, r22
    399a:	09 f4       	brne	.+2      	; 0x399e <main+0x13b2>
    399c:	43 c0       	rjmp	.+134    	; 0x3a24 <main+0x1438>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:914
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    399e:	e1 2c       	mov	r14, r1
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    39a0:	8d ef       	ldi	r24, 0xFD	; 253
    39a2:	8e 0d       	add	r24, r14
    39a4:	82 30       	cpi	r24, 0x02	; 2
    39a6:	08 f0       	brcs	.+2      	; 0x39aa <main+0x13be>
    39a8:	bf c0       	rjmp	.+382    	; 0x3b28 <main+0x153c>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    39aa:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    39ae:	88 23       	and	r24, r24
    39b0:	e1 f1       	breq	.+120    	; 0x3a2a <main+0x143e>
    39b2:	84 e0       	ldi	r24, 0x04	; 4
    39b4:	e8 16       	cp	r14, r24
    39b6:	c9 f1       	breq	.+114    	; 0x3a2a <main+0x143e>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    39b8:	0e 94 b5 01 	call	0x36a	; 0x36a <MenuManager::currentItemHasChildren() [clone .constprop.100]>
    39bc:	81 11       	cpse	r24, r1
    39be:	71 c0       	rjmp	.+226    	; 0x3aa2 <main+0x14b6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:399
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    39c0:	82 e0       	ldi	r24, 0x02	; 2
    39c2:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:400
            if (Menu1.getCurrentItemCmdId())
    39c6:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    39ca:	88 23       	and	r24, r24
    39cc:	09 f4       	brne	.+2      	; 0x39d0 <main+0x13e4>
    39ce:	9d cb       	rjmp	.-2246   	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:402
            {
                lcd.setCursor(0, 1);
    39d0:	61 e0       	ldi	r22, 0x01	; 1
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:403
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    39d8:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:424
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    39da:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <strbuf>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:425
            strbuf[1] = 0;
    39de:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:426
            lcd.print(strbuf);
    39e2:	87 eb       	ldi	r24, 0xB7	; 183
    39e4:	94 e0       	ldi	r25, 0x04	; 4
    39e6:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
    39ea:	8f cb       	rjmp	.-2274   	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:366
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    39ec:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:365
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
    39f0:	82 30       	cpi	r24, 0x02	; 2
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <main+0x140a>
    39f4:	73 cf       	rjmp	.-282    	; 0x38dc <main+0x12f0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:367
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    39f6:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:366
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    39fa:	83 30       	cpi	r24, 0x03	; 3
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <main+0x1414>
    39fe:	9d cf       	rjmp	.-198    	; 0x393a <main+0x134e>
    3a00:	6d cf       	rjmp	.-294    	; 0x38dc <main+0x12f0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:379
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    3a02:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    3a06:	82 30       	cpi	r24, 0x02	; 2
    3a08:	09 f0       	breq	.+2      	; 0x3a0c <main+0x1420>
    3a0a:	9e cf       	rjmp	.-196    	; 0x3948 <main+0x135c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:381
        {
            blinkMode = setDate;
    3a0c:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <blinkMode>
    3a10:	9b cf       	rjmp	.-202    	; 0x3948 <main+0x135c>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:918
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    3a12:	ee 24       	eor	r14, r14
    3a14:	e3 94       	inc	r14
    3a16:	c4 cf       	rjmp	.-120    	; 0x39a0 <main+0x13b4>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:920
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    3a18:	52 e0       	ldi	r21, 0x02	; 2
    3a1a:	e5 2e       	mov	r14, r21
    3a1c:	c1 cf       	rjmp	.-126    	; 0x39a0 <main+0x13b4>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:922
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    3a1e:	43 e0       	ldi	r20, 0x03	; 3
    3a20:	e4 2e       	mov	r14, r20
    3a22:	be cf       	rjmp	.-132    	; 0x39a0 <main+0x13b4>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:924
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    3a24:	34 e0       	ldi	r19, 0x04	; 4
    3a26:	e3 2e       	mov	r14, r19
    3a28:	bb cf       	rjmp	.-138    	; 0x39a0 <main+0x13b4>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    3a2a:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    3a2e:	81 11       	cpse	r24, r1
    3a30:	13 c0       	rjmp	.+38     	; 0x3a58 <main+0x146c>
reset():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3a32:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <Menu1>
    3a36:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <Menu1+0x1>
    3a3a:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <Menu1+0x4>
    3a3e:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3a42:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Menu1+0x2>
    3a46:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3a4a:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:394
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            lcd.clear();
    3a4e:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:395
            appMode = APP_NORMAL_MODE;
    3a52:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <appMode>
    3a56:	59 cb       	rjmp	.-2382   	; 0x310a <main+0xb1e>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    3a58:	81 50       	subi	r24, 0x01	; 1
    3a5a:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    3a60:	dc 01       	movw	r26, r24
    3a62:	aa 0f       	add	r26, r26
    3a64:	bb 1f       	adc	r27, r27
    3a66:	aa 0f       	add	r26, r26
    3a68:	bb 1f       	adc	r27, r27
    3a6a:	a8 53       	subi	r26, 0x38	; 56
    3a6c:	bb 4f       	sbci	r27, 0xFB	; 251
    3a6e:	19 96       	adiw	r26, 0x09	; 9
    3a70:	2d 91       	ld	r18, X+
    3a72:	3c 91       	ld	r19, X
    3a74:	1a 97       	sbiw	r26, 0x0a	; 10
    3a76:	30 93 cc 04 	sts	0x04CC, r19	; 0x8004cc <Menu1+0x4>
    3a7a:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    3a7e:	88 0f       	add	r24, r24
    3a80:	99 1f       	adc	r25, r25
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	fc 01       	movw	r30, r24
    3a88:	e0 53       	subi	r30, 0x30	; 48
    3a8a:	fb 4f       	sbci	r31, 0xFB	; 251
    3a8c:	80 81       	ld	r24, Z
    3a8e:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    3a92:	17 96       	adiw	r26, 0x07	; 7
    3a94:	8c 91       	ld	r24, X
    3a96:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    3a9a:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    3a9c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <refreshMenuDisplay(unsigned char)>
    3aa0:	34 cb       	rjmp	.-2456   	; 0x310a <main+0xb1e>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    3aa2:	0e 94 b5 01 	call	0x36a	; 0x36a <MenuManager::currentItemHasChildren() [clone .constprop.100]>
    3aa6:	88 23       	and	r24, r24
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <main+0x14c0>
    3aaa:	3c c0       	rjmp	.+120    	; 0x3b24 <main+0x1538>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3aac:	30 91 ce 04 	lds	r19, 0x04CE	; 0x8004ce <Menu1+0x6>
    3ab0:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <Menu1+0x3>
    3ab4:	70 91 cc 04 	lds	r23, 0x04CC	; 0x8004cc <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    3ab8:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <Menu1+0x1b>
    3abc:	25 30       	cpi	r18, 0x05	; 5
    3abe:	e8 f4       	brcc	.+58     	; 0x3afa <main+0x150e>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3ac0:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    3ac4:	82 2f       	mov	r24, r18
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	dc 01       	movw	r26, r24
    3aca:	aa 0f       	add	r26, r26
    3acc:	bb 1f       	adc	r27, r27
    3ace:	aa 0f       	add	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	a8 53       	subi	r26, 0x38	; 56
    3ad4:	bb 4f       	sbci	r27, 0xFB	; 251
    3ad6:	17 96       	adiw	r26, 0x07	; 7
    3ad8:	3c 93       	st	X, r19
    3ada:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	80 53       	subi	r24, 0x30	; 48
    3ae6:	9b 4f       	sbci	r25, 0xFB	; 251
    3ae8:	fc 01       	movw	r30, r24
    3aea:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    3aec:	1a 96       	adiw	r26, 0x0a	; 10
    3aee:	7c 93       	st	X, r23
    3af0:	6e 93       	st	-X, r22
    3af2:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:215
    menuStackCount++;
    3af4:	2f 5f       	subi	r18, 0xFF	; 255
    3af6:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    3afa:	cb 01       	movw	r24, r22
    3afc:	f6 e0       	ldi	r31, 0x06	; 6
    3afe:	3f 9f       	mul	r19, r31
    3b00:	80 0d       	add	r24, r0
    3b02:	91 1d       	adc	r25, r1
    3b04:	11 24       	eor	r1, r1
    3b06:	fc 01       	movw	r30, r24
    3b08:	35 96       	adiw	r30, 0x05	; 5
    3b0a:	e4 91       	lpm	r30, Z
    3b0c:	e0 93 cd 04 	sts	0x04CD, r30	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    3b10:	fc 01       	movw	r30, r24
    3b12:	33 96       	adiw	r30, 0x03	; 3
    3b14:	85 91       	lpm	r24, Z+
    3b16:	94 91       	lpm	r25, Z
    3b18:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <Menu1+0x4>
    3b1c:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    3b20:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    3b24:	83 e0       	ldi	r24, 0x03	; 3
    3b26:	ba cf       	rjmp	.-140    	; 0x3a9c <main+0x14b0>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    3b28:	21 e0       	ldi	r18, 0x01	; 1
    3b2a:	e2 12       	cpse	r14, r18
    3b2c:	0a c0       	rjmp	.+20     	; 0x3b42 <main+0x1556>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    3b2e:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <Menu1+0x6>
    3b32:	88 23       	and	r24, r24
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <main+0x154c>
    3b36:	e9 ca       	rjmp	.-2606   	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    3b38:	81 50       	subi	r24, 0x01	; 1
    3b3a:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	ad cf       	rjmp	.-166    	; 0x3a9c <main+0x14b0>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    3b42:	32 e0       	ldi	r19, 0x02	; 2
    3b44:	e3 12       	cpse	r14, r19
    3b46:	e1 ca       	rjmp	.-2622   	; 0x310a <main+0xb1e>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    3b48:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <Menu1+0x6>
    3b4c:	20 91 cd 04 	lds	r18, 0x04CD	; 0x8004cd <Menu1+0x5>
    3b50:	21 50       	subi	r18, 0x01	; 1
    3b52:	33 0b       	sbc	r19, r19
    3b54:	82 17       	cp	r24, r18
    3b56:	13 06       	cpc	r1, r19
    3b58:	0c f0       	brlt	.+2      	; 0x3b5c <main+0x1570>
    3b5a:	d7 ca       	rjmp	.-2642   	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	9b cf       	rjmp	.-202    	; 0x3a9c <main+0x14b0>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:412
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    3b66:	0e 94 c7 01 	call	0x38e	; 0x38e <MenuManager::getCurrentItemCmdId() [clone .constprop.97]>
    3b6a:	c8 2e       	mov	r12, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:468

    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }
    switch (cmdId)
    3b6c:	ee ef       	ldi	r30, 0xFE	; 254
    3b6e:	e8 0f       	add	r30, r24
    3b70:	e6 31       	cpi	r30, 0x16	; 22
    3b72:	08 f0       	brcs	.+2      	; 0x3b76 <main+0x158a>
    3b74:	30 c0       	rjmp	.+96     	; 0x3bd6 <main+0x15ea>
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	e0 54       	subi	r30, 0x40	; 64
    3b7a:	f2 4e       	sbci	r31, 0xE2	; 226
    3b7c:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__tablejump2__>
    3b80:	d6 1d       	adc	r29, r6
    3b82:	71 1e       	adc	r7, r17
    3b84:	eb 1d       	adc	r30, r11
    3b86:	e2 1e       	adc	r14, r18
    3b88:	52 1f       	adc	r21, r18
    3b8a:	c9 20       	and	r12, r9
    3b8c:	f8 20       	and	r15, r8
    3b8e:	72 1f       	adc	r23, r18
    3b90:	8d 1f       	adc	r24, r29
    3b92:	eb 1d       	adc	r30, r11
    3b94:	bb 1f       	adc	r27, r27
    3b96:	df 1f       	adc	r29, r31
    3b98:	eb 1d       	adc	r30, r11
    3b9a:	f5 1f       	adc	r31, r21
    3b9c:	16 20       	and	r1, r6
    3b9e:	3a 20       	and	r3, r10
    3ba0:	5b 20       	and	r5, r11
    3ba2:	7f 20       	and	r7, r15
    3ba4:	eb 1d       	adc	r30, r11
    3ba6:	1f 21       	and	r17, r15
    3ba8:	a9 20       	and	r10, r9
    3baa:	8f 20       	and	r8, r15
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:472
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    3bac:	62 e0       	ldi	r22, 0x02	; 2
    3bae:	e6 12       	cpse	r14, r22
    3bb0:	37 c0       	rjmp	.+110    	; 0x3c20 <main+0x1634>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:474
        {
            if (blinkMode == setDate)
    3bb2:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <blinkMode>
    3bb6:	82 30       	cpi	r24, 0x02	; 2
    3bb8:	81 f4       	brne	.+32     	; 0x3bda <main+0x15ee>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:475
                StDate = ++StDate > 31 ? 1 : StDate;
    3bba:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <StDate>
    3bbe:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <StDate+0x1>
    3bc2:	01 96       	adiw	r24, 0x01	; 1
    3bc4:	80 32       	cpi	r24, 0x20	; 32
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	14 f0       	brlt	.+4      	; 0x3bce <main+0x15e2>
main():
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:484
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
    3bce:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <StDate+0x1>
    3bd2:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:646
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3bd6:	e1 2c       	mov	r14, r1
    3bd8:	09 c3       	rjmp	.+1554   	; 0x41ec <main+0x1c00>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:476
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    3bda:	83 30       	cpi	r24, 0x03	; 3
    3bdc:	79 f4       	brne	.+30     	; 0x3bfc <main+0x1610>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:477
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    3bde:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <StMonth>
    3be2:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <StMonth+0x1>
    3be6:	01 96       	adiw	r24, 0x01	; 1
    3be8:	8d 30       	cpi	r24, 0x0D	; 13
    3bea:	91 05       	cpc	r25, r1
    3bec:	14 f0       	brlt	.+4      	; 0x3bf2 <main+0x1606>
main():
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:486
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
    3bf2:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <StMonth+0x1>
    3bf6:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <StMonth>
    3bfa:	ed cf       	rjmp	.-38     	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:478
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    3bfc:	84 30       	cpi	r24, 0x04	; 4
    3bfe:	59 f7       	brne	.-42     	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:479
                StYear = ++StYear > 2050 ? 2020 : StYear;
    3c00:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <StYear>
    3c04:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <StYear+0x1>
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	83 30       	cpi	r24, 0x03	; 3
    3c0c:	e8 e0       	ldi	r30, 0x08	; 8
    3c0e:	9e 07       	cpc	r25, r30
    3c10:	14 f0       	brlt	.+4      	; 0x3c16 <main+0x162a>
main():
    3c12:	84 ee       	ldi	r24, 0xE4	; 228
    3c14:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:488
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2020 ? 2050 : StYear;
    3c16:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <StYear+0x1>
    3c1a:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <StYear>
    3c1e:	db cf       	rjmp	.-74     	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:481
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    3c20:	f3 e0       	ldi	r31, 0x03	; 3
    3c22:	ef 12       	cpse	r14, r31
    3c24:	2b c0       	rjmp	.+86     	; 0x3c7c <main+0x1690>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:483
        {
            if (blinkMode == setDate)
    3c26:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <blinkMode>
    3c2a:	82 30       	cpi	r24, 0x02	; 2
    3c2c:	59 f4       	brne	.+22     	; 0x3c44 <main+0x1658>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:484
                StDate = --StDate < 1 ? 31 : StDate;
    3c2e:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <StDate>
    3c32:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <StDate+0x1>
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	18 16       	cp	r1, r24
    3c3a:	19 06       	cpc	r1, r25
    3c3c:	44 f2       	brlt	.-112    	; 0x3bce <main+0x15e2>
main():
    3c3e:	8f e1       	ldi	r24, 0x1F	; 31
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	c5 cf       	rjmp	.-118    	; 0x3bce <main+0x15e2>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:485
            else if (blinkMode == setMonth)
    3c44:	83 30       	cpi	r24, 0x03	; 3
    3c46:	59 f4       	brne	.+22     	; 0x3c5e <main+0x1672>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:486
                StMonth = --StMonth < 1 ? 12 : StMonth;
    3c48:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <StMonth>
    3c4c:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <StMonth+0x1>
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	18 16       	cp	r1, r24
    3c54:	19 06       	cpc	r1, r25
    3c56:	6c f2       	brlt	.-102    	; 0x3bf2 <main+0x1606>
main():
    3c58:	8c e0       	ldi	r24, 0x0C	; 12
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	ca cf       	rjmp	.-108    	; 0x3bf2 <main+0x1606>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:487
            else if (blinkMode == setYear)
    3c5e:	84 30       	cpi	r24, 0x04	; 4
    3c60:	09 f0       	breq	.+2      	; 0x3c64 <main+0x1678>
    3c62:	b9 cf       	rjmp	.-142    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:488
                StYear = --StYear < 2020 ? 2050 : StYear;
    3c64:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <StYear>
    3c68:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <StYear+0x1>
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	84 3e       	cpi	r24, 0xE4	; 228
    3c70:	27 e0       	ldi	r18, 0x07	; 7
    3c72:	92 07       	cpc	r25, r18
    3c74:	84 f6       	brge	.-96     	; 0x3c16 <main+0x162a>
main():
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	98 e0       	ldi	r25, 0x08	; 8
    3c7a:	cd cf       	rjmp	.-102    	; 0x3c16 <main+0x162a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:490
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3c7c:	31 e0       	ldi	r19, 0x01	; 1
    3c7e:	e3 12       	cpse	r14, r19
    3c80:	aa cf       	rjmp	.-172    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:492
        {
            if (blinkMode == setDate)
    3c82:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <blinkMode>
    3c86:	82 30       	cpi	r24, 0x02	; 2
    3c88:	21 f4       	brne	.+8      	; 0x3c92 <main+0x16a6>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:494
            {
                blinkMode = setMonth;
    3c8a:	83 e0       	ldi	r24, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:498
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
    3c8c:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <blinkMode>
    3c90:	a2 cf       	rjmp	.-188    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:496
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    3c92:	83 30       	cpi	r24, 0x03	; 3
    3c94:	11 f4       	brne	.+4      	; 0x3c9a <main+0x16ae>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:498
            {
                blinkMode = setYear;
    3c96:	84 e0       	ldi	r24, 0x04	; 4
    3c98:	f9 cf       	rjmp	.-14     	; 0x3c8c <main+0x16a0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:500
            }
            else if (blinkMode == setYear)
    3c9a:	84 30       	cpi	r24, 0x04	; 4
    3c9c:	09 f0       	breq	.+2      	; 0x3ca0 <main+0x16b4>
    3c9e:	9b cf       	rjmp	.-202    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:502
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    3ca0:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <StMin>
    3ca4:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <StHr>
    3ca8:	40 91 d5 03 	lds	r20, 0x03D5	; 0x8003d5 <StDate>
    3cac:	50 91 d3 03 	lds	r21, 0x03D3	; 0x8003d3 <StMonth>
    3cb0:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <StYear>
    3cb4:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3cb8:	80 3d       	cpi	r24, 0xD0	; 208
    3cba:	67 e0       	ldi	r22, 0x07	; 7
    3cbc:	96 07       	cpc	r25, r22
    3cbe:	10 f0       	brcs	.+4      	; 0x3cc4 <main+0x16d8>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    3cc0:	80 5d       	subi	r24, 0xD0	; 208
    3cc2:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    3cc4:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3cc6:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3cc8:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3cca:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3ccc:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    3cce:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:502
    3cd0:	c8 01       	movw	r24, r16
    3cd2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:504
                complete = true;
                blink = true;
    3cd6:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:503
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
                complete = true;
    3cda:	dd 24       	eor	r13, r13
    3cdc:	d3 94       	inc	r13
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:462
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3cde:	e1 2c       	mov	r14, r1
    3ce0:	9b c0       	rjmp	.+310    	; 0x3e18 <main+0x182c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:511
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    3ce2:	82 e0       	ldi	r24, 0x02	; 2
    3ce4:	e8 12       	cpse	r14, r24
    3ce6:	25 c0       	rjmp	.+74     	; 0x3d32 <main+0x1746>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:513
        {
            if (blinkMode == setHr)
    3ce8:	d0 90 b6 03 	lds	r13, 0x03B6	; 0x8003b6 <blinkMode>
    3cec:	d1 10       	cpse	r13, r1
    3cee:	0f c0       	rjmp	.+30     	; 0x3d0e <main+0x1722>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:514
                StHr = ++StHr > 23 ? 0 : StHr;
    3cf0:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <StHr>
    3cf4:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <StHr+0x1>
    3cf8:	01 96       	adiw	r24, 0x01	; 1
    3cfa:	88 31       	cpi	r24, 0x18	; 24
    3cfc:	91 05       	cpc	r25, r1
    3cfe:	14 f0       	brlt	.+4      	; 0x3d04 <main+0x1718>
main():
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:521
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
    3d04:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <StHr+0x1>
    3d08:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <StHr>
    3d0c:	e8 cf       	rjmp	.-48     	; 0x3cde <main+0x16f2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:515
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    3d0e:	91 e0       	ldi	r25, 0x01	; 1
    3d10:	d9 12       	cpse	r13, r25
    3d12:	61 cf       	rjmp	.-318    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:516
                StMin = ++StMin > 59 ? 0 : StMin;
    3d14:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <StMin>
    3d18:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <StMin+0x1>
    3d1c:	01 96       	adiw	r24, 0x01	; 1
    3d1e:	8c 33       	cpi	r24, 0x3C	; 60
    3d20:	91 05       	cpc	r25, r1
    3d22:	14 f0       	brlt	.+4      	; 0x3d28 <main+0x173c>
main():
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:523
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
    3d28:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <StMin+0x1>
    3d2c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <StMin>
    3d30:	52 cf       	rjmp	.-348    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:518
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    3d32:	e3 e0       	ldi	r30, 0x03	; 3
    3d34:	ee 12       	cpse	r14, r30
    3d36:	1b c0       	rjmp	.+54     	; 0x3d6e <main+0x1782>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:520
        {
            if (blinkMode == setHr)
    3d38:	d0 90 b6 03 	lds	r13, 0x03B6	; 0x8003b6 <blinkMode>
    3d3c:	d1 10       	cpse	r13, r1
    3d3e:	0a c0       	rjmp	.+20     	; 0x3d54 <main+0x1768>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:521
                StHr = --StHr < 0 ? 23 : StHr;
    3d40:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <StHr>
    3d44:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <StHr+0x1>
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	97 ff       	sbrs	r25, 7
    3d4c:	db cf       	rjmp	.-74     	; 0x3d04 <main+0x1718>
main():
    3d4e:	87 e1       	ldi	r24, 0x17	; 23
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	d8 cf       	rjmp	.-80     	; 0x3d04 <main+0x1718>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:522
            else if (blinkMode == setMin)
    3d54:	f1 e0       	ldi	r31, 0x01	; 1
    3d56:	df 12       	cpse	r13, r31
    3d58:	3e cf       	rjmp	.-388    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:523
                StMin = --StMin < 0 ? 59 : StMin;
    3d5a:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <StMin>
    3d5e:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <StMin+0x1>
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	97 ff       	sbrs	r25, 7
    3d66:	e0 cf       	rjmp	.-64     	; 0x3d28 <main+0x173c>
main():
    3d68:	8b e3       	ldi	r24, 0x3B	; 59
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	dd cf       	rjmp	.-70     	; 0x3d28 <main+0x173c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:525
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3d6e:	21 e0       	ldi	r18, 0x01	; 1
    3d70:	e2 12       	cpse	r14, r18
    3d72:	31 cf       	rjmp	.-414    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:527
        {
            if (blinkMode == setHr)
    3d74:	d0 90 b6 03 	lds	r13, 0x03B6	; 0x8003b6 <blinkMode>
    3d78:	d1 10       	cpse	r13, r1
    3d7a:	03 c0       	rjmp	.+6      	; 0x3d82 <main+0x1796>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:529
            {
                blinkMode = setMin;
    3d7c:	e0 92 b6 03 	sts	0x03B6, r14	; 0x8003b6 <blinkMode>
    3d80:	ae cf       	rjmp	.-164    	; 0x3cde <main+0x16f2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:531
            }
            else if (blinkMode == setMin)
    3d82:	31 e0       	ldi	r19, 0x01	; 1
    3d84:	d3 12       	cpse	r13, r19
    3d86:	27 cf       	rjmp	.-434    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:533
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    3d88:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <StMin>
    3d8c:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <StHr>
    3d90:	40 91 d5 03 	lds	r20, 0x03D5	; 0x8003d5 <StDate>
    3d94:	50 91 d3 03 	lds	r21, 0x03D3	; 0x8003d3 <StMonth>
    3d98:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <StYear>
    3d9c:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    3da0:	80 3d       	cpi	r24, 0xD0	; 208
    3da2:	67 e0       	ldi	r22, 0x07	; 7
    3da4:	96 07       	cpc	r25, r22
    3da6:	10 f0       	brcs	.+4      	; 0x3dac <main+0x17c0>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    3da8:	80 5d       	subi	r24, 0xD0	; 208
    3daa:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    3dac:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3dae:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3db0:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3db2:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3db4:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    3db6:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:533
    3db8:	c8 01       	movw	r24, r16
    3dba:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:535
                complete = true;
                blink = true;
    3dbe:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <blink>
    3dc2:	8d cf       	rjmp	.-230    	; 0x3cde <main+0x16f2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:543
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3dc4:	8e 2d       	mov	r24, r14
    3dc6:	8f 77       	andi	r24, 0x7F	; 127
    3dc8:	82 30       	cpi	r24, 0x02	; 2
    3dca:	89 f4       	brne	.+34     	; 0x3dee <main+0x1802>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:545
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    3dcc:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0xf>
    3dd0:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x10>
    3dd4:	01 96       	adiw	r24, 0x01	; 1
    3dd6:	88 31       	cpi	r24, 0x18	; 24
    3dd8:	91 05       	cpc	r25, r1
    3dda:	14 f0       	brlt	.+4      	; 0x3de0 <main+0x17f4>
main():
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:549
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    3de0:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x10>
    3de4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:809
        }
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
    3de8:	ee 24       	eor	r14, r14
    3dea:	e3 94       	inc	r14
    3dec:	ff c1       	rjmp	.+1022   	; 0x41ec <main+0x1c00>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:547
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3dee:	83 30       	cpi	r24, 0x03	; 3
    3df0:	51 f4       	brne	.+20     	; 0x3e06 <main+0x181a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:549
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    3df2:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0xf>
    3df6:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x10>
    3dfa:	01 97       	sbiw	r24, 0x01	; 1
    3dfc:	97 ff       	sbrs	r25, 7
    3dfe:	f0 cf       	rjmp	.-32     	; 0x3de0 <main+0x17f4>
main():
    3e00:	87 e1       	ldi	r24, 0x17	; 23
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	ed cf       	rjmp	.-38     	; 0x3de0 <main+0x17f4>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:551
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	e8 12       	cpse	r14, r24
    3e0a:	e5 ce       	rjmp	.-566    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:553
        {
            config.save();
    3e0c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Config::save() [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:542
        }
        break;
    }
    case mnuCmdStartTime:
    {
        configChanged = true;
    3e10:	ee 24       	eor	r14, r14
    3e12:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:642
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            complete = true;
    3e14:	dd 24       	eor	r13, r13
    3e16:	d3 94       	inc	r13
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:861
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    3e18:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <btn>
    3e1c:	84 34       	cpi	r24, 0x44	; 68
    3e1e:	19 f0       	breq	.+6      	; 0x3e26 <main+0x183a>
    3e20:	dd 20       	and	r13, r13
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <main+0x183a>
    3e24:	a8 c2       	rjmp	.+1360   	; 0x4376 <main+0x1d8a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:864
    {
        complete = true;
        lcd.setCursor(1, 1);
    3e26:	61 e0       	ldi	r22, 0x01	; 1
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:865
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3e2e:	8c 2d       	mov	r24, r12
    3e30:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    3e34:	0e 94 86 0a 	call	0x150c	; 0x150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    3e38:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:863
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    3e3c:	ee 24       	eor	r14, r14
    3e3e:	e3 94       	inc	r14
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:413
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > menuTimeOut)
    3e40:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    3e44:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <timrMNU>
    3e48:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <timrMNU+0x1>
    3e4c:	40 91 c6 03 	lds	r20, 0x03C6	; 0x8003c6 <timrMNU+0x2>
    3e50:	50 91 c7 03 	lds	r21, 0x03C7	; 0x8003c7 <timrMNU+0x3>
    3e54:	62 1b       	sub	r22, r18
    3e56:	73 0b       	sbc	r23, r19
    3e58:	84 0b       	sbc	r24, r20
    3e5a:	95 0b       	sbc	r25, r21
    3e5c:	61 33       	cpi	r22, 0x31	; 49
    3e5e:	75 47       	sbci	r23, 0x75	; 117
    3e60:	81 05       	cpc	r24, r1
    3e62:	91 05       	cpc	r25, r1
    3e64:	a0 f0       	brcs	.+40     	; 0x3e8e <main+0x18a2>
reset():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3e66:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <Menu1>
    3e6a:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <Menu1+0x1>
    3e6e:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <Menu1+0x4>
    3e72:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3e76:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Menu1+0x2>
    3e7a:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3e7e:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:21
  menuStackCount = 0;
    3e82:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:416
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3e86:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:417
            lcd.clear();
    3e8a:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:419
        }
        if (processingComplete)
    3e8e:	ee 20       	and	r14, r14
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <main+0x18a8>
    3e92:	3b c9       	rjmp	.-3466   	; 0x310a <main+0xb1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:421
        {
            appMode = APP_MENU_MODE;
    3e94:	f0 92 c1 03 	sts	0x03C1, r15	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:423
            // clear forward arrow
            lcd.setCursor(0, 1);
    3e98:	61 e0       	ldi	r22, 0x01	; 1
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:424
            strbuf[0] = ' '; // clear forward arrow
    3ea0:	80 e2       	ldi	r24, 0x20	; 32
    3ea2:	9b cd       	rjmp	.-1226   	; 0x39da <main+0x13ee>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:565
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3ea4:	8e 2d       	mov	r24, r14
    3ea6:	8f 77       	andi	r24, 0x7F	; 127
    3ea8:	82 30       	cpi	r24, 0x02	; 2
    3eaa:	79 f4       	brne	.+30     	; 0x3eca <main+0x18de>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:567
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    3eac:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x11>
    3eb0:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x12>
    3eb4:	01 96       	adiw	r24, 0x01	; 1
    3eb6:	88 31       	cpi	r24, 0x18	; 24
    3eb8:	91 05       	cpc	r25, r1
    3eba:	14 f0       	brlt	.+4      	; 0x3ec0 <main+0x18d4>
main():
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:571
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    3ec0:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x12>
    3ec4:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x11>
    3ec8:	8f cf       	rjmp	.-226    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:569
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3eca:	83 30       	cpi	r24, 0x03	; 3
    3ecc:	09 f0       	breq	.+2      	; 0x3ed0 <main+0x18e4>
    3ece:	13 c1       	rjmp	.+550    	; 0x40f6 <main+0x1b0a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:571
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    3ed0:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x11>
    3ed4:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x12>
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	97 ff       	sbrs	r25, 7
    3edc:	f1 cf       	rjmp	.-30     	; 0x3ec0 <main+0x18d4>
main():
    3ede:	87 e1       	ldi	r24, 0x17	; 23
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	ee cf       	rjmp	.-36     	; 0x3ec0 <main+0x18d4>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:587
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3ee4:	8e 2d       	mov	r24, r14
    3ee6:	8f 77       	andi	r24, 0x7F	; 127
    3ee8:	82 30       	cpi	r24, 0x02	; 2
    3eea:	51 f4       	brne	.+20     	; 0x3f00 <main+0x1914>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:589
        {
            config.Song1_Count = ++config.Song1_Count;
    3eec:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <config+0x18>
    3ef0:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <config+0x19>
    3ef4:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:593
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    3ef6:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <config+0x19>
    3efa:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <config+0x18>
    3efe:	74 cf       	rjmp	.-280    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:591
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3f00:	83 30       	cpi	r24, 0x03	; 3
    3f02:	09 f0       	breq	.+2      	; 0x3f06 <main+0x191a>
    3f04:	08 c1       	rjmp	.+528    	; 0x4116 <main+0x1b2a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:593
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    3f06:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <config+0x18>
    3f0a:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <config+0x19>
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	97 ff       	sbrs	r25, 7
    3f12:	f1 cf       	rjmp	.-30     	; 0x3ef6 <main+0x190a>
main():
    3f14:	84 e6       	ldi	r24, 0x64	; 100
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	ee cf       	rjmp	.-36     	; 0x3ef6 <main+0x190a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:609
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3f1a:	8e 2d       	mov	r24, r14
    3f1c:	8f 77       	andi	r24, 0x7F	; 127
    3f1e:	82 30       	cpi	r24, 0x02	; 2
    3f20:	79 f4       	brne	.+30     	; 0x3f40 <main+0x1954>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:611
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    3f22:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <config+0x15>
    3f26:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <config+0x16>
    3f2a:	01 96       	adiw	r24, 0x01	; 1
    3f2c:	8f 31       	cpi	r24, 0x1F	; 31
    3f2e:	91 05       	cpc	r25, r1
    3f30:	14 f0       	brlt	.+4      	; 0x3f36 <main+0x194a>
main():
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:615
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    3f36:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <config+0x16>
    3f3a:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <config+0x15>
    3f3e:	54 cf       	rjmp	.-344    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:613
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3f40:	83 30       	cpi	r24, 0x03	; 3
    3f42:	59 f4       	brne	.+22     	; 0x3f5a <main+0x196e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:615
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    3f44:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <config+0x15>
    3f48:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <config+0x16>
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	18 16       	cp	r1, r24
    3f50:	19 06       	cpc	r1, r25
    3f52:	8c f3       	brlt	.-30     	; 0x3f36 <main+0x194a>
main():
    3f54:	8e e1       	ldi	r24, 0x1E	; 30
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	ee cf       	rjmp	.-36     	; 0x3f36 <main+0x194a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:617
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3f5a:	f1 e0       	ldi	r31, 0x01	; 1
    3f5c:	ef 12       	cpse	r14, r31
    3f5e:	3b ce       	rjmp	.-906    	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:619
        {
            config.save();
    3f60:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Config::save() [clone .constprop.28]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3f64:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <config+0x15>
    3f68:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <config+0x16>
    3f6c:	77 27       	eor	r23, r23
    3f6e:	86 e0       	ldi	r24, 0x06	; 6
    3f70:	0e 94 02 05 	call	0xa04	; 0xa04 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.58]>
    3f74:	4f cf       	rjmp	.-354    	; 0x3e14 <main+0x1828>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:632
        break;
    }
    case mnuCmdselectTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3f76:	8e 2d       	mov	r24, r14
    3f78:	8f 77       	andi	r24, 0x7F	; 127
    3f7a:	82 30       	cpi	r24, 0x02	; 2
    3f7c:	79 f4       	brne	.+30     	; 0x3f9c <main+0x19b0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:634
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    3f7e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <demoTime>
    3f82:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <demoTime+0x1>
    3f86:	01 96       	adiw	r24, 0x01	; 1
    3f88:	88 31       	cpi	r24, 0x18	; 24
    3f8a:	91 05       	cpc	r25, r1
    3f8c:	14 f0       	brlt	.+4      	; 0x3f92 <main+0x19a6>
main():
    3f8e:	84 e0       	ldi	r24, 0x04	; 4
    3f90:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:638
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3f92:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <demoTime+0x1>
    3f96:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <demoTime>
    3f9a:	26 cf       	rjmp	.-436    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:636
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3f9c:	83 30       	cpi	r24, 0x03	; 3
    3f9e:	59 f4       	brne	.+22     	; 0x3fb6 <main+0x19ca>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:638
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    3fa0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <demoTime>
    3fa4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <demoTime+0x1>
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	84 30       	cpi	r24, 0x04	; 4
    3fac:	91 05       	cpc	r25, r1
    3fae:	8c f7       	brge	.-30     	; 0x3f92 <main+0x19a6>
main():
    3fb0:	87 e1       	ldi	r24, 0x17	; 23
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	ee cf       	rjmp	.-36     	; 0x3f92 <main+0x19a6>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:640
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    3fb6:	21 e0       	ldi	r18, 0x01	; 1
    3fb8:	e2 12       	cpse	r14, r18
    3fba:	0d ce       	rjmp	.-998    	; 0x3bd6 <main+0x15ea>
    3fbc:	2b cf       	rjmp	.-426    	; 0x3e14 <main+0x1828>
reset():
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3fbe:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <Menu1>
    3fc2:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <Menu1+0x1>
    3fc6:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <Menu1+0x4>
    3fca:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3fce:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Menu1+0x2>
    3fd2:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3fd6:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellv2.3/MenuManager.cpp:21
  menuStackCount = 0;
    3fda:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:653
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    3fde:	84 e0       	ldi	r24, 0x04	; 4
    3fe0:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <appMode>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:654
        lcd.clear();
    3fe4:	0e 94 a2 07 	call	0xf44	; 0xf44 <LiquidCrystal_I2C::clear() [clone .constprop.64]>
    3fe8:	f6 cd       	rjmp	.-1044   	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:660
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3fea:	8e 2d       	mov	r24, r14
    3fec:	8f 77       	andi	r24, 0x7F	; 127
    3fee:	82 30       	cpi	r24, 0x02	; 2
    3ff0:	79 f4       	brne	.+30     	; 0x4010 <main+0x1a24>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:662
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    3ff2:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <config+0x20>
    3ff6:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <config+0x21>
    3ffa:	01 96       	adiw	r24, 0x01	; 1
    3ffc:	89 30       	cpi	r24, 0x09	; 9
    3ffe:	91 05       	cpc	r25, r1
    4000:	14 f0       	brlt	.+4      	; 0x4006 <main+0x1a1a>
main():
    4002:	83 e0       	ldi	r24, 0x03	; 3
    4004:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:666
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    4006:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <config+0x21>
    400a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <config+0x20>
    400e:	ec ce       	rjmp	.-552    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:664
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4010:	83 30       	cpi	r24, 0x03	; 3
    4012:	09 f0       	breq	.+2      	; 0x4016 <main+0x1a2a>
    4014:	ba c0       	rjmp	.+372    	; 0x418a <main+0x1b9e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:666
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    4016:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <config+0x20>
    401a:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <config+0x21>
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	83 30       	cpi	r24, 0x03	; 3
    4022:	91 05       	cpc	r25, r1
    4024:	84 f7       	brge	.-32     	; 0x4006 <main+0x1a1a>
main():
    4026:	88 e0       	ldi	r24, 0x08	; 8
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	ed cf       	rjmp	.-38     	; 0x4006 <main+0x1a1a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:682
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    402c:	8e 2d       	mov	r24, r14
    402e:	8f 77       	andi	r24, 0x7F	; 127
    4030:	82 30       	cpi	r24, 0x02	; 2
    4032:	79 f4       	brne	.+30     	; 0x4052 <main+0x1a66>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:684
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    4034:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <config+0x24>
    4038:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <config+0x25>
    403c:	01 96       	adiw	r24, 0x01	; 1
    403e:	89 30       	cpi	r24, 0x09	; 9
    4040:	91 05       	cpc	r25, r1
    4042:	14 f0       	brlt	.+4      	; 0x4048 <main+0x1a5c>
main():
    4044:	83 e0       	ldi	r24, 0x03	; 3
    4046:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:688
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    4048:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <config+0x25>
    404c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <config+0x24>
    4050:	cb ce       	rjmp	.-618    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:686
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4052:	83 30       	cpi	r24, 0x03	; 3
    4054:	59 f4       	brne	.+22     	; 0x406c <main+0x1a80>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:688
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    4056:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <config+0x24>
    405a:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <config+0x25>
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	83 30       	cpi	r24, 0x03	; 3
    4062:	91 05       	cpc	r25, r1
    4064:	8c f7       	brge	.-30     	; 0x4048 <main+0x1a5c>
main():
    4066:	88 e0       	ldi	r24, 0x08	; 8
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	ee cf       	rjmp	.-36     	; 0x4048 <main+0x1a5c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:690
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    406c:	61 e0       	ldi	r22, 0x01	; 1
    406e:	e6 12       	cpse	r14, r22
    4070:	b2 cd       	rjmp	.-1180   	; 0x3bd6 <main+0x15ea>
    4072:	cc ce       	rjmp	.-616    	; 0x3e0c <main+0x1820>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:704
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4074:	8e 2d       	mov	r24, r14
    4076:	8f 77       	andi	r24, 0x7F	; 127
    4078:	82 30       	cpi	r24, 0x02	; 2
    407a:	79 f4       	brne	.+30     	; 0x409a <main+0x1aae>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:706
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    407c:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <config+0x28>
    4080:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <config+0x29>
    4084:	01 96       	adiw	r24, 0x01	; 1
    4086:	85 31       	cpi	r24, 0x15	; 21
    4088:	91 05       	cpc	r25, r1
    408a:	14 f0       	brlt	.+4      	; 0x4090 <main+0x1aa4>
main():
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:710
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    4090:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <config+0x29>
    4094:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <config+0x28>
    4098:	a7 ce       	rjmp	.-690    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:708
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    409a:	83 30       	cpi	r24, 0x03	; 3
    409c:	09 f0       	breq	.+2      	; 0x40a0 <main+0x1ab4>
    409e:	b3 ce       	rjmp	.-666    	; 0x3e06 <main+0x181a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:710
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    40a0:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <config+0x28>
    40a4:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <config+0x29>
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	18 16       	cp	r1, r24
    40ac:	19 06       	cpc	r1, r25
    40ae:	84 f3       	brlt	.-32     	; 0x4090 <main+0x1aa4>
main():
    40b0:	84 e1       	ldi	r24, 0x14	; 20
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	ed cf       	rjmp	.-38     	; 0x4090 <main+0x1aa4>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:726
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    40b6:	8e 2d       	mov	r24, r14
    40b8:	8f 77       	andi	r24, 0x7F	; 127
    40ba:	82 30       	cpi	r24, 0x02	; 2
    40bc:	79 f4       	brne	.+30     	; 0x40dc <main+0x1af0>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:728
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    40be:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <config+0x2a>
    40c2:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <config+0x2b>
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	85 31       	cpi	r24, 0x15	; 21
    40ca:	91 05       	cpc	r25, r1
    40cc:	14 f0       	brlt	.+4      	; 0x40d2 <main+0x1ae6>
main():
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:732
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    40d2:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <config+0x2b>
    40d6:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <config+0x2a>
    40da:	86 ce       	rjmp	.-756    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:730
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    40dc:	83 30       	cpi	r24, 0x03	; 3
    40de:	59 f4       	brne	.+22     	; 0x40f6 <main+0x1b0a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:732
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    40e0:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <config+0x2a>
    40e4:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <config+0x2b>
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	18 16       	cp	r1, r24
    40ec:	19 06       	cpc	r1, r25
    40ee:	8c f3       	brlt	.-30     	; 0x40d2 <main+0x1ae6>
main():
    40f0:	84 e1       	ldi	r24, 0x14	; 20
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	ee cf       	rjmp	.-36     	; 0x40d2 <main+0x1ae6>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:734
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    40f6:	91 e0       	ldi	r25, 0x01	; 1
    40f8:	e9 12       	cpse	r14, r25
    40fa:	6d cd       	rjmp	.-1318   	; 0x3bd6 <main+0x15ea>
    40fc:	87 ce       	rjmp	.-754    	; 0x3e0c <main+0x1820>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:748
        break;
    }
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    40fe:	8e ef       	ldi	r24, 0xFE	; 254
    4100:	8e 0d       	add	r24, r14
    4102:	82 30       	cpi	r24, 0x02	; 2
    4104:	40 f4       	brcc	.+16     	; 0x4116 <main+0x1b2a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:750
        {
            config.SchlZone = !config.SchlZone;
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <config+0x17>
    410c:	91 11       	cpse	r25, r1
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <config+0x17>
    4114:	69 ce       	rjmp	.-814    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:752
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4116:	e1 e0       	ldi	r30, 0x01	; 1
    4118:	ee 12       	cpse	r14, r30
    411a:	5d cd       	rjmp	.-1350   	; 0x3bd6 <main+0x15ea>
    411c:	77 ce       	rjmp	.-786    	; 0x3e0c <main+0x1820>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:766
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    411e:	8e 2d       	mov	r24, r14
    4120:	8f 77       	andi	r24, 0x7F	; 127
    4122:	82 30       	cpi	r24, 0x02	; 2
    4124:	51 f4       	brne	.+20     	; 0x413a <main+0x1b4e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:768
        {
            config.SerialNo = ++config.SerialNo;
    4126:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <config+0x1e>
    412a:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <config+0x1f>
    412e:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:772
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
    4130:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <config+0x1f>
    4134:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <config+0x1e>
    4138:	57 ce       	rjmp	.-850    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:770
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    413a:	83 30       	cpi	r24, 0x03	; 3
    413c:	31 f4       	brne	.+12     	; 0x414a <main+0x1b5e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:772
        {
            config.SerialNo = --config.SerialNo;
    413e:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <config+0x1e>
    4142:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <config+0x1f>
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f3 cf       	rjmp	.-26     	; 0x4130 <main+0x1b44>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:774
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    414a:	f1 e0       	ldi	r31, 0x01	; 1
    414c:	ef 12       	cpse	r14, r31
    414e:	43 cd       	rjmp	.-1402   	; 0x3bd6 <main+0x15ea>
    4150:	5d ce       	rjmp	.-838    	; 0x3e0c <main+0x1820>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:788
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4152:	8e 2d       	mov	r24, r14
    4154:	8f 77       	andi	r24, 0x7F	; 127
    4156:	82 30       	cpi	r24, 0x02	; 2
    4158:	51 f4       	brne	.+20     	; 0x416e <main+0x1b82>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:790
        {
            config.DataYear = ++config.DataYear;
    415a:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <config+0x1c>
    415e:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <config+0x1d>
    4162:	01 96       	adiw	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:794
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    4164:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <config+0x1d>
    4168:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <config+0x1c>
    416c:	3d ce       	rjmp	.-902    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:792
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    416e:	83 30       	cpi	r24, 0x03	; 3
    4170:	61 f4       	brne	.+24     	; 0x418a <main+0x1b9e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:794
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    4172:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <config+0x1c>
    4176:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <config+0x1d>
    417a:	01 97       	sbiw	r24, 0x01	; 1
    417c:	86 3e       	cpi	r24, 0xE6	; 230
    417e:	27 e0       	ldi	r18, 0x07	; 7
    4180:	92 07       	cpc	r25, r18
    4182:	84 f7       	brge	.-32     	; 0x4164 <main+0x1b78>
    4184:	86 ee       	ldi	r24, 0xE6	; 230
    4186:	97 e0       	ldi	r25, 0x07	; 7
    4188:	ed cf       	rjmp	.-38     	; 0x4164 <main+0x1b78>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:796
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    418a:	31 e0       	ldi	r19, 0x01	; 1
    418c:	e3 12       	cpse	r14, r19
    418e:	23 cd       	rjmp	.-1466   	; 0x3bd6 <main+0x15ea>
    4190:	3d ce       	rjmp	.-902    	; 0x3e0c <main+0x1820>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:810
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4192:	8e 2d       	mov	r24, r14
    4194:	8f 77       	andi	r24, 0x7F	; 127
    4196:	82 30       	cpi	r24, 0x02	; 2
    4198:	79 f4       	brne	.+30     	; 0x41b8 <main+0x1bcc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:812
        {
            AlarmTimeCursor = ++AlarmTimeCursor > 23 ? 0 : AlarmTimeCursor;
    419a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <AlarmTimeCursor>
    419e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    41a2:	01 96       	adiw	r24, 0x01	; 1
    41a4:	88 31       	cpi	r24, 0x18	; 24
    41a6:	91 05       	cpc	r25, r1
    41a8:	14 f0       	brlt	.+4      	; 0x41ae <main+0x1bc2>
main():
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:816
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            AlarmTimeCursor = --AlarmTimeCursor < 0 ? 23 : AlarmTimeCursor;
    41ae:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <AlarmTimeCursor+0x1>
    41b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <AlarmTimeCursor>
    41b6:	18 ce       	rjmp	.-976    	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:814
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            AlarmTimeCursor = ++AlarmTimeCursor > 23 ? 0 : AlarmTimeCursor;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    41b8:	83 30       	cpi	r24, 0x03	; 3
    41ba:	51 f4       	brne	.+20     	; 0x41d0 <main+0x1be4>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:816
        {
            AlarmTimeCursor = --AlarmTimeCursor < 0 ? 23 : AlarmTimeCursor;
    41bc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <AlarmTimeCursor>
    41c0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	97 ff       	sbrs	r25, 7
    41c8:	f2 cf       	rjmp	.-28     	; 0x41ae <main+0x1bc2>
main():
    41ca:	87 e1       	ldi	r24, 0x17	; 23
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	ef cf       	rjmp	.-34     	; 0x41ae <main+0x1bc2>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:818
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    41d0:	61 e0       	ldi	r22, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:820
        {
            config.AlarmTime[AlarmTimeCursor] = !config.AlarmTime[AlarmTimeCursor];
    41d2:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <AlarmTimeCursor>
    41d6:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:818
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            AlarmTimeCursor = --AlarmTimeCursor < 0 ? 23 : AlarmTimeCursor;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    41da:	e6 12       	cpse	r14, r22
    41dc:	05 ce       	rjmp	.-1014   	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:839
        {
            PanchangamCursor = --PanchangamCursor < 0 ? 6 : PanchangamCursor;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.AlarmTime[PanchangamCursor] = !config.AlarmTime[PanchangamCursor];
    41de:	e9 52       	subi	r30, 0x29	; 41
    41e0:	fc 4f       	sbci	r31, 0xFC	; 252
    41e2:	84 a5       	ldd	r24, Z+44	; 0x2c
    41e4:	8e 25       	eor	r24, r14
    41e6:	84 a7       	std	Z+44, r24	; 0x2c
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:840
            config.save();
    41e8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Config::save() [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:461
    lcd.print(fmt(strbuf, 5, dat, "-", mon, "-", year));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    41ec:	d1 2c       	mov	r13, r1
    41ee:	14 ce       	rjmp	.-984    	; 0x3e18 <main+0x182c>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:829
        break;
    }
    case mnuCmdPanchangamTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    41f0:	8e 2d       	mov	r24, r14
    41f2:	8f 77       	andi	r24, 0x7F	; 127
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	79 f4       	brne	.+30     	; 0x4216 <main+0x1c2a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:831
        {
            PanchangamCursor = ++PanchangamCursor > 6 ? 0 : PanchangamCursor;
    41f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PanchangamCursor>
    41fc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	87 30       	cpi	r24, 0x07	; 7
    4204:	91 05       	cpc	r25, r1
    4206:	14 f0       	brlt	.+4      	; 0x420c <main+0x1c20>
main():
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:835
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            PanchangamCursor = --PanchangamCursor < 0 ? 6 : PanchangamCursor;
    420c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PanchangamCursor+0x1>
    4210:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PanchangamCursor>
    4214:	e9 cd       	rjmp	.-1070   	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:833
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            PanchangamCursor = ++PanchangamCursor > 6 ? 0 : PanchangamCursor;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4216:	83 30       	cpi	r24, 0x03	; 3
    4218:	51 f4       	brne	.+20     	; 0x422e <main+0x1c42>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:835
        {
            PanchangamCursor = --PanchangamCursor < 0 ? 6 : PanchangamCursor;
    421a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PanchangamCursor>
    421e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	97 ff       	sbrs	r25, 7
    4226:	f2 cf       	rjmp	.-28     	; 0x420c <main+0x1c20>
main():
    4228:	86 e0       	ldi	r24, 0x06	; 6
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	ef cf       	rjmp	.-34     	; 0x420c <main+0x1c20>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:837
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	e8 12       	cpse	r14, r24
    4232:	da cd       	rjmp	.-1100   	; 0x3de8 <main+0x17fc>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:839
        {
            config.AlarmTime[PanchangamCursor] = !config.AlarmTime[PanchangamCursor];
    4234:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <PanchangamCursor>
    4238:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    423c:	d0 cf       	rjmp	.-96     	; 0x41de <main+0x1bf2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:847
        }
        break;
    }
    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    423e:	91 e8       	ldi	r25, 0x81	; 129
    4240:	e9 12       	cpse	r14, r25
    4242:	91 c0       	rjmp	.+290    	; 0x4366 <main+0x1d7a>
setDefaults():
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:13
const char* Alarm[] = {"12AM","1AM", "2AM", "3AM", "4AM","5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM",
                       "12PM","1PM", "2PM", "3PM", "4PM","5PM", "6PM", "7PM", "8PM", "9PM", "10PM", "11PM",};
const char* Panchangam[] = {"5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM"};
void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    4244:	6b e2       	ldi	r22, 0x2B	; 43
    4246:	71 e0       	ldi	r23, 0x01	; 1
    4248:	87 ed       	ldi	r24, 0xD7	; 215
    424a:	93 e0       	ldi	r25, 0x03	; 3
    424c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <strcpy>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:14
  Song1_Count = 100;
    4250:	e4 e6       	ldi	r30, 0x64	; 100
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	f0 93 f0 03 	sts	0x03F0, r31	; 0x8003f0 <config+0x19>
    4258:	e0 93 ef 03 	sts	0x03EF, r30	; 0x8003ef <config+0x18>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:15
  Song2_Count = 100;
    425c:	f0 93 f2 03 	sts	0x03F2, r31	; 0x8003f2 <config+0x1b>
    4260:	e0 93 f1 03 	sts	0x03F1, r30	; 0x8003f1 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:16
  startTime = 5; //5AM
    4264:	25 e0       	ldi	r18, 0x05	; 5
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	30 93 e7 03 	sts	0x03E7, r19	; 0x8003e7 <config+0x10>
    426c:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <config+0xf>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:17
  endTime = 22; // 10PM
    4270:	86 e1       	ldi	r24, 0x16	; 22
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x12>
    4278:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x11>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:18
  vol = 20;
    427c:	84 e1       	ldi	r24, 0x14	; 20
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <config+0x16>
    4284:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <config+0x15>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:19
  backLightDur = 20;
    4288:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <config+0x14>
    428c:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <config+0x13>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:20
  MorSong1Time = 3;
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <config+0x21>
    4298:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <config+0x20>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:21
  EveSong1Time = 3;
    429c:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <config+0x25>
    42a0:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <config+0x24>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:22
  MorSongNo = 1;
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <config+0x29>
    42ac:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <config+0x28>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:23
  EveSongNo = 2;
    42b0:	82 e0       	ldi	r24, 0x02	; 2
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <config+0x2b>
    42b8:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:24
  SchlZone = 0;
    42bc:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <config+0x17>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:25
  SerialNo = 340;
    42c0:	84 e5       	ldi	r24, 0x54	; 84
    42c2:	91 e0       	ldi	r25, 0x01	; 1
    42c4:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <config+0x1f>
    42c8:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <config+0x1e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:26
  DataYear = 2022;
    42cc:	86 ee       	ldi	r24, 0xE6	; 230
    42ce:	97 e0       	ldi	r25, 0x07	; 7
    42d0:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <config+0x1d>
    42d4:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:28

  AlarmTime[0] = 0;
    42d8:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:29
  AlarmTime[1] = 0;
    42dc:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <config+0x2d>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:30
  AlarmTime[2] = 0;
    42e0:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <config+0x2e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:31
  AlarmTime[3] = 0;
    42e4:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <config+0x2f>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:32
  AlarmTime[4] = 0;
    42e8:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <config+0x30>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:33
  AlarmTime[5] = 1;
    42ec:	f0 92 08 04 	sts	0x0408, r15	; 0x800408 <config+0x31>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:34
  AlarmTime[6] = 1;
    42f0:	f0 92 09 04 	sts	0x0409, r15	; 0x800409 <config+0x32>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:35
  AlarmTime[7] = 1;
    42f4:	f0 92 0a 04 	sts	0x040A, r15	; 0x80040a <config+0x33>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:36
  AlarmTime[8] = 1;
    42f8:	f0 92 0b 04 	sts	0x040B, r15	; 0x80040b <config+0x34>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:37
  AlarmTime[9] = 1;
    42fc:	f0 92 0c 04 	sts	0x040C, r15	; 0x80040c <config+0x35>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:38
  AlarmTime[10] = 1;
    4300:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <config+0x36>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:39
  AlarmTime[11] = 1;
    4304:	f0 92 0e 04 	sts	0x040E, r15	; 0x80040e <config+0x37>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:40
  AlarmTime[12] = 1;
    4308:	f0 92 0f 04 	sts	0x040F, r15	; 0x80040f <config+0x38>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:41
  AlarmTime[13] = 1;
    430c:	f0 92 10 04 	sts	0x0410, r15	; 0x800410 <config+0x39>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:42
  AlarmTime[14] = 1;
    4310:	f0 92 11 04 	sts	0x0411, r15	; 0x800411 <config+0x3a>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:43
  AlarmTime[15] = 1;
    4314:	f0 92 12 04 	sts	0x0412, r15	; 0x800412 <config+0x3b>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:44
  AlarmTime[16] = 1;
    4318:	f0 92 13 04 	sts	0x0413, r15	; 0x800413 <config+0x3c>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:45
  AlarmTime[17] = 1;
    431c:	f0 92 14 04 	sts	0x0414, r15	; 0x800414 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:46
  AlarmTime[18] = 1;
    4320:	f0 92 15 04 	sts	0x0415, r15	; 0x800415 <config+0x3e>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:47
  AlarmTime[19] = 1;
    4324:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <config+0x3f>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:48
  AlarmTime[20] = 1;
    4328:	f0 92 17 04 	sts	0x0417, r15	; 0x800417 <config+0x40>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:49
  AlarmTime[21] = 1;
    432c:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <config+0x41>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:50
  AlarmTime[22] = 1;
    4330:	f0 92 19 04 	sts	0x0419, r15	; 0x800419 <config+0x42>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:51
  AlarmTime[23] = 0;
    4334:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <config+0x43>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:53

  PanchangamTime[0] = 0;
    4338:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <config+0x44>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:54
  PanchangamTime[1] = 1;
    433c:	f0 92 1c 04 	sts	0x041C, r15	; 0x80041c <config+0x45>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:55
  PanchangamTime[2] = 0;
    4340:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <config+0x46>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:56
  PanchangamTime[3] = 1;
    4344:	f0 92 1e 04 	sts	0x041E, r15	; 0x80041e <config+0x47>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:57
  PanchangamTime[4] = 0;
    4348:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <config+0x48>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:58
  PanchangamTime[5] = 1;
    434c:	f0 92 20 04 	sts	0x0420, r15	; 0x800420 <config+0x49>
e:\Arduino\Arduino Git\ChantBellv2.3/Config.cpp:59
  PanchangamTime[6] = 0;
    4350:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <config+0x4a>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:850
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    4354:	61 e0       	ldi	r22, 0x01	; 1
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:851
            lcd.print("Defaults loaded");
    435c:	82 e7       	ldi	r24, 0x72	; 114
    435e:	92 e0       	ldi	r25, 0x02	; 2
    4360:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
    4364:	38 cc       	rjmp	.-1936   	; 0x3bd6 <main+0x15ea>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:853
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    4366:	dd 24       	eor	r13, r13
    4368:	d3 94       	inc	r13
    436a:	31 ec       	ldi	r19, 0xC1	; 193
    436c:	e3 16       	cp	r14, r19
    436e:	09 f4       	brne	.+2      	; 0x4372 <main+0x1d86>
    4370:	b6 cc       	rjmp	.-1684   	; 0x3cde <main+0x16f2>
    4372:	d1 2c       	mov	r13, r1
    4374:	b4 cc       	rjmp	.-1688   	; 0x3cde <main+0x16f2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:867
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    4376:	ee 20       	and	r14, r14
    4378:	69 f0       	breq	.+26     	; 0x4394 <main+0x1da8>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:869
    {
        lcd.setCursor(1, 1);
    437a:	61 e0       	ldi	r22, 0x01	; 1
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:870
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    4382:	8c 2d       	mov	r24, r12
    4384:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    4388:	0e 94 86 0a 	call	0x150c	; 0x150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    438c:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
    4390:	e1 2c       	mov	r14, r1
    4392:	56 cd       	rjmp	.-1364   	; 0x3e40 <main+0x1854>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:874
    }
    else
    {
        if (millis() - timr_Time > 300)
    4394:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    4398:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <timr_Time>
    439c:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <timr_Time+0x1>
    43a0:	40 91 ba 03 	lds	r20, 0x03BA	; 0x8003ba <timr_Time+0x2>
    43a4:	50 91 bb 03 	lds	r21, 0x03BB	; 0x8003bb <timr_Time+0x3>
    43a8:	62 1b       	sub	r22, r18
    43aa:	73 0b       	sbc	r23, r19
    43ac:	84 0b       	sbc	r24, r20
    43ae:	95 0b       	sbc	r25, r21
    43b0:	6d 32       	cpi	r22, 0x2D	; 45
    43b2:	71 40       	sbci	r23, 0x01	; 1
    43b4:	81 05       	cpc	r24, r1
    43b6:	91 05       	cpc	r25, r1
    43b8:	08 f4       	brcc	.+2      	; 0x43bc <main+0x1dd0>
    43ba:	42 cd       	rjmp	.-1404   	; 0x3e40 <main+0x1854>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:876
        {
            if (blink)
    43bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    43c0:	88 23       	and	r24, r24
    43c2:	c1 f0       	breq	.+48     	; 0x43f4 <main+0x1e08>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:878
            {
                lcd.setCursor(1, 1);
    43c4:	61 e0       	ldi	r22, 0x01	; 1
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:879
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    43cc:	8c 2d       	mov	r24, r12
    43ce:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Config::getFormattedStr(unsigned char) [clone .constprop.75]>
    43d2:	0e 94 86 0a 	call	0x150c	; 0x150c <rpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
    43d6:	0e 94 2f 0a 	call	0x145e	; 0x145e <Print::print(char const*) [clone .constprop.94]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:880
                blink = false;
    43da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:905
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    43de:	0e 94 e5 03 	call	0x7ca	; 0x7ca <millis>
    43e2:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <timr_Time>
    43e6:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <timr_Time+0x1>
    43ea:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <timr_Time+0x2>
    43ee:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <timr_Time+0x3>
    43f2:	26 cd       	rjmp	.-1460   	; 0x3e40 <main+0x1854>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:884
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime)
    43f4:	f3 e0       	ldi	r31, 0x03	; 3
    43f6:	cf 12       	cpse	r12, r31
    43f8:	14 c0       	rjmp	.+40     	; 0x4422 <main+0x1e36>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:886
                {
                    if (blinkMode == setHr)
    43fa:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <blinkMode>
    43fe:	81 11       	cpse	r24, r1
    4400:	0b c0       	rjmp	.+22     	; 0x4418 <main+0x1e2c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:887
                        lcd.setCursor(1, 1);
    4402:	61 e0       	ldi	r22, 0x01	; 1
    4404:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:889
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    4406:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:890
                    lcd.print(F("  "));
    440a:	81 eb       	ldi	r24, 0xB1	; 177
    440c:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:901
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    440e:	0e 94 88 07 	call	0xf10	; 0xf10 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:902
                    blink = true;
    4412:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <blink>
    4416:	e3 cf       	rjmp	.-58     	; 0x43de <main+0x1df2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:888
            {
                if (cmdId == mnuCmdSetTime)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    4418:	81 30       	cpi	r24, 0x01	; 1
    441a:	b9 f7       	brne	.-18     	; 0x440a <main+0x1e1e>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:889
                        lcd.setCursor(4, 1);
    441c:	61 e0       	ldi	r22, 0x01	; 1
    441e:	84 e0       	ldi	r24, 0x04	; 4
    4420:	f2 cf       	rjmp	.-28     	; 0x4406 <main+0x1e1a>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:893
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    4422:	22 e0       	ldi	r18, 0x02	; 2
    4424:	c2 12       	cpse	r12, r18
    4426:	db cf       	rjmp	.-74     	; 0x43de <main+0x1df2>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:895
                {
                    if (blinkMode == setDate)
    4428:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <blinkMode>
    442c:	82 30       	cpi	r24, 0x02	; 2
    442e:	39 f4       	brne	.+14     	; 0x443e <main+0x1e52>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:896
                        lcd.setCursor(1, 1);
    4430:	61 e0       	ldi	r22, 0x01	; 1
    4432:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:900
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    4434:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:901
                    lcd.print(F("  "));
    4438:	8e ea       	ldi	r24, 0xAE	; 174
    443a:	92 e0       	ldi	r25, 0x02	; 2
    443c:	e8 cf       	rjmp	.-48     	; 0x440e <main+0x1e22>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:897
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    443e:	83 30       	cpi	r24, 0x03	; 3
    4440:	19 f4       	brne	.+6      	; 0x4448 <main+0x1e5c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:898
                        lcd.setCursor(4, 1);
    4442:	61 e0       	ldi	r22, 0x01	; 1
    4444:	84 e0       	ldi	r24, 0x04	; 4
    4446:	f6 cf       	rjmp	.-20     	; 0x4434 <main+0x1e48>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:899
                    if (blinkMode == setYear)
    4448:	84 30       	cpi	r24, 0x04	; 4
    444a:	b1 f7       	brne	.-20     	; 0x4438 <main+0x1e4c>
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:900
                        lcd.setCursor(9, 1);
    444c:	61 e0       	ldi	r22, 0x01	; 1
    444e:	89 e0       	ldi	r24, 0x09	; 9
    4450:	f1 cf       	rjmp	.-30     	; 0x4434 <main+0x1e48>

00004452 <_GLOBAL__sub_D_pwd>:
_GLOBAL__sub_D_pwd():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1086
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:59
    setMonth,
    setYear
};
byte blinkMode = setHr;

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    4456:	c8 e3       	ldi	r28, 0x38	; 56
    4458:	d5 e0       	ldi	r29, 0x05	; 5
__static_initialization_and_destruction_0():
    445a:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    445c:	88 81       	ld	r24, Y
    445e:	99 81       	ldd	r25, Y+1	; 0x01
    4460:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:59
    4464:	24 e0       	ldi	r18, 0x04	; 4
    4466:	c0 3f       	cpi	r28, 0xF0	; 240
    4468:	d2 07       	cpc	r29, r18
    446a:	b9 f7       	brne	.-18     	; 0x445a <_GLOBAL__sub_D_pwd+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    446c:	80 ea       	ldi	r24, 0xA0	; 160
    446e:	91 e0       	ldi	r25, 0x01	; 1
    4470:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <mySoftwareSerial+0x1>
    4474:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    4478:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <SoftwareSerial::active_object>
    447c:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <SoftwareSerial::active_object+0x1>
    4480:	80 57       	subi	r24, 0x70	; 112
    4482:	95 40       	sbci	r25, 0x05	; 5
    4484:	71 f4       	brne	.+28     	; 0x44a2 <_GLOBAL__sub_D_pwd+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    4486:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <mySoftwareSerial+0x13>
    448a:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <mySoftwareSerial+0x14>
    448e:	90 81       	ld	r25, Z
    4490:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <mySoftwareSerial+0x15>
    4494:	80 95       	com	r24
    4496:	89 23       	and	r24, r25
    4498:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    449a:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <SoftwareSerial::active_object+0x1>
    449e:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <SoftwareSerial::active_object>
_GLOBAL__sub_D_pwd():
e:\Arduino\Arduino Git\ChantBellv2.3/ChantBellv2.3.ino:1086
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
}
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	08 95       	ret

000044a8 <random_r>:
random_r():
    44a8:	8f 92       	push	r8
    44aa:	9f 92       	push	r9
    44ac:	af 92       	push	r10
    44ae:	bf 92       	push	r11
    44b0:	cf 92       	push	r12
    44b2:	df 92       	push	r13
    44b4:	ef 92       	push	r14
    44b6:	ff 92       	push	r15
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	ec 01       	movw	r28, r24
    44be:	68 81       	ld	r22, Y
    44c0:	79 81       	ldd	r23, Y+1	; 0x01
    44c2:	8a 81       	ldd	r24, Y+2	; 0x02
    44c4:	9b 81       	ldd	r25, Y+3	; 0x03
    44c6:	61 15       	cp	r22, r1
    44c8:	71 05       	cpc	r23, r1
    44ca:	81 05       	cpc	r24, r1
    44cc:	91 05       	cpc	r25, r1
    44ce:	21 f4       	brne	.+8      	; 0x44d8 <random_r+0x30>
    44d0:	64 e2       	ldi	r22, 0x24	; 36
    44d2:	79 ed       	ldi	r23, 0xD9	; 217
    44d4:	8b e5       	ldi	r24, 0x5B	; 91
    44d6:	97 e0       	ldi	r25, 0x07	; 7
    44d8:	2d e1       	ldi	r18, 0x1D	; 29
    44da:	33 ef       	ldi	r19, 0xF3	; 243
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
    44e4:	49 01       	movw	r8, r18
    44e6:	5a 01       	movw	r10, r20
    44e8:	9b 01       	movw	r18, r22
    44ea:	ac 01       	movw	r20, r24
    44ec:	a7 ea       	ldi	r26, 0xA7	; 167
    44ee:	b1 e4       	ldi	r27, 0x41	; 65
    44f0:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__muluhisi3>
    44f4:	6b 01       	movw	r12, r22
    44f6:	7c 01       	movw	r14, r24
    44f8:	ac ee       	ldi	r26, 0xEC	; 236
    44fa:	b4 ef       	ldi	r27, 0xF4	; 244
    44fc:	a5 01       	movw	r20, r10
    44fe:	94 01       	movw	r18, r8
    4500:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulohisi3>
    4504:	c6 0e       	add	r12, r22
    4506:	d7 1e       	adc	r13, r23
    4508:	e8 1e       	adc	r14, r24
    450a:	f9 1e       	adc	r15, r25
    450c:	f7 fe       	sbrs	r15, 7
    450e:	06 c0       	rjmp	.+12     	; 0x451c <random_r+0x74>
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	c8 1a       	sub	r12, r24
    4514:	d1 08       	sbc	r13, r1
    4516:	e1 08       	sbc	r14, r1
    4518:	80 e8       	ldi	r24, 0x80	; 128
    451a:	f8 0a       	sbc	r15, r24
    451c:	c8 82       	st	Y, r12
    451e:	d9 82       	std	Y+1, r13	; 0x01
    4520:	ea 82       	std	Y+2, r14	; 0x02
    4522:	fb 82       	std	Y+3, r15	; 0x03
    4524:	c7 01       	movw	r24, r14
    4526:	b6 01       	movw	r22, r12
    4528:	9f 77       	andi	r25, 0x7F	; 127
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	ff 90       	pop	r15
    4530:	ef 90       	pop	r14
    4532:	df 90       	pop	r13
    4534:	cf 90       	pop	r12
    4536:	bf 90       	pop	r11
    4538:	af 90       	pop	r10
    453a:	9f 90       	pop	r9
    453c:	8f 90       	pop	r8
    453e:	08 95       	ret

00004540 <random>:
random():
    4540:	8f 92       	push	r8
    4542:	9f 92       	push	r9
    4544:	af 92       	push	r10
    4546:	bf 92       	push	r11
    4548:	cf 92       	push	r12
    454a:	df 92       	push	r13
    454c:	ef 92       	push	r14
    454e:	ff 92       	push	r15
    4550:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <next>
    4554:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <next+0x1>
    4558:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <next+0x2>
    455c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <next+0x3>
    4560:	61 15       	cp	r22, r1
    4562:	71 05       	cpc	r23, r1
    4564:	81 05       	cpc	r24, r1
    4566:	91 05       	cpc	r25, r1
    4568:	21 f4       	brne	.+8      	; 0x4572 <random+0x32>
    456a:	64 e2       	ldi	r22, 0x24	; 36
    456c:	79 ed       	ldi	r23, 0xD9	; 217
    456e:	8b e5       	ldi	r24, 0x5B	; 91
    4570:	97 e0       	ldi	r25, 0x07	; 7
    4572:	2d e1       	ldi	r18, 0x1D	; 29
    4574:	33 ef       	ldi	r19, 0xF3	; 243
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__divmodsi4>
    457e:	49 01       	movw	r8, r18
    4580:	5a 01       	movw	r10, r20
    4582:	9b 01       	movw	r18, r22
    4584:	ac 01       	movw	r20, r24
    4586:	a7 ea       	ldi	r26, 0xA7	; 167
    4588:	b1 e4       	ldi	r27, 0x41	; 65
    458a:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__muluhisi3>
    458e:	6b 01       	movw	r12, r22
    4590:	7c 01       	movw	r14, r24
    4592:	ac ee       	ldi	r26, 0xEC	; 236
    4594:	b4 ef       	ldi	r27, 0xF4	; 244
    4596:	a5 01       	movw	r20, r10
    4598:	94 01       	movw	r18, r8
    459a:	0e 94 89 23 	call	0x4712	; 0x4712 <__mulohisi3>
    459e:	c6 0e       	add	r12, r22
    45a0:	d7 1e       	adc	r13, r23
    45a2:	e8 1e       	adc	r14, r24
    45a4:	f9 1e       	adc	r15, r25
    45a6:	f7 fe       	sbrs	r15, 7
    45a8:	06 c0       	rjmp	.+12     	; 0x45b6 <random+0x76>
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	c8 1a       	sub	r12, r24
    45ae:	d1 08       	sbc	r13, r1
    45b0:	e1 08       	sbc	r14, r1
    45b2:	80 e8       	ldi	r24, 0x80	; 128
    45b4:	f8 0a       	sbc	r15, r24
    45b6:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <next>
    45ba:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <next+0x1>
    45be:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <next+0x2>
    45c2:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <next+0x3>
    45c6:	c7 01       	movw	r24, r14
    45c8:	b6 01       	movw	r22, r12
    45ca:	9f 77       	andi	r25, 0x7F	; 127
    45cc:	ff 90       	pop	r15
    45ce:	ef 90       	pop	r14
    45d0:	df 90       	pop	r13
    45d2:	cf 90       	pop	r12
    45d4:	bf 90       	pop	r11
    45d6:	af 90       	pop	r10
    45d8:	9f 90       	pop	r9
    45da:	8f 90       	pop	r8
    45dc:	08 95       	ret

000045de <srandom>:
srandom():
    45de:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <next>
    45e2:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <next+0x1>
    45e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <next+0x2>
    45ea:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <next+0x3>
    45ee:	08 95       	ret

000045f0 <strcpy_P>:
strcpy_P():
    45f0:	fb 01       	movw	r30, r22
    45f2:	dc 01       	movw	r26, r24
    45f4:	05 90       	lpm	r0, Z+
    45f6:	0d 92       	st	X+, r0
    45f8:	00 20       	and	r0, r0
    45fa:	e1 f7       	brne	.-8      	; 0x45f4 <strcpy_P+0x4>
    45fc:	08 95       	ret

000045fe <__itoa_ncheck>:
__itoa_ncheck():
    45fe:	bb 27       	eor	r27, r27
    4600:	4a 30       	cpi	r20, 0x0A	; 10
    4602:	31 f4       	brne	.+12     	; 0x4610 <__itoa_ncheck+0x12>
    4604:	99 23       	and	r25, r25
    4606:	22 f4       	brpl	.+8      	; 0x4610 <__itoa_ncheck+0x12>
    4608:	bd e2       	ldi	r27, 0x2D	; 45
    460a:	90 95       	com	r25
    460c:	81 95       	neg	r24
    460e:	9f 4f       	sbci	r25, 0xFF	; 255
    4610:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <__utoa_common>

00004614 <__utoa_ncheck>:
__utoa_ncheck():
    4614:	bb 27       	eor	r27, r27

00004616 <__utoa_common>:
    4616:	fb 01       	movw	r30, r22
    4618:	55 27       	eor	r21, r21
    461a:	aa 27       	eor	r26, r26
    461c:	88 0f       	add	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	aa 1f       	adc	r26, r26
    4622:	a4 17       	cp	r26, r20
    4624:	10 f0       	brcs	.+4      	; 0x462a <__utoa_common+0x14>
    4626:	a4 1b       	sub	r26, r20
    4628:	83 95       	inc	r24
    462a:	50 51       	subi	r21, 0x10	; 16
    462c:	b9 f7       	brne	.-18     	; 0x461c <__utoa_common+0x6>
    462e:	a0 5d       	subi	r26, 0xD0	; 208
    4630:	aa 33       	cpi	r26, 0x3A	; 58
    4632:	08 f0       	brcs	.+2      	; 0x4636 <__utoa_common+0x20>
    4634:	a9 5d       	subi	r26, 0xD9	; 217
    4636:	a1 93       	st	Z+, r26
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	79 f7       	brne	.-34     	; 0x461a <__utoa_common+0x4>
    463c:	b1 11       	cpse	r27, r1
    463e:	b1 93       	st	Z+, r27
    4640:	11 92       	st	Z+, r1
    4642:	cb 01       	movw	r24, r22
    4644:	0c 94 24 23 	jmp	0x4648	; 0x4648 <strrev>

00004648 <strrev>:
strrev():
    4648:	dc 01       	movw	r26, r24
    464a:	fc 01       	movw	r30, r24
    464c:	67 2f       	mov	r22, r23
    464e:	71 91       	ld	r23, Z+
    4650:	77 23       	and	r23, r23
    4652:	e1 f7       	brne	.-8      	; 0x464c <strrev+0x4>
    4654:	32 97       	sbiw	r30, 0x02	; 2
    4656:	04 c0       	rjmp	.+8      	; 0x4660 <strrev+0x18>
    4658:	7c 91       	ld	r23, X
    465a:	6d 93       	st	X+, r22
    465c:	70 83       	st	Z, r23
    465e:	62 91       	ld	r22, -Z
    4660:	ae 17       	cp	r26, r30
    4662:	bf 07       	cpc	r27, r31
    4664:	c8 f3       	brcs	.-14     	; 0x4658 <strrev+0x10>
    4666:	08 95       	ret

00004668 <eeprom_read_block>:
eeprom_read_block():
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22

0000466c <eeprom_read_blraw>:
    466c:	fc 01       	movw	r30, r24
    466e:	f9 99       	sbic	0x1f, 1	; 31
    4670:	fe cf       	rjmp	.-4      	; 0x466e <eeprom_read_blraw+0x2>
    4672:	06 c0       	rjmp	.+12     	; 0x4680 <eeprom_read_blraw+0x14>
    4674:	f2 bd       	out	0x22, r31	; 34
    4676:	e1 bd       	out	0x21, r30	; 33
    4678:	f8 9a       	sbi	0x1f, 0	; 31
    467a:	31 96       	adiw	r30, 0x01	; 1
    467c:	00 b4       	in	r0, 0x20	; 32
    467e:	0d 92       	st	X+, r0
    4680:	41 50       	subi	r20, 0x01	; 1
    4682:	50 40       	sbci	r21, 0x00	; 0
    4684:	b8 f7       	brcc	.-18     	; 0x4674 <eeprom_read_blraw+0x8>
    4686:	08 95       	ret

00004688 <eeprom_write_block>:
eeprom_write_block():
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	03 c0       	rjmp	.+6      	; 0x4694 <eeprom_write_block+0xc>
    468e:	2d 91       	ld	r18, X+
    4690:	0e 94 4f 23 	call	0x469e	; 0x469e <eeprom_write_r18>
    4694:	41 50       	subi	r20, 0x01	; 1
    4696:	50 40       	sbci	r21, 0x00	; 0
    4698:	d0 f7       	brcc	.-12     	; 0x468e <eeprom_write_block+0x6>
    469a:	08 95       	ret

0000469c <eeprom_write_byte>:
eeprom_write_byte():
    469c:	26 2f       	mov	r18, r22

0000469e <eeprom_write_r18>:
    469e:	f9 99       	sbic	0x1f, 1	; 31
    46a0:	fe cf       	rjmp	.-4      	; 0x469e <eeprom_write_r18>
    46a2:	1f ba       	out	0x1f, r1	; 31
    46a4:	92 bd       	out	0x22, r25	; 34
    46a6:	81 bd       	out	0x21, r24	; 33
    46a8:	20 bd       	out	0x20, r18	; 32
    46aa:	0f b6       	in	r0, 0x3f	; 63
    46ac:	f8 94       	cli
    46ae:	fa 9a       	sbi	0x1f, 2	; 31
    46b0:	f9 9a       	sbi	0x1f, 1	; 31
    46b2:	0f be       	out	0x3f, r0	; 63
    46b4:	01 96       	adiw	r24, 0x01	; 1
    46b6:	08 95       	ret

000046b8 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    46b8:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    46ba:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    46bc:	1e f4       	brtc	.+6      	; 0x46c4 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    46be:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    46c0:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    46c4:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    46c6:	07 d0       	rcall	.+14     	; 0x46d6 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    46c8:	0e 94 c5 23 	call	0x478a	; 0x478a <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    46cc:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    46ce:	03 d0       	rcall	.+6      	; 0x46d6 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    46d0:	4e f4       	brtc	.+18     	; 0x46e4 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    46d2:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__negsi2>

000046d6 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    46d6:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    46d8:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    46da:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    46dc:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    46de:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    46e0:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    46e2:	5f 4f       	sbci	r21, 0xFF	; 255

000046e4 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    46e4:	08 95       	ret

000046e6 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    46e6:	90 95       	com	r25
    46e8:	80 95       	com	r24
    46ea:	70 95       	com	r23
    46ec:	61 95       	neg	r22
    46ee:	7f 4f       	sbci	r23, 0xFF	; 255
    46f0:	8f 4f       	sbci	r24, 0xFF	; 255
    46f2:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    46f4:	08 95       	ret

000046f6 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    46f6:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    46fa:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    46fc:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    46fe:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4700:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4702:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4704:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4706:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    4708:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    470a:	08 95       	ret

0000470c <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    470c:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    470e:	0c 94 7b 23 	jmp	0x46f6	; 0x46f6 <__muluhisi3>

00004712 <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    4712:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    4716:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    4718:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    471a:	08 95       	ret

0000471c <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    471c:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    471e:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    4720:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    4722:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    4724:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    4726:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    4728:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    472a:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    472c:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    472e:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    4730:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    4732:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    4734:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    4736:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    4738:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    473a:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    473c:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    473e:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    4740:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    4742:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    4744:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    4746:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    4748:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    474a:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    474c:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    474e:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    4750:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    4752:	09 94       	ijmp

00004754 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    4754:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    4756:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    4758:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    475a:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    475c:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    475e:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    4760:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    4762:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    4764:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    4766:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    4768:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    476a:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    476c:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    476e:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    4770:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    4772:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    4774:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    4776:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    4778:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    477a:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    477c:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    477e:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    4780:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    4782:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    4784:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    4786:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    4788:	08 95       	ret

0000478a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    478a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    478c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    478e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4790:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4792:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4794:	0d c0       	rjmp	.+26     	; 0x47b0 <__udivmodsi4_ep>

00004796 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4796:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4798:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    479a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    479c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    479e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    47a0:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    47a2:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    47a4:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    47a6:	20 f0       	brcs	.+8      	; 0x47b0 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    47a8:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    47aa:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    47ac:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    47ae:	f5 0b       	sbc	r31, r21

000047b0 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    47b0:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    47b2:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    47b4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    47b6:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    47b8:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    47ba:	69 f7       	brne	.-38     	; 0x4796 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    47bc:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    47be:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    47c0:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    47c2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    47c4:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    47c6:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    47c8:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    47ca:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    47cc:	08 95       	ret

000047ce <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    47ce:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    47d0:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    47d2:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    47d4:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    47d6:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    47d8:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    47da:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    47dc:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    47de:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    47e0:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    47e2:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    47e4:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    47e6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    47e8:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    47ea:	08 95       	ret

000047ec <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    47ec:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    47ee:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    47f0:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    47f2:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    47f6:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    47f8:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    47fa:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    47fc:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    47fe:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    4800:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    4802:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    4804:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    4806:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    4808:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    480a:	08 95       	ret

0000480c <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    480c:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    480e:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    4810:	04 c0       	rjmp	.+8      	; 0x481a <__udivmodqi4_ep>

00004812 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    4812:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    4814:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    4816:	08 f0       	brcs	.+2      	; 0x481a <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    4818:	96 1b       	sub	r25, r22

0000481a <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    481a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    481c:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    481e:	c9 f7       	brne	.-14     	; 0x4812 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    4820:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    4822:	08 95       	ret

00004824 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4824:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    4826:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    4828:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    482a:	07 c0       	rjmp	.+14     	; 0x483a <__udivmodhi4_ep>

0000482c <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    482c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    482e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4830:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4832:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4834:	10 f0       	brcs	.+4      	; 0x483a <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4836:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4838:	b7 0b       	sbc	r27, r23

0000483a <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    483a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    483c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    483e:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4840:	a9 f7       	brne	.-22     	; 0x482c <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4842:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4844:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4846:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4848:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    484a:	08 95       	ret

0000484c <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    484c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    484e:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    4850:	16 f4       	brtc	.+4      	; 0x4856 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    4852:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    4854:	07 d0       	rcall	.+14     	; 0x4864 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    4856:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    4858:	09 d0       	rcall	.+18     	; 0x486c <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    485a:	0e 94 12 24 	call	0x4824	; 0x4824 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    485e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    4860:	05 d0       	rcall	.+10     	; 0x486c <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    4862:	3e f4       	brtc	.+14     	; 0x4872 <__divmodhi4_exit>

00004864 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    4864:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    4866:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    4868:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    486a:	08 95       	ret

0000486c <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    486c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    486e:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    4870:	7f 4f       	sbci	r23, 0xFF	; 255

00004872 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    4872:	08 95       	ret

00004874 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4874:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4876:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    4878:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    487a:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    487c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    487e:	09 94       	ijmp

00004880 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    4880:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__umulhisi3>

00004884 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    4884:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    4886:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    4888:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    488a:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    488c:	08 95       	ret

0000488e <malloc>:
malloc():
    488e:	0f 93       	push	r16
    4890:	1f 93       	push	r17
    4892:	cf 93       	push	r28
    4894:	df 93       	push	r29
    4896:	82 30       	cpi	r24, 0x02	; 2
    4898:	91 05       	cpc	r25, r1
    489a:	10 f4       	brcc	.+4      	; 0x48a0 <malloc+0x12>
    489c:	82 e0       	ldi	r24, 0x02	; 2
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	e0 91 91 05 	lds	r30, 0x0591	; 0x800591 <__flp>
    48a4:	f0 91 92 05 	lds	r31, 0x0592	; 0x800592 <__flp+0x1>
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	b0 e0       	ldi	r27, 0x00	; 0
    48ae:	a0 e0       	ldi	r26, 0x00	; 0
    48b0:	30 97       	sbiw	r30, 0x00	; 0
    48b2:	99 f4       	brne	.+38     	; 0x48da <malloc+0x4c>
    48b4:	21 15       	cp	r18, r1
    48b6:	31 05       	cpc	r19, r1
    48b8:	09 f4       	brne	.+2      	; 0x48bc <malloc+0x2e>
    48ba:	4a c0       	rjmp	.+148    	; 0x4950 <malloc+0xc2>
    48bc:	28 1b       	sub	r18, r24
    48be:	39 0b       	sbc	r19, r25
    48c0:	24 30       	cpi	r18, 0x04	; 4
    48c2:	31 05       	cpc	r19, r1
    48c4:	d8 f5       	brcc	.+118    	; 0x493c <malloc+0xae>
    48c6:	8a 81       	ldd	r24, Y+2	; 0x02
    48c8:	9b 81       	ldd	r25, Y+3	; 0x03
    48ca:	61 15       	cp	r22, r1
    48cc:	71 05       	cpc	r23, r1
    48ce:	89 f1       	breq	.+98     	; 0x4932 <malloc+0xa4>
    48d0:	fb 01       	movw	r30, r22
    48d2:	93 83       	std	Z+3, r25	; 0x03
    48d4:	82 83       	std	Z+2, r24	; 0x02
    48d6:	fe 01       	movw	r30, r28
    48d8:	11 c0       	rjmp	.+34     	; 0x48fc <malloc+0x6e>
    48da:	40 81       	ld	r20, Z
    48dc:	51 81       	ldd	r21, Z+1	; 0x01
    48de:	02 81       	ldd	r16, Z+2	; 0x02
    48e0:	13 81       	ldd	r17, Z+3	; 0x03
    48e2:	48 17       	cp	r20, r24
    48e4:	59 07       	cpc	r21, r25
    48e6:	e0 f0       	brcs	.+56     	; 0x4920 <malloc+0x92>
    48e8:	48 17       	cp	r20, r24
    48ea:	59 07       	cpc	r21, r25
    48ec:	99 f4       	brne	.+38     	; 0x4914 <malloc+0x86>
    48ee:	10 97       	sbiw	r26, 0x00	; 0
    48f0:	61 f0       	breq	.+24     	; 0x490a <malloc+0x7c>
    48f2:	12 96       	adiw	r26, 0x02	; 2
    48f4:	0c 93       	st	X, r16
    48f6:	12 97       	sbiw	r26, 0x02	; 2
    48f8:	13 96       	adiw	r26, 0x03	; 3
    48fa:	1c 93       	st	X, r17
    48fc:	32 96       	adiw	r30, 0x02	; 2
    48fe:	cf 01       	movw	r24, r30
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	1f 91       	pop	r17
    4906:	0f 91       	pop	r16
    4908:	08 95       	ret
    490a:	00 93 91 05 	sts	0x0591, r16	; 0x800591 <__flp>
    490e:	10 93 92 05 	sts	0x0592, r17	; 0x800592 <__flp+0x1>
    4912:	f4 cf       	rjmp	.-24     	; 0x48fc <malloc+0x6e>
    4914:	21 15       	cp	r18, r1
    4916:	31 05       	cpc	r19, r1
    4918:	51 f0       	breq	.+20     	; 0x492e <malloc+0xa0>
    491a:	42 17       	cp	r20, r18
    491c:	53 07       	cpc	r21, r19
    491e:	38 f0       	brcs	.+14     	; 0x492e <malloc+0xa0>
    4920:	a9 01       	movw	r20, r18
    4922:	db 01       	movw	r26, r22
    4924:	9a 01       	movw	r18, r20
    4926:	bd 01       	movw	r22, r26
    4928:	df 01       	movw	r26, r30
    492a:	f8 01       	movw	r30, r16
    492c:	c1 cf       	rjmp	.-126    	; 0x48b0 <malloc+0x22>
    492e:	ef 01       	movw	r28, r30
    4930:	f9 cf       	rjmp	.-14     	; 0x4924 <malloc+0x96>
    4932:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <__flp+0x1>
    4936:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <__flp>
    493a:	cd cf       	rjmp	.-102    	; 0x48d6 <malloc+0x48>
    493c:	fe 01       	movw	r30, r28
    493e:	e2 0f       	add	r30, r18
    4940:	f3 1f       	adc	r31, r19
    4942:	81 93       	st	Z+, r24
    4944:	91 93       	st	Z+, r25
    4946:	22 50       	subi	r18, 0x02	; 2
    4948:	31 09       	sbc	r19, r1
    494a:	39 83       	std	Y+1, r19	; 0x01
    494c:	28 83       	st	Y, r18
    494e:	d7 cf       	rjmp	.-82     	; 0x48fe <malloc+0x70>
    4950:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <__brkval>
    4954:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <__brkval+0x1>
    4958:	23 2b       	or	r18, r19
    495a:	41 f4       	brne	.+16     	; 0x496c <malloc+0xde>
    495c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <__malloc_heap_start>
    4960:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__malloc_heap_start+0x1>
    4964:	30 93 90 05 	sts	0x0590, r19	; 0x800590 <__brkval+0x1>
    4968:	20 93 8f 05 	sts	0x058F, r18	; 0x80058f <__brkval>
    496c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__malloc_heap_end>
    4970:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__malloc_heap_end+0x1>
    4974:	21 15       	cp	r18, r1
    4976:	31 05       	cpc	r19, r1
    4978:	41 f4       	brne	.+16     	; 0x498a <malloc+0xfc>
    497a:	2d b7       	in	r18, 0x3d	; 61
    497c:	3e b7       	in	r19, 0x3e	; 62
    497e:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <__malloc_margin>
    4982:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <__malloc_margin+0x1>
    4986:	24 1b       	sub	r18, r20
    4988:	35 0b       	sbc	r19, r21
    498a:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <__brkval>
    498e:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <__brkval+0x1>
    4992:	e2 17       	cp	r30, r18
    4994:	f3 07       	cpc	r31, r19
    4996:	a0 f4       	brcc	.+40     	; 0x49c0 <malloc+0x132>
    4998:	2e 1b       	sub	r18, r30
    499a:	3f 0b       	sbc	r19, r31
    499c:	28 17       	cp	r18, r24
    499e:	39 07       	cpc	r19, r25
    49a0:	78 f0       	brcs	.+30     	; 0x49c0 <malloc+0x132>
    49a2:	ac 01       	movw	r20, r24
    49a4:	4e 5f       	subi	r20, 0xFE	; 254
    49a6:	5f 4f       	sbci	r21, 0xFF	; 255
    49a8:	24 17       	cp	r18, r20
    49aa:	35 07       	cpc	r19, r21
    49ac:	48 f0       	brcs	.+18     	; 0x49c0 <malloc+0x132>
    49ae:	4e 0f       	add	r20, r30
    49b0:	5f 1f       	adc	r21, r31
    49b2:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <__brkval+0x1>
    49b6:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <__brkval>
    49ba:	81 93       	st	Z+, r24
    49bc:	91 93       	st	Z+, r25
    49be:	9f cf       	rjmp	.-194    	; 0x48fe <malloc+0x70>
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	e0 e0       	ldi	r30, 0x00	; 0
    49c4:	9c cf       	rjmp	.-200    	; 0x48fe <malloc+0x70>

000049c6 <free>:
free():
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	e9 f0       	breq	.+58     	; 0x4a08 <free+0x42>
    49ce:	fc 01       	movw	r30, r24
    49d0:	32 97       	sbiw	r30, 0x02	; 2
    49d2:	13 82       	std	Z+3, r1	; 0x03
    49d4:	12 82       	std	Z+2, r1	; 0x02
    49d6:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <__flp>
    49da:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <__flp+0x1>
    49de:	ed 01       	movw	r28, r26
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	10 97       	sbiw	r26, 0x00	; 0
    49e6:	a1 f4       	brne	.+40     	; 0x4a10 <free+0x4a>
    49e8:	20 81       	ld	r18, Z
    49ea:	31 81       	ldd	r19, Z+1	; 0x01
    49ec:	82 0f       	add	r24, r18
    49ee:	93 1f       	adc	r25, r19
    49f0:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <__brkval>
    49f4:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <__brkval+0x1>
    49f8:	28 17       	cp	r18, r24
    49fa:	39 07       	cpc	r19, r25
    49fc:	09 f0       	breq	.+2      	; 0x4a00 <free+0x3a>
    49fe:	61 c0       	rjmp	.+194    	; 0x4ac2 <free+0xfc>
    4a00:	f0 93 90 05 	sts	0x0590, r31	; 0x800590 <__brkval+0x1>
    4a04:	e0 93 8f 05 	sts	0x058F, r30	; 0x80058f <__brkval>
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	08 95       	ret
    4a0e:	ea 01       	movw	r28, r20
    4a10:	ce 17       	cp	r28, r30
    4a12:	df 07       	cpc	r29, r31
    4a14:	e8 f5       	brcc	.+122    	; 0x4a90 <free+0xca>
    4a16:	4a 81       	ldd	r20, Y+2	; 0x02
    4a18:	5b 81       	ldd	r21, Y+3	; 0x03
    4a1a:	9e 01       	movw	r18, r28
    4a1c:	41 15       	cp	r20, r1
    4a1e:	51 05       	cpc	r21, r1
    4a20:	b1 f7       	brne	.-20     	; 0x4a0e <free+0x48>
    4a22:	e9 01       	movw	r28, r18
    4a24:	fb 83       	std	Y+3, r31	; 0x03
    4a26:	ea 83       	std	Y+2, r30	; 0x02
    4a28:	49 91       	ld	r20, Y+
    4a2a:	59 91       	ld	r21, Y+
    4a2c:	c4 0f       	add	r28, r20
    4a2e:	d5 1f       	adc	r29, r21
    4a30:	ec 17       	cp	r30, r28
    4a32:	fd 07       	cpc	r31, r29
    4a34:	61 f4       	brne	.+24     	; 0x4a4e <free+0x88>
    4a36:	80 81       	ld	r24, Z
    4a38:	91 81       	ldd	r25, Z+1	; 0x01
    4a3a:	02 96       	adiw	r24, 0x02	; 2
    4a3c:	84 0f       	add	r24, r20
    4a3e:	95 1f       	adc	r25, r21
    4a40:	e9 01       	movw	r28, r18
    4a42:	99 83       	std	Y+1, r25	; 0x01
    4a44:	88 83       	st	Y, r24
    4a46:	82 81       	ldd	r24, Z+2	; 0x02
    4a48:	93 81       	ldd	r25, Z+3	; 0x03
    4a4a:	9b 83       	std	Y+3, r25	; 0x03
    4a4c:	8a 83       	std	Y+2, r24	; 0x02
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	e0 e0       	ldi	r30, 0x00	; 0
    4a52:	12 96       	adiw	r26, 0x02	; 2
    4a54:	8d 91       	ld	r24, X+
    4a56:	9c 91       	ld	r25, X
    4a58:	13 97       	sbiw	r26, 0x03	; 3
    4a5a:	00 97       	sbiw	r24, 0x00	; 0
    4a5c:	b9 f5       	brne	.+110    	; 0x4acc <free+0x106>
    4a5e:	2d 91       	ld	r18, X+
    4a60:	3c 91       	ld	r19, X
    4a62:	11 97       	sbiw	r26, 0x01	; 1
    4a64:	cd 01       	movw	r24, r26
    4a66:	02 96       	adiw	r24, 0x02	; 2
    4a68:	82 0f       	add	r24, r18
    4a6a:	93 1f       	adc	r25, r19
    4a6c:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <__brkval>
    4a70:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <__brkval+0x1>
    4a74:	28 17       	cp	r18, r24
    4a76:	39 07       	cpc	r19, r25
    4a78:	39 f6       	brne	.-114    	; 0x4a08 <free+0x42>
    4a7a:	30 97       	sbiw	r30, 0x00	; 0
    4a7c:	51 f5       	brne	.+84     	; 0x4ad2 <free+0x10c>
    4a7e:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <__flp+0x1>
    4a82:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <__flp>
    4a86:	b0 93 90 05 	sts	0x0590, r27	; 0x800590 <__brkval+0x1>
    4a8a:	a0 93 8f 05 	sts	0x058F, r26	; 0x80058f <__brkval>
    4a8e:	bc cf       	rjmp	.-136    	; 0x4a08 <free+0x42>
    4a90:	d3 83       	std	Z+3, r29	; 0x03
    4a92:	c2 83       	std	Z+2, r28	; 0x02
    4a94:	40 81       	ld	r20, Z
    4a96:	51 81       	ldd	r21, Z+1	; 0x01
    4a98:	84 0f       	add	r24, r20
    4a9a:	95 1f       	adc	r25, r21
    4a9c:	c8 17       	cp	r28, r24
    4a9e:	d9 07       	cpc	r29, r25
    4aa0:	61 f4       	brne	.+24     	; 0x4aba <free+0xf4>
    4aa2:	4e 5f       	subi	r20, 0xFE	; 254
    4aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa6:	88 81       	ld	r24, Y
    4aa8:	99 81       	ldd	r25, Y+1	; 0x01
    4aaa:	48 0f       	add	r20, r24
    4aac:	59 1f       	adc	r21, r25
    4aae:	51 83       	std	Z+1, r21	; 0x01
    4ab0:	40 83       	st	Z, r20
    4ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab6:	93 83       	std	Z+3, r25	; 0x03
    4ab8:	82 83       	std	Z+2, r24	; 0x02
    4aba:	21 15       	cp	r18, r1
    4abc:	31 05       	cpc	r19, r1
    4abe:	09 f0       	breq	.+2      	; 0x4ac2 <free+0xfc>
    4ac0:	b0 cf       	rjmp	.-160    	; 0x4a22 <free+0x5c>
    4ac2:	f0 93 92 05 	sts	0x0592, r31	; 0x800592 <__flp+0x1>
    4ac6:	e0 93 91 05 	sts	0x0591, r30	; 0x800591 <__flp>
    4aca:	9e cf       	rjmp	.-196    	; 0x4a08 <free+0x42>
    4acc:	fd 01       	movw	r30, r26
    4ace:	dc 01       	movw	r26, r24
    4ad0:	c0 cf       	rjmp	.-128    	; 0x4a52 <free+0x8c>
    4ad2:	13 82       	std	Z+3, r1	; 0x03
    4ad4:	12 82       	std	Z+2, r1	; 0x02
    4ad6:	d7 cf       	rjmp	.-82     	; 0x4a86 <free+0xc0>

00004ad8 <realloc>:
realloc():
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	a0 e0       	ldi	r26, 0x00	; 0
    4adc:	e2 e7       	ldi	r30, 0x72	; 114
    4ade:	f5 e2       	ldi	r31, 0x25	; 37
    4ae0:	0c 94 90 23 	jmp	0x4720	; 0x4720 <__prologue_saves__+0x4>
    4ae4:	8c 01       	movw	r16, r24
    4ae6:	00 97       	sbiw	r24, 0x00	; 0
    4ae8:	51 f4       	brne	.+20     	; 0x4afe <realloc+0x26>
    4aea:	cb 01       	movw	r24, r22
    4aec:	0e 94 47 24 	call	0x488e	; 0x488e <malloc>
    4af0:	8c 01       	movw	r16, r24
    4af2:	c8 01       	movw	r24, r16
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
    4af8:	e0 e1       	ldi	r30, 0x10	; 16
    4afa:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <__epilogue_restores__+0x4>
    4afe:	fc 01       	movw	r30, r24
    4b00:	e6 0f       	add	r30, r22
    4b02:	f7 1f       	adc	r31, r23
    4b04:	9c 01       	movw	r18, r24
    4b06:	22 50       	subi	r18, 0x02	; 2
    4b08:	31 09       	sbc	r19, r1
    4b0a:	e2 17       	cp	r30, r18
    4b0c:	f3 07       	cpc	r31, r19
    4b0e:	08 f4       	brcc	.+2      	; 0x4b12 <realloc+0x3a>
    4b10:	9d c0       	rjmp	.+314    	; 0x4c4c <realloc+0x174>
    4b12:	d9 01       	movw	r26, r18
    4b14:	cd 91       	ld	r28, X+
    4b16:	dc 91       	ld	r29, X
    4b18:	11 97       	sbiw	r26, 0x01	; 1
    4b1a:	c6 17       	cp	r28, r22
    4b1c:	d7 07       	cpc	r29, r23
    4b1e:	98 f0       	brcs	.+38     	; 0x4b46 <realloc+0x6e>
    4b20:	c5 30       	cpi	r28, 0x05	; 5
    4b22:	d1 05       	cpc	r29, r1
    4b24:	30 f3       	brcs	.-52     	; 0x4af2 <realloc+0x1a>
    4b26:	ce 01       	movw	r24, r28
    4b28:	04 97       	sbiw	r24, 0x04	; 4
    4b2a:	86 17       	cp	r24, r22
    4b2c:	97 07       	cpc	r25, r23
    4b2e:	08 f3       	brcs	.-62     	; 0x4af2 <realloc+0x1a>
    4b30:	c6 1b       	sub	r28, r22
    4b32:	d7 0b       	sbc	r29, r23
    4b34:	22 97       	sbiw	r28, 0x02	; 2
    4b36:	c1 93       	st	Z+, r28
    4b38:	d1 93       	st	Z+, r29
    4b3a:	6d 93       	st	X+, r22
    4b3c:	7c 93       	st	X, r23
    4b3e:	cf 01       	movw	r24, r30
    4b40:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
    4b44:	d6 cf       	rjmp	.-84     	; 0x4af2 <realloc+0x1a>
    4b46:	5b 01       	movw	r10, r22
    4b48:	ac 1a       	sub	r10, r28
    4b4a:	bd 0a       	sbc	r11, r29
    4b4c:	4c 01       	movw	r8, r24
    4b4e:	8c 0e       	add	r8, r28
    4b50:	9d 1e       	adc	r9, r29
    4b52:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <__flp>
    4b56:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <__flp+0x1>
    4b5a:	51 2c       	mov	r5, r1
    4b5c:	41 2c       	mov	r4, r1
    4b5e:	f1 2c       	mov	r15, r1
    4b60:	e1 2c       	mov	r14, r1
    4b62:	10 97       	sbiw	r26, 0x00	; 0
    4b64:	31 f5       	brne	.+76     	; 0x4bb2 <realloc+0xda>
    4b66:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <__brkval>
    4b6a:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <__brkval+0x1>
    4b6e:	88 15       	cp	r24, r8
    4b70:	99 05       	cpc	r25, r9
    4b72:	09 f0       	breq	.+2      	; 0x4b76 <realloc+0x9e>
    4b74:	5c c0       	rjmp	.+184    	; 0x4c2e <realloc+0x156>
    4b76:	46 16       	cp	r4, r22
    4b78:	57 06       	cpc	r5, r23
    4b7a:	08 f0       	brcs	.+2      	; 0x4b7e <realloc+0xa6>
    4b7c:	58 c0       	rjmp	.+176    	; 0x4c2e <realloc+0x156>
    4b7e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__malloc_heap_end>
    4b82:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__malloc_heap_end+0x1>
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	41 f4       	brne	.+16     	; 0x4b9a <realloc+0xc2>
    4b8a:	8d b7       	in	r24, 0x3d	; 61
    4b8c:	9e b7       	in	r25, 0x3e	; 62
    4b8e:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <__malloc_margin>
    4b92:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <__malloc_margin+0x1>
    4b96:	84 1b       	sub	r24, r20
    4b98:	95 0b       	sbc	r25, r21
    4b9a:	e8 17       	cp	r30, r24
    4b9c:	f9 07       	cpc	r31, r25
    4b9e:	08 f0       	brcs	.+2      	; 0x4ba2 <realloc+0xca>
    4ba0:	55 c0       	rjmp	.+170    	; 0x4c4c <realloc+0x174>
    4ba2:	f0 93 90 05 	sts	0x0590, r31	; 0x800590 <__brkval+0x1>
    4ba6:	e0 93 8f 05 	sts	0x058F, r30	; 0x80058f <__brkval>
    4baa:	f9 01       	movw	r30, r18
    4bac:	71 83       	std	Z+1, r23	; 0x01
    4bae:	60 83       	st	Z, r22
    4bb0:	a0 cf       	rjmp	.-192    	; 0x4af2 <realloc+0x1a>
    4bb2:	8d 91       	ld	r24, X+
    4bb4:	9c 91       	ld	r25, X
    4bb6:	11 97       	sbiw	r26, 0x01	; 1
    4bb8:	12 96       	adiw	r26, 0x02	; 2
    4bba:	6c 90       	ld	r6, X
    4bbc:	12 97       	sbiw	r26, 0x02	; 2
    4bbe:	13 96       	adiw	r26, 0x03	; 3
    4bc0:	7c 90       	ld	r7, X
    4bc2:	13 97       	sbiw	r26, 0x03	; 3
    4bc4:	a8 15       	cp	r26, r8
    4bc6:	b9 05       	cpc	r27, r9
    4bc8:	59 f5       	brne	.+86     	; 0x4c20 <realloc+0x148>
    4bca:	6c 01       	movw	r12, r24
    4bcc:	42 e0       	ldi	r20, 0x02	; 2
    4bce:	c4 0e       	add	r12, r20
    4bd0:	d1 1c       	adc	r13, r1
    4bd2:	ca 14       	cp	r12, r10
    4bd4:	db 04       	cpc	r13, r11
    4bd6:	20 f1       	brcs	.+72     	; 0x4c20 <realloc+0x148>
    4bd8:	ac 01       	movw	r20, r24
    4bda:	4a 19       	sub	r20, r10
    4bdc:	5b 09       	sbc	r21, r11
    4bde:	da 01       	movw	r26, r20
    4be0:	12 96       	adiw	r26, 0x02	; 2
    4be2:	15 97       	sbiw	r26, 0x05	; 5
    4be4:	80 f0       	brcs	.+32     	; 0x4c06 <realloc+0x12e>
    4be6:	62 82       	std	Z+2, r6	; 0x02
    4be8:	73 82       	std	Z+3, r7	; 0x03
    4bea:	51 83       	std	Z+1, r21	; 0x01
    4bec:	40 83       	st	Z, r20
    4bee:	d9 01       	movw	r26, r18
    4bf0:	6d 93       	st	X+, r22
    4bf2:	7c 93       	st	X, r23
    4bf4:	e1 14       	cp	r14, r1
    4bf6:	f1 04       	cpc	r15, r1
    4bf8:	71 f0       	breq	.+28     	; 0x4c16 <realloc+0x13e>
    4bfa:	d7 01       	movw	r26, r14
    4bfc:	13 96       	adiw	r26, 0x03	; 3
    4bfe:	fc 93       	st	X, r31
    4c00:	ee 93       	st	-X, r30
    4c02:	12 97       	sbiw	r26, 0x02	; 2
    4c04:	76 cf       	rjmp	.-276    	; 0x4af2 <realloc+0x1a>
    4c06:	22 96       	adiw	r28, 0x02	; 2
    4c08:	8c 0f       	add	r24, r28
    4c0a:	9d 1f       	adc	r25, r29
    4c0c:	f9 01       	movw	r30, r18
    4c0e:	91 83       	std	Z+1, r25	; 0x01
    4c10:	80 83       	st	Z, r24
    4c12:	f3 01       	movw	r30, r6
    4c14:	ef cf       	rjmp	.-34     	; 0x4bf4 <realloc+0x11c>
    4c16:	f0 93 92 05 	sts	0x0592, r31	; 0x800592 <__flp+0x1>
    4c1a:	e0 93 91 05 	sts	0x0591, r30	; 0x800591 <__flp>
    4c1e:	69 cf       	rjmp	.-302    	; 0x4af2 <realloc+0x1a>
    4c20:	48 16       	cp	r4, r24
    4c22:	59 06       	cpc	r5, r25
    4c24:	08 f4       	brcc	.+2      	; 0x4c28 <realloc+0x150>
    4c26:	2c 01       	movw	r4, r24
    4c28:	7d 01       	movw	r14, r26
    4c2a:	d3 01       	movw	r26, r6
    4c2c:	9a cf       	rjmp	.-204    	; 0x4b62 <realloc+0x8a>
    4c2e:	cb 01       	movw	r24, r22
    4c30:	0e 94 47 24 	call	0x488e	; 0x488e <malloc>
    4c34:	7c 01       	movw	r14, r24
    4c36:	00 97       	sbiw	r24, 0x00	; 0
    4c38:	49 f0       	breq	.+18     	; 0x4c4c <realloc+0x174>
    4c3a:	ae 01       	movw	r20, r28
    4c3c:	b8 01       	movw	r22, r16
    4c3e:	0e 94 29 26 	call	0x4c52	; 0x4c52 <memcpy>
    4c42:	c8 01       	movw	r24, r16
    4c44:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
    4c48:	87 01       	movw	r16, r14
    4c4a:	53 cf       	rjmp	.-346    	; 0x4af2 <realloc+0x1a>
    4c4c:	10 e0       	ldi	r17, 0x00	; 0
    4c4e:	00 e0       	ldi	r16, 0x00	; 0
    4c50:	50 cf       	rjmp	.-352    	; 0x4af2 <realloc+0x1a>

00004c52 <memcpy>:
memcpy():
    4c52:	fb 01       	movw	r30, r22
    4c54:	dc 01       	movw	r26, r24
    4c56:	02 c0       	rjmp	.+4      	; 0x4c5c <memcpy+0xa>
    4c58:	01 90       	ld	r0, Z+
    4c5a:	0d 92       	st	X+, r0
    4c5c:	41 50       	subi	r20, 0x01	; 1
    4c5e:	50 40       	sbci	r21, 0x00	; 0
    4c60:	d8 f7       	brcc	.-10     	; 0x4c58 <memcpy+0x6>
    4c62:	08 95       	ret

00004c64 <strcat>:
strcat():
    4c64:	fb 01       	movw	r30, r22
    4c66:	dc 01       	movw	r26, r24
    4c68:	0d 90       	ld	r0, X+
    4c6a:	00 20       	and	r0, r0
    4c6c:	e9 f7       	brne	.-6      	; 0x4c68 <strcat+0x4>
    4c6e:	11 97       	sbiw	r26, 0x01	; 1
    4c70:	01 90       	ld	r0, Z+
    4c72:	0d 92       	st	X+, r0
    4c74:	00 20       	and	r0, r0
    4c76:	e1 f7       	brne	.-8      	; 0x4c70 <strcat+0xc>
    4c78:	08 95       	ret

00004c7a <strcmp>:
strcmp():
    4c7a:	fb 01       	movw	r30, r22
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	8d 91       	ld	r24, X+
    4c80:	01 90       	ld	r0, Z+
    4c82:	80 19       	sub	r24, r0
    4c84:	01 10       	cpse	r0, r1
    4c86:	d9 f3       	breq	.-10     	; 0x4c7e <strcmp+0x4>
    4c88:	99 0b       	sbc	r25, r25
    4c8a:	08 95       	ret

00004c8c <strcpy>:
strcpy():
    4c8c:	fb 01       	movw	r30, r22
    4c8e:	dc 01       	movw	r26, r24
    4c90:	01 90       	ld	r0, Z+
    4c92:	0d 92       	st	X+, r0
    4c94:	00 20       	and	r0, r0
    4c96:	e1 f7       	brne	.-8      	; 0x4c90 <strcpy+0x4>
    4c98:	08 95       	ret

00004c9a <strncpy>:
strncpy():
    4c9a:	fb 01       	movw	r30, r22
    4c9c:	dc 01       	movw	r26, r24
    4c9e:	41 50       	subi	r20, 0x01	; 1
    4ca0:	50 40       	sbci	r21, 0x00	; 0
    4ca2:	48 f0       	brcs	.+18     	; 0x4cb6 <strncpy+0x1c>
    4ca4:	01 90       	ld	r0, Z+
    4ca6:	0d 92       	st	X+, r0
    4ca8:	00 20       	and	r0, r0
    4caa:	c9 f7       	brne	.-14     	; 0x4c9e <strncpy+0x4>
    4cac:	01 c0       	rjmp	.+2      	; 0x4cb0 <strncpy+0x16>
    4cae:	1d 92       	st	X+, r1
    4cb0:	41 50       	subi	r20, 0x01	; 1
    4cb2:	50 40       	sbci	r21, 0x00	; 0
    4cb4:	e0 f7       	brcc	.-8      	; 0x4cae <strncpy+0x14>
    4cb6:	08 95       	ret

00004cb8 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4cb8:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4cba:	ca e8       	ldi	r28, 0x8A	; 138
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4cbc:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4cbe:	04 c0       	rjmp	.+8      	; 0x4cc8 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    4cc0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    4cc2:	0e 94 3a 24 	call	0x4874	; 0x4874 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4cc6:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4cc8:	cb 38       	cpi	r28, 0x8B	; 139
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4cca:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4ccc:	c9 f7       	brne	.-14     	; 0x4cc0 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4cce:	f8 94       	cli

00004cd0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4cd0:	ff cf       	rjmp	.-2      	; 0x4cd0 <__stop_program>
