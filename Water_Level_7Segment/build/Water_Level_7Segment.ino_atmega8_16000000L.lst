
e:\Arduino\Arduino Git\Water_Level_7Segment\build/Water_Level_7Segment.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	69 c0       	rjmp	.+210    	; 0xd6 <__bad_interrupt>
       4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
       6:	67 c0       	rjmp	.+206    	; 0xd6 <__bad_interrupt>
       8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
       a:	65 c0       	rjmp	.+202    	; 0xd6 <__bad_interrupt>
       c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
       e:	63 c0       	rjmp	.+198    	; 0xd6 <__bad_interrupt>
      10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
      12:	1d c4       	rjmp	.+2106   	; 0x84e <__vector_9>
      14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
      16:	e9 c3       	rjmp	.+2002   	; 0x7ea <__vector_11>
      18:	c3 c3       	rjmp	.+1926   	; 0x7a0 <__vector_12>
      1a:	5d c0       	rjmp	.+186    	; 0xd6 <__bad_interrupt>
      1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
      1e:	5b c0       	rjmp	.+182    	; 0xd6 <__bad_interrupt>
      20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
      22:	59 c0       	rjmp	.+178    	; 0xd6 <__bad_interrupt>
      24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
      26:	00 00       	nop
      28:	00 00       	nop
      2a:	37 00       	.word	0x0037	; ????
      2c:	34 00       	.word	0x0034	; ????
      2e:	31 00       	.word	0x0031	; ????

00000030 <port_to_output_PGM>:
      30:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

0000003a <port_to_input_PGM>:
      3a:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000044 <digital_pin_to_port_PGM>:
      44:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      54:	03 03 03 03 02 02 03                                .......

0000005b <digital_pin_to_bit_mask_PGM>:
      5b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      6b:	04 08 10 20 40 80 40                                ... @.@

00000072 <digital_pin_to_timer_PGM>:
	...
      7a:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000008a <__ctors_start>:
__ctors_start():
      8a:	a6 04       	cpc	r10, r6

0000008c <__ctors_end>:
__dtors_end():
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      98:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      9a:	ae eb       	ldi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      9c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      a2:	ae 3c       	cpi	r26, 0xCE	; 206
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      a4:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      a8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      aa:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      ac:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      ae:	e4 e5       	ldi	r30, 0x54	; 84
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      b0:	f3 e1       	ldi	r31, 0x13	; 19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      b4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      b6:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      b8:	ae 3b       	cpi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ba:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      be:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      c0:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      c2:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      c4:	03 c0       	rjmp	.+6      	; 0xcc <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      c6:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      c8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ca:	3c d9       	rcall	.-3464   	; 0xfffff344 <__eeprom_end+0xff7ef344>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      cc:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      ce:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      d0:	d1 f7       	brne	.-12     	; 0xc6 <__do_global_ctors+0x8>
      d2:	88 d4       	rcall	.+2320   	; 0x9e4 <main>
      d4:	3d c9       	rjmp	.-3462   	; 0xfffff350 <__eeprom_end+0xff7ef350>

000000d6 <__bad_interrupt>:
__vector_1():
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
      d8:	fc 01       	movw	r30, r24
      da:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
      dc:	44 8d       	ldd	r20, Z+28	; 0x1c
      de:	25 2f       	mov	r18, r21
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	84 2f       	mov	r24, r20
      e4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
      e6:	82 1b       	sub	r24, r18
      e8:	93 0b       	sbc	r25, r19
      ea:	54 17       	cp	r21, r20
      ec:	10 f0       	brcs	.+4      	; 0xf2 <HardwareSerial::availableForWrite()+0x1a>
      ee:	cf 96       	adiw	r24, 0x3f	; 63
      f0:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
      f2:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
      f4:	08 95       	ret

000000f6 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
      f6:	fc 01       	movw	r30, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
      f8:	91 8d       	ldd	r25, Z+25	; 0x19
      fa:	82 8d       	ldd	r24, Z+26	; 0x1a
      fc:	98 17       	cp	r25, r24
      fe:	61 f0       	breq	.+24     	; 0x118 <HardwareSerial::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     100:	a2 8d       	ldd	r26, Z+26	; 0x1a
     102:	ae 0f       	add	r26, r30
     104:	bf 2f       	mov	r27, r31
     106:	b1 1d       	adc	r27, r1
     108:	5d 96       	adiw	r26, 0x1d	; 29
     10a:	8c 91       	ld	r24, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     10c:	92 8d       	ldd	r25, Z+26	; 0x1a
     10e:	9f 5f       	subi	r25, 0xFF	; 255
     110:	9f 73       	andi	r25, 0x3F	; 63
     112:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     11c:	08 95       	ret

0000011e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     11e:	fc 01       	movw	r30, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
     120:	91 8d       	ldd	r25, Z+25	; 0x19
     122:	82 8d       	ldd	r24, Z+26	; 0x1a
     124:	98 17       	cp	r25, r24
     126:	31 f0       	breq	.+12     	; 0x134 <HardwareSerial::peek()+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     128:	82 8d       	ldd	r24, Z+26	; 0x1a
     12a:	e8 0f       	add	r30, r24
     12c:	f1 1d       	adc	r31, r1
     12e:	85 8d       	ldd	r24, Z+29	; 0x1d
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     134:	8f ef       	ldi	r24, 0xFF	; 255
     136:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     138:	08 95       	ret

0000013a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     13a:	fc 01       	movw	r30, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     13c:	91 8d       	ldd	r25, Z+25	; 0x19
     13e:	22 8d       	ldd	r18, Z+26	; 0x1a
     140:	89 2f       	mov	r24, r25
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	80 5c       	subi	r24, 0xC0	; 192
     146:	9f 4f       	sbci	r25, 0xFF	; 255
     148:	82 1b       	sub	r24, r18
     14a:	91 09       	sbc	r25, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
     14c:	8f 73       	andi	r24, 0x3F	; 63
     14e:	99 27       	eor	r25, r25
     150:	08 95       	ret

00000152 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     152:	fc 01       	movw	r30, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     154:	a4 8d       	ldd	r26, Z+28	; 0x1c
     156:	a8 0f       	add	r26, r24
     158:	b9 2f       	mov	r27, r25
     15a:	b1 1d       	adc	r27, r1
     15c:	a3 5a       	subi	r26, 0xA3	; 163
     15e:	bf 4f       	sbci	r27, 0xFF	; 255
     160:	2c 91       	ld	r18, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     162:	84 8d       	ldd	r24, Z+28	; 0x1c
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	8f 73       	andi	r24, 0x3F	; 63
     16a:	99 27       	eor	r25, r25
     16c:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
     16e:	a6 89       	ldd	r26, Z+22	; 0x16
     170:	b7 89       	ldd	r27, Z+23	; 0x17
     172:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
     174:	a0 89       	ldd	r26, Z+16	; 0x10
     176:	b1 89       	ldd	r27, Z+17	; 0x11
     178:	8c 91       	ld	r24, X
     17a:	80 64       	ori	r24, 0x40	; 64
     17c:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
     17e:	93 8d       	ldd	r25, Z+27	; 0x1b
     180:	84 8d       	ldd	r24, Z+28	; 0x1c
     182:	98 13       	cpse	r25, r24
     184:	06 c0       	rjmp	.+12     	; 0x192 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     186:	02 88       	ldd	r0, Z+18	; 0x12
     188:	f3 89       	ldd	r31, Z+19	; 0x13
     18a:	e0 2d       	mov	r30, r0
     18c:	80 81       	ld	r24, Z
     18e:	8f 7d       	andi	r24, 0xDF	; 223
     190:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
     192:	08 95       	ret

00000194 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     1a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     1a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1aa:	98 13       	cpse	r25, r24
     1ac:	16 c0       	rjmp	.+44     	; 0x1da <HardwareSerial::write(unsigned char)+0x46>
     1ae:	e8 89       	ldd	r30, Y+16	; 0x10
     1b0:	f9 89       	ldd	r31, Y+17	; 0x11
     1b2:	80 81       	ld	r24, Z
     1b4:	85 ff       	sbrs	r24, 5
     1b6:	11 c0       	rjmp	.+34     	; 0x1da <HardwareSerial::write(unsigned char)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
     1b8:	ee 89       	ldd	r30, Y+22	; 0x16
     1ba:	ff 89       	ldd	r31, Y+23	; 0x17
     1bc:	60 83       	st	Z, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
     1be:	e8 89       	ldd	r30, Y+16	; 0x10
     1c0:	f9 89       	ldd	r31, Y+17	; 0x11
     1c2:	80 81       	ld	r24, Z
     1c4:	80 64       	ori	r24, 0x40	; 64
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
     1c6:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	08 95       	ret
     1da:	f6 2e       	mov	r15, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     1dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
     1de:	10 e0       	ldi	r17, 0x00	; 0
     1e0:	0f 5f       	subi	r16, 0xFF	; 255
     1e2:	1f 4f       	sbci	r17, 0xFF	; 255
     1e4:	0f 73       	andi	r16, 0x3F	; 63
     1e6:	11 27       	eor	r17, r17
     1e8:	e0 2e       	mov	r14, r16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     1ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1ec:	8e 11       	cpse	r24, r14
     1ee:	0b c0       	rjmp	.+22     	; 0x206 <HardwareSerial::write(unsigned char)+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	07 fc       	sbrc	r0, 7
     1f4:	fa cf       	rjmp	.-12     	; 0x1ea <HardwareSerial::write(unsigned char)+0x56>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     1f6:	e8 89       	ldd	r30, Y+16	; 0x10
     1f8:	f9 89       	ldd	r31, Y+17	; 0x11
     1fa:	80 81       	ld	r24, Z
     1fc:	85 ff       	sbrs	r24, 5
     1fe:	f5 cf       	rjmp	.-22     	; 0x1ea <HardwareSerial::write(unsigned char)+0x56>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
     200:	ce 01       	movw	r24, r28
     202:	a7 df       	rcall	.-178    	; 0x152 <HardwareSerial::_tx_udr_empty_irq()>
     204:	f2 cf       	rjmp	.-28     	; 0x1ea <HardwareSerial::write(unsigned char)+0x56>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     206:	eb 8d       	ldd	r30, Y+27	; 0x1b
     208:	ec 0f       	add	r30, r28
     20a:	fd 2f       	mov	r31, r29
     20c:	f1 1d       	adc	r31, r1
     20e:	e3 5a       	subi	r30, 0xA3	; 163
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	f0 82       	st	Z, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
     214:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
     216:	ea 89       	ldd	r30, Y+18	; 0x12
     218:	fb 89       	ldd	r31, Y+19	; 0x13
     21a:	80 81       	ld	r24, Z
     21c:	80 62       	ori	r24, 0x20	; 32
     21e:	d3 cf       	rjmp	.-90     	; 0x1c6 <HardwareSerial::write(unsigned char)+0x32>

00000220 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     226:	88 8d       	ldd	r24, Y+24	; 0x18
     228:	88 23       	and	r24, r24
     22a:	b1 f0       	breq	.+44     	; 0x258 <HardwareSerial::flush()+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     22c:	aa 89       	ldd	r26, Y+18	; 0x12
     22e:	bb 89       	ldd	r27, Y+19	; 0x13
     230:	e8 89       	ldd	r30, Y+16	; 0x10
     232:	f9 89       	ldd	r31, Y+17	; 0x11
     234:	8c 91       	ld	r24, X
     236:	85 fd       	sbrc	r24, 5
     238:	03 c0       	rjmp	.+6      	; 0x240 <HardwareSerial::flush()+0x20>
     23a:	80 81       	ld	r24, Z
     23c:	86 fd       	sbrc	r24, 6
     23e:	0c c0       	rjmp	.+24     	; 0x258 <HardwareSerial::flush()+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	07 fc       	sbrc	r0, 7
     244:	f7 cf       	rjmp	.-18     	; 0x234 <HardwareSerial::flush()+0x14>
     246:	8c 91       	ld	r24, X
     248:	85 ff       	sbrs	r24, 5
     24a:	f2 cf       	rjmp	.-28     	; 0x230 <HardwareSerial::flush()+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     24c:	80 81       	ld	r24, Z
     24e:	85 ff       	sbrs	r24, 5
     250:	ed cf       	rjmp	.-38     	; 0x22c <HardwareSerial::flush()+0xc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
     252:	ce 01       	movw	r24, r28
     254:	7e df       	rcall	.-260    	; 0x152 <HardwareSerial::_tx_udr_empty_irq()>
     256:	ea cf       	rjmp	.-44     	; 0x22c <HardwareSerial::flush()+0xc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     25e:	8e e0       	ldi	r24, 0x0E	; 14
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	6b df       	rcall	.-298    	; 0x13a <HardwareSerial::available()>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	89 2b       	or	r24, r25
     268:	09 f4       	brne	.+2      	; 0x26c <Serial0_available()+0xe>
     26a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     26c:	82 2f       	mov	r24, r18
     26e:	08 95       	ret

00000270 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	89 2b       	or	r24, r25
     276:	19 f0       	breq	.+6      	; 0x27e <serialEventRun()+0xe>
     278:	f2 df       	rcall	.-28     	; 0x25e <Serial0_available()>
     27a:	81 11       	cpse	r24, r1
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     27e:	08 95       	ret

00000280 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	6c 01       	movw	r12, r24
     296:	7b 01       	movw	r14, r22
     298:	8b 01       	movw	r16, r22
     29a:	04 0f       	add	r16, r20
     29c:	15 1f       	adc	r17, r21
     29e:	eb 01       	movw	r28, r22
     2a0:	5e 01       	movw	r10, r28
     2a2:	ae 18       	sub	r10, r14
     2a4:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     2a6:	c0 17       	cp	r28, r16
     2a8:	d1 07       	cpc	r29, r17
     2aa:	59 f0       	breq	.+22     	; 0x2c2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     2ac:	69 91       	ld	r22, Y+
     2ae:	d6 01       	movw	r26, r12
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	01 90       	ld	r0, Z+
     2b6:	f0 81       	ld	r31, Z
     2b8:	e0 2d       	mov	r30, r0
     2ba:	c6 01       	movw	r24, r12
     2bc:	09 95       	icall
     2be:	89 2b       	or	r24, r25
     2c0:	79 f7       	brne	.-34     	; 0x2a0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     2c2:	c5 01       	movw	r24, r10
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	bf 90       	pop	r11
     2d6:	af 90       	pop	r10
     2d8:	08 95       	ret

000002da <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     2da:	85 30       	cpi	r24, 0x05	; 5
     2dc:	41 f0       	breq	.+16     	; 0x2ee <turnOffPWM+0x14>
     2de:	87 30       	cpi	r24, 0x07	; 7
     2e0:	49 f0       	breq	.+18     	; 0x2f4 <turnOffPWM+0x1a>
     2e2:	84 30       	cpi	r24, 0x04	; 4
     2e4:	51 f4       	brne	.+20     	; 0x2fa <turnOffPWM+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     2e6:	8f b5       	in	r24, 0x2f	; 47
     2e8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     2ea:	8f bd       	out	0x2f, r24	; 47
     2ec:	08 95       	ret
     2ee:	8f b5       	in	r24, 0x2f	; 47
     2f0:	8f 7d       	andi	r24, 0xDF	; 223
     2f2:	fb cf       	rjmp	.-10     	; 0x2ea <turnOffPWM+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     2f4:	85 b5       	in	r24, 0x25	; 37
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     2fa:	08 95       	ret

000002fc <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     300:	28 2f       	mov	r18, r24
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	f9 01       	movw	r30, r18
     306:	ee 58       	subi	r30, 0x8E	; 142
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     30c:	f9 01       	movw	r30, r18
     30e:	e5 5a       	subi	r30, 0xA5	; 165
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     314:	f9 01       	movw	r30, r18
     316:	ec 5b       	subi	r30, 0xBC	; 188
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     31c:	cc 23       	and	r28, r28
     31e:	99 f0       	breq	.+38     	; 0x346 <digitalRead+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     320:	81 11       	cpse	r24, r1
     322:	db df       	rcall	.-74     	; 0x2da <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     324:	ec 2f       	mov	r30, r28
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	e6 5c       	subi	r30, 0xC6	; 198
     32e:	ff 4f       	sbci	r31, 0xFF	; 255
     330:	a5 91       	lpm	r26, Z+
     332:	b4 91       	lpm	r27, Z
     334:	ec 91       	ld	r30, X
     336:	ed 23       	and	r30, r29
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	09 f4       	brne	.+2      	; 0x340 <digitalRead+0x44>
     33e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	fa cf       	rjmp	.-12     	; 0x340 <digitalRead+0x44>

0000034c <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	ee 58       	subi	r30, 0x8E	; 142
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     35e:	f9 01       	movw	r30, r18
     360:	e5 5a       	subi	r30, 0xA5	; 165
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     366:	f9 01       	movw	r30, r18
     368:	ec 5b       	subi	r30, 0xBC	; 188
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     36e:	cc 23       	and	r28, r28
     370:	a1 f0       	breq	.+40     	; 0x39a <digitalWrite+0x4e>
     372:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     374:	81 11       	cpse	r24, r1
     376:	b1 df       	rcall	.-158    	; 0x2da <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     378:	ec 2f       	mov	r30, r28
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	e0 5d       	subi	r30, 0xD0	; 208
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	a5 91       	lpm	r26, Z+
     386:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     388:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     38a:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     38c:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     38e:	11 11       	cpse	r17, r1
     390:	08 c0       	rjmp	.+16     	; 0x3a2 <digitalWrite+0x56>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     392:	d0 95       	com	r29
     394:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     396:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     398:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     3a2:	de 2b       	or	r29, r30
     3a4:	f8 cf       	rjmp	.-16     	; 0x396 <digitalWrite+0x4a>

000003a6 <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	fc 01       	movw	r30, r24
     3ae:	e5 5a       	subi	r30, 0xA5	; 165
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     3b4:	8c 5b       	subi	r24, 0xBC	; 188
     3b6:	9f 4f       	sbci	r25, 0xFF	; 255
     3b8:	fc 01       	movw	r30, r24
     3ba:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     3bc:	88 23       	and	r24, r24
     3be:	c9 f0       	breq	.+50     	; 0x3f2 <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	fc 01       	movw	r30, r24
     3c8:	ea 5d       	subi	r30, 0xDA	; 218
     3ca:	ff 4f       	sbci	r31, 0xFF	; 255
     3cc:	a5 91       	lpm	r26, Z+
     3ce:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     3d0:	fc 01       	movw	r30, r24
     3d2:	e0 5d       	subi	r30, 0xD0	; 208
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	c5 91       	lpm	r28, Z+
     3d8:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     3da:	61 11       	cpse	r22, r1
     3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     3de:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     3e0:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     3e2:	8c 91       	ld	r24, X
     3e4:	20 95       	com	r18
     3e6:	82 23       	and	r24, r18
     3e8:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     3ea:	88 81       	ld	r24, Y
     3ec:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     3ee:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     3f0:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     3f8:	62 30       	cpi	r22, 0x02	; 2
     3fa:	51 f4       	brne	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     3fc:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     3fe:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     400:	3c 91       	ld	r19, X
     402:	82 2f       	mov	r24, r18
     404:	80 95       	com	r24
     406:	83 23       	and	r24, r19
     408:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     40a:	e8 81       	ld	r30, Y
     40c:	2e 2b       	or	r18, r30
     40e:	ef cf       	rjmp	.-34     	; 0x3ee <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     410:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     412:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     414:	ec 91       	ld	r30, X
     416:	2e 2b       	or	r18, r30
     418:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     41a:	8f bf       	out	0x3f, r24	; 63
     41c:	ea cf       	rjmp	.-44     	; 0x3f2 <pinMode+0x4c>

0000041e <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	91 05       	cpc	r25, r1
     422:	38 f0       	brcs	.+14     	; 0x432 <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     42c:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     432:	08 95       	ret

00000434 <TM1637Display::bitDelay() [clone .constprop.16]>:
_ZN13TM1637Display8bitDelayEv.constprop.16():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:181
    setSegments(digits, length, pos);
}

void TM1637Display::bitDelay()
{
	delayMicroseconds(m_bitDelay);
     434:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <display+0x3>
     438:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <display+0x4>
     43c:	f0 cf       	rjmp	.-32     	; 0x41e <delayMicroseconds>

0000043e <TM1637Display::stop() [clone .constprop.15]>:
_ZN13TM1637Display4stopEv.constprop.15():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:190
{
  pinMode(m_pinDIO, OUTPUT);
  bitDelay();
}

void TM1637Display::stop()
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:192
{
	pinMode(m_pinDIO, OUTPUT);
     442:	c9 ec       	ldi	r28, 0xC9	; 201
     444:	d1 e0       	ldi	r29, 0x01	; 1
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	ad df       	rcall	.-166    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:193
	bitDelay();
     44c:	f3 df       	rcall	.-26     	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:194
	pinMode(m_pinClk, INPUT);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	88 81       	ld	r24, Y
     452:	a9 df       	rcall	.-174    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:195
	bitDelay();
     454:	ef df       	rcall	.-34     	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:196
	pinMode(m_pinDIO, INPUT);
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	a5 df       	rcall	.-182    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:198
	bitDelay();
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:197
	pinMode(m_pinDIO, OUTPUT);
	bitDelay();
	pinMode(m_pinClk, INPUT);
	bitDelay();
	pinMode(m_pinDIO, INPUT);
	bitDelay();
     460:	e9 cf       	rjmp	.-46     	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>

00000462 <TM1637Display::writeByte(unsigned char) [clone .constprop.14]>:
_ZN13TM1637Display9writeByteEh.constprop.14():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:200
}

bool TM1637Display::writeByte(uint8_t b)
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	d8 2f       	mov	r29, r24
     46c:	c8 e0       	ldi	r28, 0x08	; 8
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:207
  uint8_t data = b;

  // 8 Data Bits
  for(uint8_t i = 0; i < 8; i++) {
    // CLK low
    pinMode(m_pinClk, OUTPUT);
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <display>
     474:	98 df       	rcall	.-208    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:208
    bitDelay();
     476:	de df       	rcall	.-68     	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:211

	// Set data bit
    if (data & 0x01)
     478:	0d 2f       	mov	r16, r29
     47a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:212
      pinMode(m_pinDIO, INPUT);
     47c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:211
    // CLK low
    pinMode(m_pinClk, OUTPUT);
    bitDelay();

	// Set data bit
    if (data & 0x01)
     47e:	d0 ff       	sbrs	r29, 0
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:214
      pinMode(m_pinDIO, INPUT);
    else
      pinMode(m_pinDIO, OUTPUT);
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <display+0x1>
     486:	8f df       	rcall	.-226    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:216

    bitDelay();
     488:	d5 df       	rcall	.-86     	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:219

	// CLK high
    pinMode(m_pinClk, INPUT);
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <display>
     490:	8a df       	rcall	.-236    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:220
    bitDelay();
     492:	d0 df       	rcall	.-96     	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:221
    data = data >> 1;
     494:	15 95       	asr	r17
     496:	07 95       	ror	r16
     498:	d0 2f       	mov	r29, r16
     49a:	c1 50       	subi	r28, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:205
bool TM1637Display::writeByte(uint8_t b)
{
  uint8_t data = b;

  // 8 Data Bits
  for(uint8_t i = 0; i < 8; i++) {
     49c:	41 f7       	brne	.-48     	; 0x46e <TM1637Display::writeByte(unsigned char) [clone .constprop.14]+0xc>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:226
    data = data >> 1;
  }

  // Wait for acknowledge
  // CLK to zero
  pinMode(m_pinClk, OUTPUT);
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <display>
     4a4:	80 df       	rcall	.-256    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:227
  pinMode(m_pinDIO, INPUT);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <display+0x1>
     4ac:	7c df       	rcall	.-264    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:228
  bitDelay();
     4ae:	c2 df       	rcall	.-124    	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:231

  // CLK to high
  pinMode(m_pinClk, INPUT);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <display>
     4b6:	77 df       	rcall	.-274    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:232
  bitDelay();
     4b8:	bd df       	rcall	.-134    	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:233
  uint8_t ack = digitalRead(m_pinDIO);
     4ba:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <display+0x1>
     4be:	1e df       	rcall	.-452    	; 0x2fc <digitalRead>
     4c0:	c8 2f       	mov	r28, r24
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:234
  if (ack == 0)
     4c2:	81 11       	cpse	r24, r1
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <TM1637Display::writeByte(unsigned char) [clone .constprop.14]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:235
    pinMode(m_pinDIO, OUTPUT);
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <display+0x1>
     4cc:	6c df       	rcall	.-296    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:238


  bitDelay();
     4ce:	b2 df       	rcall	.-156    	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:239
  pinMode(m_pinClk, OUTPUT);
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <display>
     4d6:	67 df       	rcall	.-306    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:240
  bitDelay();
     4d8:	ad df       	rcall	.-166    	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:242

  return ack;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	c1 11       	cpse	r28, r1
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <TM1637Display::writeByte(unsigned char) [clone .constprop.14]+0x80>
     4e0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:243
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <TM1637Display::start() [clone .constprop.13]>:
_ZN13TM1637Display5startEv.constprop.13():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:186
	delayMicroseconds(m_bitDelay);
}

void TM1637Display::start()
{
  pinMode(m_pinDIO, OUTPUT);
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <display+0x1>
     4f2:	59 df       	rcall	.-334    	; 0x3a6 <pinMode>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:187
  bitDelay();
     4f4:	9f cf       	rjmp	.-194    	; 0x434 <TM1637Display::bitDelay() [clone .constprop.16]>

000004f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>:
_ZN13TM1637Display11setSegmentsEPKhhh.constprop.12():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:81
void TM1637Display::setBrightness(uint8_t brightness, bool on)
{
	m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00);
}

void TM1637Display::setSegments(const uint8_t segments[], uint8_t length, uint8_t pos)
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	8c 01       	movw	r16, r24
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:84
{
    // Write COMM1
	start();
     500:	f5 df       	rcall	.-22     	; 0x4ec <TM1637Display::start() [clone .constprop.13]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:85
	writeByte(TM1637_I2C_COMM1);
     502:	80 e4       	ldi	r24, 0x40	; 64
     504:	ae df       	rcall	.-164    	; 0x462 <TM1637Display::writeByte(unsigned char) [clone .constprop.14]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:86
	stop();
     506:	9b df       	rcall	.-202    	; 0x43e <TM1637Display::stop() [clone .constprop.15]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:89

	// Write COMM2 + first digit address
	start();
     508:	f1 df       	rcall	.-30     	; 0x4ec <TM1637Display::start() [clone .constprop.13]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:90
	writeByte(TM1637_I2C_COMM2 + (pos & 0x03));
     50a:	80 ec       	ldi	r24, 0xC0	; 192
     50c:	aa df       	rcall	.-172    	; 0x462 <TM1637Display::writeByte(unsigned char) [clone .constprop.14]>
     50e:	e8 01       	movw	r28, r16
     510:	0c 5f       	subi	r16, 0xFC	; 252
     512:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:94

	// Write the data bytes
	for (uint8_t k=0; k < length; k++)
	  writeByte(segments[k]);
     514:	89 91       	ld	r24, Y+
     516:	a5 df       	rcall	.-182    	; 0x462 <TM1637Display::writeByte(unsigned char) [clone .constprop.14]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:93
	// Write COMM2 + first digit address
	start();
	writeByte(TM1637_I2C_COMM2 + (pos & 0x03));

	// Write the data bytes
	for (uint8_t k=0; k < length; k++)
     518:	c0 17       	cp	r28, r16
     51a:	d1 07       	cpc	r29, r17
     51c:	d9 f7       	brne	.-10     	; 0x514 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:96
	  writeByte(segments[k]);

	stop();
     51e:	8f df       	rcall	.-226    	; 0x43e <TM1637Display::stop() [clone .constprop.15]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:99

	// Write COMM3 + brightness
	start();
     520:	e5 df       	rcall	.-54     	; 0x4ec <TM1637Display::start() [clone .constprop.13]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:100
	writeByte(TM1637_I2C_COMM3 + (m_brightness & 0x0f));
     522:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <display+0x2>
     526:	8f 70       	andi	r24, 0x0F	; 15
     528:	80 58       	subi	r24, 0x80	; 128
     52a:	9b df       	rcall	.-202    	; 0x462 <TM1637Display::writeByte(unsigned char) [clone .constprop.14]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:102
	stop();
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:101
	stop();

	// Write COMM3 + brightness
	start();
	writeByte(TM1637_I2C_COMM3 + (m_brightness & 0x0f));
	stop();
     534:	84 cf       	rjmp	.-248    	; 0x43e <TM1637Display::stop() [clone .constprop.15]>

00000536 <TM1637Display::clear() [clone .constprop.8]>:
_ZN13TM1637Display5clearEv.constprop.8():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:104
}

void TM1637Display::clear()
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	00 d0       	rcall	.+0      	; 0x53c <TM1637Display::clear() [clone .constprop.8]+0x6>
     53c:	00 d0       	rcall	.+0      	; 0x53e <TM1637Display::clear() [clone .constprop.8]+0x8>
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:106
{
    uint8_t data[] = { 0, 0, 0, 0 };
     542:	19 82       	std	Y+1, r1	; 0x01
     544:	1a 82       	std	Y+2, r1	; 0x02
     546:	1b 82       	std	Y+3, r1	; 0x03
     548:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:107
	setSegments(data);
     54a:	ce 01       	movw	r24, r28
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	d3 df       	rcall	.-90     	; 0x4f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:108
}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     55e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     560:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     562:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <timer0_overflow_count>
     566:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <timer0_overflow_count+0x1>
     56a:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <timer0_overflow_count+0x2>
     56e:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     572:	22 b7       	in	r18, 0x32	; 50
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     574:	08 b6       	in	r0, 0x38	; 56
     576:	00 fe       	sbrs	r0, 0
     578:	05 c0       	rjmp	.+10     	; 0x584 <micros+0x26>
     57a:	2f 3f       	cpi	r18, 0xFF	; 255
     57c:	19 f0       	breq	.+6      	; 0x584 <micros+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	a1 1d       	adc	r26, r1
     582:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     584:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     586:	ba 2f       	mov	r27, r26
     588:	a9 2f       	mov	r26, r25
     58a:	98 2f       	mov	r25, r24
     58c:	88 27       	eor	r24, r24
     58e:	bc 01       	movw	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	62 0f       	add	r22, r18
     594:	71 1d       	adc	r23, r1
     596:	81 1d       	adc	r24, r1
     598:	91 1d       	adc	r25, r1
     59a:	42 e0       	ldi	r20, 0x02	; 2
     59c:	66 0f       	add	r22, r22
     59e:	77 1f       	adc	r23, r23
     5a0:	88 1f       	adc	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	4a 95       	dec	r20
     5a6:	d1 f7       	brne	.-12     	; 0x59c <micros+0x3e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     5a8:	08 95       	ret

000005aa <delay.constprop.11>:
delay.constprop.11():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:395

void delay(unsigned long ms)
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
{
  unsigned long start = micros();
     5ba:	d1 df       	rcall	.-94     	; 0x55e <micros>
     5bc:	4b 01       	movw	r8, r22
     5be:	5c 01       	movw	r10, r24
     5c0:	88 ee       	ldi	r24, 0xE8	; 232
     5c2:	c8 2e       	mov	r12, r24
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	d8 2e       	mov	r13, r24
     5c8:	e1 2c       	mov	r14, r1
     5ca:	f1 2c       	mov	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     5cc:	c8 df       	rcall	.-112    	; 0x55e <micros>
     5ce:	68 19       	sub	r22, r8
     5d0:	79 09       	sbc	r23, r9
     5d2:	8a 09       	sbc	r24, r10
     5d4:	9b 09       	sbc	r25, r11
     5d6:	68 3e       	cpi	r22, 0xE8	; 232
     5d8:	73 40       	sbci	r23, 0x03	; 3
     5da:	81 05       	cpc	r24, r1
     5dc:	91 05       	cpc	r25, r1
     5de:	b0 f3       	brcs	.-20     	; 0x5cc <delay.constprop.11+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	c2 1a       	sub	r12, r18
     5e4:	d1 08       	sbc	r13, r1
     5e6:	e1 08       	sbc	r14, r1
     5e8:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     5ea:	88 ee       	ldi	r24, 0xE8	; 232
     5ec:	88 0e       	add	r8, r24
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	98 1e       	adc	r9, r24
     5f2:	a1 1c       	adc	r10, r1
     5f4:	b1 1c       	adc	r11, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     5f6:	c1 14       	cp	r12, r1
     5f8:	d1 04       	cpc	r13, r1
     5fa:	e1 04       	cpc	r14, r1
     5fc:	f1 04       	cpc	r15, r1
     5fe:	31 f7       	brne	.-52     	; 0x5cc <delay.constprop.11+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	bf 90       	pop	r11
     60a:	af 90       	pop	r10
     60c:	9f 90       	pop	r9
     60e:	8f 90       	pop	r8
     610:	08 95       	ret

00000612 <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     612:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     614:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     616:	60 91 bf 00 	lds	r22, 0x00BF	; 0x8000bf <timer0_millis>
     61a:	70 91 c0 00 	lds	r23, 0x00C0	; 0x8000c0 <timer0_millis+0x1>
     61e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <timer0_millis+0x2>
     622:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     626:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     628:	08 95       	ret

0000062a <MotorOn()>:
_Z7MotorOnv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:435
  }
}

void MotorOn()
{
  if (MotorState != ON)
     62a:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <MotorState>
     62e:	88 23       	and	r24, r24
     630:	89 f0       	breq	.+34     	; 0x654 <MotorOn()+0x2a>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:437
  {
    flowFailure = false;
     632:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <flowFailure>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:438
    tim_on = millis();
     636:	ed df       	rcall	.-38     	; 0x612 <millis>
     638:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <tim_on>
     63c:	70 93 f5 00 	sts	0x00F5, r23	; 0x8000f5 <tim_on+0x1>
     640:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <tim_on+0x2>
     644:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <tim_on+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:439
    digitalWrite(START, HIGH);
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	87 e0       	ldi	r24, 0x07	; 7
     64c:	7f de       	rcall	.-770    	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:440
    digitalWrite(BUZR, HIGH);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	80 e1       	ldi	r24, 0x10	; 16
     652:	7c ce       	rjmp	.-776    	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:442
  }
}
     654:	08 95       	ret

00000656 <MotorOff()>:
_Z8MotorOffv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:426
  }
}

void MotorOff()
{
  if (MotorState != OFF)
     656:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <MotorState>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	61 f0       	breq	.+24     	; 0x676 <MotorOff()+0x20>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:428
  {
    tim_off = millis();
     65e:	d9 df       	rcall	.-78     	; 0x612 <millis>
     660:	60 93 f0 00 	sts	0x00F0, r22	; 0x8000f0 <tim_off>
     664:	70 93 f1 00 	sts	0x00F1, r23	; 0x8000f1 <tim_off+0x1>
     668:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <tim_off+0x2>
     66c:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <tim_off+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:429
    digitalWrite(STOP, HIGH);
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	6b ce       	rjmp	.-810    	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:431
  }
}
     676:	08 95       	ret

00000678 <MySwitch::update()>:
_ZN8MySwitch6updateEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:82
    {
      Key_Up = false;
      Key_Down = false;
      Key_Hold = false;
    }
    void update()
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:84
    {
      if (digitalRead(pin) == LOW)
     682:	88 81       	ld	r24, Y
     684:	3b de       	rcall	.-906    	; 0x2fc <digitalRead>
     686:	2c 81       	ldd	r18, Y+4	; 0x04
     688:	89 2b       	or	r24, r25
     68a:	31 f5       	brne	.+76     	; 0x6d8 <MySwitch::update()+0x60>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:86
      {
        if (butAct == false)
     68c:	21 11       	cpse	r18, r1
     68e:	07 c0       	rjmp	.+14     	; 0x69e <MySwitch::update()+0x26>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:88
        {
          butAct = true;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	8c 83       	std	Y+4, r24	; 0x04
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:89
          butTimer = millis();
     694:	be df       	rcall	.-132    	; 0x612 <millis>
     696:	6e 83       	std	Y+6, r22	; 0x06
     698:	7f 83       	std	Y+7, r23	; 0x07
     69a:	88 87       	std	Y+8, r24	; 0x08
     69c:	99 87       	std	Y+9, r25	; 0x09
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:91
        }
        if ((millis() - butTimer > holdDelay) && (longAct == false))
     69e:	b9 df       	rcall	.-142    	; 0x612 <millis>
     6a0:	0e 81       	ldd	r16, Y+6	; 0x06
     6a2:	1f 81       	ldd	r17, Y+7	; 0x07
     6a4:	28 85       	ldd	r18, Y+8	; 0x08
     6a6:	39 85       	ldd	r19, Y+9	; 0x09
     6a8:	60 1b       	sub	r22, r16
     6aa:	71 0b       	sbc	r23, r17
     6ac:	82 0b       	sbc	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	0a 85       	ldd	r16, Y+10	; 0x0a
     6b2:	1b 85       	ldd	r17, Y+11	; 0x0b
     6b4:	2c 85       	ldd	r18, Y+12	; 0x0c
     6b6:	3d 85       	ldd	r19, Y+13	; 0x0d
     6b8:	06 17       	cp	r16, r22
     6ba:	17 07       	cpc	r17, r23
     6bc:	28 07       	cpc	r18, r24
     6be:	39 07       	cpc	r19, r25
     6c0:	30 f4       	brcc	.+12     	; 0x6ce <MySwitch::update()+0x56>
     6c2:	8d 81       	ldd	r24, Y+5	; 0x05
     6c4:	81 11       	cpse	r24, r1
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <MySwitch::update()+0x56>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:93
        {
          longAct = true;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	8d 83       	std	Y+5, r24	; 0x05
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:95
          // long press
          Key_Hold = true;
     6cc:	8a 83       	std	Y+2, r24	; 0x02
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:114
            Key_Up = true;
          }
          butAct = false;
        }
      }
    }
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:100
          Key_Hold = true;
        }
      }
      else
      {
        if (butAct == true)
     6d8:	22 23       	and	r18, r18
     6da:	c9 f3       	breq	.-14     	; 0x6ce <MySwitch::update()+0x56>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:102
        {
          if (longAct == true)
     6dc:	8d 81       	ldd	r24, Y+5	; 0x05
     6de:	88 23       	and	r24, r24
     6e0:	19 f0       	breq	.+6      	; 0x6e8 <MySwitch::update()+0x70>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:104
          {
            longAct = false;
     6e2:	1d 82       	std	Y+5, r1	; 0x05
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:111
          else
          {
            // short press
            Key_Up = true;
          }
          butAct = false;
     6e4:	1c 82       	std	Y+4, r1	; 0x04
     6e6:	f3 cf       	rjmp	.-26     	; 0x6ce <MySwitch::update()+0x56>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:109
            longAct = false;
          }
          else
          {
            // short press
            Key_Up = true;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	fb cf       	rjmp	.-10     	; 0x6e4 <MySwitch::update()+0x6c>

000006ee <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]>:
_ZN13TM1637Display13showNumberDecEibhh.constprop.3():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:110

void TM1637Display::showNumberDec(int num, bool leading_zero, uint8_t length, uint8_t pos)
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x10>
     6fe:	00 d0       	rcall	.+0      	; 0x700 <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x12>
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
showNumberBaseEx():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:139
	}


    uint8_t digits[4];

	if (num == 0 && !leading_zero) {
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	a1 f4       	brne	.+40     	; 0x730 <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x42>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:142
		// Singular case - take care separately
		for(uint8_t i = 0; i < (length-1); i++)
			digits[i] = 0;
     708:	19 82       	std	Y+1, r1	; 0x01
     70a:	1a 82       	std	Y+2, r1	; 0x02
     70c:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:143
		digits[length-1] = encodeDigit(0);
     70e:	8f e3       	ldi	r24, 0x3F	; 63
     710:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:176
		if(dots != 0)
		{
			showDots(dots, digits);
		}
    }
    setSegments(digits, length, pos);
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	ef de       	rcall	.-546    	; 0x4f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>
_ZN13TM1637Display13showNumberDecEibhh.constprop.3():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:113
}

void TM1637Display::showNumberDec(int num, bool leading_zero, uint8_t length, uint8_t pos)
{
  showNumberDecEx(num, 0, leading_zero, length, pos);
}
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	08 95       	ret
showNumberDecEx():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:118

void TM1637Display::showNumberDecEx(int num, uint8_t dots, bool leading_zero,
                                    uint8_t length, uint8_t pos)
{
  showNumberBaseEx(num < 0? -10 : 10, num < 0? -num : num, dots, leading_zero, length, pos);
     730:	9c 01       	movw	r18, r24
     732:	97 ff       	sbrs	r25, 7
     734:	04 c0       	rjmp	.+8      	; 0x73e <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x50>
     736:	22 27       	eor	r18, r18
     738:	33 27       	eor	r19, r19
     73a:	28 1b       	sub	r18, r24
     73c:	39 0b       	sbc	r19, r25
     73e:	49 2f       	mov	r20, r25
     740:	44 1f       	adc	r20, r20
     742:	44 27       	eor	r20, r20
     744:	44 1f       	adc	r20, r20
     746:	fe 01       	movw	r30, r28
     748:	31 96       	adiw	r30, 0x01	; 1
     74a:	7e 01       	movw	r14, r28
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	e8 1a       	sub	r14, r24
     750:	f1 08       	sbc	r15, r1
showNumberBaseEx():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:155
		//	i--;
		//}
		
		for(int i = length-1; i >= 0; --i)
		{
		    uint8_t digit = num % base;
     752:	0a e0       	ldi	r16, 0x0A	; 10
     754:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:164
				digits[i] = 0;
			else
			    digits[i] = encodeDigit(digit);
				
			if (digit == 0 && num == 0 && negative) {
			    digits[i] = minusSegments;
     756:	80 e4       	ldi	r24, 0x40	; 64
     758:	d8 2e       	mov	r13, r24
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:155
		//	i--;
		//}
		
		for(int i = length-1; i >= 0; --i)
		{
		    uint8_t digit = num % base;
     75a:	c9 01       	movw	r24, r18
     75c:	b8 01       	movw	r22, r16
     75e:	cb d5       	rcall	.+2966   	; 0x12f6 <__udivmodhi4>
     760:	58 2f       	mov	r21, r24
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:157
			
			if (digit == 0 && num == 0 && leading_zero == false)
     762:	81 11       	cpse	r24, r1
     764:	09 c0       	rjmp	.+18     	; 0x778 <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x8a>
     766:	21 15       	cp	r18, r1
     768:	31 05       	cpc	r19, r1
     76a:	31 f4       	brne	.+12     	; 0x778 <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x8a>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:159
			    // Leading zero is blank
				digits[i] = 0;
     76c:	13 82       	std	Z+3, r1	; 0x03
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:163
			else
			    digits[i] = encodeDigit(digit);
				
			if (digit == 0 && num == 0 && negative) {
     76e:	44 23       	and	r20, r20
     770:	69 f0       	breq	.+26     	; 0x78c <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x9e>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:164
			    digits[i] = minusSegments;
     772:	d3 82       	std	Z+3, r13	; 0x03
_ZN13TM1637Display13showNumberDecEibhh.constprop.3():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:165
				negative = false;
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	0a c0       	rjmp	.+20     	; 0x78c <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x9e>
encodeDigit():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:256
    }
}

uint8_t TM1637Display::encodeDigit(uint8_t digit)
{
	return digitToSegment[digit & 0x0f];
     778:	84 58       	subi	r24, 0x84	; 132
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
showNumberBaseEx():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:161
			
			if (digit == 0 && num == 0 && leading_zero == false)
			    // Leading zero is blank
				digits[i] = 0;
			else
			    digits[i] = encodeDigit(digit);
     77c:	dc 01       	movw	r26, r24
     77e:	8c 91       	ld	r24, X
     780:	83 83       	std	Z+3, r24	; 0x03
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:163
				
			if (digit == 0 && num == 0 && negative) {
     782:	51 11       	cpse	r21, r1
     784:	03 c0       	rjmp	.+6      	; 0x78c <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x9e>
     786:	21 15       	cp	r18, r1
     788:	31 05       	cpc	r19, r1
     78a:	89 f3       	breq	.-30     	; 0x76e <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x80>
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:168
			    digits[i] = minusSegments;
				negative = false;
			}

			num /= base;
     78c:	c9 01       	movw	r24, r18
     78e:	b8 01       	movw	r22, r16
     790:	b2 d5       	rcall	.+2916   	; 0x12f6 <__udivmodhi4>
     792:	9b 01       	movw	r18, r22
     794:	31 97       	sbiw	r30, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:153
		//	// Negative number, show the minus sign
		//    digits[i] = minusSegments;
		//	i--;
		//}
		
		for(int i = length-1; i >= 0; --i)
     796:	ee 16       	cp	r14, r30
     798:	ff 06       	cpc	r15, r31
     79a:	f9 f6       	brne	.-66     	; 0x75a <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x6c>
     79c:	ba cf       	rjmp	.-140    	; 0x712 <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]+0x24>

0000079e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN11EEPROMClass5writeEih.isra.1():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     79e:	9e c5       	rjmp	.+2876   	; 0x12dc <eeprom_write_byte>

000007a0 <__vector_12>:
__vector_12():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	2f 93       	push	r18
     7ac:	3f 93       	push	r19
     7ae:	4f 93       	push	r20
     7b0:	5f 93       	push	r21
     7b2:	6f 93       	push	r22
     7b4:	7f 93       	push	r23
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	af 93       	push	r26
     7bc:	bf 93       	push	r27
     7be:	ef 93       	push	r30
     7c0:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     7c2:	8e e0       	ldi	r24, 0x0E	; 14
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	c5 dc       	rcall	.-1654   	; 0x152 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     7c8:	ff 91       	pop	r31
     7ca:	ef 91       	pop	r30
     7cc:	bf 91       	pop	r27
     7ce:	af 91       	pop	r26
     7d0:	9f 91       	pop	r25
     7d2:	8f 91       	pop	r24
     7d4:	7f 91       	pop	r23
     7d6:	6f 91       	pop	r22
     7d8:	5f 91       	pop	r21
     7da:	4f 91       	pop	r20
     7dc:	3f 91       	pop	r19
     7de:	2f 91       	pop	r18
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <__vector_11>:
__vector_11():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     7fe:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <Serial+0x10>
     802:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <Serial+0x11>
     806:	80 81       	ld	r24, Z
     808:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Serial+0x16>
     80c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Serial+0x17>
     810:	82 fd       	sbrc	r24, 2
     812:	1b c0       	rjmp	.+54     	; 0x84a <__vector_11+0x60>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     814:	90 81       	ld	r25, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     816:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Serial+0x19>
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     81e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Serial+0x1a>
     822:	82 17       	cp	r24, r18
     824:	41 f0       	breq	.+16     	; 0x836 <__vector_11+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
     826:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <Serial+0x19>
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	e2 5f       	subi	r30, 0xF2	; 242
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
     832:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Serial+0x19>
__vector_11():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti
_rx_complete_irq():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     84a:	80 81       	ld	r24, Z
     84c:	f4 cf       	rjmp	.-24     	; 0x836 <__vector_11+0x4c>

0000084e <__vector_9>:
__vector_9():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	8f 93       	push	r24
     85e:	9f 93       	push	r25
     860:	af 93       	push	r26
     862:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     864:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <timer0_millis>
     868:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <timer0_millis+0x1>
     86c:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <timer0_millis+0x2>
     870:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     874:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <__data_end>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     878:	23 e0       	ldi	r18, 0x03	; 3
     87a:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     87c:	2d 37       	cpi	r18, 0x7D	; 125
     87e:	68 f1       	brcs	.+90     	; 0x8da <__vector_9+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     880:	26 e8       	ldi	r18, 0x86	; 134
     882:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     884:	02 96       	adiw	r24, 0x02	; 2
     886:	a1 1d       	adc	r26, r1
     888:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     88a:	20 93 be 00 	sts	0x00BE, r18	; 0x8000be <__data_end>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     88e:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <timer0_millis>
     892:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <timer0_millis+0x1>
     896:	a0 93 c1 00 	sts	0x00C1, r26	; 0x8000c1 <timer0_millis+0x2>
     89a:	b0 93 c2 00 	sts	0x00C2, r27	; 0x8000c2 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     89e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <timer0_overflow_count>
     8a2:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <timer0_overflow_count+0x1>
     8a6:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <timer0_overflow_count+0x2>
     8aa:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <timer0_overflow_count+0x3>
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	a1 1d       	adc	r26, r1
     8b2:	b1 1d       	adc	r27, r1
     8b4:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <timer0_overflow_count>
     8b8:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <timer0_overflow_count+0x1>
     8bc:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <timer0_overflow_count+0x2>
     8c0:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	3f 91       	pop	r19
     8ce:	2f 91       	pop	r18
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	0f 90       	pop	r0
     8d6:	1f 90       	pop	r1
     8d8:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	a1 1d       	adc	r26, r1
     8de:	b1 1d       	adc	r27, r1
     8e0:	d4 cf       	rjmp	.-88     	; 0x88a <__vector_9+0x3c>

000008e2 <Print::println(char const*) [clone .constprop.17]>:
_ZN5Print7printlnEPKc.constprop.17():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     8e6:	fc 01       	movw	r30, r24
     8e8:	01 90       	ld	r0, Z+
     8ea:	00 20       	and	r0, r0
     8ec:	e9 f7       	brne	.-6      	; 0x8e8 <Print::println(char const*) [clone .constprop.17]+0x6>
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	af 01       	movw	r20, r30
     8f2:	48 1b       	sub	r20, r24
     8f4:	59 0b       	sbc	r21, r25
     8f6:	bc 01       	movw	r22, r24
     8f8:	8e e0       	ldi	r24, 0x0E	; 14
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	c1 dc       	rcall	.-1662   	; 0x280 <Print::write(unsigned char const*, unsigned int)>
     8fe:	ec 01       	movw	r28, r24
     900:	42 e0       	ldi	r20, 0x02	; 2
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	6e e9       	ldi	r22, 0x9E	; 158
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	8e e0       	ldi	r24, 0x0E	; 14
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	b9 dc       	rcall	.-1678   	; 0x280 <Print::write(unsigned char const*, unsigned int)>
_ZN5Print7printlnEPKc.constprop.17():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     90e:	8c 0f       	add	r24, r28
     910:	9d 1f       	adc	r25, r29
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <MySwitch::MySwitch(unsigned char)>:
_ZN8MySwitchC2Eh():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:61
    long butTimer, holdDelay = 3000;
    byte state;
    // int x = 0, y;

  public:
    MySwitch(byte pin)
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:62
    {
     91e:	19 82       	std	Y+1, r1	; 0x01
     920:	1a 82       	std	Y+2, r1	; 0x02
     922:	1b 82       	std	Y+3, r1	; 0x03
     924:	88 eb       	ldi	r24, 0xB8	; 184
     926:	9b e0       	ldi	r25, 0x0B	; 11
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	8a 87       	std	Y+10, r24	; 0x0a
     92e:	9b 87       	std	Y+11, r25	; 0x0b
     930:	ac 87       	std	Y+12, r26	; 0x0c
     932:	bd 87       	std	Y+13, r27	; 0x0d
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:63
      this->pin = pin;
     934:	68 83       	st	Y, r22
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:67
      Key_Down = false;
      Key_Up = false;
      Key_Hold = false;
      Serial.println("Switch Init");
     936:	81 ea       	ldi	r24, 0xA1	; 161
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	d3 df       	rcall	.-90     	; 0x8e2 <Print::println(char const*) [clone .constprop.17]>
_ZN8MySwitch4initEv.isra.2():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:72
      init();
    }
    void init()
    {
      pinMode(pin, INPUT_PULLUP);
     93c:	62 e0       	ldi	r22, 0x02	; 2
     93e:	88 81       	ld	r24, Y
     940:	32 dd       	rcall	.-1436   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:74
      //update();
      Serial.println("Switch Init2222");
     942:	8d ea       	ldi	r24, 0xAD	; 173
     944:	90 e0       	ldi	r25, 0x00	; 0
_ZN8MySwitchC2Eh():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:69
      Key_Down = false;
      Key_Up = false;
      Key_Hold = false;
      Serial.println("Switch Init");
      init();
    }
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
_ZN8MySwitch4initEv.isra.2():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:74
    void init()
    {
      pinMode(pin, INPUT_PULLUP);
      //update();
      Serial.println("Switch Init2222");
     94a:	cb cf       	rjmp	.-106    	; 0x8e2 <Print::println(char const*) [clone .constprop.17]>

0000094c <global constructors keyed to 65535_0_Water_Level_7Segment.ino.cpp.o.2080>:
_GLOBAL__I_65535_0_Water_Level_7Segment.ino.cpp.o.2080():
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ee e0       	ldi	r30, 0x0E	; 14
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	13 82       	std	Z+3, r1	; 0x03
     956:	12 82       	std	Z+2, r1	; 0x02
     958:	88 ee       	ldi	r24, 0xE8	; 232
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	84 83       	std	Z+4, r24	; 0x04
     962:	95 83       	std	Z+5, r25	; 0x05
     964:	a6 83       	std	Z+6, r26	; 0x06
     966:	b7 83       	std	Z+7, r27	; 0x07
     968:	80 e9       	ldi	r24, 0x90	; 144
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	91 83       	std	Z+1, r25	; 0x01
     96e:	80 83       	st	Z, r24
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	95 87       	std	Z+13, r25	; 0x0d
     976:	84 87       	std	Z+12, r24	; 0x0c
     978:	29 e2       	ldi	r18, 0x29	; 41
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	37 87       	std	Z+15, r19	; 0x0f
     97e:	26 87       	std	Z+14, r18	; 0x0e
     980:	2b e2       	ldi	r18, 0x2B	; 43
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	31 8b       	std	Z+17, r19	; 0x11
     986:	20 8b       	std	Z+16, r18	; 0x10
     988:	2a e2       	ldi	r18, 0x2A	; 42
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	33 8b       	std	Z+19, r19	; 0x13
     98e:	22 8b       	std	Z+18, r18	; 0x12
     990:	95 8b       	std	Z+21, r25	; 0x15
     992:	84 8b       	std	Z+20, r24	; 0x14
     994:	8c e2       	ldi	r24, 0x2C	; 44
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	97 8b       	std	Z+23, r25	; 0x17
     99a:	86 8b       	std	Z+22, r24	; 0x16
     99c:	11 8e       	std	Z+25, r1	; 0x19
     99e:	12 8e       	std	Z+26, r1	; 0x1a
     9a0:	13 8e       	std	Z+27, r1	; 0x1b
     9a2:	14 8e       	std	Z+28, r1	; 0x1c
     9a4:	c9 ec       	ldi	r28, 0xC9	; 201
     9a6:	d1 e0       	ldi	r29, 0x01	; 1
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	88 83       	st	Y, r24
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	84 e6       	ldi	r24, 0x64	; 100
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	f4 dc       	rcall	.-1560   	; 0x3a6 <pinMode>
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	f1 dc       	rcall	.-1566   	; 0x3a6 <pinMode>
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	88 81       	ld	r24, Y
     9c8:	c1 dc       	rcall	.-1662   	; 0x34c <digitalWrite>
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	be dc       	rcall	.-1668   	; 0x34c <digitalWrite>
     9d0:	6e e0       	ldi	r22, 0x0E	; 14
     9d2:	8a eb       	ldi	r24, 0xBA	; 186
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	a0 df       	rcall	.-192    	; 0x918 <MySwitch::MySwitch(unsigned char)>
     9d8:	6f e0       	ldi	r22, 0x0F	; 15
     9da:	8b ea       	ldi	r24, 0xAB	; 171
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	9a cf       	rjmp	.-204    	; 0x918 <MySwitch::MySwitch(unsigned char)>

000009e4 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <main+0x6>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <main+0x8>
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     9f0:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     9f2:	83 b7       	in	r24, 0x33	; 51
     9f4:	83 60       	ori	r24, 0x03	; 3
     9f6:	83 bf       	out	0x33, r24	; 51
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     9f8:	89 b7       	in	r24, 0x39	; 57
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	89 bf       	out	0x39, r24	; 57
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	8e bd       	out	0x2e, r24	; 46
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     a02:	8e b5       	in	r24, 0x2e	; 46
     a04:	81 60       	ori	r24, 0x01	; 1
     a06:	8e bd       	out	0x2e, r24	; 46
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     a08:	8f b5       	in	r24, 0x2f	; 47
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	8f bd       	out	0x2f, r24	; 47
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     a0e:	85 b5       	in	r24, 0x25	; 37
     a10:	84 60       	ori	r24, 0x04	; 4
     a12:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     a14:	85 b5       	in	r24, 0x25	; 37
     a16:	80 64       	ori	r24, 0x40	; 64
     a18:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     a1a:	87 e8       	ldi	r24, 0x87	; 135
     a1c:	86 b9       	out	0x06, r24	; 6
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     a1e:	1a b8       	out	0x0a, r1	; 10
setBrightness():
C:\Users\quali\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
	digitalWrite(m_pinDIO, LOW);
}

void TM1637Display::setBrightness(uint8_t brightness, bool on)
{
	m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00);
     a20:	8f e0       	ldi	r24, 0x0F	; 15
     a22:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <display+0x2>
setup():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:201
  }
}
void setup()
{
  display.setBrightness(0x0f);
  uint8_t data[] = {0xff, 0xff, 0xff, 0xff};
     a26:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <LowLevel+0x2>
     a2a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <LowLevel+0x3>
     a2e:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <LowLevel+0x4>
     a32:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <LowLevel+0x5>
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	ab 83       	std	Y+3, r26	; 0x03
     a3c:	bc 83       	std	Y+4, r27	; 0x04
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:202
  display.setSegments(data);
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	59 dd       	rcall	.-1358   	; 0x4f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:203
  delay(1000);
     a44:	b2 dd       	rcall	.-1180   	; 0x5aa <delay.constprop.11>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:206

  //Serial.begin(9600);
  pinMode(STATUSLED, OUTPUT);
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	81 e1       	ldi	r24, 0x11	; 17
     a4a:	ad dc       	rcall	.-1702   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:207
  pinMode(START, OUTPUT);
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	87 e0       	ldi	r24, 0x07	; 7
     a50:	aa dc       	rcall	.-1708   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:208
  pinMode(STOP, OUTPUT);
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	86 e0       	ldi	r24, 0x06	; 6
     a56:	a7 dc       	rcall	.-1714   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:209
  pinMode(ONBUT, INPUT_PULLUP);
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	8e e0       	ldi	r24, 0x0E	; 14
     a5c:	a4 dc       	rcall	.-1720   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:210
  pinMode(OFFBUT, INPUT_PULLUP);
     a5e:	62 e0       	ldi	r22, 0x02	; 2
     a60:	8f e0       	ldi	r24, 0x0F	; 15
     a62:	a1 dc       	rcall	.-1726   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:211
  pinMode(On_Det, INPUT_PULLUP);
     a64:	62 e0       	ldi	r22, 0x02	; 2
     a66:	85 e0       	ldi	r24, 0x05	; 5
     a68:	9e dc       	rcall	.-1732   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:212
  pinMode(LEV1, INPUT_PULLUP);
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	89 e0       	ldi	r24, 0x09	; 9
     a6e:	9b dc       	rcall	.-1738   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:213
  pinMode(LEV2, INPUT_PULLUP);
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	98 dc       	rcall	.-1744   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:214
  pinMode(LEV3, INPUT_PULLUP);
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	8b e0       	ldi	r24, 0x0B	; 11
     a7a:	95 dc       	rcall	.-1750   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:215
  pinMode(LEV4, INPUT_PULLUP);
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	8c e0       	ldi	r24, 0x0C	; 12
     a80:	92 dc       	rcall	.-1756   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:216
  pinMode(LEV5, INPUT_PULLUP);
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	8d e0       	ldi	r24, 0x0D	; 13
     a86:	8f dc       	rcall	.-1762   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:217
  pinMode(DRY, INPUT_PULLUP);
     a88:	62 e0       	ldi	r22, 0x02	; 2
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	8c dc       	rcall	.-1768   	; 0x3a6 <pinMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:218
  pinMode(BUZR, OUTPUT);
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	89 dc       	rcall	.-1774   	; 0x3a6 <pinMode>
operator*():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	19 d4       	rcall	.+2098   	; 0x12cc <eeprom_read_byte>
loadSettings():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:131
MySwitch onSw(ONBUT);
MySwitch offSw(OFFBUT);

void loadSettings()
{
  if (EEPROM.read(1023) == 'T')
     a9a:	84 35       	cpi	r24, 0x54	; 84
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <main+0xbc>
     a9e:	d1 c0       	rjmp	.+418    	; 0xc42 <main+0x25e>
operator*():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	13 d4       	rcall	.+2086   	; 0x12cc <eeprom_read_byte>
loadSettings():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:133
  {
    MotorState = EEPROM.read(2);
     aa6:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <MotorState>
operator*():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e d4       	rcall	.+2076   	; 0x12cc <eeprom_read_byte>
loadSettings():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:134
    AutoMode = EEPROM.read(3);
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <AutoMode+0x1>
     ab6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <AutoMode>
operator*():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	06 d4       	rcall	.+2060   	; 0x12cc <eeprom_read_byte>
loadSettings():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:135
    LowLevel = EEPROM.read(4);
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <LowLevel+0x1>
     ac6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LowLevel>
setup():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:220
  pinMode(LEV4, INPUT_PULLUP);
  pinMode(LEV5, INPUT_PULLUP);
  pinMode(DRY, INPUT_PULLUP);
  pinMode(BUZR, OUTPUT);
  loadSettings();
  if (MotorState == ON)
     aca:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <MotorState>
     ace:	81 11       	cpse	r24, r1
     ad0:	d8 c0       	rjmp	.+432    	; 0xc82 <main+0x29e>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:221
    Pow_on = true;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Pow_on>
changeAutomode():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:458
  }
  else
  {
    AutoMode = 1;
    EEPROM.write(3, AutoMode);
    uint8_t dis[] = {B01110111, B11111000, 63, 55};
     ad8:	80 90 6a 00 	lds	r8, 0x006A	; 0x80006a <LowLevel+0x6>
     adc:	90 90 6b 00 	lds	r9, 0x006B	; 0x80006b <LowLevel+0x7>
     ae0:	a0 90 6c 00 	lds	r10, 0x006C	; 0x80006c <LowLevel+0x8>
     ae4:	b0 90 6d 00 	lds	r11, 0x006D	; 0x80006d <LowLevel+0x9>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:450
{
  if (AutoMode == 1)
  {
    AutoMode = 0;
    EEPROM.write(3, AutoMode);
    uint8_t dis[] = {B01110111, B11111000, 63, 113};
     ae8:	40 90 6e 00 	lds	r4, 0x006E	; 0x80006e <LowLevel+0xa>
     aec:	50 90 6f 00 	lds	r5, 0x006F	; 0x80006f <LowLevel+0xb>
     af0:	60 90 70 00 	lds	r6, 0x0070	; 0x800070 <LowLevel+0xc>
     af4:	70 90 71 00 	lds	r7, 0x0071	; 0x800071 <LowLevel+0xd>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:227
  else
    Pow_on = false;
}
void loop()
{
  static unsigned long timr = millis();
     af8:	33 24       	eor	r3, r3
     afa:	33 94       	inc	r3
     afc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <guard variable for loop::timr>
     b00:	81 11       	cpse	r24, r1
     b02:	0b c0       	rjmp	.+22     	; 0xb1a <main+0x136>
     b04:	86 dd       	rcall	.-1268   	; 0x612 <millis>
     b06:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <loop::timr>
     b0a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <loop::timr+0x1>
     b0e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <loop::timr+0x2>
     b12:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <loop::timr+0x3>
     b16:	30 92 06 01 	sts	0x0106, r3	; 0x800106 <guard variable for loop::timr>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:229
  // Show LCD Time Date
  if (millis() - timr > 500)
     b1a:	7b dd       	rcall	.-1290   	; 0x612 <millis>
     b1c:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <loop::timr>
     b20:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <loop::timr+0x1>
     b24:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <loop::timr+0x2>
     b28:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <loop::timr+0x3>
     b2c:	60 1b       	sub	r22, r16
     b2e:	71 0b       	sbc	r23, r17
     b30:	82 0b       	sbc	r24, r18
     b32:	93 0b       	sbc	r25, r19
     b34:	65 3f       	cpi	r22, 0xF5	; 245
     b36:	71 40       	sbci	r23, 0x01	; 1
     b38:	81 05       	cpc	r24, r1
     b3a:	91 05       	cpc	r25, r1
     b3c:	88 f0       	brcs	.+34     	; 0xb60 <main+0x17c>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:231
  {
    timr = millis();
     b3e:	69 dd       	rcall	.-1326   	; 0x612 <millis>
     b40:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <loop::timr>
     b44:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <loop::timr+0x1>
     b48:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <loop::timr+0x2>
     b4c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <loop::timr+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:232
    digitalWrite(STATUSLED, !digitalRead(STATUSLED));
     b50:	81 e1       	ldi	r24, 0x11	; 17
     b52:	d4 db       	rcall	.-2136   	; 0x2fc <digitalRead>
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	89 2b       	or	r24, r25
     b58:	09 f0       	breq	.+2      	; 0xb5c <main+0x178>
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	81 e1       	ldi	r24, 0x11	; 17
     b5e:	f6 db       	rcall	.-2068   	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:234
  }
  if (millis() > timr_rota + 100 && MotorState == ON && !highOff)
     b60:	58 dd       	rcall	.-1360   	; 0x612 <millis>
     b62:	ab 01       	movw	r20, r22
     b64:	bc 01       	movw	r22, r24
     b66:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <timr_rota>
     b6a:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <timr_rota+0x1>
     b6e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <timr_rota+0x2>
     b72:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <timr_rota+0x3>
     b76:	8c 59       	subi	r24, 0x9C	; 156
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	af 4f       	sbci	r26, 0xFF	; 255
     b7c:	bf 4f       	sbci	r27, 0xFF	; 255
     b7e:	84 17       	cp	r24, r20
     b80:	95 07       	cpc	r25, r21
     b82:	a6 07       	cpc	r26, r22
     b84:	b7 07       	cpc	r27, r23
     b86:	08 f0       	brcs	.+2      	; 0xb8a <main+0x1a6>
     b88:	aa c0       	rjmp	.+340    	; 0xcde <main+0x2fa>
     b8a:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <MotorState>
     b8e:	81 11       	cpse	r24, r1
     b90:	a6 c0       	rjmp	.+332    	; 0xcde <main+0x2fa>
     b92:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <highOff>
     b96:	81 11       	cpse	r24, r1
     b98:	a2 c0       	rjmp	.+324    	; 0xcde <main+0x2fa>
rotDisplay():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:151
  }
}
void rotDisplay()
{

  timr_rota = millis();
     b9a:	3b dd       	rcall	.-1418   	; 0x612 <millis>
     b9c:	60 93 fe 00 	sts	0x00FE, r22	; 0x8000fe <timr_rota>
     ba0:	70 93 ff 00 	sts	0x00FF, r23	; 0x8000ff <timr_rota+0x1>
     ba4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <timr_rota+0x2>
     ba8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <timr_rota+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:152
  display.setSegments(data);
     bac:	89 ec       	ldi	r24, 0xC9	; 201
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a2 dc       	rcall	.-1724   	; 0x4f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:153
  if (i == 3)
     bb2:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <i>
     bb6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <i+0x1>
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <main+0x1de>
     bc0:	63 c0       	rjmp	.+198    	; 0xc88 <main+0x2a4>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:155
  {
    data[0] = B00001000;
     bc2:	e8 e0       	ldi	r30, 0x08	; 8
     bc4:	e0 93 c9 00 	sts	0x00C9, r30	; 0x8000c9 <data>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:156
    data[1] = 0;
     bc8:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <data+0x1>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:170
  }
  if (i == 6)
  {
    data[0] = 1;
  }
  i++;
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <i+0x1>
     bd2:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <i>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:171
  if (i > 7)
     bd6:	08 97       	sbiw	r24, 0x08	; 8
     bd8:	44 f0       	brlt	.+16     	; 0xbea <main+0x206>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:173
  {
    data[0] = 0;
     bda:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <data>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:174
    data[1] = 1;
     bde:	30 92 ca 00 	sts	0x00CA, r3	; 0x8000ca <data+0x1>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:175
    i = 0;
     be2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <i+0x1>
     be6:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <i>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:177
  }
  if (millis() > tim_progres + 100 && flowFailure)
     bea:	13 dd       	rcall	.-1498   	; 0x612 <millis>
     bec:	ab 01       	movw	r20, r22
     bee:	bc 01       	movw	r22, r24
     bf0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <tim_progres>
     bf4:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <tim_progres+0x1>
     bf8:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <tim_progres+0x2>
     bfc:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <tim_progres+0x3>
     c00:	8c 59       	subi	r24, 0x9C	; 156
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	af 4f       	sbci	r26, 0xFF	; 255
     c06:	bf 4f       	sbci	r27, 0xFF	; 255
     c08:	84 17       	cp	r24, r20
     c0a:	95 07       	cpc	r25, r21
     c0c:	a6 07       	cpc	r26, r22
     c0e:	b7 07       	cpc	r27, r23
     c10:	08 f0       	brcs	.+2      	; 0xc14 <main+0x230>
     c12:	52 c0       	rjmp	.+164    	; 0xcb8 <main+0x2d4>
     c14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <flowFailure>
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <main+0x23a>
     c1c:	4d c0       	rjmp	.+154    	; 0xcb8 <main+0x2d4>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:179
  {
    tim_progres = millis();
     c1e:	f9 dc       	rcall	.-1550   	; 0x612 <millis>
     c20:	60 93 de 00 	sts	0x00DE, r22	; 0x8000de <tim_progres>
     c24:	70 93 df 00 	sts	0x00DF, r23	; 0x8000df <tim_progres+0x1>
     c28:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <tim_progres+0x2>
     c2c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <tim_progres+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:180
    if (disON == false)
     c30:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <disON>
     c34:	88 23       	and	r24, r24
     c36:	09 f4       	brne	.+2      	; 0xc3a <main+0x256>
     c38:	46 c2       	rjmp	.+1164   	; 0x10c6 <main+0x6e2>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:188
      data[3] = numberB[waterLevel % 10];
      disON = true;
    }
    else
    {
      display.clear();
     c3a:	7d dc       	rcall	.-1798   	; 0x536 <TM1637Display::clear() [clone .constprop.8]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:189
      disON = false;
     c3c:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <disON>
     c40:	4e c0       	rjmp	.+156    	; 0xcde <main+0x2fa>
loadSettings():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:139
    AutoMode = EEPROM.read(3);
    LowLevel = EEPROM.read(4);
  }
  else
  {
    MotorState = OFF;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <MotorState>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:140
    EEPROM.write(2, MotorState);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a7 dd       	rcall	.-1202   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:141
    AutoMode = 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <AutoMode+0x1>
     c58:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <AutoMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:142
    EEPROM.write(3, AutoMode);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9d dd       	rcall	.-1222   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:143
    LowLevel = 10;
     c64:	8a e0       	ldi	r24, 0x0A	; 10
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <LowLevel+0x1>
     c6c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LowLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:144
    EEPROM.write(4, LowLevel);
     c70:	6a e0       	ldi	r22, 0x0A	; 10
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	93 dd       	rcall	.-1242   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:145
    EEPROM.write(1023, 'T');
     c78:	64 e5       	ldi	r22, 0x54	; 84
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	8f dd       	rcall	.-1250   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
     c80:	24 cf       	rjmp	.-440    	; 0xaca <main+0xe6>
setup():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:223
  pinMode(BUZR, OUTPUT);
  loadSettings();
  if (MotorState == ON)
    Pow_on = true;
  else
    Pow_on = false;
     c82:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <Pow_on>
     c86:	28 cf       	rjmp	.-432    	; 0xad8 <main+0xf4>
rotDisplay():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:158
  if (i == 3)
  {
    data[0] = B00001000;
    data[1] = 0;
  }
  else if (i <= 3)
     c88:	84 30       	cpi	r24, 0x04	; 4
     c8a:	91 05       	cpc	r25, r1
     c8c:	34 f4       	brge	.+12     	; 0xc9a <main+0x2b6>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:160
  {
    data[1] = data[1] << 1;
     c8e:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <data+0x1>
     c92:	22 0f       	add	r18, r18
     c94:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <data+0x1>
     c98:	99 cf       	rjmp	.-206    	; 0xbcc <main+0x1e8>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:162
  }
  else if (i <= 5)
     c9a:	86 30       	cpi	r24, 0x06	; 6
     c9c:	91 05       	cpc	r25, r1
     c9e:	2c f4       	brge	.+10     	; 0xcaa <main+0x2c6>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:164
  {
    data[0] = data[0] << 1;
     ca0:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <data>
     ca4:	22 0f       	add	r18, r18
     ca6:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <data>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:166
  }
  if (i == 6)
     caa:	86 30       	cpi	r24, 0x06	; 6
     cac:	91 05       	cpc	r25, r1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <main+0x2ce>
     cb0:	8d cf       	rjmp	.-230    	; 0xbcc <main+0x1e8>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:168
  {
    data[0] = 1;
     cb2:	30 92 c9 00 	sts	0x00C9, r3	; 0x8000c9 <data>
     cb6:	8a cf       	rjmp	.-236    	; 0xbcc <main+0x1e8>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:194
      disON = false;
    }
  }
  else
  {
    data[2] = numberB[waterLevel / 10];
     cb8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <waterLevel>
     cbc:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <waterLevel+0x1>
     cc0:	6a e0       	ldi	r22, 0x0A	; 10
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	2c d3       	rcall	.+1624   	; 0x131e <__divmodhi4>
     cc6:	6e 58       	subi	r22, 0x8E	; 142
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	fb 01       	movw	r30, r22
     ccc:	20 81       	ld	r18, Z
     cce:	20 93 cb 00 	sts	0x00CB, r18	; 0x8000cb <data+0x2>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:195
    data[3] = numberB[waterLevel % 10];
     cd2:	fc 01       	movw	r30, r24
     cd4:	ee 58       	subi	r30, 0x8E	; 142
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 81       	ld	r24, Z
     cda:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <data+0x3>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:240
  {
    rotDisplay();
  }
  //Check Water Level
  {
    waterLevel = 0;
     cde:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <waterLevel+0x1>
     ce2:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <waterLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:241
    if (digitalRead(LEV1) == 0)
     ce6:	89 e0       	ldi	r24, 0x09	; 9
     ce8:	09 db       	rcall	.-2542   	; 0x2fc <digitalRead>
     cea:	89 2b       	or	r24, r25
     cec:	31 f4       	brne	.+12     	; 0xcfa <main+0x316>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:242
      waterLevel = 20;
     cee:	84 e1       	ldi	r24, 0x14	; 20
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <waterLevel+0x1>
     cf6:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <waterLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:243
    if (digitalRead(LEV2) == 0)
     cfa:	8a e0       	ldi	r24, 0x0A	; 10
     cfc:	ff da       	rcall	.-2562   	; 0x2fc <digitalRead>
     cfe:	89 2b       	or	r24, r25
     d00:	31 f4       	brne	.+12     	; 0xd0e <main+0x32a>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:244
      waterLevel = 40;
     d02:	e8 e2       	ldi	r30, 0x28	; 40
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	f0 93 fb 00 	sts	0x00FB, r31	; 0x8000fb <waterLevel+0x1>
     d0a:	e0 93 fa 00 	sts	0x00FA, r30	; 0x8000fa <waterLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:245
    if (digitalRead(LEV3) == 0)
     d0e:	8b e0       	ldi	r24, 0x0B	; 11
     d10:	f5 da       	rcall	.-2582   	; 0x2fc <digitalRead>
     d12:	89 2b       	or	r24, r25
     d14:	31 f4       	brne	.+12     	; 0xd22 <main+0x33e>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:246
      waterLevel = 60;
     d16:	8c e3       	ldi	r24, 0x3C	; 60
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <waterLevel+0x1>
     d1e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <waterLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:247
    if (digitalRead(LEV4) == 0)
     d22:	8c e0       	ldi	r24, 0x0C	; 12
     d24:	eb da       	rcall	.-2602   	; 0x2fc <digitalRead>
     d26:	89 2b       	or	r24, r25
     d28:	31 f4       	brne	.+12     	; 0xd36 <main+0x352>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:248
      waterLevel = 80;
     d2a:	e0 e5       	ldi	r30, 0x50	; 80
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	f0 93 fb 00 	sts	0x00FB, r31	; 0x8000fb <waterLevel+0x1>
     d32:	e0 93 fa 00 	sts	0x00FA, r30	; 0x8000fa <waterLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:249
    if (digitalRead(LEV5) == 0)
     d36:	8d e0       	ldi	r24, 0x0D	; 13
     d38:	e1 da       	rcall	.-2622   	; 0x2fc <digitalRead>
     d3a:	89 2b       	or	r24, r25
     d3c:	31 f4       	brne	.+12     	; 0xd4a <main+0x366>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:250
      waterLevel = 100;
     d3e:	84 e6       	ldi	r24, 0x64	; 100
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <waterLevel+0x1>
     d46:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <waterLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:251
    if (digitalRead(DRY) == 0)
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	d7 da       	rcall	.-2642   	; 0x2fc <digitalRead>
     d4e:	89 2b       	or	r24, r25
     d50:	09 f0       	breq	.+2      	; 0xd54 <main+0x370>
     d52:	cf c1       	rjmp	.+926    	; 0x10f2 <main+0x70e>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:252
      waterflow = true;
     d54:	30 92 f9 00 	sts	0x00F9, r3	; 0x8000f9 <waterflow>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:257
    else
      waterflow = false;
  }

  if (Pow_on == true)
     d58:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <Pow_on>
     d5c:	88 23       	and	r24, r24
     d5e:	49 f0       	breq	.+18     	; 0xd72 <main+0x38e>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:259
  {
    if (millis() > 30000)
     d60:	58 dc       	rcall	.-1872   	; 0x612 <millis>
     d62:	61 33       	cpi	r22, 0x31	; 49
     d64:	75 47       	sbci	r23, 0x75	; 117
     d66:	81 05       	cpc	r24, r1
     d68:	91 05       	cpc	r25, r1
     d6a:	18 f0       	brcs	.+6      	; 0xd72 <main+0x38e>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:261
    {
      Pow_on = false;
     d6c:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <Pow_on>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:262
      MotorOn();
     d70:	5c dc       	rcall	.-1864   	; 0x62a <MotorOn()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:266
    }
  }

  if (millis() > tim_on + 1000)
     d72:	4f dc       	rcall	.-1890   	; 0x612 <millis>
     d74:	ab 01       	movw	r20, r22
     d76:	bc 01       	movw	r22, r24
     d78:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <tim_on>
     d7c:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <tim_on+0x1>
     d80:	a0 91 f6 00 	lds	r26, 0x00F6	; 0x8000f6 <tim_on+0x2>
     d84:	b0 91 f7 00 	lds	r27, 0x00F7	; 0x8000f7 <tim_on+0x3>
     d88:	88 51       	subi	r24, 0x18	; 24
     d8a:	9c 4f       	sbci	r25, 0xFC	; 252
     d8c:	af 4f       	sbci	r26, 0xFF	; 255
     d8e:	bf 4f       	sbci	r27, 0xFF	; 255
     d90:	84 17       	cp	r24, r20
     d92:	95 07       	cpc	r25, r21
     d94:	a6 07       	cpc	r26, r22
     d96:	b7 07       	cpc	r27, r23
     d98:	30 f4       	brcc	.+12     	; 0xda6 <main+0x3c2>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:268
  {
    digitalWrite(START, LOW);
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	d6 da       	rcall	.-2644   	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:269
    digitalWrite(BUZR, LOW);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e1       	ldi	r24, 0x10	; 16
     da4:	d3 da       	rcall	.-2650   	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:271
  }
  if (millis() > tim_off + 2000)
     da6:	35 dc       	rcall	.-1942   	; 0x612 <millis>
     da8:	ab 01       	movw	r20, r22
     daa:	bc 01       	movw	r22, r24
     dac:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <tim_off>
     db0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <tim_off+0x1>
     db4:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <tim_off+0x2>
     db8:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <tim_off+0x3>
     dbc:	80 53       	subi	r24, 0x30	; 48
     dbe:	98 4f       	sbci	r25, 0xF8	; 248
     dc0:	af 4f       	sbci	r26, 0xFF	; 255
     dc2:	bf 4f       	sbci	r27, 0xFF	; 255
     dc4:	84 17       	cp	r24, r20
     dc6:	95 07       	cpc	r25, r21
     dc8:	a6 07       	cpc	r26, r22
     dca:	b7 07       	cpc	r27, r23
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <main+0x3f0>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:272
    digitalWrite(STOP, LOW);
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	bc da       	rcall	.-2696   	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:274

  if (digitalRead(On_Det) == LOW)
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	92 da       	rcall	.-2780   	; 0x2fc <digitalRead>
     dd8:	89 2b       	or	r24, r25
     dda:	09 f0       	breq	.+2      	; 0xdde <main+0x3fa>
     ddc:	8d c1       	rjmp	.+794    	; 0x10f8 <main+0x714>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:276
  {
    MotorState = ON;
     dde:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <MotorState>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:277
    EEPROM.write(2, MotorState);
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	da dc       	rcall	.-1612   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:288
    digitalWrite(BUZR, LOW);
  }

  // update switch status
  {
    onSw.update();
     dea:	8a eb       	ldi	r24, 0xBA	; 186
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	44 dc       	rcall	.-1912   	; 0x678 <MySwitch::update()>
     df0:	00 91 bc 01 	lds	r16, 0x01BC	; 0x8001bc <onSw+0x2>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:289
    if (onSw.isHold() == true)
     df4:	00 23       	and	r16, r16
     df6:	09 f4       	brne	.+2      	; 0xdfa <main+0x416>
     df8:	d9 c1       	rjmp	.+946    	; 0x11ac <main+0x7c8>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
     dfa:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <onSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
     dfe:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <onSw+0x1>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:80
      Key_Hold = false;
     e02:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <onSw+0x2>
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:466
  }
}

void setLowLevel()
{
  static unsigned long timr_setlow = millis();
     e06:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <guard variable for setLowLevel()::timr_setlow>
     e0a:	81 11       	cpse	r24, r1
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <main+0x440>
     e0e:	01 dc       	rcall	.-2046   	; 0x612 <millis>
     e10:	60 93 d1 00 	sts	0x00D1, r22	; 0x8000d1 <setLowLevel()::timr_setlow>
     e14:	70 93 d2 00 	sts	0x00D2, r23	; 0x8000d2 <setLowLevel()::timr_setlow+0x1>
     e18:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <setLowLevel()::timr_setlow+0x2>
     e1c:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <setLowLevel()::timr_setlow+0x3>
     e20:	30 92 d5 00 	sts	0x00D5, r3	; 0x8000d5 <guard variable for setLowLevel()::timr_setlow>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:468
  bool xx = false;
  tim_setlow = millis();
     e24:	f6 db       	rcall	.-2068   	; 0x612 <millis>
     e26:	60 93 cd 00 	sts	0x00CD, r22	; 0x8000cd <tim_setlow>
     e2a:	70 93 ce 00 	sts	0x00CE, r23	; 0x8000ce <tim_setlow+0x1>
     e2e:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <tim_setlow+0x2>
     e32:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <tim_setlow+0x3>
main():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:467
}

void setLowLevel()
{
  static unsigned long timr_setlow = millis();
  bool xx = false;
     e36:	10 e0       	ldi	r17, 0x00	; 0
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:471
  tim_setlow = millis();
  while (true)
  {
    if (millis() - tim_setlow > 10000)
     e38:	ec db       	rcall	.-2088   	; 0x612 <millis>
     e3a:	c0 90 cd 00 	lds	r12, 0x00CD	; 0x8000cd <tim_setlow>
     e3e:	d0 90 ce 00 	lds	r13, 0x00CE	; 0x8000ce <tim_setlow+0x1>
     e42:	e0 90 cf 00 	lds	r14, 0x00CF	; 0x8000cf <tim_setlow+0x2>
     e46:	f0 90 d0 00 	lds	r15, 0x00D0	; 0x8000d0 <tim_setlow+0x3>
     e4a:	6c 19       	sub	r22, r12
     e4c:	7d 09       	sbc	r23, r13
     e4e:	8e 09       	sbc	r24, r14
     e50:	9f 09       	sbc	r25, r15
     e52:	61 31       	cpi	r22, 0x11	; 17
     e54:	77 42       	sbci	r23, 0x27	; 39
     e56:	81 05       	cpc	r24, r1
     e58:	91 05       	cpc	r25, r1
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <main+0x47a>
     e5c:	3e c0       	rjmp	.+124    	; 0xeda <main+0x4f6>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:473
      break;
    if (millis() > timr_setlow + 300)
     e5e:	d9 db       	rcall	.-2126   	; 0x612 <millis>
     e60:	ab 01       	movw	r20, r22
     e62:	bc 01       	movw	r22, r24
     e64:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <setLowLevel()::timr_setlow>
     e68:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <setLowLevel()::timr_setlow+0x1>
     e6c:	a0 91 d3 00 	lds	r26, 0x00D3	; 0x8000d3 <setLowLevel()::timr_setlow+0x2>
     e70:	b0 91 d4 00 	lds	r27, 0x00D4	; 0x8000d4 <setLowLevel()::timr_setlow+0x3>
     e74:	84 5d       	subi	r24, 0xD4	; 212
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	af 4f       	sbci	r26, 0xFF	; 255
     e7a:	bf 4f       	sbci	r27, 0xFF	; 255
     e7c:	84 17       	cp	r24, r20
     e7e:	95 07       	cpc	r25, r21
     e80:	a6 07       	cpc	r26, r22
     e82:	b7 07       	cpc	r27, r23
     e84:	88 f4       	brcc	.+34     	; 0xea8 <main+0x4c4>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:475
    {
      timr_setlow = millis();
     e86:	c5 db       	rcall	.-2166   	; 0x612 <millis>
     e88:	60 93 d1 00 	sts	0x00D1, r22	; 0x8000d1 <setLowLevel()::timr_setlow>
     e8c:	70 93 d2 00 	sts	0x00D2, r23	; 0x8000d2 <setLowLevel()::timr_setlow+0x1>
     e90:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <setLowLevel()::timr_setlow+0x2>
     e94:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <setLowLevel()::timr_setlow+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:476
      if (!xx)
     e98:	11 11       	cpse	r17, r1
     e9a:	3d c1       	rjmp	.+634    	; 0x1116 <main+0x732>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:478
      {
        display.showNumberDec(LowLevel);
     e9c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LowLevel>
     ea0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <LowLevel+0x1>
     ea4:	24 dc       	rcall	.-1976   	; 0x6ee <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]>
main():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:479
        xx = true;
     ea6:	10 2f       	mov	r17, r16
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:488
        display.clear();
        xx = false;
      }
    }

    onSw.update();
     ea8:	8a eb       	ldi	r24, 0xBA	; 186
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	e5 db       	rcall	.-2102   	; 0x678 <MySwitch::update()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:489
    if (onSw.isHold() == true)
     eae:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <onSw+0x2>
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <main+0x4d4>
     eb6:	32 c1       	rjmp	.+612    	; 0x111c <main+0x738>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
     eb8:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <onSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
     ebc:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <onSw+0x1>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:80
      Key_Hold = false;
     ec0:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <onSw+0x2>
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:492

    onSw.update();
    if (onSw.isHold() == true)
    {
      onSw.clearValue();
      EEPROM.write(4, LowLevel);
     ec4:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <LowLevel>
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	68 dc       	rcall	.-1840   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:493
      display.showNumberDec(LowLevel);
     ece:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LowLevel>
     ed2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <LowLevel+0x1>
     ed6:	0b dc       	rcall	.-2026   	; 0x6ee <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:494
      delay(1000);
     ed8:	68 db       	rcall	.-2352   	; 0x5aa <delay.constprop.11>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:300
    {
      onSw.clearValue();
      MotorOn();
    }

    offSw.update();
     eda:	8b ea       	ldi	r24, 0xAB	; 171
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	cc db       	rcall	.-2152   	; 0x678 <MySwitch::update()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:301
    if (offSw.isHold() == true)
     ee0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <offSw+0x2>
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <main+0x506>
     ee8:	7b c1       	rjmp	.+758    	; 0x11e0 <main+0x7fc>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
     eea:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <offSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
     eee:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <offSw+0x1>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:80
      Key_Hold = false;
     ef2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <offSw+0x2>
changeAutomode():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:446
  }
}

void changeAutomode() // Auto Mode ON/OFF
{
  if (AutoMode == 1)
     ef6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <AutoMode>
     efa:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <AutoMode+0x1>
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	09 f0       	breq	.+2      	; 0xf04 <main+0x520>
     f02:	5f c1       	rjmp	.+702    	; 0x11c2 <main+0x7de>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:448
  {
    AutoMode = 0;
     f04:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <AutoMode+0x1>
     f08:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <AutoMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:449
    EEPROM.write(3, AutoMode);
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	45 dc       	rcall	.-1910   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:450
    uint8_t dis[] = {B01110111, B11111000, 63, 113};
     f14:	49 82       	std	Y+1, r4	; 0x01
     f16:	5a 82       	std	Y+2, r5	; 0x02
     f18:	6b 82       	std	Y+3, r6	; 0x03
     f1a:	7c 82       	std	Y+4, r7	; 0x04
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:459
  else
  {
    AutoMode = 1;
    EEPROM.write(3, AutoMode);
    uint8_t dis[] = {B01110111, B11111000, 63, 55};
    display.setSegments(dis);
     f1c:	ce 01       	movw	r24, r28
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	ea da       	rcall	.-2604   	; 0x4f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:460
    delay(1000);
     f22:	43 db       	rcall	.-2426   	; 0x5aa <delay.constprop.11>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:314
      MotorOff();
    }
  }
  // Check High Level and OFF Motor after 30 Sec.
  {
    if (waterLevel >= 100 && AutoMode == 1 && MotorState == ON)
     f24:	00 91 fa 00 	lds	r16, 0x00FA	; 0x8000fa <waterLevel>
     f28:	10 91 fb 00 	lds	r17, 0x00FB	; 0x8000fb <waterLevel+0x1>
     f2c:	20 90 fd 00 	lds	r2, 0x00FD	; 0x8000fd <MotorState>
     f30:	04 36       	cpi	r16, 0x64	; 100
     f32:	11 05       	cpc	r17, r1
     f34:	0c f4       	brge	.+2      	; 0xf38 <main+0x554>
     f36:	5f c1       	rjmp	.+702    	; 0x11f6 <main+0x812>
     f38:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <AutoMode>
     f3c:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <AutoMode+0x1>
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <main+0x562>
     f44:	58 c1       	rjmp	.+688    	; 0x11f6 <main+0x812>
     f46:	21 10       	cpse	r2, r1
     f48:	56 c1       	rjmp	.+684    	; 0x11f6 <main+0x812>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:316
    {
      if (highOff == false)
     f4a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <highOff>
     f4e:	81 11       	cpse	r24, r1
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <main+0x584>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:318
      {
        tim_lowOn = millis();
     f52:	5f db       	rcall	.-2370   	; 0x612 <millis>
     f54:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <tim_lowOn>
     f58:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <tim_lowOn+0x1>
     f5c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <tim_lowOn+0x2>
     f60:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <tim_lowOn+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:319
        highOff = true;
     f64:	30 92 fc 00 	sts	0x00FC, r3	; 0x8000fc <highOff>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:326
    }
    else
    {
      highOff = false;
    }
    if (millis() > tim_lowOn + 25000 && highOff == true)
     f68:	54 db       	rcall	.-2392   	; 0x612 <millis>
     f6a:	c0 90 ea 00 	lds	r12, 0x00EA	; 0x8000ea <tim_lowOn>
     f6e:	d0 90 eb 00 	lds	r13, 0x00EB	; 0x8000eb <tim_lowOn+0x1>
     f72:	e0 90 ec 00 	lds	r14, 0x00EC	; 0x8000ec <tim_lowOn+0x2>
     f76:	f0 90 ed 00 	lds	r15, 0x00ED	; 0x8000ed <tim_lowOn+0x3>
     f7a:	a7 01       	movw	r20, r14
     f7c:	96 01       	movw	r18, r12
     f7e:	28 55       	subi	r18, 0x58	; 88
     f80:	3e 49       	sbci	r19, 0x9E	; 158
     f82:	4f 4f       	sbci	r20, 0xFF	; 255
     f84:	5f 4f       	sbci	r21, 0xFF	; 255
     f86:	26 17       	cp	r18, r22
     f88:	37 07       	cpc	r19, r23
     f8a:	48 07       	cpc	r20, r24
     f8c:	59 07       	cpc	r21, r25
     f8e:	38 f4       	brcc	.+14     	; 0xf9e <main+0x5ba>
     f90:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <highOff>
     f94:	88 23       	and	r24, r24
     f96:	19 f0       	breq	.+6      	; 0xf9e <main+0x5ba>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:328
    {
      digitalWrite(BUZR, HIGH);
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	80 e1       	ldi	r24, 0x10	; 16
     f9c:	d7 d9       	rcall	.-3154   	; 0x34c <digitalWrite>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:330
    }
    if (millis() > tim_lowOn + 30000 && highOff == true)
     f9e:	39 db       	rcall	.-2446   	; 0x612 <millis>
     fa0:	f0 e3       	ldi	r31, 0x30	; 48
     fa2:	cf 0e       	add	r12, r31
     fa4:	f5 e7       	ldi	r31, 0x75	; 117
     fa6:	df 1e       	adc	r13, r31
     fa8:	e1 1c       	adc	r14, r1
     faa:	f1 1c       	adc	r15, r1
     fac:	c6 16       	cp	r12, r22
     fae:	d7 06       	cpc	r13, r23
     fb0:	e8 06       	cpc	r14, r24
     fb2:	f9 06       	cpc	r15, r25
     fb4:	38 f4       	brcc	.+14     	; 0xfc4 <main+0x5e0>
     fb6:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <highOff>
     fba:	88 23       	and	r24, r24
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <main+0x5e0>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:332
    {
      MotorOff();
     fbe:	4b db       	rcall	.-2410   	; 0x656 <MotorOff()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:333
      highOff = false;
     fc0:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <highOff>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:338
    }
  }
  // Check Low Level and ON Motor after 30 Sec.
  {
    if (waterLevel < LowLevel && AutoMode == 1 && MotorState == OFF)
     fc4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LowLevel>
     fc8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <LowLevel+0x1>
     fcc:	08 17       	cp	r16, r24
     fce:	19 07       	cpc	r17, r25
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <main+0x5f0>
     fd2:	14 c1       	rjmp	.+552    	; 0x11fc <main+0x818>
     fd4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <AutoMode>
     fd8:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <AutoMode+0x1>
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <main+0x5fe>
     fe0:	0d c1       	rjmp	.+538    	; 0x11fc <main+0x818>
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	22 12       	cpse	r2, r18
     fe6:	0a c1       	rjmp	.+532    	; 0x11fc <main+0x818>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:340
    {
      if (lowOn == false)
     fe8:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <lowOn>
     fec:	81 11       	cpse	r24, r1
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <main+0x622>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:342
      {
        tim_lowOn = millis();
     ff0:	10 db       	rcall	.-2528   	; 0x612 <millis>
     ff2:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <tim_lowOn>
     ff6:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <tim_lowOn+0x1>
     ffa:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <tim_lowOn+0x2>
     ffe:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <tim_lowOn+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:343
        lowOn = true;
    1002:	20 92 e9 00 	sts	0x00E9, r2	; 0x8000e9 <lowOn>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:350
    }
    else
    {
      lowOn = false;
    }
    if (millis() > tim_lowOn + 30000 && lowOn == true)
    1006:	05 db       	rcall	.-2550   	; 0x612 <millis>
    1008:	ab 01       	movw	r20, r22
    100a:	bc 01       	movw	r22, r24
    100c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <tim_lowOn>
    1010:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <tim_lowOn+0x1>
    1014:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <tim_lowOn+0x2>
    1018:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <tim_lowOn+0x3>
    101c:	80 5d       	subi	r24, 0xD0	; 208
    101e:	9a 48       	sbci	r25, 0x8A	; 138
    1020:	af 4f       	sbci	r26, 0xFF	; 255
    1022:	bf 4f       	sbci	r27, 0xFF	; 255
    1024:	84 17       	cp	r24, r20
    1026:	95 07       	cpc	r25, r21
    1028:	a6 07       	cpc	r26, r22
    102a:	b7 07       	cpc	r27, r23
    102c:	38 f4       	brcc	.+14     	; 0x103c <main+0x658>
    102e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <lowOn>
    1032:	88 23       	and	r24, r24
    1034:	19 f0       	breq	.+6      	; 0x103c <main+0x658>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:352
    {
      MotorOn();
    1036:	f9 da       	rcall	.-2574   	; 0x62a <MotorOn()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:353
      lowOn = false;
    1038:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <lowOn>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:359
    }
  }

  // Find Water Flow -----------------------------------------------------
  {
    if (MotorState == ON)
    103c:	21 10       	cpse	r2, r1
    103e:	13 c0       	rjmp	.+38     	; 0x1066 <main+0x682>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:361
    {
      if (!waterflow)
    1040:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <waterflow>
    1044:	81 11       	cpse	r24, r1
    1046:	dd c0       	rjmp	.+442    	; 0x1202 <main+0x81e>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:363
      {
        if (!flowFailure)
    1048:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <flowFailure>
    104c:	81 11       	cpse	r24, r1
    104e:	0b c0       	rjmp	.+22     	; 0x1066 <main+0x682>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:365
        {
          timr_wflow = millis();
    1050:	e0 da       	rcall	.-2624   	; 0x612 <millis>
    1052:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <timr_wflow>
    1056:	70 93 e5 00 	sts	0x00E5, r23	; 0x8000e5 <timr_wflow+0x1>
    105a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <timr_wflow+0x2>
    105e:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <timr_wflow+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:366
          flowFailure = true;
    1062:	30 92 e8 00 	sts	0x00E8, r3	; 0x8000e8 <flowFailure>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:375
      {
        flowFailure = false;
      }
    }

    if (millis() > timr_wflow + 60000L && flowFailure)
    1066:	d5 da       	rcall	.-2646   	; 0x612 <millis>
    1068:	ab 01       	movw	r20, r22
    106a:	bc 01       	movw	r22, r24
    106c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <timr_wflow>
    1070:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <timr_wflow+0x1>
    1074:	a0 91 e6 00 	lds	r26, 0x00E6	; 0x8000e6 <timr_wflow+0x2>
    1078:	b0 91 e7 00 	lds	r27, 0x00E7	; 0x8000e7 <timr_wflow+0x3>
    107c:	80 5a       	subi	r24, 0xA0	; 160
    107e:	95 41       	sbci	r25, 0x15	; 21
    1080:	af 4f       	sbci	r26, 0xFF	; 255
    1082:	bf 4f       	sbci	r27, 0xFF	; 255
    1084:	84 17       	cp	r24, r20
    1086:	95 07       	cpc	r25, r21
    1088:	a6 07       	cpc	r26, r22
    108a:	b7 07       	cpc	r27, r23
    108c:	20 f4       	brcc	.+8      	; 0x1096 <main+0x6b2>
    108e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <flowFailure>
    1092:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:377
    {
      MotorOff();
    1094:	e0 da       	rcall	.-2624   	; 0x656 <MotorOff()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:380
    }
  }
  if (MotorState == OFF)
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	28 12       	cpse	r2, r24
    109a:	ed c0       	rjmp	.+474    	; 0x1276 <main+0x892>
    109c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <lowOn>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:382
  {
    if (OldLevel != waterLevel && lowOn == false)
    10a0:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <OldLevel>
    10a4:	30 91 e3 00 	lds	r19, 0x00E3	; 0x8000e3 <OldLevel+0x1>
    10a8:	02 17       	cp	r16, r18
    10aa:	13 07       	cpc	r17, r19
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <main+0x6cc>
    10ae:	ac c0       	rjmp	.+344    	; 0x1208 <main+0x824>
    10b0:	81 11       	cpse	r24, r1
    10b2:	ad c0       	rjmp	.+346    	; 0x120e <main+0x82a>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:384
    {
      display.showNumberDec(waterLevel, false);
    10b4:	c8 01       	movw	r24, r16
    10b6:	1b db       	rcall	.-2506   	; 0x6ee <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:385
      OldLevel = waterLevel;
    10b8:	10 93 e3 00 	sts	0x00E3, r17	; 0x8000e3 <OldLevel+0x1>
    10bc:	00 93 e2 00 	sts	0x00E2, r16	; 0x8000e2 <OldLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:405
          disON = false;
        }
      }
    }
    else
      display.showNumberDec(waterLevel, false);
    10c0:	c8 01       	movw	r24, r16
    10c2:	15 db       	rcall	.-2518   	; 0x6ee <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]>
    10c4:	cd c0       	rjmp	.+410    	; 0x1260 <main+0x87c>
rotDisplay():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:182
  if (millis() > tim_progres + 100 && flowFailure)
  {
    tim_progres = millis();
    if (disON == false)
    {
      data[2] = numberB[waterLevel / 10];
    10c6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <waterLevel>
    10ca:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <waterLevel+0x1>
    10ce:	6a e0       	ldi	r22, 0x0A	; 10
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	25 d1       	rcall	.+586    	; 0x131e <__divmodhi4>
    10d4:	6e 58       	subi	r22, 0x8E	; 142
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	fb 01       	movw	r30, r22
    10da:	20 81       	ld	r18, Z
    10dc:	20 93 cb 00 	sts	0x00CB, r18	; 0x8000cb <data+0x2>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:183
      data[3] = numberB[waterLevel % 10];
    10e0:	fc 01       	movw	r30, r24
    10e2:	ee 58       	subi	r30, 0x8E	; 142
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 81       	ld	r24, Z
    10e8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <data+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:184
      disON = true;
    10ec:	30 92 dd 00 	sts	0x00DD, r3	; 0x8000dd <disON>
    10f0:	f6 cd       	rjmp	.-1044   	; 0xcde <main+0x2fa>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:254
    if (digitalRead(LEV5) == 0)
      waterLevel = 100;
    if (digitalRead(DRY) == 0)
      waterflow = true;
    else
      waterflow = false;
    10f2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <waterflow>
    10f6:	30 ce       	rjmp	.-928    	; 0xd58 <main+0x374>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:279
  if (digitalRead(On_Det) == LOW)
  {
    MotorState = ON;
    EEPROM.write(2, MotorState);
  }
  else if (digitalRead(On_Det) == HIGH)
    10f8:	85 e0       	ldi	r24, 0x05	; 5
    10fa:	00 d9       	rcall	.-3584   	; 0x2fc <digitalRead>
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	09 f0       	breq	.+2      	; 0x1102 <main+0x71e>
    1100:	74 ce       	rjmp	.-792    	; 0xdea <main+0x406>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:281
  {
    MotorState = OFF;
    1102:	30 92 fd 00 	sts	0x00FD, r3	; 0x8000fd <MotorState>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:282
    EEPROM.write(2, MotorState);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	48 db       	rcall	.-2416   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:283
    digitalWrite(BUZR, LOW);
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	80 e1       	ldi	r24, 0x10	; 16
    1112:	1c d9       	rcall	.-3528   	; 0x34c <digitalWrite>
    1114:	6a ce       	rjmp	.-812    	; 0xdea <main+0x406>
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:483
        display.showNumberDec(LowLevel);
        xx = true;
      }
      else
      {
        display.clear();
    1116:	0f da       	rcall	.-3042   	; 0x536 <TM1637Display::clear() [clone .constprop.8]>
main():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:484
        xx = false;
    1118:	10 e0       	ldi	r17, 0x00	; 0
    111a:	c6 ce       	rjmp	.-628    	; 0xea8 <main+0x4c4>
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:497
      EEPROM.write(4, LowLevel);
      display.showNumberDec(LowLevel);
      delay(1000);
      break;
    }
    else if (onSw.isPressed() == true)
    111c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <onSw+0x3>
    1120:	88 23       	and	r24, r24
    1122:	c1 f0       	breq	.+48     	; 0x1154 <main+0x770>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
    1124:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <onSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
    1128:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <onSw+0x1>
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:500
      break;
    }
    else if (onSw.isPressed() == true)
    {
      onSw.clearValue();
      LowLevel -= 20;
    112c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LowLevel>
    1130:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <LowLevel+0x1>
    1134:	44 97       	sbiw	r24, 0x14	; 20
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:501
      if (LowLevel < 0)
    1136:	97 fd       	sbrc	r25, 7
    1138:	31 c0       	rjmp	.+98     	; 0x119c <main+0x7b8>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:502
        LowLevel = 80;
    113a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <LowLevel+0x1>
    113e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LowLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:503
      tim_setlow = millis();
    1142:	67 da       	rcall	.-2866   	; 0x612 <millis>
    1144:	60 93 cd 00 	sts	0x00CD, r22	; 0x8000cd <tim_setlow>
    1148:	70 93 ce 00 	sts	0x00CE, r23	; 0x8000ce <tim_setlow+0x1>
    114c:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <tim_setlow+0x2>
    1150:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <tim_setlow+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:506
    }

    offSw.update();
    1154:	8b ea       	ldi	r24, 0xAB	; 171
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	8f da       	rcall	.-2786   	; 0x678 <MySwitch::update()>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:507
    if (offSw.isPressed() == true)
    115a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <offSw+0x3>
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <main+0x780>
    1162:	6a ce       	rjmp	.-812    	; 0xe38 <main+0x454>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
    1164:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <offSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
    1168:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <offSw+0x1>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:80
      Key_Hold = false;
    116c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <offSw+0x2>
setLowLevel():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:510

    offSw.update();
    if (offSw.isPressed() == true)
    {
      offSw.clearValue();
      LowLevel += 20;
    1170:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LowLevel>
    1174:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <LowLevel+0x1>
    1178:	44 96       	adiw	r24, 0x14	; 20
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:511
      if (LowLevel > 80)
    117a:	81 35       	cpi	r24, 0x51	; 81
    117c:	91 05       	cpc	r25, r1
    117e:	8c f4       	brge	.+34     	; 0x11a2 <main+0x7be>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:510

    offSw.update();
    if (offSw.isPressed() == true)
    {
      offSw.clearValue();
      LowLevel += 20;
    1180:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <LowLevel+0x1>
    1184:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LowLevel>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:513
      if (LowLevel > 80)
        LowLevel = 0;
      tim_setlow = millis();
    1188:	44 da       	rcall	.-2936   	; 0x612 <millis>
    118a:	60 93 cd 00 	sts	0x00CD, r22	; 0x8000cd <tim_setlow>
    118e:	70 93 ce 00 	sts	0x00CE, r23	; 0x8000ce <tim_setlow+0x1>
    1192:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <tim_setlow+0x2>
    1196:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <tim_setlow+0x3>
    119a:	4e ce       	rjmp	.-868    	; 0xe38 <main+0x454>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:502
    else if (onSw.isPressed() == true)
    {
      onSw.clearValue();
      LowLevel -= 20;
      if (LowLevel < 0)
        LowLevel = 80;
    119c:	80 e5       	ldi	r24, 0x50	; 80
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	cc cf       	rjmp	.-104    	; 0x113a <main+0x756>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:512
    if (offSw.isPressed() == true)
    {
      offSw.clearValue();
      LowLevel += 20;
      if (LowLevel > 80)
        LowLevel = 0;
    11a2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <LowLevel+0x1>
    11a6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <LowLevel>
    11aa:	ee cf       	rjmp	.-36     	; 0x1188 <main+0x7a4>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:294
    if (onSw.isHold() == true)
    {
      onSw.clearValue();
      setLowLevel();
    }
    else if (onSw.isPressed() == true)
    11ac:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <onSw+0x3>
    11b0:	88 23       	and	r24, r24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <main+0x7d2>
    11b4:	92 ce       	rjmp	.-732    	; 0xeda <main+0x4f6>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
    11b6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <onSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
    11ba:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <onSw+0x1>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:297
      setLowLevel();
    }
    else if (onSw.isPressed() == true)
    {
      onSw.clearValue();
      MotorOn();
    11be:	35 da       	rcall	.-2966   	; 0x62a <MotorOn()>
    11c0:	8c ce       	rjmp	.-744    	; 0xeda <main+0x4f6>
changeAutomode():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:456
    display.setSegments(dis);
    delay(1000);
  }
  else
  {
    AutoMode = 1;
    11c2:	e1 e0       	ldi	r30, 0x01	; 1
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	f0 93 ef 00 	sts	0x00EF, r31	; 0x8000ef <AutoMode+0x1>
    11ca:	e0 93 ee 00 	sts	0x00EE, r30	; 0x8000ee <AutoMode>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:457
    EEPROM.write(3, AutoMode);
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	e4 da       	rcall	.-2616   	; 0x79e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:458
    uint8_t dis[] = {B01110111, B11111000, 63, 55};
    11d6:	89 82       	std	Y+1, r8	; 0x01
    11d8:	9a 82       	std	Y+2, r9	; 0x02
    11da:	ab 82       	std	Y+3, r10	; 0x03
    11dc:	bc 82       	std	Y+4, r11	; 0x04
    11de:	9e ce       	rjmp	.-708    	; 0xf1c <main+0x538>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:306
    if (offSw.isHold() == true)
    {
      offSw.clearValue();
      changeAutomode();
    }
    else if (offSw.isPressed() == true)
    11e0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <offSw+0x3>
    11e4:	88 23       	and	r24, r24
    11e6:	09 f4       	brne	.+2      	; 0x11ea <main+0x806>
    11e8:	9d ce       	rjmp	.-710    	; 0xf24 <main+0x540>
_ZN8MySwitch10clearValueEv():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:78
      //update();
      Serial.println("Switch Init2222");
    }
    void clearValue()
    {
      Key_Up = false;
    11ea:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <offSw+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:79
      Key_Down = false;
    11ee:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <offSw+0x1>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:309
      changeAutomode();
    }
    else if (offSw.isPressed() == true)
    {
      offSw.clearValue();
      MotorOff();
    11f2:	31 da       	rcall	.-2974   	; 0x656 <MotorOff()>
    11f4:	97 ce       	rjmp	.-722    	; 0xf24 <main+0x540>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:324
        highOff = true;
      }
    }
    else
    {
      highOff = false;
    11f6:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <highOff>
    11fa:	b6 ce       	rjmp	.-660    	; 0xf68 <main+0x584>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:348
        lowOn = true;
      }
    }
    else
    {
      lowOn = false;
    11fc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <lowOn>
    1200:	02 cf       	rjmp	.-508    	; 0x1006 <main+0x622>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:371
          flowFailure = true;
        }
      }
      else
      {
        flowFailure = false;
    1202:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <flowFailure>
    1206:	2f cf       	rjmp	.-418    	; 0x1066 <main+0x682>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:387
    if (OldLevel != waterLevel && lowOn == false)
    {
      display.showNumberDec(waterLevel, false);
      OldLevel = waterLevel;
    }
    if (lowOn)
    1208:	88 23       	and	r24, r24
    120a:	09 f4       	brne	.+2      	; 0x120e <main+0x82a>
    120c:	59 cf       	rjmp	.-334    	; 0x10c0 <main+0x6dc>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:389
    {
      if (millis() > tim_progres + 300)
    120e:	01 da       	rcall	.-3070   	; 0x612 <millis>
    1210:	ab 01       	movw	r20, r22
    1212:	bc 01       	movw	r22, r24
    1214:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <tim_progres>
    1218:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <tim_progres+0x1>
    121c:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <tim_progres+0x2>
    1220:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <tim_progres+0x3>
    1224:	84 5d       	subi	r24, 0xD4	; 212
    1226:	9e 4f       	sbci	r25, 0xFE	; 254
    1228:	af 4f       	sbci	r26, 0xFF	; 255
    122a:	bf 4f       	sbci	r27, 0xFF	; 255
    122c:	84 17       	cp	r24, r20
    122e:	95 07       	cpc	r25, r21
    1230:	a6 07       	cpc	r26, r22
    1232:	b7 07       	cpc	r27, r23
    1234:	a8 f4       	brcc	.+42     	; 0x1260 <main+0x87c>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:391
      {
        tim_progres = millis();
    1236:	ed d9       	rcall	.-3110   	; 0x612 <millis>
    1238:	60 93 de 00 	sts	0x00DE, r22	; 0x8000de <tim_progres>
    123c:	70 93 df 00 	sts	0x00DF, r23	; 0x8000df <tim_progres+0x1>
    1240:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <tim_progres+0x2>
    1244:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <tim_progres+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:392
        if (disON == false)
    1248:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <disON>
    124c:	81 11       	cpse	r24, r1
    124e:	05 c0       	rjmp	.+10     	; 0x125a <main+0x876>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:394
        {
          display.showNumberDec(waterLevel, false);
    1250:	c8 01       	movw	r24, r16
    1252:	4d da       	rcall	.-2918   	; 0x6ee <TM1637Display::showNumberDec(int, bool, unsigned char, unsigned char) [clone .constprop.3]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:414
  {
    tim_progres = millis();
    if (disON == false)
    {
      display.setSegments(full);
      disON = true;
    1254:	30 92 dd 00 	sts	0x00DD, r3	; 0x8000dd <disON>
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <main+0x87c>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:399
          display.showNumberDec(waterLevel, false);
          disON = true;
        }
        else
        {
          display.clear();
    125a:	6d d9       	rcall	.-3366   	; 0x536 <TM1637Display::clear() [clone .constprop.8]>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:400
          disON = false;
    125c:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <disON>
serialEventRun():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1260:	e0 e0       	ldi	r30, 0x00	; 0
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	ef 2b       	or	r30, r31
    1266:	09 f4       	brne	.+2      	; 0x126a <main+0x886>
    1268:	49 cc       	rjmp	.-1902   	; 0xafc <main+0x118>
    126a:	f9 d7       	rcall	.+4082   	; 0x225e <__TEXT_REGION_LENGTH__+0x25e>
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <main+0x88e>
    1270:	43 cc       	rjmp	.-1914   	; 0xaf8 <main+0x114>
    1272:	c6 d6       	rcall	.+3468   	; 0x2000 <__TEXT_REGION_LENGTH__>
    1274:	41 cc       	rjmp	.-1918   	; 0xaf8 <main+0x114>
loop():
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:408
    }
    else
      display.showNumberDec(waterLevel, false);
  }

  if (MotorState == ON && highOff && millis() > tim_progres + 300)
    1276:	21 10       	cpse	r2, r1
    1278:	f3 cf       	rjmp	.-26     	; 0x1260 <main+0x87c>
    127a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <highOff>
    127e:	88 23       	and	r24, r24
    1280:	79 f3       	breq	.-34     	; 0x1260 <main+0x87c>
    1282:	c7 d9       	rcall	.-3186   	; 0x612 <millis>
    1284:	ab 01       	movw	r20, r22
    1286:	bc 01       	movw	r22, r24
    1288:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <tim_progres>
    128c:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <tim_progres+0x1>
    1290:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <tim_progres+0x2>
    1294:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <tim_progres+0x3>
    1298:	84 5d       	subi	r24, 0xD4	; 212
    129a:	9e 4f       	sbci	r25, 0xFE	; 254
    129c:	af 4f       	sbci	r26, 0xFF	; 255
    129e:	bf 4f       	sbci	r27, 0xFF	; 255
    12a0:	84 17       	cp	r24, r20
    12a2:	95 07       	cpc	r25, r21
    12a4:	a6 07       	cpc	r26, r22
    12a6:	b7 07       	cpc	r27, r23
    12a8:	d8 f6       	brcc	.-74     	; 0x1260 <main+0x87c>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:410
  {
    tim_progres = millis();
    12aa:	b3 d9       	rcall	.-3226   	; 0x612 <millis>
    12ac:	60 93 de 00 	sts	0x00DE, r22	; 0x8000de <tim_progres>
    12b0:	70 93 df 00 	sts	0x00DF, r23	; 0x8000df <tim_progres+0x1>
    12b4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <tim_progres+0x2>
    12b8:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <tim_progres+0x3>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:411
    if (disON == false)
    12bc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <disON>
    12c0:	81 11       	cpse	r24, r1
    12c2:	cb cf       	rjmp	.-106    	; 0x125a <main+0x876>
e:\Arduino\Arduino Git\Water_Level_7Segment/Water_Level_7Segment.ino:413
    {
      display.setSegments(full);
    12c4:	80 e6       	ldi	r24, 0x60	; 96
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	16 d9       	rcall	.-3540   	; 0x4f6 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.12]>
    12ca:	c4 cf       	rjmp	.-120    	; 0x1254 <main+0x870>

000012cc <eeprom_read_byte>:
eeprom_read_byte():
    12cc:	e1 99       	sbic	0x1c, 1	; 28
    12ce:	fe cf       	rjmp	.-4      	; 0x12cc <eeprom_read_byte>
    12d0:	9f bb       	out	0x1f, r25	; 31
    12d2:	8e bb       	out	0x1e, r24	; 30
    12d4:	e0 9a       	sbi	0x1c, 0	; 28
    12d6:	99 27       	eor	r25, r25
    12d8:	8d b3       	in	r24, 0x1d	; 29
    12da:	08 95       	ret

000012dc <eeprom_write_byte>:
eeprom_write_byte():
    12dc:	26 2f       	mov	r18, r22

000012de <eeprom_write_r18>:
    12de:	e1 99       	sbic	0x1c, 1	; 28
    12e0:	fe cf       	rjmp	.-4      	; 0x12de <eeprom_write_r18>
    12e2:	9f bb       	out	0x1f, r25	; 31
    12e4:	8e bb       	out	0x1e, r24	; 30
    12e6:	2d bb       	out	0x1d, r18	; 29
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	e2 9a       	sbi	0x1c, 2	; 28
    12ee:	e1 9a       	sbi	0x1c, 1	; 28
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	08 95       	ret

000012f6 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    12f6:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    12f8:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    12fa:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    12fc:	07 c0       	rjmp	.+14     	; 0x130c <__udivmodhi4_ep>

000012fe <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    12fe:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1300:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1302:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1304:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1306:	10 f0       	brcs	.+4      	; 0x130c <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1308:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    130a:	b7 0b       	sbc	r27, r23

0000130c <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    130c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    130e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1310:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1312:	a9 f7       	brne	.-22     	; 0x12fe <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1314:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1316:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1318:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    131a:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    131c:	08 95       	ret

0000131e <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    131e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1320:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1322:	16 f4       	brtc	.+4      	; 0x1328 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    1324:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1326:	06 d0       	rcall	.+12     	; 0x1334 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1328:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    132a:	08 d0       	rcall	.+16     	; 0x133c <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    132c:	e4 df       	rcall	.-56     	; 0x12f6 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    132e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1330:	05 d0       	rcall	.+10     	; 0x133c <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1332:	3e f4       	brtc	.+14     	; 0x1342 <__divmodhi4_exit>

00001334 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1334:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1336:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    133a:	08 95       	ret

0000133c <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    133c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    133e:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1340:	7f 4f       	sbci	r23, 0xFF	; 255

00001342 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1342:	08 95       	ret

00001344 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1344:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1346:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1348:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    134a:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    134c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    134e:	09 94       	ijmp

00001350 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1350:	f8 94       	cli

00001352 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1352:	ff cf       	rjmp	.-2      	; 0x1352 <__stop_program>
