
e:\Arduino\Arduino Git\ChantBellV3.2\build/ChantBellV3.2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__dtors_end>
       4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       c:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__vector_3>
      10:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__vector_3>
      14:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__vector_3>
      18:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      20:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      24:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      28:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      2c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      30:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      34:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      38:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      3c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      40:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__vector_16>
      44:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      48:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      4c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      50:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      54:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      58:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      5c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      60:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__vector_24>
      64:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 56       	subi	r20, 0x65	; 101
      6a:	45 20       	and	r4, r5
      6c:	53 4f       	sbci	r21, 0xF3	; 243
      6e:	4e 47       	sbci	r20, 0x7E	; 126
      70:	20 4e       	sbci	r18, 0xE0	; 224
      72:	6f 2e       	mov	r6, r31
	...

00000075 <sampleMenu_2_7_3>:
      75:	45 56 45 20 53 4f 4e 47 20 54 49 4d 45 00           EVE SONG TIME.

00000083 <sampleMenu_2_7_2>:
      83:	4d 4f 52 20 53 4f 4e 47 20 4e 6f 2e 00              MOR SONG No..

00000090 <sampleMenu_2_7_1>:
      90:	4d 4f 52 20 53 4f 4e 47 20 54 49 4d 45 00           MOR SONG TIME.

0000009e <sampleMenu_2_6_2>:
      9e:	50 4c 41 59 00                                      PLAY.

000000a3 <sampleMenu_2_6_1>:
      a3:	53 45 4c 45 43 54 20 54 49 4d 45 00                 SELECT TIME.

000000af <sampleMenu_4_4>:
      af:	50 4c 59 52 20 45 56 45 20 44 55 52 00              PLYR EVE DUR.

000000bc <sampleMenu_4_3>:
      bc:	50 4c 59 52 20 45 56 45 20 4f 4e 20 54 49 4d 00     PLYR EVE ON TIM.

000000cc <sampleMenu_4_2>:
      cc:	50 4c 59 52 20 4d 4f 52 20 44 55 52 00              PLYR MOR DUR.

000000d9 <sampleMenu_4_1>:
      d9:	50 4c 59 52 20 4d 4f 52 20 4f 4e 20 54 49 4d 00     PLYR MOR ON TIM.

000000e9 <sampleMenu_3_2>:
      e9:	4c 49 47 48 54 20 4f 46 46 20 54 49 4d 45 00        LIGHT OFF TIME.

000000f8 <sampleMenu_3_1>:
      f8:	4c 49 47 48 54 20 4f 4e 20 54 49 4d 45 00           LIGHT ON TIME.

00000106 <sampleMenu_List_2_7>:
     106:	0f 90 00 00 00 00 11 83 00 00 00 00 10 75 00 00     .............u..
     116:	00 00 12 68 00 00 00 00 00 7f 01 00 00 00           ...h..........

00000124 <sampleMenu_2_7>:
     124:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

00000131 <sampleMenu_List_2_6>:
     131:	0c a3 00 00 00 00 0d 9e 00 00 00 00 00 7f 01 00     ................
	...

00000143 <sampleMenu_2_6>:
     143:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

0000014d <sampleMenu_2_8>:
     14d:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000159 <sampleMenu_2_5>:
     159:	56 4f 4c 55 4d 45 00                                VOLUME.

00000160 <sampleMenu_2_3>:
     160:	53 4f 4e 47 20 43 4f 55 4e 54 00                    SONG COUNT.

0000016b <sampleMenu_2_2>:
     16b:	45 4e 44 20 54 49 4d 45 00                          END TIME.

00000174 <sampleMenu_2_1>:
     174:	53 54 41 52 54 20 54 49 4d 45 00                    START TIME.

0000017f <sampleMenu_back>:
     17f:	42 41 43 4b 00                                      BACK.

00000184 <sampleMenu_1_2>:
     184:	53 45 54 20 54 49 4d 45 00                          SET TIME.

0000018d <sampleMenu_1_1>:
     18d:	53 45 54 20 44 41 54 45 00                          SET DATE.

00000196 <configMenu_2>:
     196:	53 45 54 20 59 45 41 52 00                          SET YEAR.

0000019f <configMenu_1>:
     19f:	53 45 54 20 53 45 52 49 41 4c 00                    SET SERIAL.

000001aa <sampleMenu_List_5>:
     1aa:	05 74 01 00 00 00 06 6b 01 00 00 00 0b 43 01 31     .t.....k.....C.1
     1ba:	01 03 09 59 01 00 00 00 0a 4d 01 00 00 00 00 7f     ...Y.....M......
     1ca:	01 00 00 00                                         ....

000001ce <sampleMenu_5>:
     1ce:	43 4c 4f 43 4b 20 53 45 54 54 49 4e 47 00           CLOCK SETTING.

000001dc <sampleMenu_exit>:
     1dc:	45 58 49 54 00                                      EXIT.

000001e1 <sampleMenu_6>:
     1e1:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

000001ef <sampleMenu_List_4>:
     1ef:	18 d9 00 00 00 00 19 cc 00 00 00 00 1a bc 00 00     ................
     1ff:	00 00 1b af 00 00 00 00 00 7f 01 00 00 00           ..............

0000020d <sampleMenu_4>:
     20d:	50 4c 41 59 45 52 20 53 45 54 54 49 4e 47 00        PLAYER SETTING.

0000021c <sampleMenu_List_3>:
     21c:	15 f8 00 00 00 00 16 e9 00 00 00 00 00 7f 01 00     ................
	...

0000022e <sampleMenu_3>:
     22e:	4c 49 47 48 54 53 20 53 45 54 54 49 4e 47 00        LIGHTS SETTING.

0000023d <sampleMenu_List_2>:
     23d:	05 74 01 00 00 00 06 6b 01 00 00 00 07 60 01 00     .t.....k.....`..
     24d:	00 00 09 59 01 00 00 00 0a 4d 01 00 00 00 0b 43     ...Y.....M.....C
     25d:	01 31 01 03 0e 24 01 06 01 05 00 7f 01 00 00 00     .1...$..........

0000026d <sampleMenu_2>:
     26d:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

0000027a <sampleMenu_List_1>:
     27a:	02 8d 01 00 00 00 03 84 01 00 00 00 00 7f 01 00     ................
	...

0000028c <sampleMenu_1>:
     28c:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

0000029a <port_to_mode_PGM>:
     29a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002a4 <digital_pin_to_timer_PGM>:
     2a4:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     2b4:	00 00 00 00 00 00 00                                .......

000002bb <configMenu_Root>:
     2bb:	1e 9f 01 00 00 00 1d 96 01 00 00 00 00 dc 01 00     ................
	...

000002cd <normalMenu_Root>:
     2cd:	14 2e 02 1c 02 03 17 0d 02 ef 01 05 01 8c 02 7a     ...............z
     2dd:	02 03 1c ce 01 aa 01 06 00 dc 01 00 00 00           ..............

000002eb <serviceMenu_Root>:
     2eb:	01 8c 02 7a 02 03 04 6d 02 3d 02 08 14 2e 02 1c     ...z...m.=......
     2fb:	02 03 17 0d 02 ef 01 05 13 e1 01 00 00 00 00 dc     ................
     30b:	01 00 00 00                                         ....

0000030f <setup::__c>:
     30f:	45 52 52 20 30 33 00                                ERR 03.

00000316 <setup::__c>:
     316:	45 52 52 20 30 32 00                                ERR 02.

0000031d <setup::__c>:
     31d:	45 52 52 20 30 31 00                                ERR 01.

00000324 <setup::__c>:
     324:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

00000335 <setup::__c>:
     335:	51 54 52 4f 4e 00                                   QTRON.

0000033b <processMenuCommand(unsigned char)::__c>:
     33b:	20 20 00                                              .

0000033e <processMenuCommand(unsigned char)::__c>:
     33e:	20 20 00                                              .

00000341 <loop::__c>:
     341:	20 50 4c 41 59 45 52 20 4d 4f 44 45 20 4f 4e 20      PLAYER MODE ON 
	...

00000352 <loop::__c>:
     352:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

00000363 <loop::__c>:
     363:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 46 46 20      AUTO LIGHT OFF 
	...

00000374 <loop::__c>:
     374:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 4e 20 20      AUTO LIGHT ON  
	...

00000385 <loop::__c>:
     385:	20 41 55 54 4f 20 50 4c 41 59 20 4f 46 46 20 20      AUTO PLAY OFF  
	...

00000396 <loop::__c>:
     396:	20 20 41 55 54 4f 20 50 4c 41 59 20 4f 4e 20 20       AUTO PLAY ON  
	...

000003a7 <daysInMonth>:
     3a7:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000003b2 <port_to_input_PGM>:
     3b2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003bc <port_to_output_PGM>:
     3bc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003c6 <digital_pin_to_port_PGM>:
     3c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3d6:	03 03 03 03 02 02 03                                .......

000003dd <digital_pin_to_bit_mask_PGM>:
     3dd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3ed:	04 08 10 20 40 80 40                                ... @.@

000003f4 <__ctors_start>:
__ctors_start():
     3f4:	7e 14       	cp	r7, r14

000003f6 <__ctors_end>:
__dtors_start():
     3f6:	4e 2a       	or	r4, r30

000003f8 <__dtors_end>:
__dtors_end():
     3f8:	11 24       	eor	r1, r1
     3fa:	1f be       	out	0x3f, r1	; 63
     3fc:	cf ef       	ldi	r28, 0xFF	; 255
     3fe:	d8 e0       	ldi	r29, 0x08	; 8
     400:	de bf       	out	0x3e, r29	; 62
     402:	cd bf       	out	0x3d, r28	; 61

00000404 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     404:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     406:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     408:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     40a:	ec ef       	ldi	r30, 0xFC	; 252
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     40c:	fc e5       	ldi	r31, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     410:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     412:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     414:	ae 34       	cpi	r26, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     416:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     418:	d9 f7       	brne	.-10     	; 0x410 <__do_copy_data+0xc>

0000041a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     41a:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     41c:	ae e4       	ldi	r26, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     41e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     420:	01 c0       	rjmp	.+2      	; 0x424 <.do_clear_bss_start>

00000422 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     422:	1d 92       	st	X+, r1

00000424 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     424:	a6 30       	cpi	r26, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     426:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     428:	e1 f7       	brne	.-8      	; 0x422 <.do_clear_bss_loop>

0000042a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     42a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     42c:	cb ef       	ldi	r28, 0xFB	; 251
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     42e:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     430:	04 c0       	rjmp	.+8      	; 0x43a <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     432:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     434:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     436:	0e 94 4f 2c 	call	0x589e	; 0x589e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     43a:	ca 3f       	cpi	r28, 0xFA	; 250
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     43c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     43e:	c9 f7       	brne	.-14     	; 0x432 <__do_global_ctors+0x8>
     440:	0e 94 93 15 	call	0x2b26	; 0x2b26 <main>
     444:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__do_global_dtors>

00000448 <__bad_interrupt>:
__vector_22():
     448:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044c <MenuManager::currentItemHasChildren() [clone .constprop.103]>:
_ZN11MenuManager22currentItemHasChildrenEv.constprop.103():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     44c:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <Menu1+0x6>
     450:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <Menu1+0x3>
     454:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <Menu1+0x4>
     458:	96 e0       	ldi	r25, 0x06	; 6
     45a:	89 9f       	mul	r24, r25
     45c:	e0 0d       	add	r30, r0
     45e:	f1 1d       	adc	r31, r1
     460:	11 24       	eor	r1, r1
     462:	35 96       	adiw	r30, 0x05	; 5
     464:	e4 91       	lpm	r30, Z
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	e1 11       	cpse	r30, r1
     46a:	01 c0       	rjmp	.+2      	; 0x46e <MenuManager::currentItemHasChildren() [clone .constprop.103]+0x22>
     46c:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:116
}
     46e:	08 95       	ret

00000470 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>:
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:173
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     470:	98 2f       	mov	r25, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     472:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     478:	21 32       	cpi	r18, 0x21	; 33
     47a:	08 f0       	brcs	.+2      	; 0x47e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
     47c:	43 c0       	rjmp	.+134    	; 0x504 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     47e:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_state>
     482:	81 11       	cpse	r24, r1
     484:	fc cf       	rjmp	.-8      	; 0x47e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     486:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     48a:	32 e0       	ldi	r19, 0x02	; 2
     48c:	30 93 8b 03 	sts	0x038B, r19	; 0x80038b <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     490:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     494:	9f ef       	ldi	r25, 0xFF	; 255
     496:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     49a:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     49e:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <twi_masterBufferLength>
     4a2:	ae e8       	ldi	r26, 0x8E	; 142
     4a4:	b3 e0       	ldi	r27, 0x03	; 3
     4a6:	e7 e6       	ldi	r30, 0x67	; 103
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     4aa:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     4ac:	29 13       	cpse	r18, r25
     4ae:	31 c0       	rjmp	.+98     	; 0x512 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xa2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     4b0:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     4b4:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <twi_slarw>
     4b8:	88 0f       	add	r24, r24
     4ba:	89 2b       	or	r24, r25
     4bc:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     4c0:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <twi_inRepStart>
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	49 f5       	brne	.+82     	; 0x51a <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     4c8:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     4cc:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <twi_slarw>
     4d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     4d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     4d8:	83 fd       	sbrc	r24, 3
     4da:	f8 cf       	rjmp	.-16     	; 0x4cc <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     4dc:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     4de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     4e2:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_state>
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	e1 f3       	breq	.-8      	; 0x4e2 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     4ea:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_error>
     4ee:	8f 3f       	cpi	r24, 0xFF	; 255
     4f0:	b1 f0       	breq	.+44     	; 0x51e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     4f2:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_error>
     4f6:	80 32       	cpi	r24, 0x20	; 32
     4f8:	a1 f0       	breq	.+40     	; 0x522 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     4fa:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_error>
     4fe:	80 33       	cpi	r24, 0x30	; 48
     500:	91 f0       	breq	.+36     	; 0x526 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xb6>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     502:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     504:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     508:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     50c:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:183
  return ret;
}
     510:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     512:	3d 91       	ld	r19, X+
     514:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     516:	9f 5f       	subi	r25, 0xFF	; 255
     518:	c9 cf       	rjmp	.-110    	; 0x4ac <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     51a:	85 ee       	ldi	r24, 0xE5	; 229
     51c:	e0 cf       	rjmp	.-64     	; 0x4de <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x6e>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	f1 cf       	rjmp	.-30     	; 0x504 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	ef cf       	rjmp	.-34     	; 0x504 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	ed cf       	rjmp	.-38     	; 0x504 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>

0000052a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>:
_ZN11MenuManager19getCurrentItemCmdIdEv.constprop.86():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     52a:	eb e3       	ldi	r30, 0x3B	; 59
     52c:	f4 e0       	ldi	r31, 0x04	; 4
     52e:	86 81       	ldd	r24, Z+6	; 0x06
     530:	03 80       	ldd	r0, Z+3	; 0x03
     532:	f4 81       	ldd	r31, Z+4	; 0x04
     534:	e0 2d       	mov	r30, r0
     536:	96 e0       	ldi	r25, 0x06	; 6
     538:	89 9f       	mul	r24, r25
     53a:	e0 0d       	add	r30, r0
     53c:	f1 1d       	adc	r31, r1
     53e:	11 24       	eor	r1, r1
     540:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:60
}
     542:	08 95       	ret

00000544 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     544:	08 95       	ret

00000546 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     546:	08 95       	ret

00000548 <DateTime::dayOfTheWeek() const [clone .constprop.19]>:
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:554
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     548:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <bell+0x1>
     54c:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <bell>
     550:	49 2f       	mov	r20, r25
     552:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:110
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     554:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <bell+0x2>
     558:	28 2f       	mov	r18, r24
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	e7 ea       	ldi	r30, 0xA7	; 167
     55e:	f3 e0       	ldi	r31, 0x03	; 3
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
  for (uint8_t i = 1; i < m; ++i)
     560:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     562:	86 17       	cp	r24, r22
     564:	30 f4       	brcc	.+12     	; 0x572 <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:112
    days += pgm_read_byte(daysInMonth + i - 1);
     566:	74 91       	lpm	r23, Z
     568:	27 0f       	add	r18, r23
     56a:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	31 96       	adiw	r30, 0x01	; 1
     570:	f8 cf       	rjmp	.-16     	; 0x562 <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:113
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     572:	63 30       	cpi	r22, 0x03	; 3
     574:	20 f0       	brcs	.+8      	; 0x57e <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x36>
     576:	93 70       	andi	r25, 0x03	; 3
     578:	11 f4       	brne	.+4      	; 0x57e <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:114
    ++days;
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  return days + 365 * y + (y + 3) / 4 - 1;
     57e:	6d e6       	ldi	r22, 0x6D	; 109
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	46 9f       	mul	r20, r22
     584:	c0 01       	movw	r24, r0
     586:	47 9f       	mul	r20, r23
     588:	90 0d       	add	r25, r0
     58a:	56 9f       	mul	r21, r22
     58c:	90 0d       	add	r25, r0
     58e:	11 24       	eor	r1, r1
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     590:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     592:	4d 5f       	subi	r20, 0xFD	; 253
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	56 95       	lsr	r21
     598:	47 95       	ror	r20
     59a:	56 95       	lsr	r21
     59c:	47 95       	ror	r20
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     59e:	84 0f       	add	r24, r20
     5a0:	95 1f       	adc	r25, r21
     5a2:	82 0f       	add	r24, r18
     5a4:	93 1f       	adc	r25, r19
     5a6:	67 e0       	ldi	r22, 0x07	; 7
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 27 2c 	call	0x584e	; 0x584e <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:556
}
     5ae:	08 95       	ret

000005b0 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	6c 01       	movw	r12, r24
     5c6:	7b 01       	movw	r14, r22
     5c8:	8b 01       	movw	r16, r22
     5ca:	04 0f       	add	r16, r20
     5cc:	15 1f       	adc	r17, r21
     5ce:	eb 01       	movw	r28, r22
     5d0:	5e 01       	movw	r10, r28
     5d2:	ae 18       	sub	r10, r14
     5d4:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     5d6:	c0 17       	cp	r28, r16
     5d8:	d1 07       	cpc	r29, r17
     5da:	59 f0       	breq	.+22     	; 0x5f2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     5dc:	69 91       	ld	r22, Y+
     5de:	d6 01       	movw	r26, r12
     5e0:	ed 91       	ld	r30, X+
     5e2:	fc 91       	ld	r31, X
     5e4:	01 90       	ld	r0, Z+
     5e6:	f0 81       	ld	r31, Z
     5e8:	e0 2d       	mov	r30, r0
     5ea:	c6 01       	movw	r24, r12
     5ec:	09 95       	icall
     5ee:	89 2b       	or	r24, r25
     5f0:	79 f7       	brne	.-34     	; 0x5d0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5f2:	c5 01       	movw	r24, r10
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	08 95       	ret

0000060a <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	81 f0       	breq	.+32     	; 0x62e <turnOffPWM+0x24>
     60e:	28 f4       	brcc	.+10     	; 0x61a <turnOffPWM+0x10>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	e9 f0       	breq	.+58     	; 0x64e <turnOffPWM+0x44>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	f9 f0       	breq	.+62     	; 0x656 <turnOffPWM+0x4c>
     618:	08 95       	ret
     61a:	88 30       	cpi	r24, 0x08	; 8
     61c:	71 f0       	breq	.+28     	; 0x63a <turnOffPWM+0x30>
     61e:	89 30       	cpi	r24, 0x09	; 9
     620:	91 f0       	breq	.+36     	; 0x646 <turnOffPWM+0x3c>
     622:	85 30       	cpi	r24, 0x05	; 5
     624:	b9 f4       	brne	.+46     	; 0x654 <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     626:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     62a:	8f 7d       	andi	r24, 0xDF	; 223
     62c:	03 c0       	rjmp	.+6      	; 0x634 <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     62e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     632:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     634:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     638:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     63a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     63e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     640:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     644:	08 95       	ret
     646:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     64a:	8f 7d       	andi	r24, 0xDF	; 223
     64c:	f9 cf       	rjmp	.-14     	; 0x640 <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     64e:	84 b5       	in	r24, 0x24	; 36
     650:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     652:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     654:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     656:	84 b5       	in	r24, 0x24	; 36
     658:	8f 7d       	andi	r24, 0xDF	; 223
     65a:	fb cf       	rjmp	.-10     	; 0x652 <turnOffPWM+0x48>

0000065c <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	ec 55       	subi	r30, 0x5C	; 92
     668:	fd 4f       	sbci	r31, 0xFD	; 253
     66a:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     66c:	f9 01       	movw	r30, r18
     66e:	e3 52       	subi	r30, 0x23	; 35
     670:	fc 4f       	sbci	r31, 0xFC	; 252
     672:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     674:	f9 01       	movw	r30, r18
     676:	ea 53       	subi	r30, 0x3A	; 58
     678:	fc 4f       	sbci	r31, 0xFC	; 252
     67a:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     67c:	cc 23       	and	r28, r28
     67e:	a1 f0       	breq	.+40     	; 0x6a8 <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     680:	81 11       	cpse	r24, r1
     682:	0e 94 05 03 	call	0x60a	; 0x60a <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     686:	ec 2f       	mov	r30, r28
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 54       	subi	r30, 0x4E	; 78
     690:	fc 4f       	sbci	r31, 0xFC	; 252
     692:	a5 91       	lpm	r26, Z+
     694:	b4 91       	lpm	r27, Z
     696:	ec 91       	ld	r30, X
     698:	ed 23       	and	r30, r29
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	09 f4       	brne	.+2      	; 0x6a2 <digitalRead+0x46>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fa cf       	rjmp	.-12     	; 0x6a2 <digitalRead+0x46>

000006ae <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	ec 55       	subi	r30, 0x5C	; 92
     6bc:	fd 4f       	sbci	r31, 0xFD	; 253
     6be:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     6c0:	f9 01       	movw	r30, r18
     6c2:	e3 52       	subi	r30, 0x23	; 35
     6c4:	fc 4f       	sbci	r31, 0xFC	; 252
     6c6:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     6c8:	f9 01       	movw	r30, r18
     6ca:	ea 53       	subi	r30, 0x3A	; 58
     6cc:	fc 4f       	sbci	r31, 0xFC	; 252
     6ce:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     6d0:	cc 23       	and	r28, r28
     6d2:	a9 f0       	breq	.+42     	; 0x6fe <digitalWrite+0x50>
     6d4:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6d6:	81 11       	cpse	r24, r1
     6d8:	0e 94 05 03 	call	0x60a	; 0x60a <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     6dc:	ec 2f       	mov	r30, r28
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	e4 54       	subi	r30, 0x44	; 68
     6e6:	fc 4f       	sbci	r31, 0xFC	; 252
     6e8:	a5 91       	lpm	r26, Z+
     6ea:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     6ec:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     6ee:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     6f0:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     6f2:	11 11       	cpse	r17, r1
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     6f6:	d0 95       	com	r29
     6f8:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     6fa:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     6fc:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     706:	de 2b       	or	r29, r30
     708:	f8 cf       	rjmp	.-16     	; 0x6fa <digitalWrite+0x4c>

0000070a <TwoWire::begin() [clone .constprop.48]>:
_ZN7TwoWire5beginEv.constprop.48():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     70a:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     70e:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     712:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     716:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     71a:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     724:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	82 e1       	ldi	r24, 0x12	; 18
     72c:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	83 e1       	ldi	r24, 0x13	; 19
     734:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     738:	e9 eb       	ldi	r30, 0xB9	; 185
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	8e 7f       	andi	r24, 0xFE	; 254
     740:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     742:	80 81       	ld	r24, Z
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     748:	88 e4       	ldi	r24, 0x48	; 72
     74a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     74e:	85 e4       	ldi	r24, 0x45	; 69
     750:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     754:	82 ea       	ldi	r24, 0xA2	; 162
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <twi_onSlaveTransmit+0x1>
     75c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     760:	83 ea       	ldi	r24, 0xA3	; 163
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <twi_onSlaveReceive+0x1>
     768:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.48():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     76c:	08 95       	ret

0000076e <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	fc 01       	movw	r30, r24
     776:	e3 52       	subi	r30, 0x23	; 35
     778:	fc 4f       	sbci	r31, 0xFC	; 252
     77a:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     77c:	8a 53       	subi	r24, 0x3A	; 58
     77e:	9c 4f       	sbci	r25, 0xFC	; 252
     780:	fc 01       	movw	r30, r24
     782:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     784:	88 23       	and	r24, r24
     786:	c9 f0       	breq	.+50     	; 0x7ba <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	fc 01       	movw	r30, r24
     790:	e6 56       	subi	r30, 0x66	; 102
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	a5 91       	lpm	r26, Z+
     796:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     798:	fc 01       	movw	r30, r24
     79a:	e4 54       	subi	r30, 0x44	; 68
     79c:	fc 4f       	sbci	r31, 0xFC	; 252
     79e:	c5 91       	lpm	r28, Z+
     7a0:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     7a2:	61 11       	cpse	r22, r1
     7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     7a6:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     7a8:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     7aa:	8c 91       	ld	r24, X
     7ac:	20 95       	com	r18
     7ae:	82 23       	and	r24, r18
     7b0:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     7b2:	88 81       	ld	r24, Y
     7b4:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     7b6:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     7b8:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     7c0:	62 30       	cpi	r22, 0x02	; 2
     7c2:	51 f4       	brne	.+20     	; 0x7d8 <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     7c4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     7c6:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     7c8:	3c 91       	ld	r19, X
     7ca:	82 2f       	mov	r24, r18
     7cc:	80 95       	com	r24
     7ce:	83 23       	and	r24, r19
     7d0:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     7d2:	e8 81       	ld	r30, Y
     7d4:	2e 2b       	or	r18, r30
     7d6:	ef cf       	rjmp	.-34     	; 0x7b6 <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     7d8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     7da:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     7dc:	ec 91       	ld	r30, X
     7de:	2e 2b       	or	r18, r30
     7e0:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     7e2:	8f bf       	out	0x3f, r24	; 63
     7e4:	ea cf       	rjmp	.-44     	; 0x7ba <pinMode+0x4c>

000007e6 <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	39 f0       	breq	.+14     	; 0x7fa <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     7f4:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     7fa:	08 95       	ret

000007fc <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     7fc:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     7fe:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     800:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <timer0_overflow_count>
     804:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x1>
     808:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x2>
     80c:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     810:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     812:	a8 9b       	sbis	0x15, 0	; 21
     814:	05 c0       	rjmp	.+10     	; 0x820 <micros+0x24>
     816:	2f 3f       	cpi	r18, 0xFF	; 255
     818:	19 f0       	breq	.+6      	; 0x820 <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	a1 1d       	adc	r26, r1
     81e:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     820:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     822:	ba 2f       	mov	r27, r26
     824:	a9 2f       	mov	r26, r25
     826:	98 2f       	mov	r25, r24
     828:	88 27       	eor	r24, r24
     82a:	bc 01       	movw	r22, r24
     82c:	cd 01       	movw	r24, r26
     82e:	62 0f       	add	r22, r18
     830:	71 1d       	adc	r23, r1
     832:	81 1d       	adc	r24, r1
     834:	91 1d       	adc	r25, r1
     836:	42 e0       	ldi	r20, 0x02	; 2
     838:	66 0f       	add	r22, r22
     83a:	77 1f       	adc	r23, r23
     83c:	88 1f       	adc	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	4a 95       	dec	r20
     842:	d1 f7       	brne	.-12     	; 0x838 <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     844:	08 95       	ret

00000846 <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     846:	8f 92       	push	r8
     848:	9f 92       	push	r9
     84a:	af 92       	push	r10
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     85a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <micros>
     85e:	4b 01       	movw	r8, r22
     860:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     862:	c1 14       	cp	r12, r1
     864:	d1 04       	cpc	r13, r1
     866:	e1 04       	cpc	r14, r1
     868:	f1 04       	cpc	r15, r1
     86a:	b9 f0       	breq	.+46     	; 0x89a <delay+0x54>
     86c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <micros>
     870:	68 19       	sub	r22, r8
     872:	79 09       	sbc	r23, r9
     874:	8a 09       	sbc	r24, r10
     876:	9b 09       	sbc	r25, r11
     878:	68 3e       	cpi	r22, 0xE8	; 232
     87a:	73 40       	sbci	r23, 0x03	; 3
     87c:	81 05       	cpc	r24, r1
     87e:	91 05       	cpc	r25, r1
     880:	80 f3       	brcs	.-32     	; 0x862 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	c2 1a       	sub	r12, r18
     886:	d1 08       	sbc	r13, r1
     888:	e1 08       	sbc	r14, r1
     88a:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     88c:	88 ee       	ldi	r24, 0xE8	; 232
     88e:	88 0e       	add	r8, r24
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	98 1e       	adc	r9, r24
     894:	a1 1c       	adc	r10, r1
     896:	b1 1c       	adc	r11, r1
     898:	e4 cf       	rjmp	.-56     	; 0x862 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	8f 90       	pop	r8
     8aa:	08 95       	ret

000008ac <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     8ac:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     8ae:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     8b0:	60 91 d3 02 	lds	r22, 0x02D3	; 0x8002d3 <timer0_millis>
     8b4:	70 91 d4 02 	lds	r23, 0x02D4	; 0x8002d4 <timer0_millis+0x1>
     8b8:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timer0_millis+0x2>
     8bc:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     8c0:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     8c2:	08 95       	ret

000008c4 <DFRobotDFPlayerMini::available() [clone .constprop.71]>:
_ZN19DFRobotDFPlayerMini9availableEv.constprop.71():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     8c8:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <myDFPlayer>
     8cc:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <myDFPlayer+0x1>
     8d0:	dc 01       	movw	r26, r24
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	00 84       	ldd	r0, Z+8	; 0x08
     8d8:	f1 85       	ldd	r31, Z+9	; 0x09
     8da:	e0 2d       	mov	r30, r0
     8dc:	09 95       	icall
     8de:	89 2b       	or	r24, r25
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <DFRobotDFPlayerMini::available() [clone .constprop.71]+0x20>
     8e2:	d7 c0       	rjmp	.+430    	; 0xa92 <__stack+0x193>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	cb 01       	movw	r24, r22
     8ea:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     8ee:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <myDFPlayer+0x1e>
     8f2:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <myDFPlayer>
     8f6:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     8fa:	dc 01       	movw	r26, r24
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	02 84       	ldd	r0, Z+10	; 0x0a
     902:	f3 85       	ldd	r31, Z+11	; 0x0b
     904:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     906:	21 11       	cpse	r18, r1
     908:	0b c0       	rjmp	.+22     	; 0x920 <__stack+0x21>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     90a:	09 95       	icall
     90c:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     910:	8e 37       	cpi	r24, 0x7E	; 126
     912:	d1 f6       	brne	.-76     	; 0x8c8 <DFRobotDFPlayerMini::available() [clone .constprop.71]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     914:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <myDFPlayer+0x1e>
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <myDFPlayer+0x1e>
     91e:	d4 cf       	rjmp	.-88     	; 0x8c8 <DFRobotDFPlayerMini::available() [clone .constprop.71]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     920:	09 95       	icall
     922:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <myDFPlayer+0x1e>
     926:	e9 2f       	mov	r30, r25
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	e3 54       	subi	r30, 0x43	; 67
     92c:	fb 4f       	sbci	r31, 0xFB	; 251
     92e:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     930:	92 30       	cpi	r25, 0x02	; 2
     932:	b9 f0       	breq	.+46     	; 0x962 <__stack+0x63>
     934:	99 30       	cpi	r25, 0x09	; 9
     936:	d9 f0       	breq	.+54     	; 0x96e <__stack+0x6f>
     938:	91 30       	cpi	r25, 0x01	; 1
     93a:	a9 f4       	brne	.+42     	; 0x966 <__stack+0x67>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     93c:	8f 3f       	cpi	r24, 0xFF	; 255
     93e:	99 f0       	breq	.+38     	; 0x966 <__stack+0x67>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     940:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     94a:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <myDFPlayer+0x23>
     94e:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     952:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     956:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <myDFPlayer+0x25>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.71():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     95a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     962:	86 30       	cpi	r24, 0x06	; 6
     964:	69 f7       	brne	.-38     	; 0x940 <__stack+0x41>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     966:	9f 5f       	subi	r25, 0xFF	; 255
     968:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <myDFPlayer+0x1e>
     96c:	ad cf       	rjmp	.-166    	; 0x8c8 <DFRobotDFPlayerMini::available() [clone .constprop.71]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     96e:	8f 3e       	cpi	r24, 0xEF	; 239
     970:	39 f7       	brne	.-50     	; 0x940 <__stack+0x41>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     972:	20 91 c9 04 	lds	r18, 0x04C9	; 0x8004c9 <myDFPlayer+0xc>
     976:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <myDFPlayer+0xb>
     97a:	28 0f       	add	r18, r24
     97c:	33 27       	eor	r19, r19
     97e:	33 1f       	adc	r19, r19
     980:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <myDFPlayer+0xd>
     984:	c9 01       	movw	r24, r18
     986:	8e 0f       	add	r24, r30
     988:	91 1d       	adc	r25, r1
     98a:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <myDFPlayer+0xe>
     98e:	28 0f       	add	r18, r24
     990:	39 2f       	mov	r19, r25
     992:	31 1d       	adc	r19, r1
     994:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <myDFPlayer+0xf>
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	24 0f       	add	r18, r20
     99c:	35 1f       	adc	r19, r21
     99e:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <myDFPlayer+0x10>
     9a2:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     9a4:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <myDFPlayer+0x11>
     9a8:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     9aa:	76 2f       	mov	r23, r22
     9ac:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     9ae:	f0 91 cf 04 	lds	r31, 0x04CF	; 0x8004cf <myDFPlayer+0x12>
     9b2:	6f 0f       	add	r22, r31
     9b4:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     9b6:	28 0f       	add	r18, r24
     9b8:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     9ba:	31 95       	neg	r19
     9bc:	21 95       	neg	r18
     9be:	31 09       	sbc	r19, r1
_ZN19DFRobotDFPlayerMini9availableEv.constprop.71():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     9c0:	62 17       	cp	r22, r18
     9c2:	73 07       	cpc	r23, r19
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	bc cf       	rjmp	.-136    	; 0x940 <__stack+0x41>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     9c8:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     9cc:	e1 34       	cpi	r30, 0x41	; 65
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <__stack+0xd7>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     9d0:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <myDFPlayer+0x25>
     9d4:	2f c0       	rjmp	.+94     	; 0xa34 <__stack+0x135>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     9d6:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     9da:	54 2f       	mov	r21, r20
     9dc:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     9de:	84 0f       	add	r24, r20
     9e0:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     9e2:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <myDFPlayer+0x23>
     9e6:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     9ea:	ea 53       	subi	r30, 0x3A	; 58
     9ec:	e6 31       	cpi	r30, 0x16	; 22
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	46 c0       	rjmp	.+140    	; 0xa7e <__stack+0x17f>
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	e2 50       	subi	r30, 0x02	; 2
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__tablejump2__>
     9fc:	2b 05       	cpc	r18, r11
     9fe:	33 05       	cpc	r19, r3
     a00:	3d 05       	cpc	r19, r13
     a02:	14 05       	cpc	r17, r4
     a04:	3d 05       	cpc	r19, r13
     a06:	1d 05       	cpc	r17, r13
     a08:	3b 05       	cpc	r19, r11
     a0a:	3f 05       	cpc	r19, r15
     a0c:	3d 05       	cpc	r19, r13
     a0e:	3d 05       	cpc	r19, r13
     a10:	3d 05       	cpc	r19, r13
     a12:	3d 05       	cpc	r19, r13
     a14:	3d 05       	cpc	r19, r13
     a16:	3d 05       	cpc	r19, r13
     a18:	3d 05       	cpc	r19, r13
     a1a:	3d 05       	cpc	r19, r13
     a1c:	3f 05       	cpc	r19, r15
     a1e:	3d 05       	cpc	r19, r13
     a20:	3d 05       	cpc	r19, r13
     a22:	3d 05       	cpc	r19, r13
     a24:	3d 05       	cpc	r19, r13
     a26:	3d 05       	cpc	r19, r13
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <myDFPlayer+0x24>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.71():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     a34:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <myDFPlayer+0x24>
     a38:	91 cf       	rjmp	.-222    	; 0x95c <__stack+0x5d>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     a3a:	80 ff       	sbrs	r24, 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x143>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	f4 cf       	rjmp	.-24     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a42:	81 ff       	sbrs	r24, 1
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <__stack+0x14b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	f0 cf       	rjmp	.-32     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     a4a:	83 70       	andi	r24, 0x03	; 3
     a4c:	99 27       	eor	r25, r25
     a4e:	89 2b       	or	r24, r25
     a50:	89 f3       	breq	.-30     	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	ea cf       	rjmp	.-44     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     a56:	80 ff       	sbrs	r24, 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__stack+0x15f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a5a:	87 e0       	ldi	r24, 0x07	; 7
     a5c:	e6 cf       	rjmp	.-52     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a5e:	81 ff       	sbrs	r24, 1
     a60:	e9 cf       	rjmp	.-46     	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	e2 cf       	rjmp	.-60     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     a66:	80 ff       	sbrs	r24, 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a6a:	88 e0       	ldi	r24, 0x08	; 8
     a6c:	de cf       	rjmp	.-68     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a6e:	81 ff       	sbrs	r24, 1
     a70:	e1 cf       	rjmp	.-62     	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	da cf       	rjmp	.-76     	; 0xa2a <__stack+0x12b>
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	d8 cf       	rjmp	.-80     	; 0xa2a <__stack+0x12b>
     a7a:	8b e0       	ldi	r24, 0x0B	; 11
     a7c:	d6 cf       	rjmp	.-84     	; 0xa2a <__stack+0x12b>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     a84:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <myDFPlayer+0x23>
     a88:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     a8c:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <myDFPlayer+0x24>
     a90:	9f cf       	rjmp	.-194    	; 0x9d0 <__stack+0xd1>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.71():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     a92:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <myDFPlayer+0x25>
     a96:	88 23       	and	r24, r24
     a98:	69 f2       	breq	.-102    	; 0xa34 <__stack+0x135>
     a9a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
     a9e:	00 91 bf 04 	lds	r16, 0x04BF	; 0x8004bf <myDFPlayer+0x2>
     aa2:	10 91 c0 04 	lds	r17, 0x04C0	; 0x8004c0 <myDFPlayer+0x3>
     aa6:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <myDFPlayer+0x4>
     aaa:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <myDFPlayer+0x5>
     aae:	60 1b       	sub	r22, r16
     ab0:	71 0b       	sbc	r23, r17
     ab2:	82 0b       	sbc	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	00 91 c3 04 	lds	r16, 0x04C3	; 0x8004c3 <myDFPlayer+0x6>
     aba:	10 91 c4 04 	lds	r17, 0x04C4	; 0x8004c4 <myDFPlayer+0x7>
     abe:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <myDFPlayer+0x8>
     ac2:	30 91 c6 04 	lds	r19, 0x04C6	; 0x8004c6 <myDFPlayer+0x9>
     ac6:	60 17       	cp	r22, r16
     ac8:	71 07       	cpc	r23, r17
     aca:	82 07       	cpc	r24, r18
     acc:	93 07       	cpc	r25, r19
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	b1 cf       	rjmp	.-158    	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     ad2:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     ad6:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     ada:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <myDFPlayer+0x23>
     ade:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	36 cf       	rjmp	.-404    	; 0x952 <__stack+0x53>

00000ae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>:
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.69():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     ae6:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     aea:	27 2f       	mov	r18, r23
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	70 93 d6 04 	sts	0x04D6, r23	; 0x8004d6 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     af2:	60 93 d7 04 	sts	0x04D7, r22	; 0x8004d7 <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     af6:	40 91 d3 04 	lds	r20, 0x04D3	; 0x8004d3 <myDFPlayer+0x16>
     afa:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <myDFPlayer+0x15>
     afe:	49 0f       	add	r20, r25
     b00:	55 27       	eor	r21, r21
     b02:	55 1f       	adc	r21, r21
     b04:	84 0f       	add	r24, r20
     b06:	95 2f       	mov	r25, r21
     b08:	91 1d       	adc	r25, r1
     b0a:	40 91 d5 04 	lds	r20, 0x04D5	; 0x8004d5 <myDFPlayer+0x18>
     b0e:	84 0f       	add	r24, r20
     b10:	91 1d       	adc	r25, r1
     b12:	82 0f       	add	r24, r18
     b14:	93 1f       	adc	r25, r19
     b16:	68 0f       	add	r22, r24
     b18:	79 2f       	mov	r23, r25
     b1a:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     b1c:	71 95       	neg	r23
     b1e:	61 95       	neg	r22
     b20:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     b22:	70 93 d8 04 	sts	0x04D8, r23	; 0x8004d8 <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     b26:	60 93 d9 04 	sts	0x04D9, r22	; 0x8004d9 <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     b2a:	44 23       	and	r20, r20
     b2c:	61 f0       	breq	.+24     	; 0xb46 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     b2e:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <myDFPlayer+0x25>
     b32:	88 23       	and	r24, r24
     b34:	41 f0       	breq	.+16     	; 0xb46 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	cb 01       	movw	r24, r22
     b3c:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     b40:	0e 94 62 04 	call	0x8c4	; 0x8c4 <DFRobotDFPlayerMini::available() [clone .constprop.71]>
     b44:	f4 cf       	rjmp	.-24     	; 0xb2e <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     b46:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <myDFPlayer>
     b4a:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <myDFPlayer+0x1>
     b4e:	dc 01       	movw	r26, r24
     b50:	ed 91       	ld	r30, X+
     b52:	fc 91       	ld	r31, X
     b54:	02 80       	ldd	r0, Z+2	; 0x02
     b56:	f3 81       	ldd	r31, Z+3	; 0x03
     b58:	e0 2d       	mov	r30, r0
     b5a:	4a e0       	ldi	r20, 0x0A	; 10
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	61 ed       	ldi	r22, 0xD1	; 209
     b60:	74 e0       	ldi	r23, 0x04	; 4
     b62:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     b64:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
     b68:	60 93 bf 04 	sts	0x04BF, r22	; 0x8004bf <myDFPlayer+0x2>
     b6c:	70 93 c0 04 	sts	0x04C0, r23	; 0x8004c0 <myDFPlayer+0x3>
     b70:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <myDFPlayer+0x4>
     b74:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     b78:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <myDFPlayer+0x18>
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	81 11       	cpse	r24, r1
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]+0x9e>
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     b88:	81 11       	cpse	r24, r1
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     b8c:	6a e0       	ldi	r22, 0x0A	; 10
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0c 94 23 04 	jmp	0x846	; 0x846 <delay>
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.69():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     b98:	08 95       	ret

00000b9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>:
_ZN19DFRobotDFPlayerMini10playFolderEhh.constprop.29():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     b9a:	78 2f       	mov	r23, r24
     b9c:	8f e0       	ldi	r24, 0x0F	; 15
     b9e:	0c 94 73 05 	jmp	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>

00000ba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>:
_Z12startPreSonghh.constprop.28():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1323
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
        }
    }
}

void startPreSong(byte fol, byte song)
     ba2:	cf 93       	push	r28
     ba4:	c8 2f       	mov	r28, r24
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1325
{
    digitalWrite(AMP, HIGH);
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	8c e0       	ldi	r24, 0x0C	; 12
     baa:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1326
    myDFPlayer.playFolder(fol, song);
     bae:	6c 2f       	mov	r22, r28
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1327
    delay(500);
     bb6:	64 ef       	ldi	r22, 0xF4	; 244
     bb8:	71 e0       	ldi	r23, 0x01	; 1
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1328
}
     bbe:	cf 91       	pop	r28
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1327

void startPreSong(byte fol, byte song)
{
    digitalWrite(AMP, HIGH);
    myDFPlayer.playFolder(fol, song);
    delay(500);
     bc0:	0c 94 23 04 	jmp	0x846	; 0x846 <delay>

00000bc4 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     bc4:	08 95       	ret

00000bc6 <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     bc6:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
     bca:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	71 f4       	brne	.+28     	; 0xbf0 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     bd4:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     bd8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
     bdc:	98 17       	cp	r25, r24
     bde:	41 f0       	breq	.+16     	; 0xbf0 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     be0:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ee 56       	subi	r30, 0x6E	; 110
     be8:	fd 4f       	sbci	r31, 0xFD	; 253
     bea:	80 81       	ld	r24, Z
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     bf4:	08 95       	ret

00000bf6 <SoftwareSerial::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     bf6:	08 95       	ret

00000bf8 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     c06:	5c 96       	adiw	r26, 0x1c	; 28
     c08:	ed 90       	ld	r14, X+
     c0a:	fc 90       	ld	r15, X
     c0c:	5d 97       	sbiw	r26, 0x1d	; 29
     c0e:	e1 14       	cp	r14, r1
     c10:	f1 04       	cpc	r15, r1
     c12:	79 f4       	brne	.+30     	; 0xc32 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	13 96       	adiw	r26, 0x03	; 3
     c1a:	9c 93       	st	X, r25
     c1c:	8e 93       	st	-X, r24
     c1e:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     c32:	51 96       	adiw	r26, 0x11	; 17
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     c3a:	50 96       	adiw	r26, 0x10	; 16
     c3c:	8c 91       	ld	r24, X
     c3e:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     c40:	98 2f       	mov	r25, r24
     c42:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     c44:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     c46:	5e 96       	adiw	r26, 0x1e	; 30
     c48:	2c 91       	ld	r18, X
     c4a:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     c4c:	12 2f       	mov	r17, r18
     c4e:	12 70       	andi	r17, 0x02	; 2
     c50:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     c52:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     c54:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     c56:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     c58:	11 23       	and	r17, r17
     c5a:	19 f1       	breq	.+70     	; 0xca2 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     c5c:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     c5e:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     c60:	e7 01       	movw	r28, r14
     c62:	21 97       	sbiw	r28, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <SoftwareSerial::write(unsigned char)+0x6a>
     c66:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     c68:	46 2f       	mov	r20, r22
     c6a:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     c6c:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     c6e:	60 ff       	sbrs	r22, 0
     c70:	1a c0       	rjmp	.+52     	; 0xca6 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     c72:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     c74:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     c76:	e7 01       	movw	r28, r14
     c78:	21 97       	sbiw	r28, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     c7c:	ba 01       	movw	r22, r20
     c7e:	75 95       	asr	r23
     c80:	67 95       	ror	r22
     c82:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     c84:	89 f7       	brne	.-30     	; 0xc68 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     c86:	11 23       	and	r17, r17
     c88:	81 f0       	breq	.+32     	; 0xcaa <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     c8a:	80 81       	ld	r24, Z
     c8c:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     c8e:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     c90:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     c92:	5c 96       	adiw	r26, 0x1c	; 28
     c94:	8d 91       	ld	r24, X+
     c96:	9c 91       	ld	r25, X
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	c1 cf       	rjmp	.-126    	; 0xc24 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     ca2:	29 23       	and	r18, r25
     ca4:	dc cf       	rjmp	.-72     	; 0xc5e <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     ca6:	39 23       	and	r19, r25
     ca8:	e5 cf       	rjmp	.-54     	; 0xc74 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     caa:	90 81       	ld	r25, Z
     cac:	89 2b       	or	r24, r25
     cae:	ef cf       	rjmp	.-34     	; 0xc8e <SoftwareSerial::write(unsigned char)+0x96>

00000cb0 <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     cb0:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
     cb4:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
     cb8:	28 17       	cp	r18, r24
     cba:	39 07       	cpc	r19, r25
     cbc:	71 f4       	brne	.+28     	; 0xcda <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     cbe:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
     cc2:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	80 5c       	subi	r24, 0xC0	; 192
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	82 1b       	sub	r24, r18
     cce:	91 09       	sbc	r25, r1
     cd0:	60 e4       	ldi	r22, 0x40	; 64
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__divmodhi4>
     cd8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     cde:	08 95       	ret

00000ce0 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     ce0:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
     ce4:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	b9 f4       	brne	.+46     	; 0xd1c <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     cee:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     cf2:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
     cf6:	98 17       	cp	r25, r24
     cf8:	89 f0       	breq	.+34     	; 0xd1c <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     cfa:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	ee 56       	subi	r30, 0x6E	; 110
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     d06:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	2f 73       	andi	r18, 0x3F	; 63
     d12:	33 27       	eor	r19, r19
     d14:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     d20:	08 95       	ret

00000d22 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j.part.1():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:95
 *            ensure the content of this buffer doesn't change.
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ea 01       	movw	r28, r20
     d2a:	12 2f       	mov	r17, r18
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:121
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
     d2c:	dc 01       	movw	r26, r24
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	8d 91       	ld	r24, X+
     d32:	9c 91       	ld	r25, X
     d34:	dc 01       	movw	r26, r24
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	02 80       	ldd	r0, Z+2	; 0x02
     d3c:	f3 81       	ldd	r31, Z+3	; 0x03
     d3e:	e0 2d       	mov	r30, r0
     d40:	09 95       	icall
     d42:	c8 17       	cp	r28, r24
     d44:	d9 07       	cpc	r29, r25
     d46:	29 f4       	brne	.+10     	; 0xd52 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]+0x30>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
     d48:	81 2f       	mov	r24, r17
     d4a:	0e 94 38 02 	call	0x470	; 0x470 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	81 11       	cpse	r24, r1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:125
  // Write the data itself
  if (_wire->write(buffer, len) != len) {
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice failed to write"));
#endif
    return false;
     d52:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:166
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     d54:	89 2f       	mov	r24, r25
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	08 95       	ret

00000d5e <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:62
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	88 23       	and	r24, r24
     d68:	a1 f0       	breq	.+40     	; 0xd92 <Adafruit_I2CDevice::detected()+0x34>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:69
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
     d6a:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     d72:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     d76:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     d7a:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 38 02 	call	0x470	; 0x470 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:70
  if (_wire->endTransmission() == 0) {
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	81 11       	cpse	r24, r1
     d88:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:80
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
     d8a:	89 2f       	mov	r24, r25
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
     d92:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.48]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 af 06 	call	0xd5e	; 0xd5e <Adafruit_I2CDevice::detected()>
     da0:	98 2f       	mov	r25, r24
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     da2:	81 11       	cpse	r24, r1
     da4:	e2 cf       	rjmp	.-60     	; 0xd6a <Adafruit_I2CDevice::detected()+0xc>
     da6:	f1 cf       	rjmp	.-30     	; 0xd8a <Adafruit_I2CDevice::detected()+0x2c>

00000da8 <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     da8:	85 ed       	ldi	r24, 0xD5	; 213
     daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     db2:	84 fd       	sbrc	r24, 4
     db4:	fc cf       	rjmp	.-8      	; 0xdae <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     db6:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     dba:	08 95       	ret

00000dbc <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     dbc:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <twi_txBufferLength>
     dc0:	26 0f       	add	r18, r22
     dc2:	33 27       	eor	r19, r19
     dc4:	33 1f       	adc	r19, r19
     dc6:	21 32       	cpi	r18, 0x21	; 33
     dc8:	31 05       	cpc	r19, r1
     dca:	ec f4       	brge	.+58     	; 0xe06 <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     dcc:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <twi_state>
     dd0:	fc 01       	movw	r30, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	24 30       	cpi	r18, 0x04	; 4
     dd8:	69 f0       	breq	.+26     	; 0xdf4 <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     dda:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     ddc:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     dde:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <twi_txBufferLength>
     de2:	21 91       	ld	r18, Z+
     de4:	ac 01       	movw	r20, r24
     de6:	41 5b       	subi	r20, 0xB1	; 177
     de8:	5d 4f       	sbci	r21, 0xFD	; 253
     dea:	a4 0f       	add	r26, r20
     dec:	b5 2f       	mov	r27, r21
     dee:	b1 1d       	adc	r27, r1
     df0:	2c 93       	st	X, r18
     df2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     df4:	86 17       	cp	r24, r22
     df6:	98 f3       	brcs	.-26     	; 0xdde <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     df8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
     dfc:	68 0f       	add	r22, r24
     dfe:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <twi_txBufferLength>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	08 95       	ret

00000e0a <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     e0a:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <TwoWire::rxBufferIndex>
     e0e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <TwoWire::rxBufferLength>
     e12:	e8 17       	cp	r30, r24
     e14:	30 f4       	brcc	.+12     	; 0xe22 <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	eb 5b       	subi	r30, 0xBB	; 187
     e1a:	fc 4f       	sbci	r31, 0xFC	; 252
     e1c:	80 81       	ld	r24, Z
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     e26:	08 95       	ret

00000e28 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     e28:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <TwoWire::rxBufferIndex>
     e2c:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     e30:	2f ef       	ldi	r18, 0xFF	; 255
     e32:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     e34:	98 17       	cp	r25, r24
     e36:	48 f4       	brcc	.+18     	; 0xe4a <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     e38:	e9 2f       	mov	r30, r25
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	eb 5b       	subi	r30, 0xBB	; 187
     e3e:	fc 4f       	sbci	r31, 0xFC	; 252
     e40:	20 81       	ld	r18, Z
     e42:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     e44:	9f 5f       	subi	r25, 0xFF	; 255
     e46:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     e4a:	c9 01       	movw	r24, r18
     e4c:	08 95       	ret

00000e4e <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     e4e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <TwoWire::rxBufferLength>
     e52:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     e56:	89 1b       	sub	r24, r25
     e58:	99 0b       	sbc	r25, r25
     e5a:	08 95       	ret

00000e5c <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	7c 01       	movw	r14, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     e72:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <TwoWire::transmitting>
     e76:	22 23       	and	r18, r18
     e78:	89 f0       	breq	.+34     	; 0xe9c <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     e7a:	eb 01       	movw	r28, r22
     e7c:	6b 01       	movw	r12, r22
     e7e:	c4 0e       	add	r12, r20
     e80:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     e82:	cc 15       	cp	r28, r12
     e84:	dd 05       	cpc	r29, r13
     e86:	69 f0       	breq	.+26     	; 0xea2 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     e88:	69 91       	ld	r22, Y+
     e8a:	d7 01       	movw	r26, r14
     e8c:	ed 91       	ld	r30, X+
     e8e:	fc 91       	ld	r31, X
     e90:	01 90       	ld	r0, Z+
     e92:	f0 81       	ld	r31, Z
     e94:	e0 2d       	mov	r30, r0
     e96:	c7 01       	movw	r24, r14
     e98:	09 95       	icall
     e9a:	f3 cf       	rjmp	.-26     	; 0xe82 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     e9c:	64 2f       	mov	r22, r20
     e9e:	0e 94 de 06 	call	0xdbc	; 0xdbc <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     ea2:	c8 01       	movw	r24, r16
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	08 95       	ret

00000eb6 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	1f 92       	push	r1
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     ec2:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <TwoWire::transmitting>
     ec6:	22 23       	and	r18, r18
     ec8:	f9 f0       	breq	.+62     	; 0xf08 <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     eca:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <TwoWire::txBufferLength>
     ece:	20 32       	cpi	r18, 0x20	; 32
     ed0:	58 f0       	brcs	.+22     	; 0xee8 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	33 83       	std	Z+3, r19	; 0x03
     eda:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     ee8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <TwoWire::txBufferIndex>
     eec:	e8 2f       	mov	r30, r24
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	e2 57       	subi	r30, 0x72	; 114
     ef2:	fc 4f       	sbci	r31, 0xFC	; 252
     ef4:	99 81       	ldd	r25, Y+1	; 0x01
     ef6:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     efe:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	ec cf       	rjmp	.-40     	; 0xee0 <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	0e 94 de 06 	call	0xdbc	; 0xdbc <twi_transmit>
     f12:	f7 cf       	rjmp	.-18     	; 0xf02 <TwoWire::write(unsigned char)+0x4c>

00000f14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     f14:	fc 01       	movw	r30, r24
     f16:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     f18:	31 e0       	ldi	r19, 0x01	; 1
     f1a:	30 93 8c 03 	sts	0x038C, r19	; 0x80038c <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     f1e:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     f22:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     f26:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     f2a:	83 85       	ldd	r24, Z+11	; 0x0b
     f2c:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     f2e:	87 e5       	ldi	r24, 0x57	; 87
     f30:	94 e0       	ldi	r25, 0x04	; 4
     f32:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TwoWire::write(unsigned char)>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0c 94 38 02 	jmp	0x470	; 0x470 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>

00000f3c <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	8c 01       	movw	r16, r24
     f44:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     f46:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     f4a:	6c 2f       	mov	r22, r28
     f4c:	64 60       	ori	r22, 0x04	; 4
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     f5c:	6c 2f       	mov	r22, r28
     f5e:	6b 7f       	andi	r22, 0xFB	; 251
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     f66:	82 e3       	ldi	r24, 0x32	; 50
     f68:	90 e0       	ldi	r25, 0x00	; 0
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     f70:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <delayMicroseconds>

00000f74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	8c 01       	movw	r16, r24
     f7e:	d6 2f       	mov	r29, r22
     f80:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     f82:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     f84:	64 2b       	or	r22, r20
     f86:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     f8a:	80 e1       	ldi	r24, 0x10	; 16
     f8c:	d8 9f       	mul	r29, r24
     f8e:	b0 01       	movw	r22, r0
     f90:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     f92:	6c 2b       	or	r22, r28
     f94:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     f9e:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <LiquidCrystal_I2C::write4bits(unsigned char)>

00000fa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>:
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	28 97       	sbiw	r28, 0x08	; 8
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     fb6:	98 e0       	ldi	r25, 0x08	; 8
     fb8:	ef e0       	ldi	r30, 0x0F	; 15
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	de 01       	movw	r26, r28
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	01 90       	ld	r0, Z+
     fc2:	0d 92       	st	X+, r0
     fc4:	9a 95       	dec	r25
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     fc8:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <lcd+0x8>
     fcc:	96 17       	cp	r25, r22
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     fd0:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     fd2:	26 2f       	mov	r18, r22
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	22 0f       	add	r18, r18
     fd8:	33 1f       	adc	r19, r19
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	4c 0f       	add	r20, r28
     fe0:	5d 1f       	adc	r21, r29
     fe2:	24 0f       	add	r18, r20
     fe4:	35 1f       	adc	r19, r21
     fe6:	f9 01       	movw	r30, r18
     fe8:	60 81       	ld	r22, Z
     fea:	68 0f       	add	r22, r24
     fec:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	81 eb       	ldi	r24, 0xB1	; 177
     ff2:	94 e0       	ldi	r25, 0x04	; 4
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     ff4:	28 96       	adiw	r28, 0x08	; 8
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    1004:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00001008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>:
_ZN17LiquidCrystal_I2C5clearEv.constprop.75():
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	81 eb       	ldi	r24, 0xB1	; 177
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    1014:	80 ed       	ldi	r24, 0xD0	; 208
    1016:	97 e0       	ldi	r25, 0x07	; 7
    1018:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <delayMicroseconds>

0000101c <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	08 95       	ret

00001028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.65():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1032:	d0 e0       	ldi	r29, 0x00	; 0
    1034:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1036:	f8 01       	movw	r30, r16
    1038:	ec 0f       	add	r30, r28
    103a:	fd 1f       	adc	r31, r29
    103c:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
    103e:	66 23       	and	r22, r22
    1040:	39 f0       	breq	.+14     	; 0x1050 <Print::print(__FlashStringHelper const*) [clone .constprop.65]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	81 eb       	ldi	r24, 0xB1	; 177
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
_ZN5Print5printEPK19__FlashStringHelper.constprop.65():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
    104c:	21 96       	adiw	r28, 0x01	; 1
    104e:	f3 cf       	rjmp	.-26     	; 0x1036 <Print::print(__FlashStringHelper const*) [clone .constprop.65]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
    1050:	ce 01       	movw	r24, r28
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	08 95       	ret

00001062 <queueButton(unsigned char)>:
_Z11queueButtonh():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:200

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
    1062:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <buttonBufferCount>
    1066:	25 30       	cpi	r18, 0x05	; 5
    1068:	09 f0       	breq	.+2      	; 0x106c <queueButton(unsigned char)+0xa>
    106a:	90 f4       	brcc	.+36     	; 0x1090 <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:202
  {
    buttonBuffer [button_write_pos] = button;
    106c:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <__data_end>
    1070:	e9 2f       	mov	r30, r25
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	ef 5e       	subi	r30, 0xEF	; 239
    1076:	fc 4f       	sbci	r31, 0xFC	; 252
    1078:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:203
    buttonBufferCount++;
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:204
    button_write_pos++;
    1080:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:206
    
    if (button_write_pos >= sizeof (buttonBuffer))
    1082:	95 30       	cpi	r25, 0x05	; 5
    1084:	18 f4       	brcc	.+6      	; 0x108c <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:204
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
    1086:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <__data_end>
    108a:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:208
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
    108c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:211
    }
  }
}
    1090:	08 95       	ret

00001092 <stopPreSong()>:
_Z11stopPreSongv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1331
}
void stopPreSong()
{
    digitalWrite(AMP, LOW);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	8c e0       	ldi	r24, 0x0C	; 12
    1096:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	86 e1       	ldi	r24, 0x16	; 22
    10a0:	0c 94 73 05 	jmp	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>

000010a4 <getNavAction()>:
_Z12getNavActionv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1262
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    10a4:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.103]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1264

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    10a8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    10ac:	98 2f       	mov	r25, r24
    10ae:	9f 77       	andi	r25, 0x7F	; 127
    10b0:	92 30       	cpi	r25, 0x02	; 2
    10b2:	41 f0       	breq	.+16     	; 0x10c4 <getNavAction()+0x20>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1266
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    10b4:	93 30       	cpi	r25, 0x03	; 3
    10b6:	41 f0       	breq	.+16     	; 0x10c8 <getNavAction()+0x24>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1268
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	41 f0       	breq	.+16     	; 0x10cc <getNavAction()+0x28>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1270
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    10bc:	84 34       	cpi	r24, 0x44	; 68
    10be:	41 f0       	breq	.+16     	; 0x10d0 <getNavAction()+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1261
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1265
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1267
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1269
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1271
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    10d0:	84 e0       	ldi	r24, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1273
    return navAction;
}
    10d2:	08 95       	ret

000010d4 <TriggerPlayer()>:
_Z13TriggerPlayerv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:577
        }
    }
}

void TriggerPlayer()
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:579
    // Validate Player Morning
    if (CurTime >= config.PlayerMorTime && CurTime <= config.PlayerMorTime + config.PlayerMorDur && config.PlayerMorDur != 0)
    10d8:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <config+0x3e>
    10dc:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <config+0x3f>
    10e0:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <config+0x40>
    10e4:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <config+0x41>
    10e8:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <CurTime>
    10ec:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <CurTime+0x1>
    10f0:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <CurTime+0x2>
    10f4:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <CurTime+0x3>
    10f8:	48 17       	cp	r20, r24
    10fa:	59 07       	cpc	r21, r25
    10fc:	6a 07       	cpc	r22, r26
    10fe:	7b 07       	cpc	r23, r27
    1100:	1c f1       	brlt	.+70     	; 0x1148 <TriggerPlayer()+0x74>
    1102:	00 91 f8 03 	lds	r16, 0x03F8	; 0x8003f8 <config+0x42>
    1106:	10 91 f9 03 	lds	r17, 0x03F9	; 0x8003f9 <config+0x43>
    110a:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <config+0x44>
    110e:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <config+0x45>
    1112:	80 0f       	add	r24, r16
    1114:	91 1f       	adc	r25, r17
    1116:	a2 1f       	adc	r26, r18
    1118:	b3 1f       	adc	r27, r19
    111a:	84 17       	cp	r24, r20
    111c:	95 07       	cpc	r25, r21
    111e:	a6 07       	cpc	r26, r22
    1120:	b7 07       	cpc	r27, r23
    1122:	94 f0       	brlt	.+36     	; 0x1148 <TriggerPlayer()+0x74>
    1124:	01 2b       	or	r16, r17
    1126:	02 2b       	or	r16, r18
    1128:	03 2b       	or	r16, r19
    112a:	71 f0       	breq	.+28     	; 0x1148 <TriggerPlayer()+0x74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:581
    {
        if (PlayerONMor == 0)
    112c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <PlayerONMor>
    1130:	81 11       	cpse	r24, r1
    1132:	50 c0       	rjmp	.+160    	; 0x11d4 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:583
        {
            PlayerONMor = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:594
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
    113a:	85 e0       	ldi	r24, 0x05	; 5
    113c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:613
                lcd.clear();
                appMode = APP_NORMAL_MODE;
            }
        }
    }
}
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:595
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
            lcd.clear();
    1144:	0c 94 04 08 	jmp	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:589
            appMode = APP_PLAYER_MODE;
            lcd.clear();
        }
    }
    // Validate Player Evening
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    1148:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <config+0x46>
    114c:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <config+0x47>
    1150:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <config+0x48>
    1154:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <config+0x49>
    1158:	48 17       	cp	r20, r24
    115a:	59 07       	cpc	r21, r25
    115c:	6a 07       	cpc	r22, r26
    115e:	7b 07       	cpc	r23, r27
    1160:	ec f0       	brlt	.+58     	; 0x119c <TriggerPlayer()+0xc8>
    1162:	00 91 00 04 	lds	r16, 0x0400	; 0x800400 <config+0x4a>
    1166:	10 91 01 04 	lds	r17, 0x0401	; 0x800401 <config+0x4b>
    116a:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <config+0x4c>
    116e:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <config+0x4d>
    1172:	80 0f       	add	r24, r16
    1174:	91 1f       	adc	r25, r17
    1176:	a2 1f       	adc	r26, r18
    1178:	b3 1f       	adc	r27, r19
    117a:	84 17       	cp	r24, r20
    117c:	95 07       	cpc	r25, r21
    117e:	a6 07       	cpc	r26, r22
    1180:	b7 07       	cpc	r27, r23
    1182:	64 f0       	brlt	.+24     	; 0x119c <TriggerPlayer()+0xc8>
    1184:	01 2b       	or	r16, r17
    1186:	02 2b       	or	r16, r18
    1188:	03 2b       	or	r16, r19
    118a:	41 f0       	breq	.+16     	; 0x119c <TriggerPlayer()+0xc8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:591
    {
        if (PlayerONEve == 0)
    118c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <PlayerONEve>
    1190:	81 11       	cpse	r24, r1
    1192:	20 c0       	rjmp	.+64     	; 0x11d4 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:593
        {
            PlayerONEve = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <PlayerONEve>
    119a:	cf cf       	rjmp	.-98     	; 0x113a <TriggerPlayer()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:600
            lcd.clear();
        }
    }
    else
    {
        if (appMode == APP_PLAYER_MODE)
    119c:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <appMode>
    11a0:	85 30       	cpi	r24, 0x05	; 5
    11a2:	c1 f4       	brne	.+48     	; 0x11d4 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:602
        {
            if (PlayerONEve == 1 || PlayerONMor == 1)
    11a4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <PlayerONEve>
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	21 f0       	breq	.+8      	; 0x11b4 <TriggerPlayer()+0xe0>
    11ac:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <PlayerONMor>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	81 f4       	brne	.+32     	; 0x11d4 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:604
            {
                digitalWrite(AMP, LOW);
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:605
                digitalWrite(AUDCONT, LOW);
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	8a e0       	ldi	r24, 0x0A	; 10
    11c0:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:606
                PlayerONMor = 0;
    11c4:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:607
                PlayerONEve = 0;
    11c8:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <PlayerONEve>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:608
                lcd.clear();
    11cc:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:609
                appMode = APP_NORMAL_MODE;
    11d0:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:613
            }
        }
    }
}
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	08 95       	ret

000011da <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]>:
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:176
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    11da:	2f 92       	push	r2
    11dc:	3f 92       	push	r3
    11de:	4f 92       	push	r4
    11e0:	5f 92       	push	r5
    11e2:	6f 92       	push	r6
    11e4:	7f 92       	push	r7
    11e6:	8f 92       	push	r8
    11e8:	9f 92       	push	r9
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	6c 01       	movw	r12, r24
    1200:	3b 01       	movw	r6, r22
    1202:	7a 01       	movw	r14, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:177
  size_t pos = 0;
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	00 e0       	ldi	r16, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
  }
  twi_state = TWI_MRX;
    1208:	55 24       	eor	r5, r5
    120a:	53 94       	inc	r5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    120c:	44 24       	eor	r4, r4
    120e:	4a 94       	dec	r4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1210:	85 ee       	ldi	r24, 0xE5	; 229
    1212:	38 2e       	mov	r3, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1214:	95 ec       	ldi	r25, 0xC5	; 197
    1216:	29 2e       	mov	r2, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1218:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_state>
    121c:	81 11       	cpse	r24, r1
    121e:	fc cf       	rjmp	.-8      	; 0x1218 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x3e>
    1220:	d6 01       	movw	r26, r12
    1222:	14 96       	adiw	r26, 0x04	; 4
    1224:	8d 91       	ld	r24, X+
    1226:	9c 91       	ld	r25, X
    1228:	e7 01       	movw	r28, r14
    122a:	c0 1b       	sub	r28, r16
    122c:	d1 0b       	sbc	r29, r17
    122e:	8c 17       	cp	r24, r28
    1230:	9d 07       	cpc	r25, r29
    1232:	08 f4       	brcc	.+2      	; 0x1236 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x5c>
    1234:	ec 01       	movw	r28, r24
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:195
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1236:	f6 01       	movw	r30, r12
    1238:	90 81       	ld	r25, Z
    123a:	8c 2f       	mov	r24, r28
    123c:	c1 32       	cpi	r28, 0x21	; 33
    123e:	08 f0       	brcs	.+2      	; 0x1242 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x68>
    1240:	80 e2       	ldi	r24, 0x20	; 32
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    1242:	50 92 8b 03 	sts	0x038B, r5	; 0x80038b <twi_state>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:181
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	97 01       	movw	r18, r14
    124a:	2c 1b       	sub	r18, r28
    124c:	3d 0b       	sbc	r19, r29
    124e:	02 17       	cp	r16, r18
    1250:	13 07       	cpc	r17, r19
    1252:	08 f4       	brcc	.+2      	; 0x1256 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x7c>
    1254:	40 e0       	ldi	r20, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    1256:	40 93 8a 03 	sts	0x038A, r20	; 0x80038a <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    125a:	40 92 89 03 	sts	0x0389, r4	; 0x800389 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    125e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1262:	2f ef       	ldi	r18, 0xFF	; 255
    1264:	28 0f       	add	r18, r24
    1266:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    126a:	50 92 66 03 	sts	0x0366, r5	; 0x800366 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    126e:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <twi_slarw>
    1272:	99 0f       	add	r25, r25
    1274:	92 2b       	or	r25, r18
    1276:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    127a:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <twi_inRepStart>
    127e:	91 30       	cpi	r25, 0x01	; 1
    1280:	e9 f5       	brne	.+122    	; 0x12fc <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x122>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    1282:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
    1286:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <twi_slarw>
    128a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    128e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1292:	93 fd       	sbrc	r25, 3
    1294:	f8 cf       	rjmp	.-16     	; 0x1286 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xac>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1296:	20 92 bc 00 	sts	0x00BC, r2	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    129a:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <twi_state>
    129e:	91 30       	cpi	r25, 0x01	; 1
    12a0:	e1 f3       	breq	.-8      	; 0x129a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    12a2:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <twi_masterBufferIndex>
    12a6:	98 17       	cp	r25, r24
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xd4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    12aa:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_masterBufferIndex>
    12ae:	a7 e6       	ldi	r26, 0x67	; 103
    12b0:	b3 e0       	ldi	r27, 0x03	; 3
    12b2:	e5 e4       	ldi	r30, 0x45	; 69
    12b4:	f3 e0       	ldi	r31, 0x03	; 3
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    12b6:	90 e0       	ldi	r25, 0x00	; 0
twi_readFrom():
    12b8:	98 13       	cpse	r25, r24
    12ba:	23 c0       	rjmp	.+70     	; 0x1302 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x128>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    12bc:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    12c0:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <TwoWire::rxBufferLength>
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:198
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
#endif

  if (recv != len) {
    12c4:	9c 17       	cp	r25, r28
    12c6:	1d 06       	cpc	r1, r29
    12c8:	d1 f5       	brne	.+116    	; 0x133e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x164>
    12ca:	43 01       	movw	r8, r6
    12cc:	80 0e       	add	r8, r16
    12ce:	91 1e       	adc	r9, r17
    12d0:	54 01       	movw	r10, r8
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    12d2:	c5 01       	movw	r24, r10
    12d4:	88 19       	sub	r24, r8
    12d6:	99 09       	sbc	r25, r9
    12d8:	8c 17       	cp	r24, r28
    12da:	9d 07       	cpc	r25, r29
    12dc:	b0 f4       	brcc	.+44     	; 0x130a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x130>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:208
    buffer[i] = _wire->read();
    12de:	d6 01       	movw	r26, r12
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	8d 91       	ld	r24, X+
    12e4:	9c 91       	ld	r25, X
    12e6:	dc 01       	movw	r26, r24
    12e8:	ed 91       	ld	r30, X+
    12ea:	fc 91       	ld	r31, X
    12ec:	02 84       	ldd	r0, Z+10	; 0x0a
    12ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    12f0:	e0 2d       	mov	r30, r0
    12f2:	09 95       	icall
    12f4:	f5 01       	movw	r30, r10
    12f6:	81 93       	st	Z+, r24
    12f8:	5f 01       	movw	r10, r30
    12fa:	eb cf       	rjmp	.-42     	; 0x12d2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xf8>
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    12fc:	30 92 bc 00 	sts	0x00BC, r3	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1300:	cc cf       	rjmp	.-104    	; 0x129a <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    1302:	2d 91       	ld	r18, X+
    1304:	21 93       	st	Z+, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1306:	9f 5f       	subi	r25, 0xFF	; 255
    1308:	d7 cf       	rjmp	.-82     	; 0x12b8 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xde>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:184
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
    130a:	0c 0f       	add	r16, r28
    130c:	1d 1f       	adc	r17, r29
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    130e:	0e 15       	cp	r16, r14
    1310:	1f 05       	cpc	r17, r15
    1312:	08 f4       	brcc	.+2      	; 0x1316 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x13c>
    1314:	81 cf       	rjmp	.-254    	; 0x1218 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x3e>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:186
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    1316:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:187
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	9f 90       	pop	r9
    132e:	8f 90       	pop	r8
    1330:	7f 90       	pop	r7
    1332:	6f 90       	pop	r6
    1334:	5f 90       	pop	r5
    1336:	4f 90       	pop	r4
    1338:	3f 90       	pop	r3
    133a:	2f 90       	pop	r2
    133c:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:183
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	eb cf       	rjmp	.-42     	; 0x1318 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x13e>

00001342 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>:
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:37
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	28 97       	sbiw	r28, 0x08	; 8
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	dc 01       	movw	r26, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:38
  uint8_t buffer[8] = {0,
    135c:	8e 01       	movw	r16, r28
    135e:	0f 5f       	subi	r16, 0xFF	; 255
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	86 e0       	ldi	r24, 0x06	; 6
    1364:	f8 01       	movw	r30, r16
    1366:	11 92       	st	Z+, r1
    1368:	8a 95       	dec	r24
    136a:	e9 f7       	brne	.-6      	; 0x1366 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]+0x24>
    136c:	15 96       	adiw	r26, 0x05	; 5
    136e:	3c 91       	ld	r19, X
    1370:	15 97       	sbiw	r26, 0x05	; 5
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	83 2f       	mov	r24, r19
    1376:	62 2f       	mov	r22, r18
    1378:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__udivmodqi4>
    137c:	98 2f       	mov	r25, r24
    137e:	88 0f       	add	r24, r24
    1380:	89 0f       	add	r24, r25
    1382:	88 0f       	add	r24, r24
    1384:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       0,
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	14 96       	adiw	r26, 0x04	; 4
    138a:	3c 91       	ld	r19, X
    138c:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    138e:	83 2f       	mov	r24, r19
    1390:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__udivmodqi4>
    1394:	98 2f       	mov	r25, r24
    1396:	88 0f       	add	r24, r24
    1398:	89 0f       	add	r24, r25
    139a:	88 0f       	add	r24, r24
    139c:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	13 96       	adiw	r26, 0x03	; 3
    13a2:	3c 91       	ld	r19, X
    13a4:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13a6:	83 2f       	mov	r24, r19
    13a8:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__udivmodqi4>
    13ac:	98 2f       	mov	r25, r24
    13ae:	88 0f       	add	r24, r24
    13b0:	89 0f       	add	r24, r25
    13b2:	88 0f       	add	r24, r24
    13b4:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13b6:	8c 83       	std	Y+4, r24	; 0x04
    13b8:	12 96       	adiw	r26, 0x02	; 2
    13ba:	3c 91       	ld	r19, X
    13bc:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13be:	83 2f       	mov	r24, r19
    13c0:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__udivmodqi4>
    13c4:	98 2f       	mov	r25, r24
    13c6:	88 0f       	add	r24, r24
    13c8:	89 0f       	add	r24, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13ce:	8e 83       	std	Y+6, r24	; 0x06
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	3c 91       	ld	r19, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13d6:	83 2f       	mov	r24, r19
    13d8:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__udivmodqi4>
    13dc:	98 2f       	mov	r25, r24
    13de:	88 0f       	add	r24, r24
    13e0:	89 0f       	add	r24, r25
    13e2:	88 0f       	add	r24, r24
    13e4:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13e6:	8f 83       	std	Y+7, r24	; 0x07
    13e8:	3c 91       	ld	r19, X
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13ea:	83 2f       	mov	r24, r19
    13ec:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__udivmodqi4>
    13f0:	98 2f       	mov	r25, r24
    13f2:	88 0f       	add	r24, r24
    13f4:	89 0f       	add	r24, r25
    13f6:	88 0f       	add	r24, r24
    13f8:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13fa:	88 87       	std	Y+8, r24	; 0x08
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:46
  i2c_dev->write(buffer, 8);
    13fc:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <rtc>
    1400:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    1404:	fc 01       	movw	r30, r24
    1406:	24 81       	ldd	r18, Z+4	; 0x04
    1408:	35 81       	ldd	r19, Z+5	; 0x05
    140a:	28 30       	cpi	r18, 0x08	; 8
    140c:	31 05       	cpc	r19, r1
    140e:	80 f0       	brcs	.+32     	; 0x1430 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]+0xee>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1410:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1412:	31 e0       	ldi	r19, 0x01	; 1
    1414:	30 93 8c 03 	sts	0x038C, r19	; 0x80038c <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    1418:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    141c:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    1420:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
write():
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	48 e0       	ldi	r20, 0x08	; 8
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	b8 01       	movw	r22, r16
    142c:	0e 94 91 06 	call	0xd22	; 0xd22 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:47
}
    1430:	28 96       	adiw	r28, 0x08	; 8
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <RTC_DS1307::now() [clone .constprop.31]>:
_ZN10RTC_DS13073nowEv.constprop.31():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:55
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	00 d0       	rcall	.+0      	; 0x1454 <RTC_DS1307::now() [clone .constprop.31]+0xe>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <RTC_DS1307::now() [clone .constprop.31]+0x10>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <RTC_DS1307::now() [clone .constprop.31]+0x12>
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	8c 01       	movw	r16, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:57
  uint8_t buffer[7];
  buffer[0] = 0;
    1460:	19 82       	std	Y+1, r1	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:58
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    1462:	e0 90 3d 03 	lds	r14, 0x033D	; 0x80033d <rtc>
    1466:	f0 90 3e 03 	lds	r15, 0x033E	; 0x80033e <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    146a:	d7 01       	movw	r26, r14
    146c:	14 96       	adiw	r26, 0x04	; 4
    146e:	8d 91       	ld	r24, X+
    1470:	9c 91       	ld	r25, X
    1472:	15 97       	sbiw	r26, 0x05	; 5
    1474:	89 2b       	or	r24, r25
    1476:	e9 f0       	breq	.+58     	; 0x14b2 <RTC_DS1307::now() [clone .constprop.31]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1478:	8c 91       	ld	r24, X
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    1480:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1484:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    1488:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
write():
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	be 01       	movw	r22, r28
    1494:	6f 5f       	subi	r22, 0xFF	; 255
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	c7 01       	movw	r24, r14
    149a:	0e 94 91 06 	call	0xd22	; 0xd22 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
write_then_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:243
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    149e:	88 23       	and	r24, r24
    14a0:	41 f0       	breq	.+16     	; 0x14b2 <RTC_DS1307::now() [clone .constprop.31]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
    return false;
  }

  return read(read_buffer, read_len);
    14a2:	47 e0       	ldi	r20, 0x07	; 7
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	be 01       	movw	r22, r28
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	c7 01       	movw	r24, r14
    14ae:	0e 94 ed 08 	call	0x11da	; 0x11da <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]>
_ZN10RTC_DS13073nowEv.constprop.31():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:62

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	ef 77       	andi	r30, 0x7F	; 127
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	fb 80       	ldd	r15, Y+3	; 0x03
    14ba:	4d 81       	ldd	r20, Y+5	; 0x05
    14bc:	5e 81       	ldd	r21, Y+6	; 0x06
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:60
DateTime RTC_DS1307::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
  i2c_dev->write_then_read(buffer, 1, buffer, 7);

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
      @brief  Convert a binary coded decimal value to binary. RTC stores
    time/date values as BCD.
      @param val BCD value
      @return Binary value
  */
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	35 95       	asr	r19
    14c8:	27 95       	ror	r18
    14ca:	9a 95       	dec	r25
    14cc:	e1 f7       	brne	.-8      	; 0x14c6 <RTC_DS1307::now() [clone .constprop.31]+0x80>
    14ce:	92 2f       	mov	r25, r18
    14d0:	99 0f       	add	r25, r25
    14d2:	99 0f       	add	r25, r25
    14d4:	29 1b       	sub	r18, r25
    14d6:	22 0f       	add	r18, r18
    14d8:	28 0f       	add	r18, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    14da:	d8 01       	movw	r26, r16
    14dc:	2c 93       	st	X, r18
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    14de:	85 2f       	mov	r24, r21
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	24 e0       	ldi	r18, 0x04	; 4
    14e4:	95 95       	asr	r25
    14e6:	87 95       	ror	r24
    14e8:	2a 95       	dec	r18
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <RTC_DS1307::now() [clone .constprop.31]+0x9e>
    14ec:	98 2f       	mov	r25, r24
    14ee:	99 0f       	add	r25, r25
    14f0:	99 0f       	add	r25, r25
    14f2:	89 1b       	sub	r24, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	85 0f       	add	r24, r21
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	8c 93       	st	X, r24
    14fc:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    14fe:	64 2f       	mov	r22, r20
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	34 e0       	ldi	r19, 0x04	; 4
    1504:	75 95       	asr	r23
    1506:	67 95       	ror	r22
    1508:	3a 95       	dec	r19
    150a:	e1 f7       	brne	.-8      	; 0x1504 <RTC_DS1307::now() [clone .constprop.31]+0xbe>
    150c:	86 2f       	mov	r24, r22
    150e:	88 0f       	add	r24, r24
    1510:	88 0f       	add	r24, r24
    1512:	68 1b       	sub	r22, r24
    1514:	66 0f       	add	r22, r22
    1516:	64 0f       	add	r22, r20
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    1518:	12 96       	adiw	r26, 0x02	; 2
    151a:	6c 93       	st	X, r22
    151c:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    151e:	4f 2d       	mov	r20, r15
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	64 e0       	ldi	r22, 0x04	; 4
    1524:	55 95       	asr	r21
    1526:	47 95       	ror	r20
    1528:	6a 95       	dec	r22
    152a:	e1 f7       	brne	.-8      	; 0x1524 <RTC_DS1307::now() [clone .constprop.31]+0xde>
    152c:	84 2f       	mov	r24, r20
    152e:	88 0f       	add	r24, r24
    1530:	88 0f       	add	r24, r24
    1532:	48 1b       	sub	r20, r24
    1534:	44 0f       	add	r20, r20
    1536:	4f 0d       	add	r20, r15
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    1538:	13 96       	adiw	r26, 0x03	; 3
    153a:	4c 93       	st	X, r20
    153c:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    153e:	2f 2f       	mov	r18, r31
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	74 e0       	ldi	r23, 0x04	; 4
    1544:	35 95       	asr	r19
    1546:	27 95       	ror	r18
    1548:	7a 95       	dec	r23
    154a:	e1 f7       	brne	.-8      	; 0x1544 <RTC_DS1307::now() [clone .constprop.31]+0xfe>
    154c:	82 2f       	mov	r24, r18
    154e:	88 0f       	add	r24, r24
    1550:	88 0f       	add	r24, r24
    1552:	28 1b       	sub	r18, r24
    1554:	22 0f       	add	r18, r18
    1556:	2f 0f       	add	r18, r31
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    1558:	14 96       	adiw	r26, 0x04	; 4
    155a:	2c 93       	st	X, r18
    155c:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    155e:	8e 2f       	mov	r24, r30
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	f4 e0       	ldi	r31, 0x04	; 4
    1564:	95 95       	asr	r25
    1566:	87 95       	ror	r24
    1568:	fa 95       	dec	r31
    156a:	e1 f7       	brne	.-8      	; 0x1564 <RTC_DS1307::now() [clone .constprop.31]+0x11e>
    156c:	98 2f       	mov	r25, r24
    156e:	99 0f       	add	r25, r25
    1570:	99 0f       	add	r25, r25
    1572:	89 1b       	sub	r24, r25
    1574:	88 0f       	add	r24, r24
    1576:	8e 0f       	add	r24, r30
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    1578:	15 96       	adiw	r26, 0x05	; 5
    157a:	8c 93       	st	X, r24
_ZN10RTC_DS13073nowEv.constprop.31():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:63
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
}
    157c:	c8 01       	movw	r24, r16
    157e:	27 96       	adiw	r28, 0x07	; 7
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	08 95       	ret

00001598 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    159e:	88 81       	ld	r24, Y
    15a0:	99 81       	ldd	r25, Y+1	; 0x01
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	11 f0       	breq	.+4      	; 0x15aa <String::invalidate()+0x12>
    15a6:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    15aa:	19 82       	std	Y+1, r1	; 0x01
    15ac:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    15ae:	1d 82       	std	Y+5, r1	; 0x05
    15b0:	1c 82       	std	Y+4, r1	; 0x04
    15b2:	1b 82       	std	Y+3, r1	; 0x03
    15b4:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>:
_ZN5Print11printNumberEmh.constprop.8():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	a1 97       	sbiw	r28, 0x21	; 33
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    15dc:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    15de:	42 30       	cpi	r20, 0x02	; 2
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x28>
    15e2:	4a e0       	ldi	r20, 0x0A	; 10
    15e4:	8e 01       	movw	r16, r28
    15e6:	0f 5d       	subi	r16, 0xDF	; 223
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    15ea:	84 2e       	mov	r8, r20
    15ec:	91 2c       	mov	r9, r1
    15ee:	b1 2c       	mov	r11, r1
    15f0:	a1 2c       	mov	r10, r1
    15f2:	a5 01       	movw	r20, r10
    15f4:	94 01       	movw	r18, r8
    15f6:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__udivmodsi4>
    15fa:	e6 2f       	mov	r30, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    15fc:	b9 01       	movw	r22, r18
    15fe:	ca 01       	movw	r24, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1600:	ea 30       	cpi	r30, 0x0A	; 10
    1602:	44 f5       	brge	.+80     	; 0x1654 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x98>
    1604:	e0 5d       	subi	r30, 0xD0	; 208
    1606:	d8 01       	movw	r26, r16
    1608:	ee 93       	st	-X, r30
    160a:	8d 01       	movw	r16, r26
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    160c:	23 2b       	or	r18, r19
    160e:	24 2b       	or	r18, r20
    1610:	25 2b       	or	r18, r21
    1612:	79 f7       	brne	.-34     	; 0x15f2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	80 e0       	ldi	r24, 0x00	; 0
write():
    1618:	10 97       	sbiw	r26, 0x00	; 0
    161a:	69 f0       	breq	.+26     	; 0x1636 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x7a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    161c:	fd 01       	movw	r30, r26
    161e:	01 90       	ld	r0, Z+
    1620:	00 20       	and	r0, r0
    1622:	e9 f7       	brne	.-6      	; 0x161e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x62>
    1624:	31 97       	sbiw	r30, 0x01	; 1
    1626:	af 01       	movw	r20, r30
    1628:	4a 1b       	sub	r20, r26
    162a:	5b 0b       	sbc	r21, r27
    162c:	bd 01       	movw	r22, r26
    162e:	81 eb       	ldi	r24, 0xB1	; 177
    1630:	94 e0       	ldi	r25, 0x04	; 4
    1632:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Print::write(unsigned char const*, unsigned int)>
_ZN5Print11printNumberEmh.constprop.8():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    1636:	a1 96       	adiw	r28, 0x21	; 33
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1654:	e9 5c       	subi	r30, 0xC9	; 201
    1656:	d7 cf       	rjmp	.-82     	; 0x1606 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x4a>

00001658 <Print::print(int, int) [clone .constprop.4]>:
_ZN5Print5printEii.constprop.4():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    1660:	6c 01       	movw	r12, r24
    1662:	99 0f       	add	r25, r25
    1664:	ee 08       	sbc	r14, r14
    1666:	ff 08       	sbc	r15, r15
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1668:	f7 fe       	sbrs	r15, 7
    166a:	16 c0       	rjmp	.+44     	; 0x1698 <Print::print(int, int) [clone .constprop.4]+0x40>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	6d e2       	ldi	r22, 0x2D	; 45
    1670:	81 eb       	ldi	r24, 0xB1	; 177
    1672:	94 e0       	ldi	r25, 0x04	; 4
    1674:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    1678:	66 27       	eor	r22, r22
    167a:	77 27       	eor	r23, r23
    167c:	cb 01       	movw	r24, r22
    167e:	6c 19       	sub	r22, r12
    1680:	7d 09       	sbc	r23, r13
    1682:	8e 09       	sbc	r24, r14
    1684:	9f 09       	sbc	r25, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1686:	4a e0       	ldi	r20, 0x0A	; 10
    1688:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>
    168c:	01 96       	adiw	r24, 0x01	; 1
_ZN5Print5printEii.constprop.4():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	08 95       	ret
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1698:	4a e0       	ldi	r20, 0x0A	; 10
    169a:	c7 01       	movw	r24, r14
    169c:	b6 01       	movw	r22, r12
_ZN5Print5printEii.constprop.4():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    16a6:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>

000016aa <Print::print(char const*) [clone .constprop.100]>:
_ZN5Print5printEPKc.constprop.100():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	69 f0       	breq	.+26     	; 0x16c8 <Print::print(char const*) [clone .constprop.100]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    16ae:	fc 01       	movw	r30, r24
    16b0:	01 90       	ld	r0, Z+
    16b2:	00 20       	and	r0, r0
    16b4:	e9 f7       	brne	.-6      	; 0x16b0 <Print::print(char const*) [clone .constprop.100]+0x6>
    16b6:	31 97       	sbiw	r30, 0x01	; 1
    16b8:	af 01       	movw	r20, r30
    16ba:	48 1b       	sub	r20, r24
    16bc:	59 0b       	sbc	r21, r25
    16be:	bc 01       	movw	r22, r24
    16c0:	81 eb       	ldi	r24, 0xB1	; 177
    16c2:	94 e0       	ldi	r25, 0x04	; 4
    16c4:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <Print::write(unsigned char const*, unsigned int)>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	08 95       	ret

000016ce <inttostr(char*, short)>:
_Z8inttostrPcs():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:79
  pulseWidth++;
}

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ec 01       	movw	r28, r24
    16d8:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:80
  if (integer == 0)
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	59 f4       	brne	.+22     	; 0x16f4 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:82
  {
    strcpy(dest, "0");
    16de:	6b ee       	ldi	r22, 0xEB	; 235
    16e0:	71 e0       	ldi	r23, 0x01	; 1
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:112
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    16e8:	ce 01       	movw	r24, r28
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:86
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    16f4:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:88
    
    if (integer < 0)
    16f6:	77 ff       	sbrs	r23, 7
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:91
    {
      sign = 1;
      dest[0] = '-';
    16fa:	2d e2       	ldi	r18, 0x2D	; 45
    16fc:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:92
      integer = integer * -1;
    16fe:	91 95       	neg	r25
    1700:	81 95       	neg	r24
    1702:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:90
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    1704:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1706:	80 31       	cpi	r24, 0x10	; 16
    1708:	37 e2       	ldi	r19, 0x27	; 39
    170a:	93 07       	cpc	r25, r19
    170c:	0c f5       	brge	.+66     	; 0x1750 <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    170e:	88 3e       	cpi	r24, 0xE8	; 232
    1710:	33 e0       	ldi	r19, 0x03	; 3
    1712:	93 07       	cpc	r25, r19
    1714:	fc f4       	brge	.+62     	; 0x1754 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:99
    else if (integer > 99) idx = 2;
    1716:	32 e0       	ldi	r19, 0x02	; 2
    1718:	84 36       	cpi	r24, 0x64	; 100
    171a:	91 05       	cpc	r25, r1
    171c:	2c f4       	brge	.+10     	; 0x1728 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:100
    else if (integer > 9) idx = 1;
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	8a 30       	cpi	r24, 0x0A	; 10
    1722:	91 05       	cpc	r25, r1
    1724:	0c f4       	brge	.+2      	; 0x1728 <inttostr(char*, short)+0x5a>
    1726:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:103
    else if (integer > 0) idx = 0;    

    idx += sign;
    1728:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:104
    dest[idx+1] = 0;
    172a:	fe 01       	movw	r30, r28
    172c:	e2 0f       	add	r30, r18
    172e:	f1 1d       	adc	r31, r1
    1730:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:108
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    1732:	0a e0       	ldi	r16, 0x0A	; 10
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	fe 01       	movw	r30, r28
    1738:	e2 0f       	add	r30, r18
    173a:	f1 1d       	adc	r31, r1
    173c:	b8 01       	movw	r22, r16
    173e:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__divmodhi4>
    1742:	80 5d       	subi	r24, 0xD0	; 208
    1744:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:106
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    1746:	cb 01       	movw	r24, r22
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 f7       	brne	.-24     	; 0x1736 <inttostr(char*, short)+0x68>
    174e:	cc cf       	rjmp	.-104    	; 0x16e8 <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1750:	34 e0       	ldi	r19, 0x04	; 4
    1752:	ea cf       	rjmp	.-44     	; 0x1728 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    1754:	33 e0       	ldi	r19, 0x03	; 3
    1756:	e8 cf       	rjmp	.-48     	; 0x1728 <inttostr(char*, short)+0x5a>

00001758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>:
_Z4rpadPcPKcch.constprop.99():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:140
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:142
{
  unsigned char len = strlen(str);
    175e:	ec 01       	movw	r28, r24
    1760:	09 90       	ld	r0, Y+
    1762:	00 20       	and	r0, r0
    1764:	e9 f7       	brne	.-6      	; 0x1760 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x8>
    1766:	21 97       	sbiw	r28, 0x01	; 1
    1768:	c8 1b       	sub	r28, r24
    176a:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:146
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    176c:	c0 31       	cpi	r28, 0x10	; 16
    176e:	08 f5       	brcc	.+66     	; 0x17b2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:148
  {
    strcpy(dest, str);
    1770:	8a e2       	ldi	r24, 0x2A	; 42
    1772:	94 e0       	ldi	r25, 0x04	; 4
    1774:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:149
    strcat(dest, padc(chr, width - len));
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	8c 1b       	sub	r24, r28
    177c:	e9 e1       	ldi	r30, 0x19	; 25
    177e:	f4 e0       	ldi	r31, 0x04	; 4
padc():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1780:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    1782:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1784:	af 01       	movw	r20, r30
    1786:	49 51       	subi	r20, 0x19	; 25
    1788:	54 40       	sbci	r21, 0x04	; 4
    178a:	48 17       	cp	r20, r24
    178c:	59 07       	cpc	r21, r25
    178e:	14 f4       	brge	.+4      	; 0x1794 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x3c>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    1790:	21 93       	st	Z+, r18
    1792:	f8 cf       	rjmp	.-16     	; 0x1784 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    1794:	87 5e       	subi	r24, 0xE7	; 231
    1796:	9b 4f       	sbci	r25, 0xFB	; 251
    1798:	fc 01       	movw	r30, r24
    179a:	10 82       	st	Z, r1
_Z4rpadPcPKcch.constprop.99():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:149
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    179c:	69 e1       	ldi	r22, 0x19	; 25
    179e:	74 e0       	ldi	r23, 0x04	; 4
    17a0:	8a e2       	ldi	r24, 0x2A	; 42
    17a2:	94 e0       	ldi	r25, 0x04	; 4
    17a4:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <strcat>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:156
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    17a8:	8a e2       	ldi	r24, 0x2A	; 42
    17aa:	94 e0       	ldi	r25, 0x04	; 4
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:153
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    17b2:	41 e1       	ldi	r20, 0x11	; 17
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	8a e2       	ldi	r24, 0x2A	; 42
    17b8:	94 e0       	ldi	r25, 0x04	; 4
    17ba:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <strncpy>
    17be:	f4 cf       	rjmp	.-24     	; 0x17a8 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x50>

000017c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>:
_Z4lpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:159
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	ec 01       	movw	r28, r24
    17ca:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:161
{
  unsigned char len = strlen(str);
    17cc:	fb 01       	movw	r30, r22
    17ce:	01 90       	ld	r0, Z+
    17d0:	00 20       	and	r0, r0
    17d2:	e9 f7       	brne	.-6      	; 0x17ce <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0xe>
    17d4:	31 97       	sbiw	r30, 0x01	; 1
    17d6:	e6 1b       	sub	r30, r22
    17d8:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:165
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    17da:	e0 31       	cpi	r30, 0x10	; 16
    17dc:	28 f5       	brcc	.+74     	; 0x1828 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x68>
    17de:	e4 17       	cp	r30, r20
    17e0:	18 f5       	brcc	.+70     	; 0x1828 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x68>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:167
  {
    strcpy(dest, padc(chr, width - len));
    17e2:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:183
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    17e4:	41 31       	cpi	r20, 0x11	; 17
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x2a>
    17e8:	40 e1       	ldi	r20, 0x10	; 16
    17ea:	e9 e1       	ldi	r30, 0x19	; 25
    17ec:	f4 e0       	ldi	r31, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186

  int i;
  for (i=0; i < count; i++)
    17ee:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    17f0:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    17f2:	9f 01       	movw	r18, r30
    17f4:	29 51       	subi	r18, 0x19	; 25
    17f6:	34 40       	sbci	r19, 0x04	; 4
    17f8:	24 17       	cp	r18, r20
    17fa:	35 07       	cpc	r19, r21
    17fc:	14 f4       	brge	.+4      	; 0x1802 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x42>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    17fe:	81 93       	st	Z+, r24
    1800:	f8 cf       	rjmp	.-16     	; 0x17f2 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x32>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    1802:	47 5e       	subi	r20, 0xE7	; 231
    1804:	5b 4f       	sbci	r21, 0xFB	; 251
    1806:	fa 01       	movw	r30, r20
    1808:	10 82       	st	Z, r1
_Z4lpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:167
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    180a:	69 e1       	ldi	r22, 0x19	; 25
    180c:	74 e0       	ldi	r23, 0x04	; 4
    180e:	ce 01       	movw	r24, r28
    1810:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:168
    strcat(dest, str);
    1814:	b8 01       	movw	r22, r16
    1816:	ce 01       	movw	r24, r28
    1818:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <strcat>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:175
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    181c:	ce 01       	movw	r24, r28
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:172
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	4f 5f       	subi	r20, 0xFF	; 255
    182c:	5f 4f       	sbci	r21, 0xFF	; 255
    182e:	b8 01       	movw	r22, r16
    1830:	ce 01       	movw	r24, r28
    1832:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <strncpy>
    1836:	f2 cf       	rjmp	.-28     	; 0x181c <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x5c>

00001838 <Config::save() [clone .constprop.26]>:
_ZN6Config4saveEv.constprop.26():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:204



void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    1838:	4e e4       	ldi	r20, 0x4E	; 78
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	86 eb       	ldi	r24, 0xB6	; 182
    1842:	93 e0       	ldi	r25, 0x03	; 3
    1844:	0c 94 69 2b 	jmp	0x56d2	; 0x56d2 <eeprom_write_block>

00001848 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    1852:	88 81       	ld	r24, Y
    1854:	99 81       	ldd	r25, Y+1	; 0x01
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	59 f0       	breq	.+22     	; 0x1870 <String::reserve(unsigned int)+0x28>
    185a:	2a 81       	ldd	r18, Y+2	; 0x02
    185c:	3b 81       	ldd	r19, Y+3	; 0x03
    185e:	26 17       	cp	r18, r22
    1860:	37 07       	cpc	r19, r23
    1862:	30 f0       	brcs	.+12     	; 0x1870 <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1864:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret
    1870:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	59 f0       	breq	.+22     	; 0x1894 <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    187e:	99 83       	std	Y+1, r25	; 0x01
    1880:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    1882:	1b 83       	std	Y+3, r17	; 0x03
    1884:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1886:	2c 81       	ldd	r18, Y+4	; 0x04
    1888:	3d 81       	ldd	r19, Y+5	; 0x05
    188a:	23 2b       	or	r18, r19
    188c:	59 f7       	brne	.-42     	; 0x1864 <String::reserve(unsigned int)+0x1c>
    188e:	fc 01       	movw	r30, r24
    1890:	10 82       	st	Z, r1
    1892:	e8 cf       	rjmp	.-48     	; 0x1864 <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	e7 cf       	rjmp	.-50     	; 0x1866 <String::reserve(unsigned int)+0x1e>

00001898 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18a6:	fb 01       	movw	r30, r22
    18a8:	e0 80       	ld	r14, Z
    18aa:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    18ac:	e1 14       	cp	r14, r1
    18ae:	f1 04       	cpc	r15, r1
    18b0:	11 f1       	breq	.+68     	; 0x18f6 <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18b2:	04 81       	ldd	r16, Z+4	; 0x04
    18b4:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    18b6:	01 15       	cp	r16, r1
    18b8:	11 05       	cpc	r17, r1
    18ba:	a9 f0       	breq	.+42     	; 0x18e6 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	9d 81       	ldd	r25, Y+5	; 0x05
    18c0:	08 0f       	add	r16, r24
    18c2:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    18c4:	b8 01       	movw	r22, r16
    18c6:	ce 01       	movw	r24, r28
    18c8:	0e 94 24 0c 	call	0x1848	; 0x1848 <String::reserve(unsigned int)>
    18cc:	88 23       	and	r24, r24
    18ce:	99 f0       	breq	.+38     	; 0x18f6 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    18d0:	28 81       	ld	r18, Y
    18d2:	39 81       	ldd	r19, Y+1	; 0x01
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	b7 01       	movw	r22, r14
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    18e2:	1d 83       	std	Y+5, r17	; 0x05
    18e4:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    18e6:	ce 01       	movw	r24, r28
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	ff 90       	pop	r15
    18f2:	ef 90       	pop	r14
    18f4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18f6:	ce 01       	movw	r24, r28
    18f8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <String::invalidate()>
    18fc:	f4 cf       	rjmp	.-24     	; 0x18e6 <operator+(StringSumHelper const&, String const&)+0x4e>

000018fe <String::String(char const*)>:
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	ec 01       	movw	r28, r24
    190c:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1912:	1b 82       	std	Y+3, r1	; 0x03
    1914:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1916:	1d 82       	std	Y+5, r1	; 0x05
    1918:	1c 82       	std	Y+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    191a:	fb 01       	movw	r30, r22
    191c:	01 90       	ld	r0, Z+
    191e:	00 20       	and	r0, r0
    1920:	e9 f7       	brne	.-6      	; 0x191c <String::String(char const*)+0x1e>
    1922:	31 97       	sbiw	r30, 0x01	; 1
    1924:	8f 01       	movw	r16, r30
    1926:	06 1b       	sub	r16, r22
    1928:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    192a:	b8 01       	movw	r22, r16
    192c:	0e 94 24 0c 	call	0x1848	; 0x1848 <String::reserve(unsigned int)>
    1930:	81 11       	cpse	r24, r1
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    1934:	ce 01       	movw	r24, r28
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    1942:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    1946:	1d 83       	std	Y+5, r17	; 0x05
    1948:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    194a:	b7 01       	movw	r22, r14
    194c:	88 81       	ld	r24, Y
    194e:	99 81       	ldd	r25, Y+1	; 0x01
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    195c:	0c 94 5b 2e 	jmp	0x5cb6	; 0x5cb6 <strcpy>

00001960 <fmt(char*, unsigned char, ...)>:
_Z3fmtPchz():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:117
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    1960:	6f 92       	push	r6
    1962:	7f 92       	push	r7
    1964:	8f 92       	push	r8
    1966:	9f 92       	push	r9
    1968:	af 92       	push	r10
    196a:	bf 92       	push	r11
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	e9 88       	ldd	r14, Y+17	; 0x11
    1982:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:122
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    1984:	fe 01       	movw	r30, r28
    1986:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1988:	d1 2c       	mov	r13, r1
    198a:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:118


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    198c:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    198e:	ab 88       	ldd	r10, Y+19	; 0x13
    1990:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:128
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    1992:	80 e1       	ldi	r24, 0x10	; 16
    1994:	68 2e       	mov	r6, r24
    1996:	87 2d       	mov	r24, r7
    1998:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    199a:	ca 14       	cp	r12, r10
    199c:	db 04       	cpc	r13, r11
    199e:	2c f5       	brge	.+74     	; 0x19ea <fmt(char*, unsigned char, ...)+0x8a>
    19a0:	2f e0       	ldi	r18, 0x0F	; 15
    19a2:	27 15       	cp	r18, r7
    19a4:	10 f1       	brcs	.+68     	; 0x19ea <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    19a6:	4f 01       	movw	r8, r30
    19a8:	22 e0       	ldi	r18, 0x02	; 2
    19aa:	82 0e       	add	r8, r18
    19ac:	91 1c       	adc	r9, r1
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:127
    unsigned char len = strlen(str);
    19b2:	fb 01       	movw	r30, r22
    19b4:	01 90       	ld	r0, Z+
    19b6:	00 20       	and	r0, r0
    19b8:	e9 f7       	brne	.-6      	; 0x19b4 <fmt(char*, unsigned char, ...)+0x54>
    19ba:	31 97       	sbiw	r30, 0x01	; 1
    19bc:	8f 01       	movw	r16, r30
    19be:	06 1b       	sub	r16, r22
    19c0:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:128
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    19c2:	9c 01       	movw	r18, r24
    19c4:	20 0f       	add	r18, r16
    19c6:	31 1d       	adc	r19, r1
    19c8:	46 2d       	mov	r20, r6
    19ca:	47 19       	sub	r20, r7
    19cc:	21 31       	cpi	r18, 0x11	; 17
    19ce:	31 05       	cpc	r19, r1
    19d0:	0c f4       	brge	.+2      	; 0x19d4 <fmt(char*, unsigned char, ...)+0x74>
    19d2:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:130

    strncpy((dest + buflen), str, cpylen);
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	8e 0d       	add	r24, r14
    19d8:	9f 1d       	adc	r25, r15
    19da:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <strncpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:131
    buflen += len;
    19de:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	c8 1a       	sub	r12, r24
    19e4:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    19e6:	f4 01       	movw	r30, r8
    19e8:	d6 cf       	rjmp	.-84     	; 0x1996 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:134

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    19ea:	8e 0d       	add	r24, r14
    19ec:	9f 1d       	adc	r25, r15
    19ee:	fc 01       	movw	r30, r24
    19f0:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:136
  return dest;
}
    19f2:	c7 01       	movw	r24, r14
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	af 90       	pop	r10
    1a08:	9f 90       	pop	r9
    1a0a:	8f 90       	pop	r8
    1a0c:	7f 90       	pop	r7
    1a0e:	6f 90       	pop	r6
    1a10:	08 95       	ret

00001a12 <toDurStr(char*, long, char) [clone .constprop.97]>:
_Z8toDurStrPclc.constprop.97():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:62

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
  return buf;
}

char *toDurStr(char *buf, long timeval, char separator)
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	60 97       	sbiw	r28, 0x10	; 16
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:64
{
  char sepstr[] = {separator, 0};
    1a32:	18 8a       	std	Y+16, r1	; 0x10
    1a34:	1f 86       	std	Y+15, r1	; 0x0f
    1a36:	2a e3       	ldi	r18, 0x3A	; 58
    1a38:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:66

  short hours = timeval / 60;
    1a3a:	2c e3       	ldi	r18, 0x3C	; 60
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
    1a46:	6b 01       	movw	r12, r22
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:72
  short mins = timeval % 60;
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hours);
    1a48:	b9 01       	movw	r22, r18
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:73
  lpad(h, intbuf, '0', 2);
    1a52:	8e 01       	movw	r16, r28
    1a54:	04 5f       	subi	r16, 0xF4	; 244
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	42 e0       	ldi	r20, 0x02	; 2
    1a5a:	be 01       	movw	r22, r28
    1a5c:	6f 5f       	subi	r22, 0xFF	; 255
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	c8 01       	movw	r24, r16
    1a62:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:74
  inttostr(intbuf, mins);
    1a66:	b6 01       	movw	r22, r12
    1a68:	ce 01       	movw	r24, r28
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:75
  lpad(m, intbuf, '0', 2);
    1a70:	7e 01       	movw	r14, r28
    1a72:	89 e0       	ldi	r24, 0x09	; 9
    1a74:	e8 0e       	add	r14, r24
    1a76:	f1 1c       	adc	r15, r1
    1a78:	42 e0       	ldi	r20, 0x02	; 2
    1a7a:	be 01       	movw	r22, r28
    1a7c:	6f 5f       	subi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	c7 01       	movw	r24, r14
    1a82:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:77

  fmt(buf, 3, h, sepstr, m);
    1a86:	ff 92       	push	r15
    1a88:	ef 92       	push	r14
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	0f 96       	adiw	r24, 0x0f	; 15
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	1f 93       	push	r17
    1a94:	0f 93       	push	r16
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	8f 93       	push	r24
    1a9a:	88 e0       	ldi	r24, 0x08	; 8
    1a9c:	94 e0       	ldi	r25, 0x04	; 4
    1a9e:	9f 93       	push	r25
    1aa0:	8f 93       	push	r24
    1aa2:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:78
  return buf;
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:79
}
    1ab0:	88 e0       	ldi	r24, 0x08	; 8
    1ab2:	94 e0       	ldi	r25, 0x04	; 4
    1ab4:	60 96       	adiw	r28, 0x10	; 16
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	08 95       	ret

00001ad2 <toTimeStr(char*, long, char) [clone .constprop.96]>:
_Z9toTimeStrPclc.constprop.96():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:42

  SerialNo = 315;
  DataYear = 2022;
}

char *toTimeStr(char *buf, long timeval, char separator)
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	60 97       	sbiw	r28, 0x10	; 16
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:44
{
  char sepstr[] = {separator, 0};
    1afa:	18 8a       	std	Y+16, r1	; 0x10
    1afc:	1f 86       	std	Y+15, r1	; 0x0f
    1afe:	2a e3       	ldi	r18, 0x3A	; 58
    1b00:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:46

  short hours = timeval / 60;
    1b02:	2c e3       	ldi	r18, 0x3C	; 60
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
    1b0e:	4b 01       	movw	r8, r22
    1b10:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:48
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    1b12:	2d 30       	cpi	r18, 0x0D	; 13
    1b14:	31 05       	cpc	r19, r1
    1b16:	14 f0       	brlt	.+4      	; 0x1b1c <toTimeStr(char*, long, char) [clone .constprop.96]+0x4a>
    1b18:	2c 50       	subi	r18, 0x0C	; 12
    1b1a:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:53
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:54
  lpad(h, intbuf, '0', 2);
    1b26:	8e 01       	movw	r16, r28
    1b28:	04 5f       	subi	r16, 0xF4	; 244
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	42 e0       	ldi	r20, 0x02	; 2
    1b2e:	be 01       	movw	r22, r28
    1b30:	6f 5f       	subi	r22, 0xFF	; 255
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	c8 01       	movw	r24, r16
    1b36:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:55
  inttostr(intbuf, mins);
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:56
  lpad(m, intbuf, '0', 2);
    1b44:	6e 01       	movw	r12, r28
    1b46:	99 e0       	ldi	r25, 0x09	; 9
    1b48:	c9 0e       	add	r12, r25
    1b4a:	d1 1c       	adc	r13, r1
    1b4c:	42 e0       	ldi	r20, 0x02	; 2
    1b4e:	be 01       	movw	r22, r28
    1b50:	6f 5f       	subi	r22, 0xFF	; 255
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	c6 01       	movw	r24, r12
    1b56:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:58

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1b5a:	8c e0       	ldi	r24, 0x0C	; 12
    1b5c:	e8 16       	cp	r14, r24
    1b5e:	f1 04       	cpc	r15, r1
    1b60:	74 f5       	brge	.+92     	; 0x1bbe <toTimeStr(char*, long, char) [clone .constprop.96]+0xec>
    1b62:	86 e7       	ldi	r24, 0x76	; 118
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	df 92       	push	r13
    1b6c:	cf 92       	push	r12
    1b6e:	ce 01       	movw	r24, r28
    1b70:	0f 96       	adiw	r24, 0x0f	; 15
    1b72:	9f 93       	push	r25
    1b74:	8f 93       	push	r24
    1b76:	1f 93       	push	r17
    1b78:	0f 93       	push	r16
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	8f 93       	push	r24
    1b7e:	88 e0       	ldi	r24, 0x08	; 8
    1b80:	94 e0       	ldi	r25, 0x04	; 4
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:59
  return buf;
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:60
}
    1b94:	88 e0       	ldi	r24, 0x08	; 8
    1b96:	94 e0       	ldi	r25, 0x04	; 4
    1b98:	60 96       	adiw	r28, 0x10	; 16
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:58
  inttostr(intbuf, hrs);
  lpad(h, intbuf, '0', 2);
  inttostr(intbuf, mins);
  lpad(m, intbuf, '0', 2);

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1bbe:	8f e6       	ldi	r24, 0x6F	; 111
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	d1 cf       	rjmp	.-94     	; 0x1b66 <toTimeStr(char*, long, char) [clone .constprop.96]+0x94>

00001bc4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]>:
_ZN6Config15getFormattedStrEh.constprop.94():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:108
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	65 97       	sbiw	r28, 0x15	; 21
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:112
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    1be4:	82 50       	subi	r24, 0x02	; 2
    1be6:	8d 31       	cpi	r24, 0x1D	; 29
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x28>
    1bea:	c2 c1       	rjmp	.+900    	; 0x1f70 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x3ac>
    1bec:	e8 2f       	mov	r30, r24
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	e4 50       	subi	r30, 0x04	; 4
    1bf2:	f2 4f       	sbci	r31, 0xF2	; 242
    1bf4:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__tablejump2__>
    1bf8:	19 0e       	add	r1, r25
    1bfa:	7f 0e       	add	r7, r31
    1bfc:	b8 0f       	add	r27, r24
    1bfe:	96 0e       	add	r9, r22
    1c00:	c5 0e       	add	r12, r21
    1c02:	e1 0e       	add	r14, r17
    1c04:	b8 0f       	add	r27, r24
    1c06:	ee 0e       	add	r14, r30
    1c08:	1c 0f       	add	r17, r28
    1c0a:	b8 0f       	add	r27, r24
    1c0c:	f7 0e       	add	r15, r23
    1c0e:	28 0f       	add	r18, r24
    1c10:	b8 0f       	add	r27, r24
    1c12:	31 0f       	add	r19, r17
    1c14:	3e 0f       	add	r19, r30
    1c16:	4c 0f       	add	r20, r28
    1c18:	6e 0f       	add	r22, r30
    1c1a:	b5 0f       	add	r27, r21
    1c1c:	b8 0f       	add	r27, r24
    1c1e:	73 0f       	add	r23, r19
    1c20:	7c 0f       	add	r23, r28
    1c22:	b8 0f       	add	r27, r24
    1c24:	85 0f       	add	r24, r21
    1c26:	8e 0f       	add	r24, r30
    1c28:	99 0f       	add	r25, r25
    1c2a:	a2 0f       	add	r26, r18
    1c2c:	b8 0f       	add	r27, r24
    1c2e:	b0 0f       	add	r27, r16
    1c30:	ab 0f       	add	r26, r27
toDateStr():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:83
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1c32:	1d 8a       	std	Y+21, r1	; 0x15
    1c34:	1c 8a       	std	Y+20, r1	; 0x14
    1c36:	8f e2       	ldi	r24, 0x2F	; 47
    1c38:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:87
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1c3a:	60 91 b4 03 	lds	r22, 0x03B4	; 0x8003b4 <StDate>
    1c3e:	70 91 b5 03 	lds	r23, 0x03B5	; 0x8003b5 <StDate+0x1>
    1c42:	ce 01       	movw	r24, r28
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:88
  lpad(dat, intbuf, '0', 2);
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	0f 5e       	subi	r16, 0xEF	; 239
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	42 e0       	ldi	r20, 0x02	; 2
    1c52:	be 01       	movw	r22, r28
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	c8 01       	movw	r24, r16
    1c5a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:89
  inttostr(intbuf, StMonth);
    1c5e:	60 91 b2 03 	lds	r22, 0x03B2	; 0x8003b2 <StMonth>
    1c62:	70 91 b3 03 	lds	r23, 0x03B3	; 0x8003b3 <StMonth+0x1>
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:90
  lpad(mon, intbuf, '0', 2);
    1c6e:	7e 01       	movw	r14, r28
    1c70:	8e e0       	ldi	r24, 0x0E	; 14
    1c72:	e8 0e       	add	r14, r24
    1c74:	f1 1c       	adc	r15, r1
    1c76:	42 e0       	ldi	r20, 0x02	; 2
    1c78:	be 01       	movw	r22, r28
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	c7 01       	movw	r24, r14
    1c80:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:91
  inttostr(intbuf, StYear);
    1c84:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <StYear>
    1c88:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <StYear+0x1>
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:92
  lpad(year, intbuf, '0', 4);
    1c94:	6e 01       	movw	r12, r28
    1c96:	99 e0       	ldi	r25, 0x09	; 9
    1c98:	c9 0e       	add	r12, r25
    1c9a:	d1 1c       	adc	r13, r1
    1c9c:	44 e0       	ldi	r20, 0x04	; 4
    1c9e:	be 01       	movw	r22, r28
    1ca0:	6f 5f       	subi	r22, 0xFF	; 255
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	c6 01       	movw	r24, r12
    1ca6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:94

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    1caa:	df 92       	push	r13
    1cac:	cf 92       	push	r12
    1cae:	ce 01       	movw	r24, r28
    1cb0:	44 96       	adiw	r24, 0x14	; 20
    1cb2:	9f 93       	push	r25
    1cb4:	8f 93       	push	r24
    1cb6:	ff 92       	push	r15
    1cb8:	ef 92       	push	r14
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	1f 93       	push	r17
    1cc0:	0f 93       	push	r16
    1cc2:	85 e0       	ldi	r24, 0x05	; 5
    1cc4:	8f 93       	push	r24
    1cc6:	88 e0       	ldi	r24, 0x08	; 8
    1cc8:	94 e0       	ldi	r25, 0x04	; 4
    1cca:	9f 93       	push	r25
    1ccc:	8f 93       	push	r24
    1cce:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
_ZN6Config15getFormattedStrEh.constprop.94():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:126
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:198
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1cdc:	88 e0       	ldi	r24, 0x08	; 8
    1cde:	94 e0       	ldi	r25, 0x04	; 4
    1ce0:	65 96       	adiw	r28, 0x15	; 21
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	df 90       	pop	r13
    1cfa:	cf 90       	pop	r12
    1cfc:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:121
  // case mnuCmdSetYear:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    1cfe:	a0 91 06 04 	lds	r26, 0x0406	; 0x800406 <StHr>
    1d02:	b0 91 07 04 	lds	r27, 0x0407	; 0x800407 <StHr+0x1>
    1d06:	2c e3       	ldi	r18, 0x3C	; 60
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__usmulhisi3>
    1d0e:	00 91 04 04 	lds	r16, 0x0404	; 0x800404 <StMin>
    1d12:	10 91 05 04 	lds	r17, 0x0405	; 0x800405 <StMin+0x1>
    1d16:	01 2e       	mov	r0, r17
    1d18:	00 0c       	add	r0, r0
    1d1a:	22 0b       	sbc	r18, r18
    1d1c:	33 0b       	sbc	r19, r19
    1d1e:	60 0f       	add	r22, r16
    1d20:	71 1f       	adc	r23, r17
    1d22:	82 1f       	adc	r24, r18
    1d24:	93 1f       	adc	r25, r19
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:167
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1d26:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <toTimeStr(char*, long, char) [clone .constprop.96]>
    1d2a:	d8 cf       	rjmp	.-80     	; 0x1cdc <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:124
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    1d2c:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <config+0xf>
    1d30:	70 91 c6 03 	lds	r23, 0x03C6	; 0x8003c6 <config+0x10>
    1d34:	6d 30       	cpi	r22, 0x0D	; 13
    1d36:	71 05       	cpc	r23, r1
    1d38:	14 f0       	brlt	.+4      	; 0x1d3e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x17a>
    1d3a:	6c 50       	subi	r22, 0x0C	; 12
    1d3c:	71 09       	sbc	r23, r1
    1d3e:	ce 01       	movw	r24, r28
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:125
    lpad(h, intbuf, '0', 2);
    1d46:	8e 01       	movw	r16, r28
    1d48:	07 5f       	subi	r16, 0xF7	; 247
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	42 e0       	ldi	r20, 0x02	; 2
    1d4e:	be 01       	movw	r22, r28
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:126
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1d5a:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <config+0xf>
    1d5e:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <config+0x10>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:131
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1d62:	0c 97       	sbiw	r24, 0x0c	; 12
    1d64:	1c f4       	brge	.+6      	; 0x1d6c <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1a8>
    1d66:	83 e7       	ldi	r24, 0x73	; 115
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1ac>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:126
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1d6c:	8c e6       	ldi	r24, 0x6C	; 108
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	9f 93       	push	r25
    1d72:	8f 93       	push	r24
    1d74:	1f 93       	push	r17
    1d76:	0f 93       	push	r16
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	8f 93       	push	r24
    1d7c:	88 e0       	ldi	r24, 0x08	; 8
    1d7e:	94 e0       	ldi	r25, 0x04	; 4
    1d80:	9f 93       	push	r25
    1d82:	8f 93       	push	r24
    1d84:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
    1d88:	a4 cf       	rjmp	.-184    	; 0x1cd2 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x10e>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:129
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    1d8a:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <config+0x11>
    1d8e:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <config+0x12>
    1d92:	6d 30       	cpi	r22, 0x0D	; 13
    1d94:	71 05       	cpc	r23, r1
    1d96:	14 f0       	brlt	.+4      	; 0x1d9c <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1d8>
    1d98:	6c 50       	subi	r22, 0x0C	; 12
    1d9a:	71 09       	sbc	r23, r1
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:130
    lpad(h, intbuf, '0', 2);
    1da4:	8e 01       	movw	r16, r28
    1da6:	07 5f       	subi	r16, 0xF7	; 247
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	42 e0       	ldi	r20, 0x02	; 2
    1dac:	be 01       	movw	r22, r28
    1dae:	6f 5f       	subi	r22, 0xFF	; 255
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	c8 01       	movw	r24, r16
    1db4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:131
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1db8:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <config+0x11>
    1dbc:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <config+0x12>
    1dc0:	d0 cf       	rjmp	.-96     	; 0x1d62 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x19e>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:134
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    1dc2:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <config+0x1a>
    1dc6:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <config+0x1b>
    1dca:	ce 01       	movw	r24, r28
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
    1dd2:	2e e7       	ldi	r18, 0x7E	; 126
    1dd4:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:154
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1dd6:	3f 93       	push	r19
    1dd8:	2f 93       	push	r18
    1dda:	40 c0       	rjmp	.+128    	; 0x1e5c <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x298>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:137
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    1ddc:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <config+0x15>
    1de0:	70 91 cc 03 	lds	r23, 0x03CC	; 0x8003cc <config+0x16>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1de4:	ce 01       	movw	r24, r28
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
    1dec:	2b c0       	rjmp	.+86     	; 0x1e44 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x280>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:140
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    1dee:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <demoTime>
    1df2:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <demoTime+0x1>
    1df6:	b8 01       	movw	r22, r16
    1df8:	0d 30       	cpi	r16, 0x0D	; 13
    1dfa:	11 05       	cpc	r17, r1
    1dfc:	14 f0       	brlt	.+4      	; 0x1e02 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x23e>
    1dfe:	6c 50       	subi	r22, 0x0C	; 12
    1e00:	71 09       	sbc	r23, r1
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:141
    lpad(h, intbuf, '0', 2);
    1e0a:	7e 01       	movw	r14, r28
    1e0c:	99 e0       	ldi	r25, 0x09	; 9
    1e0e:	e9 0e       	add	r14, r25
    1e10:	f1 1c       	adc	r15, r1
    1e12:	42 e0       	ldi	r20, 0x02	; 2
    1e14:	be 01       	movw	r22, r28
    1e16:	6f 5f       	subi	r22, 0xFF	; 255
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:142
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1e20:	83 e7       	ldi	r24, 0x73	; 115
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0c 30       	cpi	r16, 0x0C	; 12
    1e26:	11 05       	cpc	r17, r1
    1e28:	14 f0       	brlt	.+4      	; 0x1e2e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x26a>
    1e2a:	8c e6       	ldi	r24, 0x6C	; 108
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	ff 92       	push	r15
    1e34:	ef 92       	push	r14
    1e36:	a0 cf       	rjmp	.-192    	; 0x1d78 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1b4>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:145
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1e38:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <config+0x19>
    1e3c:	88 23       	and	r24, r24
    1e3e:	29 f0       	breq	.+10     	; 0x1e4a <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x286>
    1e40:	83 e1       	ldi	r24, 0x13	; 19
    1e42:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1e44:	9f 93       	push	r25
    1e46:	8f 93       	push	r24
    1e48:	3b c0       	rjmp	.+118    	; 0x1ec0 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2fc>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:145
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1e4a:	8a e7       	ldi	r24, 0x7A	; 122
    1e4c:	91 e0       	ldi	r25, 0x01	; 1
    1e4e:	fa cf       	rjmp	.-12     	; 0x1e44 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x280>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:148
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1e50:	85 e8       	ldi	r24, 0x85	; 133
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	9f 93       	push	r25
    1e56:	8f 93       	push	r24
    1e58:	8d e8       	ldi	r24, 0x8D	; 141
    1e5a:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:154
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1e5c:	9f 93       	push	r25
    1e5e:	8f 93       	push	r24
    1e60:	8b cf       	rjmp	.-234    	; 0x1d78 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1b4>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:151
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1e62:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <config+0x22>
    1e66:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <config+0x23>
    1e6a:	63 30       	cpi	r22, 0x03	; 3
    1e6c:	71 05       	cpc	r23, r1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2ae>
    1e70:	86 c0       	rjmp	.+268    	; 0x1f7e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x3ba>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:154
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1e72:	2f e9       	ldi	r18, 0x9F	; 159
    1e74:	31 e0       	ldi	r19, 0x01	; 1
    1e76:	8a e7       	ldi	r24, 0x7A	; 122
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	ad cf       	rjmp	.-166    	; 0x1dd6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x212>
    1e7c:	60 91 dc 03 	lds	r22, 0x03DC	; 0x8003dc <config+0x26>
    1e80:	70 91 dd 03 	lds	r23, 0x03DD	; 0x8003dd <config+0x27>
    1e84:	63 30       	cpi	r22, 0x03	; 3
    1e86:	71 05       	cpc	r23, r1
    1e88:	a1 f3       	breq	.-24     	; 0x1e72 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2ae>
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
    1e92:	2f e6       	ldi	r18, 0x6F	; 111
    1e94:	31 e0       	ldi	r19, 0x01	; 1
    1e96:	9f cf       	rjmp	.-194    	; 0x1dd6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x212>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:157
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1e98:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <config+0x2a>
    1e9c:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <config+0x2b>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:162
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:163
    lpad(h, intbuf, '0', 3);
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	07 5f       	subi	r16, 0xF7	; 247
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	43 e0       	ldi	r20, 0x03	; 3
    1eb0:	be 01       	movw	r22, r28
    1eb2:	6f 5f       	subi	r22, 0xFF	; 255
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:164
    fmt(strbuf, 1, h);
    1ebc:	1f 93       	push	r17
    1ebe:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	8f 93       	push	r24
    1ec4:	88 e0       	ldi	r24, 0x08	; 8
    1ec6:	94 e0       	ldi	r25, 0x04	; 4
    1ec8:	9f 93       	push	r25
    1eca:	8f 93       	push	r24
    1ecc:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	00 cf       	rjmp	.-512    	; 0x1cdc <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:162
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1edc:	60 91 e2 03 	lds	r22, 0x03E2	; 0x8003e2 <config+0x2c>
    1ee0:	70 91 e3 03 	lds	r23, 0x03E3	; 0x8003e3 <config+0x2d>
    1ee4:	dd cf       	rjmp	.-70     	; 0x1ea0 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2dc>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:167
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1ee6:	60 91 e4 03 	lds	r22, 0x03E4	; 0x8003e4 <config+0x2e>
    1eea:	70 91 e5 03 	lds	r23, 0x03E5	; 0x8003e5 <config+0x2f>
    1eee:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0x30>
    1ef2:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x31>
    1ef6:	17 cf       	rjmp	.-466    	; 0x1d26 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:170
    break;
  case mnuCmdLt1OffTime:  
    toTimeStr(strbuf, Light1Off);
    1ef8:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <config+0x32>
    1efc:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <config+0x33>
    1f00:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <config+0x34>
    1f04:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <config+0x35>
    1f08:	0e cf       	rjmp	.-484    	; 0x1d26 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:173
    break;
  case mnuCmdPlrMorOnTime:
    toTimeStr(strbuf, PlayerMorTime);
    1f0a:	60 91 f4 03 	lds	r22, 0x03F4	; 0x8003f4 <config+0x3e>
    1f0e:	70 91 f5 03 	lds	r23, 0x03F5	; 0x8003f5 <config+0x3f>
    1f12:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <config+0x40>
    1f16:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <config+0x41>
    1f1a:	05 cf       	rjmp	.-502    	; 0x1d26 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:176
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    1f1c:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <config+0x42>
    1f20:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <config+0x43>
    1f24:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <config+0x44>
    1f28:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:182
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1f2c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <toDurStr(char*, long, char) [clone .constprop.97]>
    1f30:	d5 ce       	rjmp	.-598    	; 0x1cdc <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:179
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    1f32:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <config+0x46>
    1f36:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <config+0x47>
    1f3a:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <config+0x48>
    1f3e:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <config+0x49>
    1f42:	f1 ce       	rjmp	.-542    	; 0x1d26 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:182
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1f44:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <config+0x4a>
    1f48:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <config+0x4b>
    1f4c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <config+0x4c>
    1f50:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <config+0x4d>
    1f54:	eb cf       	rjmp	.-42     	; 0x1f2c <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x368>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:185
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    1f56:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <config+0x20>
    1f5a:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <config+0x21>
    1f5e:	42 cf       	rjmp	.-380    	; 0x1de4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x220>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1f60:	60 91 d4 03 	lds	r22, 0x03D4	; 0x8003d4 <config+0x1e>
    1f64:	70 91 d5 03 	lds	r23, 0x03D5	; 0x8003d5 <config+0x1f>
    1f68:	3d cf       	rjmp	.-390    	; 0x1de4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x220>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:191
    break;    
  case mnuCmdReset:
    strbuf[0] = 0;
    1f6a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <strbuf>
    1f6e:	b6 ce       	rjmp	.-660    	; 0x1cdc <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:194
    break;
  default:
    strcpy(strbuf, NotImp);
    1f70:	66 e3       	ldi	r22, 0x36	; 54
    1f72:	71 e0       	ldi	r23, 0x01	; 1
    1f74:	88 e0       	ldi	r24, 0x08	; 8
    1f76:	94 e0       	ldi	r25, 0x04	; 4
    1f78:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
    1f7c:	af ce       	rjmp	.-674    	; 0x1cdc <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:151
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1f7e:	ce 01       	movw	r24, r28
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
    1f86:	26 e7       	ldi	r18, 0x76	; 118
    1f88:	31 e0       	ldi	r19, 0x01	; 1
    1f8a:	25 cf       	rjmp	.-438    	; 0x1dd6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x212>

00001f8c <showTime()>:
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:616

void showTime()
{
    1f8c:	6f 92       	push	r6
    1f8e:	7f 92       	push	r7
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	a3 97       	sbiw	r28, 0x23	; 35
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:620
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	09 96       	adiw	r24, 0x09	; 9
    1fba:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:538
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    1fbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fc0:	66 23       	and	r22, r22
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <showTime()+0x3a>
    1fc4:	e4 c0       	rjmp	.+456    	; 0x218e <showTime()+0x202>
    1fc6:	6c 30       	cpi	r22, 0x0C	; 12
    1fc8:	11 f0       	breq	.+4      	; 0x1fce <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:540
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    1fca:	08 f0       	brcs	.+2      	; 0x1fce <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:541
    return hh - 12;
    1fcc:	6c 50       	subi	r22, 0x0C	; 12
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:620
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:621
    lpad(h, intbuf, '0', 2);
    1fd8:	8e 01       	movw	r16, r28
    1fda:	08 5e       	subi	r16, 0xE8	; 232
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	42 e0       	ldi	r20, 0x02	; 2
    1fe0:	be 01       	movw	r22, r28
    1fe2:	6f 5f       	subi	r22, 0xFF	; 255
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:622
    inttostr(intbuf, rtc.now().minute());
    1fec:	ce 01       	movw	r24, r28
    1fee:	09 96       	adiw	r24, 0x09	; 9
    1ff0:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    1ff4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:623
    lpad(m, intbuf, '0', 2);
    2000:	7e 01       	movw	r14, r28
    2002:	2b e1       	ldi	r18, 0x1B	; 27
    2004:	e2 0e       	add	r14, r18
    2006:	f1 1c       	adc	r15, r1
    2008:	42 e0       	ldi	r20, 0x02	; 2
    200a:	be 01       	movw	r22, r28
    200c:	6f 5f       	subi	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	c7 01       	movw	r24, r14
    2012:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:624
    inttostr(intbuf, rtc.now().second());
    2016:	ce 01       	movw	r24, r28
    2018:	09 96       	adiw	r24, 0x09	; 9
    201a:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    201e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:625
    lpad(s, intbuf, '0', 2);
    202a:	6e 01       	movw	r12, r28
    202c:	3e e1       	ldi	r19, 0x1E	; 30
    202e:	c3 0e       	add	r12, r19
    2030:	d1 1c       	adc	r13, r1
    2032:	42 e0       	ldi	r20, 0x02	; 2
    2034:	be 01       	movw	r22, r28
    2036:	6f 5f       	subi	r22, 0xFF	; 255
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	c6 01       	movw	r24, r12
    203c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:627

    lcd.setCursor(0, 0);
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:628
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    2048:	ce 01       	movw	r24, r28
    204a:	09 96       	adiw	r24, 0x09	; 9
    204c:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    2050:	8c 85       	ldd	r24, Y+12	; 0x0c
    2052:	8c 30       	cpi	r24, 0x0C	; 12
    2054:	08 f0       	brcs	.+2      	; 0x2058 <showTime()+0xcc>
    2056:	9d c0       	rjmp	.+314    	; 0x2192 <showTime()+0x206>
    2058:	89 e9       	ldi	r24, 0x99	; 153
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	9f 93       	push	r25
    205e:	8f 93       	push	r24
    2060:	df 92       	push	r13
    2062:	cf 92       	push	r12
    2064:	80 ea       	ldi	r24, 0xA0	; 160
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	9f 93       	push	r25
    206a:	8f 93       	push	r24
    206c:	ff 92       	push	r15
    206e:	ef 92       	push	r14
    2070:	9f 93       	push	r25
    2072:	8f 93       	push	r24
    2074:	1f 93       	push	r17
    2076:	0f 93       	push	r16
    2078:	8d e9       	ldi	r24, 0x9D	; 157
    207a:	e8 2e       	mov	r14, r24
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	f8 2e       	mov	r15, r24
    2080:	ff 92       	push	r15
    2082:	ef 92       	push	r14
    2084:	97 e0       	ldi	r25, 0x07	; 7
    2086:	99 2e       	mov	r9, r25
    2088:	9f 92       	push	r9
    208a:	0a e2       	ldi	r16, 0x2A	; 42
    208c:	14 e0       	ldi	r17, 0x04	; 4
    208e:	1f 93       	push	r17
    2090:	0f 93       	push	r16
    2092:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
    2096:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:630

    inttostr(intbuf, rtc.now().day());
    209a:	ce 01       	movw	r24, r28
    209c:	09 96       	adiw	r24, 0x09	; 9
    209e:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	ce 01       	movw	r24, r28
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:631
    lpad(dat, intbuf, '0', 2);
    20ae:	6e 01       	movw	r12, r28
    20b0:	81 e2       	ldi	r24, 0x21	; 33
    20b2:	c8 0e       	add	r12, r24
    20b4:	d1 1c       	adc	r13, r1
    20b6:	42 e0       	ldi	r20, 0x02	; 2
    20b8:	be 01       	movw	r22, r28
    20ba:	6f 5f       	subi	r22, 0xFF	; 255
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	c6 01       	movw	r24, r12
    20c0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:632
    inttostr(intbuf, rtc.now().year());
    20c4:	ce 01       	movw	r24, r28
    20c6:	09 96       	adiw	r24, 0x09	; 9
    20c8:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    20cc:	69 85       	ldd	r22, Y+9	; 0x09
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	60 53       	subi	r22, 0x30	; 48
    20d2:	78 4f       	sbci	r23, 0xF8	; 248
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:632
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:633
    lpad(year, intbuf, '0', 4);
    20dc:	3e 01       	movw	r6, r28
    20de:	2f e0       	ldi	r18, 0x0F	; 15
    20e0:	62 0e       	add	r6, r18
    20e2:	71 1c       	adc	r7, r1
    20e4:	44 e0       	ldi	r20, 0x04	; 4
    20e6:	be 01       	movw	r22, r28
    20e8:	6f 5f       	subi	r22, 0xFF	; 255
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	c3 01       	movw	r24, r6
    20ee:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:634
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    20f2:	ce 01       	movw	r24, r28
    20f4:	09 96       	adiw	r24, 0x09	; 9
    20f6:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    20fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    20fc:	81 50       	subi	r24, 0x01	; 1
    20fe:	99 0b       	sbc	r25, r25
    2100:	26 e0       	ldi	r18, 0x06	; 6
    2102:	28 9f       	mul	r18, r24
    2104:	f0 01       	movw	r30, r0
    2106:	29 9f       	mul	r18, r25
    2108:	f0 0d       	add	r31, r0
    210a:	11 24       	eor	r1, r1
    210c:	ed 59       	subi	r30, 0x9D	; 157
    210e:	fb 4f       	sbci	r31, 0xFB	; 251
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	5e 01       	movw	r10, r28
    2116:	34 e1       	ldi	r19, 0x14	; 20
    2118:	a3 0e       	add	r10, r19
    211a:	b1 1c       	adc	r11, r1
    211c:	c5 01       	movw	r24, r10
    211e:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:636

    lcd.setCursor(0, 1);
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:637
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
    212a:	8c e9       	ldi	r24, 0x9C	; 156
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	9f 93       	push	r25
    2130:	8f 93       	push	r24
    2132:	7f 92       	push	r7
    2134:	6f 92       	push	r6
    2136:	82 ea       	ldi	r24, 0xA2	; 162
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	9f 93       	push	r25
    213c:	8f 93       	push	r24
    213e:	bf 92       	push	r11
    2140:	af 92       	push	r10
    2142:	9f 93       	push	r25
    2144:	8f 93       	push	r24
    2146:	df 92       	push	r13
    2148:	cf 92       	push	r12
    214a:	ff 92       	push	r15
    214c:	ef 92       	push	r14
    214e:	9f 92       	push	r9
    2150:	1f 93       	push	r17
    2152:	0f 93       	push	r16
    2154:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:638
}
    2166:	a3 96       	adiw	r28, 0x23	; 35
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	df 90       	pop	r13
    2180:	cf 90       	pop	r12
    2182:	bf 90       	pop	r11
    2184:	af 90       	pop	r10
    2186:	9f 90       	pop	r9
    2188:	7f 90       	pop	r7
    218a:	6f 90       	pop	r6
    218c:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:539
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    218e:	6c e0       	ldi	r22, 0x0C	; 12
    2190:	1e cf       	rjmp	.-452    	; 0x1fce <showTime()+0x42>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:628
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(0, 0);
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    2192:	82 e9       	ldi	r24, 0x92	; 146
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	62 cf       	rjmp	.-316    	; 0x205c <showTime()+0xd0>

00002198 <PlayChant()>:
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1337
    myDFPlayer.stop();
}

int n = 1;
void PlayChant()
{
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1339
    // Serial.println(String(hr));
    switch (playSong)
    21a0:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <playSong>
    21a4:	e9 30       	cpi	r30, 0x09	; 9
    21a6:	58 f5       	brcc	.+86     	; 0x21fe <PlayChant()+0x66>
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	e6 52       	subi	r30, 0x26	; 38
    21ac:	ff 4e       	sbci	r31, 0xEF	; 239
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1440
            delay(1000);
            playSong = End_of_Song;
        }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    21ae:	84 e0       	ldi	r24, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1339

int n = 1;
void PlayChant()
{
    // Serial.println(String(hr));
    switch (playSong)
    21b0:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__tablejump2__>
    21b4:	e3 10       	cpse	r14, r3
    21b6:	04 11       	cpse	r16, r4
    21b8:	15 11       	cpse	r17, r5
    21ba:	26 11       	cpse	r18, r6
    21bc:	37 11       	cpse	r19, r7
    21be:	4a 11       	cpse	r20, r10
    21c0:	7e 11       	cpse	r23, r14
    21c2:	e0 11       	cpse	r30, r0
    21c4:	07 12       	cpse	r0, r23
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1342
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    21c6:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    21ca:	89 2b       	or	r24, r25
    21cc:	c1 f0       	breq	.+48     	; 0x21fe <PlayChant()+0x66>
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    21ce:	0e 94 c5 2a 	call	0x558a	; 0x558a <random>
    21d2:	23 e1       	ldi	r18, 0x13	; 19
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    21de:	6f 5f       	subi	r22, 0xFF	; 255
    21e0:	7f 4f       	sbci	r23, 0xFF	; 255
    21e2:	8f 4f       	sbci	r24, 0xFF	; 255
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1344
        {
            myDFPlayer.playFolder(0, random(1, 20));
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1345
            delay(1000);
    21ec:	68 ee       	ldi	r22, 0xE8	; 232
    21ee:	73 e0       	ldi	r23, 0x03	; 3
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1346
            playSong = Time;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1436
    case Song_2:
        if (digitalRead(STA_PIN))
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    21fa:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <playSong>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1450
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1350
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    2208:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    220c:	89 2b       	or	r24, r25
    220e:	b9 f3       	breq	.-18     	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1352
        {
            myDFPlayer.playFolder(1, bell.hour());
    2210:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <bell+0x3>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1353
            delay(1000);
    221a:	68 ee       	ldi	r22, 0xE8	; 232
    221c:	73 e0       	ldi	r23, 0x03	; 3
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1354
            playSong = English_Month;
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	e8 cf       	rjmp	.-48     	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1358
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    222a:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    222e:	89 2b       	or	r24, r25
    2230:	31 f3       	breq	.-52     	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1360
        {
            myDFPlayer.playFolder(47, bell.month());
    2232:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <bell+0x1>
    2236:	8f e2       	ldi	r24, 0x2F	; 47
    2238:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1361
            delay(1000);
    223c:	68 ee       	ldi	r22, 0xE8	; 232
    223e:	73 e0       	ldi	r23, 0x03	; 3
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1362
            playSong = English_Date;
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	d7 cf       	rjmp	.-82     	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1366
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    224c:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2250:	89 2b       	or	r24, r25
    2252:	a9 f2       	breq	.-86     	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1368
        {
            myDFPlayer.playFolder(48, bell.day());
    2254:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <bell+0x2>
    2258:	80 e3       	ldi	r24, 0x30	; 48
    225a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1369
            delay(1000);
    225e:	68 ee       	ldi	r22, 0xE8	; 232
    2260:	73 e0       	ldi	r23, 0x03	; 3
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1370
            playSong = Day_of_Week;
    226a:	84 e0       	ldi	r24, 0x04	; 4
    226c:	c6 cf       	rjmp	.-116    	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1374
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    226e:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2272:	89 2b       	or	r24, r25
    2274:	21 f2       	breq	.-120    	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1376
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    2276:	0e 94 a4 02 	call	0x548	; 0x548 <DateTime::dayOfTheWeek() const [clone .constprop.19]>
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	68 0f       	add	r22, r24
    227e:	81 e3       	ldi	r24, 0x31	; 49
    2280:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1377
            delay(1000);
    2284:	68 ee       	ldi	r22, 0xE8	; 232
    2286:	73 e0       	ldi	r23, 0x03	; 3
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1378
            playSong = Tamil_Date;
    2290:	85 e0       	ldi	r24, 0x05	; 5
    2292:	b3 cf       	rjmp	.-154    	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1382
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    2294:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2298:	89 2b       	or	r24, r25
    229a:	09 f4       	brne	.+2      	; 0x229e <PlayChant()+0x106>
    229c:	b0 cf       	rjmp	.-160    	; 0x21fe <PlayChant()+0x66>
    229e:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <bell+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1384
        {
            if (bell.hour() == 6 || bell.hour() == 8 || bell.hour() == 10)
    22a2:	86 30       	cpi	r24, 0x06	; 6
    22a4:	19 f0       	breq	.+6      	; 0x22ac <PlayChant()+0x114>
    22a6:	8d 7f       	andi	r24, 0xFD	; 253
    22a8:	88 30       	cpi	r24, 0x08	; 8
    22aa:	c9 f4       	brne	.+50     	; 0x22de <PlayChant()+0x146>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    22ac:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <bell>
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	80 53       	subi	r24, 0x30	; 48
    22b4:	98 4f       	sbci	r25, 0xF8	; 248
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1386
            {
                if (bell.year() == config.DataYear)
    22b6:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <config+0x1e>
    22ba:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <config+0x1f>
    22be:	28 17       	cp	r18, r24
    22c0:	39 07       	cpc	r19, r25
    22c2:	79 f4       	brne	.+30     	; 0x22e2 <PlayChant()+0x14a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1388
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    22c4:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <bell+0x1>
    22c8:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <bell+0x2>
    22cc:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1393
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    22ce:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1394
                    delay(1000);
    22d2:	68 ee       	ldi	r22, 0xE8	; 232
    22d4:	73 e0       	ldi	r23, 0x03	; 3
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1400
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    22de:	86 e0       	ldi	r24, 0x06	; 6
    22e0:	8c cf       	rjmp	.-232    	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1391
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    22e2:	21 50       	subi	r18, 0x01	; 1
    22e4:	31 09       	sbc	r19, r1
    22e6:	28 17       	cp	r18, r24
    22e8:	39 07       	cpc	r19, r25
    22ea:	c9 f7       	brne	.-14     	; 0x22de <PlayChant()+0x146>
    22ec:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <bell+0x1>
    22f0:	8c 30       	cpi	r24, 0x0C	; 12
    22f2:	a9 f7       	brne	.-22     	; 0x22de <PlayChant()+0x146>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1393
                {
                    myDFPlayer.playFolder(50, bell.day());
    22f4:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <bell+0x2>
    22f8:	82 e3       	ldi	r24, 0x32	; 50
    22fa:	e9 cf       	rjmp	.-46     	; 0x22ce <PlayChant()+0x136>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1406
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    22fc:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2300:	89 2b       	or	r24, r25
    2302:	09 f4       	brne	.+2      	; 0x2306 <PlayChant()+0x16e>
    2304:	7c cf       	rjmp	.-264    	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1408
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    2306:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <config+0x22>
    230a:	30 91 d9 03 	lds	r19, 0x03D9	; 0x8003d9 <config+0x23>
    230e:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <bell+0x3>
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	28 17       	cp	r18, r24
    2316:	39 07       	cpc	r19, r25
    2318:	19 f4       	brne	.+6      	; 0x2320 <PlayChant()+0x188>
    231a:	23 30       	cpi	r18, 0x03	; 3
    231c:	31 05       	cpc	r19, r1
    231e:	d9 f5       	brne	.+118    	; 0x2396 <PlayChant()+0x1fe>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1414
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    2320:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <config+0x26>
    2324:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <config+0x27>
    2328:	a9 01       	movw	r20, r18
    232a:	44 5f       	subi	r20, 0xF4	; 244
    232c:	5f 4f       	sbci	r21, 0xFF	; 255
    232e:	84 17       	cp	r24, r20
    2330:	95 07       	cpc	r25, r21
    2332:	e9 f1       	breq	.+122    	; 0x23ae <PlayChant()+0x216>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1422
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                myDFPlayer.playMp3Folder(random(1, config.Song1_Count));
    2334:	c0 90 d0 03 	lds	r12, 0x03D0	; 0x8003d0 <config+0x1a>
    2338:	d0 90 d1 03 	lds	r13, 0x03D1	; 0x8003d1 <config+0x1b>
    233c:	0d 2c       	mov	r0, r13
    233e:	00 0c       	add	r0, r0
    2340:	ee 08       	sbc	r14, r14
    2342:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    234c:	82 e0       	ldi	r24, 0x02	; 2
    234e:	c8 16       	cp	r12, r24
    2350:	d1 04       	cpc	r13, r1
    2352:	e1 04       	cpc	r14, r1
    2354:	f1 04       	cpc	r15, r1
    2356:	74 f0       	brlt	.+28     	; 0x2374 <PlayChant()+0x1dc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2358:	0e 94 c5 2a 	call	0x558a	; 0x558a <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    235c:	a7 01       	movw	r20, r14
    235e:	96 01       	movw	r18, r12
    2360:	21 50       	subi	r18, 0x01	; 1
    2362:	31 09       	sbc	r19, r1
    2364:	41 09       	sbc	r20, r1
    2366:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2368:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    236c:	6f 5f       	subi	r22, 0xFF	; 255
    236e:	7f 4f       	sbci	r23, 0xFF	; 255
    2370:	8f 4f       	sbci	r24, 0xFF	; 255
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    2374:	82 e1       	ldi	r24, 0x12	; 18
    2376:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1423
                delay(1000);
    237a:	68 ee       	ldi	r22, 0xE8	; 232
    237c:	73 e0       	ldi	r23, 0x03	; 3
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1424
                if (config.Song2_Count != 0)
    2386:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <config+0x1c>
    238a:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <config+0x1d>
    238e:	89 2b       	or	r24, r25
    2390:	a9 f4       	brne	.+42     	; 0x23bc <PlayChant()+0x224>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1436
    case Song_2:
        if (digitalRead(STA_PIN))
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    2392:	88 e0       	ldi	r24, 0x08	; 8
    2394:	32 cf       	rjmp	.-412    	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1410
    case Song_1:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    2396:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1416
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    239a:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1434
        }
        break;
    case Song_2:
        if (digitalRead(STA_PIN))
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
    239c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1435
            delay(1000);
    23a0:	68 ee       	ldi	r22, 0xE8	; 232
    23a2:	73 e0       	ldi	r23, 0x03	; 3
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 23 04 	call	0x846	; 0x846 <delay>
    23ac:	f2 cf       	rjmp	.-28     	; 0x2392 <PlayChant()+0x1fa>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1414
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    23ae:	23 30       	cpi	r18, 0x03	; 3
    23b0:	31 05       	cpc	r19, r1
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <PlayChant()+0x21e>
    23b4:	bf cf       	rjmp	.-130    	; 0x2334 <PlayChant()+0x19c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1416
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    23b6:	60 91 e2 03 	lds	r22, 0x03E2	; 0x8003e2 <config+0x2c>
    23ba:	ef cf       	rjmp	.-34     	; 0x239a <PlayChant()+0x202>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1425
            else
            {
                myDFPlayer.playMp3Folder(random(1, config.Song1_Count));
                delay(1000);
                if (config.Song2_Count != 0)
                    playSong = Song_2;
    23bc:	87 e0       	ldi	r24, 0x07	; 7
    23be:	1d cf       	rjmp	.-454    	; 0x21fa <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1432
                    playSong = End_of_Song;
            }
        }
        break;
    case Song_2:
        if (digitalRead(STA_PIN))
    23c0:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    23c4:	89 2b       	or	r24, r25
    23c6:	09 f4       	brne	.+2      	; 0x23ca <PlayChant()+0x232>
    23c8:	1a cf       	rjmp	.-460    	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1434
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
    23ca:	c0 90 d2 03 	lds	r12, 0x03D2	; 0x8003d2 <config+0x1c>
    23ce:	d0 90 d3 03 	lds	r13, 0x03D3	; 0x8003d3 <config+0x1d>
    23d2:	0d 2c       	mov	r0, r13
    23d4:	00 0c       	add	r0, r0
    23d6:	ee 08       	sbc	r14, r14
    23d8:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	c8 16       	cp	r12, r24
    23e6:	d1 04       	cpc	r13, r1
    23e8:	e1 04       	cpc	r14, r1
    23ea:	f1 04       	cpc	r15, r1
    23ec:	74 f0       	brlt	.+28     	; 0x240a <PlayChant()+0x272>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    23ee:	0e 94 c5 2a 	call	0x558a	; 0x558a <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    23f2:	a7 01       	movw	r20, r14
    23f4:	96 01       	movw	r18, r12
    23f6:	21 50       	subi	r18, 0x01	; 1
    23f8:	31 09       	sbc	r19, r1
    23fa:	41 09       	sbc	r20, r1
    23fc:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    23fe:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2402:	6f 5f       	subi	r22, 0xFF	; 255
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	8f 4f       	sbci	r24, 0xFF	; 255
    2408:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1434
    240a:	86 e0       	ldi	r24, 0x06	; 6
    240c:	c7 cf       	rjmp	.-114    	; 0x239c <PlayChant()+0x204>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1440
            delay(1000);
            playSong = End_of_Song;
        }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    240e:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2412:	89 2b       	or	r24, r25
    2414:	09 f4       	brne	.+2      	; 0x2418 <PlayChant()+0x280>
    2416:	f3 ce       	rjmp	.-538    	; 0x21fe <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1442
        {
            playSong = Starting_Song;
    2418:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <playSong>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1443
            lcd.clear();
    241c:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1444
            appMode = APP_NORMAL_MODE;
    2420:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1445
            timrLCD = millis();
    2424:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    2428:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <timrLCD>
    242c:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <timrLCD+0x1>
    2430:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timrLCD+0x2>
    2434:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1446
            digitalWrite(AMP, LOW);
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1450
        }
        break;
    }
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1446
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    2444:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <digitalWrite>

00002448 <refreshMenuDisplay(unsigned char)>:
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1278
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	61 97       	sbiw	r28, 0x11	; 17
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1281
    char nameBuf[LCD_COLS + 1];
    byte cmdId;
    cmdId = Menu1.getCurrentItemCmdId();
    245e:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    2462:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1282
    lcd.setCursor(0, 0);
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1283
    if (Menu1.currentItemHasChildren())
    246c:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.103]>
    2470:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <Menu1+0x6>
    2474:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <Menu1+0x3>
    2478:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <Menu1+0x4>
    247c:	88 23       	and	r24, r24
    247e:	49 f1       	breq	.+82     	; 0x24d2 <refreshMenuDisplay(unsigned char)+0x8a>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    2480:	86 e0       	ldi	r24, 0x06	; 6
    2482:	98 9f       	mul	r25, r24
    2484:	e0 0d       	add	r30, r0
    2486:	f1 1d       	adc	r31, r1
    2488:	11 24       	eor	r1, r1
    248a:	31 96       	adiw	r30, 0x01	; 1
    248c:	65 91       	lpm	r22, Z+
    248e:	74 91       	lpm	r23, Z
    2490:	ce 01       	movw	r24, r28
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	0e 94 1d 2b 	call	0x563a	; 0x563a <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1285
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    2498:	0e 94 ac 0b 	call	0x1758	; 0x1758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1286
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    249c:	8e e7       	ldi	r24, 0x7E	; 126
    249e:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1287
        lcd.print(strbuf);
    24a2:	8a e2       	ldi	r24, 0x2A	; 42
    24a4:	94 e0       	ldi	r25, 0x04	; 4
    24a6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1288
        if (cmdId == mnuCmdLt1OnTime ||
    24aa:	8b ee       	ldi	r24, 0xEB	; 235
    24ac:	81 0f       	add	r24, r17
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1293
            cmdId == mnuCmdLt1OffTime ||
            cmdId == mnuCmdPlrMorOnTime ||
            cmdId == mnuCmdPlrEveOnTime)
        {
            lcd.setCursor(0, 1);
    24ae:	61 e0       	ldi	r22, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1288
    if (Menu1.currentItemHasChildren())
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
        lcd.print(strbuf);
        if (cmdId == mnuCmdLt1OnTime ||
    24b0:	82 30       	cpi	r24, 0x02	; 2
    24b2:	20 f0       	brcs	.+8      	; 0x24bc <refreshMenuDisplay(unsigned char)+0x74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1289
            cmdId == mnuCmdLt1OffTime ||
    24b4:	81 2f       	mov	r24, r17
    24b6:	8d 7f       	andi	r24, 0xFD	; 253
    24b8:	88 31       	cpi	r24, 0x18	; 24
    24ba:	31 f5       	brne	.+76     	; 0x2508 <refreshMenuDisplay(unsigned char)+0xc0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1316
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1317
            lcd.print(" ");
    24c2:	8e e9       	ldi	r24, 0x9E	; 158
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1318
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    24ca:	81 2f       	mov	r24, r17
    24cc:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    24d0:	20 c0       	rjmp	.+64     	; 0x2512 <refreshMenuDisplay(unsigned char)+0xca>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:53
    24d2:	86 e0       	ldi	r24, 0x06	; 6
    24d4:	98 9f       	mul	r25, r24
    24d6:	e0 0d       	add	r30, r0
    24d8:	f1 1d       	adc	r31, r1
    24da:	11 24       	eor	r1, r1
    24dc:	31 96       	adiw	r30, 0x01	; 1
    24de:	65 91       	lpm	r22, Z+
    24e0:	74 91       	lpm	r23, Z
    24e2:	ce 01       	movw	r24, r28
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	0e 94 1d 2b 	call	0x563a	; 0x563a <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1305
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
        }
    }
    else
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    24ea:	0e 94 ac 0b 	call	0x1758	; 0x1758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1306
        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    24ee:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    24f2:	18 2f       	mov	r17, r24
    24f4:	81 11       	cpse	r24, r1
    24f6:	1b c0       	rjmp	.+54     	; 0x252e <refreshMenuDisplay(unsigned char)+0xe6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1308
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    24f8:	8f e7       	ldi	r24, 0x7F	; 127
    24fa:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1309
            lcd.print(strbuf);
    24fe:	8a e2       	ldi	r24, 0x2A	; 42
    2500:	94 e0       	ldi	r25, 0x04	; 4
    2502:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1310
            lcd.setCursor(0, 1);
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1311
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    250e:	81 e2       	ldi	r24, 0x21	; 33
    2510:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1318
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    2512:	0e 94 ac 0b 	call	0x1758	; 0x1758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    2516:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1321
        }
    }
}
    251a:	61 96       	adiw	r28, 0x11	; 17
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1315
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
    252e:	8a e2       	ldi	r24, 0x2A	; 42
    2530:	94 e0       	ldi	r25, 0x04	; 4
    2532:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1316
            lcd.setCursor(0, 1);
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	c1 cf       	rjmp	.-126    	; 0x24bc <refreshMenuDisplay(unsigned char)+0x74>

0000253a <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	2f 93       	push	r18
    2546:	3f 93       	push	r19
    2548:	8f 93       	push	r24
    254a:	9f 93       	push	r25
    254c:	af 93       	push	r26
    254e:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    2550:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_millis>
    2554:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_millis+0x1>
    2558:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_millis+0x2>
    255c:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    2560:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    2564:	23 e0       	ldi	r18, 0x03	; 3
    2566:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    2568:	2d 37       	cpi	r18, 0x7D	; 125
    256a:	68 f1       	brcs	.+90     	; 0x25c6 <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    256c:	26 e8       	ldi	r18, 0x86	; 134
    256e:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    2570:	02 96       	adiw	r24, 0x02	; 2
    2572:	a1 1d       	adc	r26, r1
    2574:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2576:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    257a:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_millis>
    257e:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_millis+0x1>
    2582:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_millis+0x2>
    2586:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    258a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <timer0_overflow_count>
    258e:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x1>
    2592:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x2>
    2596:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <timer0_overflow_count+0x3>
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	a1 1d       	adc	r26, r1
    259e:	b1 1d       	adc	r27, r1
    25a0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <timer0_overflow_count>
    25a4:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <timer0_overflow_count+0x1>
    25a8:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <timer0_overflow_count+0x2>
    25ac:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    25b0:	bf 91       	pop	r27
    25b2:	af 91       	pop	r26
    25b4:	9f 91       	pop	r25
    25b6:	8f 91       	pop	r24
    25b8:	3f 91       	pop	r19
    25ba:	2f 91       	pop	r18
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	0f 90       	pop	r0
    25c2:	1f 90       	pop	r1
    25c4:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	a1 1d       	adc	r26, r1
    25ca:	b1 1d       	adc	r27, r1
    25cc:	d4 cf       	rjmp	.-88     	; 0x2576 <__vector_16+0x3c>

000025ce <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    25ce:	1f 92       	push	r1
    25d0:	0f 92       	push	r0
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	0f 92       	push	r0
    25d6:	11 24       	eor	r1, r1
    25d8:	2f 93       	push	r18
    25da:	3f 93       	push	r19
    25dc:	4f 93       	push	r20
    25de:	5f 93       	push	r21
    25e0:	6f 93       	push	r22
    25e2:	7f 93       	push	r23
    25e4:	8f 93       	push	r24
    25e6:	9f 93       	push	r25
    25e8:	af 93       	push	r26
    25ea:	bf 93       	push	r27
    25ec:	ef 93       	push	r30
    25ee:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    25f0:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
    25f4:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
    25f8:	30 97       	sbiw	r30, 0x00	; 0
    25fa:	49 f0       	breq	.+18     	; 0x260e <__vector_3+0x40>
    25fc:	a6 85       	ldd	r26, Z+14	; 0x0e
    25fe:	b7 85       	ldd	r27, Z+15	; 0x0f
    2600:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2602:	96 8d       	ldd	r25, Z+30	; 0x1e
    2604:	91 ff       	sbrs	r25, 1
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2608:	9c 91       	ld	r25, X
    260a:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    260c:	a1 f4       	brne	.+40     	; 0x2636 <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    260e:	ff 91       	pop	r31
    2610:	ef 91       	pop	r30
    2612:	bf 91       	pop	r27
    2614:	af 91       	pop	r26
    2616:	9f 91       	pop	r25
    2618:	8f 91       	pop	r24
    261a:	7f 91       	pop	r23
    261c:	6f 91       	pop	r22
    261e:	5f 91       	pop	r21
    2620:	4f 91       	pop	r20
    2622:	3f 91       	pop	r19
    2624:	2f 91       	pop	r18
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	0f 90       	pop	r0
    262c:	1f 90       	pop	r1
    262e:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2630:	9c 91       	ld	r25, X
    2632:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2634:	61 f7       	brne	.-40     	; 0x260e <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2636:	a3 89       	ldd	r26, Z+19	; 0x13
    2638:	b4 89       	ldd	r27, Z+20	; 0x14
    263a:	9c 91       	ld	r25, X
    263c:	85 89       	ldd	r24, Z+21	; 0x15
    263e:	80 95       	com	r24
    2640:	89 23       	and	r24, r25
    2642:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2644:	86 89       	ldd	r24, Z+22	; 0x16
    2646:	97 89       	ldd	r25, Z+23	; 0x17
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    264c:	60 8d       	ldd	r22, Z+24	; 0x18
    264e:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2650:	a6 85       	ldd	r26, Z+14	; 0x0e
    2652:	b7 85       	ldd	r27, Z+15	; 0x0f
    2654:	55 85       	ldd	r21, Z+13	; 0x0d
    2656:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2658:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    265a:	cb 01       	movw	r24, r22
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2660:	82 2f       	mov	r24, r18
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	95 95       	asr	r25
    2666:	87 95       	ror	r24
    2668:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    266a:	4c 91       	ld	r20, X
    266c:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    266e:	09 f0       	breq	.+2      	; 0x2672 <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    2670:	20 68       	ori	r18, 0x80	; 128
    2672:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    2674:	91 f7       	brne	.-28     	; 0x265a <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    2676:	86 8d       	ldd	r24, Z+30	; 0x1e
    2678:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    267a:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    267c:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	8f 73       	andi	r24, 0x3F	; 63
    2686:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    2688:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
    268c:	38 17       	cp	r19, r24
    268e:	99 f0       	breq	.+38     	; 0x26b6 <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2690:	a0 91 dc 02 	lds	r26, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	ae 56       	subi	r26, 0x6E	; 110
    2698:	bd 4f       	sbci	r27, 0xFD	; 253
    269a:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    269c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    26a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    26a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    26a8:	a3 89       	ldd	r26, Z+19	; 0x13
    26aa:	b4 89       	ldd	r27, Z+20	; 0x14
    26ac:	8c 91       	ld	r24, X
    26ae:	95 89       	ldd	r25, Z+21	; 0x15
    26b0:	89 2b       	or	r24, r25
    26b2:	8c 93       	st	X, r24
    26b4:	ac cf       	rjmp	.-168    	; 0x260e <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    26b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    26b8:	81 60       	ori	r24, 0x01	; 1
    26ba:	86 8f       	std	Z+30, r24	; 0x1e
    26bc:	f1 cf       	rjmp	.-30     	; 0x26a0 <__vector_3+0xd2>

000026be <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    26be:	1f 92       	push	r1
    26c0:	0f 92       	push	r0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	0f 92       	push	r0
    26c6:	11 24       	eor	r1, r1
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	6f 93       	push	r22
    26d2:	7f 93       	push	r23
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	af 93       	push	r26
    26da:	bf 93       	push	r27
    26dc:	ef 93       	push	r30
    26de:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    26e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    26e4:	88 7f       	andi	r24, 0xF8	; 248
    26e6:	80 36       	cpi	r24, 0x60	; 96
    26e8:	09 f4       	brne	.+2      	; 0x26ec <__vector_24+0x2e>
    26ea:	4a c0       	rjmp	.+148    	; 0x2780 <__vector_24+0xc2>
    26ec:	f0 f5       	brcc	.+124    	; 0x276a <__vector_24+0xac>
    26ee:	88 32       	cpi	r24, 0x28	; 40
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <__vector_24+0x36>
    26f2:	a7 c0       	rjmp	.+334    	; 0x2842 <__vector_24+0x184>
    26f4:	18 f5       	brcc	.+70     	; 0x273c <__vector_24+0x7e>
    26f6:	80 31       	cpi	r24, 0x10	; 16
    26f8:	09 f4       	brne	.+2      	; 0x26fc <__vector_24+0x3e>
    26fa:	9b c0       	rjmp	.+310    	; 0x2832 <__vector_24+0x174>
    26fc:	b8 f4       	brcc	.+46     	; 0x272c <__vector_24+0x6e>
    26fe:	88 23       	and	r24, r24
    2700:	09 f4       	brne	.+2      	; 0x2704 <__vector_24+0x46>
    2702:	f9 c0       	rjmp	.+498    	; 0x28f6 <__vector_24+0x238>
    2704:	88 30       	cpi	r24, 0x08	; 8
    2706:	09 f4       	brne	.+2      	; 0x270a <__vector_24+0x4c>
    2708:	94 c0       	rjmp	.+296    	; 0x2832 <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    270a:	ff 91       	pop	r31
    270c:	ef 91       	pop	r30
    270e:	bf 91       	pop	r27
    2710:	af 91       	pop	r26
    2712:	9f 91       	pop	r25
    2714:	8f 91       	pop	r24
    2716:	7f 91       	pop	r23
    2718:	6f 91       	pop	r22
    271a:	5f 91       	pop	r21
    271c:	4f 91       	pop	r20
    271e:	3f 91       	pop	r19
    2720:	2f 91       	pop	r18
    2722:	0f 90       	pop	r0
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	0f 90       	pop	r0
    2728:	1f 90       	pop	r1
    272a:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    272c:	88 31       	cpi	r24, 0x18	; 24
    272e:	09 f4       	brne	.+2      	; 0x2732 <__vector_24+0x74>
    2730:	88 c0       	rjmp	.+272    	; 0x2842 <__vector_24+0x184>
    2732:	80 32       	cpi	r24, 0x20	; 32
    2734:	51 f7       	brne	.-44     	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2736:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_error>
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    273c:	80 34       	cpi	r24, 0x40	; 64
    273e:	09 f4       	brne	.+2      	; 0x2742 <__vector_24+0x84>
    2740:	9d c0       	rjmp	.+314    	; 0x287c <__vector_24+0x1be>
    2742:	40 f4       	brcc	.+16     	; 0x2754 <__vector_24+0x96>
    2744:	80 33       	cpi	r24, 0x30	; 48
    2746:	b9 f3       	breq	.-18     	; 0x2736 <__vector_24+0x78>
    2748:	88 33       	cpi	r24, 0x38	; 56
    274a:	f9 f6       	brne	.-66     	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    274c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2750:	85 ec       	ldi	r24, 0xC5	; 197
    2752:	b0 c0       	rjmp	.+352    	; 0x28b4 <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2754:	80 35       	cpi	r24, 0x50	; 80
    2756:	09 f4       	brne	.+2      	; 0x275a <__vector_24+0x9c>
    2758:	85 c0       	rjmp	.+266    	; 0x2864 <__vector_24+0x1a6>
    275a:	88 35       	cpi	r24, 0x58	; 88
    275c:	09 f4       	brne	.+2      	; 0x2760 <__vector_24+0xa2>
    275e:	96 c0       	rjmp	.+300    	; 0x288c <__vector_24+0x1ce>
    2760:	88 34       	cpi	r24, 0x48	; 72
    2762:	99 f6       	brne	.-90     	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2764:	0e 94 d4 06 	call	0xda8	; 0xda8 <twi_stop>
    2768:	d0 cf       	rjmp	.-96     	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    276a:	88 39       	cpi	r24, 0x98	; 152
    276c:	09 f4       	brne	.+2      	; 0x2770 <__vector_24+0xb2>
    276e:	8c c0       	rjmp	.+280    	; 0x2888 <__vector_24+0x1ca>
    2770:	38 f5       	brcc	.+78     	; 0x27c0 <__vector_24+0x102>
    2772:	88 37       	cpi	r24, 0x78	; 120
    2774:	29 f0       	breq	.+10     	; 0x2780 <__vector_24+0xc2>
    2776:	50 f4       	brcc	.+20     	; 0x278c <__vector_24+0xce>
    2778:	88 36       	cpi	r24, 0x68	; 104
    277a:	11 f0       	breq	.+4      	; 0x2780 <__vector_24+0xc2>
    277c:	80 37       	cpi	r24, 0x70	; 112
    277e:	29 f6       	brne	.-118    	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2786:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_rxBufferIndex>
    278a:	57 c0       	rjmp	.+174    	; 0x283a <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    278c:	88 38       	cpi	r24, 0x88	; 136
    278e:	09 f4       	brne	.+2      	; 0x2792 <__vector_24+0xd4>
    2790:	7b c0       	rjmp	.+246    	; 0x2888 <__vector_24+0x1ca>
    2792:	80 39       	cpi	r24, 0x90	; 144
    2794:	19 f0       	breq	.+6      	; 0x279c <__vector_24+0xde>
    2796:	80 38       	cpi	r24, 0x80	; 128
    2798:	09 f0       	breq	.+2      	; 0x279c <__vector_24+0xde>
    279a:	b7 cf       	rjmp	.-146    	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    279c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_rxBufferIndex>
    27a0:	80 32       	cpi	r24, 0x20	; 32
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <__vector_24+0xe8>
    27a4:	71 c0       	rjmp	.+226    	; 0x2888 <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    27a6:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <twi_rxBufferIndex>
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	8e 0f       	add	r24, r30
    27ae:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <twi_rxBufferIndex>
    27b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	ef 58       	subi	r30, 0x8F	; 143
    27ba:	fd 4f       	sbci	r31, 0xFD	; 253
    27bc:	80 83       	st	Z, r24
    27be:	3d c0       	rjmp	.+122    	; 0x283a <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    27c0:	80 3b       	cpi	r24, 0xB0	; 176
    27c2:	39 f0       	breq	.+14     	; 0x27d2 <__vector_24+0x114>
    27c4:	e0 f4       	brcc	.+56     	; 0x27fe <__vector_24+0x140>
    27c6:	80 3a       	cpi	r24, 0xA0	; 160
    27c8:	09 f4       	brne	.+2      	; 0x27cc <__vector_24+0x10e>
    27ca:	79 c0       	rjmp	.+242    	; 0x28be <__vector_24+0x200>
    27cc:	88 3a       	cpi	r24, 0xA8	; 168
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <__vector_24+0x114>
    27d0:	9c cf       	rjmp	.-200    	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    27d2:	84 e0       	ldi	r24, 0x04	; 4
    27d4:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    27d8:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    27dc:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    27e0:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <twi_onSlaveTransmit>
    27e4:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <twi_onSlaveTransmit+0x1>
    27e8:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    27ea:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
    27ee:	81 11       	cpse	r24, r1
    27f0:	0f c0       	rjmp	.+30     	; 0x2810 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    27f8:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <twi_txBuffer>
    27fc:	09 c0       	rjmp	.+18     	; 0x2810 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    27fe:	80 3c       	cpi	r24, 0xC0	; 192
    2800:	09 f4       	brne	.+2      	; 0x2804 <__vector_24+0x146>
    2802:	a6 cf       	rjmp	.-180    	; 0x2750 <__vector_24+0x92>
    2804:	88 3c       	cpi	r24, 0xC8	; 200
    2806:	09 f4       	brne	.+2      	; 0x280a <__vector_24+0x14c>
    2808:	a3 cf       	rjmp	.-186    	; 0x2750 <__vector_24+0x92>
    280a:	88 3b       	cpi	r24, 0xB8	; 184
    280c:	09 f0       	breq	.+2      	; 0x2810 <__vector_24+0x152>
    280e:	7d cf       	rjmp	.-262    	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2810:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <twi_txBufferIndex>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	8e 0f       	add	r24, r30
    2818:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <twi_txBufferIndex>
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	e1 5b       	subi	r30, 0xB1	; 177
    2820:	fd 4f       	sbci	r31, 0xFD	; 253
    2822:	80 81       	ld	r24, Z
    2824:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2828:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <twi_txBufferIndex>
    282c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
    2830:	29 c0       	rjmp	.+82     	; 0x2884 <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2832:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2836:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    283a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    283c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2840:	64 cf       	rjmp	.-312    	; 0x270a <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2842:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <twi_masterBufferIndex>
    2846:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_masterBufferLength>
    284a:	98 17       	cp	r25, r24
    284c:	58 f5       	brcc	.+86     	; 0x28a4 <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    284e:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <twi_masterBufferIndex>
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	8e 0f       	add	r24, r30
    2856:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_masterBufferIndex>
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	e9 59       	subi	r30, 0x99	; 153
    285e:	fc 4f       	sbci	r31, 0xFC	; 252
    2860:	80 81       	ld	r24, Z
    2862:	e9 cf       	rjmp	.-46     	; 0x2836 <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2864:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <twi_masterBufferIndex>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	8e 0f       	add	r24, r30
    286c:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_masterBufferIndex>
    2870:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	e9 59       	subi	r30, 0x99	; 153
    2878:	fc 4f       	sbci	r31, 0xFC	; 252
    287a:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    287c:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <twi_masterBufferIndex>
    2880:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2884:	98 17       	cp	r25, r24
    2886:	c8 f2       	brcs	.-78     	; 0x283a <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2888:	85 e8       	ldi	r24, 0x85	; 133
    288a:	d8 cf       	rjmp	.-80     	; 0x283c <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    288c:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <twi_masterBufferIndex>
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	8e 0f       	add	r24, r30
    2894:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_masterBufferIndex>
    2898:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	e9 59       	subi	r30, 0x99	; 153
    28a0:	fc 4f       	sbci	r31, 0xFC	; 252
    28a2:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    28a4:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_sendStop>
    28a8:	81 11       	cpse	r24, r1
    28aa:	5c cf       	rjmp	.-328    	; 0x2764 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    28b2:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    28b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    28b8:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
    28bc:	26 cf       	rjmp	.-436    	; 0x270a <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    28be:	85 ec       	ldi	r24, 0xC5	; 197
    28c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    28c4:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    28c8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_rxBufferIndex>
    28cc:	80 32       	cpi	r24, 0x20	; 32
    28ce:	30 f4       	brcc	.+12     	; 0x28dc <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    28d0:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <twi_rxBufferIndex>
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	ef 58       	subi	r30, 0x8F	; 143
    28d8:	fd 4f       	sbci	r31, 0xFD	; 253
    28da:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    28dc:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <twi_rxBufferIndex>
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <twi_onSlaveReceive>
    28e6:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <twi_onSlaveReceive+0x1>
    28ea:	81 e7       	ldi	r24, 0x71	; 113
    28ec:	92 e0       	ldi	r25, 0x02	; 2
    28ee:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    28f0:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_rxBufferIndex>
    28f4:	0a cf       	rjmp	.-492    	; 0x270a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    28f6:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_error>
    28fa:	34 cf       	rjmp	.-408    	; 0x2764 <__vector_24+0xa6>

000028fc <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621>:
_GLOBAL__I_65535_0_ChantBellV3.2.ino.cpp.o.3621():
    28fc:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <Wire+0x3>
    2900:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <Wire+0x2>
    2904:	88 ee       	ldi	r24, 0xE8	; 232
    2906:	93 e0       	ldi	r25, 0x03	; 3
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <Wire+0x4>
    2910:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <Wire+0x5>
    2914:	a0 93 5d 04 	sts	0x045D, r26	; 0x80045d <Wire+0x6>
    2918:	b0 93 5e 04 	sts	0x045E, r27	; 0x80045e <Wire+0x7>
    291c:	20 e4       	ldi	r18, 0x40	; 64
    291e:	31 e0       	ldi	r19, 0x01	; 1
    2920:	30 93 58 04 	sts	0x0458, r19	; 0x800458 <Wire+0x1>
    2924:	20 93 57 04 	sts	0x0457, r18	; 0x800457 <Wire>
    2928:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <mySoftwareSerial+0x3>
    292c:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <mySoftwareSerial+0x2>
    2930:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <mySoftwareSerial+0x4>
    2934:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <mySoftwareSerial+0x5>
    2938:	a0 93 e9 04 	sts	0x04E9, r26	; 0x8004e9 <mySoftwareSerial+0x6>
    293c:	b0 93 ea 04 	sts	0x04EA, r27	; 0x8004ea <mySoftwareSerial+0x7>
    2940:	8e e5       	ldi	r24, 0x5E	; 94
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <mySoftwareSerial+0x1>
    2948:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <mySoftwareSerial>
    294c:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <mySoftwareSerial+0x17>
    2950:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <mySoftwareSerial+0x16>
    2954:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <mySoftwareSerial+0x19>
    2958:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <mySoftwareSerial+0x18>
    295c:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <mySoftwareSerial+0x1b>
    2960:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <mySoftwareSerial+0x1a>
    2964:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <mySoftwareSerial+0x1d>
    2968:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <mySoftwareSerial+0x1c>
    296c:	60 91 01 05 	lds	r22, 0x0501	; 0x800501 <mySoftwareSerial+0x1e>
    2970:	6e 7f       	andi	r22, 0xFE	; 254
    2972:	6d 7f       	andi	r22, 0xFD	; 253
    2974:	60 93 01 05 	sts	0x0501, r22	; 0x800501 <mySoftwareSerial+0x1e>
    2978:	66 95       	lsr	r22
    297a:	61 70       	andi	r22, 0x01	; 1
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	68 27       	eor	r22, r24
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
    298e:	e0 ee       	ldi	r30, 0xE0	; 224
    2990:	f3 e0       	ldi	r31, 0x03	; 3
    2992:	e4 91       	lpm	r30, Z
    2994:	e0 93 f3 04 	sts	0x04F3, r30	; 0x8004f3 <mySoftwareSerial+0x10>
    2998:	e9 ec       	ldi	r30, 0xC9	; 201
    299a:	f3 e0       	ldi	r31, 0x03	; 3
    299c:	e4 91       	lpm	r30, Z
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	e4 54       	subi	r30, 0x44	; 68
    29a6:	fc 4f       	sbci	r31, 0xFC	; 252
    29a8:	85 91       	lpm	r24, Z+
    29aa:	94 91       	lpm	r25, Z
    29ac:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <mySoftwareSerial+0x12>
    29b0:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <mySoftwareSerial+0x11>
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	82 e0       	ldi	r24, 0x02	; 2
    29b8:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
    29bc:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <mySoftwareSerial+0x1e>
    29c0:	81 fd       	sbrc	r24, 1
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0xd0>
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <mySoftwareSerial+0xc>
    29d2:	ef ed       	ldi	r30, 0xDF	; 223
    29d4:	f3 e0       	ldi	r31, 0x03	; 3
    29d6:	e4 91       	lpm	r30, Z
    29d8:	e0 93 f0 04 	sts	0x04F0, r30	; 0x8004f0 <mySoftwareSerial+0xd>
    29dc:	e8 ec       	ldi	r30, 0xC8	; 200
    29de:	f3 e0       	ldi	r31, 0x03	; 3
    29e0:	e4 91       	lpm	r30, Z
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	ee 54       	subi	r30, 0x4E	; 78
    29ea:	fc 4f       	sbci	r31, 0xFC	; 252
    29ec:	25 91       	lpm	r18, Z+
    29ee:	34 91       	lpm	r19, Z
    29f0:	30 93 f2 04 	sts	0x04F2, r19	; 0x8004f2 <mySoftwareSerial+0xf>
    29f4:	20 93 f1 04 	sts	0x04F1, r18	; 0x8004f1 <mySoftwareSerial+0xe>
    29f8:	44 ef       	ldi	r20, 0xF4	; 244
    29fa:	51 e0       	ldi	r21, 0x01	; 1
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	40 93 c3 04 	sts	0x04C3, r20	; 0x8004c3 <myDFPlayer+0x6>
    2a04:	50 93 c4 04 	sts	0x04C4, r21	; 0x8004c4 <myDFPlayer+0x7>
    2a08:	60 93 c5 04 	sts	0x04C5, r22	; 0x8004c5 <myDFPlayer+0x8>
    2a0c:	70 93 c6 04 	sts	0x04C6, r23	; 0x8004c6 <myDFPlayer+0x9>
    2a10:	9a e0       	ldi	r25, 0x0A	; 10
    2a12:	e7 e1       	ldi	r30, 0x17	; 23
    2a14:	f1 e0       	ldi	r31, 0x01	; 1
    2a16:	a1 ed       	ldi	r26, 0xD1	; 209
    2a18:	b4 e0       	ldi	r27, 0x04	; 4
    2a1a:	01 90       	ld	r0, Z+
    2a1c:	0d 92       	st	X+, r0
    2a1e:	9a 95       	dec	r25
    2a20:	e1 f7       	brne	.-8      	; 0x2a1a <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0x11e>
    2a22:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <myDFPlayer+0x1e>
    2a26:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <myDFPlayer+0x1f>
    2a2a:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <myDFPlayer+0x24>
    2a2e:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <myDFPlayer+0x25>
    2a32:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <lcd+0x3>
    2a36:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <lcd+0x2>
    2a3a:	22 e5       	ldi	r18, 0x52	; 82
    2a3c:	31 e0       	ldi	r19, 0x01	; 1
    2a3e:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <lcd+0x1>
    2a42:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <lcd>
    2a46:	97 e2       	ldi	r25, 0x27	; 39
    2a48:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <lcd+0x4>
    2a4c:	90 e1       	ldi	r25, 0x10	; 16
    2a4e:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <lcd+0x9>
    2a52:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <lcd+0xa>
    2a56:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <lcd+0xb>
    2a5a:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <bell+0x5>
    2a5e:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <bell+0x4>
    2a62:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <bell+0x3>
    2a66:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <bell>
    2a6a:	e7 ea       	ldi	r30, 0xA7	; 167
    2a6c:	f3 e0       	ldi	r31, 0x03	; 3
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	8c 30       	cpi	r24, 0x0C	; 12
    2a72:	51 f0       	breq	.+20     	; 0x2a88 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0x18c>
    2a74:	94 91       	lpm	r25, Z
    2a76:	82 30       	cpi	r24, 0x02	; 2
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0x180>
    2a7a:	9f 5f       	subi	r25, 0xFF	; 255
    2a7c:	21 e0       	ldi	r18, 0x01	; 1
    2a7e:	28 0f       	add	r18, r24
    2a80:	31 96       	adiw	r30, 0x01	; 1
    2a82:	99 23       	and	r25, r25
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0x18c>
    2a86:	4d c0       	rjmp	.+154    	; 0x2b22 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0x226>
    2a88:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <bell+0x1>
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <bell+0x2>
    2a92:	64 ea       	ldi	r22, 0xA4	; 164
    2a94:	71 e0       	ldi	r23, 0x01	; 1
    2a96:	83 e6       	ldi	r24, 0x63	; 99
    2a98:	94 e0       	ldi	r25, 0x04	; 4
    2a9a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2a9e:	68 ea       	ldi	r22, 0xA8	; 168
    2aa0:	71 e0       	ldi	r23, 0x01	; 1
    2aa2:	89 e6       	ldi	r24, 0x69	; 105
    2aa4:	94 e0       	ldi	r25, 0x04	; 4
    2aa6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2aaa:	6c ea       	ldi	r22, 0xAC	; 172
    2aac:	71 e0       	ldi	r23, 0x01	; 1
    2aae:	8f e6       	ldi	r24, 0x6F	; 111
    2ab0:	94 e0       	ldi	r25, 0x04	; 4
    2ab2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2ab6:	60 eb       	ldi	r22, 0xB0	; 176
    2ab8:	71 e0       	ldi	r23, 0x01	; 1
    2aba:	85 e7       	ldi	r24, 0x75	; 117
    2abc:	94 e0       	ldi	r25, 0x04	; 4
    2abe:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2ac2:	64 eb       	ldi	r22, 0xB4	; 180
    2ac4:	71 e0       	ldi	r23, 0x01	; 1
    2ac6:	8b e7       	ldi	r24, 0x7B	; 123
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2ace:	68 eb       	ldi	r22, 0xB8	; 184
    2ad0:	71 e0       	ldi	r23, 0x01	; 1
    2ad2:	81 e8       	ldi	r24, 0x81	; 129
    2ad4:	94 e0       	ldi	r25, 0x04	; 4
    2ad6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2ada:	6c eb       	ldi	r22, 0xBC	; 188
    2adc:	71 e0       	ldi	r23, 0x01	; 1
    2ade:	87 e8       	ldi	r24, 0x87	; 135
    2ae0:	94 e0       	ldi	r25, 0x04	; 4
    2ae2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2ae6:	60 ec       	ldi	r22, 0xC0	; 192
    2ae8:	71 e0       	ldi	r23, 0x01	; 1
    2aea:	8d e8       	ldi	r24, 0x8D	; 141
    2aec:	94 e0       	ldi	r25, 0x04	; 4
    2aee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2af2:	64 ec       	ldi	r22, 0xC4	; 196
    2af4:	71 e0       	ldi	r23, 0x01	; 1
    2af6:	83 e9       	ldi	r24, 0x93	; 147
    2af8:	94 e0       	ldi	r25, 0x04	; 4
    2afa:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2afe:	68 ec       	ldi	r22, 0xC8	; 200
    2b00:	71 e0       	ldi	r23, 0x01	; 1
    2b02:	89 e9       	ldi	r24, 0x99	; 153
    2b04:	94 e0       	ldi	r25, 0x04	; 4
    2b06:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2b0a:	6c ec       	ldi	r22, 0xCC	; 204
    2b0c:	71 e0       	ldi	r23, 0x01	; 1
    2b0e:	8f e9       	ldi	r24, 0x9F	; 159
    2b10:	94 e0       	ldi	r25, 0x04	; 4
    2b12:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    2b16:	60 ed       	ldi	r22, 0xD0	; 208
    2b18:	71 e0       	ldi	r23, 0x01	; 1
    2b1a:	85 ea       	ldi	r24, 0xA5	; 165
    2b1c:	94 e0       	ldi	r25, 0x04	; 4
    2b1e:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <String::String(char const*)>
    2b22:	82 2f       	mov	r24, r18
    2b24:	a5 cf       	rjmp	.-182    	; 0x2a70 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3621+0x174>

00002b26 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	ad 97       	sbiw	r28, 0x2d	; 45
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2b3a:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2b3c:	84 b5       	in	r24, 0x24	; 36
    2b3e:	83 60       	ori	r24, 0x03	; 3
    2b40:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2b42:	85 b5       	in	r24, 0x25	; 37
    2b44:	83 60       	ori	r24, 0x03	; 3
    2b46:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2b48:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    2b4c:	81 60       	ori	r24, 0x01	; 1
    2b4e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2b58:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2b5c:	81 60       	ori	r24, 0x01	; 1
    2b5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2b62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2b66:	81 60       	ori	r24, 0x01	; 1
    2b68:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2b6c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    2b70:	84 60       	ori	r24, 0x04	; 4
    2b72:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2b76:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2b7a:	81 60       	ori	r24, 0x01	; 1
    2b7c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    2b80:	87 e8       	ldi	r24, 0x87	; 135
    2b82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2b86:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    2b8a:	80 e4       	ldi	r24, 0x40	; 64
    2b8c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    2b90:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2b94:	80 64       	ori	r24, 0x40	; 64
    2b96:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    2b9a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2b9e:	86 fd       	sbrc	r24, 6
    2ba0:	fc cf       	rjmp	.-8      	; 0x2b9a <main+0x74>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    2ba2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    2ba6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    2baa:	76 2f       	mov	r23, r22
    2bac:	68 2f       	mov	r22, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:93
template <typename T, size_t N>
size_t ArraySize(T (&)[N]) { return N; }

void setup()
{
    randomSeed(analogRead(A0));
    2bae:	07 2e       	mov	r0, r23
    2bb0:	00 0c       	add	r0, r0
    2bb2:	88 0b       	sbc	r24, r24
    2bb4:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    2bb6:	61 15       	cp	r22, r1
    2bb8:	71 05       	cpc	r23, r1
    2bba:	81 05       	cpc	r24, r1
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	11 f0       	breq	.+4      	; 0x2bc4 <main+0x9e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    2bc0:	0e 94 14 2b 	call	0x5628	; 0x5628 <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:95
    char intstr[5];
    pinMode(AMP, OUTPUT);
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	8c e0       	ldi	r24, 0x0C	; 12
    2bc8:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:96
    pinMode(AUDCONT, OUTPUT);
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	8a e0       	ldi	r24, 0x0A	; 10
    2bd0:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:97
    pinMode(AUTOLIGHT, OUTPUT);
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	8f e0       	ldi	r24, 0x0F	; 15
    2bd8:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:98
    pinMode(AUTOPLAY, OUTPUT);
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	8e e0       	ldi	r24, 0x0E	; 14
    2be0:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:99
    pinMode(RELAY1, OUTPUT);
    2be4:	61 e0       	ldi	r22, 0x01	; 1
    2be6:	8b e0       	ldi	r24, 0x0B	; 11
    2be8:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:100
    pinMode(STA_PIN, INPUT_PULLUP);
    2bec:	62 e0       	ldi	r22, 0x02	; 2
    2bee:	84 e0       	ldi	r24, 0x04	; 4
    2bf0:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:101
    pinMode(SELECT_BUT, INPUT_PULLUP);
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	85 e0       	ldi	r24, 0x05	; 5
    2bf8:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:102
    pinMode(UP_BUT, INPUT_PULLUP);
    2bfc:	62 e0       	ldi	r22, 0x02	; 2
    2bfe:	86 e0       	ldi	r24, 0x06	; 6
    2c00:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:103
    pinMode(DOWN_BUT, INPUT_PULLUP);
    2c04:	62 e0       	ldi	r22, 0x02	; 2
    2c06:	87 e0       	ldi	r24, 0x07	; 7
    2c08:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:104
    pinMode(BACK_BUT, INPUT_PULLUP);
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	88 e0       	ldi	r24, 0x08	; 8
    2c10:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:105
    pinMode(MODE_BUT, INPUT_PULLUP);
    2c14:	62 e0       	ldi	r22, 0x02	; 2
    2c16:	80 e1       	ldi	r24, 0x10	; 16
    2c18:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:106
    Wire.begin();
    2c1c:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.48]>
load():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:210
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    2c20:	4e e4       	ldi	r20, 0x4E	; 78
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	86 eb       	ldi	r24, 0xB6	; 182
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:211
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    2c30:	67 e2       	ldi	r22, 0x27	; 39
    2c32:	71 e0       	ldi	r23, 0x01	; 1
    2c34:	86 eb       	ldi	r24, 0xB6	; 182
    2c36:	93 e0       	ldi	r25, 0x03	; 3
    2c38:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <strcmp>
    2c3c:	89 2b       	or	r24, r25
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <main+0x11c>
    2c40:	aa c0       	rjmp	.+340    	; 0x2d96 <main+0x270>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    2c42:	67 e2       	ldi	r22, 0x27	; 39
    2c44:	71 e0       	ldi	r23, 0x01	; 1
    2c46:	86 eb       	ldi	r24, 0xB6	; 182
    2c48:	93 e0       	ldi	r25, 0x03	; 3
    2c4a:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:12
  Song1_Count = 100;
    2c4e:	84 e6       	ldi	r24, 0x64	; 100
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <config+0x1b>
    2c56:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:13
  Song2_Count = 100;
    2c5a:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <config+0x1d>
    2c5e:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:14
  startTime = 5; //5AM
    2c62:	85 e0       	ldi	r24, 0x05	; 5
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x10>
    2c6a:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:15
  endTime = 22; // 10PM
    2c6e:	86 e1       	ldi	r24, 0x16	; 22
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <config+0x12>
    2c76:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:16
  backLightDur = 20; //Sec
    2c7a:	84 e1       	ldi	r24, 0x14	; 20
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x14>
    2c82:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:17
  vol = 20;
    2c86:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <config+0x16>
    2c8a:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:18
  MorSong1Time = 3;
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <config+0x23>
    2c96:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <config+0x22>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:19
  MorSong2Time = 3;
    2c9a:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <config+0x25>
    2c9e:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:20
  EveSong2Time = 3;
    2ca2:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <config+0x29>
    2ca6:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:21
  EveSong1Time = 3;
    2caa:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <config+0x27>
    2cae:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:22
  MorSongNo = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2b>
    2cba:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:23
  EveSongNo = 2;
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2d>
    2cc6:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:25

  Light1On = 1079;
    2cca:	87 e3       	ldi	r24, 0x37	; 55
    2ccc:	94 e0       	ldi	r25, 0x04	; 4
    2cce:	a0 e0       	ldi	r26, 0x00	; 0
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <config+0x2e>
    2cd6:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <config+0x2f>
    2cda:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <config+0x30>
    2cde:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <config+0x31>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:26
  Light1Off = 359;
    2ce2:	87 e6       	ldi	r24, 0x67	; 103
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	a0 e0       	ldi	r26, 0x00	; 0
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x32>
    2cee:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x33>
    2cf2:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <config+0x34>
    2cf6:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:27
  Light2On = 0;
    2cfa:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <config+0x36>
    2cfe:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <config+0x37>
    2d02:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <config+0x38>
    2d06:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:28
  Light2Off = 0;
    2d0a:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <config+0x3a>
    2d0e:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <config+0x3b>
    2d12:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <config+0x3c>
    2d16:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:29
  PlayerMorTime = 300;
    2d1a:	8c e2       	ldi	r24, 0x2C	; 44
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <config+0x3e>
    2d26:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <config+0x3f>
    2d2a:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <config+0x40>
    2d2e:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:30
  PlayerMorDur= 115;
    2d32:	83 e7       	ldi	r24, 0x73	; 115
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a0 e0       	ldi	r26, 0x00	; 0
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <config+0x42>
    2d3e:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <config+0x43>
    2d42:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <config+0x44>
    2d46:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:31
  PlayerEveTime = 1020;
    2d4a:	4c ef       	ldi	r20, 0xFC	; 252
    2d4c:	53 e0       	ldi	r21, 0x03	; 3
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	40 93 fc 03 	sts	0x03FC, r20	; 0x8003fc <config+0x46>
    2d56:	50 93 fd 03 	sts	0x03FD, r21	; 0x8003fd <config+0x47>
    2d5a:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <config+0x48>
    2d5e:	70 93 ff 03 	sts	0x03FF, r23	; 0x8003ff <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:32
  PlayerEveDur = 115;
    2d62:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <config+0x4a>
    2d66:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <config+0x4b>
    2d6a:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <config+0x4c>
    2d6e:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:34

  AutoPlay = 0;
    2d72:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:35
  AutoLight = 0;
    2d76:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:36
  SchlZone = 0;
    2d7a:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:38

  SerialNo = 315;
    2d7e:	8b e3       	ldi	r24, 0x3B	; 59
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x21>
    2d86:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:39
  DataYear = 2022;
    2d8a:	86 ee       	ldi	r24, 0xE6	; 230
    2d8c:	97 e0       	ldi	r25, 0x07	; 7
    2d8e:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x1f>
    2d92:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x1e>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2d96:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.48]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2d9a:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    2d9e:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    2da2:	82 30       	cpi	r24, 0x02	; 2
    2da4:	18 f0       	brcs	.+6      	; 0x2dac <main+0x286>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    2da6:	98 e0       	ldi	r25, 0x08	; 8
    2da8:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    2dac:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2db0:	62 e3       	ldi	r22, 0x32	; 50
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2dbc:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <lcd+0xb>
    2dc0:	81 eb       	ldi	r24, 0xB1	; 177
    2dc2:	94 e0       	ldi	r25, 0x04	; 4
    2dc4:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    2dc8:	68 ee       	ldi	r22, 0xE8	; 232
    2dca:	73 e0       	ldi	r23, 0x03	; 3
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2dd4:	60 e3       	ldi	r22, 0x30	; 48
    2dd6:	81 eb       	ldi	r24, 0xB1	; 177
    2dd8:	94 e0       	ldi	r25, 0x04	; 4
    2dda:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    2dde:	84 e9       	ldi	r24, 0x94	; 148
    2de0:	91 e1       	ldi	r25, 0x11	; 17
    2de2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    2de6:	60 e3       	ldi	r22, 0x30	; 48
    2de8:	81 eb       	ldi	r24, 0xB1	; 177
    2dea:	94 e0       	ldi	r25, 0x04	; 4
    2dec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    2df0:	84 e9       	ldi	r24, 0x94	; 148
    2df2:	91 e1       	ldi	r25, 0x11	; 17
    2df4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    2df8:	60 e3       	ldi	r22, 0x30	; 48
    2dfa:	81 eb       	ldi	r24, 0xB1	; 177
    2dfc:	94 e0       	ldi	r25, 0x04	; 4
    2dfe:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    2e02:	86 e9       	ldi	r24, 0x96	; 150
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2e0a:	60 e2       	ldi	r22, 0x20	; 32
    2e0c:	81 eb       	ldi	r24, 0xB1	; 177
    2e0e:	94 e0       	ldi	r25, 0x04	; 4
    2e10:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2e14:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <lcd+0x5>
    2e18:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	81 eb       	ldi	r24, 0xB1	; 177
    2e1e:	94 e0       	ldi	r25, 0x04	; 4
    2e20:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2e24:	84 e0       	ldi	r24, 0x04	; 4
    2e26:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	6c e0       	ldi	r22, 0x0C	; 12
    2e2e:	81 eb       	ldi	r24, 0xB1	; 177
    2e30:	94 e0       	ldi	r25, 0x04	; 4
    2e32:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    2e36:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2e3a:	72 e0       	ldi	r23, 0x02	; 2
    2e3c:	d7 2e       	mov	r13, r23
    2e3e:	d0 92 b8 04 	sts	0x04B8, r13	; 0x8004b8 <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	66 e0       	ldi	r22, 0x06	; 6
    2e46:	81 eb       	ldi	r24, 0xB1	; 177
    2e48:	94 e0       	ldi	r25, 0x04	; 4
    2e4a:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	62 e0       	ldi	r22, 0x02	; 2
    2e52:	81 eb       	ldi	r24, 0xB1	; 177
    2e54:	94 e0       	ldi	r25, 0x04	; 4
    2e56:	0e 94 ba 07 	call	0xf74	; 0xf74 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    2e5a:	80 ed       	ldi	r24, 0xD0	; 208
    2e5c:	97 e0       	ldi	r25, 0x07	; 7
    2e5e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2e62:	88 e0       	ldi	r24, 0x08	; 8
    2e64:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	81 eb       	ldi	r24, 0xB1	; 177
    2e6c:	94 e0       	ldi	r25, 0x04	; 4
    2e6e:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:110
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	85 e0       	ldi	r24, 0x05	; 5
    2e76:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:111
    lcd.print(F("QTRON"));
    2e7a:	85 e3       	ldi	r24, 0x35	; 53
    2e7c:	93 e0       	ldi	r25, 0x03	; 3
    2e7e:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:112
    lcd.setCursor(0, 1);
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:113
    lcd.print(F("DEVOTIONAL CLOCK"));
    2e8a:	84 e2       	ldi	r24, 0x24	; 36
    2e8c:	93 e0       	ldi	r25, 0x03	; 3
    2e8e:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:114
    delay(2000);
    2e92:	60 ed       	ldi	r22, 0xD0	; 208
    2e94:	77 e0       	ldi	r23, 0x07	; 7
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:115
    lcd.clear();
    2e9e:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:116
    lcd.setCursor(0, 0);
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:117
    inttostr(intstr, config.DataYear);
    2eaa:	60 91 d4 03 	lds	r22, 0x03D4	; 0x8003d4 <config+0x1e>
    2eae:	70 91 d5 03 	lds	r23, 0x03D5	; 0x8003d5 <config+0x1f>
    2eb2:	9e 01       	movw	r18, r28
    2eb4:	2f 5f       	subi	r18, 0xFF	; 255
    2eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb8:	3d a7       	std	Y+45, r19	; 0x2d
    2eba:	2c a7       	std	Y+44, r18	; 0x2c
    2ebc:	c9 01       	movw	r24, r18
    2ebe:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:118
    lcd.print(fmt(strbuf, 2, "Ver : 3.2/", intstr));
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	8c 0f       	add	r24, r28
    2ec8:	9d 1f       	adc	r25, r29
    2eca:	9f 93       	push	r25
    2ecc:	8f 93       	push	r24
    2ece:	84 ed       	ldi	r24, 0xD4	; 212
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	9f 93       	push	r25
    2ed4:	8f 93       	push	r24
    2ed6:	df 92       	push	r13
    2ed8:	0a e2       	ldi	r16, 0x2A	; 42
    2eda:	14 e0       	ldi	r17, 0x04	; 4
    2edc:	1f 93       	push	r17
    2ede:	0f 93       	push	r16
    2ee0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
    2ee4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:119
    lcd.setCursor(0, 1);
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:120
    inttostr(intstr, config.SerialNo);
    2ef0:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <config+0x20>
    2ef4:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <config+0x21>
    2ef8:	ce 01       	movw	r24, r28
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:121
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    2f00:	a1 e0       	ldi	r26, 0x01	; 1
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	ac 0f       	add	r26, r28
    2f06:	bd 1f       	adc	r27, r29
    2f08:	bf 93       	push	r27
    2f0a:	af 93       	push	r26
    2f0c:	8f ed       	ldi	r24, 0xDF	; 223
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	9f 93       	push	r25
    2f12:	8f 93       	push	r24
    2f14:	df 92       	push	r13
    2f16:	1f 93       	push	r17
    2f18:	0f 93       	push	r16
    2f1a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <fmt(char*, unsigned char, ...)>
    2f1e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:122
    delay(2000);
    2f22:	60 ed       	ldi	r22, 0xD0	; 208
    2f24:	77 e0       	ldi	r23, 0x07	; 7
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:123
    lcd.clear();
    2f2e:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:124
    lcd.setCursor(3, 0);
    2f32:	60 e0       	ldi	r22, 0x00	; 0
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:125
    lcd.print("Loading...");
    2f3a:	8d ee       	ldi	r24, 0xED	; 237
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:126
    if (!digitalRead(SELECT_BUT))
    2f42:	85 e0       	ldi	r24, 0x05	; 5
    2f44:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	89 2b       	or	r24, r25
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <main+0x432>
    2f56:	42 c0       	rjmp	.+132    	; 0x2fdc <main+0x4b6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:128
    {
        lcd.setCursor(0, 1);
    2f58:	61 e0       	ldi	r22, 0x01	; 1
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:129
        lcd.print("Service Mode");
    2f60:	88 ef       	ldi	r24, 0xF8	; 248
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:130
        serviceMode = true;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <serviceMode>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    2f6e:	08 e6       	ldi	r16, 0x68	; 104
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    2f70:	57 e5       	ldi	r21, 0x57	; 87
    2f72:	a5 2e       	mov	r10, r21
    2f74:	54 e0       	ldi	r21, 0x04	; 4
    2f76:	b5 2e       	mov	r11, r21
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    2f78:	60 e2       	ldi	r22, 0x20	; 32
    2f7a:	86 2e       	mov	r8, r22
    2f7c:	91 2c       	mov	r9, r1
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;
    2f7e:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:15
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS1307::begin(TwoWire *wireInstance) {
  if (i2c_dev)
    2f80:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <rtc>
    2f84:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <rtc+0x1>
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <main+0x46a>
operator delete():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2f8c:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
operator new():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    2f90:	86 e0       	ldi	r24, 0x06	; 6
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <malloc>
    2f98:	7c 01       	movw	r14, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	0c 93       	st	X, r16
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    2f9e:	12 96       	adiw	r26, 0x02	; 2
    2fa0:	bc 92       	st	X, r11
    2fa2:	ae 92       	st	-X, r10
    2fa4:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:13
  _begun = false;
    2fa6:	13 96       	adiw	r26, 0x03	; 3
    2fa8:	1c 92       	st	X, r1
    2faa:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    2fac:	15 96       	adiw	r26, 0x05	; 5
    2fae:	9c 92       	st	X, r9
    2fb0:	8e 92       	st	-X, r8
    2fb2:	14 97       	sbiw	r26, 0x04	; 4
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:17
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(DS1307_ADDRESS, wireInstance);
    2fb4:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <rtc+0x1>
    2fb8:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <rtc>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
    2fbc:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.48]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
    2fc0:	f7 01       	movw	r30, r14
    2fc2:	13 83       	std	Z+3, r17	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
    2fc4:	c7 01       	movw	r24, r14
    2fc6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Adafruit_I2CDevice::detected()>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:18
  if (!i2c_dev->begin())
    2fca:	81 11       	cpse	r24, r1
    2fcc:	0a c0       	rjmp	.+20     	; 0x2fe2 <main+0x4bc>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:138
    {
        serviceMode = false;
    }
    while (!rtc.begin())
    {
        lcd.clear();
    2fce:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:139
        lcd.print(F("ERR 01")); // Couldn't find RTC
    2fd2:	8d e1       	ldi	r24, 0x1D	; 29
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
    2fda:	d2 cf       	rjmp	.-92     	; 0x2f80 <main+0x45a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:134
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    2fdc:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <serviceMode>
    2fe0:	c6 cf       	rjmp	.-116    	; 0x2f6e <main+0x448>
    2fe2:	1b a6       	std	Y+43, r1	; 0x2b
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:80
    @return value of register
*/
/**************************************************************************/
uint8_t RTC_I2C::read_register(uint8_t reg) {
  uint8_t buffer[1];
  i2c_dev->write(&reg, 1);
    2fe4:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <rtc>
    2fe8:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    2fec:	dc 01       	movw	r26, r24
    2fee:	14 96       	adiw	r26, 0x04	; 4
    2ff0:	2d 91       	ld	r18, X+
    2ff2:	3c 91       	ld	r19, X
    2ff4:	15 97       	sbiw	r26, 0x05	; 5
    2ff6:	23 2b       	or	r18, r19
    2ff8:	89 f0       	breq	.+34     	; 0x301c <main+0x4f6>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    2ffa:	2c 91       	ld	r18, X
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2ffc:	10 93 8c 03 	sts	0x038C, r17	; 0x80038c <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    3000:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    3004:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    3008:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <TwoWire::txBufferLength>
write():
    300c:	21 e0       	ldi	r18, 0x01	; 1
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	be 01       	movw	r22, r28
    3014:	65 5d       	subi	r22, 0xD5	; 213
    3016:	7f 4f       	sbci	r23, 0xFF	; 255
    3018:	0e 94 91 06 	call	0xd22	; 0xd22 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:81
  i2c_dev->read(buffer, 1);
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	50 e0       	ldi	r21, 0x00	; 0
    3020:	be 01       	movw	r22, r28
    3022:	6d 5e       	subi	r22, 0xED	; 237
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <rtc>
    302a:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <rtc+0x1>
    302e:	0e 94 ed 08 	call	0x11da	; 0x11da <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:82
  return buffer[0];
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:29
/*!
    @brief  Is the DS1307 running? Check the Clock Halt bit in register 0
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) { return !(read_register(0) >> 7); }
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	88 0f       	add	r24, r24
    3038:	89 2f       	mov	r24, r25
    303a:	88 1f       	adc	r24, r24
    303c:	99 0b       	sbc	r25, r25
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:142
    {
        lcd.clear();
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    if (!rtc.isrunning())
    303e:	89 2b       	or	r24, r25
    3040:	79 f0       	breq	.+30     	; 0x3060 <main+0x53a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:144
    {
        lcd.clear();
    3042:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:145
        lcd.print(F("ERR 02"));
    3046:	86 e1       	ldi	r24, 0x16	; 22
    3048:	93 e0       	ldi	r25, 0x03	; 3
    304a:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:146
        delay(2000);
    304e:	60 ed       	ldi	r22, 0xD0	; 208
    3050:	77 e0       	ldi	r23, 0x07	; 7
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:147
        serviceMode = true;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <serviceMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:151
    }

    // Initialize DF Player...............
    if (digitalRead(BACK_BUT))
    3060:	88 e0       	ldi	r24, 0x08	; 8
    3062:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3066:	89 2b       	or	r24, r25
    3068:	09 f4       	brne	.+2      	; 0x306c <main+0x546>
    306a:	08 c1       	rjmp	.+528    	; 0x327c <main+0x756>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    306c:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <mySoftwareSerial+0x1b>
    3070:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <mySoftwareSerial+0x1a>
    3074:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <mySoftwareSerial+0x19>
    3078:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <mySoftwareSerial+0x18>
    307c:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <mySoftwareSerial+0x17>
    3080:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3084:	8d e9       	ldi	r24, 0x9D	; 157
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	90 93 00 05 	sts	0x0500, r25	; 0x800500 <mySoftwareSerial+0x1d>
    308c:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3090:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <mySoftwareSerial+0xc>
    3094:	87 31       	cpi	r24, 0x17	; 23
    3096:	08 f0       	brcs	.+2      	; 0x309a <main+0x574>
    3098:	4b c0       	rjmp	.+150    	; 0x3130 <main+0x60a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    309a:	2d eb       	ldi	r18, 0xBD	; 189
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	30 93 fa 04 	sts	0x04FA, r19	; 0x8004fa <mySoftwareSerial+0x17>
    30a2:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    30a6:	2b e9       	ldi	r18, 0x9B	; 155
    30a8:	31 e0       	ldi	r19, 0x01	; 1
    30aa:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <mySoftwareSerial+0x19>
    30ae:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    30b2:	2c e2       	ldi	r18, 0x2C	; 44
    30b4:	31 e0       	ldi	r19, 0x01	; 1
    30b6:	30 93 fe 04 	sts	0x04FE, r19	; 0x8004fe <mySoftwareSerial+0x1b>
    30ba:	20 93 fd 04 	sts	0x04FD, r18	; 0x8004fd <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    30be:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    30c2:	94 e0       	ldi	r25, 0x04	; 4
begin():
    30c4:	88 30       	cpi	r24, 0x08	; 8
    30c6:	54 f0       	brlt	.+20     	; 0x30dc <main+0x5b6>
main():
    30c8:	91 e0       	ldi	r25, 0x01	; 1
begin():
    30ca:	8e 30       	cpi	r24, 0x0E	; 14
    30cc:	3c f0       	brlt	.+14     	; 0x30dc <main+0x5b6>
main():
    30ce:	92 e0       	ldi	r25, 0x02	; 2
begin():
    30d0:	84 31       	cpi	r24, 0x14	; 20
    30d2:	24 f0       	brlt	.+8      	; 0x30dc <main+0x5b6>
    30d4:	91 e0       	ldi	r25, 0x01	; 1
    30d6:	86 31       	cpi	r24, 0x16	; 22
    30d8:	09 f4       	brne	.+2      	; 0x30dc <main+0x5b6>
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	92 2b       	or	r25, r18
    30de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    30e2:	2d e6       	ldi	r18, 0x6D	; 109
    30e4:	30 e0       	ldi	r19, 0x00	; 0
begin():
    30e6:	88 30       	cpi	r24, 0x08	; 8
    30e8:	74 f0       	brlt	.+28     	; 0x3106 <main+0x5e0>
    30ea:	8e 30       	cpi	r24, 0x0E	; 14
    30ec:	0c f4       	brge	.+2      	; 0x30f0 <main+0x5ca>
    30ee:	7d c0       	rjmp	.+250    	; 0x31ea <main+0x6c4>
    30f0:	84 31       	cpi	r24, 0x14	; 20
    30f2:	3c f0       	brlt	.+14     	; 0x3102 <main+0x5dc>
    30f4:	86 31       	cpi	r24, 0x16	; 22
    30f6:	0c f4       	brge	.+2      	; 0x30fa <main+0x5d4>
    30f8:	78 c0       	rjmp	.+240    	; 0x31ea <main+0x6c4>
main():
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	20 e0       	ldi	r18, 0x00	; 0
begin():
    30fe:	86 31       	cpi	r24, 0x16	; 22
    3100:	11 f4       	brne	.+4      	; 0x3106 <main+0x5e0>
main():
    3102:	2c e6       	ldi	r18, 0x6C	; 108
    3104:	30 e0       	ldi	r19, 0x00	; 0
begin():
    3106:	30 93 f7 04 	sts	0x04F7, r19	; 0x8004f7 <mySoftwareSerial+0x14>
    310a:	20 93 f6 04 	sts	0x04F6, r18	; 0x8004f6 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    310e:	88 30       	cpi	r24, 0x08	; 8
    3110:	0c f0       	brlt	.+2      	; 0x3114 <main+0x5ee>
    3112:	6e c0       	rjmp	.+220    	; 0x31f0 <main+0x6ca>
    3114:	91 e0       	ldi	r25, 0x01	; 1
    3116:	01 c0       	rjmp	.+2      	; 0x311a <main+0x5f4>
    3118:	99 0f       	add	r25, r25
    311a:	8a 95       	dec	r24
    311c:	ea f7       	brpl	.-6      	; 0x3118 <main+0x5f2>
    311e:	89 2f       	mov	r24, r25
    3120:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    3124:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <mySoftwareSerial+0x1c>
    3128:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <mySoftwareSerial+0x1d>
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <main+0x606>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    3130:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <mySoftwareSerial+0x1a>
    3134:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <mySoftwareSerial+0x1b>
    3138:	89 2b       	or	r24, r25
    313a:	49 f1       	breq	.+82     	; 0x318e <main+0x668>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    313c:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
    3140:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
    3144:	b4 e0       	ldi	r27, 0x04	; 4
    3146:	e3 3e       	cpi	r30, 0xE3	; 227
    3148:	fb 07       	cpc	r31, r27
    314a:	09 f1       	breq	.+66     	; 0x318e <main+0x668>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    314c:	30 97       	sbiw	r30, 0x00	; 0
    314e:	39 f0       	breq	.+14     	; 0x315e <main+0x638>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    3150:	a3 89       	ldd	r26, Z+19	; 0x13
    3152:	b4 89       	ldd	r27, Z+20	; 0x14
    3154:	9c 91       	ld	r25, X
    3156:	85 89       	ldd	r24, Z+21	; 0x15
    3158:	80 95       	com	r24
    315a:	89 23       	and	r24, r25
    315c:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    315e:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <mySoftwareSerial+0x1e>
    3162:	8e 7f       	andi	r24, 0xFE	; 254
    3164:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    3168:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
    316c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    3170:	83 ee       	ldi	r24, 0xE3	; 227
    3172:	94 e0       	ldi	r25, 0x04	; 4
    3174:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <SoftwareSerial::active_object+0x1>
    3178:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    317c:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <mySoftwareSerial+0x13>
    3180:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <mySoftwareSerial+0x14>
    3184:	80 81       	ld	r24, Z
    3186:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <mySoftwareSerial+0x15>
    318a:	89 2b       	or	r24, r25
    318c:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:154
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    318e:	64 ef       	ldi	r22, 0xF4	; 244
    3190:	71 e0       	ldi	r23, 0x01	; 1
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	0e 94 23 04 	call	0x846	; 0x846 <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    319a:	03 ee       	ldi	r16, 0xE3	; 227
    319c:	14 e0       	ldi	r17, 0x04	; 4
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    319e:	dd 24       	eor	r13, r13
    31a0:	d3 94       	inc	r13
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    31a2:	10 93 be 04 	sts	0x04BE, r17	; 0x8004be <myDFPlayer+0x1>
    31a6:	00 93 bd 04 	sts	0x04BD, r16	; 0x8004bd <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    31aa:	d0 92 d5 04 	sts	0x04D5, r13	; 0x8004d5 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	8c e0       	ldi	r24, 0x0C	; 12
    31b4:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    31b8:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    31bc:	4b 01       	movw	r8, r22
    31be:	5c 01       	movw	r10, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    31c0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <DFRobotDFPlayerMini::available() [clone .constprop.71]>
    31c4:	81 11       	cpse	r24, r1
    31c6:	22 c0       	rjmp	.+68     	; 0x320c <main+0x6e6>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    31c8:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    31cc:	68 19       	sub	r22, r8
    31ce:	79 09       	sbc	r23, r9
    31d0:	8a 09       	sbc	r24, r10
    31d2:	9b 09       	sbc	r25, r11
    31d4:	61 3d       	cpi	r22, 0xD1	; 209
    31d6:	77 40       	sbci	r23, 0x07	; 7
    31d8:	81 05       	cpc	r24, r1
    31da:	91 05       	cpc	r25, r1
    31dc:	b8 f4       	brcc	.+46     	; 0x320c <main+0x6e6>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	cb 01       	movw	r24, r22
    31e4:	0e 94 23 04 	call	0x846	; 0x846 <delay>
    31e8:	eb cf       	rjmp	.-42     	; 0x31c0 <main+0x69a>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    31ea:	2b e6       	ldi	r18, 0x6B	; 107
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	8b cf       	rjmp	.-234    	; 0x3106 <main+0x5e0>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    31f0:	8e 30       	cpi	r24, 0x0E	; 14
    31f2:	14 f4       	brge	.+4      	; 0x31f8 <main+0x6d2>
    31f4:	88 50       	subi	r24, 0x08	; 8
    31f6:	8e cf       	rjmp	.-228    	; 0x3114 <main+0x5ee>
    31f8:	86 31       	cpi	r24, 0x16	; 22
    31fa:	14 f4       	brge	.+4      	; 0x3200 <main+0x6da>
    31fc:	8e 50       	subi	r24, 0x0E	; 14
    31fe:	8a cf       	rjmp	.-236    	; 0x3114 <main+0x5ee>
    3200:	86 31       	cpi	r24, 0x16	; 22
    3202:	11 f0       	breq	.+4      	; 0x3208 <main+0x6e2>
main():
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	8c cf       	rjmp	.-232    	; 0x3120 <main+0x5fa>
    3208:	80 e4       	ldi	r24, 0x40	; 64
    320a:	8a cf       	rjmp	.-236    	; 0x3120 <main+0x5fa>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    320c:	68 ec       	ldi	r22, 0xC8	; 200
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	0e 94 23 04 	call	0x846	; 0x846 <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    3218:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    321c:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	69 f0       	breq	.+26     	; 0x323e <main+0x718>
    3224:	89 30       	cpi	r24, 0x09	; 9
    3226:	59 f0       	breq	.+22     	; 0x323e <main+0x718>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:157
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.clear();
    3228:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:158
            lcd.setCursor(0, 0);
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:159
            lcd.print(F("ERR 03"));
    3234:	8f e0       	ldi	r24, 0x0F	; 15
    3236:	93 e0       	ldi	r25, 0x03	; 3
    3238:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
    323c:	b2 cf       	rjmp	.-156    	; 0x31a2 <main+0x67c>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    323e:	84 ef       	ldi	r24, 0xF4	; 244
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	a0 e0       	ldi	r26, 0x00	; 0
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <myDFPlayer+0x6>
    324a:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <myDFPlayer+0x7>
    324e:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <myDFPlayer+0x8>
    3252:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3256:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <config+0x15>
    325a:	70 91 cc 03 	lds	r23, 0x03CC	; 0x8003cc <config+0x16>
    325e:	77 27       	eor	r23, r23
    3260:	86 e0       	ldi	r24, 0x06	; 6
    3262:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    3266:	62 e0       	ldi	r22, 0x02	; 2
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	89 e0       	ldi	r24, 0x09	; 9
    326c:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    3270:	68 ec       	ldi	r22, 0xC8	; 200
    3272:	70 e0       	ldi	r23, 0x00	; 0
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 23 04 	call	0x846	; 0x846 <delay>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:165
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    327c:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:166
    timrLCD = millis();
    3280:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3284:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <timrLCD>
    3288:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <timrLCD+0x1>
    328c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timrLCD+0x2>
    3290:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:168

    if (serviceMode)
    3294:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <serviceMode>
    3298:	88 23       	and	r24, r24
    329a:	09 f4       	brne	.+2      	; 0x329e <main+0x778>
    329c:	c2 c1       	rjmp	.+900    	; 0x3622 <main+0xafc>
attach():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    329e:	2b ee       	ldi	r18, 0xEB	; 235
    32a0:	32 e0       	ldi	r19, 0x02	; 2
    32a2:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <Menu1+0x1>
    32a6:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    32aa:	86 e0       	ldi	r24, 0x06	; 6
    32ac:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    32b0:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <Menu1+0x4>
    32b4:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    32b8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    32bc:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:12
  menuStackCount = 0;
    32c0:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:173
        Menu1.attach(serviceMenu_Root, menuCount(serviceMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    32c4:	86 e0       	ldi	r24, 0x06	; 6
    32c6:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    32ca:	89 2b       	or	r24, r25
    32cc:	f1 f4       	brne	.+60     	; 0x330a <main+0x7e4>
    32ce:	87 e0       	ldi	r24, 0x07	; 7
    32d0:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    32d4:	89 2b       	or	r24, r25
    32d6:	c9 f4       	brne	.+50     	; 0x330a <main+0x7e4>
attach():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    32d8:	2b eb       	ldi	r18, 0xBB	; 187
    32da:	32 e0       	ldi	r19, 0x02	; 2
    32dc:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <Menu1+0x1>
    32e0:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    32e4:	83 e0       	ldi	r24, 0x03	; 3
    32e6:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    32ea:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <Menu1+0x4>
    32ee:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    32f2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    32f6:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:12
  menuStackCount = 0;
    32fa:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:176
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:177
        refreshMenuDisplay(REFRESH_DESCEND);
    3304:	83 e0       	ldi	r24, 0x03	; 3
    3306:	0e 94 24 12 	call	0x2448	; 0x2448 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:180
    }

    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    330a:	85 e0       	ldi	r24, 0x05	; 5
    330c:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3310:	89 2b       	or	r24, r25
    3312:	09 f4       	brne	.+2      	; 0x3316 <main+0x7f0>
    3314:	8e c1       	rjmp	.+796    	; 0x3632 <main+0xb0c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:183
        testMode = true;
    else
        testMode = false;
    3316:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <testMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:262
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    331a:	77 24       	eor	r7, r7
    331c:	73 94       	inc	r7
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:238

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    331e:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3322:	c0 90 0d 03 	lds	r12, 0x030D	; 0x80030d <buttonSampleTime>
    3326:	d0 90 0e 03 	lds	r13, 0x030E	; 0x80030e <buttonSampleTime+0x1>
    332a:	e0 90 0f 03 	lds	r14, 0x030F	; 0x80030f <buttonSampleTime+0x2>
    332e:	f0 90 10 03 	lds	r15, 0x0310	; 0x800310 <buttonSampleTime+0x3>
    3332:	6c 19       	sub	r22, r12
    3334:	7d 09       	sbc	r23, r13
    3336:	8e 09       	sbc	r24, r14
    3338:	9f 09       	sbc	r25, r15
    333a:	64 31       	cpi	r22, 0x14	; 20
    333c:	71 05       	cpc	r23, r1
    333e:	81 05       	cpc	r24, r1
    3340:	91 05       	cpc	r25, r1
    3342:	08 f4       	brcc	.+2      	; 0x3346 <main+0x820>
    3344:	9f c0       	rjmp	.+318    	; 0x3484 <main+0x95e>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:240
  {
    buttonSampleTime = millis();
    3346:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    334a:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <buttonSampleTime>
    334e:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <buttonSampleTime+0x1>
    3352:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <buttonSampleTime+0x2>
    3356:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    335a:	85 e0       	ldi	r24, 0x05	; 5
    335c:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3360:	7c 01       	movw	r14, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:247
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    3362:	86 e0       	ldi	r24, 0x06	; 6
    3364:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
main():
    3368:	01 e0       	ldi	r16, 0x01	; 1
buttonHandlerCycle():
    336a:	89 2b       	or	r24, r25
    336c:	21 f0       	breq	.+8      	; 0x3376 <main+0x850>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    336e:	ef 28       	or	r14, r15
    3370:	09 f4       	brne	.+2      	; 0x3374 <main+0x84e>
    3372:	00 e0       	ldi	r16, 0x00	; 0
    3374:	01 95       	neg	r16
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:248
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    3376:	87 e0       	ldi	r24, 0x07	; 7
    3378:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    337c:	89 2b       	or	r24, r25
    337e:	09 f4       	brne	.+2      	; 0x3382 <main+0x85c>
main():
    3380:	02 e0       	ldi	r16, 0x02	; 2
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:249
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    3382:	88 e0       	ldi	r24, 0x08	; 8
    3384:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3388:	89 2b       	or	r24, r25
    338a:	09 f4       	brne	.+2      	; 0x338e <main+0x868>
main():
    338c:	03 e0       	ldi	r16, 0x03	; 3
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:250
    if (digitalRead(MODE_BUT) == LOW) curBut = 4;
    338e:	80 e1       	ldi	r24, 0x10	; 16
    3390:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3394:	89 2b       	or	r24, r25
    3396:	09 f4       	brne	.+2      	; 0x339a <main+0x874>
main():
    3398:	04 e0       	ldi	r16, 0x04	; 4
    339a:	80 ee       	ldi	r24, 0xE0	; 224
    339c:	c8 2e       	mov	r12, r24
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	d8 2e       	mov	r13, r24
    33a2:	94 ef       	ldi	r25, 0xF4	; 244
    33a4:	e9 2e       	mov	r14, r25
    33a6:	92 e0       	ldi	r25, 0x02	; 2
    33a8:	f9 2e       	mov	r15, r25
    33aa:	22 e2       	ldi	r18, 0x22	; 34
    33ac:	82 2e       	mov	r8, r18
    33ae:	21 e0       	ldi	r18, 0x01	; 1
    33b0:	92 2e       	mov	r9, r18
    33b2:	38 e0       	ldi	r19, 0x08	; 8
    33b4:	a3 2e       	mov	r10, r19
    33b6:	33 e0       	ldi	r19, 0x03	; 3
    33b8:	b3 2e       	mov	r11, r19
    33ba:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:254

    

    byte buttonIdentified = 0;
    33bc:	31 2c       	mov	r3, r1
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:259
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    33be:	31 10       	cpse	r3, r1
    33c0:	42 c1       	rjmp	.+644    	; 0x3646 <main+0xb20>
    33c2:	d4 01       	movw	r26, r8
    33c4:	8c 91       	ld	r24, X
    33c6:	80 13       	cpse	r24, r16
    33c8:	3e c1       	rjmp	.+636    	; 0x3646 <main+0xb20>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:262
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    33ca:	33 24       	eor	r3, r3
    33cc:	33 94       	inc	r3
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:261
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    33ce:	44 24       	eor	r4, r4
    33d0:	43 94       	inc	r4
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:271
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    33d2:	f5 01       	movw	r30, r10
    33d4:	81 91       	ld	r24, Z+
    33d6:	5f 01       	movw	r10, r30
    33d8:	84 15       	cp	r24, r4
    33da:	b1 f0       	breq	.+44     	; 0x3408 <main+0x8e2>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:274
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    33dc:	44 20       	and	r4, r4
    33de:	09 f4       	brne	.+2      	; 0x33e2 <main+0x8bc>
    33e0:	34 c1       	rjmp	.+616    	; 0x364a <main+0xb24>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:276
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    33e2:	81 2f       	mov	r24, r17
    33e4:	0e 94 31 08 	call	0x1062	; 0x1062 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:277
          buttonPressTime[i] = millis();
    33e8:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    33ec:	d7 01       	movw	r26, r14
    33ee:	6d 93       	st	X+, r22
    33f0:	7d 93       	st	X+, r23
    33f2:	8d 93       	st	X+, r24
    33f4:	9c 93       	st	X, r25
    33f6:	13 97       	sbiw	r26, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:278
          buttonHoldTime[i] = buttonPressTime[i];
    33f8:	f6 01       	movw	r30, r12
    33fa:	60 83       	st	Z, r22
    33fc:	71 83       	std	Z+1, r23	; 0x01
    33fe:	82 83       	std	Z+2, r24	; 0x02
    3400:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:292
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    3402:	f5 01       	movw	r30, r10
    3404:	31 97       	sbiw	r30, 0x01	; 1
    3406:	40 82       	st	Z, r4
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:296
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    3408:	44 20       	and	r4, r4
    340a:	79 f1       	breq	.+94     	; 0x346a <main+0x944>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:298
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    340c:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3410:	f7 01       	movw	r30, r14
    3412:	20 81       	ld	r18, Z
    3414:	31 81       	ldd	r19, Z+1	; 0x01
    3416:	42 81       	ldd	r20, Z+2	; 0x02
    3418:	53 81       	ldd	r21, Z+3	; 0x03
    341a:	62 1b       	sub	r22, r18
    341c:	73 0b       	sbc	r23, r19
    341e:	84 0b       	sbc	r24, r20
    3420:	95 0b       	sbc	r25, r21
    3422:	61 3d       	cpi	r22, 0xD1	; 209
    3424:	77 40       	sbci	r23, 0x07	; 7
    3426:	81 05       	cpc	r24, r1
    3428:	91 05       	cpc	r25, r1
    342a:	f8 f0       	brcs	.+62     	; 0x346a <main+0x944>
    342c:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3430:	d6 01       	movw	r26, r12
    3432:	2d 91       	ld	r18, X+
    3434:	3d 91       	ld	r19, X+
    3436:	4d 91       	ld	r20, X+
    3438:	5c 91       	ld	r21, X
    343a:	62 1b       	sub	r22, r18
    343c:	73 0b       	sbc	r23, r19
    343e:	84 0b       	sbc	r24, r20
    3440:	95 0b       	sbc	r25, r21
    3442:	6b 3f       	cpi	r22, 0xFB	; 251
    3444:	71 05       	cpc	r23, r1
    3446:	81 05       	cpc	r24, r1
    3448:	91 05       	cpc	r25, r1
    344a:	78 f0       	brcs	.+30     	; 0x346a <main+0x944>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:300
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    344c:	8a 2d       	mov	r24, r10
    344e:	e8 e0       	ldi	r30, 0x08	; 8
    3450:	f3 e0       	ldi	r31, 0x03	; 3
    3452:	8e 1b       	sub	r24, r30
    3454:	80 68       	ori	r24, 0x80	; 128
    3456:	0e 94 31 08 	call	0x1062	; 0x1062 <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:301
          buttonHoldTime[i] = millis();
    345a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    345e:	d6 01       	movw	r26, r12
    3460:	6d 93       	st	X+, r22
    3462:	7d 93       	st	X+, r23
    3464:	8d 93       	st	X+, r24
    3466:	9c 93       	st	X, r25
    3468:	13 97       	sbiw	r26, 0x03	; 3
    346a:	1f 5f       	subi	r17, 0xFF	; 255
    346c:	b4 e0       	ldi	r27, 0x04	; 4
    346e:	cb 0e       	add	r12, r27
    3470:	d1 1c       	adc	r13, r1
    3472:	e4 e0       	ldi	r30, 0x04	; 4
    3474:	ee 0e       	add	r14, r30
    3476:	f1 1c       	adc	r15, r1
    3478:	ff ef       	ldi	r31, 0xFF	; 255
    347a:	8f 1a       	sub	r8, r31
    347c:	9f 0a       	sbc	r9, r31
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:256

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    347e:	16 30       	cpi	r17, 0x06	; 6
    3480:	09 f0       	breq	.+2      	; 0x3484 <main+0x95e>
    3482:	9d cf       	rjmp	.-198    	; 0x33be <main+0x898>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:220
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    3484:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <buttonBufferCount>
    3488:	19 16       	cp	r1, r25
    348a:	0c f4       	brge	.+2      	; 0x348e <main+0x968>
    348c:	f6 c0       	rjmp	.+492    	; 0x367a <main+0xb54>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:188
}

void loop()
{
    btn = getButton();
    348e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <btn>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:218
            // lcd.clear();
            config.save();
            ButLongPress = true;
        }
    }
    if (btn == BUTTON_DOWN_LONG_PRESSED)
    3492:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3496:	83 38       	cpi	r24, 0x83	; 131
    3498:	01 f5       	brne	.+64     	; 0x34da <main+0x9b4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:220
    {
        if (!ButLongPress)
    349a:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    349e:	81 11       	cpse	r24, r1
    34a0:	1c c0       	rjmp	.+56     	; 0x34da <main+0x9b4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:222
        {
            if (config.AutoLight == 0)
    34a2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <config+0x18>
    34a6:	81 11       	cpse	r24, r1
    34a8:	49 c1       	rjmp	.+658    	; 0x373c <main+0xc16>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:224
            {
                config.AutoLight = 1;
    34aa:	70 92 ce 03 	sts	0x03CE, r7	; 0x8003ce <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:225
                lcd.setCursor(0, 1);
    34ae:	61 e0       	ldi	r22, 0x01	; 1
    34b0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:226
                lcd.print(F(" AUTO LIGHT ON  "));
    34b4:	84 e7       	ldi	r24, 0x74	; 116
    34b6:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:232
            }
            else
            {
                config.AutoLight = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT OFF "));
    34b8:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:234
            }
            digitalWrite(AUTOLIGHT, config.AutoLight);
    34bc:	60 91 ce 03 	lds	r22, 0x03CE	; 0x8003ce <config+0x18>
    34c0:	8f e0       	ldi	r24, 0x0F	; 15
    34c2:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:235
            delay(1000);
    34c6:	68 ee       	ldi	r22, 0xE8	; 232
    34c8:	73 e0       	ldi	r23, 0x03	; 3
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:237
            // lcd.clear();
            config.save();
    34d2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:238
            ButLongPress = true;
    34d6:	70 92 33 03 	sts	0x0333, r7	; 0x800333 <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:241
        }
    }
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    34da:	10 91 3c 03 	lds	r17, 0x033C	; 0x80033c <btn>
    34de:	00 91 32 03 	lds	r16, 0x0332	; 0x800332 <appMode>
    34e2:	8e e3       	ldi	r24, 0x3E	; 62
    34e4:	81 0f       	add	r24, r17
    34e6:	84 30       	cpi	r24, 0x04	; 4
    34e8:	08 f0       	brcs	.+2      	; 0x34ec <main+0x9c6>
    34ea:	31 c1       	rjmp	.+610    	; 0x374e <main+0xc28>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:243
    {
        ButLongPress = false;
    34ec:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:255
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
            Light1ON = !Light1ON;
        }
    }
    if (millis() - timrLCD > 300)
    34f0:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    34f4:	80 90 38 03 	lds	r8, 0x0338	; 0x800338 <timrLCD>
    34f8:	90 90 39 03 	lds	r9, 0x0339	; 0x800339 <timrLCD+0x1>
    34fc:	a0 90 3a 03 	lds	r10, 0x033A	; 0x80033a <timrLCD+0x2>
    3500:	b0 90 3b 03 	lds	r11, 0x033B	; 0x80033b <timrLCD+0x3>
    3504:	68 19       	sub	r22, r8
    3506:	79 09       	sbc	r23, r9
    3508:	8a 09       	sbc	r24, r10
    350a:	9b 09       	sbc	r25, r11
    350c:	6d 32       	cpi	r22, 0x2D	; 45
    350e:	71 40       	sbci	r23, 0x01	; 1
    3510:	81 05       	cpc	r24, r1
    3512:	91 05       	cpc	r25, r1
    3514:	40 f0       	brcs	.+16     	; 0x3526 <main+0xa00>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:257
    {
        downButPreCount = 0;
    3516:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <downButPreCount+0x1>
    351a:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:258
        selButPreCount = 0;
    351e:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <selButPreCount+0x1>
    3522:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:262
        upButPreCount = 0;
    }

    if (millis() - timrTrigger > 500 && config.AutoLight)
    3526:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    352a:	80 90 29 03 	lds	r8, 0x0329	; 0x800329 <timrTrigger>
    352e:	90 90 2a 03 	lds	r9, 0x032A	; 0x80032a <timrTrigger+0x1>
    3532:	a0 90 2b 03 	lds	r10, 0x032B	; 0x80032b <timrTrigger+0x2>
    3536:	b0 90 2c 03 	lds	r11, 0x032C	; 0x80032c <timrTrigger+0x3>
    353a:	68 19       	sub	r22, r8
    353c:	79 09       	sbc	r23, r9
    353e:	8a 09       	sbc	r24, r10
    3540:	9b 09       	sbc	r25, r11
    3542:	65 3f       	cpi	r22, 0xF5	; 245
    3544:	71 40       	sbci	r23, 0x01	; 1
    3546:	81 05       	cpc	r24, r1
    3548:	91 05       	cpc	r25, r1
    354a:	08 f4       	brcc	.+2      	; 0x354e <main+0xa28>
    354c:	4d c0       	rjmp	.+154    	; 0x35e8 <main+0xac2>
    354e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <config+0x18>
    3552:	88 23       	and	r24, r24
    3554:	09 f4       	brne	.+2      	; 0x3558 <main+0xa32>
    3556:	48 c0       	rjmp	.+144    	; 0x35e8 <main+0xac2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:264
    {
        timrTrigger = millis();
    3558:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    355c:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <timrTrigger>
    3560:	70 93 2a 03 	sts	0x032A, r23	; 0x80032a <timrTrigger+0x1>
    3564:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <timrTrigger+0x2>
    3568:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <timrTrigger+0x3>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:533
}

void TriggerLights()
{
    // Validate Light 1
    if (config.Light1On != 0 && config.Light1Off != 0)
    356c:	80 90 e4 03 	lds	r8, 0x03E4	; 0x8003e4 <config+0x2e>
    3570:	90 90 e5 03 	lds	r9, 0x03E5	; 0x8003e5 <config+0x2f>
    3574:	a0 90 e6 03 	lds	r10, 0x03E6	; 0x8003e6 <config+0x30>
    3578:	b0 90 e7 03 	lds	r11, 0x03E7	; 0x8003e7 <config+0x31>
    357c:	81 14       	cp	r8, r1
    357e:	91 04       	cpc	r9, r1
    3580:	a1 04       	cpc	r10, r1
    3582:	b1 04       	cpc	r11, r1
    3584:	89 f1       	breq	.+98     	; 0x35e8 <main+0xac2>
    3586:	40 91 e8 03 	lds	r20, 0x03E8	; 0x8003e8 <config+0x32>
    358a:	50 91 e9 03 	lds	r21, 0x03E9	; 0x8003e9 <config+0x33>
    358e:	60 91 ea 03 	lds	r22, 0x03EA	; 0x8003ea <config+0x34>
    3592:	70 91 eb 03 	lds	r23, 0x03EB	; 0x8003eb <config+0x35>
    3596:	41 15       	cp	r20, r1
    3598:	51 05       	cpc	r21, r1
    359a:	61 05       	cpc	r22, r1
    359c:	71 05       	cpc	r23, r1
    359e:	21 f1       	breq	.+72     	; 0x35e8 <main+0xac2>
    35a0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <CurTime>
    35a4:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <CurTime+0x1>
    35a8:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <CurTime+0x2>
    35ac:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <CurTime+0x3>
    35b0:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <Light1ON>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:535
    {
        if (config.Light1Off > config.Light1On)
    35b4:	84 16       	cp	r8, r20
    35b6:	95 06       	cpc	r9, r21
    35b8:	a6 06       	cpc	r10, r22
    35ba:	b7 06       	cpc	r11, r23
    35bc:	0c f0       	brlt	.+2      	; 0x35c0 <main+0xa9a>
    35be:	f7 c0       	rjmp	.+494    	; 0x37ae <main+0xc88>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:537
        {
            if (CurTime >= config.Light1On && CurTime < config.Light1Off)
    35c0:	88 15       	cp	r24, r8
    35c2:	99 05       	cpc	r25, r9
    35c4:	aa 05       	cpc	r26, r10
    35c6:	bb 05       	cpc	r27, r11
    35c8:	0c f4       	brge	.+2      	; 0x35cc <main+0xaa6>
    35ca:	e7 c0       	rjmp	.+462    	; 0x379a <main+0xc74>
    35cc:	84 17       	cp	r24, r20
    35ce:	95 07       	cpc	r25, r21
    35d0:	a6 07       	cpc	r26, r22
    35d2:	b7 07       	cpc	r27, r23
    35d4:	0c f0       	brlt	.+2      	; 0x35d8 <main+0xab2>
    35d6:	e1 c0       	rjmp	.+450    	; 0x379a <main+0xc74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:539
            {
                if (Light1ON == 0)
    35d8:	21 11       	cpse	r18, r1
    35da:	06 c0       	rjmp	.+12     	; 0x35e8 <main+0xac2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:541
                {
                    digitalWrite(RELAY1, HIGH);
    35dc:	61 e0       	ldi	r22, 0x01	; 1
    35de:	8b e0       	ldi	r24, 0x0B	; 11
    35e0:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:542
                    Light1ON = 1;
    35e4:	70 92 2f 03 	sts	0x032F, r7	; 0x80032f <Light1ON>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:267
    if (millis() - timrTrigger > 500 && config.AutoLight)
    {
        timrTrigger = millis();
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    35e8:	60 91 ce 03 	lds	r22, 0x03CE	; 0x8003ce <config+0x18>
    35ec:	8f e0       	ldi	r24, 0x0F	; 15
    35ee:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:268
    digitalWrite(AUTOPLAY, config.AutoPlay);
    35f2:	60 91 cd 03 	lds	r22, 0x03CD	; 0x8003cd <config+0x17>
    35f6:	8e e0       	ldi	r24, 0x0E	; 14
    35f8:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:270

    switch (appMode)
    35fc:	02 30       	cpi	r16, 0x02	; 2
    35fe:	09 f4       	brne	.+2      	; 0x3602 <main+0xadc>
    3600:	90 c5       	rjmp	.+2848   	; 0x4122 <main+0x15fc>
    3602:	08 f0       	brcs	.+2      	; 0x3606 <main+0xae0>
    3604:	db c0       	rjmp	.+438    	; 0x37bc <main+0xc96>
    3606:	00 23       	and	r16, r16
    3608:	09 f4       	brne	.+2      	; 0x360c <main+0xae6>
    360a:	65 c1       	rjmp	.+714    	; 0x38d6 <main+0xdb0>
    360c:	01 30       	cpi	r16, 0x01	; 1
    360e:	09 f4       	brne	.+2      	; 0x3612 <main+0xaec>
    3610:	0e c4       	rjmp	.+2076   	; 0x3e2e <main+0x1308>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	89 2b       	or	r24, r25
    3618:	09 f4       	brne	.+2      	; 0x361c <main+0xaf6>
    361a:	81 ce       	rjmp	.-766    	; 0x331e <main+0x7f8>
    361c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3620:	7c ce       	rjmp	.-776    	; 0x331a <main+0x7f4>
attach():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    3622:	2d ec       	ldi	r18, 0xCD	; 205
    3624:	32 e0       	ldi	r19, 0x02	; 2
    3626:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <Menu1+0x1>
    362a:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    362e:	85 e0       	ldi	r24, 0x05	; 5
    3630:	3d ce       	rjmp	.-902    	; 0x32ac <main+0x786>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:180
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
        refreshMenuDisplay(REFRESH_DESCEND);
    }

    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    3632:	88 e0       	ldi	r24, 0x08	; 8
    3634:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3638:	89 2b       	or	r24, r25
    363a:	09 f0       	breq	.+2      	; 0x363e <main+0xb18>
    363c:	6c ce       	rjmp	.-808    	; 0x3316 <main+0x7f0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:181
        testMode = true;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <testMode>
    3644:	6a ce       	rjmp	.-812    	; 0x331a <main+0x7f4>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:266
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    3646:	41 2c       	mov	r4, r1
    3648:	c4 ce       	rjmp	.-632    	; 0x33d2 <main+0x8ac>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:283
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    364a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    364e:	d7 01       	movw	r26, r14
    3650:	2d 91       	ld	r18, X+
    3652:	3d 91       	ld	r19, X+
    3654:	4d 91       	ld	r20, X+
    3656:	5c 91       	ld	r21, X
    3658:	62 1b       	sub	r22, r18
    365a:	73 0b       	sbc	r23, r19
    365c:	84 0b       	sbc	r24, r20
    365e:	95 0b       	sbc	r25, r21
    3660:	61 3d       	cpi	r22, 0xD1	; 209
    3662:	77 40       	sbci	r23, 0x07	; 7
    3664:	81 05       	cpc	r24, r1
    3666:	91 05       	cpc	r25, r1
    3668:	28 f0       	brcs	.+10     	; 0x3674 <main+0xb4e>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:285
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    366a:	81 2f       	mov	r24, r17
    366c:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:289
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    366e:	0e 94 31 08 	call	0x1062	; 0x1062 <queueButton(unsigned char)>
    3672:	c7 ce       	rjmp	.-626    	; 0x3402 <main+0x8dc>
    3674:	81 2f       	mov	r24, r17
    3676:	80 64       	ori	r24, 0x40	; 64
    3678:	fa cf       	rjmp	.-12     	; 0x366e <main+0xb48>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:222
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    367a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <button_read_pos>
    367e:	e8 2f       	mov	r30, r24
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	ef 5e       	subi	r30, 0xEF	; 239
    3684:	fc 4f       	sbci	r31, 0xFC	; 252
    3686:	10 81       	ld	r17, Z
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:223
    buttonBufferCount--;
    3688:	91 50       	subi	r25, 0x01	; 1
    368a:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:224
    button_read_pos++;
    368e:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:226
    
    if (button_read_pos >= sizeof (buttonBuffer))
    3690:	85 30       	cpi	r24, 0x05	; 5
    3692:	08 f0       	brcs	.+2      	; 0x3696 <main+0xb70>
    3694:	47 c0       	rjmp	.+142    	; 0x3724 <main+0xbfe>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:224
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    3696:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:188
        testMode = false;
}

void loop()
{
    btn = getButton();
    369a:	10 93 3c 03 	sts	0x033C, r17	; 0x80033c <btn>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:189
    if (btn)
    369e:	11 23       	and	r17, r17
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <main+0xb7e>
    36a2:	1b cf       	rjmp	.-458    	; 0x34da <main+0x9b4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:191
    {
        timrLCD = millis();
    36a4:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    36a8:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <timrLCD>
    36ac:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <timrLCD+0x1>
    36b0:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timrLCD+0x2>
    36b4:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:192
        timrMNU = millis();
    36b8:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    36bc:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <timrMNU>
    36c0:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <timrMNU+0x1>
    36c4:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timrMNU+0x2>
    36c8:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    36cc:	88 e0       	ldi	r24, 0x08	; 8
    36ce:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	81 eb       	ldi	r24, 0xB1	; 177
    36d6:	94 e0       	ldi	r25, 0x04	; 4
    36d8:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:195
        lcd.backlight();
    }
    if (btn == BUTTON_UP_LONG_PRESSED)
    36dc:	12 38       	cpi	r17, 0x82	; 130
    36de:	09 f0       	breq	.+2      	; 0x36e2 <main+0xbbc>
    36e0:	d8 ce       	rjmp	.-592    	; 0x3492 <main+0x96c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:197
    {
        if (!ButLongPress)
    36e2:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    36e6:	81 11       	cpse	r24, r1
    36e8:	f8 ce       	rjmp	.-528    	; 0x34da <main+0x9b4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:199
        {
            if (config.AutoPlay == 0)
    36ea:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <config+0x17>
    36ee:	81 11       	cpse	r24, r1
    36f0:	1c c0       	rjmp	.+56     	; 0x372a <main+0xc04>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:201
            {
                config.AutoPlay = 1;
    36f2:	70 92 cd 03 	sts	0x03CD, r7	; 0x8003cd <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:202
                lcd.setCursor(0, 1);
    36f6:	61 e0       	ldi	r22, 0x01	; 1
    36f8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:203
                lcd.print(F("  AUTO PLAY ON  "));
    36fc:	86 e9       	ldi	r24, 0x96	; 150
    36fe:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:209
            }
            else
            {
                config.AutoPlay = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO PLAY OFF  "));
    3700:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:211
            }
            digitalWrite(AUTOPLAY, config.AutoPlay);
    3704:	60 91 cd 03 	lds	r22, 0x03CD	; 0x8003cd <config+0x17>
    3708:	8e e0       	ldi	r24, 0x0E	; 14
    370a:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:212
            delay(1000);
    370e:	68 ee       	ldi	r22, 0xE8	; 232
    3710:	73 e0       	ldi	r23, 0x03	; 3
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:214
            // lcd.clear();
            config.save();
    371a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:215
            ButLongPress = true;
    371e:	70 92 33 03 	sts	0x0333, r7	; 0x800333 <ButLongPress>
    3722:	b7 ce       	rjmp	.-658    	; 0x3492 <main+0x96c>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:228
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    3724:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <button_read_pos>
    3728:	b8 cf       	rjmp	.-144    	; 0x369a <main+0xb74>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:207
                lcd.setCursor(0, 1);
                lcd.print(F("  AUTO PLAY ON  "));
            }
            else
            {
                config.AutoPlay = 0;
    372a:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:208
                lcd.setCursor(0, 1);
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:209
                lcd.print(F(" AUTO PLAY OFF  "));
    3736:	85 e8       	ldi	r24, 0x85	; 133
    3738:	93 e0       	ldi	r25, 0x03	; 3
    373a:	e2 cf       	rjmp	.-60     	; 0x3700 <main+0xbda>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:230
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT ON  "));
            }
            else
            {
                config.AutoLight = 0;
    373c:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:231
                lcd.setCursor(0, 1);
    3740:	61 e0       	ldi	r22, 0x01	; 1
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:232
                lcd.print(F(" AUTO LIGHT OFF "));
    3748:	83 e6       	ldi	r24, 0x63	; 99
    374a:	93 e0       	ldi	r25, 0x03	; 3
    374c:	b5 ce       	rjmp	.-662    	; 0x34b8 <main+0x992>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:246
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    {
        ButLongPress = false;
    }

    if (btn == BUTTON_DOWN_PRESSED && (appMode == APP_NORMAL_MODE || appMode == APP_PLAYER_MODE))
    374e:	13 30       	cpi	r17, 0x03	; 3
    3750:	09 f0       	breq	.+2      	; 0x3754 <main+0xc2e>
    3752:	ce ce       	rjmp	.-612    	; 0x34f0 <main+0x9ca>
    3754:	00 23       	and	r16, r16
    3756:	19 f0       	breq	.+6      	; 0x375e <main+0xc38>
    3758:	05 30       	cpi	r16, 0x05	; 5
    375a:	09 f0       	breq	.+2      	; 0x375e <main+0xc38>
    375c:	c9 ce       	rjmp	.-622    	; 0x34f0 <main+0x9ca>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:248
    {
        downButPreCount += 1;
    375e:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <downButPreCount>
    3762:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <downButPreCount+0x1>
    3766:	01 96       	adiw	r24, 0x01	; 1
    3768:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <downButPreCount+0x1>
    376c:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:249
        if (downButPreCount >= 2)
    3770:	02 97       	sbiw	r24, 0x02	; 2
    3772:	0c f4       	brge	.+2      	; 0x3776 <main+0xc50>
    3774:	bd ce       	rjmp	.-646    	; 0x34f0 <main+0x9ca>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:251
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
    3776:	8b e0       	ldi	r24, 0x0B	; 11
    3778:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    377c:	61 e0       	ldi	r22, 0x01	; 1
    377e:	89 2b       	or	r24, r25
    3780:	09 f0       	breq	.+2      	; 0x3784 <main+0xc5e>
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	8b e0       	ldi	r24, 0x0B	; 11
    3786:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:252
            Light1ON = !Light1ON;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <Light1ON>
    3790:	91 11       	cpse	r25, r1
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <Light1ON>
    3798:	ab ce       	rjmp	.-682    	; 0x34f0 <main+0x9ca>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:547
                    Light1ON = 1;
                }
            }
            else
            {
                if (Light1ON == 1)
    379a:	21 30       	cpi	r18, 0x01	; 1
    379c:	09 f0       	breq	.+2      	; 0x37a0 <main+0xc7a>
    379e:	24 cf       	rjmp	.-440    	; 0x35e8 <main+0xac2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:549
                {
                    digitalWrite(RELAY1, LOW);
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	8b e0       	ldi	r24, 0x0B	; 11
    37a4:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:550
                    Light1ON = 0;
    37a8:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <Light1ON>
    37ac:	1d cf       	rjmp	.-454    	; 0x35e8 <main+0xac2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:556
                }
            }
        }
        else
        {
            if (CurTime < config.Light1On && CurTime >= config.Light1Off)
    37ae:	88 15       	cp	r24, r8
    37b0:	99 05       	cpc	r25, r9
    37b2:	aa 05       	cpc	r26, r10
    37b4:	bb 05       	cpc	r27, r11
    37b6:	0c f0       	brlt	.+2      	; 0x37ba <main+0xc94>
    37b8:	0f cf       	rjmp	.-482    	; 0x35d8 <main+0xab2>
    37ba:	08 cf       	rjmp	.-496    	; 0x35cc <main+0xaa6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:270
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    37bc:	04 30       	cpi	r16, 0x04	; 4
    37be:	09 f4       	brne	.+2      	; 0x37c2 <main+0xc9c>
    37c0:	4c c2       	rjmp	.+1176   	; 0x3c5a <main+0x1134>
    37c2:	08 f4       	brcc	.+2      	; 0x37c6 <main+0xca0>
    37c4:	13 c2       	rjmp	.+1062   	; 0x3bec <main+0x10c6>
    37c6:	05 30       	cpi	r16, 0x05	; 5
    37c8:	09 f0       	breq	.+2      	; 0x37cc <main+0xca6>
    37ca:	23 cf       	rjmp	.-442    	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:498
        break;
    }

    case APP_PLAYER_MODE:
    {
        digitalWrite(AMP, HIGH);
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	8c e0       	ldi	r24, 0x0C	; 12
    37d0:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:499
        digitalWrite(AUDCONT, HIGH);
    37d4:	61 e0       	ldi	r22, 0x01	; 1
    37d6:	8a e0       	ldi	r24, 0x0A	; 10
    37d8:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:500
        if (millis() - timr_Time > 1000)
    37dc:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    37e0:	c0 90 20 03 	lds	r12, 0x0320	; 0x800320 <timr_Time>
    37e4:	d0 90 21 03 	lds	r13, 0x0321	; 0x800321 <timr_Time+0x1>
    37e8:	e0 90 22 03 	lds	r14, 0x0322	; 0x800322 <timr_Time+0x2>
    37ec:	f0 90 23 03 	lds	r15, 0x0323	; 0x800323 <timr_Time+0x3>
    37f0:	6c 19       	sub	r22, r12
    37f2:	7d 09       	sbc	r23, r13
    37f4:	8e 09       	sbc	r24, r14
    37f6:	9f 09       	sbc	r25, r15
    37f8:	69 3e       	cpi	r22, 0xE9	; 233
    37fa:	73 40       	sbci	r23, 0x03	; 3
    37fc:	81 05       	cpc	r24, r1
    37fe:	91 05       	cpc	r25, r1
    3800:	70 f1       	brcs	.+92     	; 0x385e <main+0xd38>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:502
        {
            timr_Time = millis();
    3802:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3806:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timr_Time>
    380a:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timr_Time+0x1>
    380e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timr_Time+0x2>
    3812:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:503
            showTime();
    3816:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:504
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    381a:	ce 01       	movw	r24, r28
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3822:	ec 80       	ldd	r14, Y+4	; 0x04
    3824:	3c e3       	ldi	r19, 0x3C	; 60
    3826:	e3 9e       	mul	r14, r19
    3828:	70 01       	movw	r14, r0
    382a:	11 24       	eor	r1, r1
    382c:	ce 01       	movw	r24, r28
    382e:	43 96       	adiw	r24, 0x13	; 19
    3830:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3834:	8f 89       	ldd	r24, Y+23	; 0x17
    3836:	8e 0d       	add	r24, r14
    3838:	9f 2d       	mov	r25, r15
    383a:	91 1d       	adc	r25, r1
    383c:	09 2e       	mov	r0, r25
    383e:	00 0c       	add	r0, r0
    3840:	aa 0b       	sbc	r26, r26
    3842:	bb 0b       	sbc	r27, r27
    3844:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <CurTime>
    3848:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <CurTime+0x1>
    384c:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <CurTime+0x2>
    3850:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:505
            if (config.AutoPlay)
    3854:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <config+0x17>
    3858:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:506
                TriggerPlayer();
    385a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:508
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    385e:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3862:	00 91 38 03 	lds	r16, 0x0338	; 0x800338 <timrLCD>
    3866:	10 91 39 03 	lds	r17, 0x0339	; 0x800339 <timrLCD+0x1>
    386a:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <timrLCD+0x2>
    386e:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <timrLCD+0x3>
    3872:	6b 01       	movw	r12, r22
    3874:	7c 01       	movw	r14, r24
    3876:	c0 1a       	sub	r12, r16
    3878:	d1 0a       	sbc	r13, r17
    387a:	e2 0a       	sbc	r14, r18
    387c:	f3 0a       	sbc	r15, r19
    387e:	a0 91 c9 03 	lds	r26, 0x03C9	; 0x8003c9 <config+0x13>
    3882:	b0 91 ca 03 	lds	r27, 0x03CA	; 0x8003ca <config+0x14>
    3886:	28 ee       	ldi	r18, 0xE8	; 232
    3888:	33 e0       	ldi	r19, 0x03	; 3
    388a:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__usmulhisi3>
    388e:	6c 15       	cp	r22, r12
    3890:	7d 05       	cpc	r23, r13
    3892:	8e 05       	cpc	r24, r14
    3894:	9f 05       	cpc	r25, r15
    3896:	38 f4       	brcc	.+14     	; 0x38a6 <main+0xd80>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3898:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    389c:	60 e0       	ldi	r22, 0x00	; 0
    389e:	81 eb       	ldi	r24, 0xB1	; 177
    38a0:	94 e0       	ldi	r25, 0x04	; 4
    38a2:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:512
        {
            lcd.noBacklight();
        }
        lcd.setCursor(0, 1);
    38a6:	61 e0       	ldi	r22, 0x01	; 1
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:513
        lcd.print(F(" PLAYER MODE ON "));
    38ae:	81 e4       	ldi	r24, 0x41	; 65
    38b0:	93 e0       	ldi	r25, 0x03	; 3
    38b2:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:514
        if (btn == BUTTON_MODE_LONG_PRESSED)
    38b6:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    38ba:	85 38       	cpi	r24, 0x85	; 133
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <main+0xd9a>
    38be:	a9 ce       	rjmp	.-686    	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:516
        {
            if (!ButLongPress)
    38c0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    38c4:	81 11       	cpse	r24, r1
    38c6:	a5 ce       	rjmp	.-694    	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:518
            {
                appMode = APP_NORMAL_MODE;
    38c8:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:519
                PlayerONMor = 0;
    38cc:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:520
                PlayerONEve = 0;
    38d0:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <PlayerONEve>
    38d4:	53 c1       	rjmp	.+678    	; 0x3b7c <main+0x1056>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:273
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    {
    case APP_NORMAL_MODE:
        digitalWrite(AMP, LOW);
    38d6:	60 e0       	ldi	r22, 0x00	; 0
    38d8:	8c e0       	ldi	r24, 0x0C	; 12
    38da:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:274
        digitalWrite(AUDCONT, LOW);
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	8a e0       	ldi	r24, 0x0A	; 10
    38e2:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:275
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    38e6:	11 38       	cpi	r17, 0x81	; 129
    38e8:	79 f4       	brne	.+30     	; 0x3908 <main+0xde2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:277
        {
            appMode = APP_MENU_MODE;
    38ea:	70 92 32 03 	sts	0x0332, r7	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:278
            refreshMenuDisplay(REFRESH_DESCEND);
    38ee:	83 e0       	ldi	r24, 0x03	; 3
    38f0:	0e 94 24 12 	call	0x2448	; 0x2448 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:279
            timrMNU = millis();
    38f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    38f8:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <timrMNU>
    38fc:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <timrMNU+0x1>
    3900:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timrMNU+0x2>
    3904:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:282
        }

        if (btn == BUTTON_SELECT_PRESSED)
    3908:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    390c:	81 30       	cpi	r24, 0x01	; 1
    390e:	19 f5       	brne	.+70     	; 0x3956 <main+0xe30>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:284
        {
            selButPreCount += 1;
    3910:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <selButPreCount>
    3914:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <selButPreCount+0x1>
    3918:	01 96       	adiw	r24, 0x01	; 1
    391a:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <selButPreCount+0x1>
    391e:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:285
            if (selButPreCount >= 4)
    3922:	04 97       	sbiw	r24, 0x04	; 4
    3924:	c4 f0       	brlt	.+48     	; 0x3956 <main+0xe30>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:287
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3926:	ce 01       	movw	r24, r28
    3928:	01 96       	adiw	r24, 0x01	; 1
    392a:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    392e:	8d 81       	ldd	r24, Y+5	; 0x05
    3930:	8f 31       	cpi	r24, 0x1F	; 31
    3932:	08 f4       	brcc	.+2      	; 0x3936 <main+0xe10>
    3934:	28 c1       	rjmp	.+592    	; 0x3b86 <main+0x1060>
    3936:	ce 01       	movw	r24, r28
    3938:	43 96       	adiw	r24, 0x13	; 19
    393a:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    393e:	8e 89       	ldd	r24, Y+22	; 0x16
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	01 96       	adiw	r24, 0x01	; 1
    3944:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    3948:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:288
                appMode = APP_DEMO_MODE;
    394c:	84 e0       	ldi	r24, 0x04	; 4
    394e:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:289
                lcd.clear();
    3952:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:293
            }
        }

        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    3956:	ce 01       	movw	r24, r28
    3958:	01 96       	adiw	r24, 0x01	; 1
    395a:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	81 11       	cpse	r24, r1
    3962:	5d c0       	rjmp	.+186    	; 0x3a1e <main+0xef8>
    3964:	ce 01       	movw	r24, r28
    3966:	43 96       	adiw	r24, 0x13	; 19
    3968:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    396c:	88 8d       	ldd	r24, Y+24	; 0x18
    396e:	81 11       	cpse	r24, r1
    3970:	56 c0       	rjmp	.+172    	; 0x3a1e <main+0xef8>
    3972:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3976:	ab 01       	movw	r20, r22
    3978:	bc 01       	movw	r22, r24
    397a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <timrAmp>
    397e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <timrAmp+0x1>
    3982:	a0 91 27 03 	lds	r26, 0x0327	; 0x800327 <timrAmp+0x2>
    3986:	b0 91 28 03 	lds	r27, 0x0328	; 0x800328 <timrAmp+0x3>
    398a:	88 5b       	subi	r24, 0xB8	; 184
    398c:	91 41       	sbci	r25, 0x11	; 17
    398e:	af 4f       	sbci	r26, 0xFF	; 255
    3990:	bf 4f       	sbci	r27, 0xFF	; 255
    3992:	84 17       	cp	r24, r20
    3994:	95 07       	cpc	r25, r21
    3996:	a6 07       	cpc	r26, r22
    3998:	b7 07       	cpc	r27, r23
    399a:	08 f0       	brcs	.+2      	; 0x399e <main+0xe78>
    399c:	40 c0       	rjmp	.+128    	; 0x3a1e <main+0xef8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:295
        {
            bell = rtc.now();
    399e:	ce 01       	movw	r24, r28
    39a0:	01 96       	adiw	r24, 0x01	; 1
    39a2:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    39a6:	86 e0       	ldi	r24, 0x06	; 6
    39a8:	fe 01       	movw	r30, r28
    39aa:	31 96       	adiw	r30, 0x01	; 1
    39ac:	ab ea       	ldi	r26, 0xAB	; 171
    39ae:	b4 e0       	ldi	r27, 0x04	; 4
    39b0:	01 90       	ld	r0, Z+
    39b2:	0d 92       	st	X+, r0
    39b4:	8a 95       	dec	r24
    39b6:	e1 f7       	brne	.-8      	; 0x39b0 <main+0xe8a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:296
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    39b8:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <bell+0x3>
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <config+0xf>
    39c2:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <config+0x10>
    39c6:	82 17       	cp	r24, r18
    39c8:	93 07       	cpc	r25, r19
    39ca:	4c f1       	brlt	.+82     	; 0x3a1e <main+0xef8>
    39cc:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <config+0x11>
    39d0:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <config+0x12>
    39d4:	28 17       	cp	r18, r24
    39d6:	39 07       	cpc	r19, r25
    39d8:	14 f1       	brlt	.+68     	; 0x3a1e <main+0xef8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:298
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    39da:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <config+0x19>
    39de:	88 23       	and	r24, r24
    39e0:	09 f4       	brne	.+2      	; 0x39e4 <main+0xebe>
    39e2:	d8 c0       	rjmp	.+432    	; 0x3b94 <main+0x106e>
    39e4:	0e 94 a4 02 	call	0x548	; 0x548 <DateTime::dayOfTheWeek() const [clone .constprop.19]>
    39e8:	88 23       	and	r24, r24
    39ea:	09 f4       	brne	.+2      	; 0x39ee <main+0xec8>
    39ec:	d3 c0       	rjmp	.+422    	; 0x3b94 <main+0x106e>
    39ee:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <bell+0x3>
    39f2:	8a 50       	subi	r24, 0x0A	; 10
    39f4:	87 30       	cpi	r24, 0x07	; 7
    39f6:	08 f0       	brcs	.+2      	; 0x39fa <main+0xed4>
    39f8:	cd c0       	rjmp	.+410    	; 0x3b94 <main+0x106e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:303
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    39fa:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:304
                    lcd.setCursor(0, 0);
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:305
                    lcd.print("School Zone : ON");
    3a06:	85 e0       	ldi	r24, 0x05	; 5
    3a08:	92 e0       	ldi	r25, 0x02	; 2
    3a0a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:306
                    delay(1000);
    3a0e:	68 ee       	ldi	r22, 0xE8	; 232
    3a10:	73 e0       	ldi	r23, 0x03	; 3
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:314
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    3a1a:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:320
                }
            }
        }
        // TEST MODE //
        {
            if (btn == BUTTON_UP_PRESSED && testMode)
    3a1e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3a22:	82 30       	cpi	r24, 0x02	; 2
    3a24:	d1 f5       	brne	.+116    	; 0x3a9a <main+0xf74>
    3a26:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <testMode>
    3a2a:	88 23       	and	r24, r24
    3a2c:	b1 f1       	breq	.+108    	; 0x3a9a <main+0xf74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:322
            {
                timrAmp = millis() - 71000L;
    3a2e:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3a32:	68 55       	subi	r22, 0x58	; 88
    3a34:	75 41       	sbci	r23, 0x15	; 21
    3a36:	81 40       	sbci	r24, 0x01	; 1
    3a38:	91 09       	sbc	r25, r1
    3a3a:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <timrAmp>
    3a3e:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <timrAmp+0x1>
    3a42:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <timrAmp+0x2>
    3a46:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:323
                if (rtc.now().minute() < 30)
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
    3a54:	8e 31       	cpi	r24, 0x1E	; 30
    3a56:	08 f0       	brcs	.+2      	; 0x3a5a <main+0xf34>
    3a58:	af c0       	rjmp	.+350    	; 0x3bb8 <main+0x1092>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:324
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	43 96       	adiw	r24, 0x13	; 19
    3a5e:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3a62:	fe 88       	ldd	r15, Y+22	; 0x16
    3a64:	ce 01       	movw	r24, r28
    3a66:	49 96       	adiw	r24, 0x19	; 25
    3a68:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3a6c:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3a6e:	ce 01       	movw	r24, r28
    3a70:	4f 96       	adiw	r24, 0x1f	; 31
    3a72:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3a76:	d8 a0       	ldd	r13, Y+32	; 0x20
    3a78:	ce 01       	movw	r24, r28
    3a7a:	85 96       	adiw	r24, 0x25	; 37
    3a7c:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3a80:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3a82:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3a84:	da 82       	std	Y+2, r13	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3a86:	eb 82       	std	Y+3, r14	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3a88:	fc 82       	std	Y+4, r15	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3a8a:	8d e1       	ldi	r24, 0x1D	; 29
    3a8c:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    3a8e:	87 e3       	ldi	r24, 0x37	; 55
    3a90:	8e 83       	std	Y+6, r24	; 0x06
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:326
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3a92:	ce 01       	movw	r24, r28
    3a94:	01 96       	adiw	r24, 0x01	; 1
    3a96:	0e 94 a1 09 	call	0x1342	; 0x1342 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:329
            }
        }
        if (millis() - timr_Time > 1000)
    3a9a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3a9e:	c0 90 20 03 	lds	r12, 0x0320	; 0x800320 <timr_Time>
    3aa2:	d0 90 21 03 	lds	r13, 0x0321	; 0x800321 <timr_Time+0x1>
    3aa6:	e0 90 22 03 	lds	r14, 0x0322	; 0x800322 <timr_Time+0x2>
    3aaa:	f0 90 23 03 	lds	r15, 0x0323	; 0x800323 <timr_Time+0x3>
    3aae:	6c 19       	sub	r22, r12
    3ab0:	7d 09       	sbc	r23, r13
    3ab2:	8e 09       	sbc	r24, r14
    3ab4:	9f 09       	sbc	r25, r15
    3ab6:	69 3e       	cpi	r22, 0xE9	; 233
    3ab8:	73 40       	sbci	r23, 0x03	; 3
    3aba:	81 05       	cpc	r24, r1
    3abc:	91 05       	cpc	r25, r1
    3abe:	70 f1       	brcs	.+92     	; 0x3b1c <main+0xff6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:331
        {
            timr_Time = millis();
    3ac0:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3ac4:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timr_Time>
    3ac8:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timr_Time+0x1>
    3acc:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timr_Time+0x2>
    3ad0:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:332
            showTime();
    3ad4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:333
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    3ad8:	ce 01       	movw	r24, r28
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3ae0:	ec 80       	ldd	r14, Y+4	; 0x04
    3ae2:	bc e3       	ldi	r27, 0x3C	; 60
    3ae4:	eb 9e       	mul	r14, r27
    3ae6:	70 01       	movw	r14, r0
    3ae8:	11 24       	eor	r1, r1
    3aea:	ce 01       	movw	r24, r28
    3aec:	43 96       	adiw	r24, 0x13	; 19
    3aee:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3af2:	8f 89       	ldd	r24, Y+23	; 0x17
    3af4:	8e 0d       	add	r24, r14
    3af6:	9f 2d       	mov	r25, r15
    3af8:	91 1d       	adc	r25, r1
    3afa:	09 2e       	mov	r0, r25
    3afc:	00 0c       	add	r0, r0
    3afe:	aa 0b       	sbc	r26, r26
    3b00:	bb 0b       	sbc	r27, r27
    3b02:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <CurTime>
    3b06:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <CurTime+0x1>
    3b0a:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <CurTime+0x2>
    3b0e:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:334
            if (config.AutoPlay)
    3b12:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <config+0x17>
    3b16:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:335
                TriggerPlayer();
    3b18:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:337
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    3b1c:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3b20:	00 91 38 03 	lds	r16, 0x0338	; 0x800338 <timrLCD>
    3b24:	10 91 39 03 	lds	r17, 0x0339	; 0x800339 <timrLCD+0x1>
    3b28:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <timrLCD+0x2>
    3b2c:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <timrLCD+0x3>
    3b30:	6b 01       	movw	r12, r22
    3b32:	7c 01       	movw	r14, r24
    3b34:	c0 1a       	sub	r12, r16
    3b36:	d1 0a       	sbc	r13, r17
    3b38:	e2 0a       	sbc	r14, r18
    3b3a:	f3 0a       	sbc	r15, r19
    3b3c:	a0 91 c9 03 	lds	r26, 0x03C9	; 0x8003c9 <config+0x13>
    3b40:	b0 91 ca 03 	lds	r27, 0x03CA	; 0x8003ca <config+0x14>
    3b44:	28 ee       	ldi	r18, 0xE8	; 232
    3b46:	33 e0       	ldi	r19, 0x03	; 3
    3b48:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__usmulhisi3>
    3b4c:	6c 15       	cp	r22, r12
    3b4e:	7d 05       	cpc	r23, r13
    3b50:	8e 05       	cpc	r24, r14
    3b52:	9f 05       	cpc	r25, r15
    3b54:	38 f4       	brcc	.+14     	; 0x3b64 <main+0x103e>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3b56:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	81 eb       	ldi	r24, 0xB1	; 177
    3b5e:	94 e0       	ldi	r25, 0x04	; 4
    3b60:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:341
        {
            lcd.noBacklight();
        }
        if (btn == BUTTON_MODE_LONG_PRESSED)
    3b64:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3b68:	85 38       	cpi	r24, 0x85	; 133
    3b6a:	09 f0       	breq	.+2      	; 0x3b6e <main+0x1048>
    3b6c:	52 cd       	rjmp	.-1372   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:343
        {
            if (!ButLongPress)
    3b6e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    3b72:	81 11       	cpse	r24, r1
    3b74:	4e cd       	rjmp	.-1380   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:345
            {
                appMode = APP_PLAYER_MODE;
    3b76:	85 e0       	ldi	r24, 0x05	; 5
    3b78:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:521
            if (!ButLongPress)
            {
                appMode = APP_NORMAL_MODE;
                PlayerONMor = 0;
                PlayerONEve = 0;
                lcd.clear();
    3b7c:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:522
                ButLongPress = true;
    3b80:	70 92 33 03 	sts	0x0333, r7	; 0x800333 <ButLongPress>
    3b84:	46 cd       	rjmp	.-1396   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:287
        if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3b86:	ce 01       	movw	r24, r28
    3b88:	49 96       	adiw	r24, 0x19	; 25
    3b8a:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3b8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	d8 ce       	rjmp	.-592    	; 0x3944 <main+0xe1e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:311
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    3b94:	61 e0       	ldi	r22, 0x01	; 1
    3b96:	8c e0       	ldi	r24, 0x0C	; 12
    3b98:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:312
                    timrAmp = millis();
    3b9c:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3ba0:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <timrAmp>
    3ba4:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <timrAmp+0x1>
    3ba8:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <timrAmp+0x2>
    3bac:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:313
                    appMode = APP_CHANT_MODE;
    3bb0:	83 e0       	ldi	r24, 0x03	; 3
    3bb2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
    3bb6:	31 cf       	rjmp	.-414    	; 0x3a1a <main+0xef4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:326
            {
                timrAmp = millis() - 71000L;
                if (rtc.now().minute() < 30)
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3bb8:	ce 01       	movw	r24, r28
    3bba:	43 96       	adiw	r24, 0x13	; 19
    3bbc:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3bc0:	fe 88       	ldd	r15, Y+22	; 0x16
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	49 96       	adiw	r24, 0x19	; 25
    3bc6:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3bca:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3bcc:	ce 01       	movw	r24, r28
    3bce:	4f 96       	adiw	r24, 0x1f	; 31
    3bd0:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3bd4:	d8 a0       	ldd	r13, Y+32	; 0x20
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	85 96       	adiw	r24, 0x25	; 37
    3bda:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3bde:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3be0:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3be2:	da 82       	std	Y+2, r13	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3be4:	eb 82       	std	Y+3, r14	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3be6:	fc 82       	std	Y+4, r15	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3be8:	8b e3       	ldi	r24, 0x3B	; 59
    3bea:	50 cf       	rjmp	.-352    	; 0x3a8c <main+0xf66>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    3bec:	88 e0       	ldi	r24, 0x08	; 8
    3bee:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    3bf2:	60 e0       	ldi	r22, 0x00	; 0
    3bf4:	81 eb       	ldi	r24, 0xB1	; 177
    3bf6:	94 e0       	ldi	r25, 0x04	; 4
    3bf8:	0e 94 8a 07 	call	0xf14	; 0xf14 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:354
        }
        break;
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    3bfc:	61 e0       	ldi	r22, 0x01	; 1
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:355
        lcd.print("CHANT PLAYING...");
    3c04:	86 e1       	ldi	r24, 0x16	; 22
    3c06:	92 e0       	ldi	r25, 0x02	; 2
    3c08:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:356
        if (millis() >= timrAmp + ampDelay)
    3c0c:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3c10:	ab 01       	movw	r20, r22
    3c12:	bc 01       	movw	r22, r24
    3c14:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <timrAmp>
    3c18:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <timrAmp+0x1>
    3c1c:	a0 91 27 03 	lds	r26, 0x0327	; 0x800327 <timrAmp+0x2>
    3c20:	b0 91 28 03 	lds	r27, 0x0328	; 0x800328 <timrAmp+0x3>
    3c24:	88 57       	subi	r24, 0x78	; 120
    3c26:	9c 4e       	sbci	r25, 0xEC	; 236
    3c28:	af 4f       	sbci	r26, 0xFF	; 255
    3c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c2c:	48 17       	cp	r20, r24
    3c2e:	59 07       	cpc	r21, r25
    3c30:	6a 07       	cpc	r22, r26
    3c32:	7b 07       	cpc	r23, r27
    3c34:	10 f0       	brcs	.+4      	; 0x3c3a <main+0x1114>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:357
            PlayChant();
    3c36:	0e 94 cc 10 	call	0x2198	; 0x2198 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:358
        if (btn == BUTTON_LEFT_SHORT_RELEASE && testMode)
    3c3a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3c3e:	84 34       	cpi	r24, 0x44	; 68
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <main+0x111e>
    3c42:	e7 cc       	rjmp	.-1586   	; 0x3612 <main+0xaec>
    3c44:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <testMode>
    3c48:	88 23       	and	r24, r24
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <main+0x1128>
    3c4c:	e2 cc       	rjmp	.-1596   	; 0x3612 <main+0xaec>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    3c4e:	70 e0       	ldi	r23, 0x00	; 0
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	86 e1       	ldi	r24, 0x16	; 22
    3c54:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
    3c58:	dc cc       	rjmp	.-1608   	; 0x3612 <main+0xaec>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:366
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    3c5a:	60 e0       	ldi	r22, 0x00	; 0
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:367
        lcd.print(F("  RUNNING DEMO  "));
    3c62:	82 e5       	ldi	r24, 0x52	; 82
    3c64:	93 e0       	ldi	r25, 0x03	; 3
    3c66:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:368
        lcd.setCursor(0, 1);
    3c6a:	61 e0       	ldi	r22, 0x01	; 1
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:369
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    3c72:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <demoTime>
    3c76:	f0 90 04 01 	lds	r15, 0x0104	; 0x800104 <demoTime+0x1>
main():
    3c7a:	60 e7       	ldi	r22, 0x70	; 112
    3c7c:	71 e0       	ldi	r23, 0x01	; 1
loop():
    3c7e:	ec e0       	ldi	r30, 0x0C	; 12
    3c80:	ee 16       	cp	r14, r30
    3c82:	f1 04       	cpc	r15, r1
    3c84:	14 f4       	brge	.+4      	; 0x3c8a <main+0x1164>
main():
    3c86:	67 e7       	ldi	r22, 0x77	; 119
    3c88:	71 e0       	ldi	r23, 0x01	; 1
loop():
    3c8a:	ce 01       	movw	r24, r28
    3c8c:	43 96       	adiw	r24, 0x13	; 19
    3c8e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
    3c92:	fd e0       	ldi	r31, 0x0D	; 13
    3c94:	ef 16       	cp	r14, r31
    3c96:	f1 04       	cpc	r15, r1
    3c98:	1c f0       	brlt	.+6      	; 0x3ca0 <main+0x117a>
    3c9a:	2c e0       	ldi	r18, 0x0C	; 12
    3c9c:	e2 1a       	sub	r14, r18
    3c9e:	f1 08       	sbc	r15, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    3ca0:	1a 8e       	std	Y+26, r1	; 0x1a
    3ca2:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    3ca4:	1c 8e       	std	Y+28, r1	; 0x1c
    3ca6:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    3ca8:	1e 8e       	std	Y+30, r1	; 0x1e
    3caa:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3cac:	4a e0       	ldi	r20, 0x0A	; 10
    3cae:	be 01       	movw	r22, r28
    3cb0:	6f 5f       	subi	r22, 0xFF	; 255
    3cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb4:	c7 01       	movw	r24, r14
    3cb6:	0e 94 24 2b 	call	0x5648	; 0x5648 <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    3cba:	ec a5       	ldd	r30, Y+44	; 0x2c
    3cbc:	fd a5       	ldd	r31, Y+45	; 0x2d
    3cbe:	01 90       	ld	r0, Z+
    3cc0:	00 20       	and	r0, r0
    3cc2:	e9 f7       	brne	.-6      	; 0x3cbe <main+0x1198>
    3cc4:	31 97       	sbiw	r30, 0x01	; 1
    3cc6:	7f 01       	movw	r14, r30
    3cc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cca:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ccc:	e8 1a       	sub	r14, r24
    3cce:	f9 0a       	sbc	r15, r25
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    3cd0:	b7 01       	movw	r22, r14
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	49 96       	adiw	r24, 0x19	; 25
    3cd6:	0e 94 24 0c 	call	0x1848	; 0x1848 <String::reserve(unsigned int)>
    3cda:	81 11       	cpse	r24, r1
    3cdc:	90 c0       	rjmp	.+288    	; 0x3dfe <main+0x12d8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    3cde:	ce 01       	movw	r24, r28
    3ce0:	49 96       	adiw	r24, 0x19	; 25
    3ce2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    3ce6:	67 e2       	ldi	r22, 0x27	; 39
    3ce8:	72 e0       	ldi	r23, 0x02	; 2
    3cea:	ce 01       	movw	r24, r28
    3cec:	01 96       	adiw	r24, 0x01	; 1
    3cee:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:369
    3cf2:	be 01       	movw	r22, r28
    3cf4:	67 5e       	subi	r22, 0xE7	; 231
    3cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf8:	ce 01       	movw	r24, r28
    3cfa:	01 96       	adiw	r24, 0x01	; 1
    3cfc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <operator+(StringSumHelper const&, String const&)>
    3d00:	be 01       	movw	r22, r28
    3d02:	6d 5e       	subi	r22, 0xED	; 237
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	0e 94 4c 0c 	call	0x1898	; 0x1898 <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	14 96       	adiw	r26, 0x04	; 4
    3d0e:	4d 91       	ld	r20, X+
    3d10:	5c 91       	ld	r21, X
    3d12:	15 97       	sbiw	r26, 0x05	; 5
    3d14:	6d 91       	ld	r22, X+
    3d16:	7c 91       	ld	r23, X
    3d18:	81 eb       	ldi	r24, 0xB1	; 177
    3d1a:	94 e0       	ldi	r25, 0x04	; 4
    3d1c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	9a 81       	ldd	r25, Y+2	; 0x02
    3d24:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
    3d28:	89 8d       	ldd	r24, Y+25	; 0x19
    3d2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d2c:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
    3d30:	8b 89       	ldd	r24, Y+19	; 0x13
    3d32:	9c 89       	ldd	r25, Y+20	; 0x14
    3d34:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:370
        digitalWrite(AMP, HIGH);
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	8c e0       	ldi	r24, 0x0C	; 12
    3d3c:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:372
        // delay(1000);
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    3d40:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <demoTime>
    3d44:	ce 01       	movw	r24, r28
    3d46:	01 96       	adiw	r24, 0x01	; 1
    3d48:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3d4c:	eb 80       	ldd	r14, Y+3	; 0x03
    3d4e:	ce 01       	movw	r24, r28
    3d50:	43 96       	adiw	r24, 0x13	; 19
    3d52:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3d56:	dc 88       	ldd	r13, Y+20	; 0x14
    3d58:	ce 01       	movw	r24, r28
    3d5a:	49 96       	adiw	r24, 0x19	; 25
    3d5c:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3d60:	89 8d       	ldd	r24, Y+25	; 0x19
    3d62:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <bell>
    3d66:	d0 92 ac 04 	sts	0x04AC, r13	; 0x8004ac <bell+0x1>
    3d6a:	e0 92 ad 04 	sts	0x04AD, r14	; 0x8004ad <bell+0x2>
    3d6e:	f0 92 ae 04 	sts	0x04AE, r15	; 0x8004ae <bell+0x3>
    3d72:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <bell+0x4>
    3d76:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <bell+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:373
        PlayChant();
    3d7a:	0e 94 cc 10 	call	0x2198	; 0x2198 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:374
        if (btn == BUTTON_LEFT_PRESSED)
    3d7e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3d82:	84 30       	cpi	r24, 0x04	; 4
    3d84:	41 f4       	brne	.+16     	; 0x3d96 <main+0x1270>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:376
        {
            playSong = End_of_Song;
    3d86:	88 e0       	ldi	r24, 0x08	; 8
    3d88:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	60 e0       	ldi	r22, 0x00	; 0
    3d90:	86 e1       	ldi	r24, 0x16	; 22
    3d92:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:379
            myDFPlayer.stop();
        }
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3d96:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3d9a:	8f 77       	andi	r24, 0x7F	; 127
    3d9c:	82 30       	cpi	r24, 0x02	; 2
    3d9e:	c9 f5       	brne	.+114    	; 0x3e12 <main+0x12ec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:381
        {
            config.vol = ++config.vol > 30 ? 10 : config.vol;
    3da0:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x15>
    3da4:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <config+0x16>
    3da8:	01 96       	adiw	r24, 0x01	; 1
    3daa:	8f 31       	cpi	r24, 0x1F	; 31
    3dac:	91 05       	cpc	r25, r1
    3dae:	14 f0       	brlt	.+4      	; 0x3db4 <main+0x128e>
main():
    3db0:	8a e0       	ldi	r24, 0x0A	; 10
    3db2:	90 e0       	ldi	r25, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:392
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    3db4:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <config+0x16>
    3db8:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:393
            config.save();
    3dbc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:394
            lcd.clear();
    3dc0:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:395
            lcd.setCursor(0, 1);
    3dc4:	61 e0       	ldi	r22, 0x01	; 1
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:396
            lcd.print("VOLUME : ");
    3dcc:	84 e3       	ldi	r24, 0x34	; 52
    3dce:	92 e0       	ldi	r25, 0x02	; 2
    3dd0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:397
            lcd.print(config.vol);
    3dd4:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x15>
    3dd8:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <config+0x16>
    3ddc:	0e 94 2c 0b 	call	0x1658	; 0x1658 <Print::print(int, int) [clone .constprop.4]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3de0:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <config+0x15>
    3de4:	70 91 cc 03 	lds	r23, 0x03CC	; 0x8003cc <config+0x16>
    3de8:	77 27       	eor	r23, r23
    3dea:	86 e0       	ldi	r24, 0x06	; 6
    3dec:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:399
            myDFPlayer.volume(config.vol);
            delay(100);
    3df0:	64 e6       	ldi	r22, 0x64	; 100
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 23 04 	call	0x846	; 0x846 <delay>
    3dfc:	0a cc       	rjmp	.-2028   	; 0x3612 <main+0xaec>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3dfe:	fe 8e       	std	Y+30, r15	; 0x1e
    3e00:	ed 8e       	std	Y+29, r14	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    3e02:	be 01       	movw	r22, r28
    3e04:	6f 5f       	subi	r22, 0xFF	; 255
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	89 8d       	ldd	r24, Y+25	; 0x19
    3e0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e0c:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
    3e10:	6a cf       	rjmp	.-300    	; 0x3ce6 <main+0x11c0>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:390
            lcd.print("VOLUME : ");
            lcd.print(config.vol);
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3e12:	83 30       	cpi	r24, 0x03	; 3
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <main+0x12f2>
    3e16:	fd cb       	rjmp	.-2054   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:392
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    3e18:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x15>
    3e1c:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <config+0x16>
    3e20:	01 97       	sbiw	r24, 0x01	; 1
    3e22:	8a 30       	cpi	r24, 0x0A	; 10
    3e24:	91 05       	cpc	r25, r1
    3e26:	34 f6       	brge	.-116    	; 0x3db4 <main+0x128e>
main():
    3e28:	8e e1       	ldi	r24, 0x1E	; 30
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	c3 cf       	rjmp	.-122    	; 0x3db4 <main+0x128e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:405
        }
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > 30000)
    3e2e:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3e32:	c0 90 34 03 	lds	r12, 0x0334	; 0x800334 <timrMNU>
    3e36:	d0 90 35 03 	lds	r13, 0x0335	; 0x800335 <timrMNU+0x1>
    3e3a:	e0 90 36 03 	lds	r14, 0x0336	; 0x800336 <timrMNU+0x2>
    3e3e:	f0 90 37 03 	lds	r15, 0x0337	; 0x800337 <timrMNU+0x3>
    3e42:	6c 19       	sub	r22, r12
    3e44:	7d 09       	sbc	r23, r13
    3e46:	8e 09       	sbc	r24, r14
    3e48:	9f 09       	sbc	r25, r15
    3e4a:	61 33       	cpi	r22, 0x31	; 49
    3e4c:	75 47       	sbci	r23, 0x75	; 117
    3e4e:	81 05       	cpc	r24, r1
    3e50:	91 05       	cpc	r25, r1
    3e52:	d8 f0       	brcs	.+54     	; 0x3e8a <main+0x1364>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:407
        {
            if (!digitalRead(STA_PIN))
    3e54:	84 e0       	ldi	r24, 0x04	; 4
    3e56:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3e5a:	89 2b       	or	r24, r25
    3e5c:	11 f4       	brne	.+4      	; 0x3e62 <main+0x133c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:409
            {
                stopPreSong();
    3e5e:	0e 94 49 08 	call	0x1092	; 0x1092 <stopPreSong()>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3e62:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1>
    3e66:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <Menu1+0x1>
    3e6a:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <Menu1+0x4>
    3e6e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3e72:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <Menu1+0x2>
    3e76:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3e7a:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    3e7e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:412
            }
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3e82:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:413
            lcd.clear();
    3e86:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:416
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
    3e8a:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:417
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
    3e8e:	81 30       	cpi	r24, 0x01	; 1
    3e90:	09 f0       	breq	.+2      	; 0x3e94 <main+0x136e>
    3e92:	57 c0       	rjmp	.+174    	; 0x3f42 <main+0x141c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:420
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    3e94:	ce 01       	movw	r24, r28
    3e96:	01 96       	adiw	r24, 0x01	; 1
    3e98:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <StDate+0x1>
    3ea4:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <StDate>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:421
            StMonth = rtc.now().month();
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	01 96       	adiw	r24, 0x01	; 1
    3eac:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <StMonth+0x1>
    3eb8:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <StMonth>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:422
            StYear = rtc.now().year();
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	80 53       	subi	r24, 0x30	; 48
    3eca:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:422
    3ecc:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <StYear+0x1>
    3ed0:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <StYear>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:423
            StHr = rtc.now().hour();
    3ed4:	ce 01       	movw	r24, r28
    3ed6:	01 96       	adiw	r24, 0x01	; 1
    3ed8:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3edc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <StHr+0x1>
    3ee4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <StHr>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:424
            StMin = rtc.now().minute();
    3ee8:	ce 01       	movw	r24, r28
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	0e 94 23 0a 	call	0x1446	; 0x1446 <RTC_DS1307::now() [clone .constprop.31]>
    3ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <StMin+0x1>
    3ef8:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <StMin>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:426
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
    3efc:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:431
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    3f00:	83 30       	cpi	r24, 0x03	; 3
    3f02:	49 f1       	breq	.+82     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:427
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
    3f04:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:426
            StMonth = rtc.now().month();
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
    3f08:	85 31       	cpi	r24, 0x15	; 21
    3f0a:	29 f1       	breq	.+74     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:428
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
    3f0c:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:427
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
    3f10:	86 31       	cpi	r24, 0x16	; 22
    3f12:	09 f1       	breq	.+66     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:429
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
    3f14:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:428
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
    3f18:	88 31       	cpi	r24, 0x18	; 24
    3f1a:	e9 f0       	breq	.+58     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:430
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
    3f1c:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:429
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
    3f20:	89 31       	cpi	r24, 0x19	; 25
    3f22:	c9 f0       	breq	.+50     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:431
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    3f24:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:430
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
    3f28:	8a 31       	cpi	r24, 0x1A	; 26
    3f2a:	a9 f0       	breq	.+42     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:432
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
    3f2c:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:431
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    3f30:	8b 31       	cpi	r24, 0x1B	; 27
    3f32:	89 f0       	breq	.+34     	; 0x3f56 <main+0x1430>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:436
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    3f34:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    3f38:	82 30       	cpi	r24, 0x02	; 2
    3f3a:	79 f4       	brne	.+30     	; 0x3f5a <main+0x1434>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:438
        {
            blinkMode = setDate;
    3f3c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
    3f40:	0c c0       	rjmp	.+24     	; 0x3f5a <main+0x1434>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:417
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
    3f42:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:416
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
    3f46:	82 30       	cpi	r24, 0x02	; 2
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <main+0x1426>
    3f4a:	a4 cf       	rjmp	.-184    	; 0x3e94 <main+0x136e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:418
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    3f4c:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:417
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
    3f50:	83 30       	cpi	r24, 0x03	; 3
    3f52:	a1 f6       	brne	.-88     	; 0x3efc <main+0x13d6>
    3f54:	9f cf       	rjmp	.-194    	; 0x3e94 <main+0x136e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:434
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
        {
            blinkMode = setHr;
    3f56:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <blinkMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:441
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    3f5a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3f5e:	84 38       	cpi	r24, 0x84	; 132
    3f60:	a1 f4       	brne	.+40     	; 0x3f8a <main+0x1464>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3f62:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1>
    3f66:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <Menu1+0x1>
    3f6a:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <Menu1+0x4>
    3f6e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3f72:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <Menu1+0x2>
    3f76:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3f7a:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    3f7e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:444
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3f82:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:445
            lcd.clear();
    3f86:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:155

// ---------------------------------------------------
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();
    3f8a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <getNavAction()>
    3f8e:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:157

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    3f90:	8d ef       	ldi	r24, 0xFD	; 253
    3f92:	81 0f       	add	r24, r17
    3f94:	82 30       	cpi	r24, 0x02	; 2
    3f96:	08 f0       	brcs	.+2      	; 0x3f9a <main+0x1474>
    3f98:	a6 c0       	rjmp	.+332    	; 0x40e6 <main+0x15c0>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    3f9a:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    3f9e:	88 23       	and	r24, r24
    3fa0:	e1 f0       	breq	.+56     	; 0x3fda <main+0x14b4>
    3fa2:	14 30       	cpi	r17, 0x04	; 4
    3fa4:	d1 f0       	breq	.+52     	; 0x3fda <main+0x14b4>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    3fa6:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.103]>
    3faa:	81 11       	cpse	r24, r1
    3fac:	59 c0       	rjmp	.+178    	; 0x4060 <main+0x153a>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:460
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    3fae:	82 e0       	ldi	r24, 0x02	; 2
    3fb0:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:461
            if (Menu1.getCurrentItemCmdId())
    3fb4:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    3fb8:	88 23       	and	r24, r24
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <main+0x1498>
    3fbc:	2a cb       	rjmp	.-2476   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:463
            {
                lcd.setCursor(0, 1);
    3fbe:	61 e0       	ldi	r22, 0x01	; 1
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:464
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    3fc6:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:489
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    3fc8:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <strbuf>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:490
            strbuf[1] = 0;
    3fcc:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:491
            lcd.print(strbuf);
    3fd0:	8a e2       	ldi	r24, 0x2A	; 42
    3fd2:	94 e0       	ldi	r25, 0x04	; 4
    3fd4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
    3fd8:	1c cb       	rjmp	.-2504   	; 0x3612 <main+0xaec>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    3fda:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    3fde:	81 11       	cpse	r24, r1
    3fe0:	1a c0       	rjmp	.+52     	; 0x4016 <main+0x14f0>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3fe2:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1>
    3fe6:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <Menu1+0x1>
    3fea:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <Menu1+0x4>
    3fee:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3ff2:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <Menu1+0x2>
    3ff6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3ffa:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:451
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            if (!digitalRead(STA_PIN))
    3ffe:	84 e0       	ldi	r24, 0x04	; 4
    4000:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    4004:	89 2b       	or	r24, r25
    4006:	11 f4       	brne	.+4      	; 0x400c <main+0x14e6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:453
            {
                stopPreSong();
    4008:	0e 94 49 08 	call	0x1092	; 0x1092 <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:455
            }
            lcd.clear();
    400c:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:456
            appMode = APP_NORMAL_MODE;
    4010:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
    4014:	fe ca       	rjmp	.-2564   	; 0x3612 <main+0xaec>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    4016:	81 50       	subi	r24, 0x01	; 1
    4018:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    401c:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    401e:	dc 01       	movw	r26, r24
    4020:	aa 0f       	add	r26, r26
    4022:	bb 1f       	adc	r27, r27
    4024:	aa 0f       	add	r26, r26
    4026:	bb 1f       	adc	r27, r27
    4028:	a5 5c       	subi	r26, 0xC5	; 197
    402a:	bb 4f       	sbci	r27, 0xFB	; 251
    402c:	19 96       	adiw	r26, 0x09	; 9
    402e:	2d 91       	ld	r18, X+
    4030:	3c 91       	ld	r19, X
    4032:	1a 97       	sbiw	r26, 0x0a	; 10
    4034:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <Menu1+0x4>
    4038:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    403c:	88 0f       	add	r24, r24
    403e:	99 1f       	adc	r25, r25
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	fc 01       	movw	r30, r24
    4046:	ed 5b       	subi	r30, 0xBD	; 189
    4048:	fb 4f       	sbci	r31, 0xFB	; 251
    404a:	80 81       	ld	r24, Z
    404c:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    4050:	17 96       	adiw	r26, 0x07	; 7
    4052:	8c 91       	ld	r24, X
    4054:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    4058:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    405a:	0e 94 24 12 	call	0x2448	; 0x2448 <refreshMenuDisplay(unsigned char)>
    405e:	d9 ca       	rjmp	.-2638   	; 0x3612 <main+0xaec>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    4060:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.103]>
    4064:	88 23       	and	r24, r24
    4066:	09 f4       	brne	.+2      	; 0x406a <main+0x1544>
    4068:	3c c0       	rjmp	.+120    	; 0x40e2 <main+0x15bc>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    406a:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <Menu1+0x6>
    406e:	60 91 3e 04 	lds	r22, 0x043E	; 0x80043e <Menu1+0x3>
    4072:	70 91 3f 04 	lds	r23, 0x043F	; 0x80043f <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    4076:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <Menu1+0x1b>
    407a:	25 30       	cpi	r18, 0x05	; 5
    407c:	e8 f4       	brcc	.+58     	; 0x40b8 <main+0x1592>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    407e:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    4082:	82 2f       	mov	r24, r18
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	dc 01       	movw	r26, r24
    4088:	aa 0f       	add	r26, r26
    408a:	bb 1f       	adc	r27, r27
    408c:	aa 0f       	add	r26, r26
    408e:	bb 1f       	adc	r27, r27
    4090:	a5 5c       	subi	r26, 0xC5	; 197
    4092:	bb 4f       	sbci	r27, 0xFB	; 251
    4094:	17 96       	adiw	r26, 0x07	; 7
    4096:	3c 93       	st	X, r19
    4098:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	88 0f       	add	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	8d 5b       	subi	r24, 0xBD	; 189
    40a4:	9b 4f       	sbci	r25, 0xFB	; 251
    40a6:	fc 01       	movw	r30, r24
    40a8:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    40aa:	1a 96       	adiw	r26, 0x0a	; 10
    40ac:	7c 93       	st	X, r23
    40ae:	6e 93       	st	-X, r22
    40b0:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:215
    menuStackCount++;
    40b2:	2f 5f       	subi	r18, 0xFF	; 255
    40b4:	20 93 56 04 	sts	0x0456, r18	; 0x800456 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    40b8:	cb 01       	movw	r24, r22
    40ba:	f6 e0       	ldi	r31, 0x06	; 6
    40bc:	3f 9f       	mul	r19, r31
    40be:	80 0d       	add	r24, r0
    40c0:	91 1d       	adc	r25, r1
    40c2:	11 24       	eor	r1, r1
    40c4:	fc 01       	movw	r30, r24
    40c6:	35 96       	adiw	r30, 0x05	; 5
    40c8:	e4 91       	lpm	r30, Z
    40ca:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    40ce:	fc 01       	movw	r30, r24
    40d0:	33 96       	adiw	r30, 0x03	; 3
    40d2:	85 91       	lpm	r24, Z+
    40d4:	94 91       	lpm	r25, Z
    40d6:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <Menu1+0x4>
    40da:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    40de:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    40e2:	83 e0       	ldi	r24, 0x03	; 3
    40e4:	ba cf       	rjmp	.-140    	; 0x405a <main+0x1534>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    40e6:	11 30       	cpi	r17, 0x01	; 1
    40e8:	51 f4       	brne	.+20     	; 0x40fe <main+0x15d8>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    40ea:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <Menu1+0x6>
    40ee:	88 23       	and	r24, r24
    40f0:	09 f4       	brne	.+2      	; 0x40f4 <main+0x15ce>
    40f2:	8f ca       	rjmp	.-2786   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    40f4:	81 50       	subi	r24, 0x01	; 1
    40f6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	ae cf       	rjmp	.-164    	; 0x405a <main+0x1534>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    40fe:	12 30       	cpi	r17, 0x02	; 2
    4100:	09 f0       	breq	.+2      	; 0x4104 <main+0x15de>
    4102:	87 ca       	rjmp	.-2802   	; 0x3612 <main+0xaec>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    4104:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <Menu1+0x6>
    4108:	20 91 40 04 	lds	r18, 0x0440	; 0x800440 <Menu1+0x5>
    410c:	21 50       	subi	r18, 0x01	; 1
    410e:	33 0b       	sbc	r19, r19
    4110:	82 17       	cp	r24, r18
    4112:	13 06       	cpc	r1, r19
    4114:	0c f0       	brlt	.+2      	; 0x4118 <main+0x15f2>
    4116:	7d ca       	rjmp	.-2822   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    4118:	8f 5f       	subi	r24, 0xFF	; 255
    411a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	9c cf       	rjmp	.-200    	; 0x405a <main+0x1534>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:473
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    4122:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    4126:	d8 2e       	mov	r13, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:650
    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }

    switch (cmdId)
    4128:	ee ef       	ldi	r30, 0xFE	; 254
    412a:	e8 0f       	add	r30, r24
    412c:	ed 31       	cpi	r30, 0x1D	; 29
    412e:	10 f0       	brcs	.+4      	; 0x4134 <main+0x160e>
    4130:	0c 94 65 29 	jmp	0x52ca	; 0x52ca <main+0x27a4>
    4134:	f0 e0       	ldi	r31, 0x00	; 0
    4136:	e1 56       	subi	r30, 0x61	; 97
    4138:	ff 4d       	sbci	r31, 0xDF	; 223
    413a:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__tablejump2__>
    413e:	bc 20       	and	r11, r12
    4140:	c6 21       	and	r28, r6
    4142:	65 29       	or	r22, r5
    4144:	47 22       	and	r4, r23
    4146:	79 22       	and	r7, r25
    4148:	a7 22       	and	r10, r23
    414a:	65 29       	or	r22, r5
    414c:	d1 22       	and	r13, r17
    414e:	0b 23       	and	r16, r27
    4150:	65 29       	or	r22, r5
    4152:	20 23       	and	r18, r16
    4154:	52 23       	and	r21, r18
    4156:	65 29       	or	r22, r5
    4158:	6a 23       	and	r22, r26
    415a:	9a 23       	and	r25, r26
    415c:	ca 23       	and	r28, r26
    415e:	03 24       	eor	r0, r3
    4160:	a0 28       	or	r10, r0
    4162:	65 29       	or	r22, r5
    4164:	36 24       	eor	r3, r6
    4166:	ea 24       	eor	r14, r10
    4168:	65 29       	or	r22, r5
    416a:	98 25       	eor	r25, r8
    416c:	46 26       	eor	r4, r22
    416e:	f4 26       	eor	r15, r20
    4170:	a0 27       	eor	r26, r16
    4172:	65 29       	or	r22, r5
    4174:	74 28       	or	r7, r4
    4176:	4e 28       	or	r4, r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:654
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    4178:	12 30       	cpi	r17, 0x02	; 2
    417a:	09 f0       	breq	.+2      	; 0x417e <main+0x1658>
    417c:	8d c0       	rjmp	.+282    	; 0x4298 <main+0x1772>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:656
        {
            if (blinkMode == setDate)
    417e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4182:	82 30       	cpi	r24, 0x02	; 2
    4184:	09 f0       	breq	.+2      	; 0x4188 <main+0x1662>
    4186:	5e c0       	rjmp	.+188    	; 0x4244 <main+0x171e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:657
                StDate = ++StDate > 31 ? 1 : StDate;
    4188:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <StDate>
    418c:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <StDate+0x1>
    4190:	01 96       	adiw	r24, 0x01	; 1
    4192:	80 32       	cpi	r24, 0x20	; 32
    4194:	91 05       	cpc	r25, r1
    4196:	14 f0       	brlt	.+4      	; 0x419c <main+0x1676>
main():
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    419c:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <StDate+0x1>
    41a0:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    41a4:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    41a6:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1203
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    41a8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    41ac:	84 34       	cpi	r24, 0x44	; 68
    41ae:	21 f0       	breq	.+8      	; 0x41b8 <main+0x1692>
    41b0:	11 23       	and	r17, r17
    41b2:	11 f4       	brne	.+4      	; 0x41b8 <main+0x1692>
    41b4:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <main+0x2884>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1206
    {
        complete = true;
        lcd.setCursor(1, 1);
    41b8:	61 e0       	ldi	r22, 0x01	; 1
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1207
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    41c0:	8d 2d       	mov	r24, r13
    41c2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    41c6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    41ca:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1205
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    41ce:	ee 24       	eor	r14, r14
    41d0:	e3 94       	inc	r14
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:474
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > 30000)
    41d2:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    41d6:	80 90 34 03 	lds	r8, 0x0334	; 0x800334 <timrMNU>
    41da:	90 90 35 03 	lds	r9, 0x0335	; 0x800335 <timrMNU+0x1>
    41de:	a0 90 36 03 	lds	r10, 0x0336	; 0x800336 <timrMNU+0x2>
    41e2:	b0 90 37 03 	lds	r11, 0x0337	; 0x800337 <timrMNU+0x3>
    41e6:	68 19       	sub	r22, r8
    41e8:	79 09       	sbc	r23, r9
    41ea:	8a 09       	sbc	r24, r10
    41ec:	9b 09       	sbc	r25, r11
    41ee:	61 33       	cpi	r22, 0x31	; 49
    41f0:	75 47       	sbci	r23, 0x75	; 117
    41f2:	81 05       	cpc	r24, r1
    41f4:	91 05       	cpc	r25, r1
    41f6:	d8 f0       	brcs	.+54     	; 0x422e <main+0x1708>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:476
        {
            if (!digitalRead(STA_PIN))
    41f8:	84 e0       	ldi	r24, 0x04	; 4
    41fa:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    41fe:	89 2b       	or	r24, r25
    4200:	11 f4       	brne	.+4      	; 0x4206 <main+0x16e0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:478
            {
                stopPreSong();
    4202:	0e 94 49 08 	call	0x1092	; 0x1092 <stopPreSong()>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    4206:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1>
    420a:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <Menu1+0x1>
    420e:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <Menu1+0x4>
    4212:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    4216:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <Menu1+0x2>
    421a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    421e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    4222:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:481
            }
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    4226:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:482
            lcd.clear();
    422a:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:484
        }
        if (processingComplete)
    422e:	ee 20       	and	r14, r14
    4230:	09 f4       	brne	.+2      	; 0x4234 <main+0x170e>
    4232:	ef c9       	rjmp	.-3106   	; 0x3612 <main+0xaec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:486
        {
            appMode = APP_MENU_MODE;
    4234:	70 92 32 03 	sts	0x0332, r7	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:488
            // clear forward arrow
            lcd.setCursor(0, 1);
    4238:	61 e0       	ldi	r22, 0x01	; 1
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:489
            strbuf[0] = ' '; // clear forward arrow
    4240:	80 e2       	ldi	r24, 0x20	; 32
    4242:	c2 ce       	rjmp	.-636    	; 0x3fc8 <main+0x14a2>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:658
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    4244:	83 30       	cpi	r24, 0x03	; 3
    4246:	89 f4       	brne	.+34     	; 0x426a <main+0x1744>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:659
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    4248:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <StMonth>
    424c:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <StMonth+0x1>
    4250:	01 96       	adiw	r24, 0x01	; 1
    4252:	8d 30       	cpi	r24, 0x0D	; 13
    4254:	91 05       	cpc	r25, r1
    4256:	14 f0       	brlt	.+4      	; 0x425c <main+0x1736>
main():
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    425c:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <StMonth+0x1>
    4260:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <StMonth>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4264:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4266:	10 e0       	ldi	r17, 0x00	; 0
    4268:	9f cf       	rjmp	.-194    	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    426a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    426c:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:660
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    426e:	84 30       	cpi	r24, 0x04	; 4
    4270:	09 f0       	breq	.+2      	; 0x4274 <main+0x174e>
    4272:	9a cf       	rjmp	.-204    	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:661
                StYear = ++StYear > 2050 ? 2020 : StYear;
    4274:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <StYear>
    4278:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <StYear+0x1>
    427c:	01 96       	adiw	r24, 0x01	; 1
    427e:	83 30       	cpi	r24, 0x03	; 3
    4280:	28 e0       	ldi	r18, 0x08	; 8
    4282:	92 07       	cpc	r25, r18
    4284:	14 f0       	brlt	.+4      	; 0x428a <main+0x1764>
main():
    4286:	84 ee       	ldi	r24, 0xE4	; 228
    4288:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
    428a:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <StYear+0x1>
    428e:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <StYear>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4292:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4294:	10 e0       	ldi	r17, 0x00	; 0
    4296:	88 cf       	rjmp	.-240    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:663
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    4298:	13 30       	cpi	r17, 0x03	; 3
    429a:	09 f0       	breq	.+2      	; 0x429e <main+0x1778>
    429c:	3f c0       	rjmp	.+126    	; 0x431c <main+0x17f6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:665
        {
            if (blinkMode == setDate)
    429e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    42a2:	82 30       	cpi	r24, 0x02	; 2
    42a4:	89 f4       	brne	.+34     	; 0x42c8 <main+0x17a2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:666
                StDate = --StDate < 1 ? 31 : StDate;
    42a6:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <StDate>
    42aa:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <StDate+0x1>
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	18 16       	cp	r1, r24
    42b2:	19 06       	cpc	r1, r25
    42b4:	14 f0       	brlt	.+4      	; 0x42ba <main+0x1794>
main():
    42b6:	8f e1       	ldi	r24, 0x1F	; 31
    42b8:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    42ba:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <StDate+0x1>
    42be:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    42c2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42c4:	10 e0       	ldi	r17, 0x00	; 0
    42c6:	70 cf       	rjmp	.-288    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:667
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
    42c8:	83 30       	cpi	r24, 0x03	; 3
    42ca:	89 f4       	brne	.+34     	; 0x42ee <main+0x17c8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:668
                StMonth = --StMonth < 1 ? 12 : StMonth;
    42cc:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <StMonth>
    42d0:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <StMonth+0x1>
    42d4:	01 97       	sbiw	r24, 0x01	; 1
    42d6:	18 16       	cp	r1, r24
    42d8:	19 06       	cpc	r1, r25
    42da:	14 f0       	brlt	.+4      	; 0x42e0 <main+0x17ba>
main():
    42dc:	8c e0       	ldi	r24, 0x0C	; 12
    42de:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    42e0:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <StMonth+0x1>
    42e4:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <StMonth>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    42e8:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42ea:	10 e0       	ldi	r17, 0x00	; 0
    42ec:	5d cf       	rjmp	.-326    	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    42ee:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42f0:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:669
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
    42f2:	84 30       	cpi	r24, 0x04	; 4
    42f4:	09 f0       	breq	.+2      	; 0x42f8 <main+0x17d2>
    42f6:	58 cf       	rjmp	.-336    	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:670
                StYear = --StYear < 2020 ? 2050 : StYear;
    42f8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <StYear>
    42fc:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <StYear+0x1>
    4300:	01 97       	sbiw	r24, 0x01	; 1
    4302:	84 3e       	cpi	r24, 0xE4	; 228
    4304:	37 e0       	ldi	r19, 0x07	; 7
    4306:	93 07       	cpc	r25, r19
    4308:	14 f4       	brge	.+4      	; 0x430e <main+0x17e8>
main():
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	98 e0       	ldi	r25, 0x08	; 8
processMenuCommand():
    430e:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <StYear+0x1>
    4312:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <StYear>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4316:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4318:	10 e0       	ldi	r17, 0x00	; 0
    431a:	46 cf       	rjmp	.-372    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:672
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2020 ? 2050 : StYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    431c:	11 30       	cpi	r17, 0x01	; 1
    431e:	09 f0       	breq	.+2      	; 0x4322 <main+0x17fc>
    4320:	d8 c7       	rjmp	.+4016   	; 0x52d2 <main+0x27ac>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:674
        {
            if (blinkMode == setDate)
    4322:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4326:	82 30       	cpi	r24, 0x02	; 2
    4328:	31 f4       	brne	.+12     	; 0x4336 <main+0x1810>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:676
            {
                blinkMode = setMonth;
    432a:	83 e0       	ldi	r24, 0x03	; 3
    432c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4330:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4332:	10 e0       	ldi	r17, 0x00	; 0
    4334:	39 cf       	rjmp	.-398    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:678
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    4336:	83 30       	cpi	r24, 0x03	; 3
    4338:	31 f4       	brne	.+12     	; 0x4346 <main+0x1820>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:680
            {
                blinkMode = setYear;
    433a:	84 e0       	ldi	r24, 0x04	; 4
    433c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4340:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4342:	10 e0       	ldi	r17, 0x00	; 0
    4344:	31 cf       	rjmp	.-414    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:682
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
    4346:	84 30       	cpi	r24, 0x04	; 4
    4348:	09 f0       	breq	.+2      	; 0x434c <main+0x1826>
    434a:	c7 c7       	rjmp	.+3982   	; 0x52da <main+0x27b4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:684
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    434c:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <StMin>
    4350:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <StHr>
    4354:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <StDate>
    4358:	50 91 b2 03 	lds	r21, 0x03B2	; 0x8003b2 <StMonth>
    435c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <StYear>
    4360:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    4364:	80 3d       	cpi	r24, 0xD0	; 208
    4366:	67 e0       	ldi	r22, 0x07	; 7
    4368:	96 07       	cpc	r25, r22
    436a:	10 f0       	brcs	.+4      	; 0x4370 <main+0x184a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    436c:	80 5d       	subi	r24, 0xD0	; 208
    436e:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    4370:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    4372:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    4374:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    4376:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    4378:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    437a:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:684
    437c:	ce 01       	movw	r24, r28
    437e:	01 96       	adiw	r24, 0x01	; 1
    4380:	0e 94 a1 09 	call	0x1342	; 0x1342 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:686
                complete = true;
                blink = true;
    4384:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4388:	e1 2c       	mov	r14, r1
    438a:	0e cf       	rjmp	.-484    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:693
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    438c:	12 30       	cpi	r17, 0x02	; 2
    438e:	41 f5       	brne	.+80     	; 0x43e0 <main+0x18ba>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:695
        {
            if (blinkMode == setHr)
    4390:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4394:	11 11       	cpse	r17, r1
    4396:	10 c0       	rjmp	.+32     	; 0x43b8 <main+0x1892>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:696
                StHr = ++StHr > 23 ? 0 : StHr;
    4398:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <StHr>
    439c:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <StHr+0x1>
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	88 31       	cpi	r24, 0x18	; 24
    43a4:	91 05       	cpc	r25, r1
    43a6:	14 f0       	brlt	.+4      	; 0x43ac <main+0x1886>
main():
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    43ac:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <StHr+0x1>
    43b0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    43b4:	e1 2c       	mov	r14, r1
    43b6:	f8 ce       	rjmp	.-528    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:697
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    43b8:	11 30       	cpi	r17, 0x01	; 1
    43ba:	09 f0       	breq	.+2      	; 0x43be <main+0x1898>
    43bc:	92 c7       	rjmp	.+3876   	; 0x52e2 <main+0x27bc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:698
                StMin = ++StMin > 59 ? 0 : StMin;
    43be:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <StMin>
    43c2:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <StMin+0x1>
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	8c 33       	cpi	r24, 0x3C	; 60
    43ca:	91 05       	cpc	r25, r1
    43cc:	14 f0       	brlt	.+4      	; 0x43d2 <main+0x18ac>
main():
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    43d2:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <StMin+0x1>
    43d6:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <StMin>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    43da:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    43dc:	10 e0       	ldi	r17, 0x00	; 0
    43de:	e4 ce       	rjmp	.-568    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:700
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    43e0:	13 30       	cpi	r17, 0x03	; 3
    43e2:	31 f5       	brne	.+76     	; 0x4430 <main+0x190a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:702
        {
            if (blinkMode == setHr)
    43e4:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    43e8:	11 11       	cpse	r17, r1
    43ea:	0f c0       	rjmp	.+30     	; 0x440a <main+0x18e4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:703
                StHr = --StHr < 0 ? 23 : StHr;
    43ec:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <StHr>
    43f0:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <StHr+0x1>
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	97 ff       	sbrs	r25, 7
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <main+0x18d8>
main():
    43fa:	87 e1       	ldi	r24, 0x17	; 23
    43fc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    43fe:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <StHr+0x1>
    4402:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4406:	e1 2c       	mov	r14, r1
    4408:	cf ce       	rjmp	.-610    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:704
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
    440a:	11 30       	cpi	r17, 0x01	; 1
    440c:	09 f0       	breq	.+2      	; 0x4410 <main+0x18ea>
    440e:	6d c7       	rjmp	.+3802   	; 0x52ea <main+0x27c4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:705
                StMin = --StMin < 0 ? 59 : StMin;
    4410:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <StMin>
    4414:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <StMin+0x1>
    4418:	01 97       	sbiw	r24, 0x01	; 1
    441a:	97 ff       	sbrs	r25, 7
    441c:	02 c0       	rjmp	.+4      	; 0x4422 <main+0x18fc>
main():
    441e:	8b e3       	ldi	r24, 0x3B	; 59
    4420:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4422:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <StMin+0x1>
    4426:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <StMin>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    442a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    442c:	10 e0       	ldi	r17, 0x00	; 0
    442e:	bc ce       	rjmp	.-648    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:707
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4430:	11 30       	cpi	r17, 0x01	; 1
    4432:	09 f0       	breq	.+2      	; 0x4436 <main+0x1910>
    4434:	5e c7       	rjmp	.+3772   	; 0x52f2 <main+0x27cc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:709
        {
            if (blinkMode == setHr)
    4436:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    443a:	11 11       	cpse	r17, r1
    443c:	05 c0       	rjmp	.+10     	; 0x4448 <main+0x1922>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:711
            {
                blinkMode = setMin;
    443e:	70 92 1a 03 	sts	0x031A, r7	; 0x80031a <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4442:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4444:	10 e0       	ldi	r17, 0x00	; 0
    4446:	b0 ce       	rjmp	.-672    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:713
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4448:	11 30       	cpi	r17, 0x01	; 1
    444a:	09 f0       	breq	.+2      	; 0x444e <main+0x1928>
    444c:	56 c7       	rjmp	.+3756   	; 0x52fa <main+0x27d4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:715
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    444e:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <StMin>
    4452:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <StHr>
    4456:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <StDate>
    445a:	50 91 b2 03 	lds	r21, 0x03B2	; 0x8003b2 <StMonth>
    445e:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <StYear>
    4462:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    4466:	80 3d       	cpi	r24, 0xD0	; 208
    4468:	a7 e0       	ldi	r26, 0x07	; 7
    446a:	9a 07       	cpc	r25, r26
    446c:	10 f0       	brcs	.+4      	; 0x4472 <main+0x194c>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    446e:	80 5d       	subi	r24, 0xD0	; 208
    4470:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    4472:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    4474:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    4476:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    4478:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    447a:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    447c:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:715
    447e:	ce 01       	movw	r24, r28
    4480:	01 96       	adiw	r24, 0x01	; 1
    4482:	0e 94 a1 09 	call	0x1342	; 0x1342 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:717
                complete = true;
                blink = true;
    4486:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    448a:	e1 2c       	mov	r14, r1
    448c:	8d ce       	rjmp	.-742    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:726
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    448e:	81 2f       	mov	r24, r17
    4490:	8f 77       	andi	r24, 0x7F	; 127
    4492:	82 30       	cpi	r24, 0x02	; 2
    4494:	91 f4       	brne	.+36     	; 0x44ba <main+0x1994>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:728
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    4496:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <config+0xf>
    449a:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <config+0x10>
    449e:	01 96       	adiw	r24, 0x01	; 1
    44a0:	88 31       	cpi	r24, 0x18	; 24
    44a2:	91 05       	cpc	r25, r1
    44a4:	14 f0       	brlt	.+4      	; 0x44aa <main+0x1984>
main():
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    44aa:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x10>
    44ae:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:725
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    44b2:	ee 24       	eor	r14, r14
    44b4:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    44b6:	10 e0       	ldi	r17, 0x00	; 0
    44b8:	77 ce       	rjmp	.-786    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:730
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    44ba:	83 30       	cpi	r24, 0x03	; 3
    44bc:	89 f4       	brne	.+34     	; 0x44e0 <main+0x19ba>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:732
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    44be:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <config+0xf>
    44c2:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <config+0x10>
    44c6:	01 97       	sbiw	r24, 0x01	; 1
    44c8:	97 ff       	sbrs	r25, 7
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <main+0x19aa>
main():
    44cc:	87 e1       	ldi	r24, 0x17	; 23
    44ce:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    44d0:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x10>
    44d4:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:725
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    44d8:	ee 24       	eor	r14, r14
    44da:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    44dc:	10 e0       	ldi	r17, 0x00	; 0
    44de:	64 ce       	rjmp	.-824    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:734
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    44e0:	11 30       	cpi	r17, 0x01	; 1
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <main+0x19c0>
    44e4:	0e c7       	rjmp	.+3612   	; 0x5302 <main+0x27dc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:736
        {
            config.save();
    44e6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:725
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    44ea:	ee 24       	eor	r14, r14
    44ec:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:737
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    44ee:	11 e0       	ldi	r17, 0x01	; 1
    44f0:	5b ce       	rjmp	.-842    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:748
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    44f2:	81 2f       	mov	r24, r17
    44f4:	8f 77       	andi	r24, 0x7F	; 127
    44f6:	82 30       	cpi	r24, 0x02	; 2
    44f8:	91 f4       	brne	.+36     	; 0x451e <main+0x19f8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:750
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    44fa:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <config+0x11>
    44fe:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <config+0x12>
    4502:	01 96       	adiw	r24, 0x01	; 1
    4504:	88 31       	cpi	r24, 0x18	; 24
    4506:	91 05       	cpc	r25, r1
    4508:	14 f0       	brlt	.+4      	; 0x450e <main+0x19e8>
main():
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    450e:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <config+0x12>
    4512:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <config+0x11>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:747
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    4516:	ee 24       	eor	r14, r14
    4518:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    451a:	10 e0       	ldi	r17, 0x00	; 0
    451c:	45 ce       	rjmp	.-886    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:752
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    451e:	83 30       	cpi	r24, 0x03	; 3
    4520:	89 f4       	brne	.+34     	; 0x4544 <main+0x1a1e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:754
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    4522:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <config+0x11>
    4526:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <config+0x12>
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	97 ff       	sbrs	r25, 7
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <main+0x1a0e>
main():
    4530:	87 e1       	ldi	r24, 0x17	; 23
    4532:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4534:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <config+0x12>
    4538:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <config+0x11>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:747
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    453c:	ee 24       	eor	r14, r14
    453e:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4540:	10 e0       	ldi	r17, 0x00	; 0
    4542:	32 ce       	rjmp	.-924    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:756
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4544:	11 30       	cpi	r17, 0x01	; 1
    4546:	79 f2       	breq	.-98     	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4548:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    454a:	10 e0       	ldi	r17, 0x00	; 0
    454c:	2d ce       	rjmp	.-934    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:770
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    454e:	81 2f       	mov	r24, r17
    4550:	8f 77       	andi	r24, 0x7F	; 127
    4552:	82 30       	cpi	r24, 0x02	; 2
    4554:	69 f4       	brne	.+26     	; 0x4570 <main+0x1a4a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:772
        {
            config.Song1_Count = ++config.Song1_Count;
    4556:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <config+0x1a>
    455a:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <config+0x1b>
    455e:	01 96       	adiw	r24, 0x01	; 1
    4560:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <config+0x1b>
    4564:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <config+0x1a>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:769
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    4568:	ee 24       	eor	r14, r14
    456a:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    456c:	10 e0       	ldi	r17, 0x00	; 0
    456e:	1c ce       	rjmp	.-968    	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:774
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4570:	83 30       	cpi	r24, 0x03	; 3
    4572:	89 f4       	brne	.+34     	; 0x4596 <main+0x1a70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:776
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    4574:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <config+0x1a>
    4578:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <config+0x1b>
    457c:	01 97       	sbiw	r24, 0x01	; 1
    457e:	97 ff       	sbrs	r25, 7
    4580:	02 c0       	rjmp	.+4      	; 0x4586 <main+0x1a60>
main():
    4582:	84 e6       	ldi	r24, 0x64	; 100
    4584:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4586:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <config+0x1b>
    458a:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <config+0x1a>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:769
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    458e:	ee 24       	eor	r14, r14
    4590:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4592:	10 e0       	ldi	r17, 0x00	; 0
    4594:	09 ce       	rjmp	.-1006   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:778
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4596:	11 30       	cpi	r17, 0x01	; 1
    4598:	09 f4       	brne	.+2      	; 0x459c <main+0x1a76>
    459a:	a5 cf       	rjmp	.-182    	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    459c:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    459e:	10 e0       	ldi	r17, 0x00	; 0
    45a0:	03 ce       	rjmp	.-1018   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:792
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    45a2:	81 2f       	mov	r24, r17
    45a4:	8f 77       	andi	r24, 0x7F	; 127
    45a6:	82 30       	cpi	r24, 0x02	; 2
    45a8:	91 f4       	brne	.+36     	; 0x45ce <main+0x1aa8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:794
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    45aa:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x15>
    45ae:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <config+0x16>
    45b2:	01 96       	adiw	r24, 0x01	; 1
    45b4:	8f 31       	cpi	r24, 0x1F	; 31
    45b6:	91 05       	cpc	r25, r1
    45b8:	14 f0       	brlt	.+4      	; 0x45be <main+0x1a98>
main():
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    45be:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <config+0x16>
    45c2:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <config+0x15>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:791
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    45c6:	ee 24       	eor	r14, r14
    45c8:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45ca:	10 e0       	ldi	r17, 0x00	; 0
    45cc:	ed cd       	rjmp	.-1062   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:796
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    45ce:	83 30       	cpi	r24, 0x03	; 3
    45d0:	91 f4       	brne	.+36     	; 0x45f6 <main+0x1ad0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:798
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    45d2:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x15>
    45d6:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <config+0x16>
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	18 16       	cp	r1, r24
    45de:	19 06       	cpc	r1, r25
    45e0:	14 f0       	brlt	.+4      	; 0x45e6 <main+0x1ac0>
main():
    45e2:	8e e1       	ldi	r24, 0x1E	; 30
    45e4:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    45e6:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <config+0x16>
    45ea:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <config+0x15>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:791
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    45ee:	ee 24       	eor	r14, r14
    45f0:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45f2:	10 e0       	ldi	r17, 0x00	; 0
    45f4:	d9 cd       	rjmp	.-1102   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:800
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    45f6:	11 30       	cpi	r17, 0x01	; 1
    45f8:	09 f0       	breq	.+2      	; 0x45fc <main+0x1ad6>
    45fa:	87 c6       	rjmp	.+3342   	; 0x530a <main+0x27e4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:802
        {
            config.save();
    45fc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
    4600:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <config+0x15>
    4604:	70 91 cc 03 	lds	r23, 0x03CC	; 0x8003cc <config+0x16>
    4608:	77 27       	eor	r23, r23
    460a:	86 e0       	ldi	r24, 0x06	; 6
    460c:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.69]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:791
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    4610:	ee 24       	eor	r14, r14
    4612:	e3 94       	inc	r14
    4614:	c9 cd       	rjmp	.-1134   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:816
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    4616:	8e ef       	ldi	r24, 0xFE	; 254
    4618:	81 0f       	add	r24, r17
    461a:	82 30       	cpi	r24, 0x02	; 2
    461c:	58 f4       	brcc	.+22     	; 0x4634 <main+0x1b0e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:818
        {
            config.SchlZone = !config.SchlZone;
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <config+0x19>
    4624:	91 11       	cpse	r25, r1
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <config+0x19>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:815
        break;
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
    462c:	ee 24       	eor	r14, r14
    462e:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4630:	10 e0       	ldi	r17, 0x00	; 0
    4632:	ba cd       	rjmp	.-1164   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:820
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
        {
            config.SchlZone = !config.SchlZone;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4634:	11 30       	cpi	r17, 0x01	; 1
    4636:	09 f4       	brne	.+2      	; 0x463a <main+0x1b14>
    4638:	56 cf       	rjmp	.-340    	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    463a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    463c:	10 e0       	ldi	r17, 0x00	; 0
    463e:	b4 cd       	rjmp	.-1176   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:835
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4640:	81 2f       	mov	r24, r17
    4642:	8f 77       	andi	r24, 0x7F	; 127
    4644:	82 30       	cpi	r24, 0x02	; 2
    4646:	91 f4       	brne	.+36     	; 0x466c <main+0x1b46>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:837
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    4648:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    464c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    4650:	01 96       	adiw	r24, 0x01	; 1
    4652:	88 31       	cpi	r24, 0x18	; 24
    4654:	91 05       	cpc	r25, r1
    4656:	14 f0       	brlt	.+4      	; 0x465c <main+0x1b36>
main():
    4658:	84 e0       	ldi	r24, 0x04	; 4
    465a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    465c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    4660:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:834
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    4664:	ee 24       	eor	r14, r14
    4666:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4668:	10 e0       	ldi	r17, 0x00	; 0
    466a:	9e cd       	rjmp	.-1220   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:839
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    466c:	83 30       	cpi	r24, 0x03	; 3
    466e:	91 f4       	brne	.+36     	; 0x4694 <main+0x1b6e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:841
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    4670:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    4674:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	84 30       	cpi	r24, 0x04	; 4
    467c:	91 05       	cpc	r25, r1
    467e:	14 f4       	brge	.+4      	; 0x4684 <main+0x1b5e>
main():
    4680:	87 e1       	ldi	r24, 0x17	; 23
    4682:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4684:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    4688:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:834
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    468c:	ee 24       	eor	r14, r14
    468e:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4690:	10 e0       	ldi	r17, 0x00	; 0
    4692:	8a cd       	rjmp	.-1260   	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:834
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    4694:	ee 24       	eor	r14, r14
    4696:	e3 94       	inc	r14
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:843
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4698:	11 30       	cpi	r17, 0x01	; 1
    469a:	09 f4       	brne	.+2      	; 0x469e <main+0x1b78>
    469c:	85 cd       	rjmp	.-1270   	; 0x41a8 <main+0x1682>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    469e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    46a0:	10 e0       	ldi	r17, 0x00	; 0
    46a2:	82 cd       	rjmp	.-1276   	; 0x41a8 <main+0x1682>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    46a4:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1>
    46a8:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <Menu1+0x1>
    46ac:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <Menu1+0x4>
    46b0:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    46b4:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <Menu1+0x2>
    46b8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    46bc:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    46c0:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:856
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    46c4:	84 e0       	ldi	r24, 0x04	; 4
    46c6:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:857
        lcd.clear();
    46ca:	0e 94 04 08 	call	0x1008	; 0x1008 <LiquidCrystal_I2C::clear() [clone .constprop.75]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    46ce:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    46d0:	10 e0       	ldi	r17, 0x00	; 0
    46d2:	6a cd       	rjmp	.-1324   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:863
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    46d4:	81 2f       	mov	r24, r17
    46d6:	8f 77       	andi	r24, 0x7F	; 127
    46d8:	82 30       	cpi	r24, 0x02	; 2
    46da:	91 f4       	brne	.+36     	; 0x4700 <main+0x1bda>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:865
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    46dc:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <config+0x22>
    46e0:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <config+0x23>
    46e4:	01 96       	adiw	r24, 0x01	; 1
    46e6:	89 30       	cpi	r24, 0x09	; 9
    46e8:	91 05       	cpc	r25, r1
    46ea:	14 f0       	brlt	.+4      	; 0x46f0 <main+0x1bca>
main():
    46ec:	83 e0       	ldi	r24, 0x03	; 3
    46ee:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    46f0:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <config+0x23>
    46f4:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <config+0x22>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:862
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    46f8:	ee 24       	eor	r14, r14
    46fa:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    46fc:	10 e0       	ldi	r17, 0x00	; 0
    46fe:	54 cd       	rjmp	.-1368   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:867
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4700:	83 30       	cpi	r24, 0x03	; 3
    4702:	91 f4       	brne	.+36     	; 0x4728 <main+0x1c02>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:869
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    4704:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <config+0x22>
    4708:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <config+0x23>
    470c:	01 97       	sbiw	r24, 0x01	; 1
    470e:	83 30       	cpi	r24, 0x03	; 3
    4710:	91 05       	cpc	r25, r1
    4712:	14 f4       	brge	.+4      	; 0x4718 <main+0x1bf2>
main():
    4714:	88 e0       	ldi	r24, 0x08	; 8
    4716:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4718:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <config+0x23>
    471c:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <config+0x22>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:862
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    4720:	ee 24       	eor	r14, r14
    4722:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4724:	10 e0       	ldi	r17, 0x00	; 0
    4726:	40 cd       	rjmp	.-1408   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:871
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4728:	11 30       	cpi	r17, 0x01	; 1
    472a:	09 f4       	brne	.+2      	; 0x472e <main+0x1c08>
    472c:	dc ce       	rjmp	.-584    	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    472e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4730:	10 e0       	ldi	r17, 0x00	; 0
    4732:	3a cd       	rjmp	.-1420   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:885
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4734:	81 2f       	mov	r24, r17
    4736:	8f 77       	andi	r24, 0x7F	; 127
    4738:	82 30       	cpi	r24, 0x02	; 2
    473a:	91 f4       	brne	.+36     	; 0x4760 <main+0x1c3a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:887
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    473c:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <config+0x26>
    4740:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <config+0x27>
    4744:	01 96       	adiw	r24, 0x01	; 1
    4746:	89 30       	cpi	r24, 0x09	; 9
    4748:	91 05       	cpc	r25, r1
    474a:	14 f0       	brlt	.+4      	; 0x4750 <main+0x1c2a>
main():
    474c:	83 e0       	ldi	r24, 0x03	; 3
    474e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4750:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <config+0x27>
    4754:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <config+0x26>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:884
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    4758:	ee 24       	eor	r14, r14
    475a:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    475c:	10 e0       	ldi	r17, 0x00	; 0
    475e:	24 cd       	rjmp	.-1464   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:889
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4760:	83 30       	cpi	r24, 0x03	; 3
    4762:	91 f4       	brne	.+36     	; 0x4788 <main+0x1c62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:891
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    4764:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <config+0x26>
    4768:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <config+0x27>
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	83 30       	cpi	r24, 0x03	; 3
    4770:	91 05       	cpc	r25, r1
    4772:	14 f4       	brge	.+4      	; 0x4778 <main+0x1c52>
main():
    4774:	88 e0       	ldi	r24, 0x08	; 8
    4776:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4778:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <config+0x27>
    477c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <config+0x26>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:884
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    4780:	ee 24       	eor	r14, r14
    4782:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4784:	10 e0       	ldi	r17, 0x00	; 0
    4786:	10 cd       	rjmp	.-1504   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:893
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4788:	11 30       	cpi	r17, 0x01	; 1
    478a:	09 f4       	brne	.+2      	; 0x478e <main+0x1c68>
    478c:	ac ce       	rjmp	.-680    	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    478e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4790:	10 e0       	ldi	r17, 0x00	; 0
    4792:	0a cd       	rjmp	.-1516   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:907
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4794:	81 2f       	mov	r24, r17
    4796:	8f 77       	andi	r24, 0x7F	; 127
    4798:	82 30       	cpi	r24, 0x02	; 2
    479a:	a1 f4       	brne	.+40     	; 0x47c4 <main+0x1c9e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:909
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    479c:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <config+0x2a>
    47a0:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <config+0x2b>
    47a4:	01 96       	adiw	r24, 0x01	; 1
    47a6:	85 31       	cpi	r24, 0x15	; 21
    47a8:	91 05       	cpc	r25, r1
    47aa:	14 f0       	brlt	.+4      	; 0x47b0 <main+0x1c8a>
main():
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    47b0:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2b>
    47b4:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:910
            startPreSong(2, config.MorSongNo);
    47b8:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:906
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    47bc:	ee 24       	eor	r14, r14
    47be:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    47c0:	10 e0       	ldi	r17, 0x00	; 0
    47c2:	f2 cc       	rjmp	.-1564   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:912
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    47c4:	83 30       	cpi	r24, 0x03	; 3
    47c6:	a1 f4       	brne	.+40     	; 0x47f0 <main+0x1cca>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:914
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    47c8:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <config+0x2a>
    47cc:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <config+0x2b>
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	18 16       	cp	r1, r24
    47d4:	19 06       	cpc	r1, r25
    47d6:	14 f0       	brlt	.+4      	; 0x47dc <main+0x1cb6>
main():
    47d8:	84 e1       	ldi	r24, 0x14	; 20
    47da:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    47dc:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2b>
    47e0:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:915
            startPreSong(2, config.MorSongNo);
    47e4:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:906
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    47e8:	ee 24       	eor	r14, r14
    47ea:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    47ec:	10 e0       	ldi	r17, 0x00	; 0
    47ee:	dc cc       	rjmp	.-1608   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:917
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    47f0:	11 30       	cpi	r17, 0x01	; 1
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <main+0x1cd0>
    47f4:	8e c5       	rjmp	.+2844   	; 0x5312 <main+0x27ec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:919
        {
            stopPreSong();
    47f6:	0e 94 49 08 	call	0x1092	; 0x1092 <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:920
            config.save();
    47fa:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:906
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    47fe:	ee 24       	eor	r14, r14
    4800:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:921
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            stopPreSong();
            config.save();
            complete = true;
    4802:	11 e0       	ldi	r17, 0x01	; 1
    4804:	d1 cc       	rjmp	.-1630   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:932
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4806:	81 2f       	mov	r24, r17
    4808:	8f 77       	andi	r24, 0x7F	; 127
    480a:	82 30       	cpi	r24, 0x02	; 2
    480c:	a1 f4       	brne	.+40     	; 0x4836 <main+0x1d10>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:934
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    480e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <config+0x2c>
    4812:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <config+0x2d>
    4816:	01 96       	adiw	r24, 0x01	; 1
    4818:	85 31       	cpi	r24, 0x15	; 21
    481a:	91 05       	cpc	r25, r1
    481c:	14 f0       	brlt	.+4      	; 0x4822 <main+0x1cfc>
main():
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4822:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2d>
    4826:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:935
            startPreSong(2, config.EveSongNo);
    482a:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:931
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    482e:	ee 24       	eor	r14, r14
    4830:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4832:	10 e0       	ldi	r17, 0x00	; 0
    4834:	b9 cc       	rjmp	.-1678   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:937
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4836:	83 30       	cpi	r24, 0x03	; 3
    4838:	a1 f4       	brne	.+40     	; 0x4862 <main+0x1d3c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:939
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    483a:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <config+0x2c>
    483e:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <config+0x2d>
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	18 16       	cp	r1, r24
    4846:	19 06       	cpc	r1, r25
    4848:	14 f0       	brlt	.+4      	; 0x484e <main+0x1d28>
main():
    484a:	84 e1       	ldi	r24, 0x14	; 20
    484c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    484e:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2d>
    4852:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:940
            startPreSong(2, config.EveSongNo);
    4856:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:931
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    485a:	ee 24       	eor	r14, r14
    485c:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    485e:	10 e0       	ldi	r17, 0x00	; 0
    4860:	a3 cc       	rjmp	.-1722   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:942
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4862:	11 30       	cpi	r17, 0x01	; 1
    4864:	41 f2       	breq	.-112    	; 0x47f6 <main+0x1cd0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4866:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4868:	10 e0       	ldi	r17, 0x00	; 0
    486a:	9e cc       	rjmp	.-1732   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:957
        break;
    }

    case mnuCmdLt1OnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    486c:	12 30       	cpi	r17, 0x02	; 2
    486e:	09 f0       	breq	.+2      	; 0x4872 <main+0x1d4c>
    4870:	4c c0       	rjmp	.+152    	; 0x490a <main+0x1de4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:959
        {
            if (blinkMode == setHr)
    4872:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4876:	11 11       	cpse	r17, r1
    4878:	22 c0       	rjmp	.+68     	; 0x48be <main+0x1d98>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:960
                config.Light1On = addToTime(60, config.Light1On);
    487a:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <config+0x2e>
    487e:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <config+0x2f>
    4882:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <config+0x30>
    4886:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    488a:	ac 01       	movw	r20, r24
    488c:	bd 01       	movw	r22, r26
    488e:	44 5c       	subi	r20, 0xC4	; 196
    4890:	5f 4f       	sbci	r21, 0xFF	; 255
    4892:	6f 4f       	sbci	r22, 0xFF	; 255
    4894:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4896:	77 fd       	sbrc	r23, 7
    4898:	08 c0       	rjmp	.+16     	; 0x48aa <main+0x1d84>
    489a:	40 3a       	cpi	r20, 0xA0	; 160
    489c:	e5 e0       	ldi	r30, 0x05	; 5
    489e:	5e 07       	cpc	r21, r30
    48a0:	61 05       	cpc	r22, r1
    48a2:	71 05       	cpc	r23, r1
    48a4:	14 f4       	brge	.+4      	; 0x48aa <main+0x1d84>
    48a6:	db 01       	movw	r26, r22
    48a8:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:960
    48aa:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <config+0x2e>
    48ae:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <config+0x2f>
    48b2:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <config+0x30>
    48b6:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    48ba:	e1 2c       	mov	r14, r1
    48bc:	75 cc       	rjmp	.-1814   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:961
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
    48be:	11 30       	cpi	r17, 0x01	; 1
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <main+0x1d9e>
    48c2:	2b c5       	rjmp	.+2646   	; 0x531a <main+0x27f4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:962
                config.Light1On = addToTime(1, config.Light1On);
    48c4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <config+0x2e>
    48c8:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <config+0x2f>
    48cc:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <config+0x30>
    48d0:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    48d4:	ac 01       	movw	r20, r24
    48d6:	bd 01       	movw	r22, r26
    48d8:	4f 5f       	subi	r20, 0xFF	; 255
    48da:	5f 4f       	sbci	r21, 0xFF	; 255
    48dc:	6f 4f       	sbci	r22, 0xFF	; 255
    48de:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    48e0:	77 fd       	sbrc	r23, 7
    48e2:	08 c0       	rjmp	.+16     	; 0x48f4 <main+0x1dce>
    48e4:	40 3a       	cpi	r20, 0xA0	; 160
    48e6:	f5 e0       	ldi	r31, 0x05	; 5
    48e8:	5f 07       	cpc	r21, r31
    48ea:	61 05       	cpc	r22, r1
    48ec:	71 05       	cpc	r23, r1
    48ee:	14 f4       	brge	.+4      	; 0x48f4 <main+0x1dce>
    48f0:	db 01       	movw	r26, r22
    48f2:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:962
    48f4:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <config+0x2e>
    48f8:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <config+0x2f>
    48fc:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <config+0x30>
    4900:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4904:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4906:	10 e0       	ldi	r17, 0x00	; 0
    4908:	4f cc       	rjmp	.-1890   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:964
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(1, config.Light1On);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    490a:	81 2f       	mov	r24, r17
    490c:	8f 77       	andi	r24, 0x7F	; 127
    490e:	83 30       	cpi	r24, 0x03	; 3
    4910:	09 f0       	breq	.+2      	; 0x4914 <main+0x1dee>
    4912:	4c c0       	rjmp	.+152    	; 0x49ac <main+0x1e86>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:966
        {
            if (blinkMode == setHr)
    4914:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4918:	11 11       	cpse	r17, r1
    491a:	22 c0       	rjmp	.+68     	; 0x4960 <main+0x1e3a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:967
                config.Light1On = addToTime(-60, config.Light1On);
    491c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <config+0x2e>
    4920:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <config+0x2f>
    4924:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <config+0x30>
    4928:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    492c:	ac 01       	movw	r20, r24
    492e:	bd 01       	movw	r22, r26
    4930:	4c 53       	subi	r20, 0x3C	; 60
    4932:	51 09       	sbc	r21, r1
    4934:	61 09       	sbc	r22, r1
    4936:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4938:	77 fd       	sbrc	r23, 7
    493a:	08 c0       	rjmp	.+16     	; 0x494c <main+0x1e26>
    493c:	40 3a       	cpi	r20, 0xA0	; 160
    493e:	25 e0       	ldi	r18, 0x05	; 5
    4940:	52 07       	cpc	r21, r18
    4942:	61 05       	cpc	r22, r1
    4944:	71 05       	cpc	r23, r1
    4946:	14 f4       	brge	.+4      	; 0x494c <main+0x1e26>
    4948:	db 01       	movw	r26, r22
    494a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:967
    494c:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <config+0x2e>
    4950:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <config+0x2f>
    4954:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <config+0x30>
    4958:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    495c:	e1 2c       	mov	r14, r1
    495e:	24 cc       	rjmp	.-1976   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:968
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
    4960:	11 30       	cpi	r17, 0x01	; 1
    4962:	09 f0       	breq	.+2      	; 0x4966 <main+0x1e40>
    4964:	de c4       	rjmp	.+2492   	; 0x5322 <main+0x27fc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:969
                config.Light1On = addToTime(-1, config.Light1On);
    4966:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <config+0x2e>
    496a:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <config+0x2f>
    496e:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <config+0x30>
    4972:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4976:	ac 01       	movw	r20, r24
    4978:	bd 01       	movw	r22, r26
    497a:	41 50       	subi	r20, 0x01	; 1
    497c:	51 09       	sbc	r21, r1
    497e:	61 09       	sbc	r22, r1
    4980:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4982:	77 fd       	sbrc	r23, 7
    4984:	08 c0       	rjmp	.+16     	; 0x4996 <main+0x1e70>
    4986:	40 3a       	cpi	r20, 0xA0	; 160
    4988:	35 e0       	ldi	r19, 0x05	; 5
    498a:	53 07       	cpc	r21, r19
    498c:	61 05       	cpc	r22, r1
    498e:	71 05       	cpc	r23, r1
    4990:	14 f4       	brge	.+4      	; 0x4996 <main+0x1e70>
    4992:	db 01       	movw	r26, r22
    4994:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:969
    4996:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <config+0x2e>
    499a:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <config+0x2f>
    499e:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <config+0x30>
    49a2:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    49a6:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    49a8:	10 e0       	ldi	r17, 0x00	; 0
    49aa:	fe cb       	rjmp	.-2052   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:971
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(-1, config.Light1On);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    49ac:	11 30       	cpi	r17, 0x01	; 1
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <main+0x1e8c>
    49b0:	bc c4       	rjmp	.+2424   	; 0x532a <main+0x2804>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:973
        {
            if (blinkMode == setHr)
    49b2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    49b6:	88 23       	and	r24, r24
    49b8:	09 f4       	brne	.+2      	; 0x49bc <main+0x1e96>
    49ba:	41 cd       	rjmp	.-1406   	; 0x443e <main+0x1918>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    49bc:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    49be:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:977
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    49c0:	81 30       	cpi	r24, 0x01	; 1
    49c2:	09 f0       	breq	.+2      	; 0x49c6 <main+0x1ea0>
    49c4:	f1 cb       	rjmp	.-2078   	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:979
            {
                config.save();
    49c6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:981
                complete = true;
                blink = true;
    49ca:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    49ce:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:980
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                config.save();
                complete = true;
    49d0:	11 e0       	ldi	r17, 0x01	; 1
    49d2:	ea cb       	rjmp	.-2092   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:989

        break;
    }
    case mnuCmdLt1OffTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    49d4:	12 30       	cpi	r17, 0x02	; 2
    49d6:	09 f0       	breq	.+2      	; 0x49da <main+0x1eb4>
    49d8:	4c c0       	rjmp	.+152    	; 0x4a72 <main+0x1f4c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:991
        {
            if (blinkMode == setHr)
    49da:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    49de:	11 11       	cpse	r17, r1
    49e0:	22 c0       	rjmp	.+68     	; 0x4a26 <main+0x1f00>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:992
                config.Light1Off = addToTime(60, config.Light1Off);
    49e2:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x32>
    49e6:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x33>
    49ea:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <config+0x34>
    49ee:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    49f2:	ac 01       	movw	r20, r24
    49f4:	bd 01       	movw	r22, r26
    49f6:	44 5c       	subi	r20, 0xC4	; 196
    49f8:	5f 4f       	sbci	r21, 0xFF	; 255
    49fa:	6f 4f       	sbci	r22, 0xFF	; 255
    49fc:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    49fe:	77 fd       	sbrc	r23, 7
    4a00:	08 c0       	rjmp	.+16     	; 0x4a12 <main+0x1eec>
    4a02:	40 3a       	cpi	r20, 0xA0	; 160
    4a04:	e5 e0       	ldi	r30, 0x05	; 5
    4a06:	5e 07       	cpc	r21, r30
    4a08:	61 05       	cpc	r22, r1
    4a0a:	71 05       	cpc	r23, r1
    4a0c:	14 f4       	brge	.+4      	; 0x4a12 <main+0x1eec>
    4a0e:	db 01       	movw	r26, r22
    4a10:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:992
    4a12:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x32>
    4a16:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x33>
    4a1a:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <config+0x34>
    4a1e:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4a22:	e1 2c       	mov	r14, r1
    4a24:	c1 cb       	rjmp	.-2174   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:993
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
    4a26:	11 30       	cpi	r17, 0x01	; 1
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <main+0x1f06>
    4a2a:	83 c4       	rjmp	.+2310   	; 0x5332 <main+0x280c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:994
                config.Light1Off = addToTime(1, config.Light1Off);
    4a2c:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x32>
    4a30:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x33>
    4a34:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <config+0x34>
    4a38:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4a3c:	ac 01       	movw	r20, r24
    4a3e:	bd 01       	movw	r22, r26
    4a40:	4f 5f       	subi	r20, 0xFF	; 255
    4a42:	5f 4f       	sbci	r21, 0xFF	; 255
    4a44:	6f 4f       	sbci	r22, 0xFF	; 255
    4a46:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4a48:	77 fd       	sbrc	r23, 7
    4a4a:	08 c0       	rjmp	.+16     	; 0x4a5c <main+0x1f36>
    4a4c:	40 3a       	cpi	r20, 0xA0	; 160
    4a4e:	f5 e0       	ldi	r31, 0x05	; 5
    4a50:	5f 07       	cpc	r21, r31
    4a52:	61 05       	cpc	r22, r1
    4a54:	71 05       	cpc	r23, r1
    4a56:	14 f4       	brge	.+4      	; 0x4a5c <main+0x1f36>
    4a58:	db 01       	movw	r26, r22
    4a5a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:994
    4a5c:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x32>
    4a60:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x33>
    4a64:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <config+0x34>
    4a68:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4a6c:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a6e:	10 e0       	ldi	r17, 0x00	; 0
    4a70:	9b cb       	rjmp	.-2250   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:996
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(1, config.Light1Off);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4a72:	81 2f       	mov	r24, r17
    4a74:	8f 77       	andi	r24, 0x7F	; 127
    4a76:	83 30       	cpi	r24, 0x03	; 3
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <main+0x1f56>
    4a7a:	4c c0       	rjmp	.+152    	; 0x4b14 <main+0x1fee>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:998
        {
            if (blinkMode == setHr)
    4a7c:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4a80:	11 11       	cpse	r17, r1
    4a82:	22 c0       	rjmp	.+68     	; 0x4ac8 <main+0x1fa2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:999
                config.Light1Off = addToTime(-60, config.Light1Off);
    4a84:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x32>
    4a88:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x33>
    4a8c:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <config+0x34>
    4a90:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4a94:	ac 01       	movw	r20, r24
    4a96:	bd 01       	movw	r22, r26
    4a98:	4c 53       	subi	r20, 0x3C	; 60
    4a9a:	51 09       	sbc	r21, r1
    4a9c:	61 09       	sbc	r22, r1
    4a9e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4aa0:	77 fd       	sbrc	r23, 7
    4aa2:	08 c0       	rjmp	.+16     	; 0x4ab4 <main+0x1f8e>
    4aa4:	40 3a       	cpi	r20, 0xA0	; 160
    4aa6:	25 e0       	ldi	r18, 0x05	; 5
    4aa8:	52 07       	cpc	r21, r18
    4aaa:	61 05       	cpc	r22, r1
    4aac:	71 05       	cpc	r23, r1
    4aae:	14 f4       	brge	.+4      	; 0x4ab4 <main+0x1f8e>
    4ab0:	db 01       	movw	r26, r22
    4ab2:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:999
    4ab4:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x32>
    4ab8:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x33>
    4abc:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <config+0x34>
    4ac0:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4ac4:	e1 2c       	mov	r14, r1
    4ac6:	70 cb       	rjmp	.-2336   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1000
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
    4ac8:	11 30       	cpi	r17, 0x01	; 1
    4aca:	09 f0       	breq	.+2      	; 0x4ace <main+0x1fa8>
    4acc:	36 c4       	rjmp	.+2156   	; 0x533a <main+0x2814>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1001
                config.Light1Off = addToTime(-1, config.Light1Off);
    4ace:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x32>
    4ad2:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x33>
    4ad6:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <config+0x34>
    4ada:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4ade:	ac 01       	movw	r20, r24
    4ae0:	bd 01       	movw	r22, r26
    4ae2:	41 50       	subi	r20, 0x01	; 1
    4ae4:	51 09       	sbc	r21, r1
    4ae6:	61 09       	sbc	r22, r1
    4ae8:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4aea:	77 fd       	sbrc	r23, 7
    4aec:	08 c0       	rjmp	.+16     	; 0x4afe <main+0x1fd8>
    4aee:	40 3a       	cpi	r20, 0xA0	; 160
    4af0:	35 e0       	ldi	r19, 0x05	; 5
    4af2:	53 07       	cpc	r21, r19
    4af4:	61 05       	cpc	r22, r1
    4af6:	71 05       	cpc	r23, r1
    4af8:	14 f4       	brge	.+4      	; 0x4afe <main+0x1fd8>
    4afa:	db 01       	movw	r26, r22
    4afc:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1001
    4afe:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x32>
    4b02:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x33>
    4b06:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <config+0x34>
    4b0a:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4b0e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b10:	10 e0       	ldi	r17, 0x00	; 0
    4b12:	4a cb       	rjmp	.-2412   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1003
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(-1, config.Light1Off);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4b14:	11 30       	cpi	r17, 0x01	; 1
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <main+0x1ff4>
    4b18:	14 c4       	rjmp	.+2088   	; 0x5342 <main+0x281c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1005
        {
            if (blinkMode == setHr)
    4b1a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4b1e:	88 23       	and	r24, r24
    4b20:	09 f4       	brne	.+2      	; 0x4b24 <main+0x1ffe>
    4b22:	8d cc       	rjmp	.-1766   	; 0x443e <main+0x1918>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4b24:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b26:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1009
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4b28:	81 30       	cpi	r24, 0x01	; 1
    4b2a:	09 f0       	breq	.+2      	; 0x4b2e <main+0x2008>
    4b2c:	3d cb       	rjmp	.-2438   	; 0x41a8 <main+0x1682>
    4b2e:	4b cf       	rjmp	.-362    	; 0x49c6 <main+0x1ea0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1020
        }
        break;
    }
    case mnuCmdPlrMorOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4b30:	12 30       	cpi	r17, 0x02	; 2
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <main+0x2010>
    4b34:	4c c0       	rjmp	.+152    	; 0x4bce <main+0x20a8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1022
        {
            if (blinkMode == setHr)
    4b36:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4b3a:	11 11       	cpse	r17, r1
    4b3c:	22 c0       	rjmp	.+68     	; 0x4b82 <main+0x205c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1023
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
    4b3e:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <config+0x3e>
    4b42:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <config+0x3f>
    4b46:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <config+0x40>
    4b4a:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4b4e:	ac 01       	movw	r20, r24
    4b50:	bd 01       	movw	r22, r26
    4b52:	44 5c       	subi	r20, 0xC4	; 196
    4b54:	5f 4f       	sbci	r21, 0xFF	; 255
    4b56:	6f 4f       	sbci	r22, 0xFF	; 255
    4b58:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4b5a:	77 fd       	sbrc	r23, 7
    4b5c:	08 c0       	rjmp	.+16     	; 0x4b6e <main+0x2048>
    4b5e:	40 3a       	cpi	r20, 0xA0	; 160
    4b60:	e5 e0       	ldi	r30, 0x05	; 5
    4b62:	5e 07       	cpc	r21, r30
    4b64:	61 05       	cpc	r22, r1
    4b66:	71 05       	cpc	r23, r1
    4b68:	14 f4       	brge	.+4      	; 0x4b6e <main+0x2048>
    4b6a:	db 01       	movw	r26, r22
    4b6c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1023
    4b6e:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <config+0x3e>
    4b72:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <config+0x3f>
    4b76:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <config+0x40>
    4b7a:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4b7e:	e1 2c       	mov	r14, r1
    4b80:	13 cb       	rjmp	.-2522   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1024
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    4b82:	11 30       	cpi	r17, 0x01	; 1
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <main+0x2062>
    4b86:	e1 c3       	rjmp	.+1986   	; 0x534a <main+0x2824>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1025
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
    4b88:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <config+0x3e>
    4b8c:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <config+0x3f>
    4b90:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <config+0x40>
    4b94:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4b98:	ac 01       	movw	r20, r24
    4b9a:	bd 01       	movw	r22, r26
    4b9c:	4f 5f       	subi	r20, 0xFF	; 255
    4b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ba0:	6f 4f       	sbci	r22, 0xFF	; 255
    4ba2:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4ba4:	77 fd       	sbrc	r23, 7
    4ba6:	08 c0       	rjmp	.+16     	; 0x4bb8 <main+0x2092>
    4ba8:	40 3a       	cpi	r20, 0xA0	; 160
    4baa:	f5 e0       	ldi	r31, 0x05	; 5
    4bac:	5f 07       	cpc	r21, r31
    4bae:	61 05       	cpc	r22, r1
    4bb0:	71 05       	cpc	r23, r1
    4bb2:	14 f4       	brge	.+4      	; 0x4bb8 <main+0x2092>
    4bb4:	db 01       	movw	r26, r22
    4bb6:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1025
    4bb8:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <config+0x3e>
    4bbc:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <config+0x3f>
    4bc0:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <config+0x40>
    4bc4:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4bc8:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4bca:	10 e0       	ldi	r17, 0x00	; 0
    4bcc:	ed ca       	rjmp	.-2598   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1027
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4bce:	81 2f       	mov	r24, r17
    4bd0:	8f 77       	andi	r24, 0x7F	; 127
    4bd2:	83 30       	cpi	r24, 0x03	; 3
    4bd4:	09 f0       	breq	.+2      	; 0x4bd8 <main+0x20b2>
    4bd6:	4c c0       	rjmp	.+152    	; 0x4c70 <main+0x214a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1029
        {
            if (blinkMode == setHr)
    4bd8:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4bdc:	11 11       	cpse	r17, r1
    4bde:	22 c0       	rjmp	.+68     	; 0x4c24 <main+0x20fe>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1030
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
    4be0:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <config+0x3e>
    4be4:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <config+0x3f>
    4be8:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <config+0x40>
    4bec:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4bf0:	ac 01       	movw	r20, r24
    4bf2:	bd 01       	movw	r22, r26
    4bf4:	4c 53       	subi	r20, 0x3C	; 60
    4bf6:	51 09       	sbc	r21, r1
    4bf8:	61 09       	sbc	r22, r1
    4bfa:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4bfc:	77 fd       	sbrc	r23, 7
    4bfe:	08 c0       	rjmp	.+16     	; 0x4c10 <main+0x20ea>
    4c00:	40 3a       	cpi	r20, 0xA0	; 160
    4c02:	25 e0       	ldi	r18, 0x05	; 5
    4c04:	52 07       	cpc	r21, r18
    4c06:	61 05       	cpc	r22, r1
    4c08:	71 05       	cpc	r23, r1
    4c0a:	14 f4       	brge	.+4      	; 0x4c10 <main+0x20ea>
    4c0c:	db 01       	movw	r26, r22
    4c0e:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1030
    4c10:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <config+0x3e>
    4c14:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <config+0x3f>
    4c18:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <config+0x40>
    4c1c:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4c20:	e1 2c       	mov	r14, r1
    4c22:	c2 ca       	rjmp	.-2684   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1031
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    4c24:	11 30       	cpi	r17, 0x01	; 1
    4c26:	09 f0       	breq	.+2      	; 0x4c2a <main+0x2104>
    4c28:	94 c3       	rjmp	.+1832   	; 0x5352 <main+0x282c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1032
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
    4c2a:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <config+0x3e>
    4c2e:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <config+0x3f>
    4c32:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <config+0x40>
    4c36:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4c3a:	ac 01       	movw	r20, r24
    4c3c:	bd 01       	movw	r22, r26
    4c3e:	41 50       	subi	r20, 0x01	; 1
    4c40:	51 09       	sbc	r21, r1
    4c42:	61 09       	sbc	r22, r1
    4c44:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4c46:	77 fd       	sbrc	r23, 7
    4c48:	08 c0       	rjmp	.+16     	; 0x4c5a <main+0x2134>
    4c4a:	40 3a       	cpi	r20, 0xA0	; 160
    4c4c:	35 e0       	ldi	r19, 0x05	; 5
    4c4e:	53 07       	cpc	r21, r19
    4c50:	61 05       	cpc	r22, r1
    4c52:	71 05       	cpc	r23, r1
    4c54:	14 f4       	brge	.+4      	; 0x4c5a <main+0x2134>
    4c56:	db 01       	movw	r26, r22
    4c58:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1032
    4c5a:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <config+0x3e>
    4c5e:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <config+0x3f>
    4c62:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <config+0x40>
    4c66:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4c6a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4c6c:	10 e0       	ldi	r17, 0x00	; 0
    4c6e:	9c ca       	rjmp	.-2760   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1034
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4c70:	11 30       	cpi	r17, 0x01	; 1
    4c72:	09 f0       	breq	.+2      	; 0x4c76 <main+0x2150>
    4c74:	72 c3       	rjmp	.+1764   	; 0x535a <main+0x2834>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1036
        {
            if (blinkMode == setHr)
    4c76:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4c7a:	88 23       	and	r24, r24
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <main+0x215a>
    4c7e:	df cb       	rjmp	.-2114   	; 0x443e <main+0x1918>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4c80:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4c82:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1040
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4c84:	81 30       	cpi	r24, 0x01	; 1
    4c86:	09 f0       	breq	.+2      	; 0x4c8a <main+0x2164>
    4c88:	8f ca       	rjmp	.-2786   	; 0x41a8 <main+0x1682>
    4c8a:	9d ce       	rjmp	.-710    	; 0x49c6 <main+0x1ea0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1051
        }
        break;
    }
    case mnuCmdPlrMorDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    4c8c:	12 30       	cpi	r17, 0x02	; 2
    4c8e:	09 f0       	breq	.+2      	; 0x4c92 <main+0x216c>
    4c90:	4c c0       	rjmp	.+152    	; 0x4d2a <main+0x2204>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1053
        {
            if (blinkMode == setHr)
    4c92:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4c96:	11 11       	cpse	r17, r1
    4c98:	22 c0       	rjmp	.+68     	; 0x4cde <main+0x21b8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1054
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
    4c9a:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <config+0x42>
    4c9e:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <config+0x43>
    4ca2:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <config+0x44>
    4ca6:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4caa:	ac 01       	movw	r20, r24
    4cac:	bd 01       	movw	r22, r26
    4cae:	44 5c       	subi	r20, 0xC4	; 196
    4cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb2:	6f 4f       	sbci	r22, 0xFF	; 255
    4cb4:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4cb6:	77 fd       	sbrc	r23, 7
    4cb8:	08 c0       	rjmp	.+16     	; 0x4cca <main+0x21a4>
    4cba:	40 3a       	cpi	r20, 0xA0	; 160
    4cbc:	e5 e0       	ldi	r30, 0x05	; 5
    4cbe:	5e 07       	cpc	r21, r30
    4cc0:	61 05       	cpc	r22, r1
    4cc2:	71 05       	cpc	r23, r1
    4cc4:	14 f4       	brge	.+4      	; 0x4cca <main+0x21a4>
    4cc6:	db 01       	movw	r26, r22
    4cc8:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1054
    4cca:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <config+0x42>
    4cce:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <config+0x43>
    4cd2:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <config+0x44>
    4cd6:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4cda:	e1 2c       	mov	r14, r1
    4cdc:	65 ca       	rjmp	.-2870   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1055
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    4cde:	11 30       	cpi	r17, 0x01	; 1
    4ce0:	09 f0       	breq	.+2      	; 0x4ce4 <main+0x21be>
    4ce2:	3f c3       	rjmp	.+1662   	; 0x5362 <main+0x283c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1056
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
    4ce4:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <config+0x42>
    4ce8:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <config+0x43>
    4cec:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <config+0x44>
    4cf0:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4cf4:	ac 01       	movw	r20, r24
    4cf6:	bd 01       	movw	r22, r26
    4cf8:	4b 5f       	subi	r20, 0xFB	; 251
    4cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfc:	6f 4f       	sbci	r22, 0xFF	; 255
    4cfe:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4d00:	77 fd       	sbrc	r23, 7
    4d02:	08 c0       	rjmp	.+16     	; 0x4d14 <main+0x21ee>
    4d04:	40 3a       	cpi	r20, 0xA0	; 160
    4d06:	f5 e0       	ldi	r31, 0x05	; 5
    4d08:	5f 07       	cpc	r21, r31
    4d0a:	61 05       	cpc	r22, r1
    4d0c:	71 05       	cpc	r23, r1
    4d0e:	14 f4       	brge	.+4      	; 0x4d14 <main+0x21ee>
    4d10:	db 01       	movw	r26, r22
    4d12:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1056
    4d14:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <config+0x42>
    4d18:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <config+0x43>
    4d1c:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <config+0x44>
    4d20:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d24:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4d26:	10 e0       	ldi	r17, 0x00	; 0
    4d28:	3f ca       	rjmp	.-2946   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1058
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4d2a:	81 2f       	mov	r24, r17
    4d2c:	8f 77       	andi	r24, 0x7F	; 127
    4d2e:	83 30       	cpi	r24, 0x03	; 3
    4d30:	09 f0       	breq	.+2      	; 0x4d34 <main+0x220e>
    4d32:	4c c0       	rjmp	.+152    	; 0x4dcc <main+0x22a6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1060
        {
            if (blinkMode == setHr)
    4d34:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4d38:	11 11       	cpse	r17, r1
    4d3a:	22 c0       	rjmp	.+68     	; 0x4d80 <main+0x225a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1061
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
    4d3c:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <config+0x42>
    4d40:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <config+0x43>
    4d44:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <config+0x44>
    4d48:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4d4c:	ac 01       	movw	r20, r24
    4d4e:	bd 01       	movw	r22, r26
    4d50:	4c 53       	subi	r20, 0x3C	; 60
    4d52:	51 09       	sbc	r21, r1
    4d54:	61 09       	sbc	r22, r1
    4d56:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4d58:	77 fd       	sbrc	r23, 7
    4d5a:	08 c0       	rjmp	.+16     	; 0x4d6c <main+0x2246>
    4d5c:	40 3a       	cpi	r20, 0xA0	; 160
    4d5e:	25 e0       	ldi	r18, 0x05	; 5
    4d60:	52 07       	cpc	r21, r18
    4d62:	61 05       	cpc	r22, r1
    4d64:	71 05       	cpc	r23, r1
    4d66:	14 f4       	brge	.+4      	; 0x4d6c <main+0x2246>
    4d68:	db 01       	movw	r26, r22
    4d6a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1061
    4d6c:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <config+0x42>
    4d70:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <config+0x43>
    4d74:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <config+0x44>
    4d78:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d7c:	e1 2c       	mov	r14, r1
    4d7e:	14 ca       	rjmp	.-3032   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1062
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    4d80:	11 30       	cpi	r17, 0x01	; 1
    4d82:	09 f0       	breq	.+2      	; 0x4d86 <main+0x2260>
    4d84:	f2 c2       	rjmp	.+1508   	; 0x536a <main+0x2844>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1063
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
    4d86:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <config+0x42>
    4d8a:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <config+0x43>
    4d8e:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <config+0x44>
    4d92:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4d96:	ac 01       	movw	r20, r24
    4d98:	bd 01       	movw	r22, r26
    4d9a:	45 50       	subi	r20, 0x05	; 5
    4d9c:	51 09       	sbc	r21, r1
    4d9e:	61 09       	sbc	r22, r1
    4da0:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4da2:	77 fd       	sbrc	r23, 7
    4da4:	08 c0       	rjmp	.+16     	; 0x4db6 <main+0x2290>
    4da6:	40 3a       	cpi	r20, 0xA0	; 160
    4da8:	35 e0       	ldi	r19, 0x05	; 5
    4daa:	53 07       	cpc	r21, r19
    4dac:	61 05       	cpc	r22, r1
    4dae:	71 05       	cpc	r23, r1
    4db0:	14 f4       	brge	.+4      	; 0x4db6 <main+0x2290>
    4db2:	db 01       	movw	r26, r22
    4db4:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1063
    4db6:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <config+0x42>
    4dba:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <config+0x43>
    4dbe:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <config+0x44>
    4dc2:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4dc6:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4dc8:	10 e0       	ldi	r17, 0x00	; 0
    4dca:	ee c9       	rjmp	.-3108   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1065
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4dcc:	11 30       	cpi	r17, 0x01	; 1
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <main+0x22ac>
    4dd0:	d0 c2       	rjmp	.+1440   	; 0x5372 <main+0x284c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1067
        {
            if (blinkMode == setHr)
    4dd2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4dd6:	88 23       	and	r24, r24
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <main+0x22b6>
    4dda:	31 cb       	rjmp	.-2462   	; 0x443e <main+0x1918>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4ddc:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4dde:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1071
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4de0:	81 30       	cpi	r24, 0x01	; 1
    4de2:	09 f0       	breq	.+2      	; 0x4de6 <main+0x22c0>
    4de4:	e1 c9       	rjmp	.-3134   	; 0x41a8 <main+0x1682>
    4de6:	ef cd       	rjmp	.-1058   	; 0x49c6 <main+0x1ea0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1082
        }
        break;
    }
    case mnuCmdPlrEveOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4de8:	12 30       	cpi	r17, 0x02	; 2
    4dea:	09 f0       	breq	.+2      	; 0x4dee <main+0x22c8>
    4dec:	4c c0       	rjmp	.+152    	; 0x4e86 <main+0x2360>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1084
        {
            if (blinkMode == setHr)
    4dee:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4df2:	11 11       	cpse	r17, r1
    4df4:	22 c0       	rjmp	.+68     	; 0x4e3a <main+0x2314>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1085
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
    4df6:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <config+0x46>
    4dfa:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <config+0x47>
    4dfe:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <config+0x48>
    4e02:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4e06:	ac 01       	movw	r20, r24
    4e08:	bd 01       	movw	r22, r26
    4e0a:	44 5c       	subi	r20, 0xC4	; 196
    4e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e0e:	6f 4f       	sbci	r22, 0xFF	; 255
    4e10:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4e12:	77 fd       	sbrc	r23, 7
    4e14:	08 c0       	rjmp	.+16     	; 0x4e26 <main+0x2300>
    4e16:	40 3a       	cpi	r20, 0xA0	; 160
    4e18:	e5 e0       	ldi	r30, 0x05	; 5
    4e1a:	5e 07       	cpc	r21, r30
    4e1c:	61 05       	cpc	r22, r1
    4e1e:	71 05       	cpc	r23, r1
    4e20:	14 f4       	brge	.+4      	; 0x4e26 <main+0x2300>
    4e22:	db 01       	movw	r26, r22
    4e24:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1085
    4e26:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <config+0x46>
    4e2a:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <config+0x47>
    4e2e:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <config+0x48>
    4e32:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4e36:	e1 2c       	mov	r14, r1
    4e38:	b7 c9       	rjmp	.-3218   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1086
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    4e3a:	11 30       	cpi	r17, 0x01	; 1
    4e3c:	09 f0       	breq	.+2      	; 0x4e40 <main+0x231a>
    4e3e:	9d c2       	rjmp	.+1338   	; 0x537a <main+0x2854>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1087
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
    4e40:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <config+0x46>
    4e44:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <config+0x47>
    4e48:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <config+0x48>
    4e4c:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4e50:	ac 01       	movw	r20, r24
    4e52:	bd 01       	movw	r22, r26
    4e54:	4f 5f       	subi	r20, 0xFF	; 255
    4e56:	5f 4f       	sbci	r21, 0xFF	; 255
    4e58:	6f 4f       	sbci	r22, 0xFF	; 255
    4e5a:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4e5c:	77 fd       	sbrc	r23, 7
    4e5e:	08 c0       	rjmp	.+16     	; 0x4e70 <main+0x234a>
    4e60:	40 3a       	cpi	r20, 0xA0	; 160
    4e62:	f5 e0       	ldi	r31, 0x05	; 5
    4e64:	5f 07       	cpc	r21, r31
    4e66:	61 05       	cpc	r22, r1
    4e68:	71 05       	cpc	r23, r1
    4e6a:	14 f4       	brge	.+4      	; 0x4e70 <main+0x234a>
    4e6c:	db 01       	movw	r26, r22
    4e6e:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1087
    4e70:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <config+0x46>
    4e74:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <config+0x47>
    4e78:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <config+0x48>
    4e7c:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4e80:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e82:	10 e0       	ldi	r17, 0x00	; 0
    4e84:	91 c9       	rjmp	.-3294   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1089
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    4e86:	13 30       	cpi	r17, 0x03	; 3
    4e88:	09 f0       	breq	.+2      	; 0x4e8c <main+0x2366>
    4e8a:	4c c0       	rjmp	.+152    	; 0x4f24 <main+0x23fe>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1091
        {
            if (blinkMode == setHr)
    4e8c:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4e90:	11 11       	cpse	r17, r1
    4e92:	22 c0       	rjmp	.+68     	; 0x4ed8 <main+0x23b2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1092
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
    4e94:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <config+0x46>
    4e98:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <config+0x47>
    4e9c:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <config+0x48>
    4ea0:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4ea4:	ac 01       	movw	r20, r24
    4ea6:	bd 01       	movw	r22, r26
    4ea8:	4c 53       	subi	r20, 0x3C	; 60
    4eaa:	51 09       	sbc	r21, r1
    4eac:	61 09       	sbc	r22, r1
    4eae:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4eb0:	77 fd       	sbrc	r23, 7
    4eb2:	08 c0       	rjmp	.+16     	; 0x4ec4 <main+0x239e>
    4eb4:	40 3a       	cpi	r20, 0xA0	; 160
    4eb6:	25 e0       	ldi	r18, 0x05	; 5
    4eb8:	52 07       	cpc	r21, r18
    4eba:	61 05       	cpc	r22, r1
    4ebc:	71 05       	cpc	r23, r1
    4ebe:	14 f4       	brge	.+4      	; 0x4ec4 <main+0x239e>
    4ec0:	db 01       	movw	r26, r22
    4ec2:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1092
    4ec4:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <config+0x46>
    4ec8:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <config+0x47>
    4ecc:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <config+0x48>
    4ed0:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4ed4:	e1 2c       	mov	r14, r1
    4ed6:	68 c9       	rjmp	.-3376   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1093
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    4ed8:	11 30       	cpi	r17, 0x01	; 1
    4eda:	09 f0       	breq	.+2      	; 0x4ede <main+0x23b8>
    4edc:	52 c2       	rjmp	.+1188   	; 0x5382 <main+0x285c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1094
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
    4ede:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <config+0x46>
    4ee2:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <config+0x47>
    4ee6:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <config+0x48>
    4eea:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4eee:	ac 01       	movw	r20, r24
    4ef0:	bd 01       	movw	r22, r26
    4ef2:	41 50       	subi	r20, 0x01	; 1
    4ef4:	51 09       	sbc	r21, r1
    4ef6:	61 09       	sbc	r22, r1
    4ef8:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4efa:	77 fd       	sbrc	r23, 7
    4efc:	08 c0       	rjmp	.+16     	; 0x4f0e <main+0x23e8>
    4efe:	40 3a       	cpi	r20, 0xA0	; 160
    4f00:	35 e0       	ldi	r19, 0x05	; 5
    4f02:	53 07       	cpc	r21, r19
    4f04:	61 05       	cpc	r22, r1
    4f06:	71 05       	cpc	r23, r1
    4f08:	14 f4       	brge	.+4      	; 0x4f0e <main+0x23e8>
    4f0a:	db 01       	movw	r26, r22
    4f0c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1094
    4f0e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <config+0x46>
    4f12:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <config+0x47>
    4f16:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <config+0x48>
    4f1a:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4f1e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4f20:	10 e0       	ldi	r17, 0x00	; 0
    4f22:	42 c9       	rjmp	.-3452   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1096
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4f24:	11 30       	cpi	r17, 0x01	; 1
    4f26:	09 f0       	breq	.+2      	; 0x4f2a <main+0x2404>
    4f28:	30 c2       	rjmp	.+1120   	; 0x538a <main+0x2864>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1098
        {
            if (blinkMode == setHr)
    4f2a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4f2e:	88 23       	and	r24, r24
    4f30:	09 f4       	brne	.+2      	; 0x4f34 <main+0x240e>
    4f32:	85 ca       	rjmp	.-2806   	; 0x443e <main+0x1918>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4f34:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4f36:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1102
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4f38:	81 30       	cpi	r24, 0x01	; 1
    4f3a:	09 f0       	breq	.+2      	; 0x4f3e <main+0x2418>
    4f3c:	35 c9       	rjmp	.-3478   	; 0x41a8 <main+0x1682>
    4f3e:	43 cd       	rjmp	.-1402   	; 0x49c6 <main+0x1ea0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1113
        }
        break;
    }
    case mnuCmdPlrEveDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    4f40:	12 30       	cpi	r17, 0x02	; 2
    4f42:	09 f0       	breq	.+2      	; 0x4f46 <main+0x2420>
    4f44:	4c c0       	rjmp	.+152    	; 0x4fde <main+0x24b8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1115
        {
            if (blinkMode == setHr)
    4f46:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4f4a:	11 11       	cpse	r17, r1
    4f4c:	22 c0       	rjmp	.+68     	; 0x4f92 <main+0x246c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1116
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
    4f4e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <config+0x4a>
    4f52:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <config+0x4b>
    4f56:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <config+0x4c>
    4f5a:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4f5e:	ac 01       	movw	r20, r24
    4f60:	bd 01       	movw	r22, r26
    4f62:	44 5c       	subi	r20, 0xC4	; 196
    4f64:	5f 4f       	sbci	r21, 0xFF	; 255
    4f66:	6f 4f       	sbci	r22, 0xFF	; 255
    4f68:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4f6a:	77 fd       	sbrc	r23, 7
    4f6c:	08 c0       	rjmp	.+16     	; 0x4f7e <main+0x2458>
    4f6e:	40 3a       	cpi	r20, 0xA0	; 160
    4f70:	e5 e0       	ldi	r30, 0x05	; 5
    4f72:	5e 07       	cpc	r21, r30
    4f74:	61 05       	cpc	r22, r1
    4f76:	71 05       	cpc	r23, r1
    4f78:	14 f4       	brge	.+4      	; 0x4f7e <main+0x2458>
    4f7a:	db 01       	movw	r26, r22
    4f7c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1116
    4f7e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <config+0x4a>
    4f82:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <config+0x4b>
    4f86:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <config+0x4c>
    4f8a:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4f8e:	e1 2c       	mov	r14, r1
    4f90:	0b c9       	rjmp	.-3562   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1117
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    4f92:	11 30       	cpi	r17, 0x01	; 1
    4f94:	09 f0       	breq	.+2      	; 0x4f98 <main+0x2472>
    4f96:	fd c1       	rjmp	.+1018   	; 0x5392 <main+0x286c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1118
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
    4f98:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <config+0x4a>
    4f9c:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <config+0x4b>
    4fa0:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <config+0x4c>
    4fa4:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4fa8:	ac 01       	movw	r20, r24
    4faa:	bd 01       	movw	r22, r26
    4fac:	4b 5f       	subi	r20, 0xFB	; 251
    4fae:	5f 4f       	sbci	r21, 0xFF	; 255
    4fb0:	6f 4f       	sbci	r22, 0xFF	; 255
    4fb2:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4fb4:	77 fd       	sbrc	r23, 7
    4fb6:	08 c0       	rjmp	.+16     	; 0x4fc8 <main+0x24a2>
    4fb8:	40 3a       	cpi	r20, 0xA0	; 160
    4fba:	f5 e0       	ldi	r31, 0x05	; 5
    4fbc:	5f 07       	cpc	r21, r31
    4fbe:	61 05       	cpc	r22, r1
    4fc0:	71 05       	cpc	r23, r1
    4fc2:	14 f4       	brge	.+4      	; 0x4fc8 <main+0x24a2>
    4fc4:	db 01       	movw	r26, r22
    4fc6:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1118
    4fc8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <config+0x4a>
    4fcc:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <config+0x4b>
    4fd0:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <config+0x4c>
    4fd4:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4fd8:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4fda:	10 e0       	ldi	r17, 0x00	; 0
    4fdc:	e5 c8       	rjmp	.-3638   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1120
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4fde:	81 2f       	mov	r24, r17
    4fe0:	8f 77       	andi	r24, 0x7F	; 127
    4fe2:	83 30       	cpi	r24, 0x03	; 3
    4fe4:	09 f0       	breq	.+2      	; 0x4fe8 <main+0x24c2>
    4fe6:	4c c0       	rjmp	.+152    	; 0x5080 <main+0x255a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1122
        {
            if (blinkMode == setHr)
    4fe8:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4fec:	11 11       	cpse	r17, r1
    4fee:	22 c0       	rjmp	.+68     	; 0x5034 <main+0x250e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1123
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
    4ff0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <config+0x4a>
    4ff4:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <config+0x4b>
    4ff8:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <config+0x4c>
    4ffc:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5000:	ac 01       	movw	r20, r24
    5002:	bd 01       	movw	r22, r26
    5004:	4c 53       	subi	r20, 0x3C	; 60
    5006:	51 09       	sbc	r21, r1
    5008:	61 09       	sbc	r22, r1
    500a:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    500c:	77 fd       	sbrc	r23, 7
    500e:	08 c0       	rjmp	.+16     	; 0x5020 <main+0x24fa>
    5010:	40 3a       	cpi	r20, 0xA0	; 160
    5012:	25 e0       	ldi	r18, 0x05	; 5
    5014:	52 07       	cpc	r21, r18
    5016:	61 05       	cpc	r22, r1
    5018:	71 05       	cpc	r23, r1
    501a:	14 f4       	brge	.+4      	; 0x5020 <main+0x24fa>
    501c:	db 01       	movw	r26, r22
    501e:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1123
    5020:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <config+0x4a>
    5024:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <config+0x4b>
    5028:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <config+0x4c>
    502c:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5030:	e1 2c       	mov	r14, r1
    5032:	ba c8       	rjmp	.-3724   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1124
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    5034:	11 30       	cpi	r17, 0x01	; 1
    5036:	09 f0       	breq	.+2      	; 0x503a <main+0x2514>
    5038:	b0 c1       	rjmp	.+864    	; 0x539a <main+0x2874>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1125
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
    503a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <config+0x4a>
    503e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <config+0x4b>
    5042:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <config+0x4c>
    5046:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    504a:	ac 01       	movw	r20, r24
    504c:	bd 01       	movw	r22, r26
    504e:	45 50       	subi	r20, 0x05	; 5
    5050:	51 09       	sbc	r21, r1
    5052:	61 09       	sbc	r22, r1
    5054:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    5056:	77 fd       	sbrc	r23, 7
    5058:	08 c0       	rjmp	.+16     	; 0x506a <main+0x2544>
    505a:	40 3a       	cpi	r20, 0xA0	; 160
    505c:	35 e0       	ldi	r19, 0x05	; 5
    505e:	53 07       	cpc	r21, r19
    5060:	61 05       	cpc	r22, r1
    5062:	71 05       	cpc	r23, r1
    5064:	14 f4       	brge	.+4      	; 0x506a <main+0x2544>
    5066:	db 01       	movw	r26, r22
    5068:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1125
    506a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <config+0x4a>
    506e:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <config+0x4b>
    5072:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <config+0x4c>
    5076:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    507a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    507c:	10 e0       	ldi	r17, 0x00	; 0
    507e:	94 c8       	rjmp	.-3800   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1127
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    5080:	11 30       	cpi	r17, 0x01	; 1
    5082:	09 f0       	breq	.+2      	; 0x5086 <main+0x2560>
    5084:	8e c1       	rjmp	.+796    	; 0x53a2 <main+0x287c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1129
        {
            if (blinkMode == setHr)
    5086:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    508a:	88 23       	and	r24, r24
    508c:	09 f4       	brne	.+2      	; 0x5090 <main+0x256a>
    508e:	d7 c9       	rjmp	.-3154   	; 0x443e <main+0x1918>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5090:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5092:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1133
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    5094:	81 30       	cpi	r24, 0x01	; 1
    5096:	09 f0       	breq	.+2      	; 0x509a <main+0x2574>
    5098:	87 c8       	rjmp	.-3826   	; 0x41a8 <main+0x1682>
    509a:	95 cc       	rjmp	.-1750   	; 0x49c6 <main+0x1ea0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1145
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    509c:	81 2f       	mov	r24, r17
    509e:	8f 77       	andi	r24, 0x7F	; 127
    50a0:	82 30       	cpi	r24, 0x02	; 2
    50a2:	69 f4       	brne	.+26     	; 0x50be <main+0x2598>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1147
        {
            config.SerialNo = ++config.SerialNo;
    50a4:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <config+0x20>
    50a8:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <config+0x21>
    50ac:	01 96       	adiw	r24, 0x01	; 1
    50ae:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x21>
    50b2:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x20>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1144
        }
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
    50b6:	ee 24       	eor	r14, r14
    50b8:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50ba:	10 e0       	ldi	r17, 0x00	; 0
    50bc:	75 c8       	rjmp	.-3862   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1149
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    50be:	83 30       	cpi	r24, 0x03	; 3
    50c0:	69 f4       	brne	.+26     	; 0x50dc <main+0x25b6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1151
        {
            config.SerialNo = --config.SerialNo;
    50c2:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <config+0x20>
    50c6:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <config+0x21>
    50ca:	01 97       	sbiw	r24, 0x01	; 1
    50cc:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x21>
    50d0:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x20>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1144
        }
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
    50d4:	ee 24       	eor	r14, r14
    50d6:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50d8:	10 e0       	ldi	r17, 0x00	; 0
    50da:	66 c8       	rjmp	.-3892   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1153
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    50dc:	11 30       	cpi	r17, 0x01	; 1
    50de:	09 f4       	brne	.+2      	; 0x50e2 <main+0x25bc>
    50e0:	02 ca       	rjmp	.-3068   	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50e2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50e4:	10 e0       	ldi	r17, 0x00	; 0
    50e6:	60 c8       	rjmp	.-3904   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1167
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    50e8:	81 2f       	mov	r24, r17
    50ea:	8f 77       	andi	r24, 0x7F	; 127
    50ec:	82 30       	cpi	r24, 0x02	; 2
    50ee:	69 f4       	brne	.+26     	; 0x510a <main+0x25e4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1169
        {
            config.DataYear = ++config.DataYear;
    50f0:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <config+0x1e>
    50f4:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <config+0x1f>
    50f8:	01 96       	adiw	r24, 0x01	; 1
    50fa:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x1f>
    50fe:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x1e>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1166
        }
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
    5102:	ee 24       	eor	r14, r14
    5104:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5106:	10 e0       	ldi	r17, 0x00	; 0
    5108:	4f c8       	rjmp	.-3938   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1171
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    510a:	83 30       	cpi	r24, 0x03	; 3
    510c:	99 f4       	brne	.+38     	; 0x5134 <main+0x260e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1173
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    510e:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <config+0x1e>
    5112:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <config+0x1f>
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	86 3e       	cpi	r24, 0xE6	; 230
    511a:	67 e0       	ldi	r22, 0x07	; 7
    511c:	96 07       	cpc	r25, r22
    511e:	14 f4       	brge	.+4      	; 0x5124 <main+0x25fe>
    5120:	86 ee       	ldi	r24, 0xE6	; 230
    5122:	97 e0       	ldi	r25, 0x07	; 7
    5124:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x1f>
    5128:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x1e>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1166
        }
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
    512c:	ee 24       	eor	r14, r14
    512e:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5130:	10 e0       	ldi	r17, 0x00	; 0
    5132:	3a c8       	rjmp	.-3980   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1175
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    5134:	11 30       	cpi	r17, 0x01	; 1
    5136:	09 f4       	brne	.+2      	; 0x513a <main+0x2614>
    5138:	d6 c9       	rjmp	.-3156   	; 0x44e6 <main+0x19c0>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    513a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    513c:	10 e0       	ldi	r17, 0x00	; 0
    513e:	34 c8       	rjmp	.-3992   	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1189
        break;
    }

    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    5140:	11 38       	cpi	r17, 0x81	; 129
    5142:	09 f0       	breq	.+2      	; 0x5146 <main+0x2620>
    5144:	ba c0       	rjmp	.+372    	; 0x52ba <main+0x2794>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    5146:	67 e2       	ldi	r22, 0x27	; 39
    5148:	71 e0       	ldi	r23, 0x01	; 1
    514a:	86 eb       	ldi	r24, 0xB6	; 182
    514c:	93 e0       	ldi	r25, 0x03	; 3
    514e:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:12
  Song1_Count = 100;
    5152:	84 e6       	ldi	r24, 0x64	; 100
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <config+0x1b>
    515a:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:13
  Song2_Count = 100;
    515e:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <config+0x1d>
    5162:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:14
  startTime = 5; //5AM
    5166:	85 e0       	ldi	r24, 0x05	; 5
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x10>
    516e:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:15
  endTime = 22; // 10PM
    5172:	86 e1       	ldi	r24, 0x16	; 22
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <config+0x12>
    517a:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:16
  backLightDur = 20; //Sec
    517e:	84 e1       	ldi	r24, 0x14	; 20
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x14>
    5186:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:17
  vol = 20;
    518a:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <config+0x16>
    518e:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:18
  MorSong1Time = 3;
    5192:	83 e0       	ldi	r24, 0x03	; 3
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <config+0x23>
    519a:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <config+0x22>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:19
  MorSong2Time = 3;
    519e:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <config+0x25>
    51a2:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:20
  EveSong2Time = 3;
    51a6:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <config+0x29>
    51aa:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:21
  EveSong1Time = 3;
    51ae:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <config+0x27>
    51b2:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:22
  MorSongNo = 1;
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2b>
    51be:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:23
  EveSongNo = 2;
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2d>
    51ca:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:25

  Light1On = 1079;
    51ce:	87 e3       	ldi	r24, 0x37	; 55
    51d0:	94 e0       	ldi	r25, 0x04	; 4
    51d2:	a0 e0       	ldi	r26, 0x00	; 0
    51d4:	b0 e0       	ldi	r27, 0x00	; 0
    51d6:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <config+0x2e>
    51da:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <config+0x2f>
    51de:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <config+0x30>
    51e2:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <config+0x31>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:26
  Light1Off = 359;
    51e6:	87 e6       	ldi	r24, 0x67	; 103
    51e8:	91 e0       	ldi	r25, 0x01	; 1
    51ea:	a0 e0       	ldi	r26, 0x00	; 0
    51ec:	b0 e0       	ldi	r27, 0x00	; 0
    51ee:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <config+0x32>
    51f2:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <config+0x33>
    51f6:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <config+0x34>
    51fa:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:27
  Light2On = 0;
    51fe:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <config+0x36>
    5202:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <config+0x37>
    5206:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <config+0x38>
    520a:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:28
  Light2Off = 0;
    520e:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <config+0x3a>
    5212:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <config+0x3b>
    5216:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <config+0x3c>
    521a:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:29
  PlayerMorTime = 300;
    521e:	8c e2       	ldi	r24, 0x2C	; 44
    5220:	91 e0       	ldi	r25, 0x01	; 1
    5222:	a0 e0       	ldi	r26, 0x00	; 0
    5224:	b0 e0       	ldi	r27, 0x00	; 0
    5226:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <config+0x3e>
    522a:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <config+0x3f>
    522e:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <config+0x40>
    5232:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:30
  PlayerMorDur= 115;
    5236:	83 e7       	ldi	r24, 0x73	; 115
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	a0 e0       	ldi	r26, 0x00	; 0
    523c:	b0 e0       	ldi	r27, 0x00	; 0
    523e:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <config+0x42>
    5242:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <config+0x43>
    5246:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <config+0x44>
    524a:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:31
  PlayerEveTime = 1020;
    524e:	8c ef       	ldi	r24, 0xFC	; 252
    5250:	93 e0       	ldi	r25, 0x03	; 3
    5252:	a0 e0       	ldi	r26, 0x00	; 0
    5254:	b0 e0       	ldi	r27, 0x00	; 0
    5256:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <config+0x46>
    525a:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <config+0x47>
    525e:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <config+0x48>
    5262:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:32
  PlayerEveDur = 115;
    5266:	83 e7       	ldi	r24, 0x73	; 115
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	a0 e0       	ldi	r26, 0x00	; 0
    526c:	b0 e0       	ldi	r27, 0x00	; 0
    526e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <config+0x4a>
    5272:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <config+0x4b>
    5276:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <config+0x4c>
    527a:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:34

  AutoPlay = 0;
    527e:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:35
  AutoLight = 0;
    5282:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:36
  SchlZone = 0;
    5286:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:38

  SerialNo = 315;
    528a:	8b e3       	ldi	r24, 0x3B	; 59
    528c:	91 e0       	ldi	r25, 0x01	; 1
    528e:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x21>
    5292:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:39
  DataYear = 2022;
    5296:	86 ee       	ldi	r24, 0xE6	; 230
    5298:	97 e0       	ldi	r25, 0x07	; 7
    529a:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x1f>
    529e:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x1e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1192
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    52a2:	61 e0       	ldi	r22, 0x01	; 1
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1193
            lcd.print("Defaults loaded");
    52aa:	8e e3       	ldi	r24, 0x3E	; 62
    52ac:	92 e0       	ldi	r25, 0x02	; 2
    52ae:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    52b2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52b4:	10 e0       	ldi	r17, 0x00	; 0
    52b6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1195
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
            lcd.print("Defaults loaded");
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	11 3c       	cpi	r17, 0xC1	; 193
    52be:	09 f0       	breq	.+2      	; 0x52c2 <main+0x279c>
    52c0:	80 e0       	ldi	r24, 0x00	; 0
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52c2:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:643
    byte configChanged = false;
    52c4:	e1 2c       	mov	r14, r1
    52c6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
    52ca:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52cc:	10 e0       	ldi	r17, 0x00	; 0
    52ce:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52d2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52d4:	10 e0       	ldi	r17, 0x00	; 0
    52d6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52da:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52dc:	10 e0       	ldi	r17, 0x00	; 0
    52de:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52e2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52e4:	10 e0       	ldi	r17, 0x00	; 0
    52e6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52ea:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52ec:	10 e0       	ldi	r17, 0x00	; 0
    52ee:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52f2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52f4:	10 e0       	ldi	r17, 0x00	; 0
    52f6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52fa:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52fc:	10 e0       	ldi	r17, 0x00	; 0
    52fe:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5302:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5304:	10 e0       	ldi	r17, 0x00	; 0
    5306:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    530a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    530c:	10 e0       	ldi	r17, 0x00	; 0
    530e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5312:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5314:	10 e0       	ldi	r17, 0x00	; 0
    5316:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    531a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    531c:	10 e0       	ldi	r17, 0x00	; 0
    531e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5322:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5324:	10 e0       	ldi	r17, 0x00	; 0
    5326:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    532a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    532c:	10 e0       	ldi	r17, 0x00	; 0
    532e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5332:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5334:	10 e0       	ldi	r17, 0x00	; 0
    5336:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    533a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    533c:	10 e0       	ldi	r17, 0x00	; 0
    533e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5342:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5344:	10 e0       	ldi	r17, 0x00	; 0
    5346:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    534a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    534c:	10 e0       	ldi	r17, 0x00	; 0
    534e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5352:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5354:	10 e0       	ldi	r17, 0x00	; 0
    5356:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    535a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    535c:	10 e0       	ldi	r17, 0x00	; 0
    535e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5362:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5364:	10 e0       	ldi	r17, 0x00	; 0
    5366:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    536a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    536c:	10 e0       	ldi	r17, 0x00	; 0
    536e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5372:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5374:	10 e0       	ldi	r17, 0x00	; 0
    5376:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    537a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    537c:	10 e0       	ldi	r17, 0x00	; 0
    537e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5382:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5384:	10 e0       	ldi	r17, 0x00	; 0
    5386:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    538a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    538c:	10 e0       	ldi	r17, 0x00	; 0
    538e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5392:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5394:	10 e0       	ldi	r17, 0x00	; 0
    5396:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    539a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    539c:	10 e0       	ldi	r17, 0x00	; 0
    539e:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:849
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    53a2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:642
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    53a4:	10 e0       	ldi	r17, 0x00	; 0
    53a6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <main+0x1682>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1209
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    53aa:	ee 20       	and	r14, r14
    53ac:	71 f0       	breq	.+28     	; 0x53ca <main+0x28a4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1211
    {
        lcd.setCursor(1, 1);
    53ae:	61 e0       	ldi	r22, 0x01	; 1
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1212
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    53b6:	8d 2d       	mov	r24, r13
    53b8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    53bc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    53c0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
    53c4:	e1 2c       	mov	r14, r1
    53c6:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <main+0x16ac>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1216
    }
    else
    {
        if (millis() - timr_Time > 300)
    53ca:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    53ce:	80 90 20 03 	lds	r8, 0x0320	; 0x800320 <timr_Time>
    53d2:	90 90 21 03 	lds	r9, 0x0321	; 0x800321 <timr_Time+0x1>
    53d6:	a0 90 22 03 	lds	r10, 0x0322	; 0x800322 <timr_Time+0x2>
    53da:	b0 90 23 03 	lds	r11, 0x0323	; 0x800323 <timr_Time+0x3>
    53de:	68 19       	sub	r22, r8
    53e0:	79 09       	sbc	r23, r9
    53e2:	8a 09       	sbc	r24, r10
    53e4:	9b 09       	sbc	r25, r11
    53e6:	6d 32       	cpi	r22, 0x2D	; 45
    53e8:	71 40       	sbci	r23, 0x01	; 1
    53ea:	81 05       	cpc	r24, r1
    53ec:	91 05       	cpc	r25, r1
    53ee:	10 f4       	brcc	.+4      	; 0x53f4 <main+0x28ce>
    53f0:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <main+0x16ac>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1218
        {
            if (blink)
    53f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    53f8:	88 23       	and	r24, r24
    53fa:	c9 f0       	breq	.+50     	; 0x542e <main+0x2908>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1220
            {
                lcd.setCursor(1, 1);
    53fc:	61 e0       	ldi	r22, 0x01	; 1
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1221
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    5404:	8d 2d       	mov	r24, r13
    5406:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    540a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    540e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1222
                blink = false;
    5412:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1253
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    5416:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    541a:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timr_Time>
    541e:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timr_Time+0x1>
    5422:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timr_Time+0x2>
    5426:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timr_Time+0x3>
    542a:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <main+0x16ac>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1226
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime ||
    542e:	b3 e0       	ldi	r27, 0x03	; 3
    5430:	db 16       	cp	r13, r27
    5432:	41 f0       	breq	.+16     	; 0x5444 <main+0x291e>
    5434:	8b ee       	ldi	r24, 0xEB	; 235
    5436:	8d 0d       	add	r24, r13
    5438:	82 30       	cpi	r24, 0x02	; 2
    543a:	20 f0       	brcs	.+8      	; 0x5444 <main+0x291e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1228
                    cmdId == mnuCmdLt1OnTime ||
                    cmdId == mnuCmdLt1OffTime ||
    543c:	88 ee       	ldi	r24, 0xE8	; 232
    543e:	8d 0d       	add	r24, r13
    5440:	84 30       	cpi	r24, 0x04	; 4
    5442:	a0 f4       	brcc	.+40     	; 0x546c <main+0x2946>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1234
                    cmdId == mnuCmdPlrMorOnTime ||
                    cmdId == mnuCmdPlrMorDur ||
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
    5444:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    5448:	81 11       	cpse	r24, r1
    544a:	0b c0       	rjmp	.+22     	; 0x5462 <main+0x293c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1235
                        lcd.setCursor(1, 1);
    544c:	61 e0       	ldi	r22, 0x01	; 1
    544e:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1237
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    5450:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1238
                    lcd.print(F("  "));
    5454:	8e e3       	ldi	r24, 0x3E	; 62
    5456:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1249
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    5458:	0e 94 14 08 	call	0x1028	; 0x1028 <Print::print(__FlashStringHelper const*) [clone .constprop.65]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1250
                    blink = true;
    545c:	70 92 02 01 	sts	0x0102, r7	; 0x800102 <blink>
    5460:	da cf       	rjmp	.-76     	; 0x5416 <main+0x28f0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1236
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    5462:	81 30       	cpi	r24, 0x01	; 1
    5464:	b9 f7       	brne	.-18     	; 0x5454 <main+0x292e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1237
                        lcd.setCursor(4, 1);
    5466:	61 e0       	ldi	r22, 0x01	; 1
    5468:	84 e0       	ldi	r24, 0x04	; 4
    546a:	f2 cf       	rjmp	.-28     	; 0x5450 <main+0x292a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1241
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    546c:	e2 e0       	ldi	r30, 0x02	; 2
    546e:	de 12       	cpse	r13, r30
    5470:	d2 cf       	rjmp	.-92     	; 0x5416 <main+0x28f0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1243
                {
                    if (blinkMode == setDate)
    5472:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    5476:	82 30       	cpi	r24, 0x02	; 2
    5478:	39 f4       	brne	.+14     	; 0x5488 <main+0x2962>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1244
                        lcd.setCursor(1, 1);
    547a:	61 e0       	ldi	r22, 0x01	; 1
    547c:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1248
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    547e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1249
                    lcd.print(F("  "));
    5482:	8b e3       	ldi	r24, 0x3B	; 59
    5484:	93 e0       	ldi	r25, 0x03	; 3
    5486:	e8 cf       	rjmp	.-48     	; 0x5458 <main+0x2932>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1245
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    5488:	83 30       	cpi	r24, 0x03	; 3
    548a:	19 f4       	brne	.+6      	; 0x5492 <main+0x296c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1246
                        lcd.setCursor(4, 1);
    548c:	61 e0       	ldi	r22, 0x01	; 1
    548e:	84 e0       	ldi	r24, 0x04	; 4
    5490:	f6 cf       	rjmp	.-20     	; 0x547e <main+0x2958>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1247
                    if (blinkMode == setYear)
    5492:	84 30       	cpi	r24, 0x04	; 4
    5494:	b1 f7       	brne	.-20     	; 0x5482 <main+0x295c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1248
                        lcd.setCursor(9, 1);
    5496:	61 e0       	ldi	r22, 0x01	; 1
    5498:	89 e0       	ldi	r24, 0x09	; 9
    549a:	f1 cf       	rjmp	.-30     	; 0x547e <main+0x2958>

0000549c <_GLOBAL__sub_D_CurTime>:
_GLOBAL__sub_D_CurTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1450
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    549c:	cf 93       	push	r28
    549e:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:43
bool ButLongPress = false;
byte alarmMode = 0;
byte btn;
char strbuf[LCD_COLS + 1];

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    54a0:	cb ea       	ldi	r28, 0xAB	; 171
    54a2:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    54a4:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    54a6:	88 81       	ld	r24, Y
    54a8:	99 81       	ldd	r25, Y+1	; 0x01
    54aa:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:43
    54ae:	24 e0       	ldi	r18, 0x04	; 4
    54b0:	c3 36       	cpi	r28, 0x63	; 99
    54b2:	d2 07       	cpc	r29, r18
    54b4:	b9 f7       	brne	.-18     	; 0x54a4 <_GLOBAL__sub_D_CurTime+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    54b6:	8e e5       	ldi	r24, 0x5E	; 94
    54b8:	91 e0       	ldi	r25, 0x01	; 1
    54ba:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <mySoftwareSerial+0x1>
    54be:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    54c2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
    54c6:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
    54ca:	83 5e       	subi	r24, 0xE3	; 227
    54cc:	94 40       	sbci	r25, 0x04	; 4
    54ce:	71 f4       	brne	.+28     	; 0x54ec <_GLOBAL__sub_D_CurTime+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    54d0:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <mySoftwareSerial+0x13>
    54d4:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <mySoftwareSerial+0x14>
    54d8:	90 81       	ld	r25, Z
    54da:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <mySoftwareSerial+0x15>
    54de:	80 95       	com	r24
    54e0:	89 23       	and	r24, r25
    54e2:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    54e4:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <SoftwareSerial::active_object+0x1>
    54e8:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <SoftwareSerial::active_object>
_GLOBAL__sub_D_CurTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1450
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	08 95       	ret

000054f2 <random_r>:
random_r():
    54f2:	8f 92       	push	r8
    54f4:	9f 92       	push	r9
    54f6:	af 92       	push	r10
    54f8:	bf 92       	push	r11
    54fa:	cf 92       	push	r12
    54fc:	df 92       	push	r13
    54fe:	ef 92       	push	r14
    5500:	ff 92       	push	r15
    5502:	cf 93       	push	r28
    5504:	df 93       	push	r29
    5506:	ec 01       	movw	r28, r24
    5508:	68 81       	ld	r22, Y
    550a:	79 81       	ldd	r23, Y+1	; 0x01
    550c:	8a 81       	ldd	r24, Y+2	; 0x02
    550e:	9b 81       	ldd	r25, Y+3	; 0x03
    5510:	61 15       	cp	r22, r1
    5512:	71 05       	cpc	r23, r1
    5514:	81 05       	cpc	r24, r1
    5516:	91 05       	cpc	r25, r1
    5518:	21 f4       	brne	.+8      	; 0x5522 <random_r+0x30>
    551a:	64 e2       	ldi	r22, 0x24	; 36
    551c:	79 ed       	ldi	r23, 0xD9	; 217
    551e:	8b e5       	ldi	r24, 0x5B	; 91
    5520:	97 e0       	ldi	r25, 0x07	; 7
    5522:	2d e1       	ldi	r18, 0x1D	; 29
    5524:	33 ef       	ldi	r19, 0xF3	; 243
    5526:	41 e0       	ldi	r20, 0x01	; 1
    5528:	50 e0       	ldi	r21, 0x00	; 0
    552a:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
    552e:	49 01       	movw	r8, r18
    5530:	5a 01       	movw	r10, r20
    5532:	9b 01       	movw	r18, r22
    5534:	ac 01       	movw	r20, r24
    5536:	a7 ea       	ldi	r26, 0xA7	; 167
    5538:	b1 e4       	ldi	r27, 0x41	; 65
    553a:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__muluhisi3>
    553e:	6b 01       	movw	r12, r22
    5540:	7c 01       	movw	r14, r24
    5542:	ac ee       	ldi	r26, 0xEC	; 236
    5544:	b4 ef       	ldi	r27, 0xF4	; 244
    5546:	a5 01       	movw	r20, r10
    5548:	94 01       	movw	r18, r8
    554a:	0e 94 ae 2b 	call	0x575c	; 0x575c <__mulohisi3>
    554e:	c6 0e       	add	r12, r22
    5550:	d7 1e       	adc	r13, r23
    5552:	e8 1e       	adc	r14, r24
    5554:	f9 1e       	adc	r15, r25
    5556:	f7 fe       	sbrs	r15, 7
    5558:	06 c0       	rjmp	.+12     	; 0x5566 <random_r+0x74>
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	c8 1a       	sub	r12, r24
    555e:	d1 08       	sbc	r13, r1
    5560:	e1 08       	sbc	r14, r1
    5562:	80 e8       	ldi	r24, 0x80	; 128
    5564:	f8 0a       	sbc	r15, r24
    5566:	c8 82       	st	Y, r12
    5568:	d9 82       	std	Y+1, r13	; 0x01
    556a:	ea 82       	std	Y+2, r14	; 0x02
    556c:	fb 82       	std	Y+3, r15	; 0x03
    556e:	c7 01       	movw	r24, r14
    5570:	b6 01       	movw	r22, r12
    5572:	9f 77       	andi	r25, 0x7F	; 127
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	ff 90       	pop	r15
    557a:	ef 90       	pop	r14
    557c:	df 90       	pop	r13
    557e:	cf 90       	pop	r12
    5580:	bf 90       	pop	r11
    5582:	af 90       	pop	r10
    5584:	9f 90       	pop	r9
    5586:	8f 90       	pop	r8
    5588:	08 95       	ret

0000558a <random>:
random():
    558a:	8f 92       	push	r8
    558c:	9f 92       	push	r9
    558e:	af 92       	push	r10
    5590:	bf 92       	push	r11
    5592:	cf 92       	push	r12
    5594:	df 92       	push	r13
    5596:	ef 92       	push	r14
    5598:	ff 92       	push	r15
    559a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <next>
    559e:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <next+0x1>
    55a2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <next+0x2>
    55a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <next+0x3>
    55aa:	61 15       	cp	r22, r1
    55ac:	71 05       	cpc	r23, r1
    55ae:	81 05       	cpc	r24, r1
    55b0:	91 05       	cpc	r25, r1
    55b2:	21 f4       	brne	.+8      	; 0x55bc <random+0x32>
    55b4:	64 e2       	ldi	r22, 0x24	; 36
    55b6:	79 ed       	ldi	r23, 0xD9	; 217
    55b8:	8b e5       	ldi	r24, 0x5B	; 91
    55ba:	97 e0       	ldi	r25, 0x07	; 7
    55bc:	2d e1       	ldi	r18, 0x1D	; 29
    55be:	33 ef       	ldi	r19, 0xF3	; 243
    55c0:	41 e0       	ldi	r20, 0x01	; 1
    55c2:	50 e0       	ldi	r21, 0x00	; 0
    55c4:	0e 94 81 2b 	call	0x5702	; 0x5702 <__divmodsi4>
    55c8:	49 01       	movw	r8, r18
    55ca:	5a 01       	movw	r10, r20
    55cc:	9b 01       	movw	r18, r22
    55ce:	ac 01       	movw	r20, r24
    55d0:	a7 ea       	ldi	r26, 0xA7	; 167
    55d2:	b1 e4       	ldi	r27, 0x41	; 65
    55d4:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__muluhisi3>
    55d8:	6b 01       	movw	r12, r22
    55da:	7c 01       	movw	r14, r24
    55dc:	ac ee       	ldi	r26, 0xEC	; 236
    55de:	b4 ef       	ldi	r27, 0xF4	; 244
    55e0:	a5 01       	movw	r20, r10
    55e2:	94 01       	movw	r18, r8
    55e4:	0e 94 ae 2b 	call	0x575c	; 0x575c <__mulohisi3>
    55e8:	c6 0e       	add	r12, r22
    55ea:	d7 1e       	adc	r13, r23
    55ec:	e8 1e       	adc	r14, r24
    55ee:	f9 1e       	adc	r15, r25
    55f0:	f7 fe       	sbrs	r15, 7
    55f2:	06 c0       	rjmp	.+12     	; 0x5600 <random+0x76>
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	c8 1a       	sub	r12, r24
    55f8:	d1 08       	sbc	r13, r1
    55fa:	e1 08       	sbc	r14, r1
    55fc:	80 e8       	ldi	r24, 0x80	; 128
    55fe:	f8 0a       	sbc	r15, r24
    5600:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <next>
    5604:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <next+0x1>
    5608:	e0 92 07 01 	sts	0x0107, r14	; 0x800107 <next+0x2>
    560c:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <next+0x3>
    5610:	c7 01       	movw	r24, r14
    5612:	b6 01       	movw	r22, r12
    5614:	9f 77       	andi	r25, 0x7F	; 127
    5616:	ff 90       	pop	r15
    5618:	ef 90       	pop	r14
    561a:	df 90       	pop	r13
    561c:	cf 90       	pop	r12
    561e:	bf 90       	pop	r11
    5620:	af 90       	pop	r10
    5622:	9f 90       	pop	r9
    5624:	8f 90       	pop	r8
    5626:	08 95       	ret

00005628 <srandom>:
srandom():
    5628:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <next>
    562c:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <next+0x1>
    5630:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next+0x2>
    5634:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x3>
    5638:	08 95       	ret

0000563a <strcpy_P>:
strcpy_P():
    563a:	fb 01       	movw	r30, r22
    563c:	dc 01       	movw	r26, r24
    563e:	05 90       	lpm	r0, Z+
    5640:	0d 92       	st	X+, r0
    5642:	00 20       	and	r0, r0
    5644:	e1 f7       	brne	.-8      	; 0x563e <strcpy_P+0x4>
    5646:	08 95       	ret

00005648 <__itoa_ncheck>:
__itoa_ncheck():
    5648:	bb 27       	eor	r27, r27
    564a:	4a 30       	cpi	r20, 0x0A	; 10
    564c:	31 f4       	brne	.+12     	; 0x565a <__itoa_ncheck+0x12>
    564e:	99 23       	and	r25, r25
    5650:	22 f4       	brpl	.+8      	; 0x565a <__itoa_ncheck+0x12>
    5652:	bd e2       	ldi	r27, 0x2D	; 45
    5654:	90 95       	com	r25
    5656:	81 95       	neg	r24
    5658:	9f 4f       	sbci	r25, 0xFF	; 255
    565a:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__utoa_common>

0000565e <__utoa_ncheck>:
__utoa_ncheck():
    565e:	bb 27       	eor	r27, r27

00005660 <__utoa_common>:
    5660:	fb 01       	movw	r30, r22
    5662:	55 27       	eor	r21, r21
    5664:	aa 27       	eor	r26, r26
    5666:	88 0f       	add	r24, r24
    5668:	99 1f       	adc	r25, r25
    566a:	aa 1f       	adc	r26, r26
    566c:	a4 17       	cp	r26, r20
    566e:	10 f0       	brcs	.+4      	; 0x5674 <__utoa_common+0x14>
    5670:	a4 1b       	sub	r26, r20
    5672:	83 95       	inc	r24
    5674:	50 51       	subi	r21, 0x10	; 16
    5676:	b9 f7       	brne	.-18     	; 0x5666 <__utoa_common+0x6>
    5678:	a0 5d       	subi	r26, 0xD0	; 208
    567a:	aa 33       	cpi	r26, 0x3A	; 58
    567c:	08 f0       	brcs	.+2      	; 0x5680 <__utoa_common+0x20>
    567e:	a9 5d       	subi	r26, 0xD9	; 217
    5680:	a1 93       	st	Z+, r26
    5682:	00 97       	sbiw	r24, 0x00	; 0
    5684:	79 f7       	brne	.-34     	; 0x5664 <__utoa_common+0x4>
    5686:	b1 11       	cpse	r27, r1
    5688:	b1 93       	st	Z+, r27
    568a:	11 92       	st	Z+, r1
    568c:	cb 01       	movw	r24, r22
    568e:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <strrev>

00005692 <strrev>:
strrev():
    5692:	dc 01       	movw	r26, r24
    5694:	fc 01       	movw	r30, r24
    5696:	67 2f       	mov	r22, r23
    5698:	71 91       	ld	r23, Z+
    569a:	77 23       	and	r23, r23
    569c:	e1 f7       	brne	.-8      	; 0x5696 <strrev+0x4>
    569e:	32 97       	sbiw	r30, 0x02	; 2
    56a0:	04 c0       	rjmp	.+8      	; 0x56aa <strrev+0x18>
    56a2:	7c 91       	ld	r23, X
    56a4:	6d 93       	st	X+, r22
    56a6:	70 83       	st	Z, r23
    56a8:	62 91       	ld	r22, -Z
    56aa:	ae 17       	cp	r26, r30
    56ac:	bf 07       	cpc	r27, r31
    56ae:	c8 f3       	brcs	.-14     	; 0x56a2 <strrev+0x10>
    56b0:	08 95       	ret

000056b2 <eeprom_read_block>:
eeprom_read_block():
    56b2:	dc 01       	movw	r26, r24
    56b4:	cb 01       	movw	r24, r22

000056b6 <eeprom_read_blraw>:
    56b6:	fc 01       	movw	r30, r24
    56b8:	f9 99       	sbic	0x1f, 1	; 31
    56ba:	fe cf       	rjmp	.-4      	; 0x56b8 <eeprom_read_blraw+0x2>
    56bc:	06 c0       	rjmp	.+12     	; 0x56ca <eeprom_read_blraw+0x14>
    56be:	f2 bd       	out	0x22, r31	; 34
    56c0:	e1 bd       	out	0x21, r30	; 33
    56c2:	f8 9a       	sbi	0x1f, 0	; 31
    56c4:	31 96       	adiw	r30, 0x01	; 1
    56c6:	00 b4       	in	r0, 0x20	; 32
    56c8:	0d 92       	st	X+, r0
    56ca:	41 50       	subi	r20, 0x01	; 1
    56cc:	50 40       	sbci	r21, 0x00	; 0
    56ce:	b8 f7       	brcc	.-18     	; 0x56be <eeprom_read_blraw+0x8>
    56d0:	08 95       	ret

000056d2 <eeprom_write_block>:
eeprom_write_block():
    56d2:	dc 01       	movw	r26, r24
    56d4:	cb 01       	movw	r24, r22
    56d6:	03 c0       	rjmp	.+6      	; 0x56de <eeprom_write_block+0xc>
    56d8:	2d 91       	ld	r18, X+
    56da:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <eeprom_write_r18>
    56de:	41 50       	subi	r20, 0x01	; 1
    56e0:	50 40       	sbci	r21, 0x00	; 0
    56e2:	d0 f7       	brcc	.-12     	; 0x56d8 <eeprom_write_block+0x6>
    56e4:	08 95       	ret

000056e6 <eeprom_write_byte>:
eeprom_write_byte():
    56e6:	26 2f       	mov	r18, r22

000056e8 <eeprom_write_r18>:
    56e8:	f9 99       	sbic	0x1f, 1	; 31
    56ea:	fe cf       	rjmp	.-4      	; 0x56e8 <eeprom_write_r18>
    56ec:	1f ba       	out	0x1f, r1	; 31
    56ee:	92 bd       	out	0x22, r25	; 34
    56f0:	81 bd       	out	0x21, r24	; 33
    56f2:	20 bd       	out	0x20, r18	; 32
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	fa 9a       	sbi	0x1f, 2	; 31
    56fa:	f9 9a       	sbi	0x1f, 1	; 31
    56fc:	0f be       	out	0x3f, r0	; 63
    56fe:	01 96       	adiw	r24, 0x01	; 1
    5700:	08 95       	ret

00005702 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5702:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5704:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5706:	1e f4       	brtc	.+6      	; 0x570e <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    5708:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    570a:	0e 94 98 2b 	call	0x5730	; 0x5730 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    570e:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5710:	07 d0       	rcall	.+14     	; 0x5720 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5712:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5716:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    5718:	03 d0       	rcall	.+6      	; 0x5720 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    571a:	4e f4       	brtc	.+18     	; 0x572e <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    571c:	0c 94 98 2b 	jmp	0x5730	; 0x5730 <__negsi2>

00005720 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5720:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5722:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5724:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5726:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    5728:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    572a:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    572c:	5f 4f       	sbci	r21, 0xFF	; 255

0000572e <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    572e:	08 95       	ret

00005730 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5730:	90 95       	com	r25
    5732:	80 95       	com	r24
    5734:	70 95       	com	r23
    5736:	61 95       	neg	r22
    5738:	7f 4f       	sbci	r23, 0xFF	; 255
    573a:	8f 4f       	sbci	r24, 0xFF	; 255
    573c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    573e:	08 95       	ret

00005740 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    5740:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    5744:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    5746:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    5748:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    574a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    574c:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    574e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    5750:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5752:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5754:	08 95       	ret

00005756 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    5756:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    5758:	0c 94 a0 2b 	jmp	0x5740	; 0x5740 <__muluhisi3>

0000575c <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    575c:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    5760:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    5762:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    5764:	08 95       	ret

00005766 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    5766:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    5768:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    576a:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    576c:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    576e:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    5770:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    5772:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    5774:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    5776:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    5778:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    577a:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    577c:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    577e:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    5780:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    5782:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    5784:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    5786:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    5788:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    578a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    578c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    578e:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    5790:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    5792:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    5794:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    5796:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    5798:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    579a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    579c:	09 94       	ijmp

0000579e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    579e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    57a0:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    57a2:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    57a4:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    57a6:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    57a8:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    57aa:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    57ac:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    57ae:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    57b0:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    57b2:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    57b4:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    57b6:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    57b8:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    57ba:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    57bc:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    57be:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    57c0:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    57c2:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    57c4:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    57c6:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    57c8:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    57ca:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    57cc:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    57ce:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    57d0:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    57d2:	08 95       	ret

000057d4 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    57d4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    57d6:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    57d8:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    57da:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    57dc:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    57de:	0d c0       	rjmp	.+26     	; 0x57fa <__udivmodsi4_ep>

000057e0 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    57e0:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    57e2:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    57e4:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    57e6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    57e8:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    57ea:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    57ec:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    57ee:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    57f0:	20 f0       	brcs	.+8      	; 0x57fa <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    57f2:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    57f4:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    57f6:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    57f8:	f5 0b       	sbc	r31, r21

000057fa <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    57fa:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    57fc:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    57fe:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5800:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    5802:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5804:	69 f7       	brne	.-38     	; 0x57e0 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5806:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5808:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    580a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    580c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    580e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5810:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5812:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5814:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5816:	08 95       	ret

00005818 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    5818:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    581a:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    581c:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    581e:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5820:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5822:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5824:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5826:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    5828:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    582a:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    582c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    582e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    5830:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    5832:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5834:	08 95       	ret

00005836 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    5836:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    5838:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    583a:	04 c0       	rjmp	.+8      	; 0x5844 <__udivmodqi4_ep>

0000583c <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    583c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    583e:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    5840:	08 f0       	brcs	.+2      	; 0x5844 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    5842:	96 1b       	sub	r25, r22

00005844 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    5844:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    5846:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    5848:	c9 f7       	brne	.-14     	; 0x583c <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    584a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    584c:	08 95       	ret

0000584e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    584e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    5850:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    5852:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    5854:	07 c0       	rjmp	.+14     	; 0x5864 <__udivmodhi4_ep>

00005856 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    5856:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    5858:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    585a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    585c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    585e:	10 f0       	brcs	.+4      	; 0x5864 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    5860:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    5862:	b7 0b       	sbc	r27, r23

00005864 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    5864:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    5866:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    5868:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    586a:	a9 f7       	brne	.-22     	; 0x5856 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    586c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    586e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    5870:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    5872:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    5874:	08 95       	ret

00005876 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    5876:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    5878:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    587a:	16 f4       	brtc	.+4      	; 0x5880 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    587c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    587e:	07 d0       	rcall	.+14     	; 0x588e <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    5880:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    5882:	09 d0       	rcall	.+18     	; 0x5896 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    5884:	0e 94 27 2c 	call	0x584e	; 0x584e <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    5888:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    588a:	05 d0       	rcall	.+10     	; 0x5896 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    588c:	3e f4       	brtc	.+14     	; 0x589c <__divmodhi4_exit>

0000588e <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    588e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    5890:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    5892:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    5894:	08 95       	ret

00005896 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    5896:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    5898:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    589a:	7f 4f       	sbci	r23, 0xFF	; 255

0000589c <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    589c:	08 95       	ret

0000589e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    589e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    58a0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    58a2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    58a4:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    58a6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    58a8:	09 94       	ijmp

000058aa <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    58aa:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__umulhisi3>

000058ae <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    58ae:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    58b0:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    58b2:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    58b4:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    58b6:	08 95       	ret

000058b8 <malloc>:
malloc():
    58b8:	0f 93       	push	r16
    58ba:	1f 93       	push	r17
    58bc:	cf 93       	push	r28
    58be:	df 93       	push	r29
    58c0:	82 30       	cpi	r24, 0x02	; 2
    58c2:	91 05       	cpc	r25, r1
    58c4:	10 f4       	brcc	.+4      	; 0x58ca <malloc+0x12>
    58c6:	82 e0       	ldi	r24, 0x02	; 2
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <__flp>
    58ce:	f0 91 05 05 	lds	r31, 0x0505	; 0x800505 <__flp+0x1>
    58d2:	30 e0       	ldi	r19, 0x00	; 0
    58d4:	20 e0       	ldi	r18, 0x00	; 0
    58d6:	b0 e0       	ldi	r27, 0x00	; 0
    58d8:	a0 e0       	ldi	r26, 0x00	; 0
    58da:	30 97       	sbiw	r30, 0x00	; 0
    58dc:	99 f4       	brne	.+38     	; 0x5904 <malloc+0x4c>
    58de:	21 15       	cp	r18, r1
    58e0:	31 05       	cpc	r19, r1
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <malloc+0x2e>
    58e4:	4a c0       	rjmp	.+148    	; 0x597a <malloc+0xc2>
    58e6:	28 1b       	sub	r18, r24
    58e8:	39 0b       	sbc	r19, r25
    58ea:	24 30       	cpi	r18, 0x04	; 4
    58ec:	31 05       	cpc	r19, r1
    58ee:	d8 f5       	brcc	.+118    	; 0x5966 <malloc+0xae>
    58f0:	8a 81       	ldd	r24, Y+2	; 0x02
    58f2:	9b 81       	ldd	r25, Y+3	; 0x03
    58f4:	61 15       	cp	r22, r1
    58f6:	71 05       	cpc	r23, r1
    58f8:	89 f1       	breq	.+98     	; 0x595c <malloc+0xa4>
    58fa:	fb 01       	movw	r30, r22
    58fc:	93 83       	std	Z+3, r25	; 0x03
    58fe:	82 83       	std	Z+2, r24	; 0x02
    5900:	fe 01       	movw	r30, r28
    5902:	11 c0       	rjmp	.+34     	; 0x5926 <malloc+0x6e>
    5904:	40 81       	ld	r20, Z
    5906:	51 81       	ldd	r21, Z+1	; 0x01
    5908:	02 81       	ldd	r16, Z+2	; 0x02
    590a:	13 81       	ldd	r17, Z+3	; 0x03
    590c:	48 17       	cp	r20, r24
    590e:	59 07       	cpc	r21, r25
    5910:	e0 f0       	brcs	.+56     	; 0x594a <malloc+0x92>
    5912:	48 17       	cp	r20, r24
    5914:	59 07       	cpc	r21, r25
    5916:	99 f4       	brne	.+38     	; 0x593e <malloc+0x86>
    5918:	10 97       	sbiw	r26, 0x00	; 0
    591a:	61 f0       	breq	.+24     	; 0x5934 <malloc+0x7c>
    591c:	12 96       	adiw	r26, 0x02	; 2
    591e:	0c 93       	st	X, r16
    5920:	12 97       	sbiw	r26, 0x02	; 2
    5922:	13 96       	adiw	r26, 0x03	; 3
    5924:	1c 93       	st	X, r17
    5926:	32 96       	adiw	r30, 0x02	; 2
    5928:	cf 01       	movw	r24, r30
    592a:	df 91       	pop	r29
    592c:	cf 91       	pop	r28
    592e:	1f 91       	pop	r17
    5930:	0f 91       	pop	r16
    5932:	08 95       	ret
    5934:	00 93 04 05 	sts	0x0504, r16	; 0x800504 <__flp>
    5938:	10 93 05 05 	sts	0x0505, r17	; 0x800505 <__flp+0x1>
    593c:	f4 cf       	rjmp	.-24     	; 0x5926 <malloc+0x6e>
    593e:	21 15       	cp	r18, r1
    5940:	31 05       	cpc	r19, r1
    5942:	51 f0       	breq	.+20     	; 0x5958 <malloc+0xa0>
    5944:	42 17       	cp	r20, r18
    5946:	53 07       	cpc	r21, r19
    5948:	38 f0       	brcs	.+14     	; 0x5958 <malloc+0xa0>
    594a:	a9 01       	movw	r20, r18
    594c:	db 01       	movw	r26, r22
    594e:	9a 01       	movw	r18, r20
    5950:	bd 01       	movw	r22, r26
    5952:	df 01       	movw	r26, r30
    5954:	f8 01       	movw	r30, r16
    5956:	c1 cf       	rjmp	.-126    	; 0x58da <malloc+0x22>
    5958:	ef 01       	movw	r28, r30
    595a:	f9 cf       	rjmp	.-14     	; 0x594e <malloc+0x96>
    595c:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <__flp+0x1>
    5960:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <__flp>
    5964:	cd cf       	rjmp	.-102    	; 0x5900 <malloc+0x48>
    5966:	fe 01       	movw	r30, r28
    5968:	e2 0f       	add	r30, r18
    596a:	f3 1f       	adc	r31, r19
    596c:	81 93       	st	Z+, r24
    596e:	91 93       	st	Z+, r25
    5970:	22 50       	subi	r18, 0x02	; 2
    5972:	31 09       	sbc	r19, r1
    5974:	39 83       	std	Y+1, r19	; 0x01
    5976:	28 83       	st	Y, r18
    5978:	d7 cf       	rjmp	.-82     	; 0x5928 <malloc+0x70>
    597a:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <__brkval>
    597e:	30 91 03 05 	lds	r19, 0x0503	; 0x800503 <__brkval+0x1>
    5982:	23 2b       	or	r18, r19
    5984:	41 f4       	brne	.+16     	; 0x5996 <malloc+0xde>
    5986:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_start>
    598a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_start+0x1>
    598e:	30 93 03 05 	sts	0x0503, r19	; 0x800503 <__brkval+0x1>
    5992:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <__brkval>
    5996:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_end>
    599a:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    599e:	21 15       	cp	r18, r1
    59a0:	31 05       	cpc	r19, r1
    59a2:	41 f4       	brne	.+16     	; 0x59b4 <malloc+0xfc>
    59a4:	2d b7       	in	r18, 0x3d	; 61
    59a6:	3e b7       	in	r19, 0x3e	; 62
    59a8:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    59ac:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    59b0:	24 1b       	sub	r18, r20
    59b2:	35 0b       	sbc	r19, r21
    59b4:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <__brkval>
    59b8:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <__brkval+0x1>
    59bc:	e2 17       	cp	r30, r18
    59be:	f3 07       	cpc	r31, r19
    59c0:	a0 f4       	brcc	.+40     	; 0x59ea <malloc+0x132>
    59c2:	2e 1b       	sub	r18, r30
    59c4:	3f 0b       	sbc	r19, r31
    59c6:	28 17       	cp	r18, r24
    59c8:	39 07       	cpc	r19, r25
    59ca:	78 f0       	brcs	.+30     	; 0x59ea <malloc+0x132>
    59cc:	ac 01       	movw	r20, r24
    59ce:	4e 5f       	subi	r20, 0xFE	; 254
    59d0:	5f 4f       	sbci	r21, 0xFF	; 255
    59d2:	24 17       	cp	r18, r20
    59d4:	35 07       	cpc	r19, r21
    59d6:	48 f0       	brcs	.+18     	; 0x59ea <malloc+0x132>
    59d8:	4e 0f       	add	r20, r30
    59da:	5f 1f       	adc	r21, r31
    59dc:	50 93 03 05 	sts	0x0503, r21	; 0x800503 <__brkval+0x1>
    59e0:	40 93 02 05 	sts	0x0502, r20	; 0x800502 <__brkval>
    59e4:	81 93       	st	Z+, r24
    59e6:	91 93       	st	Z+, r25
    59e8:	9f cf       	rjmp	.-194    	; 0x5928 <malloc+0x70>
    59ea:	f0 e0       	ldi	r31, 0x00	; 0
    59ec:	e0 e0       	ldi	r30, 0x00	; 0
    59ee:	9c cf       	rjmp	.-200    	; 0x5928 <malloc+0x70>

000059f0 <free>:
free():
    59f0:	cf 93       	push	r28
    59f2:	df 93       	push	r29
    59f4:	00 97       	sbiw	r24, 0x00	; 0
    59f6:	e9 f0       	breq	.+58     	; 0x5a32 <free+0x42>
    59f8:	fc 01       	movw	r30, r24
    59fa:	32 97       	sbiw	r30, 0x02	; 2
    59fc:	13 82       	std	Z+3, r1	; 0x03
    59fe:	12 82       	std	Z+2, r1	; 0x02
    5a00:	a0 91 04 05 	lds	r26, 0x0504	; 0x800504 <__flp>
    5a04:	b0 91 05 05 	lds	r27, 0x0505	; 0x800505 <__flp+0x1>
    5a08:	ed 01       	movw	r28, r26
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	20 e0       	ldi	r18, 0x00	; 0
    5a0e:	10 97       	sbiw	r26, 0x00	; 0
    5a10:	a1 f4       	brne	.+40     	; 0x5a3a <free+0x4a>
    5a12:	20 81       	ld	r18, Z
    5a14:	31 81       	ldd	r19, Z+1	; 0x01
    5a16:	82 0f       	add	r24, r18
    5a18:	93 1f       	adc	r25, r19
    5a1a:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <__brkval>
    5a1e:	30 91 03 05 	lds	r19, 0x0503	; 0x800503 <__brkval+0x1>
    5a22:	28 17       	cp	r18, r24
    5a24:	39 07       	cpc	r19, r25
    5a26:	09 f0       	breq	.+2      	; 0x5a2a <free+0x3a>
    5a28:	61 c0       	rjmp	.+194    	; 0x5aec <free+0xfc>
    5a2a:	f0 93 03 05 	sts	0x0503, r31	; 0x800503 <__brkval+0x1>
    5a2e:	e0 93 02 05 	sts	0x0502, r30	; 0x800502 <__brkval>
    5a32:	df 91       	pop	r29
    5a34:	cf 91       	pop	r28
    5a36:	08 95       	ret
    5a38:	ea 01       	movw	r28, r20
    5a3a:	ce 17       	cp	r28, r30
    5a3c:	df 07       	cpc	r29, r31
    5a3e:	e8 f5       	brcc	.+122    	; 0x5aba <free+0xca>
    5a40:	4a 81       	ldd	r20, Y+2	; 0x02
    5a42:	5b 81       	ldd	r21, Y+3	; 0x03
    5a44:	9e 01       	movw	r18, r28
    5a46:	41 15       	cp	r20, r1
    5a48:	51 05       	cpc	r21, r1
    5a4a:	b1 f7       	brne	.-20     	; 0x5a38 <free+0x48>
    5a4c:	e9 01       	movw	r28, r18
    5a4e:	fb 83       	std	Y+3, r31	; 0x03
    5a50:	ea 83       	std	Y+2, r30	; 0x02
    5a52:	49 91       	ld	r20, Y+
    5a54:	59 91       	ld	r21, Y+
    5a56:	c4 0f       	add	r28, r20
    5a58:	d5 1f       	adc	r29, r21
    5a5a:	ec 17       	cp	r30, r28
    5a5c:	fd 07       	cpc	r31, r29
    5a5e:	61 f4       	brne	.+24     	; 0x5a78 <free+0x88>
    5a60:	80 81       	ld	r24, Z
    5a62:	91 81       	ldd	r25, Z+1	; 0x01
    5a64:	02 96       	adiw	r24, 0x02	; 2
    5a66:	84 0f       	add	r24, r20
    5a68:	95 1f       	adc	r25, r21
    5a6a:	e9 01       	movw	r28, r18
    5a6c:	99 83       	std	Y+1, r25	; 0x01
    5a6e:	88 83       	st	Y, r24
    5a70:	82 81       	ldd	r24, Z+2	; 0x02
    5a72:	93 81       	ldd	r25, Z+3	; 0x03
    5a74:	9b 83       	std	Y+3, r25	; 0x03
    5a76:	8a 83       	std	Y+2, r24	; 0x02
    5a78:	f0 e0       	ldi	r31, 0x00	; 0
    5a7a:	e0 e0       	ldi	r30, 0x00	; 0
    5a7c:	12 96       	adiw	r26, 0x02	; 2
    5a7e:	8d 91       	ld	r24, X+
    5a80:	9c 91       	ld	r25, X
    5a82:	13 97       	sbiw	r26, 0x03	; 3
    5a84:	00 97       	sbiw	r24, 0x00	; 0
    5a86:	b9 f5       	brne	.+110    	; 0x5af6 <free+0x106>
    5a88:	2d 91       	ld	r18, X+
    5a8a:	3c 91       	ld	r19, X
    5a8c:	11 97       	sbiw	r26, 0x01	; 1
    5a8e:	cd 01       	movw	r24, r26
    5a90:	02 96       	adiw	r24, 0x02	; 2
    5a92:	82 0f       	add	r24, r18
    5a94:	93 1f       	adc	r25, r19
    5a96:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <__brkval>
    5a9a:	30 91 03 05 	lds	r19, 0x0503	; 0x800503 <__brkval+0x1>
    5a9e:	28 17       	cp	r18, r24
    5aa0:	39 07       	cpc	r19, r25
    5aa2:	39 f6       	brne	.-114    	; 0x5a32 <free+0x42>
    5aa4:	30 97       	sbiw	r30, 0x00	; 0
    5aa6:	51 f5       	brne	.+84     	; 0x5afc <free+0x10c>
    5aa8:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <__flp+0x1>
    5aac:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <__flp>
    5ab0:	b0 93 03 05 	sts	0x0503, r27	; 0x800503 <__brkval+0x1>
    5ab4:	a0 93 02 05 	sts	0x0502, r26	; 0x800502 <__brkval>
    5ab8:	bc cf       	rjmp	.-136    	; 0x5a32 <free+0x42>
    5aba:	d3 83       	std	Z+3, r29	; 0x03
    5abc:	c2 83       	std	Z+2, r28	; 0x02
    5abe:	40 81       	ld	r20, Z
    5ac0:	51 81       	ldd	r21, Z+1	; 0x01
    5ac2:	84 0f       	add	r24, r20
    5ac4:	95 1f       	adc	r25, r21
    5ac6:	c8 17       	cp	r28, r24
    5ac8:	d9 07       	cpc	r29, r25
    5aca:	61 f4       	brne	.+24     	; 0x5ae4 <free+0xf4>
    5acc:	4e 5f       	subi	r20, 0xFE	; 254
    5ace:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad0:	88 81       	ld	r24, Y
    5ad2:	99 81       	ldd	r25, Y+1	; 0x01
    5ad4:	48 0f       	add	r20, r24
    5ad6:	59 1f       	adc	r21, r25
    5ad8:	51 83       	std	Z+1, r21	; 0x01
    5ada:	40 83       	st	Z, r20
    5adc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ade:	9b 81       	ldd	r25, Y+3	; 0x03
    5ae0:	93 83       	std	Z+3, r25	; 0x03
    5ae2:	82 83       	std	Z+2, r24	; 0x02
    5ae4:	21 15       	cp	r18, r1
    5ae6:	31 05       	cpc	r19, r1
    5ae8:	09 f0       	breq	.+2      	; 0x5aec <free+0xfc>
    5aea:	b0 cf       	rjmp	.-160    	; 0x5a4c <free+0x5c>
    5aec:	f0 93 05 05 	sts	0x0505, r31	; 0x800505 <__flp+0x1>
    5af0:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <__flp>
    5af4:	9e cf       	rjmp	.-196    	; 0x5a32 <free+0x42>
    5af6:	fd 01       	movw	r30, r26
    5af8:	dc 01       	movw	r26, r24
    5afa:	c0 cf       	rjmp	.-128    	; 0x5a7c <free+0x8c>
    5afc:	13 82       	std	Z+3, r1	; 0x03
    5afe:	12 82       	std	Z+2, r1	; 0x02
    5b00:	d7 cf       	rjmp	.-82     	; 0x5ab0 <free+0xc0>

00005b02 <realloc>:
realloc():
    5b02:	b0 e0       	ldi	r27, 0x00	; 0
    5b04:	a0 e0       	ldi	r26, 0x00	; 0
    5b06:	e7 e8       	ldi	r30, 0x87	; 135
    5b08:	fd e2       	ldi	r31, 0x2D	; 45
    5b0a:	0c 94 b5 2b 	jmp	0x576a	; 0x576a <__prologue_saves__+0x4>
    5b0e:	8c 01       	movw	r16, r24
    5b10:	00 97       	sbiw	r24, 0x00	; 0
    5b12:	51 f4       	brne	.+20     	; 0x5b28 <realloc+0x26>
    5b14:	cb 01       	movw	r24, r22
    5b16:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <malloc>
    5b1a:	8c 01       	movw	r16, r24
    5b1c:	c8 01       	movw	r24, r16
    5b1e:	cd b7       	in	r28, 0x3d	; 61
    5b20:	de b7       	in	r29, 0x3e	; 62
    5b22:	e0 e1       	ldi	r30, 0x10	; 16
    5b24:	0c 94 d1 2b 	jmp	0x57a2	; 0x57a2 <__epilogue_restores__+0x4>
    5b28:	fc 01       	movw	r30, r24
    5b2a:	e6 0f       	add	r30, r22
    5b2c:	f7 1f       	adc	r31, r23
    5b2e:	9c 01       	movw	r18, r24
    5b30:	22 50       	subi	r18, 0x02	; 2
    5b32:	31 09       	sbc	r19, r1
    5b34:	e2 17       	cp	r30, r18
    5b36:	f3 07       	cpc	r31, r19
    5b38:	08 f4       	brcc	.+2      	; 0x5b3c <realloc+0x3a>
    5b3a:	9d c0       	rjmp	.+314    	; 0x5c76 <realloc+0x174>
    5b3c:	d9 01       	movw	r26, r18
    5b3e:	cd 91       	ld	r28, X+
    5b40:	dc 91       	ld	r29, X
    5b42:	11 97       	sbiw	r26, 0x01	; 1
    5b44:	c6 17       	cp	r28, r22
    5b46:	d7 07       	cpc	r29, r23
    5b48:	98 f0       	brcs	.+38     	; 0x5b70 <realloc+0x6e>
    5b4a:	c5 30       	cpi	r28, 0x05	; 5
    5b4c:	d1 05       	cpc	r29, r1
    5b4e:	30 f3       	brcs	.-52     	; 0x5b1c <realloc+0x1a>
    5b50:	ce 01       	movw	r24, r28
    5b52:	04 97       	sbiw	r24, 0x04	; 4
    5b54:	86 17       	cp	r24, r22
    5b56:	97 07       	cpc	r25, r23
    5b58:	08 f3       	brcs	.-62     	; 0x5b1c <realloc+0x1a>
    5b5a:	c6 1b       	sub	r28, r22
    5b5c:	d7 0b       	sbc	r29, r23
    5b5e:	22 97       	sbiw	r28, 0x02	; 2
    5b60:	c1 93       	st	Z+, r28
    5b62:	d1 93       	st	Z+, r29
    5b64:	6d 93       	st	X+, r22
    5b66:	7c 93       	st	X, r23
    5b68:	cf 01       	movw	r24, r30
    5b6a:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
    5b6e:	d6 cf       	rjmp	.-84     	; 0x5b1c <realloc+0x1a>
    5b70:	5b 01       	movw	r10, r22
    5b72:	ac 1a       	sub	r10, r28
    5b74:	bd 0a       	sbc	r11, r29
    5b76:	4c 01       	movw	r8, r24
    5b78:	8c 0e       	add	r8, r28
    5b7a:	9d 1e       	adc	r9, r29
    5b7c:	a0 91 04 05 	lds	r26, 0x0504	; 0x800504 <__flp>
    5b80:	b0 91 05 05 	lds	r27, 0x0505	; 0x800505 <__flp+0x1>
    5b84:	51 2c       	mov	r5, r1
    5b86:	41 2c       	mov	r4, r1
    5b88:	f1 2c       	mov	r15, r1
    5b8a:	e1 2c       	mov	r14, r1
    5b8c:	10 97       	sbiw	r26, 0x00	; 0
    5b8e:	31 f5       	brne	.+76     	; 0x5bdc <realloc+0xda>
    5b90:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <__brkval>
    5b94:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <__brkval+0x1>
    5b98:	88 15       	cp	r24, r8
    5b9a:	99 05       	cpc	r25, r9
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <realloc+0x9e>
    5b9e:	5c c0       	rjmp	.+184    	; 0x5c58 <realloc+0x156>
    5ba0:	46 16       	cp	r4, r22
    5ba2:	57 06       	cpc	r5, r23
    5ba4:	08 f0       	brcs	.+2      	; 0x5ba8 <realloc+0xa6>
    5ba6:	58 c0       	rjmp	.+176    	; 0x5c58 <realloc+0x156>
    5ba8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__malloc_heap_end>
    5bac:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    5bb0:	00 97       	sbiw	r24, 0x00	; 0
    5bb2:	41 f4       	brne	.+16     	; 0x5bc4 <realloc+0xc2>
    5bb4:	8d b7       	in	r24, 0x3d	; 61
    5bb6:	9e b7       	in	r25, 0x3e	; 62
    5bb8:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    5bbc:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    5bc0:	84 1b       	sub	r24, r20
    5bc2:	95 0b       	sbc	r25, r21
    5bc4:	e8 17       	cp	r30, r24
    5bc6:	f9 07       	cpc	r31, r25
    5bc8:	08 f0       	brcs	.+2      	; 0x5bcc <realloc+0xca>
    5bca:	55 c0       	rjmp	.+170    	; 0x5c76 <realloc+0x174>
    5bcc:	f0 93 03 05 	sts	0x0503, r31	; 0x800503 <__brkval+0x1>
    5bd0:	e0 93 02 05 	sts	0x0502, r30	; 0x800502 <__brkval>
    5bd4:	f9 01       	movw	r30, r18
    5bd6:	71 83       	std	Z+1, r23	; 0x01
    5bd8:	60 83       	st	Z, r22
    5bda:	a0 cf       	rjmp	.-192    	; 0x5b1c <realloc+0x1a>
    5bdc:	8d 91       	ld	r24, X+
    5bde:	9c 91       	ld	r25, X
    5be0:	11 97       	sbiw	r26, 0x01	; 1
    5be2:	12 96       	adiw	r26, 0x02	; 2
    5be4:	6c 90       	ld	r6, X
    5be6:	12 97       	sbiw	r26, 0x02	; 2
    5be8:	13 96       	adiw	r26, 0x03	; 3
    5bea:	7c 90       	ld	r7, X
    5bec:	13 97       	sbiw	r26, 0x03	; 3
    5bee:	a8 15       	cp	r26, r8
    5bf0:	b9 05       	cpc	r27, r9
    5bf2:	59 f5       	brne	.+86     	; 0x5c4a <realloc+0x148>
    5bf4:	6c 01       	movw	r12, r24
    5bf6:	42 e0       	ldi	r20, 0x02	; 2
    5bf8:	c4 0e       	add	r12, r20
    5bfa:	d1 1c       	adc	r13, r1
    5bfc:	ca 14       	cp	r12, r10
    5bfe:	db 04       	cpc	r13, r11
    5c00:	20 f1       	brcs	.+72     	; 0x5c4a <realloc+0x148>
    5c02:	ac 01       	movw	r20, r24
    5c04:	4a 19       	sub	r20, r10
    5c06:	5b 09       	sbc	r21, r11
    5c08:	da 01       	movw	r26, r20
    5c0a:	12 96       	adiw	r26, 0x02	; 2
    5c0c:	15 97       	sbiw	r26, 0x05	; 5
    5c0e:	80 f0       	brcs	.+32     	; 0x5c30 <realloc+0x12e>
    5c10:	62 82       	std	Z+2, r6	; 0x02
    5c12:	73 82       	std	Z+3, r7	; 0x03
    5c14:	51 83       	std	Z+1, r21	; 0x01
    5c16:	40 83       	st	Z, r20
    5c18:	d9 01       	movw	r26, r18
    5c1a:	6d 93       	st	X+, r22
    5c1c:	7c 93       	st	X, r23
    5c1e:	e1 14       	cp	r14, r1
    5c20:	f1 04       	cpc	r15, r1
    5c22:	71 f0       	breq	.+28     	; 0x5c40 <realloc+0x13e>
    5c24:	d7 01       	movw	r26, r14
    5c26:	13 96       	adiw	r26, 0x03	; 3
    5c28:	fc 93       	st	X, r31
    5c2a:	ee 93       	st	-X, r30
    5c2c:	12 97       	sbiw	r26, 0x02	; 2
    5c2e:	76 cf       	rjmp	.-276    	; 0x5b1c <realloc+0x1a>
    5c30:	22 96       	adiw	r28, 0x02	; 2
    5c32:	8c 0f       	add	r24, r28
    5c34:	9d 1f       	adc	r25, r29
    5c36:	f9 01       	movw	r30, r18
    5c38:	91 83       	std	Z+1, r25	; 0x01
    5c3a:	80 83       	st	Z, r24
    5c3c:	f3 01       	movw	r30, r6
    5c3e:	ef cf       	rjmp	.-34     	; 0x5c1e <realloc+0x11c>
    5c40:	f0 93 05 05 	sts	0x0505, r31	; 0x800505 <__flp+0x1>
    5c44:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <__flp>
    5c48:	69 cf       	rjmp	.-302    	; 0x5b1c <realloc+0x1a>
    5c4a:	48 16       	cp	r4, r24
    5c4c:	59 06       	cpc	r5, r25
    5c4e:	08 f4       	brcc	.+2      	; 0x5c52 <realloc+0x150>
    5c50:	2c 01       	movw	r4, r24
    5c52:	7d 01       	movw	r14, r26
    5c54:	d3 01       	movw	r26, r6
    5c56:	9a cf       	rjmp	.-204    	; 0x5b8c <realloc+0x8a>
    5c58:	cb 01       	movw	r24, r22
    5c5a:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <malloc>
    5c5e:	7c 01       	movw	r14, r24
    5c60:	00 97       	sbiw	r24, 0x00	; 0
    5c62:	49 f0       	breq	.+18     	; 0x5c76 <realloc+0x174>
    5c64:	ae 01       	movw	r20, r28
    5c66:	b8 01       	movw	r22, r16
    5c68:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <memcpy>
    5c6c:	c8 01       	movw	r24, r16
    5c6e:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <free>
    5c72:	87 01       	movw	r16, r14
    5c74:	53 cf       	rjmp	.-346    	; 0x5b1c <realloc+0x1a>
    5c76:	10 e0       	ldi	r17, 0x00	; 0
    5c78:	00 e0       	ldi	r16, 0x00	; 0
    5c7a:	50 cf       	rjmp	.-352    	; 0x5b1c <realloc+0x1a>

00005c7c <memcpy>:
memcpy():
    5c7c:	fb 01       	movw	r30, r22
    5c7e:	dc 01       	movw	r26, r24
    5c80:	02 c0       	rjmp	.+4      	; 0x5c86 <memcpy+0xa>
    5c82:	01 90       	ld	r0, Z+
    5c84:	0d 92       	st	X+, r0
    5c86:	41 50       	subi	r20, 0x01	; 1
    5c88:	50 40       	sbci	r21, 0x00	; 0
    5c8a:	d8 f7       	brcc	.-10     	; 0x5c82 <memcpy+0x6>
    5c8c:	08 95       	ret

00005c8e <strcat>:
strcat():
    5c8e:	fb 01       	movw	r30, r22
    5c90:	dc 01       	movw	r26, r24
    5c92:	0d 90       	ld	r0, X+
    5c94:	00 20       	and	r0, r0
    5c96:	e9 f7       	brne	.-6      	; 0x5c92 <strcat+0x4>
    5c98:	11 97       	sbiw	r26, 0x01	; 1
    5c9a:	01 90       	ld	r0, Z+
    5c9c:	0d 92       	st	X+, r0
    5c9e:	00 20       	and	r0, r0
    5ca0:	e1 f7       	brne	.-8      	; 0x5c9a <strcat+0xc>
    5ca2:	08 95       	ret

00005ca4 <strcmp>:
strcmp():
    5ca4:	fb 01       	movw	r30, r22
    5ca6:	dc 01       	movw	r26, r24
    5ca8:	8d 91       	ld	r24, X+
    5caa:	01 90       	ld	r0, Z+
    5cac:	80 19       	sub	r24, r0
    5cae:	01 10       	cpse	r0, r1
    5cb0:	d9 f3       	breq	.-10     	; 0x5ca8 <strcmp+0x4>
    5cb2:	99 0b       	sbc	r25, r25
    5cb4:	08 95       	ret

00005cb6 <strcpy>:
strcpy():
    5cb6:	fb 01       	movw	r30, r22
    5cb8:	dc 01       	movw	r26, r24
    5cba:	01 90       	ld	r0, Z+
    5cbc:	0d 92       	st	X+, r0
    5cbe:	00 20       	and	r0, r0
    5cc0:	e1 f7       	brne	.-8      	; 0x5cba <strcpy+0x4>
    5cc2:	08 95       	ret

00005cc4 <strncpy>:
strncpy():
    5cc4:	fb 01       	movw	r30, r22
    5cc6:	dc 01       	movw	r26, r24
    5cc8:	41 50       	subi	r20, 0x01	; 1
    5cca:	50 40       	sbci	r21, 0x00	; 0
    5ccc:	48 f0       	brcs	.+18     	; 0x5ce0 <strncpy+0x1c>
    5cce:	01 90       	ld	r0, Z+
    5cd0:	0d 92       	st	X+, r0
    5cd2:	00 20       	and	r0, r0
    5cd4:	c9 f7       	brne	.-14     	; 0x5cc8 <strncpy+0x4>
    5cd6:	01 c0       	rjmp	.+2      	; 0x5cda <strncpy+0x16>
    5cd8:	1d 92       	st	X+, r1
    5cda:	41 50       	subi	r20, 0x01	; 1
    5cdc:	50 40       	sbci	r21, 0x00	; 0
    5cde:	e0 f7       	brcc	.-8      	; 0x5cd8 <strncpy+0x14>
    5ce0:	08 95       	ret

00005ce2 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    5ce2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    5ce4:	cb ef       	ldi	r28, 0xFB	; 251
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    5ce6:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    5ce8:	04 c0       	rjmp	.+8      	; 0x5cf2 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    5cea:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    5cec:	0e 94 4f 2c 	call	0x589e	; 0x589e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    5cf0:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    5cf2:	cc 3f       	cpi	r28, 0xFC	; 252
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    5cf4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    5cf6:	c9 f7       	brne	.-14     	; 0x5cea <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    5cf8:	f8 94       	cli

00005cfa <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    5cfa:	ff cf       	rjmp	.-2      	; 0x5cfa <__stop_program>
