
e:\Arduino\Arduino Git\ChantBellV3.2\build/ChantBellV3.2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__dtors_end>
       4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       c:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__vector_3>
      10:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__vector_3>
      14:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__vector_3>
      18:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      20:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      24:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      28:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      2c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      30:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      34:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      38:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      3c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      40:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__vector_16>
      44:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      48:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      4c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      50:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      54:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      58:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      5c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      60:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__vector_24>
      64:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 56       	subi	r20, 0x65	; 101
      6a:	45 20       	and	r4, r5
      6c:	53 4f       	sbci	r21, 0xF3	; 243
      6e:	4e 47       	sbci	r20, 0x7E	; 126
      70:	20 4e       	sbci	r18, 0xE0	; 224
      72:	6f 2e       	mov	r6, r31
	...

00000075 <sampleMenu_2_7_3>:
      75:	45 56 45 20 53 4f 4e 47 20 54 49 4d 45 00           EVE SONG TIME.

00000083 <sampleMenu_2_7_2>:
      83:	4d 4f 52 20 53 4f 4e 47 20 4e 6f 2e 00              MOR SONG No..

00000090 <sampleMenu_2_7_1>:
      90:	4d 4f 52 20 53 4f 4e 47 20 54 49 4d 45 00           MOR SONG TIME.

0000009e <sampleMenu_2_6_2>:
      9e:	50 4c 41 59 00                                      PLAY.

000000a3 <sampleMenu_2_6_1>:
      a3:	53 45 4c 45 43 54 20 54 49 4d 45 00                 SELECT TIME.

000000af <sampleMenu_4_4>:
      af:	50 4c 59 52 20 45 56 45 20 44 55 52 00              PLYR EVE DUR.

000000bc <sampleMenu_4_3>:
      bc:	50 4c 59 52 20 45 56 45 20 4f 4e 20 54 49 4d 00     PLYR EVE ON TIM.

000000cc <sampleMenu_4_2>:
      cc:	50 4c 59 52 20 4d 4f 52 20 44 55 52 00              PLYR MOR DUR.

000000d9 <sampleMenu_4_1>:
      d9:	50 4c 59 52 20 4d 4f 52 20 4f 4e 20 54 49 4d 00     PLYR MOR ON TIM.

000000e9 <sampleMenu_3_2>:
      e9:	4c 49 47 48 54 20 4f 46 46 20 54 49 4d 45 00        LIGHT OFF TIME.

000000f8 <sampleMenu_3_1>:
      f8:	4c 49 47 48 54 20 4f 4e 20 54 49 4d 45 00           LIGHT ON TIME.

00000106 <sampleMenu_List_2_7>:
     106:	0f 90 00 00 00 00 11 83 00 00 00 00 10 75 00 00     .............u..
     116:	00 00 12 68 00 00 00 00 00 7f 01 00 00 00           ...h..........

00000124 <sampleMenu_2_7>:
     124:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

00000131 <sampleMenu_List_2_6>:
     131:	0c a3 00 00 00 00 0d 9e 00 00 00 00 00 7f 01 00     ................
	...

00000143 <sampleMenu_2_6>:
     143:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

0000014d <sampleMenu_2_8>:
     14d:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000159 <sampleMenu_2_5>:
     159:	56 4f 4c 55 4d 45 00                                VOLUME.

00000160 <sampleMenu_2_3>:
     160:	53 4f 4e 47 20 43 4f 55 4e 54 00                    SONG COUNT.

0000016b <sampleMenu_2_2>:
     16b:	45 4e 44 20 54 49 4d 45 00                          END TIME.

00000174 <sampleMenu_2_1>:
     174:	53 54 41 52 54 20 54 49 4d 45 00                    START TIME.

0000017f <sampleMenu_back>:
     17f:	42 41 43 4b 00                                      BACK.

00000184 <sampleMenu_1_2>:
     184:	53 45 54 20 54 49 4d 45 00                          SET TIME.

0000018d <sampleMenu_1_1>:
     18d:	53 45 54 20 44 41 54 45 00                          SET DATE.

00000196 <configMenu_2>:
     196:	53 45 54 20 59 45 41 52 00                          SET YEAR.

0000019f <configMenu_1>:
     19f:	53 45 54 20 53 45 52 49 41 4c 00                    SET SERIAL.

000001aa <sampleMenu_List_5>:
     1aa:	05 74 01 00 00 00 06 6b 01 00 00 00 0b 43 01 31     .t.....k.....C.1
     1ba:	01 03 09 59 01 00 00 00 0a 4d 01 00 00 00 00 7f     ...Y.....M......
     1ca:	01 00 00 00                                         ....

000001ce <sampleMenu_5>:
     1ce:	43 4c 4f 43 4b 20 53 45 54 54 49 4e 47 00           CLOCK SETTING.

000001dc <sampleMenu_exit>:
     1dc:	45 58 49 54 00                                      EXIT.

000001e1 <sampleMenu_6>:
     1e1:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

000001ef <sampleMenu_List_4>:
     1ef:	18 d9 00 00 00 00 19 cc 00 00 00 00 1a bc 00 00     ................
     1ff:	00 00 1b af 00 00 00 00 00 7f 01 00 00 00           ..............

0000020d <sampleMenu_4>:
     20d:	50 4c 41 59 45 52 20 53 45 54 54 49 4e 47 00        PLAYER SETTING.

0000021c <sampleMenu_List_3>:
     21c:	15 f8 00 00 00 00 16 e9 00 00 00 00 00 7f 01 00     ................
	...

0000022e <sampleMenu_3>:
     22e:	4c 49 47 48 54 53 20 53 45 54 54 49 4e 47 00        LIGHTS SETTING.

0000023d <sampleMenu_List_2>:
     23d:	05 74 01 00 00 00 06 6b 01 00 00 00 07 60 01 00     .t.....k.....`..
     24d:	00 00 09 59 01 00 00 00 0a 4d 01 00 00 00 0b 43     ...Y.....M.....C
     25d:	01 31 01 03 0e 24 01 06 01 05 00 7f 01 00 00 00     .1...$..........

0000026d <sampleMenu_2>:
     26d:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

0000027a <sampleMenu_List_1>:
     27a:	02 8d 01 00 00 00 03 84 01 00 00 00 00 7f 01 00     ................
	...

0000028c <sampleMenu_1>:
     28c:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

0000029a <port_to_mode_PGM>:
     29a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002a4 <digital_pin_to_timer_PGM>:
     2a4:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     2b4:	00 00 00 00 00 00 00                                .......

000002bb <configMenu_Root>:
     2bb:	1e 9f 01 00 00 00 1d 96 01 00 00 00 00 dc 01 00     ................
	...

000002cd <normalMenu_Root>:
     2cd:	14 2e 02 1c 02 03 17 0d 02 ef 01 05 01 8c 02 7a     ...............z
     2dd:	02 03 1c ce 01 aa 01 06 00 dc 01 00 00 00           ..............

000002eb <serviceMenu_Root>:
     2eb:	01 8c 02 7a 02 03 04 6d 02 3d 02 08 14 2e 02 1c     ...z...m.=......
     2fb:	02 03 17 0d 02 ef 01 05 13 e1 01 00 00 00 00 dc     ................
     30b:	01 00 00 00                                         ....

0000030f <setup::__c>:
     30f:	45 52 52 20 30 33 00                                ERR 03.

00000316 <setup::__c>:
     316:	45 52 52 20 30 32 00                                ERR 02.

0000031d <setup::__c>:
     31d:	45 52 52 20 30 31 00                                ERR 01.

00000324 <setup::__c>:
     324:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

00000335 <setup::__c>:
     335:	51 54 52 4f 4e 00                                   QTRON.

0000033b <processMenuCommand(unsigned char)::__c>:
     33b:	20 20 00                                              .

0000033e <processMenuCommand(unsigned char)::__c>:
     33e:	20 20 00                                              .

00000341 <loop::__c>:
     341:	20 50 4c 41 59 45 52 20 4d 4f 44 45 20 4f 4e 20      PLAYER MODE ON 
	...

00000352 <loop::__c>:
     352:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

00000363 <loop::__c>:
     363:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 46 46 20      AUTO LIGHT OFF 
	...

00000374 <loop::__c>:
     374:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 4e 20 20      AUTO LIGHT ON  
	...

00000385 <loop::__c>:
     385:	20 41 55 54 4f 20 50 4c 41 59 20 4f 46 46 20 20      AUTO PLAY OFF  
	...

00000396 <loop::__c>:
     396:	20 20 41 55 54 4f 20 50 4c 41 59 20 4f 4e 20 20       AUTO PLAY ON  
	...

000003a7 <daysInMonth>:
     3a7:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000003b2 <port_to_input_PGM>:
     3b2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003bc <port_to_output_PGM>:
     3bc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003c6 <digital_pin_to_port_PGM>:
     3c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3d6:	03 03 03 03 02 02 03                                .......

000003dd <digital_pin_to_bit_mask_PGM>:
     3dd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3ed:	04 08 10 20 40 80 40                                ... @.@

000003f4 <__ctors_start>:
__ctors_start():
     3f4:	6c 13       	cpse	r22, r28

000003f6 <__ctors_end>:
__dtors_start():
     3f6:	ff 28       	or	r15, r15

000003f8 <__dtors_end>:
__dtors_end():
     3f8:	11 24       	eor	r1, r1
     3fa:	1f be       	out	0x3f, r1	; 63
     3fc:	cf ef       	ldi	r28, 0xFF	; 255
     3fe:	d8 e0       	ldi	r29, 0x08	; 8
     400:	de bf       	out	0x3e, r29	; 62
     402:	cd bf       	out	0x3d, r28	; 61

00000404 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     404:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     406:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     408:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     40a:	ee e5       	ldi	r30, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     40c:	fa e5       	ldi	r31, 0x5A	; 90
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     410:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     412:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     414:	ae 34       	cpi	r26, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     416:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     418:	d9 f7       	brne	.-10     	; 0x410 <__do_copy_data+0xc>

0000041a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     41a:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     41c:	ae e4       	ldi	r26, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     41e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     420:	01 c0       	rjmp	.+2      	; 0x424 <.do_clear_bss_start>

00000422 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     422:	1d 92       	st	X+, r1

00000424 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     424:	a4 30       	cpi	r26, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     426:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     428:	e1 f7       	brne	.-8      	; 0x422 <.do_clear_bss_loop>

0000042a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     42a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     42c:	cb ef       	ldi	r28, 0xFB	; 251
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     42e:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     430:	04 c0       	rjmp	.+8      	; 0x43a <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     432:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     434:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     436:	0e 94 00 2b 	call	0x5600	; 0x5600 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     43a:	ca 3f       	cpi	r28, 0xFA	; 250
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     43c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     43e:	c9 f7       	brne	.-14     	; 0x432 <__do_global_ctors+0x8>
     440:	0e 94 81 14 	call	0x2902	; 0x2902 <main>
     444:	0c 94 22 2d 	jmp	0x5a44	; 0x5a44 <__do_global_dtors>

00000448 <__bad_interrupt>:
__vector_22():
     448:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044c <MenuManager::currentItemHasChildren() [clone .constprop.96]>:
currentItemHasChildren():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     44c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <Menu1+0x6>
     450:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <Menu1+0x3>
     454:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <Menu1+0x4>
     458:	96 e0       	ldi	r25, 0x06	; 6
     45a:	89 9f       	mul	r24, r25
     45c:	e0 0d       	add	r30, r0
     45e:	f1 1d       	adc	r31, r1
     460:	11 24       	eor	r1, r1
     462:	35 96       	adiw	r30, 0x05	; 5
     464:	e4 91       	lpm	r30, Z
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	e1 11       	cpse	r30, r1
     46a:	01 c0       	rjmp	.+2      	; 0x46e <MenuManager::currentItemHasChildren() [clone .constprop.96]+0x22>
     46c:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:116
}
     46e:	08 95       	ret

00000470 <TwoWire::endTransmission() [clone .constprop.83]>:
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     470:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     476:	21 32       	cpi	r18, 0x21	; 33
     478:	08 f0       	brcs	.+2      	; 0x47c <TwoWire::endTransmission() [clone .constprop.83]+0xc>
     47a:	44 c0       	rjmp	.+136    	; 0x504 <TwoWire::endTransmission() [clone .constprop.83]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     47c:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_state>
     480:	81 11       	cpse	r24, r1
     482:	fc cf       	rjmp	.-8      	; 0x47c <TwoWire::endTransmission() [clone .constprop.83]+0xc>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     484:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     494:	9f ef       	ldi	r25, 0xFF	; 255
     496:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     49a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     49e:	20 93 85 03 	sts	0x0385, r18	; 0x800385 <twi_masterBufferLength>
     4a2:	ac e8       	ldi	r26, 0x8C	; 140
     4a4:	b3 e0       	ldi	r27, 0x03	; 3
     4a6:	e5 e6       	ldi	r30, 0x65	; 101
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     4aa:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     4ac:	29 13       	cpse	r18, r25
     4ae:	31 c0       	rjmp	.+98     	; 0x512 <TwoWire::endTransmission() [clone .constprop.83]+0xa2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     4b0:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     4b4:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <twi_slarw>
     4b8:	88 0f       	add	r24, r24
     4ba:	89 2b       	or	r24, r25
     4bc:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     4c0:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <twi_inRepStart>
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	49 f5       	brne	.+82     	; 0x51a <TwoWire::endTransmission() [clone .constprop.83]+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     4c8:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     4cc:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <twi_slarw>
     4d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     4d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     4d8:	83 fd       	sbrc	r24, 3
     4da:	f8 cf       	rjmp	.-16     	; 0x4cc <TwoWire::endTransmission() [clone .constprop.83]+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     4dc:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     4de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     4e2:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_state>
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	e1 f3       	breq	.-8      	; 0x4e2 <TwoWire::endTransmission() [clone .constprop.83]+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     4ea:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_error>
     4ee:	8f 3f       	cpi	r24, 0xFF	; 255
     4f0:	b1 f0       	breq	.+44     	; 0x51e <TwoWire::endTransmission() [clone .constprop.83]+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     4f2:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_error>
     4f6:	80 32       	cpi	r24, 0x20	; 32
     4f8:	a1 f0       	breq	.+40     	; 0x522 <TwoWire::endTransmission() [clone .constprop.83]+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     4fa:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_error>
     4fe:	80 33       	cpi	r24, 0x30	; 48
     500:	91 f0       	breq	.+36     	; 0x526 <TwoWire::endTransmission() [clone .constprop.83]+0xb6>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     502:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     504:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     508:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     50c:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:191
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     510:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     512:	3d 91       	ld	r19, X+
     514:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     516:	9f 5f       	subi	r25, 0xFF	; 255
     518:	c9 cf       	rjmp	.-110    	; 0x4ac <TwoWire::endTransmission() [clone .constprop.83]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     51a:	85 ee       	ldi	r24, 0xE5	; 229
     51c:	e0 cf       	rjmp	.-64     	; 0x4de <TwoWire::endTransmission() [clone .constprop.83]+0x6e>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	f1 cf       	rjmp	.-30     	; 0x504 <TwoWire::endTransmission() [clone .constprop.83]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	ef cf       	rjmp	.-34     	; 0x504 <TwoWire::endTransmission() [clone .constprop.83]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	ed cf       	rjmp	.-38     	; 0x504 <TwoWire::endTransmission() [clone .constprop.83]+0x94>

0000052a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>:
getCurrentItemCmdId():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     52a:	e9 e3       	ldi	r30, 0x39	; 57
     52c:	f4 e0       	ldi	r31, 0x04	; 4
     52e:	86 81       	ldd	r24, Z+6	; 0x06
     530:	03 80       	ldd	r0, Z+3	; 0x03
     532:	f4 81       	ldd	r31, Z+4	; 0x04
     534:	e0 2d       	mov	r30, r0
     536:	96 e0       	ldi	r25, 0x06	; 6
     538:	89 9f       	mul	r24, r25
     53a:	e0 0d       	add	r30, r0
     53c:	f1 1d       	adc	r31, r1
     53e:	11 24       	eor	r1, r1
     540:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:60
}
     542:	08 95       	ret

00000544 <TwoWire::onRequestService()>:
onRequestService():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     544:	08 95       	ret

00000546 <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     546:	08 95       	ret

00000548 <DateTime::dayOfTheWeek() const [clone .constprop.19]>:
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:578
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     548:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <bell+0x1>
     54c:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <bell>
     550:	49 2f       	mov	r20, r25
     552:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:134
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     554:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <bell+0x2>
     558:	28 2f       	mov	r18, r24
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	e7 ea       	ldi	r30, 0xA7	; 167
     55e:	f3 e0       	ldi	r31, 0x03	; 3
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:135
  for (uint8_t i = 1; i < m; ++i)
     560:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     562:	86 17       	cp	r24, r22
     564:	30 f4       	brcc	.+12     	; 0x572 <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:136
    days += pgm_read_byte(daysInMonth + i - 1);
     566:	74 91       	lpm	r23, Z
     568:	27 0f       	add	r18, r23
     56a:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:135
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	31 96       	adiw	r30, 0x01	; 1
     570:	f8 cf       	rjmp	.-16     	; 0x562 <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:137
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     572:	63 30       	cpi	r22, 0x03	; 3
     574:	20 f0       	brcs	.+8      	; 0x57e <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x36>
     576:	93 70       	andi	r25, 0x03	; 3
     578:	11 f4       	brne	.+4      	; 0x57e <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:138
    ++days;
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:139
  return days + 365 * y + (y + 3) / 4 - 1;
     57e:	6d e6       	ldi	r22, 0x6D	; 109
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	46 9f       	mul	r20, r22
     584:	c0 01       	movw	r24, r0
     586:	47 9f       	mul	r20, r23
     588:	90 0d       	add	r25, r0
     58a:	56 9f       	mul	r21, r22
     58c:	90 0d       	add	r25, r0
     58e:	11 24       	eor	r1, r1
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:579
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     590:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:139
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     592:	4d 5f       	subi	r20, 0xFD	; 253
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	56 95       	lsr	r21
     598:	47 95       	ror	r20
     59a:	56 95       	lsr	r21
     59c:	47 95       	ror	r20
dayOfTheWeek():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:579
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     59e:	84 0f       	add	r24, r20
     5a0:	95 1f       	adc	r25, r21
     5a2:	82 0f       	add	r24, r18
     5a4:	93 1f       	adc	r25, r19
     5a6:	67 e0       	ldi	r22, 0x07	; 7
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:580
}
     5ae:	08 95       	ret

000005b0 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	6c 01       	movw	r12, r24
     5c6:	7b 01       	movw	r14, r22
     5c8:	8b 01       	movw	r16, r22
     5ca:	04 0f       	add	r16, r20
     5cc:	15 1f       	adc	r17, r21
     5ce:	eb 01       	movw	r28, r22
     5d0:	5e 01       	movw	r10, r28
     5d2:	ae 18       	sub	r10, r14
     5d4:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     5d6:	c0 17       	cp	r28, r16
     5d8:	d1 07       	cpc	r29, r17
     5da:	59 f0       	breq	.+22     	; 0x5f2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     5dc:	69 91       	ld	r22, Y+
     5de:	d6 01       	movw	r26, r12
     5e0:	ed 91       	ld	r30, X+
     5e2:	fc 91       	ld	r31, X
     5e4:	01 90       	ld	r0, Z+
     5e6:	f0 81       	ld	r31, Z
     5e8:	e0 2d       	mov	r30, r0
     5ea:	c6 01       	movw	r24, r12
     5ec:	09 95       	icall
     5ee:	89 2b       	or	r24, r25
     5f0:	79 f7       	brne	.-34     	; 0x5d0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5f2:	c5 01       	movw	r24, r10
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	08 95       	ret

0000060a <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	81 f0       	breq	.+32     	; 0x62e <turnOffPWM+0x24>
     60e:	28 f4       	brcc	.+10     	; 0x61a <turnOffPWM+0x10>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	e9 f0       	breq	.+58     	; 0x64e <turnOffPWM+0x44>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	f9 f0       	breq	.+62     	; 0x656 <turnOffPWM+0x4c>
     618:	08 95       	ret
     61a:	88 30       	cpi	r24, 0x08	; 8
     61c:	71 f0       	breq	.+28     	; 0x63a <turnOffPWM+0x30>
     61e:	89 30       	cpi	r24, 0x09	; 9
     620:	91 f0       	breq	.+36     	; 0x646 <turnOffPWM+0x3c>
     622:	85 30       	cpi	r24, 0x05	; 5
     624:	b9 f4       	brne	.+46     	; 0x654 <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     626:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     62a:	8f 7d       	andi	r24, 0xDF	; 223
     62c:	03 c0       	rjmp	.+6      	; 0x634 <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     62e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     632:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     634:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     638:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     63a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     63e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     640:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     644:	08 95       	ret
     646:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     64a:	8f 7d       	andi	r24, 0xDF	; 223
     64c:	f9 cf       	rjmp	.-14     	; 0x640 <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     64e:	84 b5       	in	r24, 0x24	; 36
     650:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     652:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     654:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     656:	84 b5       	in	r24, 0x24	; 36
     658:	8f 7d       	andi	r24, 0xDF	; 223
     65a:	fb cf       	rjmp	.-10     	; 0x652 <turnOffPWM+0x48>

0000065c <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	ec 55       	subi	r30, 0x5C	; 92
     668:	fd 4f       	sbci	r31, 0xFD	; 253
     66a:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     66c:	f9 01       	movw	r30, r18
     66e:	e3 52       	subi	r30, 0x23	; 35
     670:	fc 4f       	sbci	r31, 0xFC	; 252
     672:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     674:	f9 01       	movw	r30, r18
     676:	ea 53       	subi	r30, 0x3A	; 58
     678:	fc 4f       	sbci	r31, 0xFC	; 252
     67a:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     67c:	cc 23       	and	r28, r28
     67e:	a1 f0       	breq	.+40     	; 0x6a8 <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     680:	81 11       	cpse	r24, r1
     682:	0e 94 05 03 	call	0x60a	; 0x60a <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     686:	ec 2f       	mov	r30, r28
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 54       	subi	r30, 0x4E	; 78
     690:	fc 4f       	sbci	r31, 0xFC	; 252
     692:	a5 91       	lpm	r26, Z+
     694:	b4 91       	lpm	r27, Z
     696:	ec 91       	ld	r30, X
     698:	ed 23       	and	r30, r29
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	09 f4       	brne	.+2      	; 0x6a2 <digitalRead+0x46>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fa cf       	rjmp	.-12     	; 0x6a2 <digitalRead+0x46>

000006ae <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	ec 55       	subi	r30, 0x5C	; 92
     6bc:	fd 4f       	sbci	r31, 0xFD	; 253
     6be:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     6c0:	f9 01       	movw	r30, r18
     6c2:	e3 52       	subi	r30, 0x23	; 35
     6c4:	fc 4f       	sbci	r31, 0xFC	; 252
     6c6:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     6c8:	f9 01       	movw	r30, r18
     6ca:	ea 53       	subi	r30, 0x3A	; 58
     6cc:	fc 4f       	sbci	r31, 0xFC	; 252
     6ce:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     6d0:	cc 23       	and	r28, r28
     6d2:	a9 f0       	breq	.+42     	; 0x6fe <digitalWrite+0x50>
     6d4:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6d6:	81 11       	cpse	r24, r1
     6d8:	0e 94 05 03 	call	0x60a	; 0x60a <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     6dc:	ec 2f       	mov	r30, r28
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	e4 54       	subi	r30, 0x44	; 68
     6e6:	fc 4f       	sbci	r31, 0xFC	; 252
     6e8:	a5 91       	lpm	r26, Z+
     6ea:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     6ec:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     6ee:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     6f0:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     6f2:	11 11       	cpse	r17, r1
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     6f6:	d0 95       	com	r29
     6f8:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     6fa:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     6fc:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     706:	de 2b       	or	r29, r30
     708:	f8 cf       	rjmp	.-16     	; 0x6fa <digitalWrite+0x4c>

0000070a <TwoWire::begin() [clone .constprop.40]>:
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     70a:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     70e:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     712:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     716:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     71a:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     724:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	82 e1       	ldi	r24, 0x12	; 18
     72c:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	83 e1       	ldi	r24, 0x13	; 19
     734:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     738:	e9 eb       	ldi	r30, 0xB9	; 185
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	8e 7f       	andi	r24, 0xFE	; 254
     740:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     742:	80 81       	ld	r24, Z
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     748:	88 e4       	ldi	r24, 0x48	; 72
     74a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     74e:	85 e4       	ldi	r24, 0x45	; 69
     750:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     754:	82 ea       	ldi	r24, 0xA2	; 162
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <twi_onSlaveTransmit+0x1>
     75c:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     760:	83 ea       	ldi	r24, 0xA3	; 163
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <twi_onSlaveReceive+0x1>
     768:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_onSlaveReceive>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     76c:	08 95       	ret

0000076e <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	fc 01       	movw	r30, r24
     776:	e3 52       	subi	r30, 0x23	; 35
     778:	fc 4f       	sbci	r31, 0xFC	; 252
     77a:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     77c:	8a 53       	subi	r24, 0x3A	; 58
     77e:	9c 4f       	sbci	r25, 0xFC	; 252
     780:	fc 01       	movw	r30, r24
     782:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     784:	88 23       	and	r24, r24
     786:	c9 f0       	breq	.+50     	; 0x7ba <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	fc 01       	movw	r30, r24
     790:	e6 56       	subi	r30, 0x66	; 102
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	a5 91       	lpm	r26, Z+
     796:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     798:	fc 01       	movw	r30, r24
     79a:	e4 54       	subi	r30, 0x44	; 68
     79c:	fc 4f       	sbci	r31, 0xFC	; 252
     79e:	c5 91       	lpm	r28, Z+
     7a0:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     7a2:	61 11       	cpse	r22, r1
     7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     7a6:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     7a8:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     7aa:	8c 91       	ld	r24, X
     7ac:	20 95       	com	r18
     7ae:	82 23       	and	r24, r18
     7b0:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     7b2:	88 81       	ld	r24, Y
     7b4:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     7b6:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     7b8:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     7c0:	62 30       	cpi	r22, 0x02	; 2
     7c2:	51 f4       	brne	.+20     	; 0x7d8 <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     7c4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     7c6:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     7c8:	3c 91       	ld	r19, X
     7ca:	82 2f       	mov	r24, r18
     7cc:	80 95       	com	r24
     7ce:	83 23       	and	r24, r19
     7d0:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     7d2:	e8 81       	ld	r30, Y
     7d4:	2e 2b       	or	r18, r30
     7d6:	ef cf       	rjmp	.-34     	; 0x7b6 <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     7d8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     7da:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     7dc:	ec 91       	ld	r30, X
     7de:	2e 2b       	or	r18, r30
     7e0:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     7e2:	8f bf       	out	0x3f, r24	; 63
     7e4:	ea cf       	rjmp	.-44     	; 0x7ba <pinMode+0x4c>

000007e6 <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	39 f0       	breq	.+14     	; 0x7fa <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     7f4:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     7fa:	08 95       	ret

000007fc <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     7fc:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     7fe:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     800:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <timer0_overflow_count>
     804:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x1>
     808:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x2>
     80c:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     810:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     812:	a8 9b       	sbis	0x15, 0	; 21
     814:	05 c0       	rjmp	.+10     	; 0x820 <micros+0x24>
     816:	2f 3f       	cpi	r18, 0xFF	; 255
     818:	19 f0       	breq	.+6      	; 0x820 <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	a1 1d       	adc	r26, r1
     81e:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     820:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     822:	ba 2f       	mov	r27, r26
     824:	a9 2f       	mov	r26, r25
     826:	98 2f       	mov	r25, r24
     828:	88 27       	eor	r24, r24
     82a:	bc 01       	movw	r22, r24
     82c:	cd 01       	movw	r24, r26
     82e:	62 0f       	add	r22, r18
     830:	71 1d       	adc	r23, r1
     832:	81 1d       	adc	r24, r1
     834:	91 1d       	adc	r25, r1
     836:	42 e0       	ldi	r20, 0x02	; 2
     838:	66 0f       	add	r22, r22
     83a:	77 1f       	adc	r23, r23
     83c:	88 1f       	adc	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	4a 95       	dec	r20
     842:	d1 f7       	brne	.-12     	; 0x838 <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     844:	08 95       	ret

00000846 <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     846:	8f 92       	push	r8
     848:	9f 92       	push	r9
     84a:	af 92       	push	r10
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     85a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <micros>
     85e:	4b 01       	movw	r8, r22
     860:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     862:	c1 14       	cp	r12, r1
     864:	d1 04       	cpc	r13, r1
     866:	e1 04       	cpc	r14, r1
     868:	f1 04       	cpc	r15, r1
     86a:	b9 f0       	breq	.+46     	; 0x89a <delay+0x54>
     86c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <micros>
     870:	68 19       	sub	r22, r8
     872:	79 09       	sbc	r23, r9
     874:	8a 09       	sbc	r24, r10
     876:	9b 09       	sbc	r25, r11
     878:	68 3e       	cpi	r22, 0xE8	; 232
     87a:	73 40       	sbci	r23, 0x03	; 3
     87c:	81 05       	cpc	r24, r1
     87e:	91 05       	cpc	r25, r1
     880:	80 f3       	brcs	.-32     	; 0x862 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	c2 1a       	sub	r12, r18
     886:	d1 08       	sbc	r13, r1
     888:	e1 08       	sbc	r14, r1
     88a:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     88c:	88 ee       	ldi	r24, 0xE8	; 232
     88e:	88 0e       	add	r8, r24
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	98 1e       	adc	r9, r24
     894:	a1 1c       	adc	r10, r1
     896:	b1 1c       	adc	r11, r1
     898:	e4 cf       	rjmp	.-56     	; 0x862 <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	8f 90       	pop	r8
     8aa:	08 95       	ret

000008ac <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     8ac:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     8ae:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     8b0:	60 91 d3 02 	lds	r22, 0x02D3	; 0x8002d3 <timer0_millis>
     8b4:	70 91 d4 02 	lds	r23, 0x02D4	; 0x8002d4 <timer0_millis+0x1>
     8b8:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timer0_millis+0x2>
     8bc:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     8c0:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     8c2:	08 95       	ret

000008c4 <DFRobotDFPlayerMini::available() [clone .constprop.63]>:
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     8c8:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <myDFPlayer>
     8cc:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <myDFPlayer+0x1>
     8d0:	dc 01       	movw	r26, r24
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	00 84       	ldd	r0, Z+8	; 0x08
     8d8:	f1 85       	ldd	r31, Z+9	; 0x09
     8da:	e0 2d       	mov	r30, r0
     8dc:	09 95       	icall
     8de:	89 2b       	or	r24, r25
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x20>
     8e2:	d7 c0       	rjmp	.+430    	; 0xa92 <__stack+0x193>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	cb 01       	movw	r24, r22
     8ea:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     8ee:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <myDFPlayer+0x1e>
     8f2:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <myDFPlayer>
     8f6:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     8fa:	dc 01       	movw	r26, r24
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	02 84       	ldd	r0, Z+10	; 0x0a
     902:	f3 85       	ldd	r31, Z+11	; 0x0b
     904:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     906:	21 11       	cpse	r18, r1
     908:	0b c0       	rjmp	.+22     	; 0x920 <__stack+0x21>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     90a:	09 95       	icall
     90c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     910:	8e 37       	cpi	r24, 0x7E	; 126
     912:	d1 f6       	brne	.-76     	; 0x8c8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     914:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <myDFPlayer+0x1e>
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <myDFPlayer+0x1e>
     91e:	d4 cf       	rjmp	.-88     	; 0x8c8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     920:	09 95       	icall
     922:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <myDFPlayer+0x1e>
     926:	e9 2f       	mov	r30, r25
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	e5 54       	subi	r30, 0x45	; 69
     92c:	fb 4f       	sbci	r31, 0xFB	; 251
     92e:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     930:	92 30       	cpi	r25, 0x02	; 2
     932:	b9 f0       	breq	.+46     	; 0x962 <__stack+0x63>
     934:	99 30       	cpi	r25, 0x09	; 9
     936:	d9 f0       	breq	.+54     	; 0x96e <__stack+0x6f>
     938:	91 30       	cpi	r25, 0x01	; 1
     93a:	a9 f4       	brne	.+42     	; 0x966 <__stack+0x67>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     93c:	8f 3f       	cpi	r24, 0xFF	; 255
     93e:	99 f0       	breq	.+38     	; 0x966 <__stack+0x67>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     940:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     94a:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <myDFPlayer+0x23>
     94e:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     952:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     956:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <myDFPlayer+0x25>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     95a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     962:	86 30       	cpi	r24, 0x06	; 6
     964:	69 f7       	brne	.-38     	; 0x940 <__stack+0x41>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     966:	9f 5f       	subi	r25, 0xFF	; 255
     968:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <myDFPlayer+0x1e>
     96c:	ad cf       	rjmp	.-166    	; 0x8c8 <DFRobotDFPlayerMini::available() [clone .constprop.63]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     96e:	8f 3e       	cpi	r24, 0xEF	; 239
     970:	39 f7       	brne	.-50     	; 0x940 <__stack+0x41>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     972:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <myDFPlayer+0xc>
     976:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <myDFPlayer+0xb>
     97a:	28 0f       	add	r18, r24
     97c:	33 27       	eor	r19, r19
     97e:	33 1f       	adc	r19, r19
     980:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <myDFPlayer+0xd>
     984:	c9 01       	movw	r24, r18
     986:	8e 0f       	add	r24, r30
     988:	91 1d       	adc	r25, r1
     98a:	20 91 c9 04 	lds	r18, 0x04C9	; 0x8004c9 <myDFPlayer+0xe>
     98e:	28 0f       	add	r18, r24
     990:	39 2f       	mov	r19, r25
     992:	31 1d       	adc	r19, r1
     994:	40 91 ca 04 	lds	r20, 0x04CA	; 0x8004ca <myDFPlayer+0xf>
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	24 0f       	add	r18, r20
     99c:	35 1f       	adc	r19, r21
     99e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <myDFPlayer+0x10>
     9a2:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     9a4:	60 91 cc 04 	lds	r22, 0x04CC	; 0x8004cc <myDFPlayer+0x11>
     9a8:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     9aa:	76 2f       	mov	r23, r22
     9ac:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     9ae:	f0 91 cd 04 	lds	r31, 0x04CD	; 0x8004cd <myDFPlayer+0x12>
     9b2:	6f 0f       	add	r22, r31
     9b4:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     9b6:	28 0f       	add	r18, r24
     9b8:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     9ba:	31 95       	neg	r19
     9bc:	21 95       	neg	r18
     9be:	31 09       	sbc	r19, r1
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     9c0:	62 17       	cp	r22, r18
     9c2:	73 07       	cpc	r23, r19
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	bc cf       	rjmp	.-136    	; 0x940 <__stack+0x41>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     9c8:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     9cc:	e1 34       	cpi	r30, 0x41	; 65
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <__stack+0xd7>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     9d0:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <myDFPlayer+0x25>
     9d4:	2f c0       	rjmp	.+94     	; 0xa34 <__stack+0x135>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     9d6:	e0 93 dc 04 	sts	0x04DC, r30	; 0x8004dc <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     9da:	54 2f       	mov	r21, r20
     9dc:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     9de:	84 0f       	add	r24, r20
     9e0:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     9e2:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <myDFPlayer+0x23>
     9e6:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     9ea:	ea 53       	subi	r30, 0x3A	; 58
     9ec:	e6 31       	cpi	r30, 0x16	; 22
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	46 c0       	rjmp	.+140    	; 0xa7e <__stack+0x17f>
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	e2 50       	subi	r30, 0x02	; 2
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	0c 94 00 2b 	jmp	0x5600	; 0x5600 <__tablejump2__>
     9fc:	2b 05       	cpc	r18, r11
     9fe:	33 05       	cpc	r19, r3
     a00:	3d 05       	cpc	r19, r13
     a02:	14 05       	cpc	r17, r4
     a04:	3d 05       	cpc	r19, r13
     a06:	1d 05       	cpc	r17, r13
     a08:	3b 05       	cpc	r19, r11
     a0a:	3f 05       	cpc	r19, r15
     a0c:	3d 05       	cpc	r19, r13
     a0e:	3d 05       	cpc	r19, r13
     a10:	3d 05       	cpc	r19, r13
     a12:	3d 05       	cpc	r19, r13
     a14:	3d 05       	cpc	r19, r13
     a16:	3d 05       	cpc	r19, r13
     a18:	3d 05       	cpc	r19, r13
     a1a:	3d 05       	cpc	r19, r13
     a1c:	3f 05       	cpc	r19, r15
     a1e:	3d 05       	cpc	r19, r13
     a20:	3d 05       	cpc	r19, r13
     a22:	3d 05       	cpc	r19, r13
     a24:	3d 05       	cpc	r19, r13
     a26:	3d 05       	cpc	r19, r13
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <myDFPlayer+0x24>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     a34:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <myDFPlayer+0x24>
     a38:	91 cf       	rjmp	.-222    	; 0x95c <__stack+0x5d>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     a3a:	80 ff       	sbrs	r24, 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x143>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	f4 cf       	rjmp	.-24     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a42:	81 ff       	sbrs	r24, 1
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <__stack+0x14b>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	f0 cf       	rjmp	.-32     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     a4a:	83 70       	andi	r24, 0x03	; 3
     a4c:	99 27       	eor	r25, r25
     a4e:	89 2b       	or	r24, r25
     a50:	89 f3       	breq	.-30     	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	ea cf       	rjmp	.-44     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     a56:	80 ff       	sbrs	r24, 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__stack+0x15f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a5a:	87 e0       	ldi	r24, 0x07	; 7
     a5c:	e6 cf       	rjmp	.-52     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a5e:	81 ff       	sbrs	r24, 1
     a60:	e9 cf       	rjmp	.-46     	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	e2 cf       	rjmp	.-60     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     a66:	80 ff       	sbrs	r24, 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a6a:	88 e0       	ldi	r24, 0x08	; 8
     a6c:	de cf       	rjmp	.-68     	; 0xa2a <__stack+0x12b>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a6e:	81 ff       	sbrs	r24, 1
     a70:	e1 cf       	rjmp	.-62     	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	da cf       	rjmp	.-76     	; 0xa2a <__stack+0x12b>
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	d8 cf       	rjmp	.-80     	; 0xa2a <__stack+0x12b>
     a7a:	8b e0       	ldi	r24, 0x0B	; 11
     a7c:	d6 cf       	rjmp	.-84     	; 0xa2a <__stack+0x12b>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     a84:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <myDFPlayer+0x23>
     a88:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     a8c:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <myDFPlayer+0x24>
     a90:	9f cf       	rjmp	.-194    	; 0x9d0 <__stack+0xd1>
available():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     a92:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <myDFPlayer+0x25>
     a96:	88 23       	and	r24, r24
     a98:	69 f2       	breq	.-102    	; 0xa34 <__stack+0x135>
     a9a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
     a9e:	00 91 bd 04 	lds	r16, 0x04BD	; 0x8004bd <myDFPlayer+0x2>
     aa2:	10 91 be 04 	lds	r17, 0x04BE	; 0x8004be <myDFPlayer+0x3>
     aa6:	20 91 bf 04 	lds	r18, 0x04BF	; 0x8004bf <myDFPlayer+0x4>
     aaa:	30 91 c0 04 	lds	r19, 0x04C0	; 0x8004c0 <myDFPlayer+0x5>
     aae:	60 1b       	sub	r22, r16
     ab0:	71 0b       	sbc	r23, r17
     ab2:	82 0b       	sbc	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <myDFPlayer+0x6>
     aba:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <myDFPlayer+0x7>
     abe:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <myDFPlayer+0x8>
     ac2:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <myDFPlayer+0x9>
     ac6:	60 17       	cp	r22, r16
     ac8:	71 07       	cpc	r23, r17
     aca:	82 07       	cpc	r24, r18
     acc:	93 07       	cpc	r25, r19
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	b1 cf       	rjmp	.-158    	; 0xa34 <__stack+0x135>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     ad2:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     ad6:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     ada:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <myDFPlayer+0x23>
     ade:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	36 cf       	rjmp	.-404    	; 0x952 <__stack+0x53>

00000ae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>:
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     ae6:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     aea:	27 2f       	mov	r18, r23
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	70 93 d4 04 	sts	0x04D4, r23	; 0x8004d4 <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     af2:	60 93 d5 04 	sts	0x04D5, r22	; 0x8004d5 <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     af6:	40 91 d1 04 	lds	r20, 0x04D1	; 0x8004d1 <myDFPlayer+0x16>
     afa:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <myDFPlayer+0x15>
     afe:	49 0f       	add	r20, r25
     b00:	55 27       	eor	r21, r21
     b02:	55 1f       	adc	r21, r21
     b04:	84 0f       	add	r24, r20
     b06:	95 2f       	mov	r25, r21
     b08:	91 1d       	adc	r25, r1
     b0a:	40 91 d3 04 	lds	r20, 0x04D3	; 0x8004d3 <myDFPlayer+0x18>
     b0e:	84 0f       	add	r24, r20
     b10:	91 1d       	adc	r25, r1
     b12:	82 0f       	add	r24, r18
     b14:	93 1f       	adc	r25, r19
     b16:	68 0f       	add	r22, r24
     b18:	79 2f       	mov	r23, r25
     b1a:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     b1c:	71 95       	neg	r23
     b1e:	61 95       	neg	r22
     b20:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     b22:	70 93 d6 04 	sts	0x04D6, r23	; 0x8004d6 <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     b26:	60 93 d7 04 	sts	0x04D7, r22	; 0x8004d7 <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     b2a:	44 23       	and	r20, r20
     b2c:	61 f0       	breq	.+24     	; 0xb46 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     b2e:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <myDFPlayer+0x25>
     b32:	88 23       	and	r24, r24
     b34:	41 f0       	breq	.+16     	; 0xb46 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	cb 01       	movw	r24, r22
     b3c:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     b40:	0e 94 62 04 	call	0x8c4	; 0x8c4 <DFRobotDFPlayerMini::available() [clone .constprop.63]>
     b44:	f4 cf       	rjmp	.-24     	; 0xb2e <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     b46:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <myDFPlayer>
     b4a:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <myDFPlayer+0x1>
     b4e:	dc 01       	movw	r26, r24
     b50:	ed 91       	ld	r30, X+
     b52:	fc 91       	ld	r31, X
     b54:	02 80       	ldd	r0, Z+2	; 0x02
     b56:	f3 81       	ldd	r31, Z+3	; 0x03
     b58:	e0 2d       	mov	r30, r0
     b5a:	4a e0       	ldi	r20, 0x0A	; 10
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	6f ec       	ldi	r22, 0xCF	; 207
     b60:	74 e0       	ldi	r23, 0x04	; 4
     b62:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     b64:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
     b68:	60 93 bd 04 	sts	0x04BD, r22	; 0x8004bd <myDFPlayer+0x2>
     b6c:	70 93 be 04 	sts	0x04BE, r23	; 0x8004be <myDFPlayer+0x3>
     b70:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <myDFPlayer+0x4>
     b74:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     b78:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <myDFPlayer+0x18>
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	81 11       	cpse	r24, r1
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0x9e>
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     b88:	81 11       	cpse	r24, r1
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     b8c:	6a e0       	ldi	r22, 0x0A	; 10
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0c 94 23 04 	jmp	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     b98:	08 95       	ret

00000b9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>:
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     b9a:	78 2f       	mov	r23, r24
     b9c:	8f e0       	ldi	r24, 0x0F	; 15
     b9e:	0c 94 73 05 	jmp	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>

00000ba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.27]>:
startPreSong():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1325
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
        }
    }
}

void startPreSong(byte fol, byte song)
     ba2:	cf 93       	push	r28
     ba4:	c8 2f       	mov	r28, r24
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1327
{
    digitalWrite(AMP, HIGH);
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	8c e0       	ldi	r24, 0x0C	; 12
     baa:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1328
    myDFPlayer.playFolder(fol, song);
     bae:	6c 2f       	mov	r22, r28
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1329
    delay(500);
     bb6:	64 ef       	ldi	r22, 0xF4	; 244
     bb8:	71 e0       	ldi	r23, 0x01	; 1
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1330
}
     bbe:	cf 91       	pop	r28
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1329

void startPreSong(byte fol, byte song)
{
    digitalWrite(AMP, HIGH);
    myDFPlayer.playFolder(fol, song);
    delay(500);
     bc0:	0c 94 23 04 	jmp	0x846	; 0x846 <delay>

00000bc4 <Print::flush()>:
flush():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     bc4:	08 95       	ret

00000bc6 <SoftwareSerial::peek()>:
peek():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     bc6:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
     bca:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	71 f4       	brne	.+28     	; 0xbf0 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     bd4:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     bd8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
     bdc:	98 17       	cp	r25, r24
     bde:	41 f0       	breq	.+16     	; 0xbf0 <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     be0:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ee 56       	subi	r30, 0x6E	; 110
     be8:	fd 4f       	sbci	r31, 0xFD	; 253
     bea:	80 81       	ld	r24, Z
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     bf4:	08 95       	ret

00000bf6 <SoftwareSerial::flush()>:
flush():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     bf6:	08 95       	ret

00000bf8 <SoftwareSerial::write(unsigned char)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     c06:	5c 96       	adiw	r26, 0x1c	; 28
     c08:	ed 90       	ld	r14, X+
     c0a:	fc 90       	ld	r15, X
     c0c:	5d 97       	sbiw	r26, 0x1d	; 29
     c0e:	e1 14       	cp	r14, r1
     c10:	f1 04       	cpc	r15, r1
     c12:	79 f4       	brne	.+30     	; 0xc32 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	13 96       	adiw	r26, 0x03	; 3
     c1a:	9c 93       	st	X, r25
     c1c:	8e 93       	st	-X, r24
     c1e:	12 97       	sbiw	r26, 0x02	; 2
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     c32:	51 96       	adiw	r26, 0x11	; 17
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     c3a:	50 96       	adiw	r26, 0x10	; 16
     c3c:	8c 91       	ld	r24, X
     c3e:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     c40:	98 2f       	mov	r25, r24
     c42:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     c44:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     c46:	5e 96       	adiw	r26, 0x1e	; 30
     c48:	2c 91       	ld	r18, X
     c4a:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     c4c:	12 2f       	mov	r17, r18
     c4e:	12 70       	andi	r17, 0x02	; 2
     c50:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     c52:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     c54:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     c56:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     c58:	11 23       	and	r17, r17
     c5a:	19 f1       	breq	.+70     	; 0xca2 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     c5c:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     c5e:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     c60:	e7 01       	movw	r28, r14
     c62:	21 97       	sbiw	r28, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <SoftwareSerial::write(unsigned char)+0x6a>
     c66:	28 e0       	ldi	r18, 0x08	; 8
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     c68:	46 2f       	mov	r20, r22
     c6a:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     c6c:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     c6e:	60 ff       	sbrs	r22, 0
     c70:	1a c0       	rjmp	.+52     	; 0xca6 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     c72:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     c74:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     c76:	e7 01       	movw	r28, r14
     c78:	21 97       	sbiw	r28, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <SoftwareSerial::write(unsigned char)+0x80>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     c7c:	ba 01       	movw	r22, r20
     c7e:	75 95       	asr	r23
     c80:	67 95       	ror	r22
     c82:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     c84:	89 f7       	brne	.-30     	; 0xc68 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     c86:	11 23       	and	r17, r17
     c88:	81 f0       	breq	.+32     	; 0xcaa <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     c8a:	80 81       	ld	r24, Z
     c8c:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     c8e:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     c90:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     c92:	5c 96       	adiw	r26, 0x1c	; 28
     c94:	8d 91       	ld	r24, X+
     c96:	9c 91       	ld	r25, X
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <SoftwareSerial::write(unsigned char)+0xa0>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	c1 cf       	rjmp	.-126    	; 0xc24 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     ca2:	29 23       	and	r18, r25
     ca4:	dc cf       	rjmp	.-72     	; 0xc5e <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     ca6:	39 23       	and	r19, r25
     ca8:	e5 cf       	rjmp	.-54     	; 0xc74 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     caa:	90 81       	ld	r25, Z
     cac:	89 2b       	or	r24, r25
     cae:	ef cf       	rjmp	.-34     	; 0xc8e <SoftwareSerial::write(unsigned char)+0x96>

00000cb0 <SoftwareSerial::available()>:
available():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     cb0:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
     cb4:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
     cb8:	28 17       	cp	r18, r24
     cba:	39 07       	cpc	r19, r25
     cbc:	71 f4       	brne	.+28     	; 0xcda <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     cbe:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
     cc2:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	80 5c       	subi	r24, 0xC0	; 192
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	82 1b       	sub	r24, r18
     cce:	91 09       	sbc	r25, r1
     cd0:	60 e4       	ldi	r22, 0x40	; 64
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <__divmodhi4>
     cd8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     cde:	08 95       	ret

00000ce0 <SoftwareSerial::read()>:
read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     ce0:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
     ce4:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	b9 f4       	brne	.+46     	; 0xd1c <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     cee:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     cf2:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
     cf6:	98 17       	cp	r25, r24
     cf8:	89 f0       	breq	.+34     	; 0xd1c <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     cfa:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	ee 56       	subi	r30, 0x6E	; 110
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     d06:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	2f 73       	andi	r18, 0x3F	; 63
     d12:	33 27       	eor	r19, r19
     d14:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     d20:	08 95       	ret

00000d22 <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d22:	85 ed       	ldi	r24, 0xD5	; 213
     d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d28:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     d2c:	84 fd       	sbrc	r24, 4
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     d30:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     d34:	08 95       	ret

00000d36 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     d36:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <twi_txBufferLength>
     d3a:	26 0f       	add	r18, r22
     d3c:	33 27       	eor	r19, r19
     d3e:	33 1f       	adc	r19, r19
     d40:	21 32       	cpi	r18, 0x21	; 33
     d42:	31 05       	cpc	r19, r1
     d44:	ec f4       	brge	.+58     	; 0xd80 <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     d46:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <twi_state>
     d4a:	fc 01       	movw	r30, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	24 30       	cpi	r18, 0x04	; 4
     d52:	69 f0       	breq	.+26     	; 0xd6e <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     d54:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     d56:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     d58:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <twi_txBufferLength>
     d5c:	21 91       	ld	r18, Z+
     d5e:	ac 01       	movw	r20, r24
     d60:	41 5b       	subi	r20, 0xB1	; 177
     d62:	5d 4f       	sbci	r21, 0xFD	; 253
     d64:	a4 0f       	add	r26, r20
     d66:	b5 2f       	mov	r27, r21
     d68:	b1 1d       	adc	r27, r1
     d6a:	2c 93       	st	X, r18
     d6c:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     d6e:	86 17       	cp	r24, r22
     d70:	98 f3       	brcs	.-26     	; 0xd58 <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     d72:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
     d76:	68 0f       	add	r22, r24
     d78:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <twi_txBufferLength>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	08 95       	ret

00000d84 <TwoWire::peek()>:
peek():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     d84:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <TwoWire::rxBufferIndex>
     d88:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <TwoWire::rxBufferLength>
     d8c:	e8 17       	cp	r30, r24
     d8e:	30 f4       	brcc	.+12     	; 0xd9c <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	ed 5b       	subi	r30, 0xBD	; 189
     d94:	fc 4f       	sbci	r31, 0xFC	; 252
     d96:	80 81       	ld	r24, Z
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     d9c:	8f ef       	ldi	r24, 0xFF	; 255
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     da0:	08 95       	ret

00000da2 <TwoWire::read()>:
read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     da2:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <TwoWire::rxBufferIndex>
     da6:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     dae:	98 17       	cp	r25, r24
     db0:	48 f4       	brcc	.+18     	; 0xdc4 <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     db2:	e9 2f       	mov	r30, r25
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ed 5b       	subi	r30, 0xBD	; 189
     db8:	fc 4f       	sbci	r31, 0xFC	; 252
     dba:	20 81       	ld	r18, Z
     dbc:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     dbe:	9f 5f       	subi	r25, 0xFF	; 255
     dc0:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     dc4:	c9 01       	movw	r24, r18
     dc6:	08 95       	ret

00000dc8 <TwoWire::available()>:
available():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     dc8:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <TwoWire::rxBufferLength>
     dcc:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     dd0:	89 1b       	sub	r24, r25
     dd2:	99 0b       	sbc	r25, r25
     dd4:	08 95       	ret

00000dd6 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	7c 01       	movw	r14, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     dec:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <TwoWire::transmitting>
     df0:	22 23       	and	r18, r18
     df2:	89 f0       	breq	.+34     	; 0xe16 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     df4:	eb 01       	movw	r28, r22
     df6:	6b 01       	movw	r12, r22
     df8:	c4 0e       	add	r12, r20
     dfa:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     dfc:	cc 15       	cp	r28, r12
     dfe:	dd 05       	cpc	r29, r13
     e00:	69 f0       	breq	.+26     	; 0xe1c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     e02:	69 91       	ld	r22, Y+
     e04:	d7 01       	movw	r26, r14
     e06:	ed 91       	ld	r30, X+
     e08:	fc 91       	ld	r31, X
     e0a:	01 90       	ld	r0, Z+
     e0c:	f0 81       	ld	r31, Z
     e0e:	e0 2d       	mov	r30, r0
     e10:	c7 01       	movw	r24, r14
     e12:	09 95       	icall
     e14:	f3 cf       	rjmp	.-26     	; 0xdfc <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     e16:	64 2f       	mov	r22, r20
     e18:	0e 94 9b 06 	call	0xd36	; 0xd36 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     e1c:	c8 01       	movw	r24, r16
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	08 95       	ret

00000e30 <TwoWire::write(unsigned char)>:
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     e3c:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <TwoWire::transmitting>
     e40:	22 23       	and	r18, r18
     e42:	f9 f0       	breq	.+62     	; 0xe82 <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     e44:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <TwoWire::txBufferLength>
     e48:	20 32       	cpi	r18, 0x20	; 32
     e4a:	58 f0       	brcs	.+22     	; 0xe62 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	33 83       	std	Z+3, r19	; 0x03
     e54:	22 83       	std	Z+2, r18	; 0x02
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     e62:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <TwoWire::txBufferIndex>
     e66:	e8 2f       	mov	r30, r24
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	e4 57       	subi	r30, 0x74	; 116
     e6c:	fc 4f       	sbci	r31, 0xFC	; 252
     e6e:	99 81       	ldd	r25, Y+1	; 0x01
     e70:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     e78:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	ec cf       	rjmp	.-40     	; 0xe5a <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	0e 94 9b 06 	call	0xd36	; 0xd36 <twi_transmit>
     e8c:	f7 cf       	rjmp	.-18     	; 0xe7c <TwoWire::write(unsigned char)+0x4c>

00000e8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     e8e:	fc 01       	movw	r30, r24
     e90:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     e92:	31 e0       	ldi	r19, 0x01	; 1
     e94:	30 93 8a 03 	sts	0x038A, r19	; 0x80038a <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     e98:	20 93 ac 03 	sts	0x03AC, r18	; 0x8003ac <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     e9c:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     ea0:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     ea4:	83 85       	ldd	r24, Z+11	; 0x0b
     ea6:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     ea8:	85 e5       	ldi	r24, 0x55	; 85
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
expanderWrite():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:255
	Wire.endTransmission();   
     eb0:	0c 94 38 02 	jmp	0x470	; 0x470 <TwoWire::endTransmission() [clone .constprop.83]>

00000eb4 <LiquidCrystal_I2C::write4bits(unsigned char)>:
write4bits():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	8c 01       	movw	r16, r24
     ebc:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     ebe:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     ec2:	6c 2f       	mov	r22, r28
     ec4:	64 60       	ori	r22, 0x04	; 4
     ec6:	c8 01       	movw	r24, r16
     ec8:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     ed4:	6c 2f       	mov	r22, r28
     ed6:	6b 7f       	andi	r22, 0xFB	; 251
     ed8:	c8 01       	movw	r24, r16
     eda:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     ede:	82 e3       	ldi	r24, 0x32	; 50
     ee0:	90 e0       	ldi	r25, 0x00	; 0
write4bits():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     ee8:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <delayMicroseconds>

00000eec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
send():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	8c 01       	movw	r16, r24
     ef6:	d6 2f       	mov	r29, r22
     ef8:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     efa:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     efc:	64 2b       	or	r22, r20
     efe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     f02:	80 e1       	ldi	r24, 0x10	; 16
     f04:	d8 9f       	mul	r29, r24
     f06:	b0 01       	movw	r22, r0
     f08:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     f0a:	6c 2b       	or	r22, r28
     f0c:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     f16:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000f1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>:
setCursor():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	28 97       	sbiw	r28, 0x08	; 8
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     f2e:	98 e0       	ldi	r25, 0x08	; 8
     f30:	ef e0       	ldi	r30, 0x0F	; 15
     f32:	f1 e0       	ldi	r31, 0x01	; 1
     f34:	de 01       	movw	r26, r28
     f36:	11 96       	adiw	r26, 0x01	; 1
     f38:	01 90       	ld	r0, Z+
     f3a:	0d 92       	st	X+, r0
     f3c:	9a 95       	dec	r25
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     f40:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <lcd+0x8>
     f44:	96 17       	cp	r25, r22
     f46:	08 f4       	brcc	.+2      	; 0xf4a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     f48:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     f4a:	26 2f       	mov	r18, r22
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	4c 0f       	add	r20, r28
     f58:	5d 1f       	adc	r21, r29
     f5a:	24 0f       	add	r18, r20
     f5c:	35 1f       	adc	r19, r21
     f5e:	f9 01       	movw	r30, r18
     f60:	60 81       	ld	r22, Z
     f62:	68 0f       	add	r22, r24
     f64:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	8f ea       	ldi	r24, 0xAF	; 175
     f6a:	94 e0       	ldi	r25, 0x04	; 4
setCursor():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     f6c:	28 96       	adiw	r28, 0x08	; 8
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
     f7c:	0c 94 76 07 	jmp	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00000f80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>:
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	8f ea       	ldi	r24, 0xAF	; 175
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
clear():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
     f8c:	80 ed       	ldi	r24, 0xD0	; 208
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <delayMicroseconds>

00000f94 <LiquidCrystal_I2C::write(unsigned char)>:
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>:
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     faa:	d0 e0       	ldi	r29, 0x00	; 0
     fac:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     fae:	f8 01       	movw	r30, r16
     fb0:	ec 0f       	add	r30, r28
     fb2:	fd 1f       	adc	r31, r29
     fb4:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     fb6:	66 23       	and	r22, r22
     fb8:	39 f0       	breq	.+14     	; 0xfc8 <Print::print(__FlashStringHelper const*) [clone .constprop.57]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	8f ea       	ldi	r24, 0xAF	; 175
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	f3 cf       	rjmp	.-26     	; 0xfae <Print::print(__FlashStringHelper const*) [clone .constprop.57]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     fc8:	ce 01       	movw	r24, r28
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <RTC_DS1307::adjust(DateTime const&)>:
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:845
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     fe2:	88 e6       	ldi	r24, 0x68	; 104
     fe4:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     fe8:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     fec:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:847
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	85 e5       	ldi	r24, 0x55	; 85
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
     ffa:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
     ffc:	1a e0       	ldi	r17, 0x0A	; 10
     ffe:	82 2f       	mov	r24, r18
    1000:	61 2f       	mov	r22, r17
    1002:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodqi4>
    1006:	68 2f       	mov	r22, r24
    1008:	66 0f       	add	r22, r22
    100a:	68 0f       	add	r22, r24
    100c:	66 0f       	add	r22, r22
    100e:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:848
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    1010:	85 e5       	ldi	r24, 0x55	; 85
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
    1018:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    101a:	82 2f       	mov	r24, r18
    101c:	61 2f       	mov	r22, r17
    101e:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodqi4>
    1022:	68 2f       	mov	r22, r24
    1024:	66 0f       	add	r22, r22
    1026:	68 0f       	add	r22, r24
    1028:	66 0f       	add	r22, r22
    102a:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:849
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    102c:	85 e5       	ldi	r24, 0x55	; 85
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
    1034:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1036:	82 2f       	mov	r24, r18
    1038:	61 2f       	mov	r22, r17
    103a:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodqi4>
    103e:	68 2f       	mov	r22, r24
    1040:	66 0f       	add	r22, r22
    1042:	68 0f       	add	r22, r24
    1044:	66 0f       	add	r22, r22
    1046:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:850
void RTC_DS1307::adjust(const DateTime &dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    1048:	85 e5       	ldi	r24, 0x55	; 85
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:851
  Wire._I2C_WRITE(bin2bcd(0));
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	85 e5       	ldi	r24, 0x55	; 85
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
    105a:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    105c:	82 2f       	mov	r24, r18
    105e:	61 2f       	mov	r22, r17
    1060:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodqi4>
    1064:	68 2f       	mov	r22, r24
    1066:	66 0f       	add	r22, r22
    1068:	68 0f       	add	r22, r24
    106a:	66 0f       	add	r22, r22
    106c:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:852
  Wire._I2C_WRITE((byte)0); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    106e:	85 e5       	ldi	r24, 0x55	; 85
    1070:	94 e0       	ldi	r25, 0x04	; 4
    1072:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
    1076:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1078:	82 2f       	mov	r24, r18
    107a:	61 2f       	mov	r22, r17
    107c:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodqi4>
    1080:	68 2f       	mov	r22, r24
    1082:	66 0f       	add	r22, r22
    1084:	68 0f       	add	r22, r24
    1086:	66 0f       	add	r22, r22
    1088:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:853
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    108a:	85 e5       	ldi	r24, 0x55	; 85
    108c:	94 e0       	ldi	r25, 0x04	; 4
    108e:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
    1092:	28 81       	ld	r18, Y
bin2bcd():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:807
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1094:	82 2f       	mov	r24, r18
    1096:	61 2f       	mov	r22, r17
    1098:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodqi4>
    109c:	68 2f       	mov	r22, r24
    109e:	66 0f       	add	r22, r22
    10a0:	68 0f       	add	r22, r24
    10a2:	66 0f       	add	r22, r22
    10a4:	62 0f       	add	r22, r18
adjust():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:854
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
    10a6:	85 e5       	ldi	r24, 0x55	; 85
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:856
  Wire.endTransmission();
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:855
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000U));
  Wire.endTransmission();
    10b4:	0c 94 38 02 	jmp	0x470	; 0x470 <TwoWire::endTransmission() [clone .constprop.83]>

000010b8 <Print::availableForWrite()>:
availableForWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	08 95       	ret

000010be <queueButton(unsigned char)>:
queueButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:200

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
    10be:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <buttonBufferCount>
    10c2:	25 30       	cpi	r18, 0x05	; 5
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <queueButton(unsigned char)+0xa>
    10c6:	90 f4       	brcc	.+36     	; 0x10ec <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:202
  {
    buttonBuffer [button_write_pos] = button;
    10c8:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <__data_end>
    10cc:	e9 2f       	mov	r30, r25
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	ef 5e       	subi	r30, 0xEF	; 239
    10d2:	fc 4f       	sbci	r31, 0xFC	; 252
    10d4:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:203
    buttonBufferCount++;
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:204
    button_write_pos++;
    10dc:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:206
    
    if (button_write_pos >= sizeof (buttonBuffer))
    10de:	95 30       	cpi	r25, 0x05	; 5
    10e0:	18 f4       	brcc	.+6      	; 0x10e8 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:204
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
    10e2:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <__data_end>
    10e6:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:208
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
    10e8:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:211
    }
  }
}
    10ec:	08 95       	ret

000010ee <stopPreSong()>:
stopPreSong():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1333
}
void stopPreSong()
{
    digitalWrite(AMP, LOW);
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	8c e0       	ldi	r24, 0x0C	; 12
    10f2:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	86 e1       	ldi	r24, 0x16	; 22
    10fc:	0c 94 73 05 	jmp	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>

00001100 <TriggerPlayer()>:
TriggerPlayer():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:579
        }
    }
}

void TriggerPlayer()
{
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:581
    // Validate Player Morning
    if (CurTime >= config.PlayerMorTime && CurTime <= config.PlayerMorTime + config.PlayerMorDur && config.PlayerMorDur != 0)
    1104:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <config+0x3e>
    1108:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <config+0x3f>
    110c:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <config+0x40>
    1110:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <config+0x41>
    1114:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <CurTime>
    1118:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <CurTime+0x1>
    111c:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <CurTime+0x2>
    1120:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <CurTime+0x3>
    1124:	48 17       	cp	r20, r24
    1126:	59 07       	cpc	r21, r25
    1128:	6a 07       	cpc	r22, r26
    112a:	7b 07       	cpc	r23, r27
    112c:	1c f1       	brlt	.+70     	; 0x1174 <TriggerPlayer()+0x74>
    112e:	00 91 f6 03 	lds	r16, 0x03F6	; 0x8003f6 <config+0x42>
    1132:	10 91 f7 03 	lds	r17, 0x03F7	; 0x8003f7 <config+0x43>
    1136:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <config+0x44>
    113a:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <config+0x45>
    113e:	80 0f       	add	r24, r16
    1140:	91 1f       	adc	r25, r17
    1142:	a2 1f       	adc	r26, r18
    1144:	b3 1f       	adc	r27, r19
    1146:	84 17       	cp	r24, r20
    1148:	95 07       	cpc	r25, r21
    114a:	a6 07       	cpc	r26, r22
    114c:	b7 07       	cpc	r27, r23
    114e:	94 f0       	brlt	.+36     	; 0x1174 <TriggerPlayer()+0x74>
    1150:	01 2b       	or	r16, r17
    1152:	02 2b       	or	r16, r18
    1154:	03 2b       	or	r16, r19
    1156:	71 f0       	breq	.+28     	; 0x1174 <TriggerPlayer()+0x74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:583
    {
        if (PlayerONMor == 0)
    1158:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <PlayerONMor>
    115c:	81 11       	cpse	r24, r1
    115e:	50 c0       	rjmp	.+160    	; 0x1200 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:585
        {
            PlayerONMor = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:596
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
    1166:	85 e0       	ldi	r24, 0x05	; 5
    1168:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:615
                lcd.clear();
                appMode = APP_NORMAL_MODE;
            }
        }
    }
}
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:597
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
            lcd.clear();
    1170:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:591
            appMode = APP_PLAYER_MODE;
            lcd.clear();
        }
    }
    // Validate Player Evening
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    1174:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <config+0x46>
    1178:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <config+0x47>
    117c:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <config+0x48>
    1180:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <config+0x49>
    1184:	48 17       	cp	r20, r24
    1186:	59 07       	cpc	r21, r25
    1188:	6a 07       	cpc	r22, r26
    118a:	7b 07       	cpc	r23, r27
    118c:	ec f0       	brlt	.+58     	; 0x11c8 <TriggerPlayer()+0xc8>
    118e:	00 91 fe 03 	lds	r16, 0x03FE	; 0x8003fe <config+0x4a>
    1192:	10 91 ff 03 	lds	r17, 0x03FF	; 0x8003ff <config+0x4b>
    1196:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <config+0x4c>
    119a:	30 91 01 04 	lds	r19, 0x0401	; 0x800401 <config+0x4d>
    119e:	80 0f       	add	r24, r16
    11a0:	91 1f       	adc	r25, r17
    11a2:	a2 1f       	adc	r26, r18
    11a4:	b3 1f       	adc	r27, r19
    11a6:	84 17       	cp	r24, r20
    11a8:	95 07       	cpc	r25, r21
    11aa:	a6 07       	cpc	r26, r22
    11ac:	b7 07       	cpc	r27, r23
    11ae:	64 f0       	brlt	.+24     	; 0x11c8 <TriggerPlayer()+0xc8>
    11b0:	01 2b       	or	r16, r17
    11b2:	02 2b       	or	r16, r18
    11b4:	03 2b       	or	r16, r19
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <TriggerPlayer()+0xc8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:593
    {
        if (PlayerONEve == 0)
    11b8:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <PlayerONEve>
    11bc:	81 11       	cpse	r24, r1
    11be:	20 c0       	rjmp	.+64     	; 0x1200 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:595
        {
            PlayerONEve = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <PlayerONEve>
    11c6:	cf cf       	rjmp	.-98     	; 0x1166 <TriggerPlayer()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:602
            lcd.clear();
        }
    }
    else
    {
        if (appMode == APP_PLAYER_MODE)
    11c8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <appMode>
    11cc:	85 30       	cpi	r24, 0x05	; 5
    11ce:	c1 f4       	brne	.+48     	; 0x1200 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:604
        {
            if (PlayerONEve == 1 || PlayerONMor == 1)
    11d0:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <PlayerONEve>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <TriggerPlayer()+0xe0>
    11d8:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <PlayerONMor>
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	81 f4       	brne	.+32     	; 0x1200 <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:606
            {
                digitalWrite(AMP, LOW);
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	8c e0       	ldi	r24, 0x0C	; 12
    11e4:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:607
                digitalWrite(AUDCONT, LOW);
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:608
                PlayerONMor = 0;
    11f0:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:609
                PlayerONEve = 0;
    11f4:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <PlayerONEve>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:610
                lcd.clear();
    11f8:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:611
                appMode = APP_NORMAL_MODE;
    11fc:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:615
            }
        }
    }
}
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <TwoWire::requestFrom(int, int) [clone .constprop.45]>:
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1206:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_state>
    120a:	91 11       	cpse	r25, r1
    120c:	fc cf       	rjmp	.-8      	; 0x1206 <TwoWire::requestFrom(int, int) [clone .constprop.45]>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:136
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    120e:	28 2f       	mov	r18, r24
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    1216:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1220:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1224:	38 0f       	add	r19, r24
    1226:	30 93 85 03 	sts	0x0385, r19	; 0x800385 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    122a:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    122e:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <twi_slarw>
    1232:	90 6d       	ori	r25, 0xD0	; 208
    1234:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    1238:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <twi_inRepStart>
    123c:	91 30       	cpi	r25, 0x01	; 1
    123e:	19 f5       	brne	.+70     	; 0x1286 <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x80>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    1240:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
    1244:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <twi_slarw>
    1248:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    124c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1250:	93 fd       	sbrc	r25, 3
    1252:	f8 cf       	rjmp	.-16     	; 0x1244 <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x3e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1254:	95 ec       	ldi	r25, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1256:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    125a:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_state>
    125e:	91 30       	cpi	r25, 0x01	; 1
    1260:	e1 f3       	breq	.-8      	; 0x125a <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x54>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    1262:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <twi_masterBufferIndex>
    1266:	98 17       	cp	r25, r24
    1268:	10 f4       	brcc	.+4      	; 0x126e <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x68>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    126a:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <twi_masterBufferIndex>
    126e:	a5 e6       	ldi	r26, 0x65	; 101
    1270:	b3 e0       	ldi	r27, 0x03	; 3
    1272:	e3 e4       	ldi	r30, 0x43	; 67
    1274:	f3 e0       	ldi	r31, 0x03	; 3
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1276:	80 e0       	ldi	r24, 0x00	; 0
twi_readFrom():
    1278:	82 13       	cpse	r24, r18
    127a:	07 c0       	rjmp	.+14     	; 0x128a <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x84>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    127c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    1280:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:137
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    1284:	08 95       	ret
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1286:	95 ee       	ldi	r25, 0xE5	; 229
    1288:	e6 cf       	rjmp	.-52     	; 0x1256 <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    128a:	9d 91       	ld	r25, X+
    128c:	91 93       	st	Z+, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	f3 cf       	rjmp	.-26     	; 0x1278 <TwoWire::requestFrom(int, int) [clone .constprop.45]+0x72>

00001292 <RTC_DS1307::now()>:
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:864
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	6c 01       	movw	r12, r24
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    12a8:	88 e6       	ldi	r24, 0x68	; 104
    12aa:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    12ae:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    12b2:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:866
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	85 e5       	ldi	r24, 0x55	; 85
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:867
  Wire.endTransmission();
    12c0:	0e 94 38 02 	call	0x470	; 0x470 <TwoWire::endTransmission() [clone .constprop.83]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:869

  Wire.requestFrom(DS1307_ADDRESS, 7);
    12c4:	87 e0       	ldi	r24, 0x07	; 7
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 03 09 	call	0x1206	; 0x1206 <TwoWire::requestFrom(int, int) [clone .constprop.45]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:870
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    12cc:	85 e5       	ldi	r24, 0x55	; 85
    12ce:	94 e0       	ldi	r25, 0x04	; 4
    12d0:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
    12d4:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	35 95       	asr	r19
    12de:	27 95       	ror	r18
    12e0:	9a 95       	dec	r25
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <RTC_DS1307::now()+0x4a>
    12e4:	92 2f       	mov	r25, r18
    12e6:	99 0f       	add	r25, r25
    12e8:	99 0f       	add	r25, r25
    12ea:	c2 2f       	mov	r28, r18
    12ec:	c9 1b       	sub	r28, r25
    12ee:	cc 0f       	add	r28, r28
    12f0:	c8 0f       	add	r28, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:871
  Wire._I2C_WRITE((byte)0);
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    12f2:	85 e5       	ldi	r24, 0x55	; 85
    12f4:	94 e0       	ldi	r25, 0x04	; 4
    12f6:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    12fa:	9c 01       	movw	r18, r24
    12fc:	44 e0       	ldi	r20, 0x04	; 4
    12fe:	35 95       	asr	r19
    1300:	27 95       	ror	r18
    1302:	4a 95       	dec	r20
    1304:	e1 f7       	brne	.-8      	; 0x12fe <RTC_DS1307::now()+0x6c>
    1306:	2f 70       	andi	r18, 0x0F	; 15
    1308:	33 27       	eor	r19, r19
    130a:	92 2f       	mov	r25, r18
    130c:	99 0f       	add	r25, r25
    130e:	99 0f       	add	r25, r25
    1310:	d2 2f       	mov	r29, r18
    1312:	d9 1b       	sub	r29, r25
    1314:	dd 0f       	add	r29, r29
    1316:	d8 0f       	add	r29, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:872
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    1318:	85 e5       	ldi	r24, 0x55	; 85
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1320:	9c 01       	movw	r18, r24
    1322:	54 e0       	ldi	r21, 0x04	; 4
    1324:	35 95       	asr	r19
    1326:	27 95       	ror	r18
    1328:	5a 95       	dec	r21
    132a:	e1 f7       	brne	.-8      	; 0x1324 <RTC_DS1307::now()+0x92>
    132c:	2f 70       	andi	r18, 0x0F	; 15
    132e:	33 27       	eor	r19, r19
    1330:	92 2f       	mov	r25, r18
    1332:	99 0f       	add	r25, r25
    1334:	99 0f       	add	r25, r25
    1336:	12 2f       	mov	r17, r18
    1338:	19 1b       	sub	r17, r25
    133a:	11 0f       	add	r17, r17
    133c:	18 0f       	add	r17, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:873

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    133e:	85 e5       	ldi	r24, 0x55	; 85
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:874
  uint8_t d = bcd2bin(Wire._I2C_READ());
    1346:	85 e5       	ldi	r24, 0x55	; 85
    1348:	94 e0       	ldi	r25, 0x04	; 4
    134a:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    134e:	9c 01       	movw	r18, r24
    1350:	64 e0       	ldi	r22, 0x04	; 4
    1352:	35 95       	asr	r19
    1354:	27 95       	ror	r18
    1356:	6a 95       	dec	r22
    1358:	e1 f7       	brne	.-8      	; 0x1352 <RTC_DS1307::now()+0xc0>
    135a:	2f 70       	andi	r18, 0x0F	; 15
    135c:	33 27       	eor	r19, r19
    135e:	92 2f       	mov	r25, r18
    1360:	99 0f       	add	r25, r25
    1362:	99 0f       	add	r25, r25
    1364:	02 2f       	mov	r16, r18
    1366:	09 1b       	sub	r16, r25
    1368:	00 0f       	add	r16, r16
    136a:	08 0f       	add	r16, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:875
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    136c:	85 e5       	ldi	r24, 0x55	; 85
    136e:	94 e0       	ldi	r25, 0x04	; 4
    1370:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    1374:	9c 01       	movw	r18, r24
    1376:	74 e0       	ldi	r23, 0x04	; 4
    1378:	35 95       	asr	r19
    137a:	27 95       	ror	r18
    137c:	7a 95       	dec	r23
    137e:	e1 f7       	brne	.-8      	; 0x1378 <RTC_DS1307::now()+0xe6>
    1380:	2f 70       	andi	r18, 0x0F	; 15
    1382:	33 27       	eor	r19, r19
    1384:	92 2f       	mov	r25, r18
    1386:	99 0f       	add	r25, r25
    1388:	99 0f       	add	r25, r25
    138a:	f2 2e       	mov	r15, r18
    138c:	f9 1a       	sub	r15, r25
    138e:	ff 0c       	add	r15, r15
    1390:	f8 0e       	add	r15, r24
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:876
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;
    1392:	85 e5       	ldi	r24, 0x55	; 85
    1394:	94 e0       	ldi	r25, 0x04	; 4
    1396:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
bcd2bin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:798
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    139a:	9c 01       	movw	r18, r24
    139c:	e4 e0       	ldi	r30, 0x04	; 4
    139e:	35 95       	asr	r19
    13a0:	27 95       	ror	r18
    13a2:	ea 95       	dec	r30
    13a4:	e1 f7       	brne	.-8      	; 0x139e <RTC_DS1307::now()+0x10c>
    13a6:	2f 70       	andi	r18, 0x0F	; 15
    13a8:	33 27       	eor	r19, r19
    13aa:	92 2f       	mov	r25, r18
    13ac:	99 0f       	add	r25, r25
    13ae:	99 0f       	add	r25, r25
    13b0:	29 1b       	sub	r18, r25
    13b2:	22 0f       	add	r18, r18
    13b4:	82 0f       	add	r24, r18
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    13b6:	f6 01       	movw	r30, r12
    13b8:	80 83       	st	Z, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    13ba:	f1 82       	std	Z+1, r15	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    13bc:	02 83       	std	Z+2, r16	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    13be:	13 83       	std	Z+3, r17	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    13c0:	d4 83       	std	Z+4, r29	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    13c2:	c5 83       	std	Z+5, r28	; 0x05
now():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:879
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000U;

  return DateTime(y, m, d, hh, mm, ss);
}
    13c4:	c6 01       	movw	r24, r12
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <String::invalidate()>:
invalidate():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    13dc:	88 81       	ld	r24, Y
    13de:	99 81       	ldd	r25, Y+1	; 0x01
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <String::invalidate()+0x12>
    13e4:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    13e8:	19 82       	std	Y+1, r1	; 0x01
    13ea:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    13ec:	1d 82       	std	Y+5, r1	; 0x05
    13ee:	1c 82       	std	Y+4, r1	; 0x04
    13f0:	1b 82       	std	Y+3, r1	; 0x03
    13f2:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>:
printNumber():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	a1 97       	sbiw	r28, 0x21	; 33
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    141a:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    141c:	42 30       	cpi	r20, 0x02	; 2
    141e:	08 f4       	brcc	.+2      	; 0x1422 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x28>
    1420:	4a e0       	ldi	r20, 0x0A	; 10
    1422:	8e 01       	movw	r16, r28
    1424:	0f 5d       	subi	r16, 0xDF	; 223
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    1428:	84 2e       	mov	r8, r20
    142a:	91 2c       	mov	r9, r1
    142c:	b1 2c       	mov	r11, r1
    142e:	a1 2c       	mov	r10, r1
    1430:	a5 01       	movw	r20, r10
    1432:	94 01       	movw	r18, r8
    1434:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__udivmodsi4>
    1438:	e6 2f       	mov	r30, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    143a:	b9 01       	movw	r22, r18
    143c:	ca 01       	movw	r24, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    143e:	ea 30       	cpi	r30, 0x0A	; 10
    1440:	44 f5       	brge	.+80     	; 0x1492 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x98>
    1442:	e0 5d       	subi	r30, 0xD0	; 208
    1444:	d8 01       	movw	r26, r16
    1446:	ee 93       	st	-X, r30
    1448:	8d 01       	movw	r16, r26
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    144a:	23 2b       	or	r18, r19
    144c:	24 2b       	or	r18, r20
    144e:	25 2b       	or	r18, r21
    1450:	79 f7       	brne	.-34     	; 0x1430 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
write():
    1456:	10 97       	sbiw	r26, 0x00	; 0
    1458:	69 f0       	breq	.+26     	; 0x1474 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x7a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    145a:	fd 01       	movw	r30, r26
    145c:	01 90       	ld	r0, Z+
    145e:	00 20       	and	r0, r0
    1460:	e9 f7       	brne	.-6      	; 0x145c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x62>
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	af 01       	movw	r20, r30
    1466:	4a 1b       	sub	r20, r26
    1468:	5b 0b       	sbc	r21, r27
    146a:	bd 01       	movw	r22, r26
    146c:	8f ea       	ldi	r24, 0xAF	; 175
    146e:	94 e0       	ldi	r25, 0x04	; 4
    1470:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Print::write(unsigned char const*, unsigned int)>
printNumber():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    1474:	a1 96       	adiw	r28, 0x21	; 33
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	bf 90       	pop	r11
    148a:	af 90       	pop	r10
    148c:	9f 90       	pop	r9
    148e:	8f 90       	pop	r8
    1490:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1492:	e9 5c       	subi	r30, 0xC9	; 201
    1494:	d7 cf       	rjmp	.-82     	; 0x1444 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x4a>

00001496 <Print::print(int, int) [clone .constprop.4]>:
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    149e:	6c 01       	movw	r12, r24
    14a0:	99 0f       	add	r25, r25
    14a2:	ee 08       	sbc	r14, r14
    14a4:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    14a6:	f7 fe       	sbrs	r15, 7
    14a8:	16 c0       	rjmp	.+44     	; 0x14d6 <Print::print(int, int) [clone .constprop.4]+0x40>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	6d e2       	ldi	r22, 0x2D	; 45
    14ae:	8f ea       	ldi	r24, 0xAF	; 175
    14b0:	94 e0       	ldi	r25, 0x04	; 4
    14b2:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    14b6:	66 27       	eor	r22, r22
    14b8:	77 27       	eor	r23, r23
    14ba:	cb 01       	movw	r24, r22
    14bc:	6c 19       	sub	r22, r12
    14be:	7d 09       	sbc	r23, r13
    14c0:	8e 09       	sbc	r24, r14
    14c2:	9f 09       	sbc	r25, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    14c4:	4a e0       	ldi	r20, 0x0A	; 10
    14c6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>
    14ca:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14d6:	4a e0       	ldi	r20, 0x0A	; 10
    14d8:	c7 01       	movw	r24, r14
    14da:	b6 01       	movw	r22, r12
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14e4:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>

000014e8 <Print::print(char const*) [clone .constprop.93]>:
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	69 f0       	breq	.+26     	; 0x1506 <Print::print(char const*) [clone .constprop.93]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    14ec:	fc 01       	movw	r30, r24
    14ee:	01 90       	ld	r0, Z+
    14f0:	00 20       	and	r0, r0
    14f2:	e9 f7       	brne	.-6      	; 0x14ee <Print::print(char const*) [clone .constprop.93]+0x6>
    14f4:	31 97       	sbiw	r30, 0x01	; 1
    14f6:	af 01       	movw	r20, r30
    14f8:	48 1b       	sub	r20, r24
    14fa:	59 0b       	sbc	r21, r25
    14fc:	bc 01       	movw	r22, r24
    14fe:	8f ea       	ldi	r24, 0xAF	; 175
    1500:	94 e0       	ldi	r25, 0x04	; 4
    1502:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <Print::write(unsigned char const*, unsigned int)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret

0000150c <inttostr(char*, short)>:
inttostr():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:79
  pulseWidth++;
}

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ec 01       	movw	r28, r24
    1516:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:80
  if (integer == 0)
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	59 f4       	brne	.+22     	; 0x1532 <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:82
  {
    strcpy(dest, "0");
    151c:	6b ee       	ldi	r22, 0xEB	; 235
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	ce 01       	movw	r24, r28
    1522:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:112
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    1526:	ce 01       	movw	r24, r28
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:86
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    1532:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:88
    
    if (integer < 0)
    1534:	77 ff       	sbrs	r23, 7
    1536:	06 c0       	rjmp	.+12     	; 0x1544 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:91
    {
      sign = 1;
      dest[0] = '-';
    1538:	2d e2       	ldi	r18, 0x2D	; 45
    153a:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:92
      integer = integer * -1;
    153c:	91 95       	neg	r25
    153e:	81 95       	neg	r24
    1540:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:90
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    1542:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1544:	80 31       	cpi	r24, 0x10	; 16
    1546:	37 e2       	ldi	r19, 0x27	; 39
    1548:	93 07       	cpc	r25, r19
    154a:	0c f5       	brge	.+66     	; 0x158e <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    154c:	88 3e       	cpi	r24, 0xE8	; 232
    154e:	33 e0       	ldi	r19, 0x03	; 3
    1550:	93 07       	cpc	r25, r19
    1552:	fc f4       	brge	.+62     	; 0x1592 <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:99
    else if (integer > 99) idx = 2;
    1554:	32 e0       	ldi	r19, 0x02	; 2
    1556:	84 36       	cpi	r24, 0x64	; 100
    1558:	91 05       	cpc	r25, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:100
    else if (integer > 9) idx = 1;
    155c:	31 e0       	ldi	r19, 0x01	; 1
    155e:	8a 30       	cpi	r24, 0x0A	; 10
    1560:	91 05       	cpc	r25, r1
    1562:	0c f4       	brge	.+2      	; 0x1566 <inttostr(char*, short)+0x5a>
    1564:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:103
    else if (integer > 0) idx = 0;    

    idx += sign;
    1566:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:104
    dest[idx+1] = 0;
    1568:	fe 01       	movw	r30, r28
    156a:	e2 0f       	add	r30, r18
    156c:	f1 1d       	adc	r31, r1
    156e:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:108
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    1570:	0a e0       	ldi	r16, 0x0A	; 10
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	fe 01       	movw	r30, r28
    1576:	e2 0f       	add	r30, r18
    1578:	f1 1d       	adc	r31, r1
    157a:	b8 01       	movw	r22, r16
    157c:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <__divmodhi4>
    1580:	80 5d       	subi	r24, 0xD0	; 208
    1582:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:106
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    1584:	cb 01       	movw	r24, r22
    1586:	21 50       	subi	r18, 0x01	; 1
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	a1 f7       	brne	.-24     	; 0x1574 <inttostr(char*, short)+0x68>
    158c:	cc cf       	rjmp	.-104    	; 0x1526 <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    158e:	34 e0       	ldi	r19, 0x04	; 4
    1590:	ea cf       	rjmp	.-44     	; 0x1566 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    1592:	33 e0       	ldi	r19, 0x03	; 3
    1594:	e8 cf       	rjmp	.-48     	; 0x1566 <inttostr(char*, short)+0x5a>

00001596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>:
rpad():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:140
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:142
{
  unsigned char len = strlen(str);
    159c:	ec 01       	movw	r28, r24
    159e:	09 90       	ld	r0, Y+
    15a0:	00 20       	and	r0, r0
    15a2:	e9 f7       	brne	.-6      	; 0x159e <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]+0x8>
    15a4:	21 97       	sbiw	r28, 0x01	; 1
    15a6:	c8 1b       	sub	r28, r24
    15a8:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:146
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    15aa:	c0 31       	cpi	r28, 0x10	; 16
    15ac:	08 f5       	brcc	.+66     	; 0x15f0 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:148
  {
    strcpy(dest, str);
    15ae:	88 e2       	ldi	r24, 0x28	; 40
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:149
    strcat(dest, padc(chr, width - len));
    15b6:	80 e1       	ldi	r24, 0x10	; 16
    15b8:	8c 1b       	sub	r24, r28
    15ba:	e7 e1       	ldi	r30, 0x17	; 23
    15bc:	f4 e0       	ldi	r31, 0x04	; 4
padc():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    15be:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    15c0:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    15c2:	af 01       	movw	r20, r30
    15c4:	47 51       	subi	r20, 0x17	; 23
    15c6:	54 40       	sbci	r21, 0x04	; 4
    15c8:	48 17       	cp	r20, r24
    15ca:	59 07       	cpc	r21, r25
    15cc:	14 f4       	brge	.+4      	; 0x15d2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]+0x3c>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    15ce:	21 93       	st	Z+, r18
    15d0:	f8 cf       	rjmp	.-16     	; 0x15c2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    15d2:	89 5e       	subi	r24, 0xE9	; 233
    15d4:	9b 4f       	sbci	r25, 0xFB	; 251
    15d6:	fc 01       	movw	r30, r24
    15d8:	10 82       	st	Z, r1
rpad():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:149
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    15da:	67 e1       	ldi	r22, 0x17	; 23
    15dc:	74 e0       	ldi	r23, 0x04	; 4
    15de:	88 e2       	ldi	r24, 0x28	; 40
    15e0:	94 e0       	ldi	r25, 0x04	; 4
    15e2:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <strcat>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:156
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    15e6:	88 e2       	ldi	r24, 0x28	; 40
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:153
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    15f0:	41 e1       	ldi	r20, 0x11	; 17
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	88 e2       	ldi	r24, 0x28	; 40
    15f6:	94 e0       	ldi	r25, 0x04	; 4
    15f8:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <strncpy>
    15fc:	f4 cf       	rjmp	.-24     	; 0x15e6 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]+0x50>

000015fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>:
lpad():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:159
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	ec 01       	movw	r28, r24
    1608:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:161
{
  unsigned char len = strlen(str);
    160a:	fb 01       	movw	r30, r22
    160c:	01 90       	ld	r0, Z+
    160e:	00 20       	and	r0, r0
    1610:	e9 f7       	brne	.-6      	; 0x160c <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0xe>
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	e6 1b       	sub	r30, r22
    1616:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:165
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    1618:	e0 31       	cpi	r30, 0x10	; 16
    161a:	28 f5       	brcc	.+74     	; 0x1666 <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x68>
    161c:	e4 17       	cp	r30, r20
    161e:	18 f5       	brcc	.+70     	; 0x1666 <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x68>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:167
  {
    strcpy(dest, padc(chr, width - len));
    1620:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:183
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    1622:	41 31       	cpi	r20, 0x11	; 17
    1624:	08 f0       	brcs	.+2      	; 0x1628 <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x2a>
    1626:	40 e1       	ldi	r20, 0x10	; 16
    1628:	e7 e1       	ldi	r30, 0x17	; 23
    162a:	f4 e0       	ldi	r31, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186

  int i;
  for (i=0; i < count; i++)
    162c:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    162e:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    1630:	9f 01       	movw	r18, r30
    1632:	27 51       	subi	r18, 0x17	; 23
    1634:	34 40       	sbci	r19, 0x04	; 4
    1636:	24 17       	cp	r18, r20
    1638:	35 07       	cpc	r19, r21
    163a:	14 f4       	brge	.+4      	; 0x1640 <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x42>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    163c:	81 93       	st	Z+, r24
    163e:	f8 cf       	rjmp	.-16     	; 0x1630 <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x32>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    1640:	49 5e       	subi	r20, 0xE9	; 233
    1642:	5b 4f       	sbci	r21, 0xFB	; 251
    1644:	fa 01       	movw	r30, r20
    1646:	10 82       	st	Z, r1
lpad():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:167
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    1648:	67 e1       	ldi	r22, 0x17	; 23
    164a:	74 e0       	ldi	r23, 0x04	; 4
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:168
    strcat(dest, str);
    1652:	b8 01       	movw	r22, r16
    1654:	ce 01       	movw	r24, r28
    1656:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <strcat>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:175
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    165a:	ce 01       	movw	r24, r28
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:172
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	4f 5f       	subi	r20, 0xFF	; 255
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	b8 01       	movw	r22, r16
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <strncpy>
    1674:	f2 cf       	rjmp	.-28     	; 0x165a <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]+0x5c>

00001676 <Config::save() [clone .constprop.25]>:
save():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:204



void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    1676:	4e e4       	ldi	r20, 0x4E	; 78
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	84 eb       	ldi	r24, 0xB4	; 180
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	0c 94 1a 2a 	jmp	0x5434	; 0x5434 <eeprom_write_block>

00001686 <String::reserve(unsigned int)>:
reserve():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    1690:	88 81       	ld	r24, Y
    1692:	99 81       	ldd	r25, Y+1	; 0x01
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	59 f0       	breq	.+22     	; 0x16ae <String::reserve(unsigned int)+0x28>
    1698:	2a 81       	ldd	r18, Y+2	; 0x02
    169a:	3b 81       	ldd	r19, Y+3	; 0x03
    169c:	26 17       	cp	r18, r22
    169e:	37 07       	cpc	r19, r23
    16a0:	30 f0       	brcs	.+12     	; 0x16ae <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret
    16ae:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	0e 94 32 2c 	call	0x5864	; 0x5864 <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	59 f0       	breq	.+22     	; 0x16d2 <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    16bc:	99 83       	std	Y+1, r25	; 0x01
    16be:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    16c0:	1b 83       	std	Y+3, r17	; 0x03
    16c2:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    16c4:	2c 81       	ldd	r18, Y+4	; 0x04
    16c6:	3d 81       	ldd	r19, Y+5	; 0x05
    16c8:	23 2b       	or	r18, r19
    16ca:	59 f7       	brne	.-42     	; 0x16a2 <String::reserve(unsigned int)+0x1c>
    16cc:	fc 01       	movw	r30, r24
    16ce:	10 82       	st	Z, r1
    16d0:	e8 cf       	rjmp	.-48     	; 0x16a2 <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	e7 cf       	rjmp	.-50     	; 0x16a4 <String::reserve(unsigned int)+0x1e>

000016d6 <operator+(StringSumHelper const&, String const&)>:
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    16e4:	fb 01       	movw	r30, r22
    16e6:	e0 80       	ld	r14, Z
    16e8:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    16ea:	e1 14       	cp	r14, r1
    16ec:	f1 04       	cpc	r15, r1
    16ee:	11 f1       	breq	.+68     	; 0x1734 <operator+(StringSumHelper const&, String const&)+0x5e>
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    16f0:	04 81       	ldd	r16, Z+4	; 0x04
    16f2:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    16f4:	01 15       	cp	r16, r1
    16f6:	11 05       	cpc	r17, r1
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	08 0f       	add	r16, r24
    1700:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1702:	b8 01       	movw	r22, r16
    1704:	ce 01       	movw	r24, r28
    1706:	0e 94 43 0b 	call	0x1686	; 0x1686 <String::reserve(unsigned int)>
    170a:	88 23       	and	r24, r24
    170c:	99 f0       	breq	.+38     	; 0x1734 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    170e:	28 81       	ld	r18, Y
    1710:	39 81       	ldd	r19, Y+1	; 0x01
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	b7 01       	movw	r22, r14
    1718:	82 0f       	add	r24, r18
    171a:	93 1f       	adc	r25, r19
    171c:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    1720:	1d 83       	std	Y+5, r17	; 0x05
    1722:	0c 83       	std	Y+4, r16	; 0x04
operator+():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    1724:	ce 01       	movw	r24, r28
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1734:	ce 01       	movw	r24, r28
    1736:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <String::invalidate()>
    173a:	f4 cf       	rjmp	.-24     	; 0x1724 <operator+(StringSumHelper const&, String const&)+0x4e>

0000173c <String::String(char const*)>:
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
    174a:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1750:	1b 82       	std	Y+3, r1	; 0x03
    1752:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1754:	1d 82       	std	Y+5, r1	; 0x05
    1756:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    1758:	fb 01       	movw	r30, r22
    175a:	01 90       	ld	r0, Z+
    175c:	00 20       	and	r0, r0
    175e:	e9 f7       	brne	.-6      	; 0x175a <String::String(char const*)+0x1e>
    1760:	31 97       	sbiw	r30, 0x01	; 1
    1762:	8f 01       	movw	r16, r30
    1764:	06 1b       	sub	r16, r22
    1766:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    1768:	b8 01       	movw	r22, r16
    176a:	0e 94 43 0b 	call	0x1686	; 0x1686 <String::reserve(unsigned int)>
    176e:	81 11       	cpse	r24, r1
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    1772:	ce 01       	movw	r24, r28
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    1780:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    1784:	1d 83       	std	Y+5, r17	; 0x05
    1786:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    1788:	b7 01       	movw	r22, r14
    178a:	88 81       	ld	r24, Y
    178c:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    179a:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <strcpy>

0000179e <fmt(char*, unsigned char, ...)>:
fmt():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:117
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    179e:	6f 92       	push	r6
    17a0:	7f 92       	push	r7
    17a2:	8f 92       	push	r8
    17a4:	9f 92       	push	r9
    17a6:	af 92       	push	r10
    17a8:	bf 92       	push	r11
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	e9 88       	ldd	r14, Y+17	; 0x11
    17c0:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:122
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    17c2:	fe 01       	movw	r30, r28
    17c4:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    17c6:	d1 2c       	mov	r13, r1
    17c8:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:118


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    17ca:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    17cc:	ab 88       	ldd	r10, Y+19	; 0x13
    17ce:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:128
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    17d0:	80 e1       	ldi	r24, 0x10	; 16
    17d2:	68 2e       	mov	r6, r24
    17d4:	87 2d       	mov	r24, r7
    17d6:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    17d8:	ca 14       	cp	r12, r10
    17da:	db 04       	cpc	r13, r11
    17dc:	2c f5       	brge	.+74     	; 0x1828 <fmt(char*, unsigned char, ...)+0x8a>
    17de:	2f e0       	ldi	r18, 0x0F	; 15
    17e0:	27 15       	cp	r18, r7
    17e2:	10 f1       	brcs	.+68     	; 0x1828 <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    17e4:	4f 01       	movw	r8, r30
    17e6:	22 e0       	ldi	r18, 0x02	; 2
    17e8:	82 0e       	add	r8, r18
    17ea:	91 1c       	adc	r9, r1
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:127
    unsigned char len = strlen(str);
    17f0:	fb 01       	movw	r30, r22
    17f2:	01 90       	ld	r0, Z+
    17f4:	00 20       	and	r0, r0
    17f6:	e9 f7       	brne	.-6      	; 0x17f2 <fmt(char*, unsigned char, ...)+0x54>
    17f8:	31 97       	sbiw	r30, 0x01	; 1
    17fa:	8f 01       	movw	r16, r30
    17fc:	06 1b       	sub	r16, r22
    17fe:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:128
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    1800:	9c 01       	movw	r18, r24
    1802:	20 0f       	add	r18, r16
    1804:	31 1d       	adc	r19, r1
    1806:	46 2d       	mov	r20, r6
    1808:	47 19       	sub	r20, r7
    180a:	21 31       	cpi	r18, 0x11	; 17
    180c:	31 05       	cpc	r19, r1
    180e:	0c f4       	brge	.+2      	; 0x1812 <fmt(char*, unsigned char, ...)+0x74>
    1810:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:130

    strncpy((dest + buflen), str, cpylen);
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	8e 0d       	add	r24, r14
    1816:	9f 1d       	adc	r25, r15
    1818:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <strncpy>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:131
    buflen += len;
    181c:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	c8 1a       	sub	r12, r24
    1822:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    1824:	f4 01       	movw	r30, r8
    1826:	d6 cf       	rjmp	.-84     	; 0x17d4 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:134

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    1828:	8e 0d       	add	r24, r14
    182a:	9f 1d       	adc	r25, r15
    182c:	fc 01       	movw	r30, r24
    182e:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:136
  return dest;
}
    1830:	c7 01       	movw	r24, r14
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	bf 90       	pop	r11
    1844:	af 90       	pop	r10
    1846:	9f 90       	pop	r9
    1848:	8f 90       	pop	r8
    184a:	7f 90       	pop	r7
    184c:	6f 90       	pop	r6
    184e:	08 95       	ret

00001850 <toDurStr(char*, long, char) [clone .constprop.90]>:
toDurStr():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:62

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
  return buf;
}

char *toDurStr(char *buf, long timeval, char separator)
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	60 97       	sbiw	r28, 0x10	; 16
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:64
{
  char sepstr[] = {separator, 0};
    1870:	18 8a       	std	Y+16, r1	; 0x10
    1872:	1f 86       	std	Y+15, r1	; 0x0f
    1874:	2a e3       	ldi	r18, 0x3A	; 58
    1876:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:66

  short hours = timeval / 60;
    1878:	2c e3       	ldi	r18, 0x3C	; 60
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	0e 94 32 2a 	call	0x5464	; 0x5464 <__divmodsi4>
    1884:	6b 01       	movw	r12, r22
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:72
  short mins = timeval % 60;
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hours);
    1886:	b9 01       	movw	r22, r18
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:73
  lpad(h, intbuf, '0', 2);
    1890:	8e 01       	movw	r16, r28
    1892:	04 5f       	subi	r16, 0xF4	; 244
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	42 e0       	ldi	r20, 0x02	; 2
    1898:	be 01       	movw	r22, r28
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	c8 01       	movw	r24, r16
    18a0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:74
  inttostr(intbuf, mins);
    18a4:	b6 01       	movw	r22, r12
    18a6:	ce 01       	movw	r24, r28
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:75
  lpad(m, intbuf, '0', 2);
    18ae:	7e 01       	movw	r14, r28
    18b0:	89 e0       	ldi	r24, 0x09	; 9
    18b2:	e8 0e       	add	r14, r24
    18b4:	f1 1c       	adc	r15, r1
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	be 01       	movw	r22, r28
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	c7 01       	movw	r24, r14
    18c0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:77

  fmt(buf, 3, h, sepstr, m);
    18c4:	ff 92       	push	r15
    18c6:	ef 92       	push	r14
    18c8:	ce 01       	movw	r24, r28
    18ca:	0f 96       	adiw	r24, 0x0f	; 15
    18cc:	9f 93       	push	r25
    18ce:	8f 93       	push	r24
    18d0:	1f 93       	push	r17
    18d2:	0f 93       	push	r16
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	8f 93       	push	r24
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	94 e0       	ldi	r25, 0x04	; 4
    18dc:	9f 93       	push	r25
    18de:	8f 93       	push	r24
    18e0:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:78
  return buf;
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:79
}
    18ee:	86 e0       	ldi	r24, 0x06	; 6
    18f0:	94 e0       	ldi	r25, 0x04	; 4
    18f2:	60 96       	adiw	r28, 0x10	; 16
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	df 90       	pop	r13
    190c:	cf 90       	pop	r12
    190e:	08 95       	ret

00001910 <toTimeStr(char*, long, char) [clone .constprop.89]>:
toTimeStr():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:42

  SerialNo = 204;
  DataYear = 2022;
}

char *toTimeStr(char *buf, long timeval, char separator)
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	60 97       	sbiw	r28, 0x10	; 16
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:44
{
  char sepstr[] = {separator, 0};
    1938:	18 8a       	std	Y+16, r1	; 0x10
    193a:	1f 86       	std	Y+15, r1	; 0x0f
    193c:	2a e3       	ldi	r18, 0x3A	; 58
    193e:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:46

  short hours = timeval / 60;
    1940:	2c e3       	ldi	r18, 0x3C	; 60
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	0e 94 32 2a 	call	0x5464	; 0x5464 <__divmodsi4>
    194c:	4b 01       	movw	r8, r22
    194e:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:48
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    1950:	2d 30       	cpi	r18, 0x0D	; 13
    1952:	31 05       	cpc	r19, r1
    1954:	14 f0       	brlt	.+4      	; 0x195a <toTimeStr(char*, long, char) [clone .constprop.89]+0x4a>
    1956:	2c 50       	subi	r18, 0x0C	; 12
    1958:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:53
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    195a:	b9 01       	movw	r22, r18
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:54
  lpad(h, intbuf, '0', 2);
    1964:	8e 01       	movw	r16, r28
    1966:	04 5f       	subi	r16, 0xF4	; 244
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	42 e0       	ldi	r20, 0x02	; 2
    196c:	be 01       	movw	r22, r28
    196e:	6f 5f       	subi	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	c8 01       	movw	r24, r16
    1974:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:55
  inttostr(intbuf, mins);
    1978:	b4 01       	movw	r22, r8
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:56
  lpad(m, intbuf, '0', 2);
    1982:	6e 01       	movw	r12, r28
    1984:	99 e0       	ldi	r25, 0x09	; 9
    1986:	c9 0e       	add	r12, r25
    1988:	d1 1c       	adc	r13, r1
    198a:	42 e0       	ldi	r20, 0x02	; 2
    198c:	be 01       	movw	r22, r28
    198e:	6f 5f       	subi	r22, 0xFF	; 255
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	c6 01       	movw	r24, r12
    1994:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:58

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1998:	8c e0       	ldi	r24, 0x0C	; 12
    199a:	e8 16       	cp	r14, r24
    199c:	f1 04       	cpc	r15, r1
    199e:	74 f5       	brge	.+92     	; 0x19fc <toTimeStr(char*, long, char) [clone .constprop.89]+0xec>
    19a0:	86 e7       	ldi	r24, 0x76	; 118
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	9f 93       	push	r25
    19a6:	8f 93       	push	r24
    19a8:	df 92       	push	r13
    19aa:	cf 92       	push	r12
    19ac:	ce 01       	movw	r24, r28
    19ae:	0f 96       	adiw	r24, 0x0f	; 15
    19b0:	9f 93       	push	r25
    19b2:	8f 93       	push	r24
    19b4:	1f 93       	push	r17
    19b6:	0f 93       	push	r16
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	8f 93       	push	r24
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	94 e0       	ldi	r25, 0x04	; 4
    19c0:	9f 93       	push	r25
    19c2:	8f 93       	push	r24
    19c4:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:59
  return buf;
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:60
}
    19d2:	86 e0       	ldi	r24, 0x06	; 6
    19d4:	94 e0       	ldi	r25, 0x04	; 4
    19d6:	60 96       	adiw	r28, 0x10	; 16
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	bf 90       	pop	r11
    19f4:	af 90       	pop	r10
    19f6:	9f 90       	pop	r9
    19f8:	8f 90       	pop	r8
    19fa:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:58
  inttostr(intbuf, hrs);
  lpad(h, intbuf, '0', 2);
  inttostr(intbuf, mins);
  lpad(m, intbuf, '0', 2);

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    19fc:	8f e6       	ldi	r24, 0x6F	; 111
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	d1 cf       	rjmp	.-94     	; 0x19a4 <toTimeStr(char*, long, char) [clone .constprop.89]+0x94>

00001a02 <Config::getFormattedStr(unsigned char) [clone .constprop.87]>:
getFormattedStr():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:108
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	65 97       	sbiw	r28, 0x15	; 21
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:112
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    1a22:	82 50       	subi	r24, 0x02	; 2
    1a24:	8d 31       	cpi	r24, 0x1D	; 29
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x28>
    1a28:	c2 c1       	rjmp	.+900    	; 0x1dae <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x3ac>
    1a2a:	e8 2f       	mov	r30, r24
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	e5 5e       	subi	r30, 0xE5	; 229
    1a30:	f2 4f       	sbci	r31, 0xF2	; 242
    1a32:	0c 94 00 2b 	jmp	0x5600	; 0x5600 <__tablejump2__>
    1a36:	38 0d       	add	r19, r8
    1a38:	9e 0d       	add	r25, r14
    1a3a:	d7 0e       	add	r13, r23
    1a3c:	b5 0d       	add	r27, r5
    1a3e:	e4 0d       	add	r30, r4
    1a40:	00 0e       	add	r0, r16
    1a42:	d7 0e       	add	r13, r23
    1a44:	0d 0e       	add	r0, r29
    1a46:	3b 0e       	add	r3, r27
    1a48:	d7 0e       	add	r13, r23
    1a4a:	16 0e       	add	r1, r22
    1a4c:	47 0e       	add	r4, r23
    1a4e:	d7 0e       	add	r13, r23
    1a50:	50 0e       	add	r5, r16
    1a52:	5d 0e       	add	r5, r29
    1a54:	6b 0e       	add	r6, r27
    1a56:	8d 0e       	add	r8, r29
    1a58:	d4 0e       	add	r13, r20
    1a5a:	d7 0e       	add	r13, r23
    1a5c:	92 0e       	add	r9, r18
    1a5e:	9b 0e       	add	r9, r27
    1a60:	d7 0e       	add	r13, r23
    1a62:	a4 0e       	add	r10, r20
    1a64:	ad 0e       	add	r10, r29
    1a66:	b8 0e       	add	r11, r24
    1a68:	c1 0e       	add	r12, r17
    1a6a:	d7 0e       	add	r13, r23
    1a6c:	cf 0e       	add	r12, r31
    1a6e:	ca 0e       	add	r12, r26
toDateStr():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:83
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1a70:	1d 8a       	std	Y+21, r1	; 0x15
    1a72:	1c 8a       	std	Y+20, r1	; 0x14
    1a74:	8f e2       	ldi	r24, 0x2F	; 47
    1a76:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:87
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1a78:	60 91 b2 03 	lds	r22, 0x03B2	; 0x8003b2 <StDate>
    1a7c:	70 91 b3 03 	lds	r23, 0x03B3	; 0x8003b3 <StDate+0x1>
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:88
  lpad(dat, intbuf, '0', 2);
    1a88:	8e 01       	movw	r16, r28
    1a8a:	0f 5e       	subi	r16, 0xEF	; 239
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	42 e0       	ldi	r20, 0x02	; 2
    1a90:	be 01       	movw	r22, r28
    1a92:	6f 5f       	subi	r22, 0xFF	; 255
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	c8 01       	movw	r24, r16
    1a98:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:89
  inttostr(intbuf, StMonth);
    1a9c:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <StMonth>
    1aa0:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <StMonth+0x1>
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:90
  lpad(mon, intbuf, '0', 2);
    1aac:	7e 01       	movw	r14, r28
    1aae:	8e e0       	ldi	r24, 0x0E	; 14
    1ab0:	e8 0e       	add	r14, r24
    1ab2:	f1 1c       	adc	r15, r1
    1ab4:	42 e0       	ldi	r20, 0x02	; 2
    1ab6:	be 01       	movw	r22, r28
    1ab8:	6f 5f       	subi	r22, 0xFF	; 255
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	c7 01       	movw	r24, r14
    1abe:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:91
  inttostr(intbuf, StYear);
    1ac2:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <StYear>
    1ac6:	70 91 af 03 	lds	r23, 0x03AF	; 0x8003af <StYear+0x1>
    1aca:	ce 01       	movw	r24, r28
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:92
  lpad(year, intbuf, '0', 4);
    1ad2:	6e 01       	movw	r12, r28
    1ad4:	99 e0       	ldi	r25, 0x09	; 9
    1ad6:	c9 0e       	add	r12, r25
    1ad8:	d1 1c       	adc	r13, r1
    1ada:	44 e0       	ldi	r20, 0x04	; 4
    1adc:	be 01       	movw	r22, r28
    1ade:	6f 5f       	subi	r22, 0xFF	; 255
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:94

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    1ae8:	df 92       	push	r13
    1aea:	cf 92       	push	r12
    1aec:	ce 01       	movw	r24, r28
    1aee:	44 96       	adiw	r24, 0x14	; 20
    1af0:	9f 93       	push	r25
    1af2:	8f 93       	push	r24
    1af4:	ff 92       	push	r15
    1af6:	ef 92       	push	r14
    1af8:	9f 93       	push	r25
    1afa:	8f 93       	push	r24
    1afc:	1f 93       	push	r17
    1afe:	0f 93       	push	r16
    1b00:	85 e0       	ldi	r24, 0x05	; 5
    1b02:	8f 93       	push	r24
    1b04:	86 e0       	ldi	r24, 0x06	; 6
    1b06:	94 e0       	ldi	r25, 0x04	; 4
    1b08:	9f 93       	push	r25
    1b0a:	8f 93       	push	r24
    1b0c:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
getFormattedStr():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:126
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:198
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	65 96       	adiw	r28, 0x15	; 21
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:121
  // case mnuCmdSetYear:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    1b3c:	a0 91 04 04 	lds	r26, 0x0404	; 0x800404 <StHr>
    1b40:	b0 91 05 04 	lds	r27, 0x0405	; 0x800405 <StHr+0x1>
    1b44:	2c e3       	ldi	r18, 0x3C	; 60
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	0e 94 06 2b 	call	0x560c	; 0x560c <__usmulhisi3>
    1b4c:	00 91 02 04 	lds	r16, 0x0402	; 0x800402 <StMin>
    1b50:	10 91 03 04 	lds	r17, 0x0403	; 0x800403 <StMin+0x1>
    1b54:	01 2e       	mov	r0, r17
    1b56:	00 0c       	add	r0, r0
    1b58:	22 0b       	sbc	r18, r18
    1b5a:	33 0b       	sbc	r19, r19
    1b5c:	60 0f       	add	r22, r16
    1b5e:	71 1f       	adc	r23, r17
    1b60:	82 1f       	adc	r24, r18
    1b62:	93 1f       	adc	r25, r19
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:167
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1b64:	0e 94 88 0c 	call	0x1910	; 0x1910 <toTimeStr(char*, long, char) [clone .constprop.89]>
    1b68:	d8 cf       	rjmp	.-80     	; 0x1b1a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:124
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    1b6a:	60 91 c3 03 	lds	r22, 0x03C3	; 0x8003c3 <config+0xf>
    1b6e:	70 91 c4 03 	lds	r23, 0x03C4	; 0x8003c4 <config+0x10>
    1b72:	6d 30       	cpi	r22, 0x0D	; 13
    1b74:	71 05       	cpc	r23, r1
    1b76:	14 f0       	brlt	.+4      	; 0x1b7c <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x17a>
    1b78:	6c 50       	subi	r22, 0x0C	; 12
    1b7a:	71 09       	sbc	r23, r1
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:125
    lpad(h, intbuf, '0', 2);
    1b84:	8e 01       	movw	r16, r28
    1b86:	07 5f       	subi	r16, 0xF7	; 247
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	42 e0       	ldi	r20, 0x02	; 2
    1b8c:	be 01       	movw	r22, r28
    1b8e:	6f 5f       	subi	r22, 0xFF	; 255
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	c8 01       	movw	r24, r16
    1b94:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:126
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1b98:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <config+0xf>
    1b9c:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <config+0x10>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:131
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1ba0:	0c 97       	sbiw	r24, 0x0c	; 12
    1ba2:	1c f4       	brge	.+6      	; 0x1baa <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x1a8>
    1ba4:	83 e7       	ldi	r24, 0x73	; 115
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x1ac>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:126
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1baa:	8c e6       	ldi	r24, 0x6C	; 108
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	1f 93       	push	r17
    1bb4:	0f 93       	push	r16
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	8f 93       	push	r24
    1bba:	86 e0       	ldi	r24, 0x06	; 6
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	9f 93       	push	r25
    1bc0:	8f 93       	push	r24
    1bc2:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
    1bc6:	a4 cf       	rjmp	.-184    	; 0x1b10 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x10e>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:129
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    1bc8:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <config+0x11>
    1bcc:	70 91 c6 03 	lds	r23, 0x03C6	; 0x8003c6 <config+0x12>
    1bd0:	6d 30       	cpi	r22, 0x0D	; 13
    1bd2:	71 05       	cpc	r23, r1
    1bd4:	14 f0       	brlt	.+4      	; 0x1bda <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x1d8>
    1bd6:	6c 50       	subi	r22, 0x0C	; 12
    1bd8:	71 09       	sbc	r23, r1
    1bda:	ce 01       	movw	r24, r28
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:130
    lpad(h, intbuf, '0', 2);
    1be2:	8e 01       	movw	r16, r28
    1be4:	07 5f       	subi	r16, 0xF7	; 247
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	42 e0       	ldi	r20, 0x02	; 2
    1bea:	be 01       	movw	r22, r28
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:131
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1bf6:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <config+0x11>
    1bfa:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <config+0x12>
    1bfe:	d0 cf       	rjmp	.-96     	; 0x1ba0 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x19e>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:134
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    1c00:	60 91 ce 03 	lds	r22, 0x03CE	; 0x8003ce <config+0x1a>
    1c04:	70 91 cf 03 	lds	r23, 0x03CF	; 0x8003cf <config+0x1b>
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
    1c10:	2e e7       	ldi	r18, 0x7E	; 126
    1c12:	31 e0       	ldi	r19, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:154
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1c14:	3f 93       	push	r19
    1c16:	2f 93       	push	r18
    1c18:	40 c0       	rjmp	.+128    	; 0x1c9a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x298>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:137
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 2, inttostr(intbuf, Song1_Count), " Songs");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    1c1a:	60 91 c9 03 	lds	r22, 0x03C9	; 0x8003c9 <config+0x15>
    1c1e:	70 91 ca 03 	lds	r23, 0x03CA	; 0x8003ca <config+0x16>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
    1c2a:	2b c0       	rjmp	.+86     	; 0x1c82 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x280>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:140
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    1c2c:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <demoTime>
    1c30:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <demoTime+0x1>
    1c34:	b8 01       	movw	r22, r16
    1c36:	0d 30       	cpi	r16, 0x0D	; 13
    1c38:	11 05       	cpc	r17, r1
    1c3a:	14 f0       	brlt	.+4      	; 0x1c40 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x23e>
    1c3c:	6c 50       	subi	r22, 0x0C	; 12
    1c3e:	71 09       	sbc	r23, r1
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:141
    lpad(h, intbuf, '0', 2);
    1c48:	7e 01       	movw	r14, r28
    1c4a:	99 e0       	ldi	r25, 0x09	; 9
    1c4c:	e9 0e       	add	r14, r25
    1c4e:	f1 1c       	adc	r15, r1
    1c50:	42 e0       	ldi	r20, 0x02	; 2
    1c52:	be 01       	movw	r22, r28
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	c7 01       	movw	r24, r14
    1c5a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:142
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1c5e:	83 e7       	ldi	r24, 0x73	; 115
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0c 30       	cpi	r16, 0x0C	; 12
    1c64:	11 05       	cpc	r17, r1
    1c66:	14 f0       	brlt	.+4      	; 0x1c6c <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x26a>
    1c68:	8c e6       	ldi	r24, 0x6C	; 108
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	9f 93       	push	r25
    1c6e:	8f 93       	push	r24
    1c70:	ff 92       	push	r15
    1c72:	ef 92       	push	r14
    1c74:	a0 cf       	rjmp	.-192    	; 0x1bb6 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x1b4>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:145
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1c76:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <config+0x19>
    1c7a:	88 23       	and	r24, r24
    1c7c:	29 f0       	breq	.+10     	; 0x1c88 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x286>
    1c7e:	83 e1       	ldi	r24, 0x13	; 19
    1c80:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1c82:	9f 93       	push	r25
    1c84:	8f 93       	push	r24
    1c86:	3b c0       	rjmp	.+118    	; 0x1cfe <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x2fc>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:145
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1c88:	8a e7       	ldi	r24, 0x7A	; 122
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	fa cf       	rjmp	.-12     	; 0x1c82 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x280>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:148
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1c8e:	85 e8       	ldi	r24, 0x85	; 133
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	9f 93       	push	r25
    1c94:	8f 93       	push	r24
    1c96:	8d e8       	ldi	r24, 0x8D	; 141
    1c98:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:154
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1c9a:	9f 93       	push	r25
    1c9c:	8f 93       	push	r24
    1c9e:	8b cf       	rjmp	.-234    	; 0x1bb6 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x1b4>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:151
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1ca0:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <config+0x22>
    1ca4:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <config+0x23>
    1ca8:	63 30       	cpi	r22, 0x03	; 3
    1caa:	71 05       	cpc	r23, r1
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x2ae>
    1cae:	86 c0       	rjmp	.+268    	; 0x1dbc <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x3ba>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:154
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1cb0:	2f e9       	ldi	r18, 0x9F	; 159
    1cb2:	31 e0       	ldi	r19, 0x01	; 1
    1cb4:	8a e7       	ldi	r24, 0x7A	; 122
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	ad cf       	rjmp	.-166    	; 0x1c14 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x212>
    1cba:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <config+0x26>
    1cbe:	70 91 db 03 	lds	r23, 0x03DB	; 0x8003db <config+0x27>
    1cc2:	63 30       	cpi	r22, 0x03	; 3
    1cc4:	71 05       	cpc	r23, r1
    1cc6:	a1 f3       	breq	.-24     	; 0x1cb0 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x2ae>
    1cc8:	ce 01       	movw	r24, r28
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
    1cd0:	2f e6       	ldi	r18, 0x6F	; 111
    1cd2:	31 e0       	ldi	r19, 0x01	; 1
    1cd4:	9f cf       	rjmp	.-194    	; 0x1c14 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x212>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:157
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1cd6:	60 91 de 03 	lds	r22, 0x03DE	; 0x8003de <config+0x2a>
    1cda:	70 91 df 03 	lds	r23, 0x03DF	; 0x8003df <config+0x2b>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:162
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:163
    lpad(h, intbuf, '0', 3);
    1ce6:	8e 01       	movw	r16, r28
    1ce8:	07 5f       	subi	r16, 0xF7	; 247
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	43 e0       	ldi	r20, 0x03	; 3
    1cee:	be 01       	movw	r22, r28
    1cf0:	6f 5f       	subi	r22, 0xFF	; 255
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:164
    fmt(strbuf, 1, h);
    1cfa:	1f 93       	push	r17
    1cfc:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	8f 93       	push	r24
    1d02:	86 e0       	ldi	r24, 0x06	; 6
    1d04:	94 e0       	ldi	r25, 0x04	; 4
    1d06:	9f 93       	push	r25
    1d08:	8f 93       	push	r24
    1d0a:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	00 cf       	rjmp	.-512    	; 0x1b1a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:162
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1d1a:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <config+0x2c>
    1d1e:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <config+0x2d>
    1d22:	dd cf       	rjmp	.-70     	; 0x1cde <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x2dc>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:167
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1d24:	60 91 e2 03 	lds	r22, 0x03E2	; 0x8003e2 <config+0x2e>
    1d28:	70 91 e3 03 	lds	r23, 0x03E3	; 0x8003e3 <config+0x2f>
    1d2c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <config+0x30>
    1d30:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <config+0x31>
    1d34:	17 cf       	rjmp	.-466    	; 0x1b64 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:170
    break;
  case mnuCmdLt1OffTime:  
    toTimeStr(strbuf, Light1Off);
    1d36:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <config+0x32>
    1d3a:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <config+0x33>
    1d3e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <config+0x34>
    1d42:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <config+0x35>
    1d46:	0e cf       	rjmp	.-484    	; 0x1b64 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:173
    break;
  case mnuCmdPlrMorOnTime:
    toTimeStr(strbuf, PlayerMorTime);
    1d48:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <config+0x3e>
    1d4c:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <config+0x3f>
    1d50:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <config+0x40>
    1d54:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <config+0x41>
    1d58:	05 cf       	rjmp	.-502    	; 0x1b64 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:176
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    1d5a:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <config+0x42>
    1d5e:	70 91 f7 03 	lds	r23, 0x03F7	; 0x8003f7 <config+0x43>
    1d62:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <config+0x44>
    1d66:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:182
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1d6a:	0e 94 28 0c 	call	0x1850	; 0x1850 <toDurStr(char*, long, char) [clone .constprop.90]>
    1d6e:	d5 ce       	rjmp	.-598    	; 0x1b1a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:179
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    1d70:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <config+0x46>
    1d74:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <config+0x47>
    1d78:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <config+0x48>
    1d7c:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <config+0x49>
    1d80:	f1 ce       	rjmp	.-542    	; 0x1b64 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x162>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:182
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1d82:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <config+0x4a>
    1d86:	70 91 ff 03 	lds	r23, 0x03FF	; 0x8003ff <config+0x4b>
    1d8a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <config+0x4c>
    1d8e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <config+0x4d>
    1d92:	eb cf       	rjmp	.-42     	; 0x1d6a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x368>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:185
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    1d94:	60 91 d4 03 	lds	r22, 0x03D4	; 0x8003d4 <config+0x20>
    1d98:	70 91 d5 03 	lds	r23, 0x03D5	; 0x8003d5 <config+0x21>
    1d9c:	42 cf       	rjmp	.-380    	; 0x1c22 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x220>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:188
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1d9e:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <config+0x1e>
    1da2:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <config+0x1f>
    1da6:	3d cf       	rjmp	.-390    	; 0x1c22 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x220>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:191
    break;    
  case mnuCmdReset:
    strbuf[0] = 0;
    1da8:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <strbuf>
    1dac:	b6 ce       	rjmp	.-660    	; 0x1b1a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:194
    break;
  default:
    strcpy(strbuf, NotImp);
    1dae:	66 e3       	ldi	r22, 0x36	; 54
    1db0:	71 e0       	ldi	r23, 0x01	; 1
    1db2:	86 e0       	ldi	r24, 0x06	; 6
    1db4:	94 e0       	ldi	r25, 0x04	; 4
    1db6:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
    1dba:	af ce       	rjmp	.-674    	; 0x1b1a <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x118>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:151
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
    1dc4:	26 e7       	ldi	r18, 0x76	; 118
    1dc6:	31 e0       	ldi	r19, 0x01	; 1
    1dc8:	25 cf       	rjmp	.-438    	; 0x1c14 <Config::getFormattedStr(unsigned char) [clone .constprop.87]+0x212>

00001dca <showTime()>:
showTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:618

void showTime()
{
    1dca:	6f 92       	push	r6
    1dcc:	7f 92       	push	r7
    1dce:	9f 92       	push	r9
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	a3 97       	sbiw	r28, 0x23	; 35
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:622
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    1df4:	ce 01       	movw	r24, r28
    1df6:	09 96       	adiw	r24, 0x09	; 9
    1df8:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:562
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    1dfc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dfe:	66 23       	and	r22, r22
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <showTime()+0x3a>
    1e02:	e4 c0       	rjmp	.+456    	; 0x1fcc <showTime()+0x202>
    1e04:	6c 30       	cpi	r22, 0x0C	; 12
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:564
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:565
    return hh - 12;
    1e0a:	6c 50       	subi	r22, 0x0C	; 12
showTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:622
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	ce 01       	movw	r24, r28
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:623
    lpad(h, intbuf, '0', 2);
    1e16:	8e 01       	movw	r16, r28
    1e18:	08 5e       	subi	r16, 0xE8	; 232
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	42 e0       	ldi	r20, 0x02	; 2
    1e1e:	be 01       	movw	r22, r28
    1e20:	6f 5f       	subi	r22, 0xFF	; 255
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	c8 01       	movw	r24, r16
    1e26:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:624
    inttostr(intbuf, rtc.now().minute());
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	09 96       	adiw	r24, 0x09	; 9
    1e2e:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    1e32:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	ce 01       	movw	r24, r28
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:625
    lpad(m, intbuf, '0', 2);
    1e3e:	7e 01       	movw	r14, r28
    1e40:	2b e1       	ldi	r18, 0x1B	; 27
    1e42:	e2 0e       	add	r14, r18
    1e44:	f1 1c       	adc	r15, r1
    1e46:	42 e0       	ldi	r20, 0x02	; 2
    1e48:	be 01       	movw	r22, r28
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	c7 01       	movw	r24, r14
    1e50:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:626
    inttostr(intbuf, rtc.now().second());
    1e54:	ce 01       	movw	r24, r28
    1e56:	09 96       	adiw	r24, 0x09	; 9
    1e58:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    1e5c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:627
    lpad(s, intbuf, '0', 2);
    1e68:	6e 01       	movw	r12, r28
    1e6a:	3e e1       	ldi	r19, 0x1E	; 30
    1e6c:	c3 0e       	add	r12, r19
    1e6e:	d1 1c       	adc	r13, r1
    1e70:	42 e0       	ldi	r20, 0x02	; 2
    1e72:	be 01       	movw	r22, r28
    1e74:	6f 5f       	subi	r22, 0xFF	; 255
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	c6 01       	movw	r24, r12
    1e7a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:629

    lcd.setCursor(0, 0);
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:630
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    1e86:	ce 01       	movw	r24, r28
    1e88:	09 96       	adiw	r24, 0x09	; 9
    1e8a:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    1e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e90:	8c 30       	cpi	r24, 0x0C	; 12
    1e92:	08 f0       	brcs	.+2      	; 0x1e96 <showTime()+0xcc>
    1e94:	9d c0       	rjmp	.+314    	; 0x1fd0 <showTime()+0x206>
    1e96:	89 e9       	ldi	r24, 0x99	; 153
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	9f 93       	push	r25
    1e9c:	8f 93       	push	r24
    1e9e:	df 92       	push	r13
    1ea0:	cf 92       	push	r12
    1ea2:	80 ea       	ldi	r24, 0xA0	; 160
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	9f 93       	push	r25
    1ea8:	8f 93       	push	r24
    1eaa:	ff 92       	push	r15
    1eac:	ef 92       	push	r14
    1eae:	9f 93       	push	r25
    1eb0:	8f 93       	push	r24
    1eb2:	1f 93       	push	r17
    1eb4:	0f 93       	push	r16
    1eb6:	8d e9       	ldi	r24, 0x9D	; 157
    1eb8:	e8 2e       	mov	r14, r24
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	f8 2e       	mov	r15, r24
    1ebe:	ff 92       	push	r15
    1ec0:	ef 92       	push	r14
    1ec2:	97 e0       	ldi	r25, 0x07	; 7
    1ec4:	99 2e       	mov	r9, r25
    1ec6:	9f 92       	push	r9
    1ec8:	08 e2       	ldi	r16, 0x28	; 40
    1eca:	14 e0       	ldi	r17, 0x04	; 4
    1ecc:	1f 93       	push	r17
    1ece:	0f 93       	push	r16
    1ed0:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
    1ed4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:632

    inttostr(intbuf, rtc.now().day());
    1ed8:	ce 01       	movw	r24, r28
    1eda:	09 96       	adiw	r24, 0x09	; 9
    1edc:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    1ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:633
    lpad(dat, intbuf, '0', 2);
    1eec:	6e 01       	movw	r12, r28
    1eee:	81 e2       	ldi	r24, 0x21	; 33
    1ef0:	c8 0e       	add	r12, r24
    1ef2:	d1 1c       	adc	r13, r1
    1ef4:	42 e0       	ldi	r20, 0x02	; 2
    1ef6:	be 01       	movw	r22, r28
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	c6 01       	movw	r24, r12
    1efe:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:634
    inttostr(intbuf, rtc.now().year());
    1f02:	ce 01       	movw	r24, r28
    1f04:	09 96       	adiw	r24, 0x09	; 9
    1f06:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    1f0a:	69 85       	ldd	r22, Y+9	; 0x09
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	60 53       	subi	r22, 0x30	; 48
    1f10:	78 4f       	sbci	r23, 0xF8	; 248
showTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:634
    1f12:	ce 01       	movw	r24, r28
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:635
    lpad(year, intbuf, '0', 4);
    1f1a:	3e 01       	movw	r6, r28
    1f1c:	2f e0       	ldi	r18, 0x0F	; 15
    1f1e:	62 0e       	add	r6, r18
    1f20:	71 1c       	adc	r7, r1
    1f22:	44 e0       	ldi	r20, 0x04	; 4
    1f24:	be 01       	movw	r22, r28
    1f26:	6f 5f       	subi	r22, 0xFF	; 255
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	c3 01       	movw	r24, r6
    1f2c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <lpad(char*, char const*, char, unsigned char) [clone .constprop.91]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:636
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    1f30:	ce 01       	movw	r24, r28
    1f32:	09 96       	adiw	r24, 0x09	; 9
    1f34:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    1f38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f3a:	81 50       	subi	r24, 0x01	; 1
    1f3c:	99 0b       	sbc	r25, r25
    1f3e:	26 e0       	ldi	r18, 0x06	; 6
    1f40:	28 9f       	mul	r18, r24
    1f42:	f0 01       	movw	r30, r0
    1f44:	29 9f       	mul	r18, r25
    1f46:	f0 0d       	add	r31, r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	ef 59       	subi	r30, 0x9F	; 159
    1f4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	5e 01       	movw	r10, r28
    1f54:	34 e1       	ldi	r19, 0x14	; 20
    1f56:	a3 0e       	add	r10, r19
    1f58:	b1 1c       	adc	r11, r1
    1f5a:	c5 01       	movw	r24, r10
    1f5c:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:638

    lcd.setCursor(0, 1);
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:639
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
    1f68:	8c e9       	ldi	r24, 0x9C	; 156
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	9f 93       	push	r25
    1f6e:	8f 93       	push	r24
    1f70:	7f 92       	push	r7
    1f72:	6f 92       	push	r6
    1f74:	82 ea       	ldi	r24, 0xA2	; 162
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	9f 93       	push	r25
    1f7a:	8f 93       	push	r24
    1f7c:	bf 92       	push	r11
    1f7e:	af 92       	push	r10
    1f80:	9f 93       	push	r25
    1f82:	8f 93       	push	r24
    1f84:	df 92       	push	r13
    1f86:	cf 92       	push	r12
    1f88:	ff 92       	push	r15
    1f8a:	ef 92       	push	r14
    1f8c:	9f 92       	push	r9
    1f8e:	1f 93       	push	r17
    1f90:	0f 93       	push	r16
    1f92:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:640
}
    1fa4:	a3 96       	adiw	r28, 0x23	; 35
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	9f 90       	pop	r9
    1fc6:	7f 90       	pop	r7
    1fc8:	6f 90       	pop	r6
    1fca:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:563
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    1fcc:	6c e0       	ldi	r22, 0x0C	; 12
    1fce:	1e cf       	rjmp	.-452    	; 0x1e0c <showTime()+0x42>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:630
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(0, 0);
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    1fd0:	82 e9       	ldi	r24, 0x92	; 146
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	62 cf       	rjmp	.-316    	; 0x1e9a <showTime()+0xd0>

00001fd6 <PlayChant()>:
PlayChant():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1339
    myDFPlayer.stop();
}

int n = 1;
void PlayChant()
{
    1fd6:	cf 92       	push	r12
    1fd8:	df 92       	push	r13
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1341
    // Serial.println(String(hr));
    switch (playSong)
    1fde:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <playSong>
    1fe2:	e9 30       	cpi	r30, 0x09	; 9
    1fe4:	08 f5       	brcc	.+66     	; 0x2028 <PlayChant()+0x52>
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	e8 50       	subi	r30, 0x08	; 8
    1fea:	f0 4f       	sbci	r31, 0xF0	; 240
    1fec:	0c 94 00 2b 	jmp	0x5600	; 0x5600 <__tablejump2__>
    1ff0:	01 10       	cpse	r0, r1
    1ff2:	19 10       	cpse	r1, r9
    1ff4:	2b 10       	cpse	r2, r11
    1ff6:	3d 10       	cpse	r3, r13
    1ff8:	4f 10       	cpse	r4, r15
    1ffa:	64 10       	cpse	r6, r4
    1ffc:	99 10       	cpse	r9, r9
    1ffe:	ec 10       	cpse	r14, r12
    2000:	f4 10       	cpse	r15, r4
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1344
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    2002:	84 e0       	ldi	r24, 0x04	; 4
    2004:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2008:	89 2b       	or	r24, r25
    200a:	71 f0       	breq	.+28     	; 0x2028 <PlayChant()+0x52>
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	82 e1       	ldi	r24, 0x12	; 18
    2012:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1347
        {
            myDFPlayer.playMp3Folder(0);
            delay(1000);
    2016:	68 ee       	ldi	r22, 0xE8	; 232
    2018:	73 e0       	ldi	r23, 0x03	; 3
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1348
            playSong = Time;
    2022:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1435
    case Song_2:
        // if (digitalRead(STA_PIN))
        // {
        //     myDFPlayer.playFolder(6,random(1,config.Song2_Count));
        //     delay(1000);
            playSong = End_of_Song;
    2024:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <playSong>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1449
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	df 90       	pop	r13
    202e:	cf 90       	pop	r12
    2030:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1352
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    2032:	84 e0       	ldi	r24, 0x04	; 4
    2034:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2038:	89 2b       	or	r24, r25
    203a:	b1 f3       	breq	.-20     	; 0x2028 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1354
        {
            myDFPlayer.playFolder(1, bell.hour());
    203c:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <bell+0x3>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1355
            delay(1000);
    2046:	68 ee       	ldi	r22, 0xE8	; 232
    2048:	73 e0       	ldi	r23, 0x03	; 3
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1356
            playSong = English_Month;
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	e7 cf       	rjmp	.-50     	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1360
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    205c:	89 2b       	or	r24, r25
    205e:	21 f3       	breq	.-56     	; 0x2028 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1362
        {
            myDFPlayer.playFolder(47, bell.month());
    2060:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <bell+0x1>
    2064:	8f e2       	ldi	r24, 0x2F	; 47
    2066:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1363
            delay(1000);
    206a:	68 ee       	ldi	r22, 0xE8	; 232
    206c:	73 e0       	ldi	r23, 0x03	; 3
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1364
            playSong = English_Date;
    2076:	83 e0       	ldi	r24, 0x03	; 3
    2078:	d5 cf       	rjmp	.-86     	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1368
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    207a:	84 e0       	ldi	r24, 0x04	; 4
    207c:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2080:	89 2b       	or	r24, r25
    2082:	91 f2       	breq	.-92     	; 0x2028 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1370
        {
            myDFPlayer.playFolder(48, bell.day());
    2084:	60 91 ab 04 	lds	r22, 0x04AB	; 0x8004ab <bell+0x2>
    2088:	80 e3       	ldi	r24, 0x30	; 48
    208a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1371
            delay(1000);
    208e:	68 ee       	ldi	r22, 0xE8	; 232
    2090:	73 e0       	ldi	r23, 0x03	; 3
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1372
            playSong = Day_of_Week;
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	c3 cf       	rjmp	.-122    	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1376
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    209e:	84 e0       	ldi	r24, 0x04	; 4
    20a0:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    20a4:	89 2b       	or	r24, r25
    20a6:	09 f4       	brne	.+2      	; 0x20aa <PlayChant()+0xd4>
    20a8:	bf cf       	rjmp	.-130    	; 0x2028 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1378
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    20aa:	0e 94 a4 02 	call	0x548	; 0x548 <DateTime::dayOfTheWeek() const [clone .constprop.19]>
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	68 0f       	add	r22, r24
    20b2:	81 e3       	ldi	r24, 0x31	; 49
    20b4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1379
            delay(1000);
    20b8:	68 ee       	ldi	r22, 0xE8	; 232
    20ba:	73 e0       	ldi	r23, 0x03	; 3
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1380
            playSong = Tamil_Date;
    20c4:	85 e0       	ldi	r24, 0x05	; 5
    20c6:	ae cf       	rjmp	.-164    	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1384
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    20ce:	89 2b       	or	r24, r25
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <PlayChant()+0xfe>
    20d2:	aa cf       	rjmp	.-172    	; 0x2028 <PlayChant()+0x52>
    20d4:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <bell+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1386
        {
            if (bell.hour() == 6 || bell.hour() == 8 || bell.hour() == 10)
    20d8:	86 30       	cpi	r24, 0x06	; 6
    20da:	19 f0       	breq	.+6      	; 0x20e2 <PlayChant()+0x10c>
    20dc:	8d 7f       	andi	r24, 0xFD	; 253
    20de:	88 30       	cpi	r24, 0x08	; 8
    20e0:	c9 f4       	brne	.+50     	; 0x2114 <PlayChant()+0x13e>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    20e2:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <bell>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	80 53       	subi	r24, 0x30	; 48
    20ea:	98 4f       	sbci	r25, 0xF8	; 248
PlayChant():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1388
            {
                if (bell.year() == config.DataYear)
    20ec:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <config+0x1e>
    20f0:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <config+0x1f>
    20f4:	28 17       	cp	r18, r24
    20f6:	39 07       	cpc	r19, r25
    20f8:	79 f4       	brne	.+30     	; 0x2118 <PlayChant()+0x142>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1390
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    20fa:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <bell+0x1>
    20fe:	60 91 ab 04 	lds	r22, 0x04AB	; 0x8004ab <bell+0x2>
    2102:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1395
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    2104:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1396
                    delay(1000);
    2108:	68 ee       	ldi	r22, 0xE8	; 232
    210a:	73 e0       	ldi	r23, 0x03	; 3
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1402
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    2114:	86 e0       	ldi	r24, 0x06	; 6
    2116:	86 cf       	rjmp	.-244    	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1393
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    2118:	21 50       	subi	r18, 0x01	; 1
    211a:	31 09       	sbc	r19, r1
    211c:	28 17       	cp	r18, r24
    211e:	39 07       	cpc	r19, r25
    2120:	c9 f7       	brne	.-14     	; 0x2114 <PlayChant()+0x13e>
    2122:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <bell+0x1>
    2126:	8c 30       	cpi	r24, 0x0C	; 12
    2128:	a9 f7       	brne	.-22     	; 0x2114 <PlayChant()+0x13e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1395
                {
                    myDFPlayer.playFolder(50, bell.day());
    212a:	60 91 ab 04 	lds	r22, 0x04AB	; 0x8004ab <bell+0x2>
    212e:	82 e3       	ldi	r24, 0x32	; 50
    2130:	e9 cf       	rjmp	.-46     	; 0x2104 <PlayChant()+0x12e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1408
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2138:	89 2b       	or	r24, r25
    213a:	09 f4       	brne	.+2      	; 0x213e <PlayChant()+0x168>
    213c:	75 cf       	rjmp	.-278    	; 0x2028 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1410
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    213e:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <config+0x22>
    2142:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <config+0x23>
    2146:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <bell+0x3>
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	28 17       	cp	r18, r24
    214e:	39 07       	cpc	r19, r25
    2150:	19 f4       	brne	.+6      	; 0x2158 <PlayChant()+0x182>
    2152:	23 30       	cpi	r18, 0x03	; 3
    2154:	31 05       	cpc	r19, r1
    2156:	a9 f5       	brne	.+106    	; 0x21c2 <PlayChant()+0x1ec>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1416
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    2158:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <config+0x26>
    215c:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <config+0x27>
    2160:	a9 01       	movw	r20, r18
    2162:	44 5f       	subi	r20, 0xF4	; 244
    2164:	5f 4f       	sbci	r21, 0xFF	; 255
    2166:	84 17       	cp	r24, r20
    2168:	95 07       	cpc	r25, r21
    216a:	c1 f1       	breq	.+112    	; 0x21dc <PlayChant()+0x206>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1424
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                myDFPlayer.playMp3Folder(random(1,config.Song1_Count));
    216c:	c0 90 ce 03 	lds	r12, 0x03CE	; 0x8003ce <config+0x1a>
    2170:	d0 90 cf 03 	lds	r13, 0x03CF	; 0x8003cf <config+0x1b>
    2174:	0d 2c       	mov	r0, r13
    2176:	00 0c       	add	r0, r0
    2178:	ee 08       	sbc	r14, r14
    217a:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	c8 16       	cp	r12, r24
    2188:	d1 04       	cpc	r13, r1
    218a:	e1 04       	cpc	r14, r1
    218c:	f1 04       	cpc	r15, r1
    218e:	74 f0       	brlt	.+28     	; 0x21ac <PlayChant()+0x1d6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2190:	0e 94 76 29 	call	0x52ec	; 0x52ec <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    2194:	a7 01       	movw	r20, r14
    2196:	96 01       	movw	r18, r12
    2198:	21 50       	subi	r18, 0x01	; 1
    219a:	31 09       	sbc	r19, r1
    219c:	41 09       	sbc	r20, r1
    219e:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    21a0:	0e 94 32 2a 	call	0x5464	; 0x5464 <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	8f 4f       	sbci	r24, 0xFF	; 255
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
    21ac:	82 e1       	ldi	r24, 0x12	; 18
    21ae:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
PlayChant():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1425
                delay(1000);
    21b2:	68 ee       	ldi	r22, 0xE8	; 232
    21b4:	73 e0       	ldi	r23, 0x03	; 3
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1426
                playSong = Song_2;
    21be:	87 e0       	ldi	r24, 0x07	; 7
    21c0:	31 cf       	rjmp	.-414    	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1412
    case Song_1:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    21c2:	60 91 de 03 	lds	r22, 0x03DE	; 0x8003de <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1418
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.28]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1419
                delay(1000);
    21cc:	68 ee       	ldi	r22, 0xE8	; 232
    21ce:	73 e0       	ldi	r23, 0x03	; 3
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1435
    case Song_2:
        // if (digitalRead(STA_PIN))
        // {
        //     myDFPlayer.playFolder(6,random(1,config.Song2_Count));
        //     delay(1000);
            playSong = End_of_Song;
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	24 cf       	rjmp	.-440    	; 0x2024 <PlayChant()+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1416
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    21dc:	23 30       	cpi	r18, 0x03	; 3
    21de:	31 05       	cpc	r19, r1
    21e0:	29 f2       	breq	.-118    	; 0x216c <PlayChant()+0x196>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1418
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    21e2:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <config+0x2c>
    21e6:	ef cf       	rjmp	.-34     	; 0x21c6 <PlayChant()+0x1f0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1439
        //     delay(1000);
            playSong = End_of_Song;
        // }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    21e8:	84 e0       	ldi	r24, 0x04	; 4
    21ea:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    21ee:	89 2b       	or	r24, r25
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <PlayChant()+0x21e>
    21f2:	1a cf       	rjmp	.-460    	; 0x2028 <PlayChant()+0x52>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1441
        {
            playSong = Starting_Song;
    21f4:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <playSong>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1442
            lcd.clear();
    21f8:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1443
            appMode = APP_NORMAL_MODE;
    21fc:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1444
            timrLCD = millis();
    2200:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    2204:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <timrLCD>
    2208:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <timrLCD+0x1>
    220c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timrLCD+0x2>
    2210:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1445
            digitalWrite(AMP, LOW);
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1449
        }
        break;
    }
    2218:	ff 90       	pop	r15
    221a:	ef 90       	pop	r14
    221c:	df 90       	pop	r13
    221e:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1445
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    2220:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <digitalWrite>

00002224 <refreshMenuDisplay(unsigned char)>:
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1280
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	61 97       	sbiw	r28, 0x11	; 17
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1283
    char nameBuf[LCD_COLS + 1];
    byte cmdId;
    cmdId = Menu1.getCurrentItemCmdId();
    223a:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    223e:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1284
    lcd.setCursor(0, 0);
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1285
    if (Menu1.currentItemHasChildren())
    2248:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.96]>
    224c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <Menu1+0x6>
    2250:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <Menu1+0x3>
    2254:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <Menu1+0x4>
    2258:	88 23       	and	r24, r24
    225a:	49 f1       	breq	.+82     	; 0x22ae <refreshMenuDisplay(unsigned char)+0x8a>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    225c:	86 e0       	ldi	r24, 0x06	; 6
    225e:	98 9f       	mul	r25, r24
    2260:	e0 0d       	add	r30, r0
    2262:	f1 1d       	adc	r31, r1
    2264:	11 24       	eor	r1, r1
    2266:	31 96       	adiw	r30, 0x01	; 1
    2268:	65 91       	lpm	r22, Z+
    226a:	74 91       	lpm	r23, Z
    226c:	ce 01       	movw	r24, r28
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	0e 94 ce 29 	call	0x539c	; 0x539c <strcpy_P>
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1287
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    2274:	0e 94 cb 0a 	call	0x1596	; 0x1596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1288
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    2278:	8e e7       	ldi	r24, 0x7E	; 126
    227a:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1289
        lcd.print(strbuf);
    227e:	88 e2       	ldi	r24, 0x28	; 40
    2280:	94 e0       	ldi	r25, 0x04	; 4
    2282:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1290
        if (cmdId == mnuCmdLt1OnTime ||
    2286:	8b ee       	ldi	r24, 0xEB	; 235
    2288:	81 0f       	add	r24, r17
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1295
            cmdId == mnuCmdLt1OffTime ||
            cmdId == mnuCmdPlrMorOnTime ||
            cmdId == mnuCmdPlrEveOnTime)
        {
            lcd.setCursor(0, 1);
    228a:	61 e0       	ldi	r22, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1290
    if (Menu1.currentItemHasChildren())
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
        lcd.print(strbuf);
        if (cmdId == mnuCmdLt1OnTime ||
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	20 f0       	brcs	.+8      	; 0x2298 <refreshMenuDisplay(unsigned char)+0x74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1291
            cmdId == mnuCmdLt1OffTime ||
    2290:	81 2f       	mov	r24, r17
    2292:	8d 7f       	andi	r24, 0xFD	; 253
    2294:	88 31       	cpi	r24, 0x18	; 24
    2296:	31 f5       	brne	.+76     	; 0x22e4 <refreshMenuDisplay(unsigned char)+0xc0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1318
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1319
            lcd.print(" ");
    229e:	8e e9       	ldi	r24, 0x9E	; 158
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1320
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    22a6:	81 2f       	mov	r24, r17
    22a8:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Config::getFormattedStr(unsigned char) [clone .constprop.87]>
    22ac:	20 c0       	rjmp	.+64     	; 0x22ee <refreshMenuDisplay(unsigned char)+0xca>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:53
    22ae:	86 e0       	ldi	r24, 0x06	; 6
    22b0:	98 9f       	mul	r25, r24
    22b2:	e0 0d       	add	r30, r0
    22b4:	f1 1d       	adc	r31, r1
    22b6:	11 24       	eor	r1, r1
    22b8:	31 96       	adiw	r30, 0x01	; 1
    22ba:	65 91       	lpm	r22, Z+
    22bc:	74 91       	lpm	r23, Z
    22be:	ce 01       	movw	r24, r28
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	0e 94 ce 29 	call	0x539c	; 0x539c <strcpy_P>
refreshMenuDisplay():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1307
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
        }
    }
    else
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    22c6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1308
        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    22ca:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    22ce:	18 2f       	mov	r17, r24
    22d0:	81 11       	cpse	r24, r1
    22d2:	1b c0       	rjmp	.+54     	; 0x230a <refreshMenuDisplay(unsigned char)+0xe6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1310
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    22d4:	8f e7       	ldi	r24, 0x7F	; 127
    22d6:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1311
            lcd.print(strbuf);
    22da:	88 e2       	ldi	r24, 0x28	; 40
    22dc:	94 e0       	ldi	r25, 0x04	; 4
    22de:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1312
            lcd.setCursor(0, 1);
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1313
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    22ea:	81 e2       	ldi	r24, 0x21	; 33
    22ec:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1320
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    22ee:	0e 94 cb 0a 	call	0x1596	; 0x1596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>
    22f2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1323
        }
    }
}
    22f6:	61 96       	adiw	r28, 0x11	; 17
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1317
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
    230a:	88 e2       	ldi	r24, 0x28	; 40
    230c:	94 e0       	ldi	r25, 0x04	; 4
    230e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1318
            lcd.setCursor(0, 1);
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	c1 cf       	rjmp	.-126    	; 0x2298 <refreshMenuDisplay(unsigned char)+0x74>

00002316 <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2316:	1f 92       	push	r1
    2318:	0f 92       	push	r0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	0f 92       	push	r0
    231e:	11 24       	eor	r1, r1
    2320:	2f 93       	push	r18
    2322:	3f 93       	push	r19
    2324:	8f 93       	push	r24
    2326:	9f 93       	push	r25
    2328:	af 93       	push	r26
    232a:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    232c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_millis>
    2330:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_millis+0x1>
    2334:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_millis+0x2>
    2338:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    233c:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    2340:	23 e0       	ldi	r18, 0x03	; 3
    2342:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    2344:	2d 37       	cpi	r18, 0x7D	; 125
    2346:	68 f1       	brcs	.+90     	; 0x23a2 <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    2348:	26 e8       	ldi	r18, 0x86	; 134
    234a:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    234c:	02 96       	adiw	r24, 0x02	; 2
    234e:	a1 1d       	adc	r26, r1
    2350:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2352:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    2356:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_millis>
    235a:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_millis+0x1>
    235e:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_millis+0x2>
    2362:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    2366:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <timer0_overflow_count>
    236a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x1>
    236e:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x2>
    2372:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <timer0_overflow_count+0x3>
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	a1 1d       	adc	r26, r1
    237a:	b1 1d       	adc	r27, r1
    237c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <timer0_overflow_count>
    2380:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <timer0_overflow_count+0x1>
    2384:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <timer0_overflow_count+0x2>
    2388:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    238c:	bf 91       	pop	r27
    238e:	af 91       	pop	r26
    2390:	9f 91       	pop	r25
    2392:	8f 91       	pop	r24
    2394:	3f 91       	pop	r19
    2396:	2f 91       	pop	r18
    2398:	0f 90       	pop	r0
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	0f 90       	pop	r0
    239e:	1f 90       	pop	r1
    23a0:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	a1 1d       	adc	r26, r1
    23a6:	b1 1d       	adc	r27, r1
    23a8:	d4 cf       	rjmp	.-88     	; 0x2352 <__vector_16+0x3c>

000023aa <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    23aa:	1f 92       	push	r1
    23ac:	0f 92       	push	r0
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	0f 92       	push	r0
    23b2:	11 24       	eor	r1, r1
    23b4:	2f 93       	push	r18
    23b6:	3f 93       	push	r19
    23b8:	4f 93       	push	r20
    23ba:	5f 93       	push	r21
    23bc:	6f 93       	push	r22
    23be:	7f 93       	push	r23
    23c0:	8f 93       	push	r24
    23c2:	9f 93       	push	r25
    23c4:	af 93       	push	r26
    23c6:	bf 93       	push	r27
    23c8:	ef 93       	push	r30
    23ca:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    23cc:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
    23d0:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	49 f0       	breq	.+18     	; 0x23ea <__vector_3+0x40>
    23d8:	a6 85       	ldd	r26, Z+14	; 0x0e
    23da:	b7 85       	ldd	r27, Z+15	; 0x0f
    23dc:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    23de:	96 8d       	ldd	r25, Z+30	; 0x1e
    23e0:	91 ff       	sbrs	r25, 1
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    23e4:	9c 91       	ld	r25, X
    23e6:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    23e8:	a1 f4       	brne	.+40     	; 0x2412 <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    23ea:	ff 91       	pop	r31
    23ec:	ef 91       	pop	r30
    23ee:	bf 91       	pop	r27
    23f0:	af 91       	pop	r26
    23f2:	9f 91       	pop	r25
    23f4:	8f 91       	pop	r24
    23f6:	7f 91       	pop	r23
    23f8:	6f 91       	pop	r22
    23fa:	5f 91       	pop	r21
    23fc:	4f 91       	pop	r20
    23fe:	3f 91       	pop	r19
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	0f 90       	pop	r0
    2408:	1f 90       	pop	r1
    240a:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    240c:	9c 91       	ld	r25, X
    240e:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2410:	61 f7       	brne	.-40     	; 0x23ea <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2412:	a3 89       	ldd	r26, Z+19	; 0x13
    2414:	b4 89       	ldd	r27, Z+20	; 0x14
    2416:	9c 91       	ld	r25, X
    2418:	85 89       	ldd	r24, Z+21	; 0x15
    241a:	80 95       	com	r24
    241c:	89 23       	and	r24, r25
    241e:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2420:	86 89       	ldd	r24, Z+22	; 0x16
    2422:	97 89       	ldd	r25, Z+23	; 0x17
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2428:	60 8d       	ldd	r22, Z+24	; 0x18
    242a:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    242c:	a6 85       	ldd	r26, Z+14	; 0x0e
    242e:	b7 85       	ldd	r27, Z+15	; 0x0f
    2430:	55 85       	ldd	r21, Z+13	; 0x0d
    2432:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2434:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2436:	cb 01       	movw	r24, r22
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    243c:	82 2f       	mov	r24, r18
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2446:	4c 91       	ld	r20, X
    2448:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    244a:	09 f0       	breq	.+2      	; 0x244e <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    244c:	20 68       	ori	r18, 0x80	; 128
    244e:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    2450:	91 f7       	brne	.-28     	; 0x2436 <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    2452:	86 8d       	ldd	r24, Z+30	; 0x1e
    2454:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    2456:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2458:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	8f 73       	andi	r24, 0x3F	; 63
    2462:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    2464:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <SoftwareSerial::_receive_buffer_head>
    2468:	38 17       	cp	r19, r24
    246a:	99 f0       	breq	.+38     	; 0x2492 <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    246c:	a0 91 dc 02 	lds	r26, 0x02DC	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ae 56       	subi	r26, 0x6E	; 110
    2474:	bd 4f       	sbci	r27, 0xFD	; 253
    2476:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    2478:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    247c:	82 8d       	ldd	r24, Z+26	; 0x1a
    247e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2484:	a3 89       	ldd	r26, Z+19	; 0x13
    2486:	b4 89       	ldd	r27, Z+20	; 0x14
    2488:	8c 91       	ld	r24, X
    248a:	95 89       	ldd	r25, Z+21	; 0x15
    248c:	89 2b       	or	r24, r25
    248e:	8c 93       	st	X, r24
    2490:	ac cf       	rjmp	.-168    	; 0x23ea <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    2492:	86 8d       	ldd	r24, Z+30	; 0x1e
    2494:	81 60       	ori	r24, 0x01	; 1
    2496:	86 8f       	std	Z+30, r24	; 0x1e
    2498:	f1 cf       	rjmp	.-30     	; 0x247c <__vector_3+0xd2>

0000249a <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    249a:	1f 92       	push	r1
    249c:	0f 92       	push	r0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	0f 92       	push	r0
    24a2:	11 24       	eor	r1, r1
    24a4:	2f 93       	push	r18
    24a6:	3f 93       	push	r19
    24a8:	4f 93       	push	r20
    24aa:	5f 93       	push	r21
    24ac:	6f 93       	push	r22
    24ae:	7f 93       	push	r23
    24b0:	8f 93       	push	r24
    24b2:	9f 93       	push	r25
    24b4:	af 93       	push	r26
    24b6:	bf 93       	push	r27
    24b8:	ef 93       	push	r30
    24ba:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    24bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    24c0:	88 7f       	andi	r24, 0xF8	; 248
    24c2:	80 36       	cpi	r24, 0x60	; 96
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <__vector_24+0x2e>
    24c6:	4a c0       	rjmp	.+148    	; 0x255c <__vector_24+0xc2>
    24c8:	f0 f5       	brcc	.+124    	; 0x2546 <__vector_24+0xac>
    24ca:	88 32       	cpi	r24, 0x28	; 40
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <__vector_24+0x36>
    24ce:	a7 c0       	rjmp	.+334    	; 0x261e <__vector_24+0x184>
    24d0:	18 f5       	brcc	.+70     	; 0x2518 <__vector_24+0x7e>
    24d2:	80 31       	cpi	r24, 0x10	; 16
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <__vector_24+0x3e>
    24d6:	9b c0       	rjmp	.+310    	; 0x260e <__vector_24+0x174>
    24d8:	b8 f4       	brcc	.+46     	; 0x2508 <__vector_24+0x6e>
    24da:	88 23       	and	r24, r24
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <__vector_24+0x46>
    24de:	f9 c0       	rjmp	.+498    	; 0x26d2 <__vector_24+0x238>
    24e0:	88 30       	cpi	r24, 0x08	; 8
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <__vector_24+0x4c>
    24e4:	94 c0       	rjmp	.+296    	; 0x260e <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    24e6:	ff 91       	pop	r31
    24e8:	ef 91       	pop	r30
    24ea:	bf 91       	pop	r27
    24ec:	af 91       	pop	r26
    24ee:	9f 91       	pop	r25
    24f0:	8f 91       	pop	r24
    24f2:	7f 91       	pop	r23
    24f4:	6f 91       	pop	r22
    24f6:	5f 91       	pop	r21
    24f8:	4f 91       	pop	r20
    24fa:	3f 91       	pop	r19
    24fc:	2f 91       	pop	r18
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
    2504:	1f 90       	pop	r1
    2506:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2508:	88 31       	cpi	r24, 0x18	; 24
    250a:	09 f4       	brne	.+2      	; 0x250e <__vector_24+0x74>
    250c:	88 c0       	rjmp	.+272    	; 0x261e <__vector_24+0x184>
    250e:	80 32       	cpi	r24, 0x20	; 32
    2510:	51 f7       	brne	.-44     	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2512:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_error>
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2518:	80 34       	cpi	r24, 0x40	; 64
    251a:	09 f4       	brne	.+2      	; 0x251e <__vector_24+0x84>
    251c:	9d c0       	rjmp	.+314    	; 0x2658 <__vector_24+0x1be>
    251e:	40 f4       	brcc	.+16     	; 0x2530 <__vector_24+0x96>
    2520:	80 33       	cpi	r24, 0x30	; 48
    2522:	b9 f3       	breq	.-18     	; 0x2512 <__vector_24+0x78>
    2524:	88 33       	cpi	r24, 0x38	; 56
    2526:	f9 f6       	brne	.-66     	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2528:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    252c:	85 ec       	ldi	r24, 0xC5	; 197
    252e:	b0 c0       	rjmp	.+352    	; 0x2690 <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2530:	80 35       	cpi	r24, 0x50	; 80
    2532:	09 f4       	brne	.+2      	; 0x2536 <__vector_24+0x9c>
    2534:	85 c0       	rjmp	.+266    	; 0x2640 <__vector_24+0x1a6>
    2536:	88 35       	cpi	r24, 0x58	; 88
    2538:	09 f4       	brne	.+2      	; 0x253c <__vector_24+0xa2>
    253a:	96 c0       	rjmp	.+300    	; 0x2668 <__vector_24+0x1ce>
    253c:	88 34       	cpi	r24, 0x48	; 72
    253e:	99 f6       	brne	.-90     	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2540:	0e 94 91 06 	call	0xd22	; 0xd22 <twi_stop>
    2544:	d0 cf       	rjmp	.-96     	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2546:	88 39       	cpi	r24, 0x98	; 152
    2548:	09 f4       	brne	.+2      	; 0x254c <__vector_24+0xb2>
    254a:	8c c0       	rjmp	.+280    	; 0x2664 <__vector_24+0x1ca>
    254c:	38 f5       	brcc	.+78     	; 0x259c <__vector_24+0x102>
    254e:	88 37       	cpi	r24, 0x78	; 120
    2550:	29 f0       	breq	.+10     	; 0x255c <__vector_24+0xc2>
    2552:	50 f4       	brcc	.+20     	; 0x2568 <__vector_24+0xce>
    2554:	88 36       	cpi	r24, 0x68	; 104
    2556:	11 f0       	breq	.+4      	; 0x255c <__vector_24+0xc2>
    2558:	80 37       	cpi	r24, 0x70	; 112
    255a:	29 f6       	brne	.-118    	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2562:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_rxBufferIndex>
    2566:	57 c0       	rjmp	.+174    	; 0x2616 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2568:	88 38       	cpi	r24, 0x88	; 136
    256a:	09 f4       	brne	.+2      	; 0x256e <__vector_24+0xd4>
    256c:	7b c0       	rjmp	.+246    	; 0x2664 <__vector_24+0x1ca>
    256e:	80 39       	cpi	r24, 0x90	; 144
    2570:	19 f0       	breq	.+6      	; 0x2578 <__vector_24+0xde>
    2572:	80 38       	cpi	r24, 0x80	; 128
    2574:	09 f0       	breq	.+2      	; 0x2578 <__vector_24+0xde>
    2576:	b7 cf       	rjmp	.-146    	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2578:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_rxBufferIndex>
    257c:	80 32       	cpi	r24, 0x20	; 32
    257e:	08 f0       	brcs	.+2      	; 0x2582 <__vector_24+0xe8>
    2580:	71 c0       	rjmp	.+226    	; 0x2664 <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2582:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <twi_rxBufferIndex>
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	8e 0f       	add	r24, r30
    258a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <twi_rxBufferIndex>
    258e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	ef 58       	subi	r30, 0x8F	; 143
    2596:	fd 4f       	sbci	r31, 0xFD	; 253
    2598:	80 83       	st	Z, r24
    259a:	3d c0       	rjmp	.+122    	; 0x2616 <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    259c:	80 3b       	cpi	r24, 0xB0	; 176
    259e:	39 f0       	breq	.+14     	; 0x25ae <__vector_24+0x114>
    25a0:	e0 f4       	brcc	.+56     	; 0x25da <__vector_24+0x140>
    25a2:	80 3a       	cpi	r24, 0xA0	; 160
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <__vector_24+0x10e>
    25a6:	79 c0       	rjmp	.+242    	; 0x269a <__vector_24+0x200>
    25a8:	88 3a       	cpi	r24, 0xA8	; 168
    25aa:	09 f0       	breq	.+2      	; 0x25ae <__vector_24+0x114>
    25ac:	9c cf       	rjmp	.-200    	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25ae:	84 e0       	ldi	r24, 0x04	; 4
    25b0:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25b4:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25b8:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25bc:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <twi_onSlaveTransmit>
    25c0:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <twi_onSlaveTransmit+0x1>
    25c4:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25c6:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
    25ca:	81 11       	cpse	r24, r1
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    25d4:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <twi_txBuffer>
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    25da:	80 3c       	cpi	r24, 0xC0	; 192
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <__vector_24+0x146>
    25de:	a6 cf       	rjmp	.-180    	; 0x252c <__vector_24+0x92>
    25e0:	88 3c       	cpi	r24, 0xC8	; 200
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <__vector_24+0x14c>
    25e4:	a3 cf       	rjmp	.-186    	; 0x252c <__vector_24+0x92>
    25e6:	88 3b       	cpi	r24, 0xB8	; 184
    25e8:	09 f0       	breq	.+2      	; 0x25ec <__vector_24+0x152>
    25ea:	7d cf       	rjmp	.-262    	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25ec:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <twi_txBufferIndex>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	8e 0f       	add	r24, r30
    25f4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <twi_txBufferIndex>
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	e1 5b       	subi	r30, 0xB1	; 177
    25fc:	fd 4f       	sbci	r31, 0xFD	; 253
    25fe:	80 81       	ld	r24, Z
    2600:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2604:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <twi_txBufferIndex>
    2608:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <twi_txBufferLength>
    260c:	29 c0       	rjmp	.+82     	; 0x2660 <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    260e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2612:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2616:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    261c:	64 cf       	rjmp	.-312    	; 0x24e6 <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    261e:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <twi_masterBufferIndex>
    2622:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_masterBufferLength>
    2626:	98 17       	cp	r25, r24
    2628:	58 f5       	brcc	.+86     	; 0x2680 <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    262a:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <twi_masterBufferIndex>
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	8e 0f       	add	r24, r30
    2632:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <twi_masterBufferIndex>
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	eb 59       	subi	r30, 0x9B	; 155
    263a:	fc 4f       	sbci	r31, 0xFC	; 252
    263c:	80 81       	ld	r24, Z
    263e:	e9 cf       	rjmp	.-46     	; 0x2612 <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2640:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <twi_masterBufferIndex>
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	8e 0f       	add	r24, r30
    2648:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <twi_masterBufferIndex>
    264c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	eb 59       	subi	r30, 0x9B	; 155
    2654:	fc 4f       	sbci	r31, 0xFC	; 252
    2656:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2658:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <twi_masterBufferIndex>
    265c:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2660:	98 17       	cp	r25, r24
    2662:	c8 f2       	brcs	.-78     	; 0x2616 <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2664:	85 e8       	ldi	r24, 0x85	; 133
    2666:	d8 cf       	rjmp	.-80     	; 0x2618 <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2668:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <twi_masterBufferIndex>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	8e 0f       	add	r24, r30
    2670:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <twi_masterBufferIndex>
    2674:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	eb 59       	subi	r30, 0x9B	; 155
    267c:	fc 4f       	sbci	r31, 0xFC	; 252
    267e:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    2680:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_sendStop>
    2684:	81 11       	cpse	r24, r1
    2686:	5c cf       	rjmp	.-328    	; 0x2540 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    268e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2690:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2694:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_state>
    2698:	26 cf       	rjmp	.-436    	; 0x24e6 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    269a:	85 ec       	ldi	r24, 0xC5	; 197
    269c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    26a0:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    26a4:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_rxBufferIndex>
    26a8:	80 32       	cpi	r24, 0x20	; 32
    26aa:	30 f4       	brcc	.+12     	; 0x26b8 <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    26ac:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <twi_rxBufferIndex>
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	ef 58       	subi	r30, 0x8F	; 143
    26b4:	fd 4f       	sbci	r31, 0xFD	; 253
    26b6:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    26b8:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <twi_rxBufferIndex>
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_onSlaveReceive>
    26c2:	f0 91 3e 03 	lds	r31, 0x033E	; 0x80033e <twi_onSlaveReceive+0x1>
    26c6:	81 e7       	ldi	r24, 0x71	; 113
    26c8:	92 e0       	ldi	r25, 0x02	; 2
    26ca:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    26cc:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_rxBufferIndex>
    26d0:	0a cf       	rjmp	.-492    	; 0x24e6 <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    26d2:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <twi_error>
    26d6:	34 cf       	rjmp	.-408    	; 0x2540 <__vector_24+0xa6>

000026d8 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089>:
_GLOBAL__I_65535_0_ChantBellV3.2.ino.cpp.o.3089():
    26d8:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <Wire+0x3>
    26dc:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <Wire+0x2>
    26e0:	88 ee       	ldi	r24, 0xE8	; 232
    26e2:	93 e0       	ldi	r25, 0x03	; 3
    26e4:	a0 e0       	ldi	r26, 0x00	; 0
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <Wire+0x4>
    26ec:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <Wire+0x5>
    26f0:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <Wire+0x6>
    26f4:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <Wire+0x7>
    26f8:	20 e4       	ldi	r18, 0x40	; 64
    26fa:	31 e0       	ldi	r19, 0x01	; 1
    26fc:	30 93 56 04 	sts	0x0456, r19	; 0x800456 <Wire+0x1>
    2700:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <Wire>
    2704:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <mySoftwareSerial+0x3>
    2708:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <mySoftwareSerial+0x2>
    270c:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <mySoftwareSerial+0x4>
    2710:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <mySoftwareSerial+0x5>
    2714:	a0 93 e7 04 	sts	0x04E7, r26	; 0x8004e7 <mySoftwareSerial+0x6>
    2718:	b0 93 e8 04 	sts	0x04E8, r27	; 0x8004e8 <mySoftwareSerial+0x7>
    271c:	8e e5       	ldi	r24, 0x5E	; 94
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <mySoftwareSerial+0x1>
    2724:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <mySoftwareSerial>
    2728:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <mySoftwareSerial+0x17>
    272c:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <mySoftwareSerial+0x16>
    2730:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <mySoftwareSerial+0x19>
    2734:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <mySoftwareSerial+0x18>
    2738:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <mySoftwareSerial+0x1b>
    273c:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <mySoftwareSerial+0x1a>
    2740:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <mySoftwareSerial+0x1d>
    2744:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <mySoftwareSerial+0x1c>
    2748:	60 91 ff 04 	lds	r22, 0x04FF	; 0x8004ff <mySoftwareSerial+0x1e>
    274c:	6e 7f       	andi	r22, 0xFE	; 254
    274e:	6d 7f       	andi	r22, 0xFD	; 253
    2750:	60 93 ff 04 	sts	0x04FF, r22	; 0x8004ff <mySoftwareSerial+0x1e>
    2754:	66 95       	lsr	r22
    2756:	61 70       	andi	r22, 0x01	; 1
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	68 27       	eor	r22, r24
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
    276a:	e0 ee       	ldi	r30, 0xE0	; 224
    276c:	f3 e0       	ldi	r31, 0x03	; 3
    276e:	e4 91       	lpm	r30, Z
    2770:	e0 93 f1 04 	sts	0x04F1, r30	; 0x8004f1 <mySoftwareSerial+0x10>
    2774:	e9 ec       	ldi	r30, 0xC9	; 201
    2776:	f3 e0       	ldi	r31, 0x03	; 3
    2778:	e4 91       	lpm	r30, Z
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	e4 54       	subi	r30, 0x44	; 68
    2782:	fc 4f       	sbci	r31, 0xFC	; 252
    2784:	85 91       	lpm	r24, Z+
    2786:	94 91       	lpm	r25, Z
    2788:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <mySoftwareSerial+0x12>
    278c:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <mySoftwareSerial+0x11>
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
    2798:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <mySoftwareSerial+0x1e>
    279c:	81 fd       	sbrc	r24, 1
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0xd0>
    27a0:	61 e0       	ldi	r22, 0x01	; 1
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
    27a8:	82 e0       	ldi	r24, 0x02	; 2
    27aa:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <mySoftwareSerial+0xc>
    27ae:	ef ed       	ldi	r30, 0xDF	; 223
    27b0:	f3 e0       	ldi	r31, 0x03	; 3
    27b2:	e4 91       	lpm	r30, Z
    27b4:	e0 93 ee 04 	sts	0x04EE, r30	; 0x8004ee <mySoftwareSerial+0xd>
    27b8:	e8 ec       	ldi	r30, 0xC8	; 200
    27ba:	f3 e0       	ldi	r31, 0x03	; 3
    27bc:	e4 91       	lpm	r30, Z
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	ee 0f       	add	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	ee 54       	subi	r30, 0x4E	; 78
    27c6:	fc 4f       	sbci	r31, 0xFC	; 252
    27c8:	25 91       	lpm	r18, Z+
    27ca:	34 91       	lpm	r19, Z
    27cc:	30 93 f0 04 	sts	0x04F0, r19	; 0x8004f0 <mySoftwareSerial+0xf>
    27d0:	20 93 ef 04 	sts	0x04EF, r18	; 0x8004ef <mySoftwareSerial+0xe>
    27d4:	44 ef       	ldi	r20, 0xF4	; 244
    27d6:	51 e0       	ldi	r21, 0x01	; 1
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	40 93 c1 04 	sts	0x04C1, r20	; 0x8004c1 <myDFPlayer+0x6>
    27e0:	50 93 c2 04 	sts	0x04C2, r21	; 0x8004c2 <myDFPlayer+0x7>
    27e4:	60 93 c3 04 	sts	0x04C3, r22	; 0x8004c3 <myDFPlayer+0x8>
    27e8:	70 93 c4 04 	sts	0x04C4, r23	; 0x8004c4 <myDFPlayer+0x9>
    27ec:	9a e0       	ldi	r25, 0x0A	; 10
    27ee:	e7 e1       	ldi	r30, 0x17	; 23
    27f0:	f1 e0       	ldi	r31, 0x01	; 1
    27f2:	af ec       	ldi	r26, 0xCF	; 207
    27f4:	b4 e0       	ldi	r27, 0x04	; 4
    27f6:	01 90       	ld	r0, Z+
    27f8:	0d 92       	st	X+, r0
    27fa:	9a 95       	dec	r25
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0x11e>
    27fe:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <myDFPlayer+0x1e>
    2802:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <myDFPlayer+0x1f>
    2806:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <myDFPlayer+0x24>
    280a:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <myDFPlayer+0x25>
    280e:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <lcd+0x3>
    2812:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <lcd+0x2>
    2816:	22 e5       	ldi	r18, 0x52	; 82
    2818:	31 e0       	ldi	r19, 0x01	; 1
    281a:	30 93 b0 04 	sts	0x04B0, r19	; 0x8004b0 <lcd+0x1>
    281e:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <lcd>
    2822:	97 e2       	ldi	r25, 0x27	; 39
    2824:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <lcd+0x4>
    2828:	90 e1       	ldi	r25, 0x10	; 16
    282a:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <lcd+0x9>
    282e:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <lcd+0xa>
    2832:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <lcd+0xb>
    2836:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <bell+0x5>
    283a:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <bell+0x4>
    283e:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <bell+0x3>
    2842:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <bell>
    2846:	e7 ea       	ldi	r30, 0xA7	; 167
    2848:	f3 e0       	ldi	r31, 0x03	; 3
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	8c 30       	cpi	r24, 0x0C	; 12
    284e:	51 f0       	breq	.+20     	; 0x2864 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0x18c>
    2850:	94 91       	lpm	r25, Z
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	09 f4       	brne	.+2      	; 0x2858 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0x180>
    2856:	9f 5f       	subi	r25, 0xFF	; 255
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	28 0f       	add	r18, r24
    285c:	31 96       	adiw	r30, 0x01	; 1
    285e:	99 23       	and	r25, r25
    2860:	09 f4       	brne	.+2      	; 0x2864 <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0x18c>
    2862:	4d c0       	rjmp	.+154    	; 0x28fe <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0x226>
    2864:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <bell+0x1>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <bell+0x2>
    286e:	64 ea       	ldi	r22, 0xA4	; 164
    2870:	71 e0       	ldi	r23, 0x01	; 1
    2872:	81 e6       	ldi	r24, 0x61	; 97
    2874:	94 e0       	ldi	r25, 0x04	; 4
    2876:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    287a:	68 ea       	ldi	r22, 0xA8	; 168
    287c:	71 e0       	ldi	r23, 0x01	; 1
    287e:	87 e6       	ldi	r24, 0x67	; 103
    2880:	94 e0       	ldi	r25, 0x04	; 4
    2882:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    2886:	6c ea       	ldi	r22, 0xAC	; 172
    2888:	71 e0       	ldi	r23, 0x01	; 1
    288a:	8d e6       	ldi	r24, 0x6D	; 109
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    2892:	60 eb       	ldi	r22, 0xB0	; 176
    2894:	71 e0       	ldi	r23, 0x01	; 1
    2896:	83 e7       	ldi	r24, 0x73	; 115
    2898:	94 e0       	ldi	r25, 0x04	; 4
    289a:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    289e:	64 eb       	ldi	r22, 0xB4	; 180
    28a0:	71 e0       	ldi	r23, 0x01	; 1
    28a2:	89 e7       	ldi	r24, 0x79	; 121
    28a4:	94 e0       	ldi	r25, 0x04	; 4
    28a6:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28aa:	68 eb       	ldi	r22, 0xB8	; 184
    28ac:	71 e0       	ldi	r23, 0x01	; 1
    28ae:	8f e7       	ldi	r24, 0x7F	; 127
    28b0:	94 e0       	ldi	r25, 0x04	; 4
    28b2:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28b6:	6c eb       	ldi	r22, 0xBC	; 188
    28b8:	71 e0       	ldi	r23, 0x01	; 1
    28ba:	85 e8       	ldi	r24, 0x85	; 133
    28bc:	94 e0       	ldi	r25, 0x04	; 4
    28be:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28c2:	60 ec       	ldi	r22, 0xC0	; 192
    28c4:	71 e0       	ldi	r23, 0x01	; 1
    28c6:	8b e8       	ldi	r24, 0x8B	; 139
    28c8:	94 e0       	ldi	r25, 0x04	; 4
    28ca:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28ce:	64 ec       	ldi	r22, 0xC4	; 196
    28d0:	71 e0       	ldi	r23, 0x01	; 1
    28d2:	81 e9       	ldi	r24, 0x91	; 145
    28d4:	94 e0       	ldi	r25, 0x04	; 4
    28d6:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28da:	68 ec       	ldi	r22, 0xC8	; 200
    28dc:	71 e0       	ldi	r23, 0x01	; 1
    28de:	87 e9       	ldi	r24, 0x97	; 151
    28e0:	94 e0       	ldi	r25, 0x04	; 4
    28e2:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28e6:	6c ec       	ldi	r22, 0xCC	; 204
    28e8:	71 e0       	ldi	r23, 0x01	; 1
    28ea:	8d e9       	ldi	r24, 0x9D	; 157
    28ec:	94 e0       	ldi	r25, 0x04	; 4
    28ee:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    28f2:	60 ed       	ldi	r22, 0xD0	; 208
    28f4:	71 e0       	ldi	r23, 0x01	; 1
    28f6:	83 ea       	ldi	r24, 0xA3	; 163
    28f8:	94 e0       	ldi	r25, 0x04	; 4
    28fa:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <String::String(char const*)>
    28fe:	82 2f       	mov	r24, r18
    2900:	a5 cf       	rjmp	.-182    	; 0x284c <global constructors keyed to 65535_0_ChantBellV3.2.ino.cpp.o.3089+0x174>

00002902 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	aa 97       	sbiw	r28, 0x2a	; 42
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2916:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2918:	84 b5       	in	r24, 0x24	; 36
    291a:	83 60       	ori	r24, 0x03	; 3
    291c:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    291e:	85 b5       	in	r24, 0x25	; 37
    2920:	83 60       	ori	r24, 0x03	; 3
    2922:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2924:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    2928:	81 60       	ori	r24, 0x01	; 1
    292a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2934:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2938:	81 60       	ori	r24, 0x01	; 1
    293a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    293e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2942:	81 60       	ori	r24, 0x01	; 1
    2944:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2948:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    294c:	84 60       	ori	r24, 0x04	; 4
    294e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2952:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2956:	81 60       	ori	r24, 0x01	; 1
    2958:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    295c:	87 e8       	ldi	r24, 0x87	; 135
    295e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2962:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    2966:	80 e4       	ldi	r24, 0x40	; 64
    2968:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    296c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2970:	80 64       	ori	r24, 0x40	; 64
    2972:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    2976:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    297a:	86 fd       	sbrc	r24, 6
    297c:	fc cf       	rjmp	.-8      	; 0x2976 <main+0x74>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    297e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    2982:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    2986:	76 2f       	mov	r23, r22
    2988:	68 2f       	mov	r22, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:93
template <typename T, size_t N>
size_t ArraySize(T (&)[N]) { return N; }

void setup()
{
    randomSeed(analogRead(A0));
    298a:	07 2e       	mov	r0, r23
    298c:	00 0c       	add	r0, r0
    298e:	88 0b       	sbc	r24, r24
    2990:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    2992:	61 15       	cp	r22, r1
    2994:	71 05       	cpc	r23, r1
    2996:	81 05       	cpc	r24, r1
    2998:	91 05       	cpc	r25, r1
    299a:	11 f0       	breq	.+4      	; 0x29a0 <main+0x9e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    299c:	0e 94 c5 29 	call	0x538a	; 0x538a <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:95
    char intstr[5];
    pinMode(AMP, OUTPUT);
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	8c e0       	ldi	r24, 0x0C	; 12
    29a4:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:96
    pinMode(AUDCONT, OUTPUT);
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	8a e0       	ldi	r24, 0x0A	; 10
    29ac:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:97
    pinMode(AUTOLIGHT, OUTPUT);
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	8f e0       	ldi	r24, 0x0F	; 15
    29b4:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:98
    pinMode(AUTOPLAY, OUTPUT);
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	8e e0       	ldi	r24, 0x0E	; 14
    29bc:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:99
    pinMode(RELAY1, OUTPUT);
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	8b e0       	ldi	r24, 0x0B	; 11
    29c4:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:100
    pinMode(STA_PIN, INPUT_PULLUP);
    29c8:	62 e0       	ldi	r22, 0x02	; 2
    29ca:	84 e0       	ldi	r24, 0x04	; 4
    29cc:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:101
    pinMode(SELECT_BUT, INPUT_PULLUP);
    29d0:	62 e0       	ldi	r22, 0x02	; 2
    29d2:	85 e0       	ldi	r24, 0x05	; 5
    29d4:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:102
    pinMode(UP_BUT, INPUT_PULLUP);
    29d8:	62 e0       	ldi	r22, 0x02	; 2
    29da:	86 e0       	ldi	r24, 0x06	; 6
    29dc:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:103
    pinMode(DOWN_BUT, INPUT_PULLUP);
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	87 e0       	ldi	r24, 0x07	; 7
    29e4:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:104
    pinMode(BACK_BUT, INPUT_PULLUP);
    29e8:	62 e0       	ldi	r22, 0x02	; 2
    29ea:	88 e0       	ldi	r24, 0x08	; 8
    29ec:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:105
    pinMode(MODE_BUT, INPUT_PULLUP);
    29f0:	62 e0       	ldi	r22, 0x02	; 2
    29f2:	80 e1       	ldi	r24, 0x10	; 16
    29f4:	0e 94 b7 03 	call	0x76e	; 0x76e <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:106
    Wire.begin();
    29f8:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.40]>
load():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:210
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    29fc:	4e e4       	ldi	r20, 0x4E	; 78
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	84 eb       	ldi	r24, 0xB4	; 180
    2a06:	93 e0       	ldi	r25, 0x03	; 3
    2a08:	0e 94 0a 2a 	call	0x5414	; 0x5414 <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:211
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    2a0c:	67 e2       	ldi	r22, 0x27	; 39
    2a0e:	71 e0       	ldi	r23, 0x01	; 1
    2a10:	84 eb       	ldi	r24, 0xB4	; 180
    2a12:	93 e0       	ldi	r25, 0x03	; 3
    2a14:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <strcmp>
    2a18:	89 2b       	or	r24, r25
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <main+0x11c>
    2a1c:	aa c0       	rjmp	.+340    	; 0x2b72 <main+0x270>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    2a1e:	67 e2       	ldi	r22, 0x27	; 39
    2a20:	71 e0       	ldi	r23, 0x01	; 1
    2a22:	84 eb       	ldi	r24, 0xB4	; 180
    2a24:	93 e0       	ldi	r25, 0x03	; 3
    2a26:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:12
  Song1_Count = 100;
    2a2a:	84 e6       	ldi	r24, 0x64	; 100
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <config+0x1b>
    2a32:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:13
  Song2_Count = 100;
    2a36:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <config+0x1d>
    2a3a:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:14
  startTime = 5; //5AM
    2a3e:	85 e0       	ldi	r24, 0x05	; 5
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <config+0x10>
    2a46:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:15
  endTime = 22; // 10PM
    2a4a:	86 e1       	ldi	r24, 0x16	; 22
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x12>
    2a52:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:16
  backLightDur = 20; //Sec
    2a56:	84 e1       	ldi	r24, 0x14	; 20
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <config+0x14>
    2a5e:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:17
  vol = 20;
    2a62:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x16>
    2a66:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:18
  MorSong1Time = 3;
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x23>
    2a72:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x22>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:19
  MorSong2Time = 3;
    2a76:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <config+0x25>
    2a7a:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:20
  EveSong2Time = 3;
    2a7e:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <config+0x29>
    2a82:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:21
  EveSong1Time = 3;
    2a86:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <config+0x27>
    2a8a:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:22
  MorSongNo = 1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <config+0x2b>
    2a96:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:23
  EveSongNo = 2;
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2d>
    2aa2:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:25

  Light1On = 1079;
    2aa6:	87 e3       	ldi	r24, 0x37	; 55
    2aa8:	94 e0       	ldi	r25, 0x04	; 4
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2e>
    2ab2:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2f>
    2ab6:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <config+0x30>
    2aba:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <config+0x31>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:26
  Light1Off = 359;
    2abe:	87 e6       	ldi	r24, 0x67	; 103
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	a0 e0       	ldi	r26, 0x00	; 0
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0x32>
    2aca:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x33>
    2ace:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <config+0x34>
    2ad2:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:27
  Light2On = 0;
    2ad6:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <config+0x36>
    2ada:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <config+0x37>
    2ade:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <config+0x38>
    2ae2:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:28
  Light2Off = 0;
    2ae6:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <config+0x3a>
    2aea:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <config+0x3b>
    2aee:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <config+0x3c>
    2af2:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:29
  PlayerMorTime = 300;
    2af6:	8c e2       	ldi	r24, 0x2C	; 44
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <config+0x3e>
    2b02:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <config+0x3f>
    2b06:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <config+0x40>
    2b0a:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:30
  PlayerMorDur= 115;
    2b0e:	83 e7       	ldi	r24, 0x73	; 115
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e0       	ldi	r26, 0x00	; 0
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <config+0x42>
    2b1a:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <config+0x43>
    2b1e:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <config+0x44>
    2b22:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:31
  PlayerEveTime = 1020;
    2b26:	4c ef       	ldi	r20, 0xFC	; 252
    2b28:	53 e0       	ldi	r21, 0x03	; 3
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	70 e0       	ldi	r23, 0x00	; 0
    2b2e:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <config+0x46>
    2b32:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <config+0x47>
    2b36:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <config+0x48>
    2b3a:	70 93 fd 03 	sts	0x03FD, r23	; 0x8003fd <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:32
  PlayerEveDur = 115;
    2b3e:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <config+0x4a>
    2b42:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <config+0x4b>
    2b46:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <config+0x4c>
    2b4a:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:34

  AutoPlay = 0;
    2b4e:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:35
  AutoLight = 0;
    2b52:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:36
  SchlZone = 0;
    2b56:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:38

  SerialNo = 204;
    2b5a:	8c ec       	ldi	r24, 0xCC	; 204
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x21>
    2b62:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:39
  DataYear = 2022;
    2b66:	86 ee       	ldi	r24, 0xE6	; 230
    2b68:	97 e0       	ldi	r25, 0x07	; 7
    2b6a:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <config+0x1f>
    2b6e:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <config+0x1e>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    2b72:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.40]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2b76:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    2b7a:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    2b7e:	82 30       	cpi	r24, 0x02	; 2
    2b80:	18 f0       	brcs	.+6      	; 0x2b88 <main+0x286>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    2b82:	98 e0       	ldi	r25, 0x08	; 8
    2b84:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    2b88:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2b8c:	62 e3       	ldi	r22, 0x32	; 50
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2b98:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <lcd+0xb>
    2b9c:	8f ea       	ldi	r24, 0xAF	; 175
    2b9e:	94 e0       	ldi	r25, 0x04	; 4
    2ba0:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    2ba4:	68 ee       	ldi	r22, 0xE8	; 232
    2ba6:	73 e0       	ldi	r23, 0x03	; 3
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 23 04 	call	0x846	; 0x846 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2bb0:	60 e3       	ldi	r22, 0x30	; 48
    2bb2:	8f ea       	ldi	r24, 0xAF	; 175
    2bb4:	94 e0       	ldi	r25, 0x04	; 4
    2bb6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    2bba:	84 e9       	ldi	r24, 0x94	; 148
    2bbc:	91 e1       	ldi	r25, 0x11	; 17
    2bbe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    2bc2:	60 e3       	ldi	r22, 0x30	; 48
    2bc4:	8f ea       	ldi	r24, 0xAF	; 175
    2bc6:	94 e0       	ldi	r25, 0x04	; 4
    2bc8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    2bcc:	84 e9       	ldi	r24, 0x94	; 148
    2bce:	91 e1       	ldi	r25, 0x11	; 17
    2bd0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    2bd4:	60 e3       	ldi	r22, 0x30	; 48
    2bd6:	8f ea       	ldi	r24, 0xAF	; 175
    2bd8:	94 e0       	ldi	r25, 0x04	; 4
    2bda:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    2bde:	86 e9       	ldi	r24, 0x96	; 150
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2be6:	60 e2       	ldi	r22, 0x20	; 32
    2be8:	8f ea       	ldi	r24, 0xAF	; 175
    2bea:	94 e0       	ldi	r25, 0x04	; 4
    2bec:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2bf0:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <lcd+0x5>
    2bf4:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	8f ea       	ldi	r24, 0xAF	; 175
    2bfa:	94 e0       	ldi	r25, 0x04	; 4
    2bfc:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2c00:	84 e0       	ldi	r24, 0x04	; 4
    2c02:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	6c e0       	ldi	r22, 0x0C	; 12
    2c0a:	8f ea       	ldi	r24, 0xAF	; 175
    2c0c:	94 e0       	ldi	r25, 0x04	; 4
    2c0e:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    2c12:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2c16:	62 e0       	ldi	r22, 0x02	; 2
    2c18:	d6 2e       	mov	r13, r22
    2c1a:	d0 92 b6 04 	sts	0x04B6, r13	; 0x8004b6 <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	66 e0       	ldi	r22, 0x06	; 6
    2c22:	8f ea       	ldi	r24, 0xAF	; 175
    2c24:	94 e0       	ldi	r25, 0x04	; 4
    2c26:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	62 e0       	ldi	r22, 0x02	; 2
    2c2e:	8f ea       	ldi	r24, 0xAF	; 175
    2c30:	94 e0       	ldi	r25, 0x04	; 4
    2c32:	0e 94 76 07 	call	0xeec	; 0xeec <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    2c36:	80 ed       	ldi	r24, 0xD0	; 208
    2c38:	97 e0       	ldi	r25, 0x07	; 7
    2c3a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2c3e:	88 e0       	ldi	r24, 0x08	; 8
    2c40:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	8f ea       	ldi	r24, 0xAF	; 175
    2c48:	94 e0       	ldi	r25, 0x04	; 4
    2c4a:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:110
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	85 e0       	ldi	r24, 0x05	; 5
    2c52:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:111
    lcd.print(F("QTRON"));
    2c56:	85 e3       	ldi	r24, 0x35	; 53
    2c58:	93 e0       	ldi	r25, 0x03	; 3
    2c5a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:112
    lcd.setCursor(0, 1);
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:113
    lcd.print(F("DEVOTIONAL CLOCK"));
    2c66:	84 e2       	ldi	r24, 0x24	; 36
    2c68:	93 e0       	ldi	r25, 0x03	; 3
    2c6a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:114
    delay(2000);
    2c6e:	60 ed       	ldi	r22, 0xD0	; 208
    2c70:	77 e0       	ldi	r23, 0x07	; 7
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:115
    lcd.clear();
    2c7a:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:116
    lcd.setCursor(0,0);
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:117
    inttostr(intstr, config.DataYear);
    2c86:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <config+0x1e>
    2c8a:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <config+0x1f>
    2c8e:	9e 01       	movw	r18, r28
    2c90:	2f 5f       	subi	r18, 0xFF	; 255
    2c92:	3f 4f       	sbci	r19, 0xFF	; 255
    2c94:	39 01       	movw	r6, r18
    2c96:	c9 01       	movw	r24, r18
    2c98:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:118
    lcd.print(fmt(strbuf, 2, "Ver : 3.2/", intstr));
    2c9c:	7f 92       	push	r7
    2c9e:	6f 92       	push	r6
    2ca0:	84 ed       	ldi	r24, 0xD4	; 212
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	9f 93       	push	r25
    2ca6:	8f 93       	push	r24
    2ca8:	df 92       	push	r13
    2caa:	08 e2       	ldi	r16, 0x28	; 40
    2cac:	14 e0       	ldi	r17, 0x04	; 4
    2cae:	1f 93       	push	r17
    2cb0:	0f 93       	push	r16
    2cb2:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
    2cb6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:119
    lcd.setCursor(0,1);
    2cba:	61 e0       	ldi	r22, 0x01	; 1
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:120
    inttostr(intstr, config.SerialNo);
    2cc2:	60 91 d4 03 	lds	r22, 0x03D4	; 0x8003d4 <config+0x20>
    2cc6:	70 91 d5 03 	lds	r23, 0x03D5	; 0x8003d5 <config+0x21>
    2cca:	c3 01       	movw	r24, r6
    2ccc:	0e 94 86 0a 	call	0x150c	; 0x150c <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:121
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    2cd0:	7f 92       	push	r7
    2cd2:	6f 92       	push	r6
    2cd4:	8f ed       	ldi	r24, 0xDF	; 223
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	9f 93       	push	r25
    2cda:	8f 93       	push	r24
    2cdc:	df 92       	push	r13
    2cde:	1f 93       	push	r17
    2ce0:	0f 93       	push	r16
    2ce2:	0e 94 cf 0b 	call	0x179e	; 0x179e <fmt(char*, unsigned char, ...)>
    2ce6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:122
    delay(2000);
    2cea:	60 ed       	ldi	r22, 0xD0	; 208
    2cec:	77 e0       	ldi	r23, 0x07	; 7
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:123
    lcd.clear();
    2cf6:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:124
    lcd.setCursor(3, 0);
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
    2cfe:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:125
    lcd.print("Loading...");
    2d02:	8d ee       	ldi	r24, 0xED	; 237
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:126
    if (!digitalRead(SELECT_BUT))
    2d0a:	85 e0       	ldi	r24, 0x05	; 5
    2d0c:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	89 2b       	or	r24, r25
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <main+0x41e>
    2d1e:	06 c1       	rjmp	.+524    	; 0x2f2c <main+0x62a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:128
    {
        lcd.setCursor(0, 1);
    2d20:	61 e0       	ldi	r22, 0x01	; 1
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:129
        lcd.print("Service Mode");
    2d28:	88 ef       	ldi	r24, 0xF8	; 248
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:130
        serviceMode = true;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <serviceMode>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2d36:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    2d38:	08 e6       	ldi	r16, 0x68	; 104
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:816
    @brief  Start I2C for the DS1307 and test succesful connection
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
boolean RTC_DS1307::begin(void) {
  Wire.begin();
    2d3a:	0e 94 85 03 	call	0x70a	; 0x70a <TwoWire::begin() [clone .constprop.40]>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2d3e:	10 93 8a 03 	sts	0x038A, r17	; 0x80038a <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    2d42:	00 93 ac 03 	sts	0x03AC, r16	; 0x8003ac <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2d46:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    2d4a:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:818
  Wire.beginTransmission(DS1307_ADDRESS);
  if (Wire.endTransmission() == 0)
    2d4e:	0e 94 38 02 	call	0x470	; 0x470 <TwoWire::endTransmission() [clone .constprop.83]>
    2d52:	f8 2e       	mov	r15, r24
    2d54:	81 11       	cpse	r24, r1
    2d56:	ed c0       	rjmp	.+474    	; 0x2f32 <main+0x630>
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2d58:	10 93 8a 03 	sts	0x038A, r17	; 0x80038a <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2d5c:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    2d60:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <TwoWire::txBufferLength>
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:831
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	85 e5       	ldi	r24, 0x55	; 85
    2d68:	94 e0       	ldi	r25, 0x04	; 4
    2d6a:	0e 94 18 07 	call	0xe30	; 0xe30 <TwoWire::write(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:832
  Wire.endTransmission();
    2d6e:	0e 94 38 02 	call	0x470	; 0x470 <TwoWire::endTransmission() [clone .constprop.83]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:834

  Wire.requestFrom(DS1307_ADDRESS, 1);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 03 09 	call	0x1206	; 0x1206 <TwoWire::requestFrom(int, int) [clone .constprop.45]>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:835
  uint8_t ss = Wire._I2C_READ();
    2d7a:	85 e5       	ldi	r24, 0x55	; 85
    2d7c:	94 e0       	ldi	r25, 0x04	; 4
    2d7e:	0e 94 d1 06 	call	0xda2	; 0xda2 <TwoWire::read()>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:142
    {
        lcd.clear();
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    if (!rtc.isrunning())
    2d82:	87 ff       	sbrs	r24, 7
    2d84:	0e c0       	rjmp	.+28     	; 0x2da2 <main+0x4a0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:144
    {
        lcd.clear();
    2d86:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:145
        lcd.print(F("ERR 02"));
    2d8a:	86 e1       	ldi	r24, 0x16	; 22
    2d8c:	93 e0       	ldi	r25, 0x03	; 3
    2d8e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:146
        delay(2000);
    2d92:	60 ed       	ldi	r22, 0xD0	; 208
    2d94:	77 e0       	ldi	r23, 0x07	; 7
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:147
        serviceMode = true;
    2d9e:	10 93 df 02 	sts	0x02DF, r17	; 0x8002df <serviceMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:152
    }
    

    // Initialize DF Player...............
    if (digitalRead(BACK_BUT))
    2da2:	88 e0       	ldi	r24, 0x08	; 8
    2da4:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    2da8:	89 2b       	or	r24, r25
    2daa:	09 f4       	brne	.+2      	; 0x2dae <main+0x4ac>
    2dac:	12 c1       	rjmp	.+548    	; 0x2fd2 <main+0x6d0>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2dae:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <mySoftwareSerial+0x1b>
    2db2:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <mySoftwareSerial+0x1a>
    2db6:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <mySoftwareSerial+0x19>
    2dba:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <mySoftwareSerial+0x18>
    2dbe:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <mySoftwareSerial+0x17>
    2dc2:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2dc6:	8d e9       	ldi	r24, 0x9D	; 157
    2dc8:	91 e0       	ldi	r25, 0x01	; 1
    2dca:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <mySoftwareSerial+0x1d>
    2dce:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2dd2:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mySoftwareSerial+0xc>
    2dd6:	87 31       	cpi	r24, 0x17	; 23
    2dd8:	08 f0       	brcs	.+2      	; 0x2ddc <main+0x4da>
    2dda:	4b c0       	rjmp	.+150    	; 0x2e72 <main+0x570>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2ddc:	2d eb       	ldi	r18, 0xBD	; 189
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	30 93 f8 04 	sts	0x04F8, r19	; 0x8004f8 <mySoftwareSerial+0x17>
    2de4:	20 93 f7 04 	sts	0x04F7, r18	; 0x8004f7 <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2de8:	2b e9       	ldi	r18, 0x9B	; 155
    2dea:	31 e0       	ldi	r19, 0x01	; 1
    2dec:	30 93 fa 04 	sts	0x04FA, r19	; 0x8004fa <mySoftwareSerial+0x19>
    2df0:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2df4:	2c e2       	ldi	r18, 0x2C	; 44
    2df6:	31 e0       	ldi	r19, 0x01	; 1
    2df8:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <mySoftwareSerial+0x1b>
    2dfc:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2e00:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
    2e04:	94 e0       	ldi	r25, 0x04	; 4
begin():
    2e06:	88 30       	cpi	r24, 0x08	; 8
    2e08:	54 f0       	brlt	.+20     	; 0x2e1e <main+0x51c>
main():
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
begin():
    2e0c:	8e 30       	cpi	r24, 0x0E	; 14
    2e0e:	3c f0       	brlt	.+14     	; 0x2e1e <main+0x51c>
main():
    2e10:	92 e0       	ldi	r25, 0x02	; 2
begin():
    2e12:	84 31       	cpi	r24, 0x14	; 20
    2e14:	24 f0       	brlt	.+8      	; 0x2e1e <main+0x51c>
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	86 31       	cpi	r24, 0x16	; 22
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <main+0x51c>
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	92 2b       	or	r25, r18
    2e20:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2e24:	2d e6       	ldi	r18, 0x6D	; 109
    2e26:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2e28:	88 30       	cpi	r24, 0x08	; 8
    2e2a:	74 f0       	brlt	.+28     	; 0x2e48 <main+0x546>
    2e2c:	8e 30       	cpi	r24, 0x0E	; 14
    2e2e:	0c f4       	brge	.+2      	; 0x2e32 <main+0x530>
    2e30:	87 c0       	rjmp	.+270    	; 0x2f40 <main+0x63e>
    2e32:	84 31       	cpi	r24, 0x14	; 20
    2e34:	3c f0       	brlt	.+14     	; 0x2e44 <main+0x542>
    2e36:	86 31       	cpi	r24, 0x16	; 22
    2e38:	0c f4       	brge	.+2      	; 0x2e3c <main+0x53a>
    2e3a:	82 c0       	rjmp	.+260    	; 0x2f40 <main+0x63e>
main():
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
begin():
    2e40:	86 31       	cpi	r24, 0x16	; 22
    2e42:	11 f4       	brne	.+4      	; 0x2e48 <main+0x546>
main():
    2e44:	2c e6       	ldi	r18, 0x6C	; 108
    2e46:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2e48:	30 93 f5 04 	sts	0x04F5, r19	; 0x8004f5 <mySoftwareSerial+0x14>
    2e4c:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2e50:	88 30       	cpi	r24, 0x08	; 8
    2e52:	0c f0       	brlt	.+2      	; 0x2e56 <main+0x554>
    2e54:	78 c0       	rjmp	.+240    	; 0x2f46 <main+0x644>
    2e56:	ff 24       	eor	r15, r15
    2e58:	f3 94       	inc	r15
    2e5a:	01 c0       	rjmp	.+2      	; 0x2e5e <main+0x55c>
    2e5c:	ff 0c       	add	r15, r15
    2e5e:	8a 95       	dec	r24
    2e60:	ea f7       	brpl	.-6      	; 0x2e5c <main+0x55a>
    2e62:	f0 92 f6 04 	sts	0x04F6, r15	; 0x8004f6 <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2e66:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <mySoftwareSerial+0x1c>
    2e6a:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <mySoftwareSerial+0x1d>
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <main+0x56c>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    2e72:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <mySoftwareSerial+0x1a>
    2e76:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <mySoftwareSerial+0x1b>
    2e7a:	89 2b       	or	r24, r25
    2e7c:	49 f1       	breq	.+82     	; 0x2ed0 <main+0x5ce>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    2e7e:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
    2e82:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
    2e86:	b4 e0       	ldi	r27, 0x04	; 4
    2e88:	e1 3e       	cpi	r30, 0xE1	; 225
    2e8a:	fb 07       	cpc	r31, r27
    2e8c:	09 f1       	breq	.+66     	; 0x2ed0 <main+0x5ce>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    2e8e:	30 97       	sbiw	r30, 0x00	; 0
    2e90:	39 f0       	breq	.+14     	; 0x2ea0 <main+0x59e>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2e92:	a3 89       	ldd	r26, Z+19	; 0x13
    2e94:	b4 89       	ldd	r27, Z+20	; 0x14
    2e96:	9c 91       	ld	r25, X
    2e98:	85 89       	ldd	r24, Z+21	; 0x15
    2e9a:	80 95       	com	r24
    2e9c:	89 23       	and	r24, r25
    2e9e:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    2ea0:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <mySoftwareSerial+0x1e>
    2ea4:	8e 7f       	andi	r24, 0xFE	; 254
    2ea6:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    2eaa:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <SoftwareSerial::_receive_buffer_tail>
    2eae:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    2eb2:	81 ee       	ldi	r24, 0xE1	; 225
    2eb4:	94 e0       	ldi	r25, 0x04	; 4
    2eb6:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <SoftwareSerial::active_object+0x1>
    2eba:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2ebe:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <mySoftwareSerial+0x13>
    2ec2:	f0 91 f5 04 	lds	r31, 0x04F5	; 0x8004f5 <mySoftwareSerial+0x14>
    2ec6:	80 81       	ld	r24, Z
    2ec8:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <mySoftwareSerial+0x15>
    2ecc:	89 2b       	or	r24, r25
    2ece:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:155
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    2ed0:	64 ef       	ldi	r22, 0xF4	; 244
    2ed2:	71 e0       	ldi	r23, 0x01	; 1
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 23 04 	call	0x846	; 0x846 <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2edc:	01 ee       	ldi	r16, 0xE1	; 225
    2ede:	14 e0       	ldi	r17, 0x04	; 4
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2ee0:	dd 24       	eor	r13, r13
    2ee2:	d3 94       	inc	r13
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2ee4:	10 93 bc 04 	sts	0x04BC, r17	; 0x8004bc <myDFPlayer+0x1>
    2ee8:	00 93 bb 04 	sts	0x04BB, r16	; 0x8004bb <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2eec:	d0 92 d3 04 	sts	0x04D3, r13	; 0x8004d3 <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	8c e0       	ldi	r24, 0x0C	; 12
    2ef6:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    2efa:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    2efe:	4b 01       	movw	r8, r22
    2f00:	5c 01       	movw	r10, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    2f02:	0e 94 62 04 	call	0x8c4	; 0x8c4 <DFRobotDFPlayerMini::available() [clone .constprop.63]>
    2f06:	81 11       	cpse	r24, r1
    2f08:	2c c0       	rjmp	.+88     	; 0x2f62 <main+0x660>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    2f0a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    2f0e:	68 19       	sub	r22, r8
    2f10:	79 09       	sbc	r23, r9
    2f12:	8a 09       	sbc	r24, r10
    2f14:	9b 09       	sbc	r25, r11
    2f16:	61 3d       	cpi	r22, 0xD1	; 209
    2f18:	77 40       	sbci	r23, 0x07	; 7
    2f1a:	81 05       	cpc	r24, r1
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	08 f5       	brcc	.+66     	; 0x2f62 <main+0x660>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	cb 01       	movw	r24, r22
    2f26:	0e 94 23 04 	call	0x846	; 0x846 <delay>
    2f2a:	eb cf       	rjmp	.-42     	; 0x2f02 <main+0x600>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:134
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    2f2c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <serviceMode>
    2f30:	02 cf       	rjmp	.-508    	; 0x2d36 <main+0x434>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:138
    }
    while (!rtc.begin())
    {
        lcd.clear();
    2f32:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:139
        lcd.print(F("ERR 01")); // Couldn't find RTC
    2f36:	8d e1       	ldi	r24, 0x1D	; 29
    2f38:	93 e0       	ldi	r25, 0x03	; 3
    2f3a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
    2f3e:	fd ce       	rjmp	.-518    	; 0x2d3a <main+0x438>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2f40:	2b e6       	ldi	r18, 0x6B	; 107
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	81 cf       	rjmp	.-254    	; 0x2e48 <main+0x546>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2f46:	8e 30       	cpi	r24, 0x0E	; 14
    2f48:	14 f4       	brge	.+4      	; 0x2f4e <main+0x64c>
    2f4a:	88 50       	subi	r24, 0x08	; 8
    2f4c:	84 cf       	rjmp	.-248    	; 0x2e56 <main+0x554>
    2f4e:	86 31       	cpi	r24, 0x16	; 22
    2f50:	14 f4       	brge	.+4      	; 0x2f56 <main+0x654>
    2f52:	8e 50       	subi	r24, 0x0E	; 14
    2f54:	80 cf       	rjmp	.-256    	; 0x2e56 <main+0x554>
    2f56:	86 31       	cpi	r24, 0x16	; 22
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <main+0x65a>
    2f5a:	83 cf       	rjmp	.-250    	; 0x2e62 <main+0x560>
main():
    2f5c:	50 e4       	ldi	r21, 0x40	; 64
    2f5e:	f5 2e       	mov	r15, r21
    2f60:	80 cf       	rjmp	.-256    	; 0x2e62 <main+0x560>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    2f62:	68 ec       	ldi	r22, 0xC8	; 200
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 23 04 	call	0x846	; 0x846 <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    2f6e:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    2f72:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    2f76:	84 30       	cpi	r24, 0x04	; 4
    2f78:	69 f0       	breq	.+26     	; 0x2f94 <main+0x692>
    2f7a:	89 30       	cpi	r24, 0x09	; 9
    2f7c:	59 f0       	breq	.+22     	; 0x2f94 <main+0x692>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:158
    {
        mySoftwareSerial.begin(9600);
        delay(500);
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.clear();
    2f7e:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:159
            lcd.setCursor(0, 0);
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:160
            lcd.print(F("ERR 03"));
    2f8a:	8f e0       	ldi	r24, 0x0F	; 15
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
    2f92:	a8 cf       	rjmp	.-176    	; 0x2ee4 <main+0x5e2>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    2f94:	84 ef       	ldi	r24, 0xF4	; 244
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	a0 e0       	ldi	r26, 0x00	; 0
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <myDFPlayer+0x6>
    2fa0:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <myDFPlayer+0x7>
    2fa4:	a0 93 c3 04 	sts	0x04C3, r26	; 0x8004c3 <myDFPlayer+0x8>
    2fa8:	b0 93 c4 04 	sts	0x04C4, r27	; 0x8004c4 <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    2fac:	60 91 c9 03 	lds	r22, 0x03C9	; 0x8003c9 <config+0x15>
    2fb0:	70 91 ca 03 	lds	r23, 0x03CA	; 0x8003ca <config+0x16>
    2fb4:	77 27       	eor	r23, r23
    2fb6:	86 e0       	ldi	r24, 0x06	; 6
    2fb8:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    2fbc:	62 e0       	ldi	r22, 0x02	; 2
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	89 e0       	ldi	r24, 0x09	; 9
    2fc2:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    2fc6:	68 ec       	ldi	r22, 0xC8	; 200
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 23 04 	call	0x846	; 0x846 <delay>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:166
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    2fd2:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:167
    timrLCD = millis();
    2fd6:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    2fda:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <timrLCD>
    2fde:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <timrLCD+0x1>
    2fe2:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timrLCD+0x2>
    2fe6:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:169

    if (serviceMode)
    2fea:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <serviceMode>
    2fee:	88 23       	and	r24, r24
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <main+0x6f2>
    2ff2:	c7 c1       	rjmp	.+910    	; 0x3382 <main+0xa80>
attach():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2ff4:	2b ee       	ldi	r18, 0xEB	; 235
    2ff6:	32 e0       	ldi	r19, 0x02	; 2
    2ff8:	30 93 3a 04 	sts	0x043A, r19	; 0x80043a <Menu1+0x1>
    2ffc:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    3000:	86 e0       	ldi	r24, 0x06	; 6
    3002:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    3006:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <Menu1+0x4>
    300a:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    300e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    3012:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:12
  menuStackCount = 0;
    3016:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:174
        Menu1.attach(serviceMenu_Root, menuCount(serviceMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    301a:	86 e0       	ldi	r24, 0x06	; 6
    301c:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3020:	89 2b       	or	r24, r25
    3022:	f1 f4       	brne	.+60     	; 0x3060 <main+0x75e>
    3024:	87 e0       	ldi	r24, 0x07	; 7
    3026:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    302a:	89 2b       	or	r24, r25
    302c:	c9 f4       	brne	.+50     	; 0x3060 <main+0x75e>
attach():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    302e:	2b eb       	ldi	r18, 0xBB	; 187
    3030:	32 e0       	ldi	r19, 0x02	; 2
    3032:	30 93 3a 04 	sts	0x043A, r19	; 0x80043a <Menu1+0x1>
    3036:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    303a:	83 e0       	ldi	r24, 0x03	; 3
    303c:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    3040:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <Menu1+0x4>
    3044:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    3048:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    304c:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:12
  menuStackCount = 0;
    3050:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:177
    {
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:178
        refreshMenuDisplay(REFRESH_DESCEND);
    305a:	83 e0       	ldi	r24, 0x03	; 3
    305c:	0e 94 12 11 	call	0x2224	; 0x2224 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:181
    }
    
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    3060:	85 e0       	ldi	r24, 0x05	; 5
    3062:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3066:	89 2b       	or	r24, r25
    3068:	09 f4       	brne	.+2      	; 0x306c <main+0x76a>
    306a:	93 c1       	rjmp	.+806    	; 0x3392 <main+0xa90>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:184
        testMode = true;
    else
        testMode = false;
    306c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <testMode>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:12
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
  Song1_Count = 100;
    3070:	44 e6       	ldi	r20, 0x64	; 100
    3072:	24 2e       	mov	r2, r20
    3074:	31 2c       	mov	r3, r1
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:238

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    3076:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    307a:	c0 90 0d 03 	lds	r12, 0x030D	; 0x80030d <buttonSampleTime>
    307e:	d0 90 0e 03 	lds	r13, 0x030E	; 0x80030e <buttonSampleTime+0x1>
    3082:	e0 90 0f 03 	lds	r14, 0x030F	; 0x80030f <buttonSampleTime+0x2>
    3086:	f0 90 10 03 	lds	r15, 0x0310	; 0x800310 <buttonSampleTime+0x3>
    308a:	6c 19       	sub	r22, r12
    308c:	7d 09       	sbc	r23, r13
    308e:	8e 09       	sbc	r24, r14
    3090:	9f 09       	sbc	r25, r15
    3092:	64 31       	cpi	r22, 0x14	; 20
    3094:	71 05       	cpc	r23, r1
    3096:	81 05       	cpc	r24, r1
    3098:	91 05       	cpc	r25, r1
    309a:	08 f4       	brcc	.+2      	; 0x309e <main+0x79c>
    309c:	9f c0       	rjmp	.+318    	; 0x31dc <main+0x8da>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:240
  {
    buttonSampleTime = millis();
    309e:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    30a2:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <buttonSampleTime>
    30a6:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <buttonSampleTime+0x1>
    30aa:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <buttonSampleTime+0x2>
    30ae:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    30b2:	85 e0       	ldi	r24, 0x05	; 5
    30b4:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    30b8:	7c 01       	movw	r14, r24
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:247
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    30ba:	86 e0       	ldi	r24, 0x06	; 6
    30bc:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
main():
    30c0:	01 e0       	ldi	r16, 0x01	; 1
buttonHandlerCycle():
    30c2:	89 2b       	or	r24, r25
    30c4:	21 f0       	breq	.+8      	; 0x30ce <main+0x7cc>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    30c6:	ef 28       	or	r14, r15
    30c8:	09 f4       	brne	.+2      	; 0x30cc <main+0x7ca>
    30ca:	00 e0       	ldi	r16, 0x00	; 0
    30cc:	01 95       	neg	r16
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:248
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    30ce:	87 e0       	ldi	r24, 0x07	; 7
    30d0:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    30d4:	89 2b       	or	r24, r25
    30d6:	09 f4       	brne	.+2      	; 0x30da <main+0x7d8>
main():
    30d8:	02 e0       	ldi	r16, 0x02	; 2
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:249
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    30da:	88 e0       	ldi	r24, 0x08	; 8
    30dc:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    30e0:	89 2b       	or	r24, r25
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <main+0x7e4>
main():
    30e4:	03 e0       	ldi	r16, 0x03	; 3
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:250
    if (digitalRead(MODE_BUT) == LOW) curBut = 4;
    30e6:	80 e1       	ldi	r24, 0x10	; 16
    30e8:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    30ec:	89 2b       	or	r24, r25
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <main+0x7f0>
main():
    30f0:	04 e0       	ldi	r16, 0x04	; 4
    30f2:	80 ee       	ldi	r24, 0xE0	; 224
    30f4:	c8 2e       	mov	r12, r24
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	d8 2e       	mov	r13, r24
    30fa:	94 ef       	ldi	r25, 0xF4	; 244
    30fc:	e9 2e       	mov	r14, r25
    30fe:	92 e0       	ldi	r25, 0x02	; 2
    3100:	f9 2e       	mov	r15, r25
    3102:	22 e2       	ldi	r18, 0x22	; 34
    3104:	82 2e       	mov	r8, r18
    3106:	21 e0       	ldi	r18, 0x01	; 1
    3108:	92 2e       	mov	r9, r18
    310a:	38 e0       	ldi	r19, 0x08	; 8
    310c:	a3 2e       	mov	r10, r19
    310e:	33 e0       	ldi	r19, 0x03	; 3
    3110:	b3 2e       	mov	r11, r19
    3112:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:254

    

    byte buttonIdentified = 0;
    3114:	41 2c       	mov	r4, r1
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:259
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    3116:	41 10       	cpse	r4, r1
    3118:	46 c1       	rjmp	.+652    	; 0x33a6 <main+0xaa4>
    311a:	d4 01       	movw	r26, r8
    311c:	8c 91       	ld	r24, X
    311e:	80 13       	cpse	r24, r16
    3120:	42 c1       	rjmp	.+644    	; 0x33a6 <main+0xaa4>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:262
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    3122:	44 24       	eor	r4, r4
    3124:	43 94       	inc	r4
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:261
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    3126:	55 24       	eor	r5, r5
    3128:	53 94       	inc	r5
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:271
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    312a:	f5 01       	movw	r30, r10
    312c:	81 91       	ld	r24, Z+
    312e:	5f 01       	movw	r10, r30
    3130:	85 15       	cp	r24, r5
    3132:	b1 f0       	breq	.+44     	; 0x3160 <main+0x85e>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:274
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    3134:	55 20       	and	r5, r5
    3136:	09 f4       	brne	.+2      	; 0x313a <main+0x838>
    3138:	38 c1       	rjmp	.+624    	; 0x33aa <main+0xaa8>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:276
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    313a:	81 2f       	mov	r24, r17
    313c:	0e 94 5f 08 	call	0x10be	; 0x10be <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:277
          buttonPressTime[i] = millis();
    3140:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3144:	d7 01       	movw	r26, r14
    3146:	6d 93       	st	X+, r22
    3148:	7d 93       	st	X+, r23
    314a:	8d 93       	st	X+, r24
    314c:	9c 93       	st	X, r25
    314e:	13 97       	sbiw	r26, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:278
          buttonHoldTime[i] = buttonPressTime[i];
    3150:	f6 01       	movw	r30, r12
    3152:	60 83       	st	Z, r22
    3154:	71 83       	std	Z+1, r23	; 0x01
    3156:	82 83       	std	Z+2, r24	; 0x02
    3158:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:292
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    315a:	f5 01       	movw	r30, r10
    315c:	31 97       	sbiw	r30, 0x01	; 1
    315e:	50 82       	st	Z, r5
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:296
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    3160:	55 20       	and	r5, r5
    3162:	79 f1       	breq	.+94     	; 0x31c2 <main+0x8c0>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:298
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    3164:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3168:	f7 01       	movw	r30, r14
    316a:	20 81       	ld	r18, Z
    316c:	31 81       	ldd	r19, Z+1	; 0x01
    316e:	42 81       	ldd	r20, Z+2	; 0x02
    3170:	53 81       	ldd	r21, Z+3	; 0x03
    3172:	62 1b       	sub	r22, r18
    3174:	73 0b       	sbc	r23, r19
    3176:	84 0b       	sbc	r24, r20
    3178:	95 0b       	sbc	r25, r21
    317a:	61 3d       	cpi	r22, 0xD1	; 209
    317c:	77 40       	sbci	r23, 0x07	; 7
    317e:	81 05       	cpc	r24, r1
    3180:	91 05       	cpc	r25, r1
    3182:	f8 f0       	brcs	.+62     	; 0x31c2 <main+0x8c0>
    3184:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3188:	d6 01       	movw	r26, r12
    318a:	2d 91       	ld	r18, X+
    318c:	3d 91       	ld	r19, X+
    318e:	4d 91       	ld	r20, X+
    3190:	5c 91       	ld	r21, X
    3192:	62 1b       	sub	r22, r18
    3194:	73 0b       	sbc	r23, r19
    3196:	84 0b       	sbc	r24, r20
    3198:	95 0b       	sbc	r25, r21
    319a:	6b 3f       	cpi	r22, 0xFB	; 251
    319c:	71 05       	cpc	r23, r1
    319e:	81 05       	cpc	r24, r1
    31a0:	91 05       	cpc	r25, r1
    31a2:	78 f0       	brcs	.+30     	; 0x31c2 <main+0x8c0>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:300
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    31a4:	8a 2d       	mov	r24, r10
    31a6:	e8 e0       	ldi	r30, 0x08	; 8
    31a8:	f3 e0       	ldi	r31, 0x03	; 3
    31aa:	8e 1b       	sub	r24, r30
    31ac:	80 68       	ori	r24, 0x80	; 128
    31ae:	0e 94 5f 08 	call	0x10be	; 0x10be <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:301
          buttonHoldTime[i] = millis();
    31b2:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    31b6:	d6 01       	movw	r26, r12
    31b8:	6d 93       	st	X+, r22
    31ba:	7d 93       	st	X+, r23
    31bc:	8d 93       	st	X+, r24
    31be:	9c 93       	st	X, r25
    31c0:	13 97       	sbiw	r26, 0x03	; 3
    31c2:	1f 5f       	subi	r17, 0xFF	; 255
    31c4:	b4 e0       	ldi	r27, 0x04	; 4
    31c6:	cb 0e       	add	r12, r27
    31c8:	d1 1c       	adc	r13, r1
    31ca:	e4 e0       	ldi	r30, 0x04	; 4
    31cc:	ee 0e       	add	r14, r30
    31ce:	f1 1c       	adc	r15, r1
    31d0:	ff ef       	ldi	r31, 0xFF	; 255
    31d2:	8f 1a       	sub	r8, r31
    31d4:	9f 0a       	sbc	r9, r31
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:256

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    31d6:	16 30       	cpi	r17, 0x06	; 6
    31d8:	09 f0       	breq	.+2      	; 0x31dc <main+0x8da>
    31da:	9d cf       	rjmp	.-198    	; 0x3116 <main+0x814>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:220
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    31dc:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <buttonBufferCount>
    31e0:	19 16       	cp	r1, r25
    31e2:	0c f4       	brge	.+2      	; 0x31e6 <main+0x8e4>
    31e4:	fa c0       	rjmp	.+500    	; 0x33da <main+0xad8>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:190
    
}

void loop()
{
    btn = getButton();
    31e6:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <btn>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:220
            // lcd.clear();
            config.save();
            ButLongPress = true;
        }
    }
    if (btn == BUTTON_DOWN_LONG_PRESSED)
    31ea:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    31ee:	83 38       	cpi	r24, 0x83	; 131
    31f0:	19 f5       	brne	.+70     	; 0x3238 <main+0x936>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:222
    {
        if (!ButLongPress)
    31f2:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    31f6:	81 11       	cpse	r24, r1
    31f8:	1f c0       	rjmp	.+62     	; 0x3238 <main+0x936>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:224
        {
            if (config.AutoLight == 0)
    31fa:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <config+0x18>
    31fe:	81 11       	cpse	r24, r1
    3200:	50 c1       	rjmp	.+672    	; 0x34a2 <main+0xba0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:226
            {
                config.AutoLight = 1;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:227
                lcd.setCursor(0, 1);
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:228
                lcd.print(F(" AUTO LIGHT ON  "));
    3210:	84 e7       	ldi	r24, 0x74	; 116
    3212:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:234
            }
            else
            {
                config.AutoLight = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT OFF "));
    3214:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:236
            }
            digitalWrite(AUTOLIGHT, config.AutoLight);
    3218:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <config+0x18>
    321c:	8f e0       	ldi	r24, 0x0F	; 15
    321e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:237
            delay(1000);
    3222:	68 ee       	ldi	r22, 0xE8	; 232
    3224:	73 e0       	ldi	r23, 0x03	; 3
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:239
            // lcd.clear();
            config.save();
    322e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:240
            ButLongPress = true;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:243
        }
    }
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    3238:	10 91 3c 03 	lds	r17, 0x033C	; 0x80033c <btn>
    323c:	00 91 32 03 	lds	r16, 0x0332	; 0x800332 <appMode>
    3240:	8e e3       	ldi	r24, 0x3E	; 62
    3242:	81 0f       	add	r24, r17
    3244:	84 30       	cpi	r24, 0x04	; 4
    3246:	08 f0       	brcs	.+2      	; 0x324a <main+0x948>
    3248:	35 c1       	rjmp	.+618    	; 0x34b4 <main+0xbb2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:245
    {
        ButLongPress = false;
    324a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:257
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
            Light1ON = !Light1ON;
        }
    }
    if (millis() - timrLCD > 300)
    324e:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3252:	80 90 38 03 	lds	r8, 0x0338	; 0x800338 <timrLCD>
    3256:	90 90 39 03 	lds	r9, 0x0339	; 0x800339 <timrLCD+0x1>
    325a:	a0 90 3a 03 	lds	r10, 0x033A	; 0x80033a <timrLCD+0x2>
    325e:	b0 90 3b 03 	lds	r11, 0x033B	; 0x80033b <timrLCD+0x3>
    3262:	68 19       	sub	r22, r8
    3264:	79 09       	sbc	r23, r9
    3266:	8a 09       	sbc	r24, r10
    3268:	9b 09       	sbc	r25, r11
    326a:	6d 32       	cpi	r22, 0x2D	; 45
    326c:	71 40       	sbci	r23, 0x01	; 1
    326e:	81 05       	cpc	r24, r1
    3270:	91 05       	cpc	r25, r1
    3272:	40 f0       	brcs	.+16     	; 0x3284 <main+0x982>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:259
    {
        downButPreCount = 0;
    3274:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <downButPreCount+0x1>
    3278:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:260
        selButPreCount = 0;
    327c:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <selButPreCount+0x1>
    3280:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:264
        upButPreCount = 0;
    }

    if (millis() - timrTrigger > 500 && config.AutoLight)
    3284:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3288:	80 90 29 03 	lds	r8, 0x0329	; 0x800329 <timrTrigger>
    328c:	90 90 2a 03 	lds	r9, 0x032A	; 0x80032a <timrTrigger+0x1>
    3290:	a0 90 2b 03 	lds	r10, 0x032B	; 0x80032b <timrTrigger+0x2>
    3294:	b0 90 2c 03 	lds	r11, 0x032C	; 0x80032c <timrTrigger+0x3>
    3298:	68 19       	sub	r22, r8
    329a:	79 09       	sbc	r23, r9
    329c:	8a 09       	sbc	r24, r10
    329e:	9b 09       	sbc	r25, r11
    32a0:	65 3f       	cpi	r22, 0xF5	; 245
    32a2:	71 40       	sbci	r23, 0x01	; 1
    32a4:	81 05       	cpc	r24, r1
    32a6:	91 05       	cpc	r25, r1
    32a8:	08 f4       	brcc	.+2      	; 0x32ac <main+0x9aa>
    32aa:	4e c0       	rjmp	.+156    	; 0x3348 <main+0xa46>
    32ac:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <config+0x18>
    32b0:	88 23       	and	r24, r24
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <main+0x9b4>
    32b4:	49 c0       	rjmp	.+146    	; 0x3348 <main+0xa46>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:266
    {
        timrTrigger = millis();
    32b6:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    32ba:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <timrTrigger>
    32be:	70 93 2a 03 	sts	0x032A, r23	; 0x80032a <timrTrigger+0x1>
    32c2:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <timrTrigger+0x2>
    32c6:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <timrTrigger+0x3>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:535
}

void TriggerLights()
{
    // Validate Light 1
    if (config.Light1On != 0 && config.Light1Off != 0)
    32ca:	80 90 e2 03 	lds	r8, 0x03E2	; 0x8003e2 <config+0x2e>
    32ce:	90 90 e3 03 	lds	r9, 0x03E3	; 0x8003e3 <config+0x2f>
    32d2:	a0 90 e4 03 	lds	r10, 0x03E4	; 0x8003e4 <config+0x30>
    32d6:	b0 90 e5 03 	lds	r11, 0x03E5	; 0x8003e5 <config+0x31>
    32da:	81 14       	cp	r8, r1
    32dc:	91 04       	cpc	r9, r1
    32de:	a1 04       	cpc	r10, r1
    32e0:	b1 04       	cpc	r11, r1
    32e2:	91 f1       	breq	.+100    	; 0x3348 <main+0xa46>
    32e4:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <config+0x32>
    32e8:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <config+0x33>
    32ec:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <config+0x34>
    32f0:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <config+0x35>
    32f4:	41 15       	cp	r20, r1
    32f6:	51 05       	cpc	r21, r1
    32f8:	61 05       	cpc	r22, r1
    32fa:	71 05       	cpc	r23, r1
    32fc:	29 f1       	breq	.+74     	; 0x3348 <main+0xa46>
    32fe:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <CurTime>
    3302:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <CurTime+0x1>
    3306:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <CurTime+0x2>
    330a:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <CurTime+0x3>
    330e:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <Light1ON>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:537
    {
        if (config.Light1Off > config.Light1On)
    3312:	84 16       	cp	r8, r20
    3314:	95 06       	cpc	r9, r21
    3316:	a6 06       	cpc	r10, r22
    3318:	b7 06       	cpc	r11, r23
    331a:	0c f0       	brlt	.+2      	; 0x331e <main+0xa1c>
    331c:	fb c0       	rjmp	.+502    	; 0x3514 <main+0xc12>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:539
        {
            if (CurTime >= config.Light1On && CurTime < config.Light1Off)
    331e:	88 15       	cp	r24, r8
    3320:	99 05       	cpc	r25, r9
    3322:	aa 05       	cpc	r26, r10
    3324:	bb 05       	cpc	r27, r11
    3326:	0c f4       	brge	.+2      	; 0x332a <main+0xa28>
    3328:	eb c0       	rjmp	.+470    	; 0x3500 <main+0xbfe>
    332a:	84 17       	cp	r24, r20
    332c:	95 07       	cpc	r25, r21
    332e:	a6 07       	cpc	r26, r22
    3330:	b7 07       	cpc	r27, r23
    3332:	0c f0       	brlt	.+2      	; 0x3336 <main+0xa34>
    3334:	e5 c0       	rjmp	.+458    	; 0x3500 <main+0xbfe>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:541
            {
                if (Light1ON == 0)
    3336:	21 11       	cpse	r18, r1
    3338:	07 c0       	rjmp	.+14     	; 0x3348 <main+0xa46>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:543
                {
                    digitalWrite(RELAY1, HIGH);
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	8b e0       	ldi	r24, 0x0B	; 11
    333e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:544
                    Light1ON = 1;
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <Light1ON>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:269
    if (millis() - timrTrigger > 500 && config.AutoLight)
    {
        timrTrigger = millis();
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    3348:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <config+0x18>
    334c:	8f e0       	ldi	r24, 0x0F	; 15
    334e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:270
    digitalWrite(AUTOPLAY, config.AutoPlay);
    3352:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <config+0x17>
    3356:	8e e0       	ldi	r24, 0x0E	; 14
    3358:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:272

    switch (appMode)
    335c:	02 30       	cpi	r16, 0x02	; 2
    335e:	09 f4       	brne	.+2      	; 0x3362 <main+0xa60>
    3360:	8f c5       	rjmp	.+2846   	; 0x3e80 <main+0x157e>
    3362:	08 f0       	brcs	.+2      	; 0x3366 <main+0xa64>
    3364:	de c0       	rjmp	.+444    	; 0x3522 <main+0xc20>
    3366:	00 23       	and	r16, r16
    3368:	09 f4       	brne	.+2      	; 0x336c <main+0xa6a>
    336a:	67 c1       	rjmp	.+718    	; 0x363a <main+0xd38>
    336c:	01 30       	cpi	r16, 0x01	; 1
    336e:	09 f4       	brne	.+2      	; 0x3372 <main+0xa70>
    3370:	00 c4       	rjmp	.+2048   	; 0x3b72 <main+0x1270>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	89 2b       	or	r24, r25
    3378:	09 f4       	brne	.+2      	; 0x337c <main+0xa7a>
    337a:	7d ce       	rjmp	.-774    	; 0x3076 <main+0x774>
    337c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3380:	77 ce       	rjmp	.-786    	; 0x3070 <main+0x76e>
attach():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    3382:	2d ec       	ldi	r18, 0xCD	; 205
    3384:	32 e0       	ldi	r19, 0x02	; 2
    3386:	30 93 3a 04 	sts	0x043A, r19	; 0x80043a <Menu1+0x1>
    338a:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    338e:	85 e0       	ldi	r24, 0x05	; 5
    3390:	38 ce       	rjmp	.-912    	; 0x3002 <main+0x700>
setup():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:181
        Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
        appMode = APP_MENU_MODE;
        refreshMenuDisplay(REFRESH_DESCEND);
    }
    
    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    3392:	88 e0       	ldi	r24, 0x08	; 8
    3394:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3398:	89 2b       	or	r24, r25
    339a:	09 f0       	breq	.+2      	; 0x339e <main+0xa9c>
    339c:	67 ce       	rjmp	.-818    	; 0x306c <main+0x76a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:182
        testMode = true;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <testMode>
    33a4:	65 ce       	rjmp	.-822    	; 0x3070 <main+0x76e>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:266
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    33a6:	51 2c       	mov	r5, r1
    33a8:	c0 ce       	rjmp	.-640    	; 0x312a <main+0x828>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:283
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    33aa:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    33ae:	d7 01       	movw	r26, r14
    33b0:	2d 91       	ld	r18, X+
    33b2:	3d 91       	ld	r19, X+
    33b4:	4d 91       	ld	r20, X+
    33b6:	5c 91       	ld	r21, X
    33b8:	62 1b       	sub	r22, r18
    33ba:	73 0b       	sbc	r23, r19
    33bc:	84 0b       	sbc	r24, r20
    33be:	95 0b       	sbc	r25, r21
    33c0:	61 3d       	cpi	r22, 0xD1	; 209
    33c2:	77 40       	sbci	r23, 0x07	; 7
    33c4:	81 05       	cpc	r24, r1
    33c6:	91 05       	cpc	r25, r1
    33c8:	28 f0       	brcs	.+10     	; 0x33d4 <main+0xad2>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:285
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    33ca:	81 2f       	mov	r24, r17
    33cc:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:289
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    33ce:	0e 94 5f 08 	call	0x10be	; 0x10be <queueButton(unsigned char)>
    33d2:	c3 ce       	rjmp	.-634    	; 0x315a <main+0x858>
    33d4:	81 2f       	mov	r24, r17
    33d6:	80 64       	ori	r24, 0x40	; 64
    33d8:	fa cf       	rjmp	.-12     	; 0x33ce <main+0xacc>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:222
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    33da:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <button_read_pos>
    33de:	e8 2f       	mov	r30, r24
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	ef 5e       	subi	r30, 0xEF	; 239
    33e4:	fc 4f       	sbci	r31, 0xFC	; 252
    33e6:	10 81       	ld	r17, Z
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:223
    buttonBufferCount--;
    33e8:	91 50       	subi	r25, 0x01	; 1
    33ea:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:224
    button_read_pos++;
    33ee:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:226
    
    if (button_read_pos >= sizeof (buttonBuffer))
    33f0:	85 30       	cpi	r24, 0x05	; 5
    33f2:	08 f0       	brcs	.+2      	; 0x33f6 <main+0xaf4>
    33f4:	4a c0       	rjmp	.+148    	; 0x348a <main+0xb88>
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:224
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    33f6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:190
    
}

void loop()
{
    btn = getButton();
    33fa:	10 93 3c 03 	sts	0x033C, r17	; 0x80033c <btn>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:191
    if (btn)
    33fe:	11 23       	and	r17, r17
    3400:	09 f4       	brne	.+2      	; 0x3404 <main+0xb02>
    3402:	1a cf       	rjmp	.-460    	; 0x3238 <main+0x936>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:193
    {
        timrLCD = millis();
    3404:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3408:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <timrLCD>
    340c:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <timrLCD+0x1>
    3410:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timrLCD+0x2>
    3414:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:194
        timrMNU = millis();
    3418:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    341c:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <timrMNU>
    3420:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <timrMNU+0x1>
    3424:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timrMNU+0x2>
    3428:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    342c:	88 e0       	ldi	r24, 0x08	; 8
    342e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	8f ea       	ldi	r24, 0xAF	; 175
    3436:	94 e0       	ldi	r25, 0x04	; 4
    3438:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:197
        lcd.backlight();
    }
    if (btn == BUTTON_UP_LONG_PRESSED)
    343c:	12 38       	cpi	r17, 0x82	; 130
    343e:	09 f0       	breq	.+2      	; 0x3442 <main+0xb40>
    3440:	d4 ce       	rjmp	.-600    	; 0x31ea <main+0x8e8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:199
    {
        if (!ButLongPress)
    3442:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    3446:	81 11       	cpse	r24, r1
    3448:	f7 ce       	rjmp	.-530    	; 0x3238 <main+0x936>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:201
        {
            if (config.AutoPlay == 0)
    344a:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x17>
    344e:	81 11       	cpse	r24, r1
    3450:	1f c0       	rjmp	.+62     	; 0x3490 <main+0xb8e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:203
            {
                config.AutoPlay = 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:204
                lcd.setCursor(0, 1);
    3458:	61 e0       	ldi	r22, 0x01	; 1
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:205
                lcd.print(F("  AUTO PLAY ON  "));
    3460:	86 e9       	ldi	r24, 0x96	; 150
    3462:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:211
            }
            else
            {
                config.AutoPlay = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO PLAY OFF  "));
    3464:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:213
            }
            digitalWrite(AUTOPLAY, config.AutoPlay);
    3468:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <config+0x17>
    346c:	8e e0       	ldi	r24, 0x0E	; 14
    346e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:214
            delay(1000);
    3472:	68 ee       	ldi	r22, 0xE8	; 232
    3474:	73 e0       	ldi	r23, 0x03	; 3
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:216
            // lcd.clear();
            config.save();
    347e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:217
            ButLongPress = true;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <ButLongPress>
    3488:	b0 ce       	rjmp	.-672    	; 0x31ea <main+0x8e8>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.2/LcdKeypad.cpp:228
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    348a:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <button_read_pos>
    348e:	b5 cf       	rjmp	.-150    	; 0x33fa <main+0xaf8>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:209
                lcd.setCursor(0, 1);
                lcd.print(F("  AUTO PLAY ON  "));
            }
            else
            {
                config.AutoPlay = 0;
    3490:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:210
                lcd.setCursor(0, 1);
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:211
                lcd.print(F(" AUTO PLAY OFF  "));
    349c:	85 e8       	ldi	r24, 0x85	; 133
    349e:	93 e0       	ldi	r25, 0x03	; 3
    34a0:	e1 cf       	rjmp	.-62     	; 0x3464 <main+0xb62>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:232
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT ON  "));
            }
            else
            {
                config.AutoLight = 0;
    34a2:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:233
                lcd.setCursor(0, 1);
    34a6:	61 e0       	ldi	r22, 0x01	; 1
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:234
                lcd.print(F(" AUTO LIGHT OFF "));
    34ae:	83 e6       	ldi	r24, 0x63	; 99
    34b0:	93 e0       	ldi	r25, 0x03	; 3
    34b2:	b0 ce       	rjmp	.-672    	; 0x3214 <main+0x912>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:248
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    {
        ButLongPress = false;
    }

    if (btn == BUTTON_DOWN_PRESSED && (appMode == APP_NORMAL_MODE || appMode == APP_PLAYER_MODE))
    34b4:	13 30       	cpi	r17, 0x03	; 3
    34b6:	09 f0       	breq	.+2      	; 0x34ba <main+0xbb8>
    34b8:	ca ce       	rjmp	.-620    	; 0x324e <main+0x94c>
    34ba:	00 23       	and	r16, r16
    34bc:	19 f0       	breq	.+6      	; 0x34c4 <main+0xbc2>
    34be:	05 30       	cpi	r16, 0x05	; 5
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <main+0xbc2>
    34c2:	c5 ce       	rjmp	.-630    	; 0x324e <main+0x94c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:250
    {
        downButPreCount += 1;
    34c4:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <downButPreCount>
    34c8:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <downButPreCount+0x1>
    34cc:	01 96       	adiw	r24, 0x01	; 1
    34ce:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <downButPreCount+0x1>
    34d2:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:251
        if (downButPreCount >= 2)
    34d6:	02 97       	sbiw	r24, 0x02	; 2
    34d8:	0c f4       	brge	.+2      	; 0x34dc <main+0xbda>
    34da:	b9 ce       	rjmp	.-654    	; 0x324e <main+0x94c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:253
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
    34dc:	8b e0       	ldi	r24, 0x0B	; 11
    34de:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    34e2:	61 e0       	ldi	r22, 0x01	; 1
    34e4:	89 2b       	or	r24, r25
    34e6:	09 f0       	breq	.+2      	; 0x34ea <main+0xbe8>
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	8b e0       	ldi	r24, 0x0B	; 11
    34ec:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:254
            Light1ON = !Light1ON;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <Light1ON>
    34f6:	91 11       	cpse	r25, r1
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <Light1ON>
    34fe:	a7 ce       	rjmp	.-690    	; 0x324e <main+0x94c>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:549
                    Light1ON = 1;
                }
            }
            else
            {
                if (Light1ON == 1)
    3500:	21 30       	cpi	r18, 0x01	; 1
    3502:	09 f0       	breq	.+2      	; 0x3506 <main+0xc04>
    3504:	21 cf       	rjmp	.-446    	; 0x3348 <main+0xa46>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:551
                {
                    digitalWrite(RELAY1, LOW);
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	8b e0       	ldi	r24, 0x0B	; 11
    350a:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:552
                    Light1ON = 0;
    350e:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <Light1ON>
    3512:	1a cf       	rjmp	.-460    	; 0x3348 <main+0xa46>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:558
                }
            }
        }
        else
        {
            if (CurTime < config.Light1On && CurTime >= config.Light1Off)
    3514:	88 15       	cp	r24, r8
    3516:	99 05       	cpc	r25, r9
    3518:	aa 05       	cpc	r26, r10
    351a:	bb 05       	cpc	r27, r11
    351c:	0c f0       	brlt	.+2      	; 0x3520 <main+0xc1e>
    351e:	0b cf       	rjmp	.-490    	; 0x3336 <main+0xa34>
    3520:	04 cf       	rjmp	.-504    	; 0x332a <main+0xa28>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:272
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    3522:	04 30       	cpi	r16, 0x04	; 4
    3524:	09 f4       	brne	.+2      	; 0x3528 <main+0xc26>
    3526:	45 c2       	rjmp	.+1162   	; 0x39b2 <main+0x10b0>
    3528:	08 f4       	brcc	.+2      	; 0x352c <main+0xc2a>
    352a:	0c c2       	rjmp	.+1048   	; 0x3944 <main+0x1042>
    352c:	05 30       	cpi	r16, 0x05	; 5
    352e:	09 f0       	breq	.+2      	; 0x3532 <main+0xc30>
    3530:	20 cf       	rjmp	.-448    	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:500
        break;
    }
    
    case APP_PLAYER_MODE:
    {
        digitalWrite(AMP, HIGH);
    3532:	61 e0       	ldi	r22, 0x01	; 1
    3534:	8c e0       	ldi	r24, 0x0C	; 12
    3536:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:501
        digitalWrite(AUDCONT, HIGH);
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	8a e0       	ldi	r24, 0x0A	; 10
    353e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:502
        if (millis() - timr_Time > 1000)
    3542:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3546:	c0 90 20 03 	lds	r12, 0x0320	; 0x800320 <timr_Time>
    354a:	d0 90 21 03 	lds	r13, 0x0321	; 0x800321 <timr_Time+0x1>
    354e:	e0 90 22 03 	lds	r14, 0x0322	; 0x800322 <timr_Time+0x2>
    3552:	f0 90 23 03 	lds	r15, 0x0323	; 0x800323 <timr_Time+0x3>
    3556:	6c 19       	sub	r22, r12
    3558:	7d 09       	sbc	r23, r13
    355a:	8e 09       	sbc	r24, r14
    355c:	9f 09       	sbc	r25, r15
    355e:	69 3e       	cpi	r22, 0xE9	; 233
    3560:	73 40       	sbci	r23, 0x03	; 3
    3562:	81 05       	cpc	r24, r1
    3564:	91 05       	cpc	r25, r1
    3566:	68 f1       	brcs	.+90     	; 0x35c2 <main+0xcc0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:504
        {
            timr_Time = millis();
    3568:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    356c:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timr_Time>
    3570:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timr_Time+0x1>
    3574:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timr_Time+0x2>
    3578:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:505
            showTime();
    357c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:506
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    3580:	c3 01       	movw	r24, r6
    3582:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3586:	ec 80       	ldd	r14, Y+4	; 0x04
    3588:	3c e3       	ldi	r19, 0x3C	; 60
    358a:	e3 9e       	mul	r14, r19
    358c:	70 01       	movw	r14, r0
    358e:	11 24       	eor	r1, r1
    3590:	ce 01       	movw	r24, r28
    3592:	43 96       	adiw	r24, 0x13	; 19
    3594:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3598:	8f 89       	ldd	r24, Y+23	; 0x17
    359a:	8e 0d       	add	r24, r14
    359c:	9f 2d       	mov	r25, r15
    359e:	91 1d       	adc	r25, r1
    35a0:	09 2e       	mov	r0, r25
    35a2:	00 0c       	add	r0, r0
    35a4:	aa 0b       	sbc	r26, r26
    35a6:	bb 0b       	sbc	r27, r27
    35a8:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <CurTime>
    35ac:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <CurTime+0x1>
    35b0:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <CurTime+0x2>
    35b4:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:507
            if (config.AutoPlay)
    35b8:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x17>
    35bc:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:508
                TriggerPlayer();
    35be:	0e 94 80 08 	call	0x1100	; 0x1100 <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:510
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    35c2:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    35c6:	00 91 38 03 	lds	r16, 0x0338	; 0x800338 <timrLCD>
    35ca:	10 91 39 03 	lds	r17, 0x0339	; 0x800339 <timrLCD+0x1>
    35ce:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <timrLCD+0x2>
    35d2:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <timrLCD+0x3>
    35d6:	6b 01       	movw	r12, r22
    35d8:	7c 01       	movw	r14, r24
    35da:	c0 1a       	sub	r12, r16
    35dc:	d1 0a       	sbc	r13, r17
    35de:	e2 0a       	sbc	r14, r18
    35e0:	f3 0a       	sbc	r15, r19
    35e2:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <config+0x13>
    35e6:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <config+0x14>
    35ea:	28 ee       	ldi	r18, 0xE8	; 232
    35ec:	33 e0       	ldi	r19, 0x03	; 3
    35ee:	0e 94 06 2b 	call	0x560c	; 0x560c <__usmulhisi3>
    35f2:	6c 15       	cp	r22, r12
    35f4:	7d 05       	cpc	r23, r13
    35f6:	8e 05       	cpc	r24, r14
    35f8:	9f 05       	cpc	r25, r15
    35fa:	38 f4       	brcc	.+14     	; 0x360a <main+0xd08>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    35fc:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	8f ea       	ldi	r24, 0xAF	; 175
    3604:	94 e0       	ldi	r25, 0x04	; 4
    3606:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:514
        {
            lcd.noBacklight();
        }
        lcd.setCursor(0, 1);
    360a:	61 e0       	ldi	r22, 0x01	; 1
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:515
        lcd.print(F(" PLAYER MODE ON "));
    3612:	81 e4       	ldi	r24, 0x41	; 65
    3614:	93 e0       	ldi	r25, 0x03	; 3
    3616:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:516
        if (btn == BUTTON_MODE_LONG_PRESSED)
    361a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    361e:	85 38       	cpi	r24, 0x85	; 133
    3620:	09 f0       	breq	.+2      	; 0x3624 <main+0xd22>
    3622:	a7 ce       	rjmp	.-690    	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:518
        {
            if (!ButLongPress)
    3624:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    3628:	81 11       	cpse	r24, r1
    362a:	a3 ce       	rjmp	.-698    	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:520
            {
                appMode = APP_NORMAL_MODE;
    362c:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:521
                PlayerONMor = 0;
    3630:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:522
                PlayerONEve = 0;
    3634:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <PlayerONEve>
    3638:	4c c1       	rjmp	.+664    	; 0x38d2 <main+0xfd0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:275
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    {
    case APP_NORMAL_MODE:
        digitalWrite(AMP, LOW);
    363a:	60 e0       	ldi	r22, 0x00	; 0
    363c:	8c e0       	ldi	r24, 0x0C	; 12
    363e:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:276
        digitalWrite(AUDCONT, LOW);
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	8a e0       	ldi	r24, 0x0A	; 10
    3646:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:277
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    364a:	11 38       	cpi	r17, 0x81	; 129
    364c:	81 f4       	brne	.+32     	; 0x366e <main+0xd6c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:279
        {
            appMode = APP_MENU_MODE;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:280
            refreshMenuDisplay(REFRESH_DESCEND);
    3654:	83 e0       	ldi	r24, 0x03	; 3
    3656:	0e 94 12 11 	call	0x2224	; 0x2224 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:281
            timrMNU = millis();
    365a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    365e:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <timrMNU>
    3662:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <timrMNU+0x1>
    3666:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timrMNU+0x2>
    366a:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:284
        }

        if (btn == BUTTON_SELECT_PRESSED)
    366e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	11 f5       	brne	.+68     	; 0x36ba <main+0xdb8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:286
        {
            selButPreCount += 1;
    3676:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <selButPreCount>
    367a:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <selButPreCount+0x1>
    367e:	01 96       	adiw	r24, 0x01	; 1
    3680:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <selButPreCount+0x1>
    3684:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:287
            if (selButPreCount >= 4)
    3688:	04 97       	sbiw	r24, 0x04	; 4
    368a:	bc f0       	brlt	.+46     	; 0x36ba <main+0xdb8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:289
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    368c:	c3 01       	movw	r24, r6
    368e:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	8f 31       	cpi	r24, 0x1F	; 31
    3696:	08 f4       	brcc	.+2      	; 0x369a <main+0xd98>
    3698:	22 c1       	rjmp	.+580    	; 0x38de <main+0xfdc>
    369a:	ce 01       	movw	r24, r28
    369c:	43 96       	adiw	r24, 0x13	; 19
    369e:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    36a2:	8e 89       	ldd	r24, Y+22	; 0x16
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    36ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:290
                appMode = APP_DEMO_MODE;
    36b0:	84 e0       	ldi	r24, 0x04	; 4
    36b2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:291
                lcd.clear();
    36b6:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:295
            }
        }

        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    36ba:	c3 01       	movw	r24, r6
    36bc:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	81 11       	cpse	r24, r1
    36c4:	5a c0       	rjmp	.+180    	; 0x377a <main+0xe78>
    36c6:	ce 01       	movw	r24, r28
    36c8:	43 96       	adiw	r24, 0x13	; 19
    36ca:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    36ce:	88 8d       	ldd	r24, Y+24	; 0x18
    36d0:	81 11       	cpse	r24, r1
    36d2:	53 c0       	rjmp	.+166    	; 0x377a <main+0xe78>
    36d4:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    36d8:	ab 01       	movw	r20, r22
    36da:	bc 01       	movw	r22, r24
    36dc:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <timrAmp>
    36e0:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <timrAmp+0x1>
    36e4:	a0 91 27 03 	lds	r26, 0x0327	; 0x800327 <timrAmp+0x2>
    36e8:	b0 91 28 03 	lds	r27, 0x0328	; 0x800328 <timrAmp+0x3>
    36ec:	88 5b       	subi	r24, 0xB8	; 184
    36ee:	91 41       	sbci	r25, 0x11	; 17
    36f0:	af 4f       	sbci	r26, 0xFF	; 255
    36f2:	bf 4f       	sbci	r27, 0xFF	; 255
    36f4:	84 17       	cp	r24, r20
    36f6:	95 07       	cpc	r25, r21
    36f8:	a6 07       	cpc	r26, r22
    36fa:	b7 07       	cpc	r27, r23
    36fc:	f0 f5       	brcc	.+124    	; 0x377a <main+0xe78>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:297
        {
            bell = rtc.now();
    36fe:	c3 01       	movw	r24, r6
    3700:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3704:	86 e0       	ldi	r24, 0x06	; 6
    3706:	f3 01       	movw	r30, r6
    3708:	a9 ea       	ldi	r26, 0xA9	; 169
    370a:	b4 e0       	ldi	r27, 0x04	; 4
    370c:	01 90       	ld	r0, Z+
    370e:	0d 92       	st	X+, r0
    3710:	8a 95       	dec	r24
    3712:	e1 f7       	brne	.-8      	; 0x370c <main+0xe0a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:298
            if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
    3714:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <bell+0x3>
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <config+0xf>
    371e:	30 91 c4 03 	lds	r19, 0x03C4	; 0x8003c4 <config+0x10>
    3722:	82 17       	cp	r24, r18
    3724:	93 07       	cpc	r25, r19
    3726:	4c f1       	brlt	.+82     	; 0x377a <main+0xe78>
    3728:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <config+0x11>
    372c:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <config+0x12>
    3730:	28 17       	cp	r18, r24
    3732:	39 07       	cpc	r19, r25
    3734:	14 f1       	brlt	.+68     	; 0x377a <main+0xe78>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:300
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    3736:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <config+0x19>
    373a:	88 23       	and	r24, r24
    373c:	09 f4       	brne	.+2      	; 0x3740 <main+0xe3e>
    373e:	d6 c0       	rjmp	.+428    	; 0x38ec <main+0xfea>
    3740:	0e 94 a4 02 	call	0x548	; 0x548 <DateTime::dayOfTheWeek() const [clone .constprop.19]>
    3744:	88 23       	and	r24, r24
    3746:	09 f4       	brne	.+2      	; 0x374a <main+0xe48>
    3748:	d1 c0       	rjmp	.+418    	; 0x38ec <main+0xfea>
    374a:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <bell+0x3>
    374e:	8a 50       	subi	r24, 0x0A	; 10
    3750:	87 30       	cpi	r24, 0x07	; 7
    3752:	08 f0       	brcs	.+2      	; 0x3756 <main+0xe54>
    3754:	cb c0       	rjmp	.+406    	; 0x38ec <main+0xfea>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:305
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    3756:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:306
                    lcd.setCursor(0,0);
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:307
                    lcd.print("School Zone : ON");
    3762:	85 e0       	ldi	r24, 0x05	; 5
    3764:	92 e0       	ldi	r25, 0x02	; 2
    3766:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:308
                    delay(1000);
    376a:	68 ee       	ldi	r22, 0xE8	; 232
    376c:	73 e0       	ldi	r23, 0x03	; 3
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 23 04 	call	0x846	; 0x846 <delay>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:316
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    3776:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:322
                }
            }
        }
        // TEST MODE //   
        {
            if (btn == BUTTON_UP_PRESSED && testMode)
    377a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    377e:	82 30       	cpi	r24, 0x02	; 2
    3780:	c1 f5       	brne	.+112    	; 0x37f2 <main+0xef0>
    3782:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <testMode>
    3786:	88 23       	and	r24, r24
    3788:	a1 f1       	breq	.+104    	; 0x37f2 <main+0xef0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:324
            {
                timrAmp = millis() - 71000L;
    378a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    378e:	68 55       	subi	r22, 0x58	; 88
    3790:	75 41       	sbci	r23, 0x15	; 21
    3792:	81 40       	sbci	r24, 0x01	; 1
    3794:	91 09       	sbc	r25, r1
    3796:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <timrAmp>
    379a:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <timrAmp+0x1>
    379e:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <timrAmp+0x2>
    37a2:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:325
                if (rtc.now().minute() < 30)
    37a6:	c3 01       	movw	r24, r6
    37a8:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	8e 31       	cpi	r24, 0x1E	; 30
    37b0:	08 f0       	brcs	.+2      	; 0x37b4 <main+0xeb2>
    37b2:	ae c0       	rjmp	.+348    	; 0x3910 <main+0x100e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:326
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
    37b4:	ce 01       	movw	r24, r28
    37b6:	43 96       	adiw	r24, 0x13	; 19
    37b8:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    37bc:	fe 88       	ldd	r15, Y+22	; 0x16
    37be:	ce 01       	movw	r24, r28
    37c0:	49 96       	adiw	r24, 0x19	; 25
    37c2:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    37c6:	eb 8c       	ldd	r14, Y+27	; 0x1b
    37c8:	ce 01       	movw	r24, r28
    37ca:	4f 96       	adiw	r24, 0x1f	; 31
    37cc:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    37d0:	d8 a0       	ldd	r13, Y+32	; 0x20
    37d2:	ce 01       	movw	r24, r28
    37d4:	85 96       	adiw	r24, 0x25	; 37
    37d6:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    37da:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    37dc:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    37de:	da 82       	std	Y+2, r13	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    37e0:	eb 82       	std	Y+3, r14	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    37e2:	fc 82       	std	Y+4, r15	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    37e4:	8d e1       	ldi	r24, 0x1D	; 29
    37e6:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    37e8:	87 e3       	ldi	r24, 0x37	; 55
    37ea:	8e 83       	std	Y+6, r24	; 0x06
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:328
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    37ec:	c3 01       	movw	r24, r6
    37ee:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <RTC_DS1307::adjust(DateTime const&)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:331
            }
        }   
        if (millis() - timr_Time > 1000)
    37f2:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    37f6:	c0 90 20 03 	lds	r12, 0x0320	; 0x800320 <timr_Time>
    37fa:	d0 90 21 03 	lds	r13, 0x0321	; 0x800321 <timr_Time+0x1>
    37fe:	e0 90 22 03 	lds	r14, 0x0322	; 0x800322 <timr_Time+0x2>
    3802:	f0 90 23 03 	lds	r15, 0x0323	; 0x800323 <timr_Time+0x3>
    3806:	6c 19       	sub	r22, r12
    3808:	7d 09       	sbc	r23, r13
    380a:	8e 09       	sbc	r24, r14
    380c:	9f 09       	sbc	r25, r15
    380e:	69 3e       	cpi	r22, 0xE9	; 233
    3810:	73 40       	sbci	r23, 0x03	; 3
    3812:	81 05       	cpc	r24, r1
    3814:	91 05       	cpc	r25, r1
    3816:	68 f1       	brcs	.+90     	; 0x3872 <main+0xf70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:333
        {
            timr_Time = millis();
    3818:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    381c:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timr_Time>
    3820:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timr_Time+0x1>
    3824:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timr_Time+0x2>
    3828:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:334
            showTime();
    382c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:335
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    3830:	c3 01       	movw	r24, r6
    3832:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3836:	ec 80       	ldd	r14, Y+4	; 0x04
    3838:	bc e3       	ldi	r27, 0x3C	; 60
    383a:	eb 9e       	mul	r14, r27
    383c:	70 01       	movw	r14, r0
    383e:	11 24       	eor	r1, r1
    3840:	ce 01       	movw	r24, r28
    3842:	43 96       	adiw	r24, 0x13	; 19
    3844:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3848:	8f 89       	ldd	r24, Y+23	; 0x17
    384a:	8e 0d       	add	r24, r14
    384c:	9f 2d       	mov	r25, r15
    384e:	91 1d       	adc	r25, r1
    3850:	09 2e       	mov	r0, r25
    3852:	00 0c       	add	r0, r0
    3854:	aa 0b       	sbc	r26, r26
    3856:	bb 0b       	sbc	r27, r27
    3858:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <CurTime>
    385c:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <CurTime+0x1>
    3860:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <CurTime+0x2>
    3864:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:336
            if (config.AutoPlay)
    3868:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <config+0x17>
    386c:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:337
                TriggerPlayer();
    386e:	0e 94 80 08 	call	0x1100	; 0x1100 <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:339
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    3872:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3876:	00 91 38 03 	lds	r16, 0x0338	; 0x800338 <timrLCD>
    387a:	10 91 39 03 	lds	r17, 0x0339	; 0x800339 <timrLCD+0x1>
    387e:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <timrLCD+0x2>
    3882:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <timrLCD+0x3>
    3886:	6b 01       	movw	r12, r22
    3888:	7c 01       	movw	r14, r24
    388a:	c0 1a       	sub	r12, r16
    388c:	d1 0a       	sbc	r13, r17
    388e:	e2 0a       	sbc	r14, r18
    3890:	f3 0a       	sbc	r15, r19
    3892:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <config+0x13>
    3896:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <config+0x14>
    389a:	28 ee       	ldi	r18, 0xE8	; 232
    389c:	33 e0       	ldi	r19, 0x03	; 3
    389e:	0e 94 06 2b 	call	0x560c	; 0x560c <__usmulhisi3>
    38a2:	6c 15       	cp	r22, r12
    38a4:	7d 05       	cpc	r23, r13
    38a6:	8e 05       	cpc	r24, r14
    38a8:	9f 05       	cpc	r25, r15
    38aa:	38 f4       	brcc	.+14     	; 0x38ba <main+0xfb8>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    38ac:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	8f ea       	ldi	r24, 0xAF	; 175
    38b4:	94 e0       	ldi	r25, 0x04	; 4
    38b6:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:343
        {
            lcd.noBacklight();
        }
        if (btn == BUTTON_MODE_LONG_PRESSED)
    38ba:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    38be:	85 38       	cpi	r24, 0x85	; 133
    38c0:	09 f0       	breq	.+2      	; 0x38c4 <main+0xfc2>
    38c2:	57 cd       	rjmp	.-1362   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:345
        {
            if (!ButLongPress)
    38c4:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <ButLongPress>
    38c8:	81 11       	cpse	r24, r1
    38ca:	53 cd       	rjmp	.-1370   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:347
            {
                appMode = APP_PLAYER_MODE;
    38cc:	85 e0       	ldi	r24, 0x05	; 5
    38ce:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:523
            if (!ButLongPress)
            {
                appMode = APP_NORMAL_MODE;
                PlayerONMor = 0;
                PlayerONEve = 0;
                lcd.clear();
    38d2:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:524
                ButLongPress = true;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <ButLongPress>
    38dc:	4a cd       	rjmp	.-1388   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:289
        if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    38de:	ce 01       	movw	r24, r28
    38e0:	49 96       	adiw	r24, 0x19	; 25
    38e2:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    38e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	de ce       	rjmp	.-580    	; 0x36a8 <main+0xda6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:313
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    38ec:	61 e0       	ldi	r22, 0x01	; 1
    38ee:	8c e0       	ldi	r24, 0x0C	; 12
    38f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:314
                    timrAmp = millis();
    38f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    38f8:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <timrAmp>
    38fc:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <timrAmp+0x1>
    3900:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <timrAmp+0x2>
    3904:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:315
                    appMode = APP_CHANT_MODE;
    3908:	83 e0       	ldi	r24, 0x03	; 3
    390a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
    390e:	33 cf       	rjmp	.-410    	; 0x3776 <main+0xe74>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:328
            {
                timrAmp = millis() - 71000L;
                if (rtc.now().minute() < 30)
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3910:	ce 01       	movw	r24, r28
    3912:	43 96       	adiw	r24, 0x13	; 19
    3914:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3918:	fe 88       	ldd	r15, Y+22	; 0x16
    391a:	ce 01       	movw	r24, r28
    391c:	49 96       	adiw	r24, 0x19	; 25
    391e:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3922:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3924:	ce 01       	movw	r24, r28
    3926:	4f 96       	adiw	r24, 0x1f	; 31
    3928:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    392c:	d8 a0       	ldd	r13, Y+32	; 0x20
    392e:	ce 01       	movw	r24, r28
    3930:	85 96       	adiw	r24, 0x25	; 37
    3932:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3936:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3938:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    393a:	da 82       	std	Y+2, r13	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    393c:	eb 82       	std	Y+3, r14	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    393e:	fc 82       	std	Y+4, r15	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    3940:	8b e3       	ldi	r24, 0x3B	; 59
    3942:	51 cf       	rjmp	.-350    	; 0x37e6 <main+0xee4>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    3944:	88 e0       	ldi	r24, 0x08	; 8
    3946:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	8f ea       	ldi	r24, 0xAF	; 175
    394e:	94 e0       	ldi	r25, 0x04	; 4
    3950:	0e 94 47 07 	call	0xe8e	; 0xe8e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:356
        }
        break;
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:357
        lcd.print("CHANT PLAYING...");
    395c:	86 e1       	ldi	r24, 0x16	; 22
    395e:	92 e0       	ldi	r25, 0x02	; 2
    3960:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:358
        if (millis() >= timrAmp + ampDelay)
    3964:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3968:	ab 01       	movw	r20, r22
    396a:	bc 01       	movw	r22, r24
    396c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <timrAmp>
    3970:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <timrAmp+0x1>
    3974:	a0 91 27 03 	lds	r26, 0x0327	; 0x800327 <timrAmp+0x2>
    3978:	b0 91 28 03 	lds	r27, 0x0328	; 0x800328 <timrAmp+0x3>
    397c:	88 57       	subi	r24, 0x78	; 120
    397e:	9c 4e       	sbci	r25, 0xEC	; 236
    3980:	af 4f       	sbci	r26, 0xFF	; 255
    3982:	bf 4f       	sbci	r27, 0xFF	; 255
    3984:	48 17       	cp	r20, r24
    3986:	59 07       	cpc	r21, r25
    3988:	6a 07       	cpc	r22, r26
    398a:	7b 07       	cpc	r23, r27
    398c:	10 f0       	brcs	.+4      	; 0x3992 <main+0x1090>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:359
            PlayChant();
    398e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:360
        if (btn == BUTTON_LEFT_SHORT_RELEASE && testMode)
    3992:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3996:	84 34       	cpi	r24, 0x44	; 68
    3998:	09 f0       	breq	.+2      	; 0x399c <main+0x109a>
    399a:	eb cc       	rjmp	.-1578   	; 0x3372 <main+0xa70>
    399c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <testMode>
    39a0:	88 23       	and	r24, r24
    39a2:	09 f4       	brne	.+2      	; 0x39a6 <main+0x10a4>
    39a4:	e6 cc       	rjmp	.-1588   	; 0x3372 <main+0xa70>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	86 e1       	ldi	r24, 0x16	; 22
    39ac:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
    39b0:	e0 cc       	rjmp	.-1600   	; 0x3372 <main+0xa70>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:368
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    39b2:	60 e0       	ldi	r22, 0x00	; 0
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:369
        lcd.print(F("  RUNNING DEMO  "));
    39ba:	82 e5       	ldi	r24, 0x52	; 82
    39bc:	93 e0       	ldi	r25, 0x03	; 3
    39be:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:370
        lcd.setCursor(0, 1);
    39c2:	61 e0       	ldi	r22, 0x01	; 1
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:371
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    39ca:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <demoTime>
    39ce:	f0 90 04 01 	lds	r15, 0x0104	; 0x800104 <demoTime+0x1>
main():
    39d2:	60 e7       	ldi	r22, 0x70	; 112
    39d4:	71 e0       	ldi	r23, 0x01	; 1
loop():
    39d6:	ec e0       	ldi	r30, 0x0C	; 12
    39d8:	ee 16       	cp	r14, r30
    39da:	f1 04       	cpc	r15, r1
    39dc:	14 f4       	brge	.+4      	; 0x39e2 <main+0x10e0>
main():
    39de:	67 e7       	ldi	r22, 0x77	; 119
    39e0:	71 e0       	ldi	r23, 0x01	; 1
loop():
    39e2:	ce 01       	movw	r24, r28
    39e4:	43 96       	adiw	r24, 0x13	; 19
    39e6:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
    39ea:	fd e0       	ldi	r31, 0x0D	; 13
    39ec:	ef 16       	cp	r14, r31
    39ee:	f1 04       	cpc	r15, r1
    39f0:	1c f0       	brlt	.+6      	; 0x39f8 <main+0x10f6>
    39f2:	2c e0       	ldi	r18, 0x0C	; 12
    39f4:	e2 1a       	sub	r14, r18
    39f6:	f1 08       	sbc	r15, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    39f8:	1a 8e       	std	Y+26, r1	; 0x1a
    39fa:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    39fc:	1c 8e       	std	Y+28, r1	; 0x1c
    39fe:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    3a00:	1e 8e       	std	Y+30, r1	; 0x1e
    3a02:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3a04:	4a e0       	ldi	r20, 0x0A	; 10
    3a06:	b3 01       	movw	r22, r6
    3a08:	c7 01       	movw	r24, r14
    3a0a:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    3a0e:	f3 01       	movw	r30, r6
    3a10:	01 90       	ld	r0, Z+
    3a12:	00 20       	and	r0, r0
    3a14:	e9 f7       	brne	.-6      	; 0x3a10 <main+0x110e>
    3a16:	31 97       	sbiw	r30, 0x01	; 1
    3a18:	7f 01       	movw	r14, r30
    3a1a:	e6 18       	sub	r14, r6
    3a1c:	f7 08       	sbc	r15, r7
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    3a1e:	b7 01       	movw	r22, r14
    3a20:	ce 01       	movw	r24, r28
    3a22:	49 96       	adiw	r24, 0x19	; 25
    3a24:	0e 94 43 0b 	call	0x1686	; 0x1686 <String::reserve(unsigned int)>
    3a28:	81 11       	cpse	r24, r1
    3a2a:	8d c0       	rjmp	.+282    	; 0x3b46 <main+0x1244>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	49 96       	adiw	r24, 0x19	; 25
    3a30:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    3a34:	67 e2       	ldi	r22, 0x27	; 39
    3a36:	72 e0       	ldi	r23, 0x02	; 2
    3a38:	c3 01       	movw	r24, r6
    3a3a:	0e 94 9e 0b 	call	0x173c	; 0x173c <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:371
    3a3e:	be 01       	movw	r22, r28
    3a40:	67 5e       	subi	r22, 0xE7	; 231
    3a42:	7f 4f       	sbci	r23, 0xFF	; 255
    3a44:	c3 01       	movw	r24, r6
    3a46:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <operator+(StringSumHelper const&, String const&)>
    3a4a:	be 01       	movw	r22, r28
    3a4c:	6d 5e       	subi	r22, 0xED	; 237
    3a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a50:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    3a54:	dc 01       	movw	r26, r24
    3a56:	14 96       	adiw	r26, 0x04	; 4
    3a58:	4d 91       	ld	r20, X+
    3a5a:	5c 91       	ld	r21, X
    3a5c:	15 97       	sbiw	r26, 0x05	; 5
    3a5e:	6d 91       	ld	r22, X+
    3a60:	7c 91       	ld	r23, X
    3a62:	8f ea       	ldi	r24, 0xAF	; 175
    3a64:	94 e0       	ldi	r25, 0x04	; 4
    3a66:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
    3a72:	89 8d       	ldd	r24, Y+25	; 0x19
    3a74:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a76:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
    3a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7e:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:372
        digitalWrite(AMP, HIGH);
    3a82:	61 e0       	ldi	r22, 0x01	; 1
    3a84:	8c e0       	ldi	r24, 0x0C	; 12
    3a86:	0e 94 57 03 	call	0x6ae	; 0x6ae <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:374
        // delay(1000);
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    3a8a:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <demoTime>
    3a8e:	c3 01       	movw	r24, r6
    3a90:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3a94:	eb 80       	ldd	r14, Y+3	; 0x03
    3a96:	ce 01       	movw	r24, r28
    3a98:	43 96       	adiw	r24, 0x13	; 19
    3a9a:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3a9e:	dc 88       	ldd	r13, Y+20	; 0x14
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	49 96       	adiw	r24, 0x19	; 25
    3aa4:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3aa8:	89 8d       	ldd	r24, Y+25	; 0x19
    3aaa:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <bell>
    3aae:	d0 92 aa 04 	sts	0x04AA, r13	; 0x8004aa <bell+0x1>
    3ab2:	e0 92 ab 04 	sts	0x04AB, r14	; 0x8004ab <bell+0x2>
    3ab6:	f0 92 ac 04 	sts	0x04AC, r15	; 0x8004ac <bell+0x3>
    3aba:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <bell+0x4>
    3abe:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <bell+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:375
        PlayChant();
    3ac2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:376
        if (btn == BUTTON_DOWN_PRESSED)
    3ac6:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3aca:	83 30       	cpi	r24, 0x03	; 3
    3acc:	41 f4       	brne	.+16     	; 0x3ade <main+0x11dc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:378
        {
            playSong = End_of_Song;
    3ace:	88 e0       	ldi	r24, 0x08	; 8
    3ad0:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	60 e0       	ldi	r22, 0x00	; 0
    3ad8:	86 e1       	ldi	r24, 0x16	; 22
    3ada:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:381
            myDFPlayer.stop();
        }
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3ade:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3ae2:	8f 77       	andi	r24, 0x7F	; 127
    3ae4:	82 30       	cpi	r24, 0x02	; 2
    3ae6:	b9 f5       	brne	.+110    	; 0x3b56 <main+0x1254>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:383
        {
            config.vol = ++config.vol > 30 ? 10 : config.vol;
    3ae8:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <config+0x15>
    3aec:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <config+0x16>
    3af0:	01 96       	adiw	r24, 0x01	; 1
    3af2:	8f 31       	cpi	r24, 0x1F	; 31
    3af4:	91 05       	cpc	r25, r1
    3af6:	14 f0       	brlt	.+4      	; 0x3afc <main+0x11fa>
main():
    3af8:	8a e0       	ldi	r24, 0x0A	; 10
    3afa:	90 e0       	ldi	r25, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:394
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    3afc:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x16>
    3b00:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:395
            config.save();
    3b04:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:396
            lcd.clear();
    3b08:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:397
            lcd.setCursor(0, 1);
    3b0c:	61 e0       	ldi	r22, 0x01	; 1
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:398
            lcd.print("VOLUME : ");
    3b14:	84 e3       	ldi	r24, 0x34	; 52
    3b16:	92 e0       	ldi	r25, 0x02	; 2
    3b18:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:399
            lcd.print(config.vol);
    3b1c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <config+0x15>
    3b20:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <config+0x16>
    3b24:	0e 94 4b 0a 	call	0x1496	; 0x1496 <Print::print(int, int) [clone .constprop.4]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    3b28:	60 91 c9 03 	lds	r22, 0x03C9	; 0x8003c9 <config+0x15>
    3b2c:	70 91 ca 03 	lds	r23, 0x03CA	; 0x8003ca <config+0x16>
    3b30:	77 27       	eor	r23, r23
    3b32:	86 e0       	ldi	r24, 0x06	; 6
    3b34:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:401
            myDFPlayer.volume(config.vol);
            delay(100);
    3b38:	64 e6       	ldi	r22, 0x64	; 100
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 23 04 	call	0x846	; 0x846 <delay>
    3b44:	16 cc       	rjmp	.-2004   	; 0x3372 <main+0xa70>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3b46:	fe 8e       	std	Y+30, r15	; 0x1e
    3b48:	ed 8e       	std	Y+29, r14	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    3b4a:	b3 01       	movw	r22, r6
    3b4c:	89 8d       	ldd	r24, Y+25	; 0x19
    3b4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b50:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
    3b54:	6f cf       	rjmp	.-290    	; 0x3a34 <main+0x1132>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:392
            lcd.print("VOLUME : ");
            lcd.print(config.vol);
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3b56:	83 30       	cpi	r24, 0x03	; 3
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <main+0x125a>
    3b5a:	0b cc       	rjmp	.-2026   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:394
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    3b5c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <config+0x15>
    3b60:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <config+0x16>
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	8a 30       	cpi	r24, 0x0A	; 10
    3b68:	91 05       	cpc	r25, r1
    3b6a:	44 f6       	brge	.-112    	; 0x3afc <main+0x11fa>
main():
    3b6c:	8e e1       	ldi	r24, 0x1E	; 30
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	c5 cf       	rjmp	.-118    	; 0x3afc <main+0x11fa>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:407
        }
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > 30000)
    3b72:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3b76:	c0 90 34 03 	lds	r12, 0x0334	; 0x800334 <timrMNU>
    3b7a:	d0 90 35 03 	lds	r13, 0x0335	; 0x800335 <timrMNU+0x1>
    3b7e:	e0 90 36 03 	lds	r14, 0x0336	; 0x800336 <timrMNU+0x2>
    3b82:	f0 90 37 03 	lds	r15, 0x0337	; 0x800337 <timrMNU+0x3>
    3b86:	6c 19       	sub	r22, r12
    3b88:	7d 09       	sbc	r23, r13
    3b8a:	8e 09       	sbc	r24, r14
    3b8c:	9f 09       	sbc	r25, r15
    3b8e:	61 33       	cpi	r22, 0x31	; 49
    3b90:	75 47       	sbci	r23, 0x75	; 117
    3b92:	81 05       	cpc	r24, r1
    3b94:	91 05       	cpc	r25, r1
    3b96:	d8 f0       	brcs	.+54     	; 0x3bce <main+0x12cc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:409
        {
            if (!digitalRead(STA_PIN))
    3b98:	84 e0       	ldi	r24, 0x04	; 4
    3b9a:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3b9e:	89 2b       	or	r24, r25
    3ba0:	11 f4       	brne	.+4      	; 0x3ba6 <main+0x12a4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:411
            {
                stopPreSong();
    3ba2:	0e 94 77 08 	call	0x10ee	; 0x10ee <stopPreSong()>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3ba6:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Menu1>
    3baa:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <Menu1+0x1>
    3bae:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Menu1+0x4>
    3bb2:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3bb6:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1+0x2>
    3bba:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3bbe:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    3bc2:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:414
            }
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3bc6:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:415
            lcd.clear();
    3bca:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:418
        }
    
        if (Menu1.getCurrentItemCmdId() == 1 ||  
    3bce:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:419
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <main+0x12d6>
    3bd6:	52 c0       	rjmp	.+164    	; 0x3c7c <main+0x137a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:422
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    3bd8:	c3 01       	movw	r24, r6
    3bda:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3bde:	8b 81       	ldd	r24, Y+3	; 0x03
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <StDate+0x1>
    3be6:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <StDate>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:423
            StMonth = rtc.now().month();
    3bea:	c3 01       	movw	r24, r6
    3bec:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <StMonth+0x1>
    3bf8:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <StMonth>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:424
            StYear = rtc.now().year();
    3bfc:	c3 01       	movw	r24, r6
    3bfe:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.h:97
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	80 53       	subi	r24, 0x30	; 48
    3c08:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:424
    3c0a:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <StYear+0x1>
    3c0e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <StYear>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:425
            StHr = rtc.now().hour();
    3c12:	c3 01       	movw	r24, r6
    3c14:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3c18:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <StHr+0x1>
    3c20:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <StHr>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:426
            StMin = rtc.now().minute();
    3c24:	c3 01       	movw	r24, r6
    3c26:	0e 94 49 09 	call	0x1292	; 0x1292 <RTC_DS1307::now()>
    3c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <StMin+0x1>
    3c32:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <StMin>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:428
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
    3c36:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:433
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    3c3a:	83 30       	cpi	r24, 0x03	; 3
    3c3c:	49 f1       	breq	.+82     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:429
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
    3c3e:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:428
            StMonth = rtc.now().month();
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
    3c42:	85 31       	cpi	r24, 0x15	; 21
    3c44:	29 f1       	breq	.+74     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:430
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
    3c46:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:429
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
    3c4a:	86 31       	cpi	r24, 0x16	; 22
    3c4c:	09 f1       	breq	.+66     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:431
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
    3c4e:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:430
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
    3c52:	88 31       	cpi	r24, 0x18	; 24
    3c54:	e9 f0       	breq	.+58     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:432
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
    3c56:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:431
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
    3c5a:	89 31       	cpi	r24, 0x19	; 25
    3c5c:	c9 f0       	breq	.+50     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:433
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    3c5e:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:432
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
    3c62:	8a 31       	cpi	r24, 0x1A	; 26
    3c64:	a9 f0       	breq	.+42     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:434
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
    3c66:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:433
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    3c6a:	8b 31       	cpi	r24, 0x1B	; 27
    3c6c:	89 f0       	breq	.+34     	; 0x3c90 <main+0x138e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:438
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    3c6e:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    3c72:	82 30       	cpi	r24, 0x02	; 2
    3c74:	79 f4       	brne	.+30     	; 0x3c94 <main+0x1392>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:440
        {
            blinkMode = setDate;
    3c76:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
    3c7a:	0c c0       	rjmp	.+24     	; 0x3c94 <main+0x1392>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:419
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }
    
        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3c7c:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:418
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }
    
        if (Menu1.getCurrentItemCmdId() == 1 ||  
    3c80:	82 30       	cpi	r24, 0x02	; 2
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <main+0x1384>
    3c84:	a9 cf       	rjmp	.-174    	; 0x3bd8 <main+0x12d6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:420
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    3c86:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:419
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }
    
        if (Menu1.getCurrentItemCmdId() == 1 ||  
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate || 
    3c8a:	83 30       	cpi	r24, 0x03	; 3
    3c8c:	a1 f6       	brne	.-88     	; 0x3c36 <main+0x1334>
    3c8e:	a4 cf       	rjmp	.-184    	; 0x3bd8 <main+0x12d6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:436
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
        {
            blinkMode = setHr;
    3c90:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <blinkMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:443
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    3c94:	10 91 3c 03 	lds	r17, 0x033C	; 0x80033c <btn>
    3c98:	14 38       	cpi	r17, 0x84	; 132
    3c9a:	a1 f4       	brne	.+40     	; 0x3cc4 <main+0x13c2>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3c9c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Menu1>
    3ca0:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <Menu1+0x1>
    3ca4:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Menu1+0x4>
    3ca8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3cac:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1+0x2>
    3cb0:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3cb4:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    3cb8:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:446
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3cbc:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:447
            lcd.clear();
    3cc0:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1264
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    3cc4:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.96]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1266

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    3cc8:	81 2f       	mov	r24, r17
    3cca:	8f 77       	andi	r24, 0x7F	; 127
    3ccc:	82 30       	cpi	r24, 0x02	; 2
    3cce:	61 f1       	breq	.+88     	; 0x3d28 <main+0x1426>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1268
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    3cd0:	83 30       	cpi	r24, 0x03	; 3
    3cd2:	61 f1       	breq	.+88     	; 0x3d2c <main+0x142a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1270
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    3cd4:	11 30       	cpi	r17, 0x01	; 1
    3cd6:	61 f1       	breq	.+88     	; 0x3d30 <main+0x142e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1272
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    3cd8:	14 34       	cpi	r17, 0x44	; 68
    3cda:	61 f1       	breq	.+88     	; 0x3d34 <main+0x1432>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1263
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    3cdc:	10 e0       	ldi	r17, 0x00	; 0
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    3cde:	8d ef       	ldi	r24, 0xFD	; 253
    3ce0:	81 0f       	add	r24, r17
    3ce2:	82 30       	cpi	r24, 0x02	; 2
    3ce4:	08 f0       	brcs	.+2      	; 0x3ce8 <main+0x13e6>
    3ce6:	ae c0       	rjmp	.+348    	; 0x3e44 <main+0x1542>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    3ce8:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    3cec:	88 23       	and	r24, r24
    3cee:	21 f1       	breq	.+72     	; 0x3d38 <main+0x1436>
    3cf0:	14 30       	cpi	r17, 0x04	; 4
    3cf2:	11 f1       	breq	.+68     	; 0x3d38 <main+0x1436>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    3cf4:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.96]>
    3cf8:	81 11       	cpse	r24, r1
    3cfa:	61 c0       	rjmp	.+194    	; 0x3dbe <main+0x14bc>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:462
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    3cfc:	82 e0       	ldi	r24, 0x02	; 2
    3cfe:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:463
            if (Menu1.getCurrentItemCmdId())
    3d02:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    3d06:	88 23       	and	r24, r24
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <main+0x140a>
    3d0a:	33 cb       	rjmp	.-2458   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:465
            {
                lcd.setCursor(0, 1);
    3d0c:	61 e0       	ldi	r22, 0x01	; 1
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:466
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    3d14:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:491
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    3d16:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <strbuf>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:492
            strbuf[1] = 0;
    3d1a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:493
            lcd.print(strbuf);
    3d1e:	88 e2       	ldi	r24, 0x28	; 40
    3d20:	94 e0       	ldi	r25, 0x04	; 4
    3d22:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
    3d26:	25 cb       	rjmp	.-2486   	; 0x3372 <main+0xa70>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1267
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    3d28:	11 e0       	ldi	r17, 0x01	; 1
    3d2a:	d9 cf       	rjmp	.-78     	; 0x3cde <main+0x13dc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1269
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    3d2c:	12 e0       	ldi	r17, 0x02	; 2
    3d2e:	d7 cf       	rjmp	.-82     	; 0x3cde <main+0x13dc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1271
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    3d30:	13 e0       	ldi	r17, 0x03	; 3
    3d32:	d5 cf       	rjmp	.-86     	; 0x3cde <main+0x13dc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1273
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    3d34:	14 e0       	ldi	r17, 0x04	; 4
    3d36:	d3 cf       	rjmp	.-90     	; 0x3cde <main+0x13dc>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    3d38:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    3d3c:	81 11       	cpse	r24, r1
    3d3e:	1a c0       	rjmp	.+52     	; 0x3d74 <main+0x1472>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3d40:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Menu1>
    3d44:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <Menu1+0x1>
    3d48:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Menu1+0x4>
    3d4c:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3d50:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1+0x2>
    3d54:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3d58:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:453
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            if (!digitalRead(STA_PIN))
    3d5c:	84 e0       	ldi	r24, 0x04	; 4
    3d5e:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3d62:	89 2b       	or	r24, r25
    3d64:	11 f4       	brne	.+4      	; 0x3d6a <main+0x1468>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:455
            {
                stopPreSong();
    3d66:	0e 94 77 08 	call	0x10ee	; 0x10ee <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:457
            }
            lcd.clear();
    3d6a:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:458
            appMode = APP_NORMAL_MODE;
    3d6e:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
    3d72:	ff ca       	rjmp	.-2562   	; 0x3372 <main+0xa70>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    3d74:	81 50       	subi	r24, 0x01	; 1
    3d76:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	aa 0f       	add	r26, r26
    3d80:	bb 1f       	adc	r27, r27
    3d82:	aa 0f       	add	r26, r26
    3d84:	bb 1f       	adc	r27, r27
    3d86:	a7 5c       	subi	r26, 0xC7	; 199
    3d88:	bb 4f       	sbci	r27, 0xFB	; 251
    3d8a:	19 96       	adiw	r26, 0x09	; 9
    3d8c:	2d 91       	ld	r18, X+
    3d8e:	3c 91       	ld	r19, X
    3d90:	1a 97       	sbiw	r26, 0x0a	; 10
    3d92:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <Menu1+0x4>
    3d96:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    3d9a:	88 0f       	add	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	fc 01       	movw	r30, r24
    3da4:	ef 5b       	subi	r30, 0xBF	; 191
    3da6:	fb 4f       	sbci	r31, 0xFB	; 251
    3da8:	80 81       	ld	r24, Z
    3daa:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    3dae:	17 96       	adiw	r26, 0x07	; 7
    3db0:	8c 91       	ld	r24, X
    3db2:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    3db6:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    3db8:	0e 94 12 11 	call	0x2224	; 0x2224 <refreshMenuDisplay(unsigned char)>
    3dbc:	da ca       	rjmp	.-2636   	; 0x3372 <main+0xa70>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    3dbe:	0e 94 26 02 	call	0x44c	; 0x44c <MenuManager::currentItemHasChildren() [clone .constprop.96]>
    3dc2:	88 23       	and	r24, r24
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <main+0x14c6>
    3dc6:	3c c0       	rjmp	.+120    	; 0x3e40 <main+0x153e>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3dc8:	30 91 3f 04 	lds	r19, 0x043F	; 0x80043f <Menu1+0x6>
    3dcc:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <Menu1+0x3>
    3dd0:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    3dd4:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <Menu1+0x1b>
    3dd8:	25 30       	cpi	r18, 0x05	; 5
    3dda:	e8 f4       	brcc	.+58     	; 0x3e16 <main+0x1514>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    3ddc:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    3de0:	82 2f       	mov	r24, r18
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	dc 01       	movw	r26, r24
    3de6:	aa 0f       	add	r26, r26
    3de8:	bb 1f       	adc	r27, r27
    3dea:	aa 0f       	add	r26, r26
    3dec:	bb 1f       	adc	r27, r27
    3dee:	a7 5c       	subi	r26, 0xC7	; 199
    3df0:	bb 4f       	sbci	r27, 0xFB	; 251
    3df2:	17 96       	adiw	r26, 0x07	; 7
    3df4:	3c 93       	st	X, r19
    3df6:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	8f 5b       	subi	r24, 0xBF	; 191
    3e02:	9b 4f       	sbci	r25, 0xFB	; 251
    3e04:	fc 01       	movw	r30, r24
    3e06:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    3e08:	1a 96       	adiw	r26, 0x0a	; 10
    3e0a:	7c 93       	st	X, r23
    3e0c:	6e 93       	st	-X, r22
    3e0e:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:215
    menuStackCount++;
    3e10:	2f 5f       	subi	r18, 0xFF	; 255
    3e12:	20 93 54 04 	sts	0x0454, r18	; 0x800454 <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    3e16:	cb 01       	movw	r24, r22
    3e18:	f6 e0       	ldi	r31, 0x06	; 6
    3e1a:	3f 9f       	mul	r19, r31
    3e1c:	80 0d       	add	r24, r0
    3e1e:	91 1d       	adc	r25, r1
    3e20:	11 24       	eor	r1, r1
    3e22:	fc 01       	movw	r30, r24
    3e24:	35 96       	adiw	r30, 0x05	; 5
    3e26:	e4 91       	lpm	r30, Z
    3e28:	e0 93 3e 04 	sts	0x043E, r30	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	33 96       	adiw	r30, 0x03	; 3
    3e30:	85 91       	lpm	r24, Z+
    3e32:	94 91       	lpm	r25, Z
    3e34:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Menu1+0x4>
    3e38:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    3e3c:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    3e40:	83 e0       	ldi	r24, 0x03	; 3
    3e42:	ba cf       	rjmp	.-140    	; 0x3db8 <main+0x14b6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    3e44:	11 30       	cpi	r17, 0x01	; 1
    3e46:	51 f4       	brne	.+20     	; 0x3e5c <main+0x155a>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    3e48:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <Menu1+0x6>
    3e4c:	88 23       	and	r24, r24
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <main+0x1550>
    3e50:	90 ca       	rjmp	.-2784   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    3e52:	81 50       	subi	r24, 0x01	; 1
    3e54:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	ae cf       	rjmp	.-164    	; 0x3db8 <main+0x14b6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    3e5c:	12 30       	cpi	r17, 0x02	; 2
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <main+0x1560>
    3e60:	88 ca       	rjmp	.-2800   	; 0x3372 <main+0xa70>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    3e62:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <Menu1+0x6>
    3e66:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <Menu1+0x5>
    3e6a:	21 50       	subi	r18, 0x01	; 1
    3e6c:	33 0b       	sbc	r19, r19
    3e6e:	82 17       	cp	r24, r18
    3e70:	13 06       	cpc	r1, r19
    3e72:	0c f0       	brlt	.+2      	; 0x3e76 <main+0x1574>
    3e74:	7e ca       	rjmp	.-2820   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    3e76:	8f 5f       	subi	r24, 0xFF	; 255
    3e78:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	9c cf       	rjmp	.-200    	; 0x3db8 <main+0x14b6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:475
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    3e80:	0e 94 95 02 	call	0x52a	; 0x52a <MenuManager::getCurrentItemCmdId() [clone .constprop.78]>
    3e84:	d8 2e       	mov	r13, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:652
    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }

    switch (cmdId)
    3e86:	ee ef       	ldi	r30, 0xFE	; 254
    3e88:	e8 0f       	add	r30, r24
    3e8a:	ed 31       	cpi	r30, 0x1D	; 29
    3e8c:	10 f0       	brcs	.+4      	; 0x3e92 <main+0x1590>
    3e8e:	0c 94 15 28 	jmp	0x502a	; 0x502a <main+0x2728>
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	e2 5b       	subi	r30, 0xB2	; 178
    3e96:	f0 4e       	sbci	r31, 0xE0	; 224
    3e98:	0c 94 00 2b 	jmp	0x5600	; 0x5600 <__tablejump2__>
    3e9c:	6b 1f       	adc	r22, r27
    3e9e:	76 20       	and	r7, r6
    3ea0:	15 28       	or	r1, r5
    3ea2:	f8 20       	and	r15, r8
    3ea4:	2a 21       	and	r18, r10
    3ea6:	58 21       	and	r21, r8
    3ea8:	15 28       	or	r1, r5
    3eaa:	82 21       	and	r24, r2
    3eac:	bc 21       	and	r27, r12
    3eae:	15 28       	or	r1, r5
    3eb0:	d1 21       	and	r29, r1
    3eb2:	03 22       	and	r0, r19
    3eb4:	15 28       	or	r1, r5
    3eb6:	1b 22       	and	r1, r27
    3eb8:	4b 22       	and	r4, r27
    3eba:	7b 22       	and	r7, r27
    3ebc:	b4 22       	and	r11, r20
    3ebe:	52 27       	eor	r21, r18
    3ec0:	15 28       	or	r1, r5
    3ec2:	e7 22       	and	r14, r23
    3ec4:	9c 23       	and	r25, r28
    3ec6:	15 28       	or	r1, r5
    3ec8:	4a 24       	eor	r4, r10
    3eca:	f8 24       	eor	r15, r8
    3ecc:	a6 25       	eor	r26, r6
    3ece:	52 26       	eor	r5, r18
    3ed0:	15 28       	or	r1, r5
    3ed2:	26 27       	eor	r18, r22
    3ed4:	00 27       	eor	r16, r16
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:656
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    3ed6:	12 30       	cpi	r17, 0x02	; 2
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <main+0x15da>
    3eda:	8e c0       	rjmp	.+284    	; 0x3ff8 <main+0x16f6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:658
        {
            if (blinkMode == setDate)
    3edc:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    3ee0:	82 30       	cpi	r24, 0x02	; 2
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <main+0x15e4>
    3ee4:	5f c0       	rjmp	.+190    	; 0x3fa4 <main+0x16a2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:659
                StDate = ++StDate > 31 ? 1 : StDate;
    3ee6:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <StDate>
    3eea:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <StDate+0x1>
    3eee:	01 96       	adiw	r24, 0x01	; 1
    3ef0:	80 32       	cpi	r24, 0x20	; 32
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	14 f0       	brlt	.+4      	; 0x3efa <main+0x15f8>
main():
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3efa:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <StDate+0x1>
    3efe:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3f02:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3f04:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1205
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    3f06:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <btn>
    3f0a:	84 34       	cpi	r24, 0x44	; 68
    3f0c:	21 f0       	breq	.+8      	; 0x3f16 <main+0x1614>
    3f0e:	11 23       	and	r17, r17
    3f10:	11 f4       	brne	.+4      	; 0x3f16 <main+0x1614>
    3f12:	0c 94 85 28 	jmp	0x510a	; 0x510a <main+0x2808>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1208
    {
        complete = true;
        lcd.setCursor(1, 1);
    3f16:	61 e0       	ldi	r22, 0x01	; 1
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1209
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    3f1e:	8d 2d       	mov	r24, r13
    3f20:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Config::getFormattedStr(unsigned char) [clone .constprop.87]>
    3f24:	0e 94 cb 0a 	call	0x1596	; 0x1596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>
    3f28:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1207
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    3f2c:	ee 24       	eor	r14, r14
    3f2e:	e3 94       	inc	r14
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:476
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > 30000)
    3f30:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    3f34:	80 90 34 03 	lds	r8, 0x0334	; 0x800334 <timrMNU>
    3f38:	90 90 35 03 	lds	r9, 0x0335	; 0x800335 <timrMNU+0x1>
    3f3c:	a0 90 36 03 	lds	r10, 0x0336	; 0x800336 <timrMNU+0x2>
    3f40:	b0 90 37 03 	lds	r11, 0x0337	; 0x800337 <timrMNU+0x3>
    3f44:	68 19       	sub	r22, r8
    3f46:	79 09       	sbc	r23, r9
    3f48:	8a 09       	sbc	r24, r10
    3f4a:	9b 09       	sbc	r25, r11
    3f4c:	61 33       	cpi	r22, 0x31	; 49
    3f4e:	75 47       	sbci	r23, 0x75	; 117
    3f50:	81 05       	cpc	r24, r1
    3f52:	91 05       	cpc	r25, r1
    3f54:	d8 f0       	brcs	.+54     	; 0x3f8c <main+0x168a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:478
        {
            if (!digitalRead(STA_PIN))
    3f56:	84 e0       	ldi	r24, 0x04	; 4
    3f58:	0e 94 2e 03 	call	0x65c	; 0x65c <digitalRead>
    3f5c:	89 2b       	or	r24, r25
    3f5e:	11 f4       	brne	.+4      	; 0x3f64 <main+0x1662>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:480
            {
                stopPreSong();
    3f60:	0e 94 77 08 	call	0x10ee	; 0x10ee <stopPreSong()>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    3f64:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Menu1>
    3f68:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <Menu1+0x1>
    3f6c:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Menu1+0x4>
    3f70:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    3f74:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1+0x2>
    3f78:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    3f7c:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    3f80:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:483
            }
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    3f84:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:484
            lcd.clear();
    3f88:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:486
        }
        if (processingComplete)
    3f8c:	ee 20       	and	r14, r14
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <main+0x1690>
    3f90:	f0 c9       	rjmp	.-3104   	; 0x3372 <main+0xa70>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:488
        {
            appMode = APP_MENU_MODE;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:490
            // clear forward arrow
            lcd.setCursor(0, 1);
    3f98:	61 e0       	ldi	r22, 0x01	; 1
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:491
            strbuf[0] = ' '; // clear forward arrow
    3fa0:	80 e2       	ldi	r24, 0x20	; 32
    3fa2:	b9 ce       	rjmp	.-654    	; 0x3d16 <main+0x1414>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:660
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    3fa4:	83 30       	cpi	r24, 0x03	; 3
    3fa6:	89 f4       	brne	.+34     	; 0x3fca <main+0x16c8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:661
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    3fa8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <StMonth>
    3fac:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <StMonth+0x1>
    3fb0:	01 96       	adiw	r24, 0x01	; 1
    3fb2:	8d 30       	cpi	r24, 0x0D	; 13
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	14 f0       	brlt	.+4      	; 0x3fbc <main+0x16ba>
main():
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    3fbc:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <StMonth+0x1>
    3fc0:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <StMonth>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3fc4:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3fc6:	10 e0       	ldi	r17, 0x00	; 0
    3fc8:	9e cf       	rjmp	.-196    	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    3fca:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3fcc:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:662
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    3fce:	84 30       	cpi	r24, 0x04	; 4
    3fd0:	09 f0       	breq	.+2      	; 0x3fd4 <main+0x16d2>
    3fd2:	99 cf       	rjmp	.-206    	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:663
                StYear = ++StYear > 2050 ? 2020 : StYear;
    3fd4:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <StYear>
    3fd8:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <StYear+0x1>
    3fdc:	01 96       	adiw	r24, 0x01	; 1
    3fde:	83 30       	cpi	r24, 0x03	; 3
    3fe0:	28 e0       	ldi	r18, 0x08	; 8
    3fe2:	92 07       	cpc	r25, r18
    3fe4:	14 f0       	brlt	.+4      	; 0x3fea <main+0x16e8>
main():
    3fe6:	84 ee       	ldi	r24, 0xE4	; 228
    3fe8:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
    3fea:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <StYear+0x1>
    3fee:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <StYear>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    3ff2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    3ff4:	10 e0       	ldi	r17, 0x00	; 0
    3ff6:	87 cf       	rjmp	.-242    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:665
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    3ff8:	13 30       	cpi	r17, 0x03	; 3
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <main+0x16fc>
    3ffc:	3f c0       	rjmp	.+126    	; 0x407c <main+0x177a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:667
        {
            if (blinkMode == setDate)
    3ffe:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4002:	82 30       	cpi	r24, 0x02	; 2
    4004:	89 f4       	brne	.+34     	; 0x4028 <main+0x1726>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:668
                StDate = --StDate < 1 ? 31 : StDate;
    4006:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <StDate>
    400a:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <StDate+0x1>
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	18 16       	cp	r1, r24
    4012:	19 06       	cpc	r1, r25
    4014:	14 f0       	brlt	.+4      	; 0x401a <main+0x1718>
main():
    4016:	8f e1       	ldi	r24, 0x1F	; 31
    4018:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    401a:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <StDate+0x1>
    401e:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <StDate>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4022:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4024:	10 e0       	ldi	r17, 0x00	; 0
    4026:	6f cf       	rjmp	.-290    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:669
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
    4028:	83 30       	cpi	r24, 0x03	; 3
    402a:	89 f4       	brne	.+34     	; 0x404e <main+0x174c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:670
                StMonth = --StMonth < 1 ? 12 : StMonth;
    402c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <StMonth>
    4030:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <StMonth+0x1>
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	18 16       	cp	r1, r24
    4038:	19 06       	cpc	r1, r25
    403a:	14 f0       	brlt	.+4      	; 0x4040 <main+0x173e>
main():
    403c:	8c e0       	ldi	r24, 0x0C	; 12
    403e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4040:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <StMonth+0x1>
    4044:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <StMonth>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4048:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    404a:	10 e0       	ldi	r17, 0x00	; 0
    404c:	5c cf       	rjmp	.-328    	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    404e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4050:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:671
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
    4052:	84 30       	cpi	r24, 0x04	; 4
    4054:	09 f0       	breq	.+2      	; 0x4058 <main+0x1756>
    4056:	57 cf       	rjmp	.-338    	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:672
                StYear = --StYear < 2020 ? 2050 : StYear;
    4058:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <StYear>
    405c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <StYear+0x1>
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	84 3e       	cpi	r24, 0xE4	; 228
    4064:	37 e0       	ldi	r19, 0x07	; 7
    4066:	93 07       	cpc	r25, r19
    4068:	14 f4       	brge	.+4      	; 0x406e <main+0x176c>
main():
    406a:	82 e0       	ldi	r24, 0x02	; 2
    406c:	98 e0       	ldi	r25, 0x08	; 8
processMenuCommand():
    406e:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <StYear+0x1>
    4072:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <StYear>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4076:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4078:	10 e0       	ldi	r17, 0x00	; 0
    407a:	45 cf       	rjmp	.-374    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:674
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2020 ? 2050 : StYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    407c:	11 30       	cpi	r17, 0x01	; 1
    407e:	09 f0       	breq	.+2      	; 0x4082 <main+0x1780>
    4080:	d8 c7       	rjmp	.+4016   	; 0x5032 <main+0x2730>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:676
        {
            if (blinkMode == setDate)
    4082:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4086:	82 30       	cpi	r24, 0x02	; 2
    4088:	31 f4       	brne	.+12     	; 0x4096 <main+0x1794>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:678
            {
                blinkMode = setMonth;
    408a:	83 e0       	ldi	r24, 0x03	; 3
    408c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4090:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4092:	10 e0       	ldi	r17, 0x00	; 0
    4094:	38 cf       	rjmp	.-400    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:680
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    4096:	83 30       	cpi	r24, 0x03	; 3
    4098:	31 f4       	brne	.+12     	; 0x40a6 <main+0x17a4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:682
            {
                blinkMode = setYear;
    409a:	84 e0       	ldi	r24, 0x04	; 4
    409c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    40a0:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    40a2:	10 e0       	ldi	r17, 0x00	; 0
    40a4:	30 cf       	rjmp	.-416    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:684
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
    40a6:	84 30       	cpi	r24, 0x04	; 4
    40a8:	09 f0       	breq	.+2      	; 0x40ac <main+0x17aa>
    40aa:	c7 c7       	rjmp	.+3982   	; 0x503a <main+0x2738>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:686
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    40ac:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <StMin>
    40b0:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <StHr>
    40b4:	40 91 b2 03 	lds	r20, 0x03B2	; 0x8003b2 <StDate>
    40b8:	50 91 b0 03 	lds	r21, 0x03B0	; 0x8003b0 <StMonth>
    40bc:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <StYear>
    40c0:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:228
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    40c4:	80 3d       	cpi	r24, 0xD0	; 208
    40c6:	67 e0       	ldi	r22, 0x07	; 7
    40c8:	96 07       	cpc	r25, r22
    40ca:	10 f0       	brcs	.+4      	; 0x40d0 <main+0x17ce>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:229
    year -= 2000U;
    40cc:	80 5d       	subi	r24, 0xD0	; 208
    40ce:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
  yOff = year;
    40d0:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    40d2:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    40d4:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    40d6:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    40d8:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    40da:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:686
    40dc:	c3 01       	movw	r24, r6
    40de:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <RTC_DS1307::adjust(DateTime const&)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:688
                complete = true;
                blink = true;
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    40e8:	e1 2c       	mov	r14, r1
    40ea:	0d cf       	rjmp	.-486    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:695
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    40ec:	12 30       	cpi	r17, 0x02	; 2
    40ee:	41 f5       	brne	.+80     	; 0x4140 <main+0x183e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:697
        {
            if (blinkMode == setHr)
    40f0:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    40f4:	11 11       	cpse	r17, r1
    40f6:	10 c0       	rjmp	.+32     	; 0x4118 <main+0x1816>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:698
                StHr = ++StHr > 23 ? 0 : StHr;
    40f8:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <StHr>
    40fc:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <StHr+0x1>
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	88 31       	cpi	r24, 0x18	; 24
    4104:	91 05       	cpc	r25, r1
    4106:	14 f0       	brlt	.+4      	; 0x410c <main+0x180a>
main():
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    410c:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <StHr+0x1>
    4110:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4114:	e1 2c       	mov	r14, r1
    4116:	f7 ce       	rjmp	.-530    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:699
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    4118:	11 30       	cpi	r17, 0x01	; 1
    411a:	09 f0       	breq	.+2      	; 0x411e <main+0x181c>
    411c:	92 c7       	rjmp	.+3876   	; 0x5042 <main+0x2740>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:700
                StMin = ++StMin > 59 ? 0 : StMin;
    411e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <StMin>
    4122:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <StMin+0x1>
    4126:	01 96       	adiw	r24, 0x01	; 1
    4128:	8c 33       	cpi	r24, 0x3C	; 60
    412a:	91 05       	cpc	r25, r1
    412c:	14 f0       	brlt	.+4      	; 0x4132 <main+0x1830>
main():
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    4132:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <StMin+0x1>
    4136:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <StMin>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    413a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    413c:	10 e0       	ldi	r17, 0x00	; 0
    413e:	e3 ce       	rjmp	.-570    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:702
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    4140:	13 30       	cpi	r17, 0x03	; 3
    4142:	31 f5       	brne	.+76     	; 0x4190 <main+0x188e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:704
        {
            if (blinkMode == setHr)
    4144:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4148:	11 11       	cpse	r17, r1
    414a:	0f c0       	rjmp	.+30     	; 0x416a <main+0x1868>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:705
                StHr = --StHr < 0 ? 23 : StHr;
    414c:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <StHr>
    4150:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <StHr+0x1>
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	97 ff       	sbrs	r25, 7
    4158:	02 c0       	rjmp	.+4      	; 0x415e <main+0x185c>
main():
    415a:	87 e1       	ldi	r24, 0x17	; 23
    415c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    415e:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <StHr+0x1>
    4162:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <StHr>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4166:	e1 2c       	mov	r14, r1
    4168:	ce ce       	rjmp	.-612    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:706
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
    416a:	11 30       	cpi	r17, 0x01	; 1
    416c:	09 f0       	breq	.+2      	; 0x4170 <main+0x186e>
    416e:	6d c7       	rjmp	.+3802   	; 0x504a <main+0x2748>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:707
                StMin = --StMin < 0 ? 59 : StMin;
    4170:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <StMin>
    4174:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <StMin+0x1>
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	97 ff       	sbrs	r25, 7
    417c:	02 c0       	rjmp	.+4      	; 0x4182 <main+0x1880>
main():
    417e:	8b e3       	ldi	r24, 0x3B	; 59
    4180:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4182:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <StMin+0x1>
    4186:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <StMin>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    418a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    418c:	10 e0       	ldi	r17, 0x00	; 0
    418e:	bb ce       	rjmp	.-650    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:709
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4190:	11 30       	cpi	r17, 0x01	; 1
    4192:	09 f0       	breq	.+2      	; 0x4196 <main+0x1894>
    4194:	5e c7       	rjmp	.+3772   	; 0x5052 <main+0x2750>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:711
        {
            if (blinkMode == setHr)
    4196:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    419a:	11 11       	cpse	r17, r1
    419c:	06 c0       	rjmp	.+12     	; 0x41aa <main+0x18a8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:713
            {
                blinkMode = setMin;
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    41a4:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    41a6:	10 e0       	ldi	r17, 0x00	; 0
    41a8:	ae ce       	rjmp	.-676    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:715
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    41aa:	11 30       	cpi	r17, 0x01	; 1
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <main+0x18ae>
    41ae:	55 c7       	rjmp	.+3754   	; 0x505a <main+0x2758>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:717
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    41b0:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <StMin>
    41b4:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <StHr>
    41b8:	40 91 b2 03 	lds	r20, 0x03B2	; 0x8003b2 <StDate>
    41bc:	50 91 b0 03 	lds	r21, 0x03B0	; 0x8003b0 <StMonth>
    41c0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <StYear>
    41c4:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:228
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    41c8:	80 3d       	cpi	r24, 0xD0	; 208
    41ca:	a7 e0       	ldi	r26, 0x07	; 7
    41cc:	9a 07       	cpc	r25, r26
    41ce:	10 f0       	brcs	.+4      	; 0x41d4 <main+0x18d2>
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:229
    year -= 2000U;
    41d0:	80 5d       	subi	r24, 0xD0	; 208
    41d2:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:230
  yOff = year;
    41d4:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:231
  m = month;
    41d6:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:232
  d = day;
    41d8:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:233
  hh = hour;
    41da:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:234
  mm = min;
    41dc:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib/RTClib.cpp:235
  ss = sec;
    41de:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:717
    41e0:	c3 01       	movw	r24, r6
    41e2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <RTC_DS1307::adjust(DateTime const&)>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:719
                complete = true;
                blink = true;
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    41ec:	e1 2c       	mov	r14, r1
    41ee:	8b ce       	rjmp	.-746    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:728
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    41f0:	81 2f       	mov	r24, r17
    41f2:	8f 77       	andi	r24, 0x7F	; 127
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	91 f4       	brne	.+36     	; 0x421c <main+0x191a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:730
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    41f8:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <config+0xf>
    41fc:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <config+0x10>
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	88 31       	cpi	r24, 0x18	; 24
    4204:	91 05       	cpc	r25, r1
    4206:	14 f0       	brlt	.+4      	; 0x420c <main+0x190a>
main():
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    420c:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <config+0x10>
    4210:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:727
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    4214:	ee 24       	eor	r14, r14
    4216:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4218:	10 e0       	ldi	r17, 0x00	; 0
    421a:	75 ce       	rjmp	.-790    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:732
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    421c:	83 30       	cpi	r24, 0x03	; 3
    421e:	89 f4       	brne	.+34     	; 0x4242 <main+0x1940>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:734
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    4220:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <config+0xf>
    4224:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <config+0x10>
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	97 ff       	sbrs	r25, 7
    422c:	02 c0       	rjmp	.+4      	; 0x4232 <main+0x1930>
main():
    422e:	87 e1       	ldi	r24, 0x17	; 23
    4230:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4232:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <config+0x10>
    4236:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:727
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    423a:	ee 24       	eor	r14, r14
    423c:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    423e:	10 e0       	ldi	r17, 0x00	; 0
    4240:	62 ce       	rjmp	.-828    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:736
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4242:	11 30       	cpi	r17, 0x01	; 1
    4244:	09 f0       	breq	.+2      	; 0x4248 <main+0x1946>
    4246:	0d c7       	rjmp	.+3610   	; 0x5062 <main+0x2760>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:738
        {
            config.save();
    4248:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:727
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    424c:	ee 24       	eor	r14, r14
    424e:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:739
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    4250:	11 e0       	ldi	r17, 0x01	; 1
    4252:	59 ce       	rjmp	.-846    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:750
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4254:	81 2f       	mov	r24, r17
    4256:	8f 77       	andi	r24, 0x7F	; 127
    4258:	82 30       	cpi	r24, 0x02	; 2
    425a:	91 f4       	brne	.+36     	; 0x4280 <main+0x197e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:752
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    425c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <config+0x11>
    4260:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <config+0x12>
    4264:	01 96       	adiw	r24, 0x01	; 1
    4266:	88 31       	cpi	r24, 0x18	; 24
    4268:	91 05       	cpc	r25, r1
    426a:	14 f0       	brlt	.+4      	; 0x4270 <main+0x196e>
main():
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    4270:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x12>
    4274:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0x11>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:749
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    4278:	ee 24       	eor	r14, r14
    427a:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    427c:	10 e0       	ldi	r17, 0x00	; 0
    427e:	43 ce       	rjmp	.-890    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:754
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4280:	83 30       	cpi	r24, 0x03	; 3
    4282:	89 f4       	brne	.+34     	; 0x42a6 <main+0x19a4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:756
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    4284:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <config+0x11>
    4288:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <config+0x12>
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	97 ff       	sbrs	r25, 7
    4290:	02 c0       	rjmp	.+4      	; 0x4296 <main+0x1994>
main():
    4292:	87 e1       	ldi	r24, 0x17	; 23
    4294:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4296:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x12>
    429a:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0x11>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:749
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    429e:	ee 24       	eor	r14, r14
    42a0:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42a2:	10 e0       	ldi	r17, 0x00	; 0
    42a4:	30 ce       	rjmp	.-928    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:758
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    42a6:	11 30       	cpi	r17, 0x01	; 1
    42a8:	79 f2       	breq	.-98     	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    42aa:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42ac:	10 e0       	ldi	r17, 0x00	; 0
    42ae:	2b ce       	rjmp	.-938    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:772
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    42b0:	81 2f       	mov	r24, r17
    42b2:	8f 77       	andi	r24, 0x7F	; 127
    42b4:	82 30       	cpi	r24, 0x02	; 2
    42b6:	69 f4       	brne	.+26     	; 0x42d2 <main+0x19d0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:774
        {
            config.Song1_Count = ++config.Song1_Count;
    42b8:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <config+0x1a>
    42bc:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <config+0x1b>
    42c0:	01 96       	adiw	r24, 0x01	; 1
    42c2:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <config+0x1b>
    42c6:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <config+0x1a>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:771
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    42ca:	ee 24       	eor	r14, r14
    42cc:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42ce:	10 e0       	ldi	r17, 0x00	; 0
    42d0:	1a ce       	rjmp	.-972    	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:776
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    42d2:	83 30       	cpi	r24, 0x03	; 3
    42d4:	89 f4       	brne	.+34     	; 0x42f8 <main+0x19f6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:778
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    42d6:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <config+0x1a>
    42da:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <config+0x1b>
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	97 ff       	sbrs	r25, 7
    42e2:	02 c0       	rjmp	.+4      	; 0x42e8 <main+0x19e6>
main():
    42e4:	84 e6       	ldi	r24, 0x64	; 100
    42e6:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    42e8:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <config+0x1b>
    42ec:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <config+0x1a>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:771
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    42f0:	ee 24       	eor	r14, r14
    42f2:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    42f4:	10 e0       	ldi	r17, 0x00	; 0
    42f6:	07 ce       	rjmp	.-1010   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:780
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    42f8:	11 30       	cpi	r17, 0x01	; 1
    42fa:	09 f4       	brne	.+2      	; 0x42fe <main+0x19fc>
    42fc:	a5 cf       	rjmp	.-182    	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    42fe:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4300:	10 e0       	ldi	r17, 0x00	; 0
    4302:	01 ce       	rjmp	.-1022   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:794
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4304:	81 2f       	mov	r24, r17
    4306:	8f 77       	andi	r24, 0x7F	; 127
    4308:	82 30       	cpi	r24, 0x02	; 2
    430a:	91 f4       	brne	.+36     	; 0x4330 <main+0x1a2e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:796
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    430c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <config+0x15>
    4310:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <config+0x16>
    4314:	01 96       	adiw	r24, 0x01	; 1
    4316:	8f 31       	cpi	r24, 0x1F	; 31
    4318:	91 05       	cpc	r25, r1
    431a:	14 f0       	brlt	.+4      	; 0x4320 <main+0x1a1e>
main():
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4320:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x16>
    4324:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x15>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:793
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    4328:	ee 24       	eor	r14, r14
    432a:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    432c:	10 e0       	ldi	r17, 0x00	; 0
    432e:	eb cd       	rjmp	.-1066   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:798
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4330:	83 30       	cpi	r24, 0x03	; 3
    4332:	91 f4       	brne	.+36     	; 0x4358 <main+0x1a56>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:800
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    4334:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <config+0x15>
    4338:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <config+0x16>
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	18 16       	cp	r1, r24
    4340:	19 06       	cpc	r1, r25
    4342:	14 f0       	brlt	.+4      	; 0x4348 <main+0x1a46>
main():
    4344:	8e e1       	ldi	r24, 0x1E	; 30
    4346:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4348:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x16>
    434c:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x15>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:793
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    4350:	ee 24       	eor	r14, r14
    4352:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4354:	10 e0       	ldi	r17, 0x00	; 0
    4356:	d7 cd       	rjmp	.-1106   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:802
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4358:	11 30       	cpi	r17, 0x01	; 1
    435a:	09 f0       	breq	.+2      	; 0x435e <main+0x1a5c>
    435c:	86 c6       	rjmp	.+3340   	; 0x506a <main+0x2768>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:804
        {
            config.save();
    435e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
    4362:	60 91 c9 03 	lds	r22, 0x03C9	; 0x8003c9 <config+0x15>
    4366:	70 91 ca 03 	lds	r23, 0x03CA	; 0x8003ca <config+0x16>
    436a:	77 27       	eor	r23, r23
    436c:	86 e0       	ldi	r24, 0x06	; 6
    436e:	0e 94 73 05 	call	0xae6	; 0xae6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.61]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:793
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    4372:	ee 24       	eor	r14, r14
    4374:	e3 94       	inc	r14
    4376:	c7 cd       	rjmp	.-1138   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:818
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    4378:	8e ef       	ldi	r24, 0xFE	; 254
    437a:	81 0f       	add	r24, r17
    437c:	82 30       	cpi	r24, 0x02	; 2
    437e:	58 f4       	brcc	.+22     	; 0x4396 <main+0x1a94>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:820
        {
            config.SchlZone = !config.SchlZone;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <config+0x19>
    4386:	91 11       	cpse	r25, r1
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <config+0x19>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:817
        break;
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
    438e:	ee 24       	eor	r14, r14
    4390:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4392:	10 e0       	ldi	r17, 0x00	; 0
    4394:	b8 cd       	rjmp	.-1168   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:822
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
        {
            config.SchlZone = !config.SchlZone;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4396:	11 30       	cpi	r17, 0x01	; 1
    4398:	09 f4       	brne	.+2      	; 0x439c <main+0x1a9a>
    439a:	56 cf       	rjmp	.-340    	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    439c:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    439e:	10 e0       	ldi	r17, 0x00	; 0
    43a0:	b2 cd       	rjmp	.-1180   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:837
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    43a2:	81 2f       	mov	r24, r17
    43a4:	8f 77       	andi	r24, 0x7F	; 127
    43a6:	82 30       	cpi	r24, 0x02	; 2
    43a8:	91 f4       	brne	.+36     	; 0x43ce <main+0x1acc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:839
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    43aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    43ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    43b2:	01 96       	adiw	r24, 0x01	; 1
    43b4:	88 31       	cpi	r24, 0x18	; 24
    43b6:	91 05       	cpc	r25, r1
    43b8:	14 f0       	brlt	.+4      	; 0x43be <main+0x1abc>
main():
    43ba:	84 e0       	ldi	r24, 0x04	; 4
    43bc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    43be:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    43c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:836
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    43c6:	ee 24       	eor	r14, r14
    43c8:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    43ca:	10 e0       	ldi	r17, 0x00	; 0
    43cc:	9c cd       	rjmp	.-1224   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:841
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    43ce:	83 30       	cpi	r24, 0x03	; 3
    43d0:	91 f4       	brne	.+36     	; 0x43f6 <main+0x1af4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:843
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    43d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <demoTime>
    43d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <demoTime+0x1>
    43da:	01 97       	sbiw	r24, 0x01	; 1
    43dc:	84 30       	cpi	r24, 0x04	; 4
    43de:	91 05       	cpc	r25, r1
    43e0:	14 f4       	brge	.+4      	; 0x43e6 <main+0x1ae4>
main():
    43e2:	87 e1       	ldi	r24, 0x17	; 23
    43e4:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    43e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <demoTime+0x1>
    43ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <demoTime>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:836
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    43ee:	ee 24       	eor	r14, r14
    43f0:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    43f2:	10 e0       	ldi	r17, 0x00	; 0
    43f4:	88 cd       	rjmp	.-1264   	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:836
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    43f6:	ee 24       	eor	r14, r14
    43f8:	e3 94       	inc	r14
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:845
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    43fa:	11 30       	cpi	r17, 0x01	; 1
    43fc:	09 f4       	brne	.+2      	; 0x4400 <main+0x1afe>
    43fe:	83 cd       	rjmp	.-1274   	; 0x3f06 <main+0x1604>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4400:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4402:	10 e0       	ldi	r17, 0x00	; 0
    4404:	80 cd       	rjmp	.-1280   	; 0x3f06 <main+0x1604>
reset():
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    4406:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Menu1>
    440a:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <Menu1+0x1>
    440e:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Menu1+0x4>
    4412:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    4416:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Menu1+0x2>
    441a:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    441e:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.2/MenuManager.cpp:21
  menuStackCount = 0;
    4422:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:858
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    4426:	84 e0       	ldi	r24, 0x04	; 4
    4428:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:859
        lcd.clear();
    442c:	0e 94 c0 07 	call	0xf80	; 0xf80 <LiquidCrystal_I2C::clear() [clone .constprop.67]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4430:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4432:	10 e0       	ldi	r17, 0x00	; 0
    4434:	68 cd       	rjmp	.-1328   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:865
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4436:	81 2f       	mov	r24, r17
    4438:	8f 77       	andi	r24, 0x7F	; 127
    443a:	82 30       	cpi	r24, 0x02	; 2
    443c:	91 f4       	brne	.+36     	; 0x4462 <main+0x1b60>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:867
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    443e:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <config+0x22>
    4442:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <config+0x23>
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	89 30       	cpi	r24, 0x09	; 9
    444a:	91 05       	cpc	r25, r1
    444c:	14 f0       	brlt	.+4      	; 0x4452 <main+0x1b50>
main():
    444e:	83 e0       	ldi	r24, 0x03	; 3
    4450:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4452:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x23>
    4456:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x22>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:864
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    445a:	ee 24       	eor	r14, r14
    445c:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    445e:	10 e0       	ldi	r17, 0x00	; 0
    4460:	52 cd       	rjmp	.-1372   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:869
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4462:	83 30       	cpi	r24, 0x03	; 3
    4464:	91 f4       	brne	.+36     	; 0x448a <main+0x1b88>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:871
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    4466:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <config+0x22>
    446a:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <config+0x23>
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	83 30       	cpi	r24, 0x03	; 3
    4472:	91 05       	cpc	r25, r1
    4474:	14 f4       	brge	.+4      	; 0x447a <main+0x1b78>
main():
    4476:	88 e0       	ldi	r24, 0x08	; 8
    4478:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    447a:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x23>
    447e:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x22>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:864
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    4482:	ee 24       	eor	r14, r14
    4484:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4486:	10 e0       	ldi	r17, 0x00	; 0
    4488:	3e cd       	rjmp	.-1412   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:873
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    448a:	11 30       	cpi	r17, 0x01	; 1
    448c:	09 f4       	brne	.+2      	; 0x4490 <main+0x1b8e>
    448e:	dc ce       	rjmp	.-584    	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4490:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4492:	10 e0       	ldi	r17, 0x00	; 0
    4494:	38 cd       	rjmp	.-1424   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:887
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4496:	81 2f       	mov	r24, r17
    4498:	8f 77       	andi	r24, 0x7F	; 127
    449a:	82 30       	cpi	r24, 0x02	; 2
    449c:	91 f4       	brne	.+36     	; 0x44c2 <main+0x1bc0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:889
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    449e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <config+0x26>
    44a2:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <config+0x27>
    44a6:	01 96       	adiw	r24, 0x01	; 1
    44a8:	89 30       	cpi	r24, 0x09	; 9
    44aa:	91 05       	cpc	r25, r1
    44ac:	14 f0       	brlt	.+4      	; 0x44b2 <main+0x1bb0>
main():
    44ae:	83 e0       	ldi	r24, 0x03	; 3
    44b0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    44b2:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <config+0x27>
    44b6:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <config+0x26>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:886
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    44ba:	ee 24       	eor	r14, r14
    44bc:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    44be:	10 e0       	ldi	r17, 0x00	; 0
    44c0:	22 cd       	rjmp	.-1468   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:891
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    44c2:	83 30       	cpi	r24, 0x03	; 3
    44c4:	91 f4       	brne	.+36     	; 0x44ea <main+0x1be8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:893
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    44c6:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <config+0x26>
    44ca:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <config+0x27>
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	83 30       	cpi	r24, 0x03	; 3
    44d2:	91 05       	cpc	r25, r1
    44d4:	14 f4       	brge	.+4      	; 0x44da <main+0x1bd8>
main():
    44d6:	88 e0       	ldi	r24, 0x08	; 8
    44d8:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    44da:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <config+0x27>
    44de:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <config+0x26>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:886
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    44e2:	ee 24       	eor	r14, r14
    44e4:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    44e6:	10 e0       	ldi	r17, 0x00	; 0
    44e8:	0e cd       	rjmp	.-1508   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:895
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    44ea:	11 30       	cpi	r17, 0x01	; 1
    44ec:	09 f4       	brne	.+2      	; 0x44f0 <main+0x1bee>
    44ee:	ac ce       	rjmp	.-680    	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    44f0:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    44f2:	10 e0       	ldi	r17, 0x00	; 0
    44f4:	08 cd       	rjmp	.-1520   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:909
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    44f6:	81 2f       	mov	r24, r17
    44f8:	8f 77       	andi	r24, 0x7F	; 127
    44fa:	82 30       	cpi	r24, 0x02	; 2
    44fc:	a1 f4       	brne	.+40     	; 0x4526 <main+0x1c24>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:911
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    44fe:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <config+0x2a>
    4502:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <config+0x2b>
    4506:	01 96       	adiw	r24, 0x01	; 1
    4508:	85 31       	cpi	r24, 0x15	; 21
    450a:	91 05       	cpc	r25, r1
    450c:	14 f0       	brlt	.+4      	; 0x4512 <main+0x1c10>
main():
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4512:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <config+0x2b>
    4516:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:912
            startPreSong(2, config.MorSongNo);
    451a:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.27]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:908
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    451e:	ee 24       	eor	r14, r14
    4520:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4522:	10 e0       	ldi	r17, 0x00	; 0
    4524:	f0 cc       	rjmp	.-1568   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:914
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4526:	83 30       	cpi	r24, 0x03	; 3
    4528:	a1 f4       	brne	.+40     	; 0x4552 <main+0x1c50>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:916
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    452a:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <config+0x2a>
    452e:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <config+0x2b>
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	18 16       	cp	r1, r24
    4536:	19 06       	cpc	r1, r25
    4538:	14 f0       	brlt	.+4      	; 0x453e <main+0x1c3c>
main():
    453a:	84 e1       	ldi	r24, 0x14	; 20
    453c:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    453e:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <config+0x2b>
    4542:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:917
            startPreSong(2, config.MorSongNo);
    4546:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.27]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:908
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    454a:	ee 24       	eor	r14, r14
    454c:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    454e:	10 e0       	ldi	r17, 0x00	; 0
    4550:	da cc       	rjmp	.-1612   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:919
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4552:	11 30       	cpi	r17, 0x01	; 1
    4554:	09 f0       	breq	.+2      	; 0x4558 <main+0x1c56>
    4556:	8d c5       	rjmp	.+2842   	; 0x5072 <main+0x2770>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:921
        {
            stopPreSong();
    4558:	0e 94 77 08 	call	0x10ee	; 0x10ee <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:922
            config.save();
    455c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:908
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    4560:	ee 24       	eor	r14, r14
    4562:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:923
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            stopPreSong();
            config.save();
            complete = true;
    4564:	11 e0       	ldi	r17, 0x01	; 1
    4566:	cf cc       	rjmp	.-1634   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:934
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4568:	81 2f       	mov	r24, r17
    456a:	8f 77       	andi	r24, 0x7F	; 127
    456c:	82 30       	cpi	r24, 0x02	; 2
    456e:	a1 f4       	brne	.+40     	; 0x4598 <main+0x1c96>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:936
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    4570:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <config+0x2c>
    4574:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <config+0x2d>
    4578:	01 96       	adiw	r24, 0x01	; 1
    457a:	85 31       	cpi	r24, 0x15	; 21
    457c:	91 05       	cpc	r25, r1
    457e:	14 f0       	brlt	.+4      	; 0x4584 <main+0x1c82>
main():
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4584:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2d>
    4588:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:937
            startPreSong(2, config.EveSongNo);
    458c:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.27]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:933
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    4590:	ee 24       	eor	r14, r14
    4592:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4594:	10 e0       	ldi	r17, 0x00	; 0
    4596:	b7 cc       	rjmp	.-1682   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:939
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4598:	83 30       	cpi	r24, 0x03	; 3
    459a:	a1 f4       	brne	.+40     	; 0x45c4 <main+0x1cc2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:941
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    459c:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <config+0x2c>
    45a0:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <config+0x2d>
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	18 16       	cp	r1, r24
    45a8:	19 06       	cpc	r1, r25
    45aa:	14 f0       	brlt	.+4      	; 0x45b0 <main+0x1cae>
main():
    45ac:	84 e1       	ldi	r24, 0x14	; 20
    45ae:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    45b0:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2d>
    45b4:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:942
            startPreSong(2, config.EveSongNo);
    45b8:	0e 94 d1 05 	call	0xba2	; 0xba2 <startPreSong(unsigned char, unsigned char) [clone .constprop.27]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:933
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    45bc:	ee 24       	eor	r14, r14
    45be:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45c0:	10 e0       	ldi	r17, 0x00	; 0
    45c2:	a1 cc       	rjmp	.-1726   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:944
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    45c4:	11 30       	cpi	r17, 0x01	; 1
    45c6:	41 f2       	breq	.-112    	; 0x4558 <main+0x1c56>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    45c8:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    45ca:	10 e0       	ldi	r17, 0x00	; 0
    45cc:	9c cc       	rjmp	.-1736   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:959
        break;
    }

    case mnuCmdLt1OnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    45ce:	12 30       	cpi	r17, 0x02	; 2
    45d0:	09 f0       	breq	.+2      	; 0x45d4 <main+0x1cd2>
    45d2:	4c c0       	rjmp	.+152    	; 0x466c <main+0x1d6a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:961
        {
            if (blinkMode == setHr)
    45d4:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    45d8:	11 11       	cpse	r17, r1
    45da:	22 c0       	rjmp	.+68     	; 0x4620 <main+0x1d1e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:962
                config.Light1On = addToTime(60, config.Light1On);
    45dc:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <config+0x2e>
    45e0:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <config+0x2f>
    45e4:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <config+0x30>
    45e8:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    45ec:	ac 01       	movw	r20, r24
    45ee:	bd 01       	movw	r22, r26
    45f0:	44 5c       	subi	r20, 0xC4	; 196
    45f2:	5f 4f       	sbci	r21, 0xFF	; 255
    45f4:	6f 4f       	sbci	r22, 0xFF	; 255
    45f6:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    45f8:	77 fd       	sbrc	r23, 7
    45fa:	08 c0       	rjmp	.+16     	; 0x460c <main+0x1d0a>
    45fc:	40 3a       	cpi	r20, 0xA0	; 160
    45fe:	e5 e0       	ldi	r30, 0x05	; 5
    4600:	5e 07       	cpc	r21, r30
    4602:	61 05       	cpc	r22, r1
    4604:	71 05       	cpc	r23, r1
    4606:	14 f4       	brge	.+4      	; 0x460c <main+0x1d0a>
    4608:	db 01       	movw	r26, r22
    460a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:962
    460c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2e>
    4610:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2f>
    4614:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <config+0x30>
    4618:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    461c:	e1 2c       	mov	r14, r1
    461e:	73 cc       	rjmp	.-1818   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:963
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
    4620:	11 30       	cpi	r17, 0x01	; 1
    4622:	09 f0       	breq	.+2      	; 0x4626 <main+0x1d24>
    4624:	2a c5       	rjmp	.+2644   	; 0x507a <main+0x2778>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:964
                config.Light1On = addToTime(1, config.Light1On);
    4626:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <config+0x2e>
    462a:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <config+0x2f>
    462e:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <config+0x30>
    4632:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4636:	ac 01       	movw	r20, r24
    4638:	bd 01       	movw	r22, r26
    463a:	4f 5f       	subi	r20, 0xFF	; 255
    463c:	5f 4f       	sbci	r21, 0xFF	; 255
    463e:	6f 4f       	sbci	r22, 0xFF	; 255
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4642:	77 fd       	sbrc	r23, 7
    4644:	08 c0       	rjmp	.+16     	; 0x4656 <main+0x1d54>
    4646:	40 3a       	cpi	r20, 0xA0	; 160
    4648:	f5 e0       	ldi	r31, 0x05	; 5
    464a:	5f 07       	cpc	r21, r31
    464c:	61 05       	cpc	r22, r1
    464e:	71 05       	cpc	r23, r1
    4650:	14 f4       	brge	.+4      	; 0x4656 <main+0x1d54>
    4652:	db 01       	movw	r26, r22
    4654:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:964
    4656:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2e>
    465a:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2f>
    465e:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <config+0x30>
    4662:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4666:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4668:	10 e0       	ldi	r17, 0x00	; 0
    466a:	4d cc       	rjmp	.-1894   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:966
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(1, config.Light1On);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    466c:	81 2f       	mov	r24, r17
    466e:	8f 77       	andi	r24, 0x7F	; 127
    4670:	83 30       	cpi	r24, 0x03	; 3
    4672:	09 f0       	breq	.+2      	; 0x4676 <main+0x1d74>
    4674:	4c c0       	rjmp	.+152    	; 0x470e <main+0x1e0c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:968
        {
            if (blinkMode == setHr)
    4676:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    467a:	11 11       	cpse	r17, r1
    467c:	22 c0       	rjmp	.+68     	; 0x46c2 <main+0x1dc0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:969
                config.Light1On = addToTime(-60, config.Light1On);
    467e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <config+0x2e>
    4682:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <config+0x2f>
    4686:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <config+0x30>
    468a:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    468e:	ac 01       	movw	r20, r24
    4690:	bd 01       	movw	r22, r26
    4692:	4c 53       	subi	r20, 0x3C	; 60
    4694:	51 09       	sbc	r21, r1
    4696:	61 09       	sbc	r22, r1
    4698:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    469a:	77 fd       	sbrc	r23, 7
    469c:	08 c0       	rjmp	.+16     	; 0x46ae <main+0x1dac>
    469e:	40 3a       	cpi	r20, 0xA0	; 160
    46a0:	25 e0       	ldi	r18, 0x05	; 5
    46a2:	52 07       	cpc	r21, r18
    46a4:	61 05       	cpc	r22, r1
    46a6:	71 05       	cpc	r23, r1
    46a8:	14 f4       	brge	.+4      	; 0x46ae <main+0x1dac>
    46aa:	db 01       	movw	r26, r22
    46ac:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:969
    46ae:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2e>
    46b2:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2f>
    46b6:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <config+0x30>
    46ba:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    46be:	e1 2c       	mov	r14, r1
    46c0:	22 cc       	rjmp	.-1980   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:970
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
    46c2:	11 30       	cpi	r17, 0x01	; 1
    46c4:	09 f0       	breq	.+2      	; 0x46c8 <main+0x1dc6>
    46c6:	dd c4       	rjmp	.+2490   	; 0x5082 <main+0x2780>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:971
                config.Light1On = addToTime(-1, config.Light1On);
    46c8:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <config+0x2e>
    46cc:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <config+0x2f>
    46d0:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <config+0x30>
    46d4:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    46d8:	ac 01       	movw	r20, r24
    46da:	bd 01       	movw	r22, r26
    46dc:	41 50       	subi	r20, 0x01	; 1
    46de:	51 09       	sbc	r21, r1
    46e0:	61 09       	sbc	r22, r1
    46e2:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    46e4:	77 fd       	sbrc	r23, 7
    46e6:	08 c0       	rjmp	.+16     	; 0x46f8 <main+0x1df6>
    46e8:	40 3a       	cpi	r20, 0xA0	; 160
    46ea:	35 e0       	ldi	r19, 0x05	; 5
    46ec:	53 07       	cpc	r21, r19
    46ee:	61 05       	cpc	r22, r1
    46f0:	71 05       	cpc	r23, r1
    46f2:	14 f4       	brge	.+4      	; 0x46f8 <main+0x1df6>
    46f4:	db 01       	movw	r26, r22
    46f6:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:971
    46f8:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2e>
    46fc:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2f>
    4700:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <config+0x30>
    4704:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4708:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    470a:	10 e0       	ldi	r17, 0x00	; 0
    470c:	fc cb       	rjmp	.-2056   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:973
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(-1, config.Light1On);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    470e:	11 30       	cpi	r17, 0x01	; 1
    4710:	09 f0       	breq	.+2      	; 0x4714 <main+0x1e12>
    4712:	bb c4       	rjmp	.+2422   	; 0x508a <main+0x2788>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:975
        {
            if (blinkMode == setHr)
    4714:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4718:	88 23       	and	r24, r24
    471a:	09 f4       	brne	.+2      	; 0x471e <main+0x1e1c>
    471c:	40 cd       	rjmp	.-1408   	; 0x419e <main+0x189c>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    471e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4720:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:979
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4722:	81 30       	cpi	r24, 0x01	; 1
    4724:	09 f0       	breq	.+2      	; 0x4728 <main+0x1e26>
    4726:	ef cb       	rjmp	.-2082   	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:981
            {
                config.save();
    4728:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Config::save() [clone .constprop.25]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:983
                complete = true;
                blink = true;
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4732:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:982
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                config.save();
                complete = true;
    4734:	11 e0       	ldi	r17, 0x01	; 1
    4736:	e7 cb       	rjmp	.-2098   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:991

        break;
    }
    case mnuCmdLt1OffTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4738:	12 30       	cpi	r17, 0x02	; 2
    473a:	09 f0       	breq	.+2      	; 0x473e <main+0x1e3c>
    473c:	4c c0       	rjmp	.+152    	; 0x47d6 <main+0x1ed4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:993
        {
            if (blinkMode == setHr)
    473e:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4742:	11 11       	cpse	r17, r1
    4744:	22 c0       	rjmp	.+68     	; 0x478a <main+0x1e88>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:994
                config.Light1Off = addToTime(60, config.Light1Off);
    4746:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0x32>
    474a:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x33>
    474e:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <config+0x34>
    4752:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4756:	ac 01       	movw	r20, r24
    4758:	bd 01       	movw	r22, r26
    475a:	44 5c       	subi	r20, 0xC4	; 196
    475c:	5f 4f       	sbci	r21, 0xFF	; 255
    475e:	6f 4f       	sbci	r22, 0xFF	; 255
    4760:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4762:	77 fd       	sbrc	r23, 7
    4764:	08 c0       	rjmp	.+16     	; 0x4776 <main+0x1e74>
    4766:	40 3a       	cpi	r20, 0xA0	; 160
    4768:	e5 e0       	ldi	r30, 0x05	; 5
    476a:	5e 07       	cpc	r21, r30
    476c:	61 05       	cpc	r22, r1
    476e:	71 05       	cpc	r23, r1
    4770:	14 f4       	brge	.+4      	; 0x4776 <main+0x1e74>
    4772:	db 01       	movw	r26, r22
    4774:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:994
    4776:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0x32>
    477a:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x33>
    477e:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <config+0x34>
    4782:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4786:	e1 2c       	mov	r14, r1
    4788:	be cb       	rjmp	.-2180   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:995
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
    478a:	11 30       	cpi	r17, 0x01	; 1
    478c:	09 f0       	breq	.+2      	; 0x4790 <main+0x1e8e>
    478e:	81 c4       	rjmp	.+2306   	; 0x5092 <main+0x2790>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:996
                config.Light1Off = addToTime(1, config.Light1Off);
    4790:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0x32>
    4794:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x33>
    4798:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <config+0x34>
    479c:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    47a0:	ac 01       	movw	r20, r24
    47a2:	bd 01       	movw	r22, r26
    47a4:	4f 5f       	subi	r20, 0xFF	; 255
    47a6:	5f 4f       	sbci	r21, 0xFF	; 255
    47a8:	6f 4f       	sbci	r22, 0xFF	; 255
    47aa:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    47ac:	77 fd       	sbrc	r23, 7
    47ae:	08 c0       	rjmp	.+16     	; 0x47c0 <main+0x1ebe>
    47b0:	40 3a       	cpi	r20, 0xA0	; 160
    47b2:	f5 e0       	ldi	r31, 0x05	; 5
    47b4:	5f 07       	cpc	r21, r31
    47b6:	61 05       	cpc	r22, r1
    47b8:	71 05       	cpc	r23, r1
    47ba:	14 f4       	brge	.+4      	; 0x47c0 <main+0x1ebe>
    47bc:	db 01       	movw	r26, r22
    47be:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:996
    47c0:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0x32>
    47c4:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x33>
    47c8:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <config+0x34>
    47cc:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    47d0:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    47d2:	10 e0       	ldi	r17, 0x00	; 0
    47d4:	98 cb       	rjmp	.-2256   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:998
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(1, config.Light1Off);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    47d6:	81 2f       	mov	r24, r17
    47d8:	8f 77       	andi	r24, 0x7F	; 127
    47da:	83 30       	cpi	r24, 0x03	; 3
    47dc:	09 f0       	breq	.+2      	; 0x47e0 <main+0x1ede>
    47de:	4c c0       	rjmp	.+152    	; 0x4878 <main+0x1f76>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1000
        {
            if (blinkMode == setHr)
    47e0:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    47e4:	11 11       	cpse	r17, r1
    47e6:	22 c0       	rjmp	.+68     	; 0x482c <main+0x1f2a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1001
                config.Light1Off = addToTime(-60, config.Light1Off);
    47e8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0x32>
    47ec:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x33>
    47f0:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <config+0x34>
    47f4:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    47f8:	ac 01       	movw	r20, r24
    47fa:	bd 01       	movw	r22, r26
    47fc:	4c 53       	subi	r20, 0x3C	; 60
    47fe:	51 09       	sbc	r21, r1
    4800:	61 09       	sbc	r22, r1
    4802:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4804:	77 fd       	sbrc	r23, 7
    4806:	08 c0       	rjmp	.+16     	; 0x4818 <main+0x1f16>
    4808:	40 3a       	cpi	r20, 0xA0	; 160
    480a:	25 e0       	ldi	r18, 0x05	; 5
    480c:	52 07       	cpc	r21, r18
    480e:	61 05       	cpc	r22, r1
    4810:	71 05       	cpc	r23, r1
    4812:	14 f4       	brge	.+4      	; 0x4818 <main+0x1f16>
    4814:	db 01       	movw	r26, r22
    4816:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1001
    4818:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0x32>
    481c:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x33>
    4820:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <config+0x34>
    4824:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4828:	e1 2c       	mov	r14, r1
    482a:	6d cb       	rjmp	.-2342   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1002
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
    482c:	11 30       	cpi	r17, 0x01	; 1
    482e:	09 f0       	breq	.+2      	; 0x4832 <main+0x1f30>
    4830:	34 c4       	rjmp	.+2152   	; 0x509a <main+0x2798>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1003
                config.Light1Off = addToTime(-1, config.Light1Off);
    4832:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <config+0x32>
    4836:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <config+0x33>
    483a:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <config+0x34>
    483e:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4842:	ac 01       	movw	r20, r24
    4844:	bd 01       	movw	r22, r26
    4846:	41 50       	subi	r20, 0x01	; 1
    4848:	51 09       	sbc	r21, r1
    484a:	61 09       	sbc	r22, r1
    484c:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    484e:	77 fd       	sbrc	r23, 7
    4850:	08 c0       	rjmp	.+16     	; 0x4862 <main+0x1f60>
    4852:	40 3a       	cpi	r20, 0xA0	; 160
    4854:	35 e0       	ldi	r19, 0x05	; 5
    4856:	53 07       	cpc	r21, r19
    4858:	61 05       	cpc	r22, r1
    485a:	71 05       	cpc	r23, r1
    485c:	14 f4       	brge	.+4      	; 0x4862 <main+0x1f60>
    485e:	db 01       	movw	r26, r22
    4860:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1003
    4862:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0x32>
    4866:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x33>
    486a:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <config+0x34>
    486e:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4872:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4874:	10 e0       	ldi	r17, 0x00	; 0
    4876:	47 cb       	rjmp	.-2418   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1005
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(-1, config.Light1Off);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4878:	11 30       	cpi	r17, 0x01	; 1
    487a:	09 f0       	breq	.+2      	; 0x487e <main+0x1f7c>
    487c:	12 c4       	rjmp	.+2084   	; 0x50a2 <main+0x27a0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1007
        {
            if (blinkMode == setHr)
    487e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4882:	88 23       	and	r24, r24
    4884:	09 f4       	brne	.+2      	; 0x4888 <main+0x1f86>
    4886:	8b cc       	rjmp	.-1770   	; 0x419e <main+0x189c>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4888:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    488a:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1011
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    488c:	81 30       	cpi	r24, 0x01	; 1
    488e:	09 f0       	breq	.+2      	; 0x4892 <main+0x1f90>
    4890:	3a cb       	rjmp	.-2444   	; 0x3f06 <main+0x1604>
    4892:	4a cf       	rjmp	.-364    	; 0x4728 <main+0x1e26>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1022
        }
        break;
    }
    case mnuCmdPlrMorOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4894:	12 30       	cpi	r17, 0x02	; 2
    4896:	09 f0       	breq	.+2      	; 0x489a <main+0x1f98>
    4898:	4c c0       	rjmp	.+152    	; 0x4932 <main+0x2030>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1024
        {
            if (blinkMode == setHr)
    489a:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    489e:	11 11       	cpse	r17, r1
    48a0:	22 c0       	rjmp	.+68     	; 0x48e6 <main+0x1fe4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1025
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
    48a2:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <config+0x3e>
    48a6:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <config+0x3f>
    48aa:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <config+0x40>
    48ae:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    48b2:	ac 01       	movw	r20, r24
    48b4:	bd 01       	movw	r22, r26
    48b6:	44 5c       	subi	r20, 0xC4	; 196
    48b8:	5f 4f       	sbci	r21, 0xFF	; 255
    48ba:	6f 4f       	sbci	r22, 0xFF	; 255
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    48be:	77 fd       	sbrc	r23, 7
    48c0:	08 c0       	rjmp	.+16     	; 0x48d2 <main+0x1fd0>
    48c2:	40 3a       	cpi	r20, 0xA0	; 160
    48c4:	e5 e0       	ldi	r30, 0x05	; 5
    48c6:	5e 07       	cpc	r21, r30
    48c8:	61 05       	cpc	r22, r1
    48ca:	71 05       	cpc	r23, r1
    48cc:	14 f4       	brge	.+4      	; 0x48d2 <main+0x1fd0>
    48ce:	db 01       	movw	r26, r22
    48d0:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1025
    48d2:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <config+0x3e>
    48d6:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <config+0x3f>
    48da:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <config+0x40>
    48de:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    48e2:	e1 2c       	mov	r14, r1
    48e4:	10 cb       	rjmp	.-2528   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1026
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    48e6:	11 30       	cpi	r17, 0x01	; 1
    48e8:	09 f0       	breq	.+2      	; 0x48ec <main+0x1fea>
    48ea:	df c3       	rjmp	.+1982   	; 0x50aa <main+0x27a8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1027
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
    48ec:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <config+0x3e>
    48f0:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <config+0x3f>
    48f4:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <config+0x40>
    48f8:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    48fc:	ac 01       	movw	r20, r24
    48fe:	bd 01       	movw	r22, r26
    4900:	4f 5f       	subi	r20, 0xFF	; 255
    4902:	5f 4f       	sbci	r21, 0xFF	; 255
    4904:	6f 4f       	sbci	r22, 0xFF	; 255
    4906:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4908:	77 fd       	sbrc	r23, 7
    490a:	08 c0       	rjmp	.+16     	; 0x491c <main+0x201a>
    490c:	40 3a       	cpi	r20, 0xA0	; 160
    490e:	f5 e0       	ldi	r31, 0x05	; 5
    4910:	5f 07       	cpc	r21, r31
    4912:	61 05       	cpc	r22, r1
    4914:	71 05       	cpc	r23, r1
    4916:	14 f4       	brge	.+4      	; 0x491c <main+0x201a>
    4918:	db 01       	movw	r26, r22
    491a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1027
    491c:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <config+0x3e>
    4920:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <config+0x3f>
    4924:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <config+0x40>
    4928:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    492c:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    492e:	10 e0       	ldi	r17, 0x00	; 0
    4930:	ea ca       	rjmp	.-2604   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1029
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4932:	81 2f       	mov	r24, r17
    4934:	8f 77       	andi	r24, 0x7F	; 127
    4936:	83 30       	cpi	r24, 0x03	; 3
    4938:	09 f0       	breq	.+2      	; 0x493c <main+0x203a>
    493a:	4c c0       	rjmp	.+152    	; 0x49d4 <main+0x20d2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1031
        {
            if (blinkMode == setHr)
    493c:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4940:	11 11       	cpse	r17, r1
    4942:	22 c0       	rjmp	.+68     	; 0x4988 <main+0x2086>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1032
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
    4944:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <config+0x3e>
    4948:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <config+0x3f>
    494c:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <config+0x40>
    4950:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4954:	ac 01       	movw	r20, r24
    4956:	bd 01       	movw	r22, r26
    4958:	4c 53       	subi	r20, 0x3C	; 60
    495a:	51 09       	sbc	r21, r1
    495c:	61 09       	sbc	r22, r1
    495e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4960:	77 fd       	sbrc	r23, 7
    4962:	08 c0       	rjmp	.+16     	; 0x4974 <main+0x2072>
    4964:	40 3a       	cpi	r20, 0xA0	; 160
    4966:	25 e0       	ldi	r18, 0x05	; 5
    4968:	52 07       	cpc	r21, r18
    496a:	61 05       	cpc	r22, r1
    496c:	71 05       	cpc	r23, r1
    496e:	14 f4       	brge	.+4      	; 0x4974 <main+0x2072>
    4970:	db 01       	movw	r26, r22
    4972:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1032
    4974:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <config+0x3e>
    4978:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <config+0x3f>
    497c:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <config+0x40>
    4980:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4984:	e1 2c       	mov	r14, r1
    4986:	bf ca       	rjmp	.-2690   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1033
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    4988:	11 30       	cpi	r17, 0x01	; 1
    498a:	09 f0       	breq	.+2      	; 0x498e <main+0x208c>
    498c:	92 c3       	rjmp	.+1828   	; 0x50b2 <main+0x27b0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1034
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
    498e:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <config+0x3e>
    4992:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <config+0x3f>
    4996:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <config+0x40>
    499a:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    499e:	ac 01       	movw	r20, r24
    49a0:	bd 01       	movw	r22, r26
    49a2:	41 50       	subi	r20, 0x01	; 1
    49a4:	51 09       	sbc	r21, r1
    49a6:	61 09       	sbc	r22, r1
    49a8:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    49aa:	77 fd       	sbrc	r23, 7
    49ac:	08 c0       	rjmp	.+16     	; 0x49be <main+0x20bc>
    49ae:	40 3a       	cpi	r20, 0xA0	; 160
    49b0:	35 e0       	ldi	r19, 0x05	; 5
    49b2:	53 07       	cpc	r21, r19
    49b4:	61 05       	cpc	r22, r1
    49b6:	71 05       	cpc	r23, r1
    49b8:	14 f4       	brge	.+4      	; 0x49be <main+0x20bc>
    49ba:	db 01       	movw	r26, r22
    49bc:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1034
    49be:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <config+0x3e>
    49c2:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <config+0x3f>
    49c6:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <config+0x40>
    49ca:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    49ce:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    49d0:	10 e0       	ldi	r17, 0x00	; 0
    49d2:	99 ca       	rjmp	.-2766   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1036
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    49d4:	11 30       	cpi	r17, 0x01	; 1
    49d6:	09 f0       	breq	.+2      	; 0x49da <main+0x20d8>
    49d8:	70 c3       	rjmp	.+1760   	; 0x50ba <main+0x27b8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1038
        {
            if (blinkMode == setHr)
    49da:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    49de:	88 23       	and	r24, r24
    49e0:	09 f4       	brne	.+2      	; 0x49e4 <main+0x20e2>
    49e2:	dd cb       	rjmp	.-2118   	; 0x419e <main+0x189c>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    49e4:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    49e6:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1042
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    49e8:	81 30       	cpi	r24, 0x01	; 1
    49ea:	09 f0       	breq	.+2      	; 0x49ee <main+0x20ec>
    49ec:	8c ca       	rjmp	.-2792   	; 0x3f06 <main+0x1604>
    49ee:	9c ce       	rjmp	.-712    	; 0x4728 <main+0x1e26>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1053
        }
        break;
    }
    case mnuCmdPlrMorDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    49f0:	12 30       	cpi	r17, 0x02	; 2
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <main+0x20f4>
    49f4:	4c c0       	rjmp	.+152    	; 0x4a8e <main+0x218c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1055
        {
            if (blinkMode == setHr)
    49f6:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    49fa:	11 11       	cpse	r17, r1
    49fc:	22 c0       	rjmp	.+68     	; 0x4a42 <main+0x2140>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1056
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
    49fe:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <config+0x42>
    4a02:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <config+0x43>
    4a06:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <config+0x44>
    4a0a:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4a0e:	ac 01       	movw	r20, r24
    4a10:	bd 01       	movw	r22, r26
    4a12:	44 5c       	subi	r20, 0xC4	; 196
    4a14:	5f 4f       	sbci	r21, 0xFF	; 255
    4a16:	6f 4f       	sbci	r22, 0xFF	; 255
    4a18:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4a1a:	77 fd       	sbrc	r23, 7
    4a1c:	08 c0       	rjmp	.+16     	; 0x4a2e <main+0x212c>
    4a1e:	40 3a       	cpi	r20, 0xA0	; 160
    4a20:	e5 e0       	ldi	r30, 0x05	; 5
    4a22:	5e 07       	cpc	r21, r30
    4a24:	61 05       	cpc	r22, r1
    4a26:	71 05       	cpc	r23, r1
    4a28:	14 f4       	brge	.+4      	; 0x4a2e <main+0x212c>
    4a2a:	db 01       	movw	r26, r22
    4a2c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1056
    4a2e:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <config+0x42>
    4a32:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <config+0x43>
    4a36:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <config+0x44>
    4a3a:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4a3e:	e1 2c       	mov	r14, r1
    4a40:	62 ca       	rjmp	.-2876   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1057
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    4a42:	11 30       	cpi	r17, 0x01	; 1
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <main+0x2146>
    4a46:	3d c3       	rjmp	.+1658   	; 0x50c2 <main+0x27c0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1058
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
    4a48:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <config+0x42>
    4a4c:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <config+0x43>
    4a50:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <config+0x44>
    4a54:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4a58:	ac 01       	movw	r20, r24
    4a5a:	bd 01       	movw	r22, r26
    4a5c:	4b 5f       	subi	r20, 0xFB	; 251
    4a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a60:	6f 4f       	sbci	r22, 0xFF	; 255
    4a62:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4a64:	77 fd       	sbrc	r23, 7
    4a66:	08 c0       	rjmp	.+16     	; 0x4a78 <main+0x2176>
    4a68:	40 3a       	cpi	r20, 0xA0	; 160
    4a6a:	f5 e0       	ldi	r31, 0x05	; 5
    4a6c:	5f 07       	cpc	r21, r31
    4a6e:	61 05       	cpc	r22, r1
    4a70:	71 05       	cpc	r23, r1
    4a72:	14 f4       	brge	.+4      	; 0x4a78 <main+0x2176>
    4a74:	db 01       	movw	r26, r22
    4a76:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1058
    4a78:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <config+0x42>
    4a7c:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <config+0x43>
    4a80:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <config+0x44>
    4a84:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4a88:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a8a:	10 e0       	ldi	r17, 0x00	; 0
    4a8c:	3c ca       	rjmp	.-2952   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1060
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4a8e:	81 2f       	mov	r24, r17
    4a90:	8f 77       	andi	r24, 0x7F	; 127
    4a92:	83 30       	cpi	r24, 0x03	; 3
    4a94:	09 f0       	breq	.+2      	; 0x4a98 <main+0x2196>
    4a96:	4c c0       	rjmp	.+152    	; 0x4b30 <main+0x222e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1062
        {
            if (blinkMode == setHr)
    4a98:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4a9c:	11 11       	cpse	r17, r1
    4a9e:	22 c0       	rjmp	.+68     	; 0x4ae4 <main+0x21e2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1063
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
    4aa0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <config+0x42>
    4aa4:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <config+0x43>
    4aa8:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <config+0x44>
    4aac:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4ab0:	ac 01       	movw	r20, r24
    4ab2:	bd 01       	movw	r22, r26
    4ab4:	4c 53       	subi	r20, 0x3C	; 60
    4ab6:	51 09       	sbc	r21, r1
    4ab8:	61 09       	sbc	r22, r1
    4aba:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4abc:	77 fd       	sbrc	r23, 7
    4abe:	08 c0       	rjmp	.+16     	; 0x4ad0 <main+0x21ce>
    4ac0:	40 3a       	cpi	r20, 0xA0	; 160
    4ac2:	25 e0       	ldi	r18, 0x05	; 5
    4ac4:	52 07       	cpc	r21, r18
    4ac6:	61 05       	cpc	r22, r1
    4ac8:	71 05       	cpc	r23, r1
    4aca:	14 f4       	brge	.+4      	; 0x4ad0 <main+0x21ce>
    4acc:	db 01       	movw	r26, r22
    4ace:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1063
    4ad0:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <config+0x42>
    4ad4:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <config+0x43>
    4ad8:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <config+0x44>
    4adc:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4ae0:	e1 2c       	mov	r14, r1
    4ae2:	11 ca       	rjmp	.-3038   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1064
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    4ae4:	11 30       	cpi	r17, 0x01	; 1
    4ae6:	09 f0       	breq	.+2      	; 0x4aea <main+0x21e8>
    4ae8:	f0 c2       	rjmp	.+1504   	; 0x50ca <main+0x27c8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1065
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
    4aea:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <config+0x42>
    4aee:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <config+0x43>
    4af2:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <config+0x44>
    4af6:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4afa:	ac 01       	movw	r20, r24
    4afc:	bd 01       	movw	r22, r26
    4afe:	45 50       	subi	r20, 0x05	; 5
    4b00:	51 09       	sbc	r21, r1
    4b02:	61 09       	sbc	r22, r1
    4b04:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4b06:	77 fd       	sbrc	r23, 7
    4b08:	08 c0       	rjmp	.+16     	; 0x4b1a <main+0x2218>
    4b0a:	40 3a       	cpi	r20, 0xA0	; 160
    4b0c:	35 e0       	ldi	r19, 0x05	; 5
    4b0e:	53 07       	cpc	r21, r19
    4b10:	61 05       	cpc	r22, r1
    4b12:	71 05       	cpc	r23, r1
    4b14:	14 f4       	brge	.+4      	; 0x4b1a <main+0x2218>
    4b16:	db 01       	movw	r26, r22
    4b18:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1065
    4b1a:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <config+0x42>
    4b1e:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <config+0x43>
    4b22:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <config+0x44>
    4b26:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4b2a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b2c:	10 e0       	ldi	r17, 0x00	; 0
    4b2e:	eb c9       	rjmp	.-3114   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1067
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4b30:	11 30       	cpi	r17, 0x01	; 1
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <main+0x2234>
    4b34:	ce c2       	rjmp	.+1436   	; 0x50d2 <main+0x27d0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1069
        {
            if (blinkMode == setHr)
    4b36:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4b3a:	88 23       	and	r24, r24
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <main+0x223e>
    4b3e:	2f cb       	rjmp	.-2466   	; 0x419e <main+0x189c>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4b40:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b42:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1073
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4b44:	81 30       	cpi	r24, 0x01	; 1
    4b46:	09 f0       	breq	.+2      	; 0x4b4a <main+0x2248>
    4b48:	de c9       	rjmp	.-3140   	; 0x3f06 <main+0x1604>
    4b4a:	ee cd       	rjmp	.-1060   	; 0x4728 <main+0x1e26>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1084
        }
        break;
    }
    case mnuCmdPlrEveOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4b4c:	12 30       	cpi	r17, 0x02	; 2
    4b4e:	09 f0       	breq	.+2      	; 0x4b52 <main+0x2250>
    4b50:	4c c0       	rjmp	.+152    	; 0x4bea <main+0x22e8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1086
        {
            if (blinkMode == setHr)
    4b52:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4b56:	11 11       	cpse	r17, r1
    4b58:	22 c0       	rjmp	.+68     	; 0x4b9e <main+0x229c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1087
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
    4b5a:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <config+0x46>
    4b5e:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <config+0x47>
    4b62:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <config+0x48>
    4b66:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4b6a:	ac 01       	movw	r20, r24
    4b6c:	bd 01       	movw	r22, r26
    4b6e:	44 5c       	subi	r20, 0xC4	; 196
    4b70:	5f 4f       	sbci	r21, 0xFF	; 255
    4b72:	6f 4f       	sbci	r22, 0xFF	; 255
    4b74:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4b76:	77 fd       	sbrc	r23, 7
    4b78:	08 c0       	rjmp	.+16     	; 0x4b8a <main+0x2288>
    4b7a:	40 3a       	cpi	r20, 0xA0	; 160
    4b7c:	e5 e0       	ldi	r30, 0x05	; 5
    4b7e:	5e 07       	cpc	r21, r30
    4b80:	61 05       	cpc	r22, r1
    4b82:	71 05       	cpc	r23, r1
    4b84:	14 f4       	brge	.+4      	; 0x4b8a <main+0x2288>
    4b86:	db 01       	movw	r26, r22
    4b88:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1087
    4b8a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <config+0x46>
    4b8e:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <config+0x47>
    4b92:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <config+0x48>
    4b96:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4b9a:	e1 2c       	mov	r14, r1
    4b9c:	b4 c9       	rjmp	.-3224   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1088
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    4b9e:	11 30       	cpi	r17, 0x01	; 1
    4ba0:	09 f0       	breq	.+2      	; 0x4ba4 <main+0x22a2>
    4ba2:	9b c2       	rjmp	.+1334   	; 0x50da <main+0x27d8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1089
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
    4ba4:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <config+0x46>
    4ba8:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <config+0x47>
    4bac:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <config+0x48>
    4bb0:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4bb4:	ac 01       	movw	r20, r24
    4bb6:	bd 01       	movw	r22, r26
    4bb8:	4f 5f       	subi	r20, 0xFF	; 255
    4bba:	5f 4f       	sbci	r21, 0xFF	; 255
    4bbc:	6f 4f       	sbci	r22, 0xFF	; 255
    4bbe:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4bc0:	77 fd       	sbrc	r23, 7
    4bc2:	08 c0       	rjmp	.+16     	; 0x4bd4 <main+0x22d2>
    4bc4:	40 3a       	cpi	r20, 0xA0	; 160
    4bc6:	f5 e0       	ldi	r31, 0x05	; 5
    4bc8:	5f 07       	cpc	r21, r31
    4bca:	61 05       	cpc	r22, r1
    4bcc:	71 05       	cpc	r23, r1
    4bce:	14 f4       	brge	.+4      	; 0x4bd4 <main+0x22d2>
    4bd0:	db 01       	movw	r26, r22
    4bd2:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1089
    4bd4:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <config+0x46>
    4bd8:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <config+0x47>
    4bdc:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <config+0x48>
    4be0:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4be4:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4be6:	10 e0       	ldi	r17, 0x00	; 0
    4be8:	8e c9       	rjmp	.-3300   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1091
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    4bea:	13 30       	cpi	r17, 0x03	; 3
    4bec:	09 f0       	breq	.+2      	; 0x4bf0 <main+0x22ee>
    4bee:	4c c0       	rjmp	.+152    	; 0x4c88 <main+0x2386>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1093
        {
            if (blinkMode == setHr)
    4bf0:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4bf4:	11 11       	cpse	r17, r1
    4bf6:	22 c0       	rjmp	.+68     	; 0x4c3c <main+0x233a>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1094
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
    4bf8:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <config+0x46>
    4bfc:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <config+0x47>
    4c00:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <config+0x48>
    4c04:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4c08:	ac 01       	movw	r20, r24
    4c0a:	bd 01       	movw	r22, r26
    4c0c:	4c 53       	subi	r20, 0x3C	; 60
    4c0e:	51 09       	sbc	r21, r1
    4c10:	61 09       	sbc	r22, r1
    4c12:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4c14:	77 fd       	sbrc	r23, 7
    4c16:	08 c0       	rjmp	.+16     	; 0x4c28 <main+0x2326>
    4c18:	40 3a       	cpi	r20, 0xA0	; 160
    4c1a:	25 e0       	ldi	r18, 0x05	; 5
    4c1c:	52 07       	cpc	r21, r18
    4c1e:	61 05       	cpc	r22, r1
    4c20:	71 05       	cpc	r23, r1
    4c22:	14 f4       	brge	.+4      	; 0x4c28 <main+0x2326>
    4c24:	db 01       	movw	r26, r22
    4c26:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1094
    4c28:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <config+0x46>
    4c2c:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <config+0x47>
    4c30:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <config+0x48>
    4c34:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4c38:	e1 2c       	mov	r14, r1
    4c3a:	65 c9       	rjmp	.-3382   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1095
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    4c3c:	11 30       	cpi	r17, 0x01	; 1
    4c3e:	09 f0       	breq	.+2      	; 0x4c42 <main+0x2340>
    4c40:	50 c2       	rjmp	.+1184   	; 0x50e2 <main+0x27e0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1096
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
    4c42:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <config+0x46>
    4c46:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <config+0x47>
    4c4a:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <config+0x48>
    4c4e:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4c52:	ac 01       	movw	r20, r24
    4c54:	bd 01       	movw	r22, r26
    4c56:	41 50       	subi	r20, 0x01	; 1
    4c58:	51 09       	sbc	r21, r1
    4c5a:	61 09       	sbc	r22, r1
    4c5c:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4c5e:	77 fd       	sbrc	r23, 7
    4c60:	08 c0       	rjmp	.+16     	; 0x4c72 <main+0x2370>
    4c62:	40 3a       	cpi	r20, 0xA0	; 160
    4c64:	35 e0       	ldi	r19, 0x05	; 5
    4c66:	53 07       	cpc	r21, r19
    4c68:	61 05       	cpc	r22, r1
    4c6a:	71 05       	cpc	r23, r1
    4c6c:	14 f4       	brge	.+4      	; 0x4c72 <main+0x2370>
    4c6e:	db 01       	movw	r26, r22
    4c70:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1096
    4c72:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <config+0x46>
    4c76:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <config+0x47>
    4c7a:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <config+0x48>
    4c7e:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4c82:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4c84:	10 e0       	ldi	r17, 0x00	; 0
    4c86:	3f c9       	rjmp	.-3458   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1098
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4c88:	11 30       	cpi	r17, 0x01	; 1
    4c8a:	09 f0       	breq	.+2      	; 0x4c8e <main+0x238c>
    4c8c:	2e c2       	rjmp	.+1116   	; 0x50ea <main+0x27e8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1100
        {
            if (blinkMode == setHr)
    4c8e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4c92:	88 23       	and	r24, r24
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <main+0x2396>
    4c96:	83 ca       	rjmp	.-2810   	; 0x419e <main+0x189c>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4c98:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4c9a:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1104
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4c9c:	81 30       	cpi	r24, 0x01	; 1
    4c9e:	09 f0       	breq	.+2      	; 0x4ca2 <main+0x23a0>
    4ca0:	32 c9       	rjmp	.-3484   	; 0x3f06 <main+0x1604>
    4ca2:	42 cd       	rjmp	.-1404   	; 0x4728 <main+0x1e26>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1115
        }
        break;
    }
    case mnuCmdPlrEveDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    4ca4:	12 30       	cpi	r17, 0x02	; 2
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <main+0x23a8>
    4ca8:	4c c0       	rjmp	.+152    	; 0x4d42 <main+0x2440>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1117
        {
            if (blinkMode == setHr)
    4caa:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4cae:	11 11       	cpse	r17, r1
    4cb0:	22 c0       	rjmp	.+68     	; 0x4cf6 <main+0x23f4>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1118
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
    4cb2:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <config+0x4a>
    4cb6:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <config+0x4b>
    4cba:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <config+0x4c>
    4cbe:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4cc2:	ac 01       	movw	r20, r24
    4cc4:	bd 01       	movw	r22, r26
    4cc6:	44 5c       	subi	r20, 0xC4	; 196
    4cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cca:	6f 4f       	sbci	r22, 0xFF	; 255
    4ccc:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4cce:	77 fd       	sbrc	r23, 7
    4cd0:	08 c0       	rjmp	.+16     	; 0x4ce2 <main+0x23e0>
    4cd2:	40 3a       	cpi	r20, 0xA0	; 160
    4cd4:	e5 e0       	ldi	r30, 0x05	; 5
    4cd6:	5e 07       	cpc	r21, r30
    4cd8:	61 05       	cpc	r22, r1
    4cda:	71 05       	cpc	r23, r1
    4cdc:	14 f4       	brge	.+4      	; 0x4ce2 <main+0x23e0>
    4cde:	db 01       	movw	r26, r22
    4ce0:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1118
    4ce2:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <config+0x4a>
    4ce6:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <config+0x4b>
    4cea:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <config+0x4c>
    4cee:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4cf2:	e1 2c       	mov	r14, r1
    4cf4:	08 c9       	rjmp	.-3568   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1119
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    4cf6:	11 30       	cpi	r17, 0x01	; 1
    4cf8:	09 f0       	breq	.+2      	; 0x4cfc <main+0x23fa>
    4cfa:	fb c1       	rjmp	.+1014   	; 0x50f2 <main+0x27f0>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1120
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
    4cfc:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <config+0x4a>
    4d00:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <config+0x4b>
    4d04:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <config+0x4c>
    4d08:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4d0c:	ac 01       	movw	r20, r24
    4d0e:	bd 01       	movw	r22, r26
    4d10:	4b 5f       	subi	r20, 0xFB	; 251
    4d12:	5f 4f       	sbci	r21, 0xFF	; 255
    4d14:	6f 4f       	sbci	r22, 0xFF	; 255
    4d16:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4d18:	77 fd       	sbrc	r23, 7
    4d1a:	08 c0       	rjmp	.+16     	; 0x4d2c <main+0x242a>
    4d1c:	40 3a       	cpi	r20, 0xA0	; 160
    4d1e:	f5 e0       	ldi	r31, 0x05	; 5
    4d20:	5f 07       	cpc	r21, r31
    4d22:	61 05       	cpc	r22, r1
    4d24:	71 05       	cpc	r23, r1
    4d26:	14 f4       	brge	.+4      	; 0x4d2c <main+0x242a>
    4d28:	db 01       	movw	r26, r22
    4d2a:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1120
    4d2c:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <config+0x4a>
    4d30:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <config+0x4b>
    4d34:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <config+0x4c>
    4d38:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d3c:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4d3e:	10 e0       	ldi	r17, 0x00	; 0
    4d40:	e2 c8       	rjmp	.-3644   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1122
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4d42:	81 2f       	mov	r24, r17
    4d44:	8f 77       	andi	r24, 0x7F	; 127
    4d46:	83 30       	cpi	r24, 0x03	; 3
    4d48:	09 f0       	breq	.+2      	; 0x4d4c <main+0x244a>
    4d4a:	4c c0       	rjmp	.+152    	; 0x4de4 <main+0x24e2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1124
        {
            if (blinkMode == setHr)
    4d4c:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <blinkMode>
    4d50:	11 11       	cpse	r17, r1
    4d52:	22 c0       	rjmp	.+68     	; 0x4d98 <main+0x2496>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1125
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
    4d54:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <config+0x4a>
    4d58:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <config+0x4b>
    4d5c:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <config+0x4c>
    4d60:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4d64:	ac 01       	movw	r20, r24
    4d66:	bd 01       	movw	r22, r26
    4d68:	4c 53       	subi	r20, 0x3C	; 60
    4d6a:	51 09       	sbc	r21, r1
    4d6c:	61 09       	sbc	r22, r1
    4d6e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4d70:	77 fd       	sbrc	r23, 7
    4d72:	08 c0       	rjmp	.+16     	; 0x4d84 <main+0x2482>
    4d74:	40 3a       	cpi	r20, 0xA0	; 160
    4d76:	25 e0       	ldi	r18, 0x05	; 5
    4d78:	52 07       	cpc	r21, r18
    4d7a:	61 05       	cpc	r22, r1
    4d7c:	71 05       	cpc	r23, r1
    4d7e:	14 f4       	brge	.+4      	; 0x4d84 <main+0x2482>
    4d80:	db 01       	movw	r26, r22
    4d82:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1125
    4d84:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <config+0x4a>
    4d88:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <config+0x4b>
    4d8c:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <config+0x4c>
    4d90:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d94:	e1 2c       	mov	r14, r1
    4d96:	b7 c8       	rjmp	.-3730   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1126
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    4d98:	11 30       	cpi	r17, 0x01	; 1
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <main+0x249c>
    4d9c:	ae c1       	rjmp	.+860    	; 0x50fa <main+0x27f8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1127
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
    4d9e:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <config+0x4a>
    4da2:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <config+0x4b>
    4da6:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <config+0x4c>
    4daa:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:100
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4dae:	ac 01       	movw	r20, r24
    4db0:	bd 01       	movw	r22, r26
    4db2:	45 50       	subi	r20, 0x05	; 5
    4db4:	51 09       	sbc	r21, r1
    4db6:	61 09       	sbc	r22, r1
    4db8:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:102

  if (newtime >= minval && newtime <= maxval)
    4dba:	77 fd       	sbrc	r23, 7
    4dbc:	08 c0       	rjmp	.+16     	; 0x4dce <main+0x24cc>
    4dbe:	40 3a       	cpi	r20, 0xA0	; 160
    4dc0:	35 e0       	ldi	r19, 0x05	; 5
    4dc2:	53 07       	cpc	r21, r19
    4dc4:	61 05       	cpc	r22, r1
    4dc6:	71 05       	cpc	r23, r1
    4dc8:	14 f4       	brge	.+4      	; 0x4dce <main+0x24cc>
    4dca:	db 01       	movw	r26, r22
    4dcc:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1127
    4dce:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <config+0x4a>
    4dd2:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <config+0x4b>
    4dd6:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <config+0x4c>
    4dda:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4dde:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4de0:	10 e0       	ldi	r17, 0x00	; 0
    4de2:	91 c8       	rjmp	.-3806   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1129
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4de4:	11 30       	cpi	r17, 0x01	; 1
    4de6:	09 f0       	breq	.+2      	; 0x4dea <main+0x24e8>
    4de8:	8c c1       	rjmp	.+792    	; 0x5102 <main+0x2800>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1131
        {
            if (blinkMode == setHr)
    4dea:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    4dee:	88 23       	and	r24, r24
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <main+0x24f2>
    4df2:	d5 c9       	rjmp	.-3158   	; 0x419e <main+0x189c>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4df4:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4df6:	10 e0       	ldi	r17, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1135
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4df8:	81 30       	cpi	r24, 0x01	; 1
    4dfa:	09 f0       	breq	.+2      	; 0x4dfe <main+0x24fc>
    4dfc:	84 c8       	rjmp	.-3832   	; 0x3f06 <main+0x1604>
    4dfe:	94 cc       	rjmp	.-1752   	; 0x4728 <main+0x1e26>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1147
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4e00:	81 2f       	mov	r24, r17
    4e02:	8f 77       	andi	r24, 0x7F	; 127
    4e04:	82 30       	cpi	r24, 0x02	; 2
    4e06:	69 f4       	brne	.+26     	; 0x4e22 <main+0x2520>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1149
        {
            config.SerialNo = ++config.SerialNo;
    4e08:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <config+0x20>
    4e0c:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <config+0x21>
    4e10:	01 96       	adiw	r24, 0x01	; 1
    4e12:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x21>
    4e16:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x20>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1146
        }
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
    4e1a:	ee 24       	eor	r14, r14
    4e1c:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e1e:	10 e0       	ldi	r17, 0x00	; 0
    4e20:	72 c8       	rjmp	.-3868   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1151
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4e22:	83 30       	cpi	r24, 0x03	; 3
    4e24:	69 f4       	brne	.+26     	; 0x4e40 <main+0x253e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1153
        {
            config.SerialNo = --config.SerialNo;
    4e26:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <config+0x20>
    4e2a:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <config+0x21>
    4e2e:	01 97       	sbiw	r24, 0x01	; 1
    4e30:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x21>
    4e34:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x20>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1146
        }
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
    4e38:	ee 24       	eor	r14, r14
    4e3a:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e3c:	10 e0       	ldi	r17, 0x00	; 0
    4e3e:	63 c8       	rjmp	.-3898   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1155
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4e40:	11 30       	cpi	r17, 0x01	; 1
    4e42:	09 f4       	brne	.+2      	; 0x4e46 <main+0x2544>
    4e44:	01 ca       	rjmp	.-3070   	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4e46:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e48:	10 e0       	ldi	r17, 0x00	; 0
    4e4a:	5d c8       	rjmp	.-3910   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1169
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4e4c:	81 2f       	mov	r24, r17
    4e4e:	8f 77       	andi	r24, 0x7F	; 127
    4e50:	82 30       	cpi	r24, 0x02	; 2
    4e52:	69 f4       	brne	.+26     	; 0x4e6e <main+0x256c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1171
        {
            config.DataYear = ++config.DataYear;
    4e54:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <config+0x1e>
    4e58:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <config+0x1f>
    4e5c:	01 96       	adiw	r24, 0x01	; 1
    4e5e:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <config+0x1f>
    4e62:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <config+0x1e>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1168
        }
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
    4e66:	ee 24       	eor	r14, r14
    4e68:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e6a:	10 e0       	ldi	r17, 0x00	; 0
    4e6c:	4c c8       	rjmp	.-3944   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1173
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4e6e:	83 30       	cpi	r24, 0x03	; 3
    4e70:	99 f4       	brne	.+38     	; 0x4e98 <main+0x2596>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1175
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    4e72:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <config+0x1e>
    4e76:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <config+0x1f>
    4e7a:	01 97       	sbiw	r24, 0x01	; 1
    4e7c:	86 3e       	cpi	r24, 0xE6	; 230
    4e7e:	67 e0       	ldi	r22, 0x07	; 7
    4e80:	96 07       	cpc	r25, r22
    4e82:	14 f4       	brge	.+4      	; 0x4e88 <main+0x2586>
    4e84:	86 ee       	ldi	r24, 0xE6	; 230
    4e86:	97 e0       	ldi	r25, 0x07	; 7
    4e88:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <config+0x1f>
    4e8c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <config+0x1e>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1168
        }
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
    4e90:	ee 24       	eor	r14, r14
    4e92:	e3 94       	inc	r14
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e94:	10 e0       	ldi	r17, 0x00	; 0
    4e96:	37 c8       	rjmp	.-3986   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1177
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4e98:	11 30       	cpi	r17, 0x01	; 1
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <main+0x259c>
    4e9c:	d5 c9       	rjmp	.-3158   	; 0x4248 <main+0x1946>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4e9e:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4ea0:	10 e0       	ldi	r17, 0x00	; 0
    4ea2:	31 c8       	rjmp	.-3998   	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1191
        break;
    }
    
    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    4ea4:	11 38       	cpi	r17, 0x81	; 129
    4ea6:	09 f0       	breq	.+2      	; 0x4eaa <main+0x25a8>
    4ea8:	b8 c0       	rjmp	.+368    	; 0x501a <main+0x2718>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:11
static char strbuf[LCD_COLS + 1];
const char NotImp[] = "-----";

void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    4eaa:	67 e2       	ldi	r22, 0x27	; 39
    4eac:	71 e0       	ldi	r23, 0x01	; 1
    4eae:	84 eb       	ldi	r24, 0xB4	; 180
    4eb0:	93 e0       	ldi	r25, 0x03	; 3
    4eb2:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:12
  Song1_Count = 100;
    4eb6:	30 92 cf 03 	sts	0x03CF, r3	; 0x8003cf <config+0x1b>
    4eba:	20 92 ce 03 	sts	0x03CE, r2	; 0x8003ce <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:13
  Song2_Count = 100;
    4ebe:	30 92 d1 03 	sts	0x03D1, r3	; 0x8003d1 <config+0x1d>
    4ec2:	20 92 d0 03 	sts	0x03D0, r2	; 0x8003d0 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:14
  startTime = 5; //5AM
    4ec6:	85 e0       	ldi	r24, 0x05	; 5
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <config+0x10>
    4ece:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:15
  endTime = 22; // 10PM
    4ed2:	86 e1       	ldi	r24, 0x16	; 22
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <config+0x12>
    4eda:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:16
  backLightDur = 20; //Sec
    4ede:	84 e1       	ldi	r24, 0x14	; 20
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <config+0x14>
    4ee6:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:17
  vol = 20;
    4eea:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <config+0x16>
    4eee:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:18
  MorSong1Time = 3;
    4ef2:	83 e0       	ldi	r24, 0x03	; 3
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <config+0x23>
    4efa:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <config+0x22>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:19
  MorSong2Time = 3;
    4efe:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <config+0x25>
    4f02:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:20
  EveSong2Time = 3;
    4f06:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <config+0x29>
    4f0a:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:21
  EveSong1Time = 3;
    4f0e:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <config+0x27>
    4f12:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:22
  MorSongNo = 1;
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <config+0x2b>
    4f1e:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:23
  EveSongNo = 2;
    4f22:	82 e0       	ldi	r24, 0x02	; 2
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <config+0x2d>
    4f2a:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:25

  Light1On = 1079;
    4f2e:	87 e3       	ldi	r24, 0x37	; 55
    4f30:	94 e0       	ldi	r25, 0x04	; 4
    4f32:	a0 e0       	ldi	r26, 0x00	; 0
    4f34:	b0 e0       	ldi	r27, 0x00	; 0
    4f36:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <config+0x2e>
    4f3a:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <config+0x2f>
    4f3e:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <config+0x30>
    4f42:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <config+0x31>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:26
  Light1Off = 359;
    4f46:	87 e6       	ldi	r24, 0x67	; 103
    4f48:	91 e0       	ldi	r25, 0x01	; 1
    4f4a:	a0 e0       	ldi	r26, 0x00	; 0
    4f4c:	b0 e0       	ldi	r27, 0x00	; 0
    4f4e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <config+0x32>
    4f52:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <config+0x33>
    4f56:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <config+0x34>
    4f5a:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:27
  Light2On = 0;
    4f5e:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <config+0x36>
    4f62:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <config+0x37>
    4f66:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <config+0x38>
    4f6a:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:28
  Light2Off = 0;
    4f6e:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <config+0x3a>
    4f72:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <config+0x3b>
    4f76:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <config+0x3c>
    4f7a:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:29
  PlayerMorTime = 300;
    4f7e:	8c e2       	ldi	r24, 0x2C	; 44
    4f80:	91 e0       	ldi	r25, 0x01	; 1
    4f82:	a0 e0       	ldi	r26, 0x00	; 0
    4f84:	b0 e0       	ldi	r27, 0x00	; 0
    4f86:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <config+0x3e>
    4f8a:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <config+0x3f>
    4f8e:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <config+0x40>
    4f92:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:30
  PlayerMorDur= 115;
    4f96:	83 e7       	ldi	r24, 0x73	; 115
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	a0 e0       	ldi	r26, 0x00	; 0
    4f9c:	b0 e0       	ldi	r27, 0x00	; 0
    4f9e:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <config+0x42>
    4fa2:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <config+0x43>
    4fa6:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <config+0x44>
    4faa:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:31
  PlayerEveTime = 1020;
    4fae:	8c ef       	ldi	r24, 0xFC	; 252
    4fb0:	93 e0       	ldi	r25, 0x03	; 3
    4fb2:	a0 e0       	ldi	r26, 0x00	; 0
    4fb4:	b0 e0       	ldi	r27, 0x00	; 0
    4fb6:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <config+0x46>
    4fba:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <config+0x47>
    4fbe:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <config+0x48>
    4fc2:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:32
  PlayerEveDur = 115;
    4fc6:	83 e7       	ldi	r24, 0x73	; 115
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	a0 e0       	ldi	r26, 0x00	; 0
    4fcc:	b0 e0       	ldi	r27, 0x00	; 0
    4fce:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <config+0x4a>
    4fd2:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <config+0x4b>
    4fd6:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <config+0x4c>
    4fda:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:34

  AutoPlay = 0;
    4fde:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:35
  AutoLight = 0;
    4fe2:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:36
  SchlZone = 0;
    4fe6:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:38

  SerialNo = 204;
    4fea:	8c ec       	ldi	r24, 0xCC	; 204
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <config+0x21>
    4ff2:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.2/Config.cpp:39
  DataYear = 2022;
    4ff6:	86 ee       	ldi	r24, 0xE6	; 230
    4ff8:	97 e0       	ldi	r25, 0x07	; 7
    4ffa:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <config+0x1f>
    4ffe:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <config+0x1e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1194
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    5002:	61 e0       	ldi	r22, 0x01	; 1
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1195
            lcd.print("Defaults loaded");
    500a:	8e e3       	ldi	r24, 0x3E	; 62
    500c:	92 e0       	ldi	r25, 0x02	; 2
    500e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5012:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5014:	10 e0       	ldi	r17, 0x00	; 0
    5016:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1197
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
            lcd.print("Defaults loaded");
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    501a:	81 e0       	ldi	r24, 0x01	; 1
    501c:	11 3c       	cpi	r17, 0xC1	; 193
    501e:	09 f0       	breq	.+2      	; 0x5022 <main+0x2720>
    5020:	80 e0       	ldi	r24, 0x00	; 0
main():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5022:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:645
    byte configChanged = false;
    5024:	e1 2c       	mov	r14, r1
    5026:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
    502a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    502c:	10 e0       	ldi	r17, 0x00	; 0
    502e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5032:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5034:	10 e0       	ldi	r17, 0x00	; 0
    5036:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    503a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    503c:	10 e0       	ldi	r17, 0x00	; 0
    503e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5042:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5044:	10 e0       	ldi	r17, 0x00	; 0
    5046:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    504a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    504c:	10 e0       	ldi	r17, 0x00	; 0
    504e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5052:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5054:	10 e0       	ldi	r17, 0x00	; 0
    5056:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    505a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    505c:	10 e0       	ldi	r17, 0x00	; 0
    505e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5062:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5064:	10 e0       	ldi	r17, 0x00	; 0
    5066:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    506a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    506c:	10 e0       	ldi	r17, 0x00	; 0
    506e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5072:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5074:	10 e0       	ldi	r17, 0x00	; 0
    5076:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    507a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    507c:	10 e0       	ldi	r17, 0x00	; 0
    507e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5082:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5084:	10 e0       	ldi	r17, 0x00	; 0
    5086:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    508a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    508c:	10 e0       	ldi	r17, 0x00	; 0
    508e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5092:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5094:	10 e0       	ldi	r17, 0x00	; 0
    5096:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    509a:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    509c:	10 e0       	ldi	r17, 0x00	; 0
    509e:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50a2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50a4:	10 e0       	ldi	r17, 0x00	; 0
    50a6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50aa:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50ac:	10 e0       	ldi	r17, 0x00	; 0
    50ae:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50b2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50b4:	10 e0       	ldi	r17, 0x00	; 0
    50b6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50ba:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50bc:	10 e0       	ldi	r17, 0x00	; 0
    50be:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50c2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50c4:	10 e0       	ldi	r17, 0x00	; 0
    50c6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50ca:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50cc:	10 e0       	ldi	r17, 0x00	; 0
    50ce:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50d2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50d4:	10 e0       	ldi	r17, 0x00	; 0
    50d6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50da:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50dc:	10 e0       	ldi	r17, 0x00	; 0
    50de:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50e2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50e4:	10 e0       	ldi	r17, 0x00	; 0
    50e6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50ea:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50ec:	10 e0       	ldi	r17, 0x00	; 0
    50ee:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50f2:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50f4:	10 e0       	ldi	r17, 0x00	; 0
    50f6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    50fa:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50fc:	10 e0       	ldi	r17, 0x00	; 0
    50fe:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:851
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5102:	e1 2c       	mov	r14, r1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:644
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5104:	10 e0       	ldi	r17, 0x00	; 0
    5106:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x1604>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1211
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    510a:	ee 20       	and	r14, r14
    510c:	71 f0       	breq	.+28     	; 0x512a <main+0x2828>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1213
    {
        lcd.setCursor(1, 1);
    510e:	61 e0       	ldi	r22, 0x01	; 1
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1214
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    5116:	8d 2d       	mov	r24, r13
    5118:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Config::getFormattedStr(unsigned char) [clone .constprop.87]>
    511c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>
    5120:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
    5124:	e1 2c       	mov	r14, r1
    5126:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <main+0x162e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1218
    }
    else
    {
        if (millis() - timr_Time > 300)
    512a:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    512e:	80 90 20 03 	lds	r8, 0x0320	; 0x800320 <timr_Time>
    5132:	90 90 21 03 	lds	r9, 0x0321	; 0x800321 <timr_Time+0x1>
    5136:	a0 90 22 03 	lds	r10, 0x0322	; 0x800322 <timr_Time+0x2>
    513a:	b0 90 23 03 	lds	r11, 0x0323	; 0x800323 <timr_Time+0x3>
    513e:	68 19       	sub	r22, r8
    5140:	79 09       	sbc	r23, r9
    5142:	8a 09       	sbc	r24, r10
    5144:	9b 09       	sbc	r25, r11
    5146:	6d 32       	cpi	r22, 0x2D	; 45
    5148:	71 40       	sbci	r23, 0x01	; 1
    514a:	81 05       	cpc	r24, r1
    514c:	91 05       	cpc	r25, r1
    514e:	10 f4       	brcc	.+4      	; 0x5154 <main+0x2852>
    5150:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <main+0x162e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1220
        {
            if (blink)
    5154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    5158:	88 23       	and	r24, r24
    515a:	c9 f0       	breq	.+50     	; 0x518e <main+0x288c>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1222
            {
                lcd.setCursor(1, 1);
    515c:	61 e0       	ldi	r22, 0x01	; 1
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1223
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    5164:	8d 2d       	mov	r24, r13
    5166:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Config::getFormattedStr(unsigned char) [clone .constprop.87]>
    516a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <rpad(char*, char const*, char, unsigned char) [clone .constprop.92]>
    516e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Print::print(char const*) [clone .constprop.93]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1224
                blink = false;
    5172:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1255
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    5176:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
    517a:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timr_Time>
    517e:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timr_Time+0x1>
    5182:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timr_Time+0x2>
    5186:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timr_Time+0x3>
    518a:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <main+0x162e>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1228
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime ||
    518e:	b3 e0       	ldi	r27, 0x03	; 3
    5190:	db 16       	cp	r13, r27
    5192:	41 f0       	breq	.+16     	; 0x51a4 <main+0x28a2>
    5194:	8b ee       	ldi	r24, 0xEB	; 235
    5196:	8d 0d       	add	r24, r13
    5198:	82 30       	cpi	r24, 0x02	; 2
    519a:	20 f0       	brcs	.+8      	; 0x51a4 <main+0x28a2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1230
                    cmdId == mnuCmdLt1OnTime ||
                    cmdId == mnuCmdLt1OffTime ||
    519c:	88 ee       	ldi	r24, 0xE8	; 232
    519e:	8d 0d       	add	r24, r13
    51a0:	84 30       	cpi	r24, 0x04	; 4
    51a2:	a8 f4       	brcc	.+42     	; 0x51ce <main+0x28cc>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1236
                    cmdId == mnuCmdPlrMorOnTime ||
                    cmdId == mnuCmdPlrMorDur ||
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
    51a4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    51a8:	81 11       	cpse	r24, r1
    51aa:	0c c0       	rjmp	.+24     	; 0x51c4 <main+0x28c2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1237
                        lcd.setCursor(1, 1);
    51ac:	61 e0       	ldi	r22, 0x01	; 1
    51ae:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1239
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    51b0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1240
                    lcd.print(F("  "));
    51b4:	8e e3       	ldi	r24, 0x3E	; 62
    51b6:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1251
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    51b8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Print::print(__FlashStringHelper const*) [clone .constprop.57]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1252
                    blink = true;
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    51c2:	d9 cf       	rjmp	.-78     	; 0x5176 <main+0x2874>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1238
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    51c4:	81 30       	cpi	r24, 0x01	; 1
    51c6:	b1 f7       	brne	.-20     	; 0x51b4 <main+0x28b2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1239
                        lcd.setCursor(4, 1);
    51c8:	61 e0       	ldi	r22, 0x01	; 1
    51ca:	84 e0       	ldi	r24, 0x04	; 4
    51cc:	f1 cf       	rjmp	.-30     	; 0x51b0 <main+0x28ae>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1243
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    51ce:	e2 e0       	ldi	r30, 0x02	; 2
    51d0:	de 12       	cpse	r13, r30
    51d2:	d1 cf       	rjmp	.-94     	; 0x5176 <main+0x2874>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1245
                {
                    if (blinkMode == setDate)
    51d4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <blinkMode>
    51d8:	82 30       	cpi	r24, 0x02	; 2
    51da:	39 f4       	brne	.+14     	; 0x51ea <main+0x28e8>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1246
                        lcd.setCursor(1, 1);
    51dc:	61 e0       	ldi	r22, 0x01	; 1
    51de:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1250
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    51e0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.79]>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1251
                    lcd.print(F("  "));
    51e4:	8b e3       	ldi	r24, 0x3B	; 59
    51e6:	93 e0       	ldi	r25, 0x03	; 3
    51e8:	e7 cf       	rjmp	.-50     	; 0x51b8 <main+0x28b6>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1247
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    51ea:	83 30       	cpi	r24, 0x03	; 3
    51ec:	19 f4       	brne	.+6      	; 0x51f4 <main+0x28f2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1248
                        lcd.setCursor(4, 1);
    51ee:	61 e0       	ldi	r22, 0x01	; 1
    51f0:	84 e0       	ldi	r24, 0x04	; 4
    51f2:	f6 cf       	rjmp	.-20     	; 0x51e0 <main+0x28de>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1249
                    if (blinkMode == setYear)
    51f4:	84 30       	cpi	r24, 0x04	; 4
    51f6:	b1 f7       	brne	.-20     	; 0x51e4 <main+0x28e2>
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1250
                        lcd.setCursor(9, 1);
    51f8:	61 e0       	ldi	r22, 0x01	; 1
    51fa:	89 e0       	ldi	r24, 0x09	; 9
    51fc:	f1 cf       	rjmp	.-30     	; 0x51e0 <main+0x28de>

000051fe <_GLOBAL__sub_D_CurTime>:
_GLOBAL__sub_D_CurTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1449
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    51fe:	cf 93       	push	r28
    5200:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:43
bool ButLongPress = false;
byte alarmMode = 0;
byte btn;
char strbuf[LCD_COLS + 1];

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    5202:	c9 ea       	ldi	r28, 0xA9	; 169
    5204:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    5206:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    5208:	88 81       	ld	r24, Y
    520a:	99 81       	ldd	r25, Y+1	; 0x01
    520c:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:43
    5210:	24 e0       	ldi	r18, 0x04	; 4
    5212:	c1 36       	cpi	r28, 0x61	; 97
    5214:	d2 07       	cpc	r29, r18
    5216:	b9 f7       	brne	.-18     	; 0x5206 <_GLOBAL__sub_D_CurTime+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    5218:	8e e5       	ldi	r24, 0x5E	; 94
    521a:	91 e0       	ldi	r25, 0x01	; 1
    521c:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <mySoftwareSerial+0x1>
    5220:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    5224:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <SoftwareSerial::active_object>
    5228:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <SoftwareSerial::active_object+0x1>
    522c:	81 5e       	subi	r24, 0xE1	; 225
    522e:	94 40       	sbci	r25, 0x04	; 4
    5230:	71 f4       	brne	.+28     	; 0x524e <_GLOBAL__sub_D_CurTime+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    5232:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <mySoftwareSerial+0x13>
    5236:	f0 91 f5 04 	lds	r31, 0x04F5	; 0x8004f5 <mySoftwareSerial+0x14>
    523a:	90 81       	ld	r25, Z
    523c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <mySoftwareSerial+0x15>
    5240:	80 95       	com	r24
    5242:	89 23       	and	r24, r25
    5244:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    5246:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <SoftwareSerial::active_object+0x1>
    524a:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <SoftwareSerial::active_object>
_GLOBAL__sub_D_CurTime():
e:\Arduino\Arduino Git\ChantBellV3.2/ChantBellV3.2.ino:1449
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    524e:	df 91       	pop	r29
    5250:	cf 91       	pop	r28
    5252:	08 95       	ret

00005254 <random_r>:
random_r():
    5254:	8f 92       	push	r8
    5256:	9f 92       	push	r9
    5258:	af 92       	push	r10
    525a:	bf 92       	push	r11
    525c:	cf 92       	push	r12
    525e:	df 92       	push	r13
    5260:	ef 92       	push	r14
    5262:	ff 92       	push	r15
    5264:	cf 93       	push	r28
    5266:	df 93       	push	r29
    5268:	ec 01       	movw	r28, r24
    526a:	68 81       	ld	r22, Y
    526c:	79 81       	ldd	r23, Y+1	; 0x01
    526e:	8a 81       	ldd	r24, Y+2	; 0x02
    5270:	9b 81       	ldd	r25, Y+3	; 0x03
    5272:	61 15       	cp	r22, r1
    5274:	71 05       	cpc	r23, r1
    5276:	81 05       	cpc	r24, r1
    5278:	91 05       	cpc	r25, r1
    527a:	21 f4       	brne	.+8      	; 0x5284 <random_r+0x30>
    527c:	64 e2       	ldi	r22, 0x24	; 36
    527e:	79 ed       	ldi	r23, 0xD9	; 217
    5280:	8b e5       	ldi	r24, 0x5B	; 91
    5282:	97 e0       	ldi	r25, 0x07	; 7
    5284:	2d e1       	ldi	r18, 0x1D	; 29
    5286:	33 ef       	ldi	r19, 0xF3	; 243
    5288:	41 e0       	ldi	r20, 0x01	; 1
    528a:	50 e0       	ldi	r21, 0x00	; 0
    528c:	0e 94 32 2a 	call	0x5464	; 0x5464 <__divmodsi4>
    5290:	49 01       	movw	r8, r18
    5292:	5a 01       	movw	r10, r20
    5294:	9b 01       	movw	r18, r22
    5296:	ac 01       	movw	r20, r24
    5298:	a7 ea       	ldi	r26, 0xA7	; 167
    529a:	b1 e4       	ldi	r27, 0x41	; 65
    529c:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__muluhisi3>
    52a0:	6b 01       	movw	r12, r22
    52a2:	7c 01       	movw	r14, r24
    52a4:	ac ee       	ldi	r26, 0xEC	; 236
    52a6:	b4 ef       	ldi	r27, 0xF4	; 244
    52a8:	a5 01       	movw	r20, r10
    52aa:	94 01       	movw	r18, r8
    52ac:	0e 94 5f 2a 	call	0x54be	; 0x54be <__mulohisi3>
    52b0:	c6 0e       	add	r12, r22
    52b2:	d7 1e       	adc	r13, r23
    52b4:	e8 1e       	adc	r14, r24
    52b6:	f9 1e       	adc	r15, r25
    52b8:	f7 fe       	sbrs	r15, 7
    52ba:	06 c0       	rjmp	.+12     	; 0x52c8 <random_r+0x74>
    52bc:	81 e0       	ldi	r24, 0x01	; 1
    52be:	c8 1a       	sub	r12, r24
    52c0:	d1 08       	sbc	r13, r1
    52c2:	e1 08       	sbc	r14, r1
    52c4:	80 e8       	ldi	r24, 0x80	; 128
    52c6:	f8 0a       	sbc	r15, r24
    52c8:	c8 82       	st	Y, r12
    52ca:	d9 82       	std	Y+1, r13	; 0x01
    52cc:	ea 82       	std	Y+2, r14	; 0x02
    52ce:	fb 82       	std	Y+3, r15	; 0x03
    52d0:	c7 01       	movw	r24, r14
    52d2:	b6 01       	movw	r22, r12
    52d4:	9f 77       	andi	r25, 0x7F	; 127
    52d6:	df 91       	pop	r29
    52d8:	cf 91       	pop	r28
    52da:	ff 90       	pop	r15
    52dc:	ef 90       	pop	r14
    52de:	df 90       	pop	r13
    52e0:	cf 90       	pop	r12
    52e2:	bf 90       	pop	r11
    52e4:	af 90       	pop	r10
    52e6:	9f 90       	pop	r9
    52e8:	8f 90       	pop	r8
    52ea:	08 95       	ret

000052ec <random>:
random():
    52ec:	8f 92       	push	r8
    52ee:	9f 92       	push	r9
    52f0:	af 92       	push	r10
    52f2:	bf 92       	push	r11
    52f4:	cf 92       	push	r12
    52f6:	df 92       	push	r13
    52f8:	ef 92       	push	r14
    52fa:	ff 92       	push	r15
    52fc:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <next>
    5300:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <next+0x1>
    5304:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <next+0x2>
    5308:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <next+0x3>
    530c:	61 15       	cp	r22, r1
    530e:	71 05       	cpc	r23, r1
    5310:	81 05       	cpc	r24, r1
    5312:	91 05       	cpc	r25, r1
    5314:	21 f4       	brne	.+8      	; 0x531e <random+0x32>
    5316:	64 e2       	ldi	r22, 0x24	; 36
    5318:	79 ed       	ldi	r23, 0xD9	; 217
    531a:	8b e5       	ldi	r24, 0x5B	; 91
    531c:	97 e0       	ldi	r25, 0x07	; 7
    531e:	2d e1       	ldi	r18, 0x1D	; 29
    5320:	33 ef       	ldi	r19, 0xF3	; 243
    5322:	41 e0       	ldi	r20, 0x01	; 1
    5324:	50 e0       	ldi	r21, 0x00	; 0
    5326:	0e 94 32 2a 	call	0x5464	; 0x5464 <__divmodsi4>
    532a:	49 01       	movw	r8, r18
    532c:	5a 01       	movw	r10, r20
    532e:	9b 01       	movw	r18, r22
    5330:	ac 01       	movw	r20, r24
    5332:	a7 ea       	ldi	r26, 0xA7	; 167
    5334:	b1 e4       	ldi	r27, 0x41	; 65
    5336:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__muluhisi3>
    533a:	6b 01       	movw	r12, r22
    533c:	7c 01       	movw	r14, r24
    533e:	ac ee       	ldi	r26, 0xEC	; 236
    5340:	b4 ef       	ldi	r27, 0xF4	; 244
    5342:	a5 01       	movw	r20, r10
    5344:	94 01       	movw	r18, r8
    5346:	0e 94 5f 2a 	call	0x54be	; 0x54be <__mulohisi3>
    534a:	c6 0e       	add	r12, r22
    534c:	d7 1e       	adc	r13, r23
    534e:	e8 1e       	adc	r14, r24
    5350:	f9 1e       	adc	r15, r25
    5352:	f7 fe       	sbrs	r15, 7
    5354:	06 c0       	rjmp	.+12     	; 0x5362 <random+0x76>
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	c8 1a       	sub	r12, r24
    535a:	d1 08       	sbc	r13, r1
    535c:	e1 08       	sbc	r14, r1
    535e:	80 e8       	ldi	r24, 0x80	; 128
    5360:	f8 0a       	sbc	r15, r24
    5362:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <next>
    5366:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <next+0x1>
    536a:	e0 92 07 01 	sts	0x0107, r14	; 0x800107 <next+0x2>
    536e:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <next+0x3>
    5372:	c7 01       	movw	r24, r14
    5374:	b6 01       	movw	r22, r12
    5376:	9f 77       	andi	r25, 0x7F	; 127
    5378:	ff 90       	pop	r15
    537a:	ef 90       	pop	r14
    537c:	df 90       	pop	r13
    537e:	cf 90       	pop	r12
    5380:	bf 90       	pop	r11
    5382:	af 90       	pop	r10
    5384:	9f 90       	pop	r9
    5386:	8f 90       	pop	r8
    5388:	08 95       	ret

0000538a <srandom>:
srandom():
    538a:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <next>
    538e:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <next+0x1>
    5392:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next+0x2>
    5396:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x3>
    539a:	08 95       	ret

0000539c <strcpy_P>:
strcpy_P():
    539c:	fb 01       	movw	r30, r22
    539e:	dc 01       	movw	r26, r24
    53a0:	05 90       	lpm	r0, Z+
    53a2:	0d 92       	st	X+, r0
    53a4:	00 20       	and	r0, r0
    53a6:	e1 f7       	brne	.-8      	; 0x53a0 <strcpy_P+0x4>
    53a8:	08 95       	ret

000053aa <__itoa_ncheck>:
__itoa_ncheck():
    53aa:	bb 27       	eor	r27, r27
    53ac:	4a 30       	cpi	r20, 0x0A	; 10
    53ae:	31 f4       	brne	.+12     	; 0x53bc <__itoa_ncheck+0x12>
    53b0:	99 23       	and	r25, r25
    53b2:	22 f4       	brpl	.+8      	; 0x53bc <__itoa_ncheck+0x12>
    53b4:	bd e2       	ldi	r27, 0x2D	; 45
    53b6:	90 95       	com	r25
    53b8:	81 95       	neg	r24
    53ba:	9f 4f       	sbci	r25, 0xFF	; 255
    53bc:	0c 94 e1 29 	jmp	0x53c2	; 0x53c2 <__utoa_common>

000053c0 <__utoa_ncheck>:
__utoa_ncheck():
    53c0:	bb 27       	eor	r27, r27

000053c2 <__utoa_common>:
    53c2:	fb 01       	movw	r30, r22
    53c4:	55 27       	eor	r21, r21
    53c6:	aa 27       	eor	r26, r26
    53c8:	88 0f       	add	r24, r24
    53ca:	99 1f       	adc	r25, r25
    53cc:	aa 1f       	adc	r26, r26
    53ce:	a4 17       	cp	r26, r20
    53d0:	10 f0       	brcs	.+4      	; 0x53d6 <__utoa_common+0x14>
    53d2:	a4 1b       	sub	r26, r20
    53d4:	83 95       	inc	r24
    53d6:	50 51       	subi	r21, 0x10	; 16
    53d8:	b9 f7       	brne	.-18     	; 0x53c8 <__utoa_common+0x6>
    53da:	a0 5d       	subi	r26, 0xD0	; 208
    53dc:	aa 33       	cpi	r26, 0x3A	; 58
    53de:	08 f0       	brcs	.+2      	; 0x53e2 <__utoa_common+0x20>
    53e0:	a9 5d       	subi	r26, 0xD9	; 217
    53e2:	a1 93       	st	Z+, r26
    53e4:	00 97       	sbiw	r24, 0x00	; 0
    53e6:	79 f7       	brne	.-34     	; 0x53c6 <__utoa_common+0x4>
    53e8:	b1 11       	cpse	r27, r1
    53ea:	b1 93       	st	Z+, r27
    53ec:	11 92       	st	Z+, r1
    53ee:	cb 01       	movw	r24, r22
    53f0:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <strrev>

000053f4 <strrev>:
strrev():
    53f4:	dc 01       	movw	r26, r24
    53f6:	fc 01       	movw	r30, r24
    53f8:	67 2f       	mov	r22, r23
    53fa:	71 91       	ld	r23, Z+
    53fc:	77 23       	and	r23, r23
    53fe:	e1 f7       	brne	.-8      	; 0x53f8 <strrev+0x4>
    5400:	32 97       	sbiw	r30, 0x02	; 2
    5402:	04 c0       	rjmp	.+8      	; 0x540c <strrev+0x18>
    5404:	7c 91       	ld	r23, X
    5406:	6d 93       	st	X+, r22
    5408:	70 83       	st	Z, r23
    540a:	62 91       	ld	r22, -Z
    540c:	ae 17       	cp	r26, r30
    540e:	bf 07       	cpc	r27, r31
    5410:	c8 f3       	brcs	.-14     	; 0x5404 <strrev+0x10>
    5412:	08 95       	ret

00005414 <eeprom_read_block>:
eeprom_read_block():
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22

00005418 <eeprom_read_blraw>:
    5418:	fc 01       	movw	r30, r24
    541a:	f9 99       	sbic	0x1f, 1	; 31
    541c:	fe cf       	rjmp	.-4      	; 0x541a <eeprom_read_blraw+0x2>
    541e:	06 c0       	rjmp	.+12     	; 0x542c <eeprom_read_blraw+0x14>
    5420:	f2 bd       	out	0x22, r31	; 34
    5422:	e1 bd       	out	0x21, r30	; 33
    5424:	f8 9a       	sbi	0x1f, 0	; 31
    5426:	31 96       	adiw	r30, 0x01	; 1
    5428:	00 b4       	in	r0, 0x20	; 32
    542a:	0d 92       	st	X+, r0
    542c:	41 50       	subi	r20, 0x01	; 1
    542e:	50 40       	sbci	r21, 0x00	; 0
    5430:	b8 f7       	brcc	.-18     	; 0x5420 <eeprom_read_blraw+0x8>
    5432:	08 95       	ret

00005434 <eeprom_write_block>:
eeprom_write_block():
    5434:	dc 01       	movw	r26, r24
    5436:	cb 01       	movw	r24, r22
    5438:	03 c0       	rjmp	.+6      	; 0x5440 <eeprom_write_block+0xc>
    543a:	2d 91       	ld	r18, X+
    543c:	0e 94 25 2a 	call	0x544a	; 0x544a <eeprom_write_r18>
    5440:	41 50       	subi	r20, 0x01	; 1
    5442:	50 40       	sbci	r21, 0x00	; 0
    5444:	d0 f7       	brcc	.-12     	; 0x543a <eeprom_write_block+0x6>
    5446:	08 95       	ret

00005448 <eeprom_write_byte>:
eeprom_write_byte():
    5448:	26 2f       	mov	r18, r22

0000544a <eeprom_write_r18>:
    544a:	f9 99       	sbic	0x1f, 1	; 31
    544c:	fe cf       	rjmp	.-4      	; 0x544a <eeprom_write_r18>
    544e:	1f ba       	out	0x1f, r1	; 31
    5450:	92 bd       	out	0x22, r25	; 34
    5452:	81 bd       	out	0x21, r24	; 33
    5454:	20 bd       	out	0x20, r18	; 32
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	f8 94       	cli
    545a:	fa 9a       	sbi	0x1f, 2	; 31
    545c:	f9 9a       	sbi	0x1f, 1	; 31
    545e:	0f be       	out	0x3f, r0	; 63
    5460:	01 96       	adiw	r24, 0x01	; 1
    5462:	08 95       	ret

00005464 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5464:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5466:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5468:	1e f4       	brtc	.+6      	; 0x5470 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    546a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    546c:	0e 94 49 2a 	call	0x5492	; 0x5492 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    5470:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5472:	07 d0       	rcall	.+14     	; 0x5482 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5474:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5478:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    547a:	03 d0       	rcall	.+6      	; 0x5482 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    547c:	4e f4       	brtc	.+18     	; 0x5490 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    547e:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__negsi2>

00005482 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5482:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5484:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5486:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5488:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    548a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    548c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    548e:	5f 4f       	sbci	r21, 0xFF	; 255

00005490 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    5490:	08 95       	ret

00005492 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5492:	90 95       	com	r25
    5494:	80 95       	com	r24
    5496:	70 95       	com	r23
    5498:	61 95       	neg	r22
    549a:	7f 4f       	sbci	r23, 0xFF	; 255
    549c:	8f 4f       	sbci	r24, 0xFF	; 255
    549e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    54a0:	08 95       	ret

000054a2 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    54a2:	0e 94 bd 2a 	call	0x557a	; 0x557a <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    54a6:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    54a8:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    54aa:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    54ac:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    54ae:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    54b0:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    54b2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    54b4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    54b6:	08 95       	ret

000054b8 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    54b8:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    54ba:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__muluhisi3>

000054be <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    54be:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    54c2:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    54c4:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    54c6:	08 95       	ret

000054c8 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    54c8:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    54ca:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    54cc:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    54ce:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    54d0:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    54d2:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    54d4:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    54d6:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    54d8:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    54da:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    54dc:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    54de:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    54e0:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    54e2:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    54e4:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    54e6:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    54e8:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    54ea:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    54ec:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    54ee:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    54f0:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    54f2:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    54f4:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    54f6:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    54f8:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    54fa:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    54fc:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    54fe:	09 94       	ijmp

00005500 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    5500:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    5502:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    5504:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    5506:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    5508:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    550a:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    550c:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    550e:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    5510:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    5512:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    5514:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    5516:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    5518:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    551a:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    551c:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    551e:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    5520:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    5522:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    5524:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    5526:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    5528:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    552a:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    552c:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    552e:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    5530:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    5532:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    5534:	08 95       	ret

00005536 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    5536:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    5538:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    553a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    553c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    553e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    5540:	0d c0       	rjmp	.+26     	; 0x555c <__udivmodsi4_ep>

00005542 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    5542:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    5544:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    5546:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    5548:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    554a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    554c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    554e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    5550:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    5552:	20 f0       	brcs	.+8      	; 0x555c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    5554:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    5556:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    5558:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    555a:	f5 0b       	sbc	r31, r21

0000555c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    555c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    555e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    5560:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5562:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    5564:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5566:	69 f7       	brne	.-38     	; 0x5542 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5568:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    556a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    556c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    556e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5570:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5572:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5574:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5576:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5578:	08 95       	ret

0000557a <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    557a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    557c:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    557e:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    5580:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5582:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5584:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5586:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5588:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    558a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    558c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    558e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    5590:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    5592:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    5594:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5596:	08 95       	ret

00005598 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    5598:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    559a:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    559c:	04 c0       	rjmp	.+8      	; 0x55a6 <__udivmodqi4_ep>

0000559e <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    559e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    55a0:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    55a2:	08 f0       	brcs	.+2      	; 0x55a6 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    55a4:	96 1b       	sub	r25, r22

000055a6 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    55a6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    55a8:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    55aa:	c9 f7       	brne	.-14     	; 0x559e <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    55ac:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    55ae:	08 95       	ret

000055b0 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    55b0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    55b2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    55b4:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    55b6:	07 c0       	rjmp	.+14     	; 0x55c6 <__udivmodhi4_ep>

000055b8 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    55b8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    55ba:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    55bc:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    55be:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    55c0:	10 f0       	brcs	.+4      	; 0x55c6 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    55c2:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    55c4:	b7 0b       	sbc	r27, r23

000055c6 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    55c6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    55c8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    55ca:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    55cc:	a9 f7       	brne	.-22     	; 0x55b8 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    55ce:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    55d0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    55d2:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    55d4:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    55d6:	08 95       	ret

000055d8 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    55d8:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    55da:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    55dc:	16 f4       	brtc	.+4      	; 0x55e2 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    55de:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    55e0:	07 d0       	rcall	.+14     	; 0x55f0 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    55e2:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    55e4:	09 d0       	rcall	.+18     	; 0x55f8 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    55e6:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    55ea:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    55ec:	05 d0       	rcall	.+10     	; 0x55f8 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    55ee:	3e f4       	brtc	.+14     	; 0x55fe <__divmodhi4_exit>

000055f0 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    55f0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    55f2:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    55f4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    55f6:	08 95       	ret

000055f8 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    55f8:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    55fa:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    55fc:	7f 4f       	sbci	r23, 0xFF	; 255

000055fe <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    55fe:	08 95       	ret

00005600 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    5600:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    5602:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    5604:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    5606:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    5608:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    560a:	09 94       	ijmp

0000560c <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    560c:	0e 94 bd 2a 	call	0x557a	; 0x557a <__umulhisi3>

00005610 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    5610:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    5612:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    5614:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    5616:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    5618:	08 95       	ret

0000561a <malloc>:
malloc():
    561a:	0f 93       	push	r16
    561c:	1f 93       	push	r17
    561e:	cf 93       	push	r28
    5620:	df 93       	push	r29
    5622:	82 30       	cpi	r24, 0x02	; 2
    5624:	91 05       	cpc	r25, r1
    5626:	10 f4       	brcc	.+4      	; 0x562c <malloc+0x12>
    5628:	82 e0       	ldi	r24, 0x02	; 2
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <__flp>
    5630:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <__flp+0x1>
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	b0 e0       	ldi	r27, 0x00	; 0
    563a:	a0 e0       	ldi	r26, 0x00	; 0
    563c:	30 97       	sbiw	r30, 0x00	; 0
    563e:	99 f4       	brne	.+38     	; 0x5666 <malloc+0x4c>
    5640:	21 15       	cp	r18, r1
    5642:	31 05       	cpc	r19, r1
    5644:	09 f4       	brne	.+2      	; 0x5648 <malloc+0x2e>
    5646:	4a c0       	rjmp	.+148    	; 0x56dc <malloc+0xc2>
    5648:	28 1b       	sub	r18, r24
    564a:	39 0b       	sbc	r19, r25
    564c:	24 30       	cpi	r18, 0x04	; 4
    564e:	31 05       	cpc	r19, r1
    5650:	d8 f5       	brcc	.+118    	; 0x56c8 <malloc+0xae>
    5652:	8a 81       	ldd	r24, Y+2	; 0x02
    5654:	9b 81       	ldd	r25, Y+3	; 0x03
    5656:	61 15       	cp	r22, r1
    5658:	71 05       	cpc	r23, r1
    565a:	89 f1       	breq	.+98     	; 0x56be <malloc+0xa4>
    565c:	fb 01       	movw	r30, r22
    565e:	93 83       	std	Z+3, r25	; 0x03
    5660:	82 83       	std	Z+2, r24	; 0x02
    5662:	fe 01       	movw	r30, r28
    5664:	11 c0       	rjmp	.+34     	; 0x5688 <malloc+0x6e>
    5666:	40 81       	ld	r20, Z
    5668:	51 81       	ldd	r21, Z+1	; 0x01
    566a:	02 81       	ldd	r16, Z+2	; 0x02
    566c:	13 81       	ldd	r17, Z+3	; 0x03
    566e:	48 17       	cp	r20, r24
    5670:	59 07       	cpc	r21, r25
    5672:	e0 f0       	brcs	.+56     	; 0x56ac <malloc+0x92>
    5674:	48 17       	cp	r20, r24
    5676:	59 07       	cpc	r21, r25
    5678:	99 f4       	brne	.+38     	; 0x56a0 <malloc+0x86>
    567a:	10 97       	sbiw	r26, 0x00	; 0
    567c:	61 f0       	breq	.+24     	; 0x5696 <malloc+0x7c>
    567e:	12 96       	adiw	r26, 0x02	; 2
    5680:	0c 93       	st	X, r16
    5682:	12 97       	sbiw	r26, 0x02	; 2
    5684:	13 96       	adiw	r26, 0x03	; 3
    5686:	1c 93       	st	X, r17
    5688:	32 96       	adiw	r30, 0x02	; 2
    568a:	cf 01       	movw	r24, r30
    568c:	df 91       	pop	r29
    568e:	cf 91       	pop	r28
    5690:	1f 91       	pop	r17
    5692:	0f 91       	pop	r16
    5694:	08 95       	ret
    5696:	00 93 02 05 	sts	0x0502, r16	; 0x800502 <__flp>
    569a:	10 93 03 05 	sts	0x0503, r17	; 0x800503 <__flp+0x1>
    569e:	f4 cf       	rjmp	.-24     	; 0x5688 <malloc+0x6e>
    56a0:	21 15       	cp	r18, r1
    56a2:	31 05       	cpc	r19, r1
    56a4:	51 f0       	breq	.+20     	; 0x56ba <malloc+0xa0>
    56a6:	42 17       	cp	r20, r18
    56a8:	53 07       	cpc	r21, r19
    56aa:	38 f0       	brcs	.+14     	; 0x56ba <malloc+0xa0>
    56ac:	a9 01       	movw	r20, r18
    56ae:	db 01       	movw	r26, r22
    56b0:	9a 01       	movw	r18, r20
    56b2:	bd 01       	movw	r22, r26
    56b4:	df 01       	movw	r26, r30
    56b6:	f8 01       	movw	r30, r16
    56b8:	c1 cf       	rjmp	.-126    	; 0x563c <malloc+0x22>
    56ba:	ef 01       	movw	r28, r30
    56bc:	f9 cf       	rjmp	.-14     	; 0x56b0 <malloc+0x96>
    56be:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <__flp+0x1>
    56c2:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <__flp>
    56c6:	cd cf       	rjmp	.-102    	; 0x5662 <malloc+0x48>
    56c8:	fe 01       	movw	r30, r28
    56ca:	e2 0f       	add	r30, r18
    56cc:	f3 1f       	adc	r31, r19
    56ce:	81 93       	st	Z+, r24
    56d0:	91 93       	st	Z+, r25
    56d2:	22 50       	subi	r18, 0x02	; 2
    56d4:	31 09       	sbc	r19, r1
    56d6:	39 83       	std	Y+1, r19	; 0x01
    56d8:	28 83       	st	Y, r18
    56da:	d7 cf       	rjmp	.-82     	; 0x568a <malloc+0x70>
    56dc:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <__brkval>
    56e0:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <__brkval+0x1>
    56e4:	23 2b       	or	r18, r19
    56e6:	41 f4       	brne	.+16     	; 0x56f8 <malloc+0xde>
    56e8:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_start>
    56ec:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_start+0x1>
    56f0:	30 93 01 05 	sts	0x0501, r19	; 0x800501 <__brkval+0x1>
    56f4:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <__brkval>
    56f8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_end>
    56fc:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    5700:	21 15       	cp	r18, r1
    5702:	31 05       	cpc	r19, r1
    5704:	41 f4       	brne	.+16     	; 0x5716 <malloc+0xfc>
    5706:	2d b7       	in	r18, 0x3d	; 61
    5708:	3e b7       	in	r19, 0x3e	; 62
    570a:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    570e:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    5712:	24 1b       	sub	r18, r20
    5714:	35 0b       	sbc	r19, r21
    5716:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <__brkval>
    571a:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <__brkval+0x1>
    571e:	e2 17       	cp	r30, r18
    5720:	f3 07       	cpc	r31, r19
    5722:	a0 f4       	brcc	.+40     	; 0x574c <malloc+0x132>
    5724:	2e 1b       	sub	r18, r30
    5726:	3f 0b       	sbc	r19, r31
    5728:	28 17       	cp	r18, r24
    572a:	39 07       	cpc	r19, r25
    572c:	78 f0       	brcs	.+30     	; 0x574c <malloc+0x132>
    572e:	ac 01       	movw	r20, r24
    5730:	4e 5f       	subi	r20, 0xFE	; 254
    5732:	5f 4f       	sbci	r21, 0xFF	; 255
    5734:	24 17       	cp	r18, r20
    5736:	35 07       	cpc	r19, r21
    5738:	48 f0       	brcs	.+18     	; 0x574c <malloc+0x132>
    573a:	4e 0f       	add	r20, r30
    573c:	5f 1f       	adc	r21, r31
    573e:	50 93 01 05 	sts	0x0501, r21	; 0x800501 <__brkval+0x1>
    5742:	40 93 00 05 	sts	0x0500, r20	; 0x800500 <__brkval>
    5746:	81 93       	st	Z+, r24
    5748:	91 93       	st	Z+, r25
    574a:	9f cf       	rjmp	.-194    	; 0x568a <malloc+0x70>
    574c:	f0 e0       	ldi	r31, 0x00	; 0
    574e:	e0 e0       	ldi	r30, 0x00	; 0
    5750:	9c cf       	rjmp	.-200    	; 0x568a <malloc+0x70>

00005752 <free>:
free():
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	00 97       	sbiw	r24, 0x00	; 0
    5758:	e9 f0       	breq	.+58     	; 0x5794 <free+0x42>
    575a:	fc 01       	movw	r30, r24
    575c:	32 97       	sbiw	r30, 0x02	; 2
    575e:	13 82       	std	Z+3, r1	; 0x03
    5760:	12 82       	std	Z+2, r1	; 0x02
    5762:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <__flp>
    5766:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <__flp+0x1>
    576a:	ed 01       	movw	r28, r26
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	20 e0       	ldi	r18, 0x00	; 0
    5770:	10 97       	sbiw	r26, 0x00	; 0
    5772:	a1 f4       	brne	.+40     	; 0x579c <free+0x4a>
    5774:	20 81       	ld	r18, Z
    5776:	31 81       	ldd	r19, Z+1	; 0x01
    5778:	82 0f       	add	r24, r18
    577a:	93 1f       	adc	r25, r19
    577c:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <__brkval>
    5780:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <__brkval+0x1>
    5784:	28 17       	cp	r18, r24
    5786:	39 07       	cpc	r19, r25
    5788:	09 f0       	breq	.+2      	; 0x578c <free+0x3a>
    578a:	61 c0       	rjmp	.+194    	; 0x584e <free+0xfc>
    578c:	f0 93 01 05 	sts	0x0501, r31	; 0x800501 <__brkval+0x1>
    5790:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <__brkval>
    5794:	df 91       	pop	r29
    5796:	cf 91       	pop	r28
    5798:	08 95       	ret
    579a:	ea 01       	movw	r28, r20
    579c:	ce 17       	cp	r28, r30
    579e:	df 07       	cpc	r29, r31
    57a0:	e8 f5       	brcc	.+122    	; 0x581c <free+0xca>
    57a2:	4a 81       	ldd	r20, Y+2	; 0x02
    57a4:	5b 81       	ldd	r21, Y+3	; 0x03
    57a6:	9e 01       	movw	r18, r28
    57a8:	41 15       	cp	r20, r1
    57aa:	51 05       	cpc	r21, r1
    57ac:	b1 f7       	brne	.-20     	; 0x579a <free+0x48>
    57ae:	e9 01       	movw	r28, r18
    57b0:	fb 83       	std	Y+3, r31	; 0x03
    57b2:	ea 83       	std	Y+2, r30	; 0x02
    57b4:	49 91       	ld	r20, Y+
    57b6:	59 91       	ld	r21, Y+
    57b8:	c4 0f       	add	r28, r20
    57ba:	d5 1f       	adc	r29, r21
    57bc:	ec 17       	cp	r30, r28
    57be:	fd 07       	cpc	r31, r29
    57c0:	61 f4       	brne	.+24     	; 0x57da <free+0x88>
    57c2:	80 81       	ld	r24, Z
    57c4:	91 81       	ldd	r25, Z+1	; 0x01
    57c6:	02 96       	adiw	r24, 0x02	; 2
    57c8:	84 0f       	add	r24, r20
    57ca:	95 1f       	adc	r25, r21
    57cc:	e9 01       	movw	r28, r18
    57ce:	99 83       	std	Y+1, r25	; 0x01
    57d0:	88 83       	st	Y, r24
    57d2:	82 81       	ldd	r24, Z+2	; 0x02
    57d4:	93 81       	ldd	r25, Z+3	; 0x03
    57d6:	9b 83       	std	Y+3, r25	; 0x03
    57d8:	8a 83       	std	Y+2, r24	; 0x02
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	e0 e0       	ldi	r30, 0x00	; 0
    57de:	12 96       	adiw	r26, 0x02	; 2
    57e0:	8d 91       	ld	r24, X+
    57e2:	9c 91       	ld	r25, X
    57e4:	13 97       	sbiw	r26, 0x03	; 3
    57e6:	00 97       	sbiw	r24, 0x00	; 0
    57e8:	b9 f5       	brne	.+110    	; 0x5858 <free+0x106>
    57ea:	2d 91       	ld	r18, X+
    57ec:	3c 91       	ld	r19, X
    57ee:	11 97       	sbiw	r26, 0x01	; 1
    57f0:	cd 01       	movw	r24, r26
    57f2:	02 96       	adiw	r24, 0x02	; 2
    57f4:	82 0f       	add	r24, r18
    57f6:	93 1f       	adc	r25, r19
    57f8:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <__brkval>
    57fc:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <__brkval+0x1>
    5800:	28 17       	cp	r18, r24
    5802:	39 07       	cpc	r19, r25
    5804:	39 f6       	brne	.-114    	; 0x5794 <free+0x42>
    5806:	30 97       	sbiw	r30, 0x00	; 0
    5808:	51 f5       	brne	.+84     	; 0x585e <free+0x10c>
    580a:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <__flp+0x1>
    580e:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <__flp>
    5812:	b0 93 01 05 	sts	0x0501, r27	; 0x800501 <__brkval+0x1>
    5816:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <__brkval>
    581a:	bc cf       	rjmp	.-136    	; 0x5794 <free+0x42>
    581c:	d3 83       	std	Z+3, r29	; 0x03
    581e:	c2 83       	std	Z+2, r28	; 0x02
    5820:	40 81       	ld	r20, Z
    5822:	51 81       	ldd	r21, Z+1	; 0x01
    5824:	84 0f       	add	r24, r20
    5826:	95 1f       	adc	r25, r21
    5828:	c8 17       	cp	r28, r24
    582a:	d9 07       	cpc	r29, r25
    582c:	61 f4       	brne	.+24     	; 0x5846 <free+0xf4>
    582e:	4e 5f       	subi	r20, 0xFE	; 254
    5830:	5f 4f       	sbci	r21, 0xFF	; 255
    5832:	88 81       	ld	r24, Y
    5834:	99 81       	ldd	r25, Y+1	; 0x01
    5836:	48 0f       	add	r20, r24
    5838:	59 1f       	adc	r21, r25
    583a:	51 83       	std	Z+1, r21	; 0x01
    583c:	40 83       	st	Z, r20
    583e:	8a 81       	ldd	r24, Y+2	; 0x02
    5840:	9b 81       	ldd	r25, Y+3	; 0x03
    5842:	93 83       	std	Z+3, r25	; 0x03
    5844:	82 83       	std	Z+2, r24	; 0x02
    5846:	21 15       	cp	r18, r1
    5848:	31 05       	cpc	r19, r1
    584a:	09 f0       	breq	.+2      	; 0x584e <free+0xfc>
    584c:	b0 cf       	rjmp	.-160    	; 0x57ae <free+0x5c>
    584e:	f0 93 03 05 	sts	0x0503, r31	; 0x800503 <__flp+0x1>
    5852:	e0 93 02 05 	sts	0x0502, r30	; 0x800502 <__flp>
    5856:	9e cf       	rjmp	.-196    	; 0x5794 <free+0x42>
    5858:	fd 01       	movw	r30, r26
    585a:	dc 01       	movw	r26, r24
    585c:	c0 cf       	rjmp	.-128    	; 0x57de <free+0x8c>
    585e:	13 82       	std	Z+3, r1	; 0x03
    5860:	12 82       	std	Z+2, r1	; 0x02
    5862:	d7 cf       	rjmp	.-82     	; 0x5812 <free+0xc0>

00005864 <realloc>:
realloc():
    5864:	b0 e0       	ldi	r27, 0x00	; 0
    5866:	a0 e0       	ldi	r26, 0x00	; 0
    5868:	e8 e3       	ldi	r30, 0x38	; 56
    586a:	fc e2       	ldi	r31, 0x2C	; 44
    586c:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x4>
    5870:	8c 01       	movw	r16, r24
    5872:	00 97       	sbiw	r24, 0x00	; 0
    5874:	51 f4       	brne	.+20     	; 0x588a <realloc+0x26>
    5876:	cb 01       	movw	r24, r22
    5878:	0e 94 0d 2b 	call	0x561a	; 0x561a <malloc>
    587c:	8c 01       	movw	r16, r24
    587e:	c8 01       	movw	r24, r16
    5880:	cd b7       	in	r28, 0x3d	; 61
    5882:	de b7       	in	r29, 0x3e	; 62
    5884:	e0 e1       	ldi	r30, 0x10	; 16
    5886:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x4>
    588a:	fc 01       	movw	r30, r24
    588c:	e6 0f       	add	r30, r22
    588e:	f7 1f       	adc	r31, r23
    5890:	9c 01       	movw	r18, r24
    5892:	22 50       	subi	r18, 0x02	; 2
    5894:	31 09       	sbc	r19, r1
    5896:	e2 17       	cp	r30, r18
    5898:	f3 07       	cpc	r31, r19
    589a:	08 f4       	brcc	.+2      	; 0x589e <realloc+0x3a>
    589c:	9d c0       	rjmp	.+314    	; 0x59d8 <realloc+0x174>
    589e:	d9 01       	movw	r26, r18
    58a0:	cd 91       	ld	r28, X+
    58a2:	dc 91       	ld	r29, X
    58a4:	11 97       	sbiw	r26, 0x01	; 1
    58a6:	c6 17       	cp	r28, r22
    58a8:	d7 07       	cpc	r29, r23
    58aa:	98 f0       	brcs	.+38     	; 0x58d2 <realloc+0x6e>
    58ac:	c5 30       	cpi	r28, 0x05	; 5
    58ae:	d1 05       	cpc	r29, r1
    58b0:	30 f3       	brcs	.-52     	; 0x587e <realloc+0x1a>
    58b2:	ce 01       	movw	r24, r28
    58b4:	04 97       	sbiw	r24, 0x04	; 4
    58b6:	86 17       	cp	r24, r22
    58b8:	97 07       	cpc	r25, r23
    58ba:	08 f3       	brcs	.-62     	; 0x587e <realloc+0x1a>
    58bc:	c6 1b       	sub	r28, r22
    58be:	d7 0b       	sbc	r29, r23
    58c0:	22 97       	sbiw	r28, 0x02	; 2
    58c2:	c1 93       	st	Z+, r28
    58c4:	d1 93       	st	Z+, r29
    58c6:	6d 93       	st	X+, r22
    58c8:	7c 93       	st	X, r23
    58ca:	cf 01       	movw	r24, r30
    58cc:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
    58d0:	d6 cf       	rjmp	.-84     	; 0x587e <realloc+0x1a>
    58d2:	5b 01       	movw	r10, r22
    58d4:	ac 1a       	sub	r10, r28
    58d6:	bd 0a       	sbc	r11, r29
    58d8:	4c 01       	movw	r8, r24
    58da:	8c 0e       	add	r8, r28
    58dc:	9d 1e       	adc	r9, r29
    58de:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <__flp>
    58e2:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <__flp+0x1>
    58e6:	51 2c       	mov	r5, r1
    58e8:	41 2c       	mov	r4, r1
    58ea:	f1 2c       	mov	r15, r1
    58ec:	e1 2c       	mov	r14, r1
    58ee:	10 97       	sbiw	r26, 0x00	; 0
    58f0:	31 f5       	brne	.+76     	; 0x593e <realloc+0xda>
    58f2:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <__brkval>
    58f6:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <__brkval+0x1>
    58fa:	88 15       	cp	r24, r8
    58fc:	99 05       	cpc	r25, r9
    58fe:	09 f0       	breq	.+2      	; 0x5902 <realloc+0x9e>
    5900:	5c c0       	rjmp	.+184    	; 0x59ba <realloc+0x156>
    5902:	46 16       	cp	r4, r22
    5904:	57 06       	cpc	r5, r23
    5906:	08 f0       	brcs	.+2      	; 0x590a <realloc+0xa6>
    5908:	58 c0       	rjmp	.+176    	; 0x59ba <realloc+0x156>
    590a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__malloc_heap_end>
    590e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    5912:	00 97       	sbiw	r24, 0x00	; 0
    5914:	41 f4       	brne	.+16     	; 0x5926 <realloc+0xc2>
    5916:	8d b7       	in	r24, 0x3d	; 61
    5918:	9e b7       	in	r25, 0x3e	; 62
    591a:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    591e:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    5922:	84 1b       	sub	r24, r20
    5924:	95 0b       	sbc	r25, r21
    5926:	e8 17       	cp	r30, r24
    5928:	f9 07       	cpc	r31, r25
    592a:	08 f0       	brcs	.+2      	; 0x592e <realloc+0xca>
    592c:	55 c0       	rjmp	.+170    	; 0x59d8 <realloc+0x174>
    592e:	f0 93 01 05 	sts	0x0501, r31	; 0x800501 <__brkval+0x1>
    5932:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <__brkval>
    5936:	f9 01       	movw	r30, r18
    5938:	71 83       	std	Z+1, r23	; 0x01
    593a:	60 83       	st	Z, r22
    593c:	a0 cf       	rjmp	.-192    	; 0x587e <realloc+0x1a>
    593e:	8d 91       	ld	r24, X+
    5940:	9c 91       	ld	r25, X
    5942:	11 97       	sbiw	r26, 0x01	; 1
    5944:	12 96       	adiw	r26, 0x02	; 2
    5946:	6c 90       	ld	r6, X
    5948:	12 97       	sbiw	r26, 0x02	; 2
    594a:	13 96       	adiw	r26, 0x03	; 3
    594c:	7c 90       	ld	r7, X
    594e:	13 97       	sbiw	r26, 0x03	; 3
    5950:	a8 15       	cp	r26, r8
    5952:	b9 05       	cpc	r27, r9
    5954:	59 f5       	brne	.+86     	; 0x59ac <realloc+0x148>
    5956:	6c 01       	movw	r12, r24
    5958:	42 e0       	ldi	r20, 0x02	; 2
    595a:	c4 0e       	add	r12, r20
    595c:	d1 1c       	adc	r13, r1
    595e:	ca 14       	cp	r12, r10
    5960:	db 04       	cpc	r13, r11
    5962:	20 f1       	brcs	.+72     	; 0x59ac <realloc+0x148>
    5964:	ac 01       	movw	r20, r24
    5966:	4a 19       	sub	r20, r10
    5968:	5b 09       	sbc	r21, r11
    596a:	da 01       	movw	r26, r20
    596c:	12 96       	adiw	r26, 0x02	; 2
    596e:	15 97       	sbiw	r26, 0x05	; 5
    5970:	80 f0       	brcs	.+32     	; 0x5992 <realloc+0x12e>
    5972:	62 82       	std	Z+2, r6	; 0x02
    5974:	73 82       	std	Z+3, r7	; 0x03
    5976:	51 83       	std	Z+1, r21	; 0x01
    5978:	40 83       	st	Z, r20
    597a:	d9 01       	movw	r26, r18
    597c:	6d 93       	st	X+, r22
    597e:	7c 93       	st	X, r23
    5980:	e1 14       	cp	r14, r1
    5982:	f1 04       	cpc	r15, r1
    5984:	71 f0       	breq	.+28     	; 0x59a2 <realloc+0x13e>
    5986:	d7 01       	movw	r26, r14
    5988:	13 96       	adiw	r26, 0x03	; 3
    598a:	fc 93       	st	X, r31
    598c:	ee 93       	st	-X, r30
    598e:	12 97       	sbiw	r26, 0x02	; 2
    5990:	76 cf       	rjmp	.-276    	; 0x587e <realloc+0x1a>
    5992:	22 96       	adiw	r28, 0x02	; 2
    5994:	8c 0f       	add	r24, r28
    5996:	9d 1f       	adc	r25, r29
    5998:	f9 01       	movw	r30, r18
    599a:	91 83       	std	Z+1, r25	; 0x01
    599c:	80 83       	st	Z, r24
    599e:	f3 01       	movw	r30, r6
    59a0:	ef cf       	rjmp	.-34     	; 0x5980 <realloc+0x11c>
    59a2:	f0 93 03 05 	sts	0x0503, r31	; 0x800503 <__flp+0x1>
    59a6:	e0 93 02 05 	sts	0x0502, r30	; 0x800502 <__flp>
    59aa:	69 cf       	rjmp	.-302    	; 0x587e <realloc+0x1a>
    59ac:	48 16       	cp	r4, r24
    59ae:	59 06       	cpc	r5, r25
    59b0:	08 f4       	brcc	.+2      	; 0x59b4 <realloc+0x150>
    59b2:	2c 01       	movw	r4, r24
    59b4:	7d 01       	movw	r14, r26
    59b6:	d3 01       	movw	r26, r6
    59b8:	9a cf       	rjmp	.-204    	; 0x58ee <realloc+0x8a>
    59ba:	cb 01       	movw	r24, r22
    59bc:	0e 94 0d 2b 	call	0x561a	; 0x561a <malloc>
    59c0:	7c 01       	movw	r14, r24
    59c2:	00 97       	sbiw	r24, 0x00	; 0
    59c4:	49 f0       	breq	.+18     	; 0x59d8 <realloc+0x174>
    59c6:	ae 01       	movw	r20, r28
    59c8:	b8 01       	movw	r22, r16
    59ca:	0e 94 ef 2c 	call	0x59de	; 0x59de <memcpy>
    59ce:	c8 01       	movw	r24, r16
    59d0:	0e 94 a9 2b 	call	0x5752	; 0x5752 <free>
    59d4:	87 01       	movw	r16, r14
    59d6:	53 cf       	rjmp	.-346    	; 0x587e <realloc+0x1a>
    59d8:	10 e0       	ldi	r17, 0x00	; 0
    59da:	00 e0       	ldi	r16, 0x00	; 0
    59dc:	50 cf       	rjmp	.-352    	; 0x587e <realloc+0x1a>

000059de <memcpy>:
memcpy():
    59de:	fb 01       	movw	r30, r22
    59e0:	dc 01       	movw	r26, r24
    59e2:	02 c0       	rjmp	.+4      	; 0x59e8 <memcpy+0xa>
    59e4:	01 90       	ld	r0, Z+
    59e6:	0d 92       	st	X+, r0
    59e8:	41 50       	subi	r20, 0x01	; 1
    59ea:	50 40       	sbci	r21, 0x00	; 0
    59ec:	d8 f7       	brcc	.-10     	; 0x59e4 <memcpy+0x6>
    59ee:	08 95       	ret

000059f0 <strcat>:
strcat():
    59f0:	fb 01       	movw	r30, r22
    59f2:	dc 01       	movw	r26, r24
    59f4:	0d 90       	ld	r0, X+
    59f6:	00 20       	and	r0, r0
    59f8:	e9 f7       	brne	.-6      	; 0x59f4 <strcat+0x4>
    59fa:	11 97       	sbiw	r26, 0x01	; 1
    59fc:	01 90       	ld	r0, Z+
    59fe:	0d 92       	st	X+, r0
    5a00:	00 20       	and	r0, r0
    5a02:	e1 f7       	brne	.-8      	; 0x59fc <strcat+0xc>
    5a04:	08 95       	ret

00005a06 <strcmp>:
strcmp():
    5a06:	fb 01       	movw	r30, r22
    5a08:	dc 01       	movw	r26, r24
    5a0a:	8d 91       	ld	r24, X+
    5a0c:	01 90       	ld	r0, Z+
    5a0e:	80 19       	sub	r24, r0
    5a10:	01 10       	cpse	r0, r1
    5a12:	d9 f3       	breq	.-10     	; 0x5a0a <strcmp+0x4>
    5a14:	99 0b       	sbc	r25, r25
    5a16:	08 95       	ret

00005a18 <strcpy>:
strcpy():
    5a18:	fb 01       	movw	r30, r22
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	01 90       	ld	r0, Z+
    5a1e:	0d 92       	st	X+, r0
    5a20:	00 20       	and	r0, r0
    5a22:	e1 f7       	brne	.-8      	; 0x5a1c <strcpy+0x4>
    5a24:	08 95       	ret

00005a26 <strncpy>:
strncpy():
    5a26:	fb 01       	movw	r30, r22
    5a28:	dc 01       	movw	r26, r24
    5a2a:	41 50       	subi	r20, 0x01	; 1
    5a2c:	50 40       	sbci	r21, 0x00	; 0
    5a2e:	48 f0       	brcs	.+18     	; 0x5a42 <strncpy+0x1c>
    5a30:	01 90       	ld	r0, Z+
    5a32:	0d 92       	st	X+, r0
    5a34:	00 20       	and	r0, r0
    5a36:	c9 f7       	brne	.-14     	; 0x5a2a <strncpy+0x4>
    5a38:	01 c0       	rjmp	.+2      	; 0x5a3c <strncpy+0x16>
    5a3a:	1d 92       	st	X+, r1
    5a3c:	41 50       	subi	r20, 0x01	; 1
    5a3e:	50 40       	sbci	r21, 0x00	; 0
    5a40:	e0 f7       	brcc	.-8      	; 0x5a3a <strncpy+0x14>
    5a42:	08 95       	ret

00005a44 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    5a44:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    5a46:	cb ef       	ldi	r28, 0xFB	; 251
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    5a48:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    5a4a:	04 c0       	rjmp	.+8      	; 0x5a54 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    5a4c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    5a4e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    5a52:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    5a54:	cc 3f       	cpi	r28, 0xFC	; 252
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    5a56:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    5a58:	c9 f7       	brne	.-14     	; 0x5a4c <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    5a5a:	f8 94       	cli

00005a5c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    5a5c:	ff cf       	rjmp	.-2      	; 0x5a5c <__stop_program>
