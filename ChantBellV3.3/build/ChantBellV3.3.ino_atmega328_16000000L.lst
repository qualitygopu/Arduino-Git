
e:\Arduino\Arduino Git\ChantBellV3.3\build/ChantBellV3.3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 11 02 	jmp	0x422	; 0x422 <__dtors_end>
       4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
       8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
       c:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_3>
      10:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_3>
      14:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_3>
      18:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      1c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      20:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      24:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      28:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      2c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      30:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      34:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      38:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      3c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      40:	0c 94 35 18 	jmp	0x306a	; 0x306a <__vector_16>
      44:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      48:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      4c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      50:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      54:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      58:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      5c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
      60:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_24>
      64:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 56       	subi	r20, 0x65	; 101
      6a:	45 20       	and	r4, r5
      6c:	53 4f       	sbci	r21, 0xF3	; 243
      6e:	4e 47       	sbci	r20, 0x7E	; 126
      70:	20 4e       	sbci	r18, 0xE0	; 224
      72:	6f 2e       	mov	r6, r31
	...

00000075 <sampleMenu_2_7_3>:
      75:	45 56 45 20 53 4f 4e 47 20 54 49 4d 45 00           EVE SONG TIME.

00000083 <sampleMenu_2_7_2>:
      83:	4d 4f 52 20 53 4f 4e 47 20 4e 6f 2e 00              MOR SONG No..

00000090 <sampleMenu_2_7_1>:
      90:	4d 4f 52 20 53 4f 4e 47 20 54 49 4d 45 00           MOR SONG TIME.

0000009e <sampleMenu_2_6_2>:
      9e:	50 4c 41 59 00                                      PLAY.

000000a3 <sampleMenu_2_6_1>:
      a3:	53 45 4c 45 43 54 20 54 49 4d 45 00                 SELECT TIME.

000000af <sampleMenu_4_4>:
      af:	50 4c 59 52 20 45 56 45 20 44 55 52 00              PLYR EVE DUR.

000000bc <sampleMenu_4_3>:
      bc:	50 4c 59 52 20 45 56 45 20 4f 4e 20 54 49 4d 00     PLYR EVE ON TIM.

000000cc <sampleMenu_4_2>:
      cc:	50 4c 59 52 20 4d 4f 52 20 44 55 52 00              PLYR MOR DUR.

000000d9 <sampleMenu_4_1>:
      d9:	50 4c 59 52 20 4d 4f 52 20 4f 4e 20 54 49 4d 00     PLYR MOR ON TIM.

000000e9 <sampleMenu_3_2>:
      e9:	4c 49 47 48 54 20 4f 46 46 20 54 49 4d 45 00        LIGHT OFF TIME.

000000f8 <sampleMenu_3_1>:
      f8:	4c 49 47 48 54 20 4f 4e 20 54 49 4d 45 00           LIGHT ON TIME.

00000106 <sampleMenu_2_10>:
     106:	50 41 4e 43 48 41 4e 47 41 4d 20 54 49 4d 45 00     PANCHANGAM TIME.

00000116 <sampleMenu_2_9>:
     116:	41 4c 41 52 4d 20 4f 4e 2f 4f 46 46 00              ALARM ON/OFF.

00000123 <sampleMenu_List_2_7>:
     123:	11 90 00 00 00 00 13 83 00 00 00 00 12 75 00 00     .............u..
     133:	00 00 14 68 00 00 00 00 00 9c 01 00 00 00           ...h..........

00000141 <sampleMenu_2_7>:
     141:	53 4f 4e 47 20 53 45 54 54 49 4e 47 00              SONG SETTING.

0000014e <sampleMenu_List_2_6>:
     14e:	0e a3 00 00 00 00 0f 9e 00 00 00 00 00 9c 01 00     ................
	...

00000160 <sampleMenu_2_6>:
     160:	50 4c 41 59 20 44 45 4d 4f 00                       PLAY DEMO.

0000016a <sampleMenu_2_8>:
     16a:	53 43 48 4f 4f 4c 20 5a 4f 4e 45 00                 SCHOOL ZONE.

00000176 <sampleMenu_2_5>:
     176:	56 4f 4c 55 4d 45 00                                VOLUME.

0000017d <sampleMenu_2_3>:
     17d:	53 4f 4e 47 20 43 4f 55 4e 54 00                    SONG COUNT.

00000188 <sampleMenu_2_2>:
     188:	45 4e 44 20 54 49 4d 45 00                          END TIME.

00000191 <sampleMenu_2_1>:
     191:	53 54 41 52 54 20 54 49 4d 45 00                    START TIME.

0000019c <sampleMenu_back>:
     19c:	42 41 43 4b 00                                      BACK.

000001a1 <sampleMenu_1_2>:
     1a1:	53 45 54 20 54 49 4d 45 00                          SET TIME.

000001aa <sampleMenu_1_1>:
     1aa:	53 45 54 20 44 41 54 45 00                          SET DATE.

000001b3 <configMenu_2>:
     1b3:	53 45 54 20 59 45 41 52 00                          SET YEAR.

000001bc <sampleMenu_List_5>:
     1bc:	05 91 01 00 00 00 06 88 01 00 00 00 0d 60 01 4e     .............`.N
     1cc:	01 03 0b 76 01 00 00 00 0c 6a 01 00 00 00 00 9c     ...v.....j......
     1dc:	01 00 00 00                                         ....

000001e0 <sampleMenu_5>:
     1e0:	43 4c 4f 43 4b 20 53 45 54 54 49 4e 47 00           CLOCK SETTING.

000001ee <sampleMenu_exit>:
     1ee:	45 58 49 54 00                                      EXIT.

000001f3 <sampleMenu_6>:
     1f3:	52 45 53 45 54 20 53 45 54 54 49 4e 47 00           RESET SETTING.

00000201 <sampleMenu_List_4>:
     201:	1a d9 00 00 00 00 1b cc 00 00 00 00 1c bc 00 00     ................
     211:	00 00 1d af 00 00 00 00 00 9c 01 00 00 00           ..............

0000021f <sampleMenu_4>:
     21f:	50 4c 41 59 45 52 20 53 45 54 54 49 4e 47 00        PLAYER SETTING.

0000022e <sampleMenu_List_3>:
     22e:	17 f8 00 00 00 00 18 e9 00 00 00 00 00 9c 01 00     ................
	...

00000240 <sampleMenu_3>:
     240:	4c 49 47 48 54 53 20 53 45 54 54 49 4e 47 00        LIGHTS SETTING.

0000024f <sampleMenu_List_2>:
     24f:	05 91 01 00 00 00 06 88 01 00 00 00 09 7d 01 00     .............}..
     25f:	00 00 0b 76 01 00 00 00 0c 6a 01 00 00 00 0d 60     ...v.....j.....`
     26f:	01 4e 01 03 10 41 01 23 01 05 07 16 01 00 00 00     .N...A.#........
     27f:	08 06 01 00 00 00 00 9c 01 00 00 00                 ............

0000028b <sampleMenu_2>:
     28b:	42 45 4c 4c 20 53 45 54 54 49 4e 47 00              BELL SETTING.

00000298 <sampleMenu_List_1>:
     298:	02 aa 01 00 00 00 03 a1 01 00 00 00 00 9c 01 00     ................
	...

000002aa <sampleMenu_1>:
     2aa:	53 45 54 20 44 41 54 45 20 54 49 4d 45 00           SET DATE TIME.

000002b8 <configMenu_Root>:
     2b8:	1f b3 01 00 00 00 00 ee 01 00 00 00                 ............

000002c4 <setup::__c>:
     2c4:	20 45 4e 54 45 52 20 50 41 53 53 57 4f 52 44 20      ENTER PASSWORD 
	...

000002d5 <normalMenu_Root>:
     2d5:	16 40 02 2e 02 03 19 1f 02 01 02 05 01 aa 02 98     .@..............
     2e5:	02 03 1e e0 01 bc 01 06 00 ee 01 00 00 00           ..............

000002f3 <serviceMenu_Root>:
     2f3:	01 aa 02 98 02 03 04 8b 02 4f 02 0a 16 40 02 2e     .........O...@..
     303:	02 03 19 1f 02 01 02 05 15 f3 01 00 00 00 00 ee     ................
     313:	01 00 00 00                                         ....

00000317 <setup::__c>:
     317:	45 52 52 20 30 33 00                                ERR 03.

0000031e <setup::__c>:
     31e:	45 52 52 20 30 32 00                                ERR 02.

00000325 <setup::__c>:
     325:	45 52 52 20 30 31 00                                ERR 01.

0000032c <setup::__c>:
     32c:	44 45 56 4f 54 49 4f 4e 41 4c 20 43 4c 4f 43 4b     DEVOTIONAL CLOCK
	...

0000033d <setup::__c>:
     33d:	51 54 52 4f 4e 00                                   QTRON.

00000343 <port_to_mode_PGM>:
     343:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000034d <digital_pin_to_timer_PGM>:
     34d:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     35d:	00 00 00 00 00 00 00                                .......

00000364 <processMenuCommand(unsigned char)::__c>:
     364:	20 20 00                                              .

00000367 <processMenuCommand(unsigned char)::__c>:
     367:	20 20 00                                              .

0000036a <loop::__c>:
     36a:	20 50 4c 41 59 45 52 20 4d 4f 44 45 20 4f 4e 20      PLAYER MODE ON 
	...

0000037b <loop::__c>:
     37b:	20 20 52 55 4e 4e 49 4e 47 20 44 45 4d 4f 20 20       RUNNING DEMO  
	...

0000038c <loop::__c>:
     38c:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 46 46 20      AUTO LIGHT OFF 
	...

0000039d <loop::__c>:
     39d:	20 41 55 54 4f 20 4c 49 47 48 54 20 4f 4e 20 20      AUTO LIGHT ON  
	...

000003ae <loop::__c>:
     3ae:	20 41 55 54 4f 20 50 4c 41 59 20 4f 46 46 20 20      AUTO PLAY OFF  
	...

000003bf <loop::__c>:
     3bf:	20 20 41 55 54 4f 20 50 4c 41 59 20 4f 4e 20 20       AUTO PLAY ON  
	...

000003d0 <daysInMonth>:
     3d0:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e                    ...........

000003db <port_to_input_PGM>:
     3db:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003e5 <port_to_output_PGM>:
     3e5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003ef <digital_pin_to_port_PGM>:
     3ef:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3ff:	03 03 03 03 02 02 03                                .......

00000406 <digital_pin_to_bit_mask_PGM>:
     406:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     416:	04 08 10 20 40 80 40 00                             ... @.@.

0000041e <__ctors_start>:
__ctors_start():
     41e:	16 1a       	sub	r1, r22

00000420 <__ctors_end>:
__dtors_start():
     420:	d3 2c       	mov	r13, r3

00000422 <__dtors_end>:
__dtors_end():
     422:	11 24       	eor	r1, r1
     424:	1f be       	out	0x3f, r1	; 63
     426:	cf ef       	ldi	r28, 0xFF	; 255
     428:	d8 e0       	ldi	r29, 0x08	; 8
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	cd bf       	out	0x3d, r28	; 61

0000042e <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     42e:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     430:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     432:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     434:	e6 e2       	ldi	r30, 0x26	; 38
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     436:	f2 e6       	ldi	r31, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     438:	02 c0       	rjmp	.+4      	; 0x43e <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     43a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     43c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     43e:	a0 3e       	cpi	r26, 0xE0	; 224
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     440:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     442:	d9 f7       	brne	.-10     	; 0x43a <__do_copy_data+0xc>

00000444 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     444:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     446:	a0 ee       	ldi	r26, 0xE0	; 224
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     448:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     44a:	01 c0       	rjmp	.+2      	; 0x44e <.do_clear_bss_start>

0000044c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     44c:	1d 92       	st	X+, r1

0000044e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     44e:	ac 3c       	cpi	r26, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     450:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     452:	e1 f7       	brne	.-8      	; 0x44c <.do_clear_bss_loop>

00000454 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     454:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     456:	c0 e1       	ldi	r28, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     458:	d2 e0       	ldi	r29, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     45a:	04 c0       	rjmp	.+8      	; 0x464 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     45c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     45e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     460:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     464:	cf 30       	cpi	r28, 0x0F	; 15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     466:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     468:	c9 f7       	brne	.-14     	; 0x45c <__do_global_ctors+0x8>
     46a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <main>
     46e:	0c 94 06 31 	jmp	0x620c	; 0x620c <__do_global_dtors>

00000472 <__bad_interrupt>:
__vector_22():
     472:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000476 <MenuManager::currentItemHasChildren() [clone .constprop.103]>:
_ZN11MenuManager22currentItemHasChildrenEv.constprop.103():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:115
}

// ---------------------------------------------------
const unsigned char MenuManager::currentItemHasChildren()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount)) > 0;
     476:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <Menu1+0x6>
     47a:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <Menu1+0x3>
     47e:	f0 91 05 05 	lds	r31, 0x0505	; 0x800505 <Menu1+0x4>
     482:	96 e0       	ldi	r25, 0x06	; 6
     484:	89 9f       	mul	r24, r25
     486:	e0 0d       	add	r30, r0
     488:	f1 1d       	adc	r31, r1
     48a:	11 24       	eor	r1, r1
     48c:	35 96       	adiw	r30, 0x05	; 5
     48e:	e4 91       	lpm	r30, Z
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	e1 11       	cpse	r30, r1
     494:	01 c0       	rjmp	.+2      	; 0x498 <MenuManager::currentItemHasChildren() [clone .constprop.103]+0x22>
     496:	80 e0       	ldi	r24, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:116
}
     498:	08 95       	ret

0000049a <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>:
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:173
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     49a:	98 2f       	mov	r25, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     49c:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     4a2:	21 32       	cpi	r18, 0x21	; 33
     4a4:	08 f0       	brcs	.+2      	; 0x4a8 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
     4a6:	43 c0       	rjmp	.+134    	; 0x52e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     4a8:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <twi_state>
     4ac:	81 11       	cpse	r24, r1
     4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     4b0:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <TwoWire::txAddress>
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     4b4:	32 e0       	ldi	r19, 0x02	; 2
     4b6:	30 93 32 04 	sts	0x0432, r19	; 0x800432 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     4ba:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     4be:	9f ef       	ldi	r25, 0xFF	; 255
     4c0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     4c4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     4c8:	20 93 2e 04 	sts	0x042E, r18	; 0x80042e <twi_masterBufferLength>
     4cc:	a5 e3       	ldi	r26, 0x35	; 53
     4ce:	b4 e0       	ldi	r27, 0x04	; 4
     4d0:	ee e0       	ldi	r30, 0x0E	; 14
     4d2:	f4 e0       	ldi	r31, 0x04	; 4
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     4d4:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     4d6:	29 13       	cpse	r18, r25
     4d8:	31 c0       	rjmp	.+98     	; 0x53c <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xa2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     4da:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     4de:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <twi_slarw>
     4e2:	88 0f       	add	r24, r24
     4e4:	89 2b       	or	r24, r25
     4e6:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     4ea:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <twi_inRepStart>
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	49 f5       	brne	.+82     	; 0x544 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     4f2:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     4f6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <twi_slarw>
     4fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     4fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     502:	83 fd       	sbrc	r24, 3
     504:	f8 cf       	rjmp	.-16     	; 0x4f6 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     506:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     508:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     50c:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <twi_state>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	e1 f3       	breq	.-8      	; 0x50c <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x72>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     514:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
     518:	8f 3f       	cpi	r24, 0xFF	; 255
     51a:	b1 f0       	breq	.+44     	; 0x548 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     51c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
     520:	80 32       	cpi	r24, 0x20	; 32
     522:	a1 f0       	breq	.+40     	; 0x54c <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     524:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
     528:	80 33       	cpi	r24, 0x30	; 48
     52a:	91 f0       	breq	.+36     	; 0x550 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0xb6>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     52c:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     52e:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     532:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     536:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:183
  return ret;
}
     53a:	08 95       	ret
twi_writeTo():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     53c:	3d 91       	ld	r19, X+
     53e:	31 93       	st	Z+, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     540:	9f 5f       	subi	r25, 0xFF	; 255
     542:	c9 cf       	rjmp	.-110    	; 0x4d6 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     544:	85 ee       	ldi	r24, 0xE5	; 229
     546:	e0 cf       	rjmp	.-64     	; 0x508 <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x6e>
_ZN7TwoWire15endTransmissionEh.constprop.91():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	f1 cf       	rjmp	.-30     	; 0x52e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	ef cf       	rjmp	.-34     	; 0x52e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	ed cf       	rjmp	.-38     	; 0x52e <TwoWire::endTransmission(unsigned char) [clone .constprop.91]+0x94>

00000554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>:
_ZN11MenuManager19getCurrentItemCmdIdEv.constprop.86():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:59
}

// ---------------------------------------------------
const unsigned char MenuManager::getCurrentItemCmdId()
{
  return pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].id));
     554:	e1 e0       	ldi	r30, 0x01	; 1
     556:	f5 e0       	ldi	r31, 0x05	; 5
     558:	86 81       	ldd	r24, Z+6	; 0x06
     55a:	03 80       	ldd	r0, Z+3	; 0x03
     55c:	f4 81       	ldd	r31, Z+4	; 0x04
     55e:	e0 2d       	mov	r30, r0
     560:	96 e0       	ldi	r25, 0x06	; 6
     562:	89 9f       	mul	r24, r25
     564:	e0 0d       	add	r30, r0
     566:	f1 1d       	adc	r31, r1
     568:	11 24       	eor	r1, r1
     56a:	84 91       	lpm	r24, Z
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:60
}
     56c:	08 95       	ret

0000056e <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     56e:	08 95       	ret

00000570 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     570:	08 95       	ret

00000572 <DateTime::dayOfTheWeek() const [clone .constprop.19]>:
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:554
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
     572:	60 91 72 05 	lds	r22, 0x0572	; 0x800572 <bell+0x1>
     576:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <bell>
     57a:	49 2f       	mov	r20, r25
     57c:	50 e0       	ldi	r21, 0x00	; 0
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:110
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
     57e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <bell+0x2>
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	e0 ed       	ldi	r30, 0xD0	; 208
     588:	f3 e0       	ldi	r31, 0x03	; 3
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
  for (uint8_t i = 1; i < m; ++i)
     58a:	81 e0       	ldi	r24, 0x01	; 1
date2days():
     58c:	86 17       	cp	r24, r22
     58e:	30 f4       	brcc	.+12     	; 0x59c <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x2a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:112
    days += pgm_read_byte(daysInMonth + i - 1);
     590:	74 91       	lpm	r23, Z
     592:	27 0f       	add	r18, r23
     594:	31 1d       	adc	r19, r1
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:111
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	31 96       	adiw	r30, 0x01	; 1
     59a:	f8 cf       	rjmp	.-16     	; 0x58c <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x1a>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:113
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
     59c:	63 30       	cpi	r22, 0x03	; 3
     59e:	20 f0       	brcs	.+8      	; 0x5a8 <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x36>
     5a0:	93 70       	andi	r25, 0x03	; 3
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <DateTime::dayOfTheWeek() const [clone .constprop.19]+0x36>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:114
    ++days;
     5a4:	2f 5f       	subi	r18, 0xFF	; 255
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  return days + 365 * y + (y + 3) / 4 - 1;
     5a8:	6d e6       	ldi	r22, 0x6D	; 109
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	46 9f       	mul	r20, r22
     5ae:	c0 01       	movw	r24, r0
     5b0:	47 9f       	mul	r20, r23
     5b2:	90 0d       	add	r25, r0
     5b4:	56 9f       	mul	r21, r22
     5b6:	90 0d       	add	r25, r0
     5b8:	11 24       	eor	r1, r1
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     5ba:	05 96       	adiw	r24, 0x05	; 5
date2days():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:115
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    ++days;
  return days + 365 * y + (y + 3) / 4 - 1;
     5bc:	4d 5f       	subi	r20, 0xFD	; 253
     5be:	5f 4f       	sbci	r21, 0xFF	; 255
     5c0:	56 95       	lsr	r21
     5c2:	47 95       	ror	r20
     5c4:	56 95       	lsr	r21
     5c6:	47 95       	ror	r20
_ZNK8DateTime12dayOfTheWeekEv.constprop.19():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:555
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
  uint16_t day = date2days(yOff, m, d);
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
     5c8:	84 0f       	add	r24, r20
     5ca:	95 1f       	adc	r25, r21
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	67 e0       	ldi	r22, 0x07	; 7
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__udivmodhi4>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:556
}
     5d8:	08 95       	ret

000005da <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	6c 01       	movw	r12, r24
     5f0:	7b 01       	movw	r14, r22
     5f2:	8b 01       	movw	r16, r22
     5f4:	04 0f       	add	r16, r20
     5f6:	15 1f       	adc	r17, r21
     5f8:	eb 01       	movw	r28, r22
     5fa:	5e 01       	movw	r10, r28
     5fc:	ae 18       	sub	r10, r14
     5fe:	bf 08       	sbc	r11, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     600:	c0 17       	cp	r28, r16
     602:	d1 07       	cpc	r29, r17
     604:	59 f0       	breq	.+22     	; 0x61c <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     606:	69 91       	ld	r22, Y+
     608:	d6 01       	movw	r26, r12
     60a:	ed 91       	ld	r30, X+
     60c:	fc 91       	ld	r31, X
     60e:	01 90       	ld	r0, Z+
     610:	f0 81       	ld	r31, Z
     612:	e0 2d       	mov	r30, r0
     614:	c6 01       	movw	r24, r12
     616:	09 95       	icall
     618:	89 2b       	or	r24, r25
     61a:	79 f7       	brne	.-34     	; 0x5fa <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     61c:	c5 01       	movw	r24, r10
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	08 95       	ret

00000634 <turnOffPWM>:
turnOffPWM():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     634:	84 30       	cpi	r24, 0x04	; 4
     636:	81 f0       	breq	.+32     	; 0x658 <turnOffPWM+0x24>
     638:	28 f4       	brcc	.+10     	; 0x644 <turnOffPWM+0x10>
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	e9 f0       	breq	.+58     	; 0x678 <turnOffPWM+0x44>
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	f9 f0       	breq	.+62     	; 0x680 <turnOffPWM+0x4c>
     642:	08 95       	ret
     644:	88 30       	cpi	r24, 0x08	; 8
     646:	71 f0       	breq	.+28     	; 0x664 <turnOffPWM+0x30>
     648:	89 30       	cpi	r24, 0x09	; 9
     64a:	91 f0       	breq	.+36     	; 0x670 <turnOffPWM+0x3c>
     64c:	85 30       	cpi	r24, 0x05	; 5
     64e:	b9 f4       	brne	.+46     	; 0x67e <turnOffPWM+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     650:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     654:	8f 7d       	andi	r24, 0xDF	; 223
     656:	03 c0       	rjmp	.+6      	; 0x65e <turnOffPWM+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     658:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     65c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     65e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     662:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     664:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     668:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     66a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     66e:	08 95       	ret
     670:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     674:	8f 7d       	andi	r24, 0xDF	; 223
     676:	f9 cf       	rjmp	.-14     	; 0x66a <turnOffPWM+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     678:	84 b5       	in	r24, 0x24	; 36
     67a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     67c:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     67e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     680:	84 b5       	in	r24, 0x24	; 36
     682:	8f 7d       	andi	r24, 0xDF	; 223
     684:	fb cf       	rjmp	.-10     	; 0x67c <turnOffPWM+0x48>

00000686 <digitalRead>:
digitalRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	e3 5b       	subi	r30, 0xB3	; 179
     692:	fc 4f       	sbci	r31, 0xFC	; 252
     694:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     696:	f9 01       	movw	r30, r18
     698:	ea 5f       	subi	r30, 0xFA	; 250
     69a:	fb 4f       	sbci	r31, 0xFB	; 251
     69c:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     69e:	f9 01       	movw	r30, r18
     6a0:	e1 51       	subi	r30, 0x11	; 17
     6a2:	fc 4f       	sbci	r31, 0xFC	; 252
     6a4:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     6a6:	cc 23       	and	r28, r28
     6a8:	a1 f0       	breq	.+40     	; 0x6d2 <digitalRead+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6aa:	81 11       	cpse	r24, r1
     6ac:	0e 94 1a 03 	call	0x634	; 0x634 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     6b0:	ec 2f       	mov	r30, r28
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	e5 52       	subi	r30, 0x25	; 37
     6ba:	fc 4f       	sbci	r31, 0xFC	; 252
     6bc:	a5 91       	lpm	r26, Z+
     6be:	b4 91       	lpm	r27, Z
     6c0:	ec 91       	ld	r30, X
     6c2:	ed 23       	and	r30, r29
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	09 f4       	brne	.+2      	; 0x6cc <digitalRead+0x46>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	fa cf       	rjmp	.-12     	; 0x6cc <digitalRead+0x46>

000006d8 <digitalWrite>:
digitalWrite():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     6de:	28 2f       	mov	r18, r24
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	e3 5b       	subi	r30, 0xB3	; 179
     6e6:	fc 4f       	sbci	r31, 0xFC	; 252
     6e8:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     6ea:	f9 01       	movw	r30, r18
     6ec:	ea 5f       	subi	r30, 0xFA	; 250
     6ee:	fb 4f       	sbci	r31, 0xFB	; 251
     6f0:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     6f2:	f9 01       	movw	r30, r18
     6f4:	e1 51       	subi	r30, 0x11	; 17
     6f6:	fc 4f       	sbci	r31, 0xFC	; 252
     6f8:	c4 91       	lpm	r28, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     6fa:	cc 23       	and	r28, r28
     6fc:	a9 f0       	breq	.+42     	; 0x728 <digitalWrite+0x50>
     6fe:	16 2f       	mov	r17, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     700:	81 11       	cpse	r24, r1
     702:	0e 94 1a 03 	call	0x634	; 0x634 <turnOffPWM>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     706:	ec 2f       	mov	r30, r28
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	eb 51       	subi	r30, 0x1B	; 27
     710:	fc 4f       	sbci	r31, 0xFC	; 252
     712:	a5 91       	lpm	r26, Z+
     714:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     716:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     718:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     71a:	ec 91       	ld	r30, X
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     71c:	11 11       	cpse	r17, r1
     71e:	08 c0       	rjmp	.+16     	; 0x730 <digitalWrite+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     720:	d0 95       	com	r29
     722:	de 23       	and	r29, r30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     724:	dc 93       	st	X, r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     726:	8f bf       	out	0x3f, r24	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     730:	de 2b       	or	r29, r30
     732:	f8 cf       	rjmp	.-16     	; 0x724 <digitalWrite+0x4c>

00000734 <TwoWire::begin() [clone .constprop.48]>:
_ZN7TwoWire5beginEv.constprop.48():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     734:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     738:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     73c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     740:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
twi_init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     744:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     74e:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	82 e1       	ldi	r24, 0x12	; 18
     756:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	83 e1       	ldi	r24, 0x13	; 19
     75e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     762:	e9 eb       	ldi	r30, 0xB9	; 185
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	8e 7f       	andi	r24, 0xFE	; 254
     76a:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     76c:	80 81       	ld	r24, Z
     76e:	8d 7f       	andi	r24, 0xFD	; 253
     770:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     772:	88 e4       	ldi	r24, 0x48	; 72
     774:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     778:	85 e4       	ldi	r24, 0x45	; 69
     77a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     77e:	87 eb       	ldi	r24, 0xB7	; 183
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <twi_onSlaveTransmit+0x1>
     786:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     78a:	88 eb       	ldi	r24, 0xB8	; 184
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <twi_onSlaveReceive+0x1>
     792:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.48():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     796:	08 95       	ret

00000798 <pinMode>:
pinMode():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	fc 01       	movw	r30, r24
     7a0:	ea 5f       	subi	r30, 0xFA	; 250
     7a2:	fb 4f       	sbci	r31, 0xFB	; 251
     7a4:	24 91       	lpm	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     7a6:	81 51       	subi	r24, 0x11	; 17
     7a8:	9c 4f       	sbci	r25, 0xFC	; 252
     7aa:	fc 01       	movw	r30, r24
     7ac:	84 91       	lpm	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     7ae:	88 23       	and	r24, r24
     7b0:	c9 f0       	breq	.+50     	; 0x7e4 <pinMode+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	fc 01       	movw	r30, r24
     7ba:	ed 5b       	subi	r30, 0xBD	; 189
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	a5 91       	lpm	r26, Z+
     7c0:	b4 91       	lpm	r27, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     7c2:	fc 01       	movw	r30, r24
     7c4:	eb 51       	subi	r30, 0x1B	; 27
     7c6:	fc 4f       	sbci	r31, 0xFC	; 252
     7c8:	c5 91       	lpm	r28, Z+
     7ca:	d4 91       	lpm	r29, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     7cc:	61 11       	cpse	r22, r1
     7ce:	0d c0       	rjmp	.+26     	; 0x7ea <pinMode+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     7d0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     7d2:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     7d4:	8c 91       	ld	r24, X
     7d6:	20 95       	com	r18
     7d8:	82 23       	and	r24, r18
     7da:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     7dc:	88 81       	ld	r24, Y
     7de:	28 23       	and	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     7e0:	28 83       	st	Y, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     7e2:	9f bf       	out	0x3f, r25	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     7ea:	62 30       	cpi	r22, 0x02	; 2
     7ec:	51 f4       	brne	.+20     	; 0x802 <pinMode+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     7ee:	9f b7       	in	r25, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     7f0:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     7f2:	3c 91       	ld	r19, X
     7f4:	82 2f       	mov	r24, r18
     7f6:	80 95       	com	r24
     7f8:	83 23       	and	r24, r19
     7fa:	8c 93       	st	X, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     7fc:	e8 81       	ld	r30, Y
     7fe:	2e 2b       	or	r18, r30
     800:	ef cf       	rjmp	.-34     	; 0x7e0 <pinMode+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     802:	8f b7       	in	r24, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     804:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     806:	ec 91       	ld	r30, X
     808:	2e 2b       	or	r18, r30
     80a:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     80c:	8f bf       	out	0x3f, r24	; 63
     80e:	ea cf       	rjmp	.-44     	; 0x7e4 <pinMode+0x4c>

00000810 <delayMicroseconds>:
delayMicroseconds():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	91 05       	cpc	r25, r1
     814:	39 f0       	breq	.+14     	; 0x824 <delayMicroseconds+0x14>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     81e:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <delayMicroseconds+0x10>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     824:	08 95       	ret

00000826 <micros>:
micros():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     826:	3f b7       	in	r19, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     828:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     82a:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timer0_overflow_count>
     82e:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timer0_overflow_count+0x1>
     832:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timer0_overflow_count+0x2>
     836:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     83a:	26 b5       	in	r18, 0x26	; 38
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     83c:	a8 9b       	sbis	0x15, 0	; 21
     83e:	05 c0       	rjmp	.+10     	; 0x84a <micros+0x24>
     840:	2f 3f       	cpi	r18, 0xFF	; 255
     842:	19 f0       	breq	.+6      	; 0x84a <micros+0x24>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     84a:	3f bf       	out	0x3f, r19	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     84c:	ba 2f       	mov	r27, r26
     84e:	a9 2f       	mov	r26, r25
     850:	98 2f       	mov	r25, r24
     852:	88 27       	eor	r24, r24
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	62 0f       	add	r22, r18
     85a:	71 1d       	adc	r23, r1
     85c:	81 1d       	adc	r24, r1
     85e:	91 1d       	adc	r25, r1
     860:	42 e0       	ldi	r20, 0x02	; 2
     862:	66 0f       	add	r22, r22
     864:	77 1f       	adc	r23, r23
     866:	88 1f       	adc	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	4a 95       	dec	r20
     86c:	d1 f7       	brne	.-12     	; 0x862 <micros+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     86e:	08 95       	ret

00000870 <delay>:
delay():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     870:	8f 92       	push	r8
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     884:	0e 94 13 04 	call	0x826	; 0x826 <micros>
     888:	4b 01       	movw	r8, r22
     88a:	5c 01       	movw	r10, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     88c:	c1 14       	cp	r12, r1
     88e:	d1 04       	cpc	r13, r1
     890:	e1 04       	cpc	r14, r1
     892:	f1 04       	cpc	r15, r1
     894:	b9 f0       	breq	.+46     	; 0x8c4 <delay+0x54>
     896:	0e 94 13 04 	call	0x826	; 0x826 <micros>
     89a:	68 19       	sub	r22, r8
     89c:	79 09       	sbc	r23, r9
     89e:	8a 09       	sbc	r24, r10
     8a0:	9b 09       	sbc	r25, r11
     8a2:	68 3e       	cpi	r22, 0xE8	; 232
     8a4:	73 40       	sbci	r23, 0x03	; 3
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	80 f3       	brcs	.-32     	; 0x88c <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	c2 1a       	sub	r12, r18
     8b0:	d1 08       	sbc	r13, r1
     8b2:	e1 08       	sbc	r14, r1
     8b4:	f1 08       	sbc	r15, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     8b6:	88 ee       	ldi	r24, 0xE8	; 232
     8b8:	88 0e       	add	r8, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	98 1e       	adc	r9, r24
     8be:	a1 1c       	adc	r10, r1
     8c0:	b1 1c       	adc	r11, r1
     8c2:	e4 cf       	rjmp	.-56     	; 0x88c <delay+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	08 95       	ret

000008d6 <millis>:
millis():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     8d6:	2f b7       	in	r18, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     8d8:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     8da:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <timer0_millis>
     8de:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <timer0_millis+0x1>
     8e2:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <timer0_millis+0x2>
     8e6:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     8ea:	2f bf       	out	0x3f, r18	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     8ec:	08 95       	ret

000008ee <DFRobotDFPlayerMini::available() [clone .constprop.70]>:
_ZN19DFRobotDFPlayerMini9availableEv.constprop.70():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     8f2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <myDFPlayer>
     8f6:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <myDFPlayer+0x1>
     8fa:	dc 01       	movw	r26, r24
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	00 84       	ldd	r0, Z+8	; 0x08
     902:	f1 85       	ldd	r31, Z+9	; 0x09
     904:	e0 2d       	mov	r30, r0
     906:	09 95       	icall
     908:	89 2b       	or	r24, r25
     90a:	09 f4       	brne	.+2      	; 0x90e <__stack+0xf>
     90c:	d7 c0       	rjmp	.+430    	; 0xabc <__stack+0x1bd>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	cb 01       	movw	r24, r22
     914:	0e 94 38 04 	call	0x870	; 0x870 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     918:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <myDFPlayer+0x1e>
     91c:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <myDFPlayer>
     920:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <myDFPlayer+0x1>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     924:	dc 01       	movw	r26, r24
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	02 84       	ldd	r0, Z+10	; 0x0a
     92c:	f3 85       	ldd	r31, Z+11	; 0x0b
     92e:	e0 2d       	mov	r30, r0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     930:	21 11       	cpse	r18, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <__stack+0x4b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     934:	09 95       	icall
     936:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <myDFPlayer+0xa>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     93a:	8e 37       	cpi	r24, 0x7E	; 126
     93c:	d1 f6       	brne	.-76     	; 0x8f2 <DFRobotDFPlayerMini::available() [clone .constprop.70]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     93e:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <myDFPlayer+0x1e>
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <myDFPlayer+0x1e>
     948:	d4 cf       	rjmp	.-88     	; 0x8f2 <DFRobotDFPlayerMini::available() [clone .constprop.70]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     94a:	09 95       	icall
     94c:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <myDFPlayer+0x1e>
     950:	e9 2f       	mov	r30, r25
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	ed 57       	subi	r30, 0x7D	; 125
     956:	fa 4f       	sbci	r31, 0xFA	; 250
     958:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     95a:	92 30       	cpi	r25, 0x02	; 2
     95c:	b9 f0       	breq	.+46     	; 0x98c <__stack+0x8d>
     95e:	99 30       	cpi	r25, 0x09	; 9
     960:	d9 f0       	breq	.+54     	; 0x998 <__stack+0x99>
     962:	91 30       	cpi	r25, 0x01	; 1
     964:	a9 f4       	brne	.+42     	; 0x990 <__stack+0x91>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     966:	8f 3f       	cpi	r24, 0xFF	; 255
     968:	99 f0       	breq	.+38     	; 0x990 <__stack+0x91>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     96a:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     974:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <myDFPlayer+0x23>
     978:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     97c:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <myDFPlayer+0x24>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     980:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <myDFPlayer+0x25>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.70():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     984:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     98c:	86 30       	cpi	r24, 0x06	; 6
     98e:	69 f7       	brne	.-38     	; 0x96a <__stack+0x6b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     990:	9f 5f       	subi	r25, 0xFF	; 255
     992:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <myDFPlayer+0x1e>
     996:	ad cf       	rjmp	.-166    	; 0x8f2 <DFRobotDFPlayerMini::available() [clone .constprop.70]+0x4>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     998:	8f 3e       	cpi	r24, 0xEF	; 239
     99a:	39 f7       	brne	.-50     	; 0x96a <__stack+0x6b>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     99c:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <myDFPlayer+0xc>
     9a0:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <myDFPlayer+0xb>
     9a4:	28 0f       	add	r18, r24
     9a6:	33 27       	eor	r19, r19
     9a8:	33 1f       	adc	r19, r19
     9aa:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <myDFPlayer+0xd>
     9ae:	c9 01       	movw	r24, r18
     9b0:	8e 0f       	add	r24, r30
     9b2:	91 1d       	adc	r25, r1
     9b4:	20 91 91 05 	lds	r18, 0x0591	; 0x800591 <myDFPlayer+0xe>
     9b8:	28 0f       	add	r18, r24
     9ba:	39 2f       	mov	r19, r25
     9bc:	31 1d       	adc	r19, r1
     9be:	40 91 92 05 	lds	r20, 0x0592	; 0x800592 <myDFPlayer+0xf>
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	24 0f       	add	r18, r20
     9c6:	35 1f       	adc	r19, r21
     9c8:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <myDFPlayer+0x10>
     9cc:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     9ce:	60 91 94 05 	lds	r22, 0x0594	; 0x800594 <myDFPlayer+0x11>
     9d2:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     9d4:	76 2f       	mov	r23, r22
     9d6:	66 27       	eor	r22, r22
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     9d8:	f0 91 95 05 	lds	r31, 0x0595	; 0x800595 <myDFPlayer+0x12>
     9dc:	6f 0f       	add	r22, r31
     9de:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     9e0:	28 0f       	add	r18, r24
     9e2:	39 1f       	adc	r19, r25
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     9e4:	31 95       	neg	r19
     9e6:	21 95       	neg	r18
     9e8:	31 09       	sbc	r19, r1
_ZN19DFRobotDFPlayerMini9availableEv.constprop.70():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     9ea:	62 17       	cp	r22, r18
     9ec:	73 07       	cpc	r23, r19
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	bc cf       	rjmp	.-136    	; 0x96a <__stack+0x6b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     9f2:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <myDFPlayer+0x1e>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     9f6:	e1 34       	cpi	r30, 0x41	; 65
     9f8:	19 f4       	brne	.+6      	; 0xa00 <__stack+0x101>
handleError():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     9fa:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <myDFPlayer+0x25>
     9fe:	2f c0       	rjmp	.+94     	; 0xa5e <__stack+0x15f>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     a00:	e0 93 a4 05 	sts	0x05A4, r30	; 0x8005a4 <myDFPlayer+0x21>
arrayToUint16():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     a04:	54 2f       	mov	r21, r20
     a06:	44 27       	eor	r20, r20
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     a08:	84 0f       	add	r24, r20
     a0a:	95 1f       	adc	r25, r21
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     a0c:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <myDFPlayer+0x23>
     a10:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     a14:	ea 53       	subi	r30, 0x3A	; 58
     a16:	e6 31       	cpi	r30, 0x16	; 22
     a18:	08 f0       	brcs	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	46 c0       	rjmp	.+140    	; 0xaa8 <__stack+0x1a9>
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ed 5e       	subi	r30, 0xED	; 237
     a20:	fa 4f       	sbci	r31, 0xFA	; 250
     a22:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <__tablejump2__>
     a26:	40 05       	cpc	r20, r0
     a28:	48 05       	cpc	r20, r8
     a2a:	52 05       	cpc	r21, r2
     a2c:	29 05       	cpc	r18, r9
     a2e:	52 05       	cpc	r21, r2
     a30:	32 05       	cpc	r19, r2
     a32:	50 05       	cpc	r21, r0
     a34:	54 05       	cpc	r21, r4
     a36:	52 05       	cpc	r21, r2
     a38:	52 05       	cpc	r21, r2
     a3a:	52 05       	cpc	r21, r2
     a3c:	52 05       	cpc	r21, r2
     a3e:	52 05       	cpc	r21, r2
     a40:	52 05       	cpc	r21, r2
     a42:	52 05       	cpc	r21, r2
     a44:	52 05       	cpc	r21, r2
     a46:	54 05       	cpc	r21, r4
     a48:	52 05       	cpc	r21, r2
     a4a:	52 05       	cpc	r21, r2
     a4c:	52 05       	cpc	r21, r2
     a4e:	52 05       	cpc	r21, r2
     a50:	52 05       	cpc	r21, r2
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a52:	85 e0       	ldi	r24, 0x05	; 5
     a54:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <myDFPlayer+0x24>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.70():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     a5e:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <myDFPlayer+0x24>
     a62:	91 cf       	rjmp	.-222    	; 0x986 <__stack+0x87>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     a64:	80 ff       	sbrs	r24, 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__stack+0x16d>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a68:	89 e0       	ldi	r24, 0x09	; 9
     a6a:	f4 cf       	rjmp	.-24     	; 0xa54 <__stack+0x155>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a6c:	81 ff       	sbrs	r24, 1
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x175>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	f0 cf       	rjmp	.-32     	; 0xa54 <__stack+0x155>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     a74:	83 70       	andi	r24, 0x03	; 3
     a76:	99 27       	eor	r25, r25
     a78:	89 2b       	or	r24, r25
     a7a:	89 f3       	breq	.-30     	; 0xa5e <__stack+0x15f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a7c:	8a e0       	ldi	r24, 0x0A	; 10
     a7e:	ea cf       	rjmp	.-44     	; 0xa54 <__stack+0x155>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     a80:	80 ff       	sbrs	r24, 0
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <__stack+0x189>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	e6 cf       	rjmp	.-52     	; 0xa54 <__stack+0x155>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a88:	81 ff       	sbrs	r24, 1
     a8a:	e9 cf       	rjmp	.-46     	; 0xa5e <__stack+0x15f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	e2 cf       	rjmp	.-60     	; 0xa54 <__stack+0x155>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     a90:	80 ff       	sbrs	r24, 0
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <__stack+0x199>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a94:	88 e0       	ldi	r24, 0x08	; 8
     a96:	de cf       	rjmp	.-68     	; 0xa54 <__stack+0x155>
parseStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     a98:	81 ff       	sbrs	r24, 1
     a9a:	e1 cf       	rjmp	.-62     	; 0xa5e <__stack+0x15f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	da cf       	rjmp	.-76     	; 0xa54 <__stack+0x155>
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	d8 cf       	rjmp	.-80     	; 0xa54 <__stack+0x155>
     aa4:	8b e0       	ldi	r24, 0x0B	; 11
     aa6:	d6 cf       	rjmp	.-84     	; 0xa54 <__stack+0x155>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     aae:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <myDFPlayer+0x23>
     ab2:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     ab6:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <myDFPlayer+0x24>
     aba:	9f cf       	rjmp	.-194    	; 0x9fa <__stack+0xfb>
_ZN19DFRobotDFPlayerMini9availableEv.constprop.70():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     abc:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <myDFPlayer+0x25>
     ac0:	88 23       	and	r24, r24
     ac2:	69 f2       	breq	.-102    	; 0xa5e <__stack+0x15f>
     ac4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
     ac8:	00 91 85 05 	lds	r16, 0x0585	; 0x800585 <myDFPlayer+0x2>
     acc:	10 91 86 05 	lds	r17, 0x0586	; 0x800586 <myDFPlayer+0x3>
     ad0:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <myDFPlayer+0x4>
     ad4:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <myDFPlayer+0x5>
     ad8:	60 1b       	sub	r22, r16
     ada:	71 0b       	sbc	r23, r17
     adc:	82 0b       	sbc	r24, r18
     ade:	93 0b       	sbc	r25, r19
     ae0:	00 91 89 05 	lds	r16, 0x0589	; 0x800589 <myDFPlayer+0x6>
     ae4:	10 91 8a 05 	lds	r17, 0x058A	; 0x80058a <myDFPlayer+0x7>
     ae8:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <myDFPlayer+0x8>
     aec:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <myDFPlayer+0x9>
     af0:	60 17       	cp	r22, r16
     af2:	71 07       	cpc	r23, r17
     af4:	82 07       	cpc	r24, r18
     af6:	93 07       	cpc	r25, r19
     af8:	08 f4       	brcc	.+2      	; 0xafc <__stack+0x1fd>
     afa:	b1 cf       	rjmp	.-158    	; 0xa5e <__stack+0x15f>
handleMessage():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     afc:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <myDFPlayer+0x1e>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     b00:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <myDFPlayer+0x20>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     b04:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <myDFPlayer+0x23>
     b08:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <myDFPlayer+0x22>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	36 cf       	rjmp	.-404    	; 0x97c <__stack+0x7d>

00000b10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>:
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.68():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     b10:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <myDFPlayer+0x17>
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     b14:	27 2f       	mov	r18, r23
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	70 93 9c 05 	sts	0x059C, r23	; 0x80059c <myDFPlayer+0x19>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     b1c:	60 93 9d 05 	sts	0x059D, r22	; 0x80059d <myDFPlayer+0x1a>
calculateCheckSum():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     b20:	40 91 99 05 	lds	r20, 0x0599	; 0x800599 <myDFPlayer+0x16>
     b24:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <myDFPlayer+0x15>
     b28:	49 0f       	add	r20, r25
     b2a:	55 27       	eor	r21, r21
     b2c:	55 1f       	adc	r21, r21
     b2e:	84 0f       	add	r24, r20
     b30:	95 2f       	mov	r25, r21
     b32:	91 1d       	adc	r25, r1
     b34:	40 91 9b 05 	lds	r20, 0x059B	; 0x80059b <myDFPlayer+0x18>
     b38:	84 0f       	add	r24, r20
     b3a:	91 1d       	adc	r25, r1
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	68 0f       	add	r22, r24
     b42:	79 2f       	mov	r23, r25
     b44:	71 1d       	adc	r23, r1
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     b46:	71 95       	neg	r23
     b48:	61 95       	neg	r22
     b4a:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     b4c:	70 93 9e 05 	sts	0x059E, r23	; 0x80059e <myDFPlayer+0x1b>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     b50:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <myDFPlayer+0x1c>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     b54:	44 23       	and	r20, r20
     b56:	61 f0       	breq	.+24     	; 0xb70 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     b58:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <myDFPlayer+0x25>
     b5c:	88 23       	and	r24, r24
     b5e:	41 f0       	breq	.+16     	; 0xb70 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]+0x60>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	cb 01       	movw	r24, r22
     b66:	0e 94 38 04 	call	0x870	; 0x870 <delay>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     b6a:	0e 94 77 04 	call	0x8ee	; 0x8ee <DFRobotDFPlayerMini::available() [clone .constprop.70]>
     b6e:	f4 cf       	rjmp	.-24     	; 0xb58 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]+0x48>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     b70:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <myDFPlayer>
     b74:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <myDFPlayer+0x1>
     b78:	dc 01       	movw	r26, r24
     b7a:	ed 91       	ld	r30, X+
     b7c:	fc 91       	ld	r31, X
     b7e:	02 80       	ldd	r0, Z+2	; 0x02
     b80:	f3 81       	ldd	r31, Z+3	; 0x03
     b82:	e0 2d       	mov	r30, r0
     b84:	4a e0       	ldi	r20, 0x0A	; 10
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	67 e9       	ldi	r22, 0x97	; 151
     b8a:	75 e0       	ldi	r23, 0x05	; 5
     b8c:	09 95       	icall
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     b8e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
     b92:	60 93 85 05 	sts	0x0585, r22	; 0x800585 <myDFPlayer+0x2>
     b96:	70 93 86 05 	sts	0x0586, r23	; 0x800586 <myDFPlayer+0x3>
     b9a:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <myDFPlayer+0x4>
     b9e:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <myDFPlayer+0x5>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     ba2:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <myDFPlayer+0x18>
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	81 11       	cpse	r24, r1
     baa:	01 c0       	rjmp	.+2      	; 0xbae <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]+0x9e>
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <myDFPlayer+0x25>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     bb2:	81 11       	cpse	r24, r1
     bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]+0xb2>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     bb6:	6a e0       	ldi	r22, 0x0A	; 10
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0c 94 38 04 	jmp	0x870	; 0x870 <delay>
_ZN19DFRobotDFPlayerMini9sendStackEhj.constprop.68():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     bc2:	08 95       	ret

00000bc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>:
_ZN19DFRobotDFPlayerMini10playFolderEhh.constprop.29():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:73

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
     bc4:	78 2f       	mov	r23, r24
     bc6:	8f e0       	ldi	r24, 0x0F	; 15
     bc8:	0c 94 88 05 	jmp	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>

00000bcc <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>:
_Z12startPreSonghh.constprop.28():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1425
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
        }
    }
}

void startPreSong(byte fol, byte song)
     bcc:	cf 93       	push	r28
     bce:	c8 2f       	mov	r28, r24
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1427
{
    digitalWrite(AMP, HIGH);
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1428
    myDFPlayer.playFolder(fol, song);
     bd8:	6c 2f       	mov	r22, r28
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1429
    delay(500);
     be0:	64 ef       	ldi	r22, 0xF4	; 244
     be2:	71 e0       	ldi	r23, 0x01	; 1
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1430
}
     be8:	cf 91       	pop	r28
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1429

void startPreSong(byte fol, byte song)
{
    digitalWrite(AMP, HIGH);
    myDFPlayer.playFolder(fol, song);
    delay(500);
     bea:	0c 94 38 04 	jmp	0x870	; 0x870 <delay>

00000bee <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     bee:	08 95       	ret

00000bf0 <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:537
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     bf0:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <SoftwareSerial::active_object>
     bf4:	30 91 7d 03 	lds	r19, 0x037D	; 0x80037d <SoftwareSerial::active_object+0x1>
     bf8:	28 17       	cp	r18, r24
     bfa:	39 07       	cpc	r19, r25
     bfc:	71 f4       	brne	.+28     	; 0xc1a <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:541
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     bfe:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
     c02:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
     c06:	98 17       	cp	r25, r24
     c08:	41 f0       	breq	.+16     	; 0xc1a <SoftwareSerial::peek()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:545
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     c0a:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	e6 5c       	subi	r30, 0xC6	; 198
     c12:	fc 4f       	sbci	r31, 0xFC	; 252
     c14:	80 81       	ld	r24, Z
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:538
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:546
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     c1e:	08 95       	ret

00000c20 <SoftwareSerial::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     c20:	08 95       	ret

00000c22 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:476

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	dc 01       	movw	r26, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:477
  if (_tx_delay == 0) {
     c30:	5c 96       	adiw	r26, 0x1c	; 28
     c32:	ed 90       	ld	r14, X+
     c34:	fc 90       	ld	r15, X
     c36:	5d 97       	sbiw	r26, 0x1d	; 29
     c38:	e1 14       	cp	r14, r1
     c3a:	f1 04       	cpc	r15, r1
     c3c:	79 f4       	brne	.+30     	; 0xc5c <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	13 96       	adiw	r26, 0x03	; 3
     c44:	9c 93       	st	X, r25
     c46:	8e 93       	st	-X, r24
     c48:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:479
    setWriteError();
    return 0;
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:528

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:486

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     c5c:	51 96       	adiw	r26, 0x11	; 17
     c5e:	ed 91       	ld	r30, X+
     c60:	fc 91       	ld	r31, X
     c62:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:487
  uint8_t reg_mask = _transmitBitMask;
     c64:	50 96       	adiw	r26, 0x10	; 16
     c66:	8c 91       	ld	r24, X
     c68:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:488
  uint8_t inv_mask = ~_transmitBitMask;
     c6a:	98 2f       	mov	r25, r24
     c6c:	90 95       	com	r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:489
  uint8_t oldSREG = SREG;
     c6e:	0f b7       	in	r16, 0x3f	; 63
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:490
  bool inv = _inverse_logic;
     c70:	5e 96       	adiw	r26, 0x1e	; 30
     c72:	2c 91       	ld	r18, X
     c74:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:493
  uint16_t delay = _tx_delay;

  if (inv)
     c76:	12 2f       	mov	r17, r18
     c78:	12 70       	andi	r17, 0x02	; 2
     c7a:	21 fd       	sbrc	r18, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:494
    b = ~b;
     c7c:	60 95       	com	r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:496

  cli();  // turn off interrupts for a clean txmit
     c7e:	f8 94       	cli
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     c80:	20 81       	ld	r18, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:499
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     c82:	11 23       	and	r17, r17
     c84:	19 f1       	breq	.+70     	; 0xccc <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:500
    *reg |= reg_mask;
     c86:	28 2b       	or	r18, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502
  else
    *reg &= inv_mask;
     c88:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     c8a:	e7 01       	movw	r28, r14
     c8c:	21 97       	sbiw	r28, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <SoftwareSerial::write(unsigned char)+0x6a>
     c90:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     c92:	46 2f       	mov	r20, r22
     c94:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     c96:	30 81       	ld	r19, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:509
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     c98:	60 ff       	sbrs	r22, 0
     c9a:	1a c0       	rjmp	.+52     	; 0xcd0 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:510
      *reg |= reg_mask; // send 1
     c9c:	38 2b       	or	r19, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
    else
      *reg &= inv_mask; // send 0
     c9e:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     ca0:	e7 01       	movw	r28, r14
     ca2:	21 97       	sbiw	r28, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:515

    tunedDelay(delay);
    b >>= 1;
     ca6:	ba 01       	movw	r22, r20
     ca8:	75 95       	asr	r23
     caa:	67 95       	ror	r22
     cac:	21 50       	subi	r18, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:507
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     cae:	89 f7       	brne	.-30     	; 0xc92 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:519
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     cb0:	11 23       	and	r17, r17
     cb2:	81 f0       	breq	.+32     	; 0xcd4 <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:520
    *reg &= inv_mask;
     cb4:	80 81       	ld	r24, Z
     cb6:	89 23       	and	r24, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522
  else
    *reg |= reg_mask;
     cb8:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:524

  SREG = oldSREG; // turn interrupts back on
     cba:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     cbc:	5c 96       	adiw	r26, 0x1c	; 28
     cbe:	8d 91       	ld	r24, X+
     cc0:	9c 91       	ld	r25, X
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:527
  tunedDelay(_tx_delay);
  
  return 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	c1 cf       	rjmp	.-126    	; 0xc4e <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:502

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     ccc:	29 23       	and	r18, r25
     cce:	dc cf       	rjmp	.-72     	; 0xc88 <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:512
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     cd0:	39 23       	and	r19, r25
     cd2:	e5 cf       	rjmp	.-54     	; 0xc9e <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:522

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     cd4:	90 81       	ld	r25, Z
     cd6:	89 2b       	or	r24, r25
     cd8:	ef cf       	rjmp	.-34     	; 0xcb8 <SoftwareSerial::write(unsigned char)+0x96>

00000cda <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:469
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     cda:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <SoftwareSerial::active_object>
     cde:	30 91 7d 03 	lds	r19, 0x037D	; 0x80037d <SoftwareSerial::active_object+0x1>
     ce2:	28 17       	cp	r18, r24
     ce4:	39 07       	cpc	r19, r25
     ce6:	71 f4       	brne	.+28     	; 0xd04 <SoftwareSerial::available()+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:472
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     ce8:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
     cec:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	80 5c       	subi	r24, 0xC0	; 192
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	82 1b       	sub	r24, r18
     cf8:	91 09       	sbc	r25, r1
     cfa:	60 e4       	ldi	r22, 0x40	; 64
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__divmodhi4>
     d02:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:470
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:473

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     d08:	08 95       	ret

00000d0a <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:454


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     d0a:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <SoftwareSerial::active_object>
     d0e:	30 91 7d 03 	lds	r19, 0x037D	; 0x80037d <SoftwareSerial::active_object+0x1>
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	b9 f4       	brne	.+46     	; 0xd46 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:458
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     d18:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
     d1c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
     d20:	98 17       	cp	r25, r24
     d22:	89 f0       	breq	.+34     	; 0xd46 <SoftwareSerial::read()+0x3c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:462
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     d24:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	e6 5c       	subi	r30, 0xC6	; 198
     d2c:	fc 4f       	sbci	r31, 0xFC	; 252
     d2e:	80 81       	ld	r24, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:463
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     d30:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	2f 73       	andi	r18, 0x3F	; 63
     d3c:	33 27       	eor	r19, r19
     d3e:	20 93 7b 03 	sts	0x037B, r18	; 0x80037b <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:464
  return d;
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:455

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:465

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     d4a:	08 95       	ret

00000d4c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j.part.1():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:95
 *            ensure the content of this buffer doesn't change.
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ea 01       	movw	r28, r20
     d54:	12 2f       	mov	r17, r18
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:121
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
     d56:	dc 01       	movw	r26, r24
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	8d 91       	ld	r24, X+
     d5c:	9c 91       	ld	r25, X
     d5e:	dc 01       	movw	r26, r24
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	02 80       	ldd	r0, Z+2	; 0x02
     d66:	f3 81       	ldd	r31, Z+3	; 0x03
     d68:	e0 2d       	mov	r30, r0
     d6a:	09 95       	icall
     d6c:	c8 17       	cp	r28, r24
     d6e:	d9 07       	cpc	r29, r25
     d70:	29 f4       	brne	.+10     	; 0xd7c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]+0x30>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
     d72:	81 2f       	mov	r24, r17
     d74:	0e 94 4d 02 	call	0x49a	; 0x49a <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	81 11       	cpse	r24, r1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:125
  // Write the data itself
  if (_wire->write(buffer, len) != len) {
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice failed to write"));
#endif
    return false;
     d7c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:166
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     d7e:	89 2f       	mov	r24, r25
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:62
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	a1 f0       	breq	.+40     	; 0xdbc <Adafruit_I2CDevice::detected()+0x34>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:69
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
     d94:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     d9c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     da0:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     da4:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 4d 02 	call	0x49a	; 0x49a <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:70
  if (_wire->endTransmission() == 0) {
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	81 11       	cpse	r24, r1
     db2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:80
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
     db4:	89 2f       	mov	r24, r25
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
     dbc:	0e 94 9a 03 	call	0x734	; 0x734 <TwoWire::begin() [clone .constprop.48]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 c4 06 	call	0xd88	; 0xd88 <Adafruit_I2CDevice::detected()>
     dca:	98 2f       	mov	r25, r24
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     dcc:	81 11       	cpse	r24, r1
     dce:	e2 cf       	rjmp	.-60     	; 0xd94 <Adafruit_I2CDevice::detected()+0xc>
     dd0:	f1 cf       	rjmp	.-30     	; 0xdb4 <Adafruit_I2CDevice::detected()+0x2c>

00000dd2 <twi_stop>:
twi_stop():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     dd2:	85 ed       	ldi	r24, 0xD5	; 213
     dd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ddc:	84 fd       	sbrc	r24, 4
     dde:	fc cf       	rjmp	.-8      	; 0xdd8 <twi_stop+0x6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     de0:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     de4:	08 95       	ret

00000de6 <twi_transmit>:
twi_transmit():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     de6:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <twi_txBufferLength>
     dea:	26 0f       	add	r18, r22
     dec:	33 27       	eor	r19, r19
     dee:	33 1f       	adc	r19, r19
     df0:	21 32       	cpi	r18, 0x21	; 33
     df2:	31 05       	cpc	r19, r1
     df4:	ec f4       	brge	.+58     	; 0xe30 <twi_transmit+0x4a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     df6:	20 91 32 04 	lds	r18, 0x0432	; 0x800432 <twi_state>
     dfa:	fc 01       	movw	r30, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	24 30       	cpi	r18, 0x04	; 4
     e02:	69 f0       	breq	.+26     	; 0xe1e <twi_transmit+0x38>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     e04:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     e06:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     e08:	a0 91 17 03 	lds	r26, 0x0317	; 0x800317 <twi_txBufferLength>
     e0c:	21 91       	ld	r18, Z+
     e0e:	ac 01       	movw	r20, r24
     e10:	49 50       	subi	r20, 0x09	; 9
     e12:	5d 4f       	sbci	r21, 0xFD	; 253
     e14:	a4 0f       	add	r26, r20
     e16:	b5 2f       	mov	r27, r21
     e18:	b1 1d       	adc	r27, r1
     e1a:	2c 93       	st	X, r18
     e1c:	01 96       	adiw	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     e1e:	86 17       	cp	r24, r22
     e20:	98 f3       	brcs	.-26     	; 0xe08 <twi_transmit+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     e22:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_txBufferLength>
     e26:	68 0f       	add	r22, r24
     e28:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <twi_txBufferLength>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	08 95       	ret

00000e34 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     e34:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <TwoWire::rxBufferIndex>
     e38:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <TwoWire::rxBufferLength>
     e3c:	e8 17       	cp	r30, r24
     e3e:	30 f4       	brcc	.+12     	; 0xe4c <TwoWire::peek()+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	e4 51       	subi	r30, 0x14	; 20
     e44:	fc 4f       	sbci	r31, 0xFC	; 252
     e46:	80 81       	ld	r24, Z
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     e50:	08 95       	ret

00000e52 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     e52:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <TwoWire::rxBufferIndex>
     e56:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <TwoWire::rxBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     e5a:	2f ef       	ldi	r18, 0xFF	; 255
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     e5e:	98 17       	cp	r25, r24
     e60:	48 f4       	brcc	.+18     	; 0xe74 <TwoWire::read()+0x22>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     e62:	e9 2f       	mov	r30, r25
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	e4 51       	subi	r30, 0x14	; 20
     e68:	fc 4f       	sbci	r31, 0xFC	; 252
     e6a:	20 81       	ld	r18, Z
     e6c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     e6e:	9f 5f       	subi	r25, 0xFF	; 255
     e70:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     e74:	c9 01       	movw	r24, r18
     e76:	08 95       	ret

00000e78 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     e78:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <TwoWire::rxBufferLength>
     e7c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     e80:	89 1b       	sub	r24, r25
     e82:	99 0b       	sbc	r25, r25
     e84:	08 95       	ret

00000e86 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	7c 01       	movw	r14, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	8a 01       	movw	r16, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     e9c:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <TwoWire::transmitting>
     ea0:	22 23       	and	r18, r18
     ea2:	89 f0       	breq	.+34     	; 0xec6 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     ea4:	eb 01       	movw	r28, r22
     ea6:	6b 01       	movw	r12, r22
     ea8:	c4 0e       	add	r12, r20
     eaa:	d5 1e       	adc	r13, r21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     eac:	cc 15       	cp	r28, r12
     eae:	dd 05       	cpc	r29, r13
     eb0:	69 f0       	breq	.+26     	; 0xecc <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     eb2:	69 91       	ld	r22, Y+
     eb4:	d7 01       	movw	r26, r14
     eb6:	ed 91       	ld	r30, X+
     eb8:	fc 91       	ld	r31, X
     eba:	01 90       	ld	r0, Z+
     ebc:	f0 81       	ld	r31, Z
     ebe:	e0 2d       	mov	r30, r0
     ec0:	c7 01       	movw	r24, r14
     ec2:	09 95       	icall
     ec4:	f3 cf       	rjmp	.-26     	; 0xeac <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     ec6:	64 2f       	mov	r22, r20
     ec8:	0e 94 f3 06 	call	0xde6	; 0xde6 <twi_transmit>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     ecc:	c8 01       	movw	r24, r16
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	08 95       	ret

00000ee0 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	1f 92       	push	r1
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	69 83       	std	Y+1, r22	; 0x01
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     eec:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <TwoWire::transmitting>
     ef0:	22 23       	and	r18, r18
     ef2:	f9 f0       	breq	.+62     	; 0xf32 <TwoWire::write(unsigned char)+0x52>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     ef4:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <TwoWire::txBufferLength>
     ef8:	20 32       	cpi	r18, 0x20	; 32
     efa:	58 f0       	brcs	.+22     	; 0xf12 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
     efc:	21 e0       	ldi	r18, 0x01	; 1
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	33 83       	std	Z+3, r19	; 0x03
     f04:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     f0a:	0f 90       	pop	r0
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     f12:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <TwoWire::txBufferIndex>
     f16:	e8 2f       	mov	r30, r24
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	eb 5c       	subi	r30, 0xCB	; 203
     f1c:	fb 4f       	sbci	r31, 0xFB	; 251
     f1e:	99 81       	ldd	r25, Y+1	; 0x01
     f20:	90 83       	st	Z, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     f28:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <TwoWire::txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	ec cf       	rjmp	.-40     	; 0xf0a <TwoWire::write(unsigned char)+0x2a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	0e 94 f3 06 	call	0xde6	; 0xde6 <twi_transmit>
     f3c:	f7 cf       	rjmp	.-18     	; 0xf2c <TwoWire::write(unsigned char)+0x4c>

00000f3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     f3e:	fc 01       	movw	r30, r24
     f40:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     f42:	31 e0       	ldi	r19, 0x01	; 1
     f44:	30 93 33 04 	sts	0x0433, r19	; 0x800433 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     f48:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     f4c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     f50:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     f54:	83 85       	ldd	r24, Z+11	; 0x0b
     f56:	68 2b       	or	r22, r24
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     f58:	8d e1       	ldi	r24, 0x1D	; 29
     f5a:	95 e0       	ldi	r25, 0x05	; 5
     f5c:	0e 94 70 07 	call	0xee0	; 0xee0 <TwoWire::write(unsigned char)>
endTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0c 94 4d 02 	jmp	0x49a	; 0x49a <TwoWire::endTransmission(unsigned char) [clone .constprop.91]>

00000f66 <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	8c 01       	movw	r16, r24
     f6e:	c6 2f       	mov	r28, r22
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
     f70:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
     f74:	6c 2f       	mov	r22, r28
     f76:	64 60       	ori	r22, 0x04	; 4
     f78:	c8 01       	movw	r24, r16
     f7a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 08 04 	call	0x810	; 0x810 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
     f86:	6c 2f       	mov	r22, r28
     f88:	6b 7f       	andi	r22, 0xFB	; 251
     f8a:	c8 01       	movw	r24, r16
     f8c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
     f90:	82 e3       	ldi	r24, 0x32	; 50
     f92:	90 e0       	ldi	r25, 0x00	; 0
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
pulseEnable():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
     f9a:	0c 94 08 04 	jmp	0x810	; 0x810 <delayMicroseconds>

00000f9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	8c 01       	movw	r16, r24
     fa8:	d6 2f       	mov	r29, r22
     faa:	c4 2f       	mov	r28, r20
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
     fac:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
     fae:	64 2b       	or	r22, r20
     fb0:	0e 94 b3 07 	call	0xf66	; 0xf66 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
     fb4:	80 e1       	ldi	r24, 0x10	; 16
     fb6:	d8 9f       	mul	r29, r24
     fb8:	b0 01       	movw	r22, r0
     fba:	11 24       	eor	r1, r1
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     fbc:	6c 2b       	or	r22, r28
     fbe:	c8 01       	movw	r24, r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
     fc8:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <LiquidCrystal_I2C::write4bits(unsigned char)>

00000fcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>:
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	28 97       	sbiw	r28, 0x08	; 8
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     fe0:	98 e0       	ldi	r25, 0x08	; 8
     fe2:	e3 e1       	ldi	r30, 0x13	; 19
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	de 01       	movw	r26, r28
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	01 90       	ld	r0, Z+
     fec:	0d 92       	st	X+, r0
     fee:	9a 95       	dec	r25
     ff0:	e1 f7       	brne	.-8      	; 0xfea <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x1e>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
     ff2:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <lcd+0x8>
     ff6:	96 17       	cp	r25, r22
     ff8:	08 f4       	brcc	.+2      	; 0xffc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]+0x30>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
     ffa:	6f ef       	ldi	r22, 0xFF	; 255
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     ffc:	26 2f       	mov	r18, r22
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	4c 0f       	add	r20, r28
    100a:	5d 1f       	adc	r21, r29
    100c:	24 0f       	add	r18, r20
    100e:	35 1f       	adc	r19, r21
    1010:	f9 01       	movw	r30, r18
    1012:	60 81       	ld	r22, Z
    1014:	68 0f       	add	r22, r24
    1016:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	87 e7       	ldi	r24, 0x77	; 119
    101c:	95 e0       	ldi	r25, 0x05	; 5
_ZN17LiquidCrystal_I2C9setCursorEhh.constprop.87():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
    101e:	28 96       	adiw	r28, 0x08	; 8
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    102e:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00001032 <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	08 95       	ret

0000103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.75():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	8c 01       	movw	r16, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1048:	d0 e0       	ldi	r29, 0x00	; 0
    104a:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    104c:	f8 01       	movw	r30, r16
    104e:	ec 0f       	add	r30, r28
    1050:	fd 1f       	adc	r31, r29
    1052:	64 91       	lpm	r22, Z
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
    1054:	66 23       	and	r22, r22
    1056:	39 f0       	breq	.+14     	; 0x1066 <Print::print(__FlashStringHelper const*) [clone .constprop.75]+0x28>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	87 e7       	ldi	r24, 0x77	; 119
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
_ZN5Print5printEPK19__FlashStringHelper.constprop.75():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
    1062:	21 96       	adiw	r28, 0x01	; 1
    1064:	f3 cf       	rjmp	.-26     	; 0x104c <Print::print(__FlashStringHelper const*) [clone .constprop.75]+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
    1066:	ce 01       	movw	r24, r28
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>:
_ZN17LiquidCrystal_I2C5clearEv.constprop.74():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	87 e7       	ldi	r24, 0x77	; 119
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    107e:	80 ed       	ldi	r24, 0xD0	; 208
    1080:	97 e0       	ldi	r25, 0x07	; 7
    1082:	0c 94 08 04 	jmp	0x810	; 0x810 <delayMicroseconds>

00001086 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret

0000108c <queueButton(unsigned char)>:
_Z11queueButtonh():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:200

// ----------------------------------------------------------------------------------------------------
void queueButton (byte button)
{
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
    108c:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <buttonBufferCount>
    1090:	25 30       	cpi	r18, 0x05	; 5
    1092:	09 f0       	breq	.+2      	; 0x1096 <queueButton(unsigned char)+0xa>
    1094:	90 f4       	brcc	.+36     	; 0x10ba <queueButton(unsigned char)+0x2e>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:202
  {
    buttonBuffer [button_write_pos] = button;
    1096:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <button_write_pos>
    109a:	e9 2f       	mov	r30, r25
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	e8 54       	subi	r30, 0x48	; 72
    10a0:	fc 4f       	sbci	r31, 0xFC	; 252
    10a2:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:203
    buttonBufferCount++;
    10a4:	2f 5f       	subi	r18, 0xFF	; 255
    10a6:	20 93 be 03 	sts	0x03BE, r18	; 0x8003be <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:204
    button_write_pos++;
    10aa:	9f 5f       	subi	r25, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:206
    
    if (button_write_pos >= sizeof (buttonBuffer))
    10ac:	95 30       	cpi	r25, 0x05	; 5
    10ae:	18 f4       	brcc	.+6      	; 0x10b6 <queueButton(unsigned char)+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:204
  // Serial.println(button);
  if (buttonBufferCount <= sizeof (buttonBuffer))
  {
    buttonBuffer [button_write_pos] = button;
    buttonBufferCount++;
    button_write_pos++;
    10b0:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <button_write_pos>
    10b4:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:208
    
    if (button_write_pos >= sizeof (buttonBuffer))
    {
      button_write_pos = 0;
    10b6:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <button_write_pos>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:211
    }
  }
}
    10ba:	08 95       	ret

000010bc <stopPreSong()>:
_Z11stopPreSongv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1433
}
void stopPreSong()
{
    digitalWrite(AMP, LOW);
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	8c e0       	ldi	r24, 0x0C	; 12
    10c0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	86 e1       	ldi	r24, 0x16	; 22
    10ca:	0c 94 88 05 	jmp	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>

000010ce <TriggerPlayer()>:
_Z13TriggerPlayerv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:641
        }
    }
}

void TriggerPlayer()
{
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:643
    // Validate Player Morning
    if (CurTime >= config.PlayerMorTime && CurTime <= config.PlayerMorTime + config.PlayerMorDur && config.PlayerMorDur != 0)
    10d2:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <config+0x3e>
    10d6:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <config+0x3f>
    10da:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <config+0x40>
    10de:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <config+0x41>
    10e2:	40 91 c3 03 	lds	r20, 0x03C3	; 0x8003c3 <CurTime>
    10e6:	50 91 c4 03 	lds	r21, 0x03C4	; 0x8003c4 <CurTime+0x1>
    10ea:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <CurTime+0x2>
    10ee:	70 91 c6 03 	lds	r23, 0x03C6	; 0x8003c6 <CurTime+0x3>
    10f2:	48 17       	cp	r20, r24
    10f4:	59 07       	cpc	r21, r25
    10f6:	6a 07       	cpc	r22, r26
    10f8:	7b 07       	cpc	r23, r27
    10fa:	1c f1       	brlt	.+70     	; 0x1142 <TriggerPlayer()+0x74>
    10fc:	00 91 9f 04 	lds	r16, 0x049F	; 0x80049f <config+0x42>
    1100:	10 91 a0 04 	lds	r17, 0x04A0	; 0x8004a0 <config+0x43>
    1104:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <config+0x44>
    1108:	30 91 a2 04 	lds	r19, 0x04A2	; 0x8004a2 <config+0x45>
    110c:	80 0f       	add	r24, r16
    110e:	91 1f       	adc	r25, r17
    1110:	a2 1f       	adc	r26, r18
    1112:	b3 1f       	adc	r27, r19
    1114:	84 17       	cp	r24, r20
    1116:	95 07       	cpc	r25, r21
    1118:	a6 07       	cpc	r26, r22
    111a:	b7 07       	cpc	r27, r23
    111c:	94 f0       	brlt	.+36     	; 0x1142 <TriggerPlayer()+0x74>
    111e:	01 2b       	or	r16, r17
    1120:	02 2b       	or	r16, r18
    1122:	03 2b       	or	r16, r19
    1124:	71 f0       	breq	.+28     	; 0x1142 <TriggerPlayer()+0x74>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:645
    {
        if (PlayerONMor == 0)
    1126:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <PlayerONMor>
    112a:	81 11       	cpse	r24, r1
    112c:	50 c0       	rjmp	.+160    	; 0x11ce <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:647
        {
            PlayerONMor = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:658
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
    1134:	85 e0       	ldi	r24, 0x05	; 5
    1136:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:677
                lcd.clear();
                appMode = APP_NORMAL_MODE;
            }
        }
    }
}
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:659
    {
        if (PlayerONEve == 0)
        {
            PlayerONEve = 1;
            appMode = APP_PLAYER_MODE;
            lcd.clear();
    113e:	0c 94 39 08 	jmp	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:653
            appMode = APP_PLAYER_MODE;
            lcd.clear();
        }
    }
    // Validate Player Evening
    else if (CurTime >= config.PlayerEveTime && CurTime <= config.PlayerEveTime + config.PlayerEveDur && config.PlayerEveDur != 0)
    1142:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <config+0x46>
    1146:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <config+0x47>
    114a:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <config+0x48>
    114e:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <config+0x49>
    1152:	48 17       	cp	r20, r24
    1154:	59 07       	cpc	r21, r25
    1156:	6a 07       	cpc	r22, r26
    1158:	7b 07       	cpc	r23, r27
    115a:	ec f0       	brlt	.+58     	; 0x1196 <TriggerPlayer()+0xc8>
    115c:	00 91 a7 04 	lds	r16, 0x04A7	; 0x8004a7 <config+0x4a>
    1160:	10 91 a8 04 	lds	r17, 0x04A8	; 0x8004a8 <config+0x4b>
    1164:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <config+0x4c>
    1168:	30 91 aa 04 	lds	r19, 0x04AA	; 0x8004aa <config+0x4d>
    116c:	80 0f       	add	r24, r16
    116e:	91 1f       	adc	r25, r17
    1170:	a2 1f       	adc	r26, r18
    1172:	b3 1f       	adc	r27, r19
    1174:	84 17       	cp	r24, r20
    1176:	95 07       	cpc	r25, r21
    1178:	a6 07       	cpc	r26, r22
    117a:	b7 07       	cpc	r27, r23
    117c:	64 f0       	brlt	.+24     	; 0x1196 <TriggerPlayer()+0xc8>
    117e:	01 2b       	or	r16, r17
    1180:	02 2b       	or	r16, r18
    1182:	03 2b       	or	r16, r19
    1184:	41 f0       	breq	.+16     	; 0x1196 <TriggerPlayer()+0xc8>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:655
    {
        if (PlayerONEve == 0)
    1186:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <PlayerONEve>
    118a:	81 11       	cpse	r24, r1
    118c:	20 c0       	rjmp	.+64     	; 0x11ce <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:657
        {
            PlayerONEve = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <PlayerONEve>
    1194:	cf cf       	rjmp	.-98     	; 0x1134 <TriggerPlayer()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:664
            lcd.clear();
        }
    }
    else
    {
        if (appMode == APP_PLAYER_MODE)
    1196:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <appMode>
    119a:	85 30       	cpi	r24, 0x05	; 5
    119c:	c1 f4       	brne	.+48     	; 0x11ce <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:666
        {
            if (PlayerONEve == 1 || PlayerONMor == 1)
    119e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <PlayerONEve>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	21 f0       	breq	.+8      	; 0x11ae <TriggerPlayer()+0xe0>
    11a6:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <PlayerONMor>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	81 f4       	brne	.+32     	; 0x11ce <TriggerPlayer()+0x100>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:668
            {
                digitalWrite(AMP, LOW);
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	8c e0       	ldi	r24, 0x0C	; 12
    11b2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:669
                digitalWrite(AUDCONT, LOW);
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	8a e0       	ldi	r24, 0x0A	; 10
    11ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:670
                PlayerONMor = 0;
    11be:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:671
                PlayerONEve = 0;
    11c2:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <PlayerONEve>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:672
                lcd.clear();
    11c6:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:673
                appMode = APP_NORMAL_MODE;
    11ca:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:677
            }
        }
    }
}
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]>:
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:176
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    11d4:	2f 92       	push	r2
    11d6:	3f 92       	push	r3
    11d8:	4f 92       	push	r4
    11da:	5f 92       	push	r5
    11dc:	6f 92       	push	r6
    11de:	7f 92       	push	r7
    11e0:	8f 92       	push	r8
    11e2:	9f 92       	push	r9
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	6c 01       	movw	r12, r24
    11fa:	3b 01       	movw	r6, r22
    11fc:	7a 01       	movw	r14, r20
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:177
  size_t pos = 0;
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	00 e0       	ldi	r16, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
  }
  twi_state = TWI_MRX;
    1202:	55 24       	eor	r5, r5
    1204:	53 94       	inc	r5
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  twi_sendStop = sendStop;
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1206:	44 24       	eor	r4, r4
    1208:	4a 94       	dec	r4
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    120a:	85 ee       	ldi	r24, 0xE5	; 229
    120c:	38 2e       	mov	r3, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    120e:	95 ec       	ldi	r25, 0xC5	; 197
    1210:	29 2e       	mov	r2, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1212:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <twi_state>
    1216:	81 11       	cpse	r24, r1
    1218:	fc cf       	rjmp	.-8      	; 0x1212 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x3e>
    121a:	d6 01       	movw	r26, r12
    121c:	14 96       	adiw	r26, 0x04	; 4
    121e:	8d 91       	ld	r24, X+
    1220:	9c 91       	ld	r25, X
    1222:	e7 01       	movw	r28, r14
    1224:	c0 1b       	sub	r28, r16
    1226:	d1 0b       	sbc	r29, r17
    1228:	8c 17       	cp	r24, r28
    122a:	9d 07       	cpc	r25, r29
    122c:	08 f4       	brcc	.+2      	; 0x1230 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x5c>
    122e:	ec 01       	movw	r28, r24
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:195
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1230:	f6 01       	movw	r30, r12
    1232:	90 81       	ld	r25, Z
    1234:	8c 2f       	mov	r24, r28
    1236:	c1 32       	cpi	r28, 0x21	; 33
    1238:	08 f0       	brcs	.+2      	; 0x123c <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x68>
    123a:	80 e2       	ldi	r24, 0x20	; 32
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    123c:	50 92 32 04 	sts	0x0432, r5	; 0x800432 <twi_state>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:181
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	97 01       	movw	r18, r14
    1244:	2c 1b       	sub	r18, r28
    1246:	3d 0b       	sbc	r19, r29
    1248:	02 17       	cp	r16, r18
    124a:	13 07       	cpc	r17, r19
    124c:	08 f4       	brcc	.+2      	; 0x1250 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x7c>
    124e:	40 e0       	ldi	r20, 0x00	; 0
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    1250:	40 93 31 04 	sts	0x0431, r20	; 0x800431 <twi_sendStop>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1254:	40 92 30 04 	sts	0x0430, r4	; 0x800430 <twi_error>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1258:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_masterBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    125c:	2f ef       	ldi	r18, 0xFF	; 255
    125e:	28 0f       	add	r18, r24
    1260:	20 93 2e 04 	sts	0x042E, r18	; 0x80042e <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1264:	50 92 0d 04 	sts	0x040D, r5	; 0x80040d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    1268:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <twi_slarw>
    126c:	99 0f       	add	r25, r25
    126e:	92 2b       	or	r25, r18
    1270:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    1274:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <twi_inRepStart>
    1278:	91 30       	cpi	r25, 0x01	; 1
    127a:	e9 f5       	brne	.+122    	; 0x12f6 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x122>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    127c:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
    1280:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <twi_slarw>
    1284:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    1288:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    128c:	93 fd       	sbrc	r25, 3
    128e:	f8 cf       	rjmp	.-16     	; 0x1280 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xac>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1290:	20 92 bc 00 	sts	0x00BC, r2	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1294:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <twi_state>
    1298:	91 30       	cpi	r25, 0x01	; 1
    129a:	e1 f3       	breq	.-8      	; 0x1294 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    129c:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <twi_masterBufferIndex>
    12a0:	98 17       	cp	r25, r24
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xd4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    12a4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_masterBufferIndex>
    12a8:	ae e0       	ldi	r26, 0x0E	; 14
    12aa:	b4 e0       	ldi	r27, 0x04	; 4
    12ac:	ec ee       	ldi	r30, 0xEC	; 236
    12ae:	f3 e0       	ldi	r31, 0x03	; 3
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    12b0:	90 e0       	ldi	r25, 0x00	; 0
twi_readFrom():
    12b2:	98 13       	cpse	r25, r24
    12b4:	23 c0       	rjmp	.+70     	; 0x12fc <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x128>
requestFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    12b6:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <TwoWire::rxBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    12ba:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <TwoWire::rxBufferLength>
_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:198
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
#endif

  if (recv != len) {
    12be:	9c 17       	cp	r25, r28
    12c0:	1d 06       	cpc	r1, r29
    12c2:	d1 f5       	brne	.+116    	; 0x1338 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x164>
    12c4:	43 01       	movw	r8, r6
    12c6:	80 0e       	add	r8, r16
    12c8:	91 1e       	adc	r9, r17
    12ca:	54 01       	movw	r10, r8
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    12cc:	c5 01       	movw	r24, r10
    12ce:	88 19       	sub	r24, r8
    12d0:	99 09       	sbc	r25, r9
    12d2:	8c 17       	cp	r24, r28
    12d4:	9d 07       	cpc	r25, r29
    12d6:	b0 f4       	brcc	.+44     	; 0x1304 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x130>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:208
    buffer[i] = _wire->read();
    12d8:	d6 01       	movw	r26, r12
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	dc 01       	movw	r26, r24
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	02 84       	ldd	r0, Z+10	; 0x0a
    12e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    12ea:	e0 2d       	mov	r30, r0
    12ec:	09 95       	icall
    12ee:	f5 01       	movw	r30, r10
    12f0:	81 93       	st	Z+, r24
    12f2:	5f 01       	movw	r10, r30
    12f4:	eb cf       	rjmp	.-42     	; 0x12cc <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xf8>
twi_readFrom():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    12f6:	30 92 bc 00 	sts	0x00BC, r3	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    12fa:	cc cf       	rjmp	.-104    	; 0x1294 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xc0>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    12fc:	2d 91       	ld	r18, X+
    12fe:	21 93       	st	Z+, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1300:	9f 5f       	subi	r25, 0xFF	; 255
    1302:	d7 cf       	rjmp	.-82     	; 0x12b2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0xde>
_ZN18Adafruit_I2CDevice4readEPhjb.constprop.54():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:184
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
    1304:	0c 0f       	add	r16, r28
    1306:	1d 1f       	adc	r17, r29
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    1308:	0e 15       	cp	r16, r14
    130a:	1f 05       	cpc	r17, r15
    130c:	08 f4       	brcc	.+2      	; 0x1310 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x13c>
    130e:	81 cf       	rjmp	.-254    	; 0x1212 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x3e>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:186
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    1310:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:187
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	9f 90       	pop	r9
    1328:	8f 90       	pop	r8
    132a:	7f 90       	pop	r7
    132c:	6f 90       	pop	r6
    132e:	5f 90       	pop	r5
    1330:	4f 90       	pop	r4
    1332:	3f 90       	pop	r3
    1334:	2f 90       	pop	r2
    1336:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:183
  while (pos < len) {
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	eb cf       	rjmp	.-42     	; 0x1312 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]+0x13e>

0000133c <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>:
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:37
/*!
    @brief  Set the date and time in the DS1307
    @param dt DateTime object containing the desired date/time
*/
/**************************************************************************/
void RTC_DS1307::adjust(const DateTime &dt) {
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	28 97       	sbiw	r28, 0x08	; 8
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	dc 01       	movw	r26, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:38
  uint8_t buffer[8] = {0,
    1356:	8e 01       	movw	r16, r28
    1358:	0f 5f       	subi	r16, 0xFF	; 255
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	86 e0       	ldi	r24, 0x06	; 6
    135e:	f8 01       	movw	r30, r16
    1360:	11 92       	st	Z+, r1
    1362:	8a 95       	dec	r24
    1364:	e9 f7       	brne	.-6      	; 0x1360 <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]+0x24>
    1366:	15 96       	adiw	r26, 0x05	; 5
    1368:	3c 91       	ld	r19, X
    136a:	15 97       	sbiw	r26, 0x05	; 5
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	83 2f       	mov	r24, r19
    1370:	62 2f       	mov	r22, r18
    1372:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__udivmodqi4>
    1376:	98 2f       	mov	r25, r24
    1378:	88 0f       	add	r24, r24
    137a:	89 0f       	add	r24, r25
    137c:	88 0f       	add	r24, r24
    137e:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       0,
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	14 96       	adiw	r26, 0x04	; 4
    1384:	3c 91       	ld	r19, X
    1386:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    1388:	83 2f       	mov	r24, r19
    138a:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__udivmodqi4>
    138e:	98 2f       	mov	r25, r24
    1390:	88 0f       	add	r24, r24
    1392:	89 0f       	add	r24, r25
    1394:	88 0f       	add	r24, r24
    1396:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    1398:	8b 83       	std	Y+3, r24	; 0x03
    139a:	13 96       	adiw	r26, 0x03	; 3
    139c:	3c 91       	ld	r19, X
    139e:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13a0:	83 2f       	mov	r24, r19
    13a2:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__udivmodqi4>
    13a6:	98 2f       	mov	r25, r24
    13a8:	88 0f       	add	r24, r24
    13aa:	89 0f       	add	r24, r25
    13ac:	88 0f       	add	r24, r24
    13ae:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13b0:	8c 83       	std	Y+4, r24	; 0x04
    13b2:	12 96       	adiw	r26, 0x02	; 2
    13b4:	3c 91       	ld	r19, X
    13b6:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13b8:	83 2f       	mov	r24, r19
    13ba:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__udivmodqi4>
    13be:	98 2f       	mov	r25, r24
    13c0:	88 0f       	add	r24, r24
    13c2:	89 0f       	add	r24, r25
    13c4:	88 0f       	add	r24, r24
    13c6:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13c8:	8e 83       	std	Y+6, r24	; 0x06
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	3c 91       	ld	r19, X
    13ce:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13d0:	83 2f       	mov	r24, r19
    13d2:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__udivmodqi4>
    13d6:	98 2f       	mov	r25, r24
    13d8:	88 0f       	add	r24, r24
    13da:	89 0f       	add	r24, r25
    13dc:	88 0f       	add	r24, r24
    13de:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13e0:	8f 83       	std	Y+7, r24	; 0x07
    13e2:	3c 91       	ld	r19, X
_ZN7RTC_I2C7bin2bcdEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:340
    13e4:	83 2f       	mov	r24, r19
    13e6:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__udivmodqi4>
    13ea:	98 2f       	mov	r25, r24
    13ec:	88 0f       	add	r24, r24
    13ee:	89 0f       	add	r24, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	83 0f       	add	r24, r19
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:45
    13f4:	88 87       	std	Y+8, r24	; 0x08
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:46
  i2c_dev->write(buffer, 8);
    13f6:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <rtc>
    13fa:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    13fe:	fc 01       	movw	r30, r24
    1400:	24 81       	ldd	r18, Z+4	; 0x04
    1402:	35 81       	ldd	r19, Z+5	; 0x05
    1404:	28 30       	cpi	r18, 0x08	; 8
    1406:	31 05       	cpc	r19, r1
    1408:	80 f0       	brcs	.+32     	; 0x142a <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]+0xee>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    140a:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    140c:	31 e0       	ldi	r19, 0x01	; 1
    140e:	30 93 33 04 	sts	0x0433, r19	; 0x800433 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    1412:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1416:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    141a:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
write():
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	48 e0       	ldi	r20, 0x08	; 8
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	b8 01       	movw	r22, r16
    1426:	0e 94 a6 06 	call	0xd4c	; 0xd4c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
_ZN10RTC_DS13076adjustERK8DateTime.constprop.23():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:47
}
    142a:	28 96       	adiw	r28, 0x08	; 8
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <RTC_DS1307::now() [clone .constprop.31]>:
_ZN10RTC_DS13073nowEv.constprop.31():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:55
/*!
    @brief  Get the current date and time from the DS1307
    @return DateTime object containing the current date and time
*/
/**************************************************************************/
DateTime RTC_DS1307::now() {
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	00 d0       	rcall	.+0      	; 0x144e <RTC_DS1307::now() [clone .constprop.31]+0xe>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <RTC_DS1307::now() [clone .constprop.31]+0x10>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <RTC_DS1307::now() [clone .constprop.31]+0x12>
    1452:	1f 92       	push	r1
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	8c 01       	movw	r16, r24
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:57
  uint8_t buffer[7];
  buffer[0] = 0;
    145a:	19 82       	std	Y+1, r1	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:58
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    145c:	e0 90 e4 03 	lds	r14, 0x03E4	; 0x8003e4 <rtc>
    1460:	f0 90 e5 03 	lds	r15, 0x03E5	; 0x8003e5 <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    1464:	d7 01       	movw	r26, r14
    1466:	14 96       	adiw	r26, 0x04	; 4
    1468:	8d 91       	ld	r24, X+
    146a:	9c 91       	ld	r25, X
    146c:	15 97       	sbiw	r26, 0x05	; 5
    146e:	89 2b       	or	r24, r25
    1470:	e9 f0       	breq	.+58     	; 0x14ac <RTC_DS1307::now() [clone .constprop.31]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1472:	8c 91       	ld	r24, X
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    147a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    147e:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    1482:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
write():
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	c7 01       	movw	r24, r14
    1494:	0e 94 a6 06 	call	0xd4c	; 0xd4c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
write_then_read():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:243
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    1498:	88 23       	and	r24, r24
    149a:	41 f0       	breq	.+16     	; 0x14ac <RTC_DS1307::now() [clone .constprop.31]+0x6c>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
    return false;
  }

  return read(read_buffer, read_len);
    149c:	47 e0       	ldi	r20, 0x07	; 7
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	be 01       	movw	r22, r28
    14a2:	6f 5f       	subi	r22, 0xFF	; 255
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	c7 01       	movw	r24, r14
    14a8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]>
_ZN10RTC_DS13073nowEv.constprop.31():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:62

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	ef 77       	andi	r30, 0x7F	; 127
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	fb 80       	ldd	r15, Y+3	; 0x03
    14b4:	4d 81       	ldd	r20, Y+5	; 0x05
    14b6:	5e 81       	ldd	r21, Y+6	; 0x06
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:60
DateTime RTC_DS1307::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
  i2c_dev->write_then_read(buffer, 1, buffer, 7);

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5]),
    14b8:	8f 81       	ldd	r24, Y+7	; 0x07
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
      @brief  Convert a binary coded decimal value to binary. RTC stores
    time/date values as BCD.
      @param val BCD value
      @return Binary value
  */
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	94 e0       	ldi	r25, 0x04	; 4
    14c0:	35 95       	asr	r19
    14c2:	27 95       	ror	r18
    14c4:	9a 95       	dec	r25
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <RTC_DS1307::now() [clone .constprop.31]+0x80>
    14c8:	92 2f       	mov	r25, r18
    14ca:	99 0f       	add	r25, r25
    14cc:	99 0f       	add	r25, r25
    14ce:	29 1b       	sub	r18, r25
    14d0:	22 0f       	add	r18, r18
    14d2:	28 0f       	add	r18, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    14d4:	d8 01       	movw	r26, r16
    14d6:	2c 93       	st	X, r18
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    14d8:	85 2f       	mov	r24, r21
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	24 e0       	ldi	r18, 0x04	; 4
    14de:	95 95       	asr	r25
    14e0:	87 95       	ror	r24
    14e2:	2a 95       	dec	r18
    14e4:	e1 f7       	brne	.-8      	; 0x14de <RTC_DS1307::now() [clone .constprop.31]+0x9e>
    14e6:	98 2f       	mov	r25, r24
    14e8:	99 0f       	add	r25, r25
    14ea:	99 0f       	add	r25, r25
    14ec:	89 1b       	sub	r24, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	85 0f       	add	r24, r21
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	8c 93       	st	X, r24
    14f6:	11 97       	sbiw	r26, 0x01	; 1
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    14f8:	64 2f       	mov	r22, r20
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	34 e0       	ldi	r19, 0x04	; 4
    14fe:	75 95       	asr	r23
    1500:	67 95       	ror	r22
    1502:	3a 95       	dec	r19
    1504:	e1 f7       	brne	.-8      	; 0x14fe <RTC_DS1307::now() [clone .constprop.31]+0xbe>
    1506:	86 2f       	mov	r24, r22
    1508:	88 0f       	add	r24, r24
    150a:	88 0f       	add	r24, r24
    150c:	68 1b       	sub	r22, r24
    150e:	66 0f       	add	r22, r22
    1510:	64 0f       	add	r22, r20
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    1512:	12 96       	adiw	r26, 0x02	; 2
    1514:	6c 93       	st	X, r22
    1516:	12 97       	sbiw	r26, 0x02	; 2
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    1518:	4f 2d       	mov	r20, r15
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	64 e0       	ldi	r22, 0x04	; 4
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	6a 95       	dec	r22
    1524:	e1 f7       	brne	.-8      	; 0x151e <RTC_DS1307::now() [clone .constprop.31]+0xde>
    1526:	84 2f       	mov	r24, r20
    1528:	88 0f       	add	r24, r24
    152a:	88 0f       	add	r24, r24
    152c:	48 1b       	sub	r20, r24
    152e:	44 0f       	add	r20, r20
    1530:	4f 0d       	add	r20, r15
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    1532:	13 96       	adiw	r26, 0x03	; 3
    1534:	4c 93       	st	X, r20
    1536:	13 97       	sbiw	r26, 0x03	; 3
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    1538:	2f 2f       	mov	r18, r31
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	74 e0       	ldi	r23, 0x04	; 4
    153e:	35 95       	asr	r19
    1540:	27 95       	ror	r18
    1542:	7a 95       	dec	r23
    1544:	e1 f7       	brne	.-8      	; 0x153e <RTC_DS1307::now() [clone .constprop.31]+0xfe>
    1546:	82 2f       	mov	r24, r18
    1548:	88 0f       	add	r24, r24
    154a:	88 0f       	add	r24, r24
    154c:	28 1b       	sub	r18, r24
    154e:	22 0f       	add	r18, r18
    1550:	2f 0f       	add	r18, r31
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    1552:	14 96       	adiw	r26, 0x04	; 4
    1554:	2c 93       	st	X, r18
    1556:	14 97       	sbiw	r26, 0x04	; 4
_ZN7RTC_I2C7bcd2binEh():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
    1558:	8e 2f       	mov	r24, r30
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	f4 e0       	ldi	r31, 0x04	; 4
    155e:	95 95       	asr	r25
    1560:	87 95       	ror	r24
    1562:	fa 95       	dec	r31
    1564:	e1 f7       	brne	.-8      	; 0x155e <RTC_DS1307::now() [clone .constprop.31]+0x11e>
    1566:	98 2f       	mov	r25, r24
    1568:	99 0f       	add	r25, r25
    156a:	99 0f       	add	r25, r25
    156c:	89 1b       	sub	r24, r25
    156e:	88 0f       	add	r24, r24
    1570:	8e 0f       	add	r24, r30
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    1572:	15 96       	adiw	r26, 0x05	; 5
    1574:	8c 93       	st	X, r24
_ZN10RTC_DS13073nowEv.constprop.31():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:63
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
}
    1576:	c8 01       	movw	r24, r16
    1578:	27 96       	adiw	r28, 0x07	; 7
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	08 95       	ret

00001592 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
    1598:	88 81       	ld	r24, Y
    159a:	99 81       	ldd	r25, Y+1	; 0x01
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	11 f0       	breq	.+4      	; 0x15a4 <String::invalidate()+0x12>
    15a0:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    15a4:	19 82       	std	Y+1, r1	; 0x01
    15a6:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    15a8:	1d 82       	std	Y+5, r1	; 0x05
    15aa:	1c 82       	std	Y+4, r1	; 0x04
    15ac:	1b 82       	std	Y+3, r1	; 0x03
    15ae:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>:
_ZN5Print11printNumberEmh.constprop.8():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    15b6:	8f 92       	push	r8
    15b8:	9f 92       	push	r9
    15ba:	af 92       	push	r10
    15bc:	bf 92       	push	r11
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	a1 97       	sbiw	r28, 0x21	; 33
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    15d6:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    15d8:	42 30       	cpi	r20, 0x02	; 2
    15da:	08 f4       	brcc	.+2      	; 0x15de <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x28>
    15dc:	4a e0       	ldi	r20, 0x0A	; 10
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5d       	subi	r16, 0xDF	; 223
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    15e4:	84 2e       	mov	r8, r20
    15e6:	91 2c       	mov	r9, r1
    15e8:	b1 2c       	mov	r11, r1
    15ea:	a1 2c       	mov	r10, r1
    15ec:	a5 01       	movw	r20, r10
    15ee:	94 01       	movw	r18, r8
    15f0:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    15f4:	e6 2f       	mov	r30, r22
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    15f6:	b9 01       	movw	r22, r18
    15f8:	ca 01       	movw	r24, r20
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    15fa:	ea 30       	cpi	r30, 0x0A	; 10
    15fc:	44 f5       	brge	.+80     	; 0x164e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x98>
    15fe:	e0 5d       	subi	r30, 0xD0	; 208
    1600:	d8 01       	movw	r26, r16
    1602:	ee 93       	st	-X, r30
    1604:	8d 01       	movw	r16, r26
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    1606:	23 2b       	or	r18, r19
    1608:	24 2b       	or	r18, r20
    160a:	25 2b       	or	r18, r21
    160c:	79 f7       	brne	.-34     	; 0x15ec <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x36>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	80 e0       	ldi	r24, 0x00	; 0
write():
    1612:	10 97       	sbiw	r26, 0x00	; 0
    1614:	69 f0       	breq	.+26     	; 0x1630 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x7a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    1616:	fd 01       	movw	r30, r26
    1618:	01 90       	ld	r0, Z+
    161a:	00 20       	and	r0, r0
    161c:	e9 f7       	brne	.-6      	; 0x1618 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x62>
    161e:	31 97       	sbiw	r30, 0x01	; 1
    1620:	af 01       	movw	r20, r30
    1622:	4a 1b       	sub	r20, r26
    1624:	5b 0b       	sbc	r21, r27
    1626:	bd 01       	movw	r22, r26
    1628:	87 e7       	ldi	r24, 0x77	; 119
    162a:	95 e0       	ldi	r25, 0x05	; 5
    162c:	0e 94 ed 02 	call	0x5da	; 0x5da <Print::write(unsigned char const*, unsigned int)>
_ZN5Print11printNumberEmh.constprop.8():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    1630:	a1 96       	adiw	r28, 0x21	; 33
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    164e:	e9 5c       	subi	r30, 0xC9	; 201
    1650:	d7 cf       	rjmp	.-82     	; 0x1600 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]+0x4a>

00001652 <Print::print(int, int) [clone .constprop.4]>:
_ZN5Print5printEii.constprop.4():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    165a:	6c 01       	movw	r12, r24
    165c:	99 0f       	add	r25, r25
    165e:	ee 08       	sbc	r14, r14
    1660:	ff 08       	sbc	r15, r15
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1662:	f7 fe       	sbrs	r15, 7
    1664:	16 c0       	rjmp	.+44     	; 0x1692 <Print::print(int, int) [clone .constprop.4]+0x40>
write():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	6d e2       	ldi	r22, 0x2D	; 45
    166a:	87 e7       	ldi	r24, 0x77	; 119
    166c:	95 e0       	ldi	r25, 0x05	; 5
    166e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    1672:	66 27       	eor	r22, r22
    1674:	77 27       	eor	r23, r23
    1676:	cb 01       	movw	r24, r22
    1678:	6c 19       	sub	r22, r12
    167a:	7d 09       	sbc	r23, r13
    167c:	8e 09       	sbc	r24, r14
    167e:	9f 09       	sbc	r25, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1680:	4a e0       	ldi	r20, 0x0A	; 10
    1682:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>
    1686:	01 96       	adiw	r24, 0x01	; 1
_ZN5Print5printEii.constprop.4():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	cf 90       	pop	r12
    1690:	08 95       	ret
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1692:	4a e0       	ldi	r20, 0x0A	; 10
    1694:	c7 01       	movw	r24, r14
    1696:	b6 01       	movw	r22, r12
_ZN5Print5printEii.constprop.4():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
print():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    16a0:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.8]>

000016a4 <Print::print(char const*) [clone .constprop.100]>:
_ZN5Print5printEPKc.constprop.100():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f0       	breq	.+26     	; 0x16c2 <Print::print(char const*) [clone .constprop.100]+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    16a8:	fc 01       	movw	r30, r24
    16aa:	01 90       	ld	r0, Z+
    16ac:	00 20       	and	r0, r0
    16ae:	e9 f7       	brne	.-6      	; 0x16aa <Print::print(char const*) [clone .constprop.100]+0x6>
    16b0:	31 97       	sbiw	r30, 0x01	; 1
    16b2:	af 01       	movw	r20, r30
    16b4:	48 1b       	sub	r20, r24
    16b6:	59 0b       	sbc	r21, r25
    16b8:	bc 01       	movw	r22, r24
    16ba:	87 e7       	ldi	r24, 0x77	; 119
    16bc:	95 e0       	ldi	r25, 0x05	; 5
    16be:	0c 94 ed 02 	jmp	0x5da	; 0x5da <Print::write(unsigned char const*, unsigned int)>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	08 95       	ret

000016c8 <inttostr(char*, short)>:
_Z8inttostrPcs():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:79
  pulseWidth++;
}

// ----------------------------------------------------------------------------------------------------
char *inttostr(char *dest, short integer)
{
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	ec 01       	movw	r28, r24
    16d2:	cb 01       	movw	r24, r22
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:80
  if (integer == 0)
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	59 f4       	brne	.+22     	; 0x16ee <inttostr(char*, short)+0x26>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:82
  {
    strcpy(dest, "0");
    16d8:	66 ef       	ldi	r22, 0xF6	; 246
    16da:	71 e0       	ldi	r23, 0x01	; 1
    16dc:	ce 01       	movw	r24, r28
    16de:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:112
    {
      dest[idx]=(integer % 10) + '0';
    }
  }
  return dest;
}
    16e2:	ce 01       	movw	r24, r28
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:86
  {
    strcpy(dest, "0");
  }
  else
  {
    byte sign = 0;
    16ee:	20 e0       	ldi	r18, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:88
    
    if (integer < 0)
    16f0:	77 ff       	sbrs	r23, 7
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <inttostr(char*, short)+0x38>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:91
    {
      sign = 1;
      dest[0] = '-';
    16f4:	2d e2       	ldi	r18, 0x2D	; 45
    16f6:	28 83       	st	Y, r18
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:92
      integer = integer * -1;
    16f8:	91 95       	neg	r25
    16fa:	81 95       	neg	r24
    16fc:	91 09       	sbc	r25, r1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:90
  {
    byte sign = 0;
    
    if (integer < 0)
    {
      sign = 1;
    16fe:	21 e0       	ldi	r18, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    1700:	80 31       	cpi	r24, 0x10	; 16
    1702:	37 e2       	ldi	r19, 0x27	; 39
    1704:	93 07       	cpc	r25, r19
    1706:	0c f5       	brge	.+66     	; 0x174a <inttostr(char*, short)+0x82>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    1708:	88 3e       	cpi	r24, 0xE8	; 232
    170a:	33 e0       	ldi	r19, 0x03	; 3
    170c:	93 07       	cpc	r25, r19
    170e:	fc f4       	brge	.+62     	; 0x174e <inttostr(char*, short)+0x86>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:99
    else if (integer > 99) idx = 2;
    1710:	32 e0       	ldi	r19, 0x02	; 2
    1712:	84 36       	cpi	r24, 0x64	; 100
    1714:	91 05       	cpc	r25, r1
    1716:	2c f4       	brge	.+10     	; 0x1722 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:100
    else if (integer > 9) idx = 1;
    1718:	31 e0       	ldi	r19, 0x01	; 1
    171a:	8a 30       	cpi	r24, 0x0A	; 10
    171c:	91 05       	cpc	r25, r1
    171e:	0c f4       	brge	.+2      	; 0x1722 <inttostr(char*, short)+0x5a>
    1720:	30 e0       	ldi	r19, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:103
    else if (integer > 0) idx = 0;    

    idx += sign;
    1722:	23 0f       	add	r18, r19
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:104
    dest[idx+1] = 0;
    1724:	fe 01       	movw	r30, r28
    1726:	e2 0f       	add	r30, r18
    1728:	f1 1d       	adc	r31, r1
    172a:	11 82       	std	Z+1, r1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:108
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    {
      dest[idx]=(integer % 10) + '0';
    172c:	0a e0       	ldi	r16, 0x0A	; 10
    172e:	10 e0       	ldi	r17, 0x00	; 0
    1730:	fe 01       	movw	r30, r28
    1732:	e2 0f       	add	r30, r18
    1734:	f1 1d       	adc	r31, r1
    1736:	b8 01       	movw	r22, r16
    1738:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__divmodhi4>
    173c:	80 5d       	subi	r24, 0xD0	; 208
    173e:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:106
    else if (integer > 0) idx = 0;    

    idx += sign;
    dest[idx+1] = 0;
    
    for (; idx >=0 && integer !=0; integer /= 10, idx--)
    1740:	cb 01       	movw	r24, r22
    1742:	21 50       	subi	r18, 0x01	; 1
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	a1 f7       	brne	.-24     	; 0x1730 <inttostr(char*, short)+0x68>
    1748:	cc cf       	rjmp	.-104    	; 0x16e2 <inttostr(char*, short)+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:97
      integer = integer * -1;
    }

    byte idx = 0;

    if (integer > 9999) idx = 4;
    174a:	34 e0       	ldi	r19, 0x04	; 4
    174c:	ea cf       	rjmp	.-44     	; 0x1722 <inttostr(char*, short)+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:98
    else if (integer > 999) idx = 3;
    174e:	33 e0       	ldi	r19, 0x03	; 3
    1750:	e8 cf       	rjmp	.-48     	; 0x1722 <inttostr(char*, short)+0x5a>

00001752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>:
_Z4rpadPcPKcch.constprop.99():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:140
  return dest;
}


// ----------------------------------------------------------------------------------------------------
char *rpad (char *dest, const char *str, char chr, unsigned char width)
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	bc 01       	movw	r22, r24
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:142
{
  unsigned char len = strlen(str);
    1758:	ec 01       	movw	r28, r24
    175a:	09 90       	ld	r0, Y+
    175c:	00 20       	and	r0, r0
    175e:	e9 f7       	brne	.-6      	; 0x175a <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x8>
    1760:	21 97       	sbiw	r28, 0x01	; 1
    1762:	c8 1b       	sub	r28, r24
    1764:	d9 0b       	sbc	r29, r25
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:146
  
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
    1766:	c0 31       	cpi	r28, 0x10	; 16
    1768:	08 f5       	brcc	.+66     	; 0x17ac <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:148
  {
    strcpy(dest, str);
    176a:	80 ef       	ldi	r24, 0xF0	; 240
    176c:	94 e0       	ldi	r25, 0x04	; 4
    176e:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:149
    strcat(dest, padc(chr, width - len));
    1772:	80 e1       	ldi	r24, 0x10	; 16
    1774:	8c 1b       	sub	r24, r28
    1776:	ef ed       	ldi	r30, 0xDF	; 223
    1778:	f4 e0       	ldi	r31, 0x04	; 4
padc():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    177a:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    177c:	20 e2       	ldi	r18, 0x20	; 32
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    177e:	af 01       	movw	r20, r30
    1780:	4f 5d       	subi	r20, 0xDF	; 223
    1782:	54 40       	sbci	r21, 0x04	; 4
    1784:	48 17       	cp	r20, r24
    1786:	59 07       	cpc	r21, r25
    1788:	14 f4       	brge	.+4      	; 0x178e <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x3c>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    178a:	21 93       	st	Z+, r18
    178c:	f8 cf       	rjmp	.-16     	; 0x177e <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    178e:	81 52       	subi	r24, 0x21	; 33
    1790:	9b 4f       	sbci	r25, 0xFB	; 251
    1792:	fc 01       	movw	r30, r24
    1794:	10 82       	st	Z, r1
_Z4rpadPcPKcch.constprop.99():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:149
  width = width > LCD_COLS ? LCD_COLS : width;
  
  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
    1796:	6f ed       	ldi	r22, 0xDF	; 223
    1798:	74 e0       	ldi	r23, 0x04	; 4
    179a:	80 ef       	ldi	r24, 0xF0	; 240
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <strcat>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:156
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    17a2:	80 ef       	ldi	r24, 0xF0	; 240
    17a4:	94 e0       	ldi	r25, 0x04	; 4
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:153
    strcpy(dest, str);
    strcat(dest, padc(chr, width - len));
  }
  else
  {
    strncpy(dest, str, width+1);
    17ac:	41 e1       	ldi	r20, 0x11	; 17
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	80 ef       	ldi	r24, 0xF0	; 240
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strncpy>
    17b8:	f4 cf       	rjmp	.-24     	; 0x17a2 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]+0x50>

000017ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>:
_Z4lpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:159
  }
  return dest;
}

// ----------------------------------------------------------------------------------------------------
char *lpad (char *dest, const char *str, char chr, unsigned char width)
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	ec 01       	movw	r28, r24
    17c4:	8b 01       	movw	r16, r22
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:161
{
  unsigned char len = strlen(str);
    17c6:	fb 01       	movw	r30, r22
    17c8:	01 90       	ld	r0, Z+
    17ca:	00 20       	and	r0, r0
    17cc:	e9 f7       	brne	.-6      	; 0x17c8 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0xe>
    17ce:	31 97       	sbiw	r30, 0x01	; 1
    17d0:	e6 1b       	sub	r30, r22
    17d2:	f7 0b       	sbc	r31, r23
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:165
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
    17d4:	e0 31       	cpi	r30, 0x10	; 16
    17d6:	28 f5       	brcc	.+74     	; 0x1822 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x68>
    17d8:	e4 17       	cp	r30, r20
    17da:	18 f5       	brcc	.+70     	; 0x1822 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x68>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:167
  {
    strcpy(dest, padc(chr, width - len));
    17dc:	4e 1b       	sub	r20, r30
padc():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:183
// ----------------------------------------------------------------------------------------------------
char *padc (char chr, unsigned char count)
{
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;
    17de:	41 31       	cpi	r20, 0x11	; 17
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x2a>
    17e2:	40 e1       	ldi	r20, 0x10	; 16
    17e4:	ef ed       	ldi	r30, 0xDF	; 223
    17e6:	f4 e0       	ldi	r31, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:186

  int i;
  for (i=0; i < count; i++)
    17e8:	50 e0       	ldi	r21, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    17ea:	80 e3       	ldi	r24, 0x30	; 48
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:186
  static char strbuf[LCD_COLS + 1];

  count = (count > LCD_COLS) ? LCD_COLS : count;

  int i;
  for (i=0; i < count; i++)
    17ec:	9f 01       	movw	r18, r30
    17ee:	2f 5d       	subi	r18, 0xDF	; 223
    17f0:	34 40       	sbci	r19, 0x04	; 4
    17f2:	24 17       	cp	r18, r20
    17f4:	35 07       	cpc	r19, r21
    17f6:	14 f4       	brge	.+4      	; 0x17fc <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x42>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:188
  {
    strbuf[i] = chr;
    17f8:	81 93       	st	Z+, r24
    17fa:	f8 cf       	rjmp	.-16     	; 0x17ec <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x32>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:190
  }
  strbuf[i] = 0;
    17fc:	41 52       	subi	r20, 0x21	; 33
    17fe:	5b 4f       	sbci	r21, 0xFB	; 251
    1800:	fa 01       	movw	r30, r20
    1802:	10 82       	st	Z, r1
_Z4lpadPcPKcch.constprop.98():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:167
  
  width = width > LCD_COLS ? LCD_COLS : width;

  if (len < LCD_COLS && width > len)
  {
    strcpy(dest, padc(chr, width - len));
    1804:	6f ed       	ldi	r22, 0xDF	; 223
    1806:	74 e0       	ldi	r23, 0x04	; 4
    1808:	ce 01       	movw	r24, r28
    180a:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:168
    strcat(dest, str);
    180e:	b8 01       	movw	r22, r16
    1810:	ce 01       	movw	r24, r28
    1812:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <strcat>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:175
  else
  {
    strncpy(dest, str, width+1);
  }
  return dest;
}
    1816:	ce 01       	movw	r24, r28
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:172
    strcpy(dest, padc(chr, width - len));
    strcat(dest, str);
  }
  else
  {
    strncpy(dest, str, width+1);
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	4f 5f       	subi	r20, 0xFF	; 255
    1826:	5f 4f       	sbci	r21, 0xFF	; 255
    1828:	b8 01       	movw	r22, r16
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strncpy>
    1830:	f2 cf       	rjmp	.-28     	; 0x1816 <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]+0x5c>

00001832 <Config::save() [clone .constprop.26]>:
_ZN6Config4saveEv.constprop.26():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:246



void Config::save()
{
  eeprom_write_block(this, (void *)0, sizeof (Config));
    1832:	4d e6       	ldi	r20, 0x6D	; 109
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	8d e5       	ldi	r24, 0x5D	; 93
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <eeprom_write_block>

00001842 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146

unsigned char String::reserve(unsigned int size)
{
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
    184c:	88 81       	ld	r24, Y
    184e:	99 81       	ldd	r25, Y+1	; 0x01
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	59 f0       	breq	.+22     	; 0x186a <String::reserve(unsigned int)+0x28>
    1854:	2a 81       	ldd	r18, Y+2	; 0x02
    1856:	3b 81       	ldd	r19, Y+3	; 0x03
    1858:	26 17       	cp	r18, r22
    185a:	37 07       	cpc	r19, r23
    185c:	30 f0       	brcs	.+12     	; 0x186a <String::reserve(unsigned int)+0x28>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    185e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret
    186a:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    186c:	6f 5f       	subi	r22, 0xFF	; 255
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	0e 94 16 30 	call	0x602c	; 0x602c <realloc>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	59 f0       	breq	.+22     	; 0x188e <String::reserve(unsigned int)+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    1878:	99 83       	std	Y+1, r25	; 0x01
    187a:	88 83       	st	Y, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    187c:	1b 83       	std	Y+3, r17	; 0x03
    187e:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1880:	2c 81       	ldd	r18, Y+4	; 0x04
    1882:	3d 81       	ldd	r19, Y+5	; 0x05
    1884:	23 2b       	or	r18, r19
    1886:	59 f7       	brne	.-42     	; 0x185e <String::reserve(unsigned int)+0x1c>
    1888:	fc 01       	movw	r30, r24
    188a:	10 82       	st	Z, r1
    188c:	e8 cf       	rjmp	.-48     	; 0x185e <String::reserve(unsigned int)+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	e7 cf       	rjmp	.-50     	; 0x1860 <String::reserve(unsigned int)+0x1e>

00001892 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18a0:	fb 01       	movw	r30, r22
    18a2:	e0 80       	ld	r14, Z
    18a4:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    18a6:	e1 14       	cp	r14, r1
    18a8:	f1 04       	cpc	r15, r1
    18aa:	11 f1       	breq	.+68     	; 0x18f0 <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18ac:	04 81       	ldd	r16, Z+4	; 0x04
    18ae:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    18b0:	01 15       	cp	r16, r1
    18b2:	11 05       	cpc	r17, r1
    18b4:	a9 f0       	breq	.+42     	; 0x18e0 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	08 0f       	add	r16, r24
    18bc:	19 1f       	adc	r17, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    18be:	b8 01       	movw	r22, r16
    18c0:	ce 01       	movw	r24, r28
    18c2:	0e 94 21 0c 	call	0x1842	; 0x1842 <String::reserve(unsigned int)>
    18c6:	88 23       	and	r24, r24
    18c8:	99 f0       	breq	.+38     	; 0x18f0 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    18ca:	28 81       	ld	r18, Y
    18cc:	39 81       	ldd	r19, Y+1	; 0x01
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	b7 01       	movw	r22, r14
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    18dc:	1d 83       	std	Y+5, r17	; 0x05
    18de:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    18e0:	ce 01       	movw	r24, r28
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	08 95       	ret
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    18f0:	ce 01       	movw	r24, r28
    18f2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <String::invalidate()>
    18f6:	f4 cf       	rjmp	.-24     	; 0x18e0 <operator+(StringSumHelper const&, String const&)+0x4e>

000018f8 <String::String(char const*)>:
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	7b 01       	movw	r14, r22
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1908:	19 82       	std	Y+1, r1	; 0x01
    190a:	18 82       	st	Y, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    190c:	1b 82       	std	Y+3, r1	; 0x03
    190e:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1910:	1d 82       	std	Y+5, r1	; 0x05
    1912:	1c 82       	std	Y+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    1914:	fb 01       	movw	r30, r22
    1916:	01 90       	ld	r0, Z+
    1918:	00 20       	and	r0, r0
    191a:	e9 f7       	brne	.-6      	; 0x1916 <String::String(char const*)+0x1e>
    191c:	31 97       	sbiw	r30, 0x01	; 1
    191e:	8f 01       	movw	r16, r30
    1920:	06 1b       	sub	r16, r22
    1922:	17 0b       	sbc	r17, r23
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    1924:	b8 01       	movw	r22, r16
    1926:	0e 94 21 0c 	call	0x1842	; 0x1842 <String::reserve(unsigned int)>
    192a:	81 11       	cpse	r24, r1
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <String::String(char const*)+0x48>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    192e:	ce 01       	movw	r24, r28
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    invalidate();
    193c:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <String::invalidate()>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
    return *this;
  }
  len = length;
    1940:	1d 83       	std	Y+5, r17	; 0x05
    1942:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    1944:	b7 01       	movw	r22, r14
    1946:	88 81       	ld	r24, Y
    1948:	99 81       	ldd	r25, Y+1	; 0x01
_ZN6StringC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    1956:	0c 94 f0 30 	jmp	0x61e0	; 0x61e0 <strcpy>

0000195a <fmt(char*, unsigned char, ...)>:
_Z3fmtPchz():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:117
}


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
    195a:	6f 92       	push	r6
    195c:	7f 92       	push	r7
    195e:	8f 92       	push	r8
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	e9 88       	ldd	r14, Y+17	; 0x11
    197c:	fa 88       	ldd	r15, Y+18	; 0x12
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:122
  unsigned char buflen = 0;
  char* str;
  
  va_list ap;
  va_start(ap, argc);
    197e:	fe 01       	movw	r30, r28
    1980:	74 96       	adiw	r30, 0x14	; 20
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:124

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1982:	d1 2c       	mov	r13, r1
    1984:	c1 2c       	mov	r12, r1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:118


// ----------------------------------------------------------------------------------------------------
char *fmt (char *dest, unsigned char argc, ... )
{
  unsigned char buflen = 0;
    1986:	71 2c       	mov	r7, r1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1988:	ab 88       	ldd	r10, Y+19	; 0x13
    198a:	b1 2c       	mov	r11, r1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:128
  {
    str = va_arg(ap, char*);
    unsigned char len = strlen(str);
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    198c:	80 e1       	ldi	r24, 0x10	; 16
    198e:	68 2e       	mov	r6, r24
    1990:	87 2d       	mov	r24, r7
    1992:	90 e0       	ldi	r25, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    1994:	ca 14       	cp	r12, r10
    1996:	db 04       	cpc	r13, r11
    1998:	2c f5       	brge	.+74     	; 0x19e4 <fmt(char*, unsigned char, ...)+0x8a>
    199a:	2f e0       	ldi	r18, 0x0F	; 15
    199c:	27 15       	cp	r18, r7
    199e:	10 f1       	brcs	.+68     	; 0x19e4 <fmt(char*, unsigned char, ...)+0x8a>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    19a0:	4f 01       	movw	r8, r30
    19a2:	22 e0       	ldi	r18, 0x02	; 2
    19a4:	82 0e       	add	r8, r18
    19a6:	91 1c       	adc	r9, r1
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:127
    unsigned char len = strlen(str);
    19ac:	fb 01       	movw	r30, r22
    19ae:	01 90       	ld	r0, Z+
    19b0:	00 20       	and	r0, r0
    19b2:	e9 f7       	brne	.-6      	; 0x19ae <fmt(char*, unsigned char, ...)+0x54>
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	8f 01       	movw	r16, r30
    19b8:	06 1b       	sub	r16, r22
    19ba:	17 0b       	sbc	r17, r23
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:128
    unsigned char cpylen = (buflen + len) > LCD_COLS ? LCD_COLS - buflen : len;
    19bc:	9c 01       	movw	r18, r24
    19be:	20 0f       	add	r18, r16
    19c0:	31 1d       	adc	r19, r1
    19c2:	46 2d       	mov	r20, r6
    19c4:	47 19       	sub	r20, r7
    19c6:	21 31       	cpi	r18, 0x11	; 17
    19c8:	31 05       	cpc	r19, r1
    19ca:	0c f4       	brge	.+2      	; 0x19ce <fmt(char*, unsigned char, ...)+0x74>
    19cc:	40 2f       	mov	r20, r16
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:130

    strncpy((dest + buflen), str, cpylen);
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	8e 0d       	add	r24, r14
    19d2:	9f 1d       	adc	r25, r15
    19d4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strncpy>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:131
    buflen += len;
    19d8:	70 0e       	add	r7, r16
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:124
  char* str;
  
  va_list ap;
  va_start(ap, argc);

  for (int i = 0; i < argc && buflen < LCD_COLS; i++)
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	c8 1a       	sub	r12, r24
    19de:	d8 0a       	sbc	r13, r24
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:126
  {
    str = va_arg(ap, char*);
    19e0:	f4 01       	movw	r30, r8
    19e2:	d6 cf       	rjmp	.-84     	; 0x1990 <fmt(char*, unsigned char, ...)+0x36>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:134

    strncpy((dest + buflen), str, cpylen);
    buflen += len;
  }
  va_end(ap);
  dest[buflen] = 0;
    19e4:	8e 0d       	add	r24, r14
    19e6:	9f 1d       	adc	r25, r15
    19e8:	fc 01       	movw	r30, r24
    19ea:	10 82       	st	Z, r1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:136
  return dest;
}
    19ec:	c7 01       	movw	r24, r14
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	bf 90       	pop	r11
    1a00:	af 90       	pop	r10
    1a02:	9f 90       	pop	r9
    1a04:	8f 90       	pop	r8
    1a06:	7f 90       	pop	r7
    1a08:	6f 90       	pop	r6
    1a0a:	08 95       	ret

00001a0c <toDurStr(char*, long, char) [clone .constprop.97]>:
_Z8toDurStrPclc.constprop.97():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:98

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
  return buf;
}

char *toDurStr(char *buf, long timeval, char separator)
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	60 97       	sbiw	r28, 0x10	; 16
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:100
{
  char sepstr[] = {separator, 0};
    1a2c:	18 8a       	std	Y+16, r1	; 0x10
    1a2e:	1f 86       	std	Y+15, r1	; 0x0f
    1a30:	2a e3       	ldi	r18, 0x3A	; 58
    1a32:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:102

  short hours = timeval / 60;
    1a34:	2c e3       	ldi	r18, 0x3C	; 60
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
    1a40:	6b 01       	movw	r12, r22
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:108
  short mins = timeval % 60;
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hours);
    1a42:	b9 01       	movw	r22, r18
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:109
  lpad(h, intbuf, '0', 2);
    1a4c:	8e 01       	movw	r16, r28
    1a4e:	04 5f       	subi	r16, 0xF4	; 244
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	42 e0       	ldi	r20, 0x02	; 2
    1a54:	be 01       	movw	r22, r28
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:110
  inttostr(intbuf, mins);
    1a60:	b6 01       	movw	r22, r12
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:111
  lpad(m, intbuf, '0', 2);
    1a6a:	7e 01       	movw	r14, r28
    1a6c:	89 e0       	ldi	r24, 0x09	; 9
    1a6e:	e8 0e       	add	r14, r24
    1a70:	f1 1c       	adc	r15, r1
    1a72:	42 e0       	ldi	r20, 0x02	; 2
    1a74:	be 01       	movw	r22, r28
    1a76:	6f 5f       	subi	r22, 0xFF	; 255
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	c7 01       	movw	r24, r14
    1a7c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:113

  fmt(buf, 3, h, sepstr, m);
    1a80:	ff 92       	push	r15
    1a82:	ef 92       	push	r14
    1a84:	ce 01       	movw	r24, r28
    1a86:	0f 96       	adiw	r24, 0x0f	; 15
    1a88:	9f 93       	push	r25
    1a8a:	8f 93       	push	r24
    1a8c:	1f 93       	push	r17
    1a8e:	0f 93       	push	r16
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	8f 93       	push	r24
    1a94:	8e ec       	ldi	r24, 0xCE	; 206
    1a96:	94 e0       	ldi	r25, 0x04	; 4
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:114
  return buf;
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:115
}
    1aaa:	8e ec       	ldi	r24, 0xCE	; 206
    1aac:	94 e0       	ldi	r25, 0x04	; 4
    1aae:	60 96       	adiw	r28, 0x10	; 16
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	08 95       	ret

00001acc <toTimeStr(char*, long, char) [clone .constprop.96]>:
_Z9toTimeStrPclc.constprop.96():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:78

  SerialNo = 315;
  DataYear = 2022;
}

char *toTimeStr(char *buf, long timeval, char separator)
    1acc:	8f 92       	push	r8
    1ace:	9f 92       	push	r9
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	60 97       	sbiw	r28, 0x10	; 16
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:80
{
  char sepstr[] = {separator, 0};
    1af4:	18 8a       	std	Y+16, r1	; 0x10
    1af6:	1f 86       	std	Y+15, r1	; 0x0f
    1af8:	2a e3       	ldi	r18, 0x3A	; 58
    1afa:	2f 87       	std	Y+15, r18	; 0x0f
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:82

  short hours = timeval / 60;
    1afc:	2c e3       	ldi	r18, 0x3C	; 60
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
    1b08:	4b 01       	movw	r8, r22
    1b0a:	79 01       	movw	r14, r18
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:84
  short mins = timeval % 60;
  short hrs = hours > 12 ? hours - 12 : hours;
    1b0c:	2d 30       	cpi	r18, 0x0D	; 13
    1b0e:	31 05       	cpc	r19, r1
    1b10:	14 f0       	brlt	.+4      	; 0x1b16 <toTimeStr(char*, long, char) [clone .constprop.96]+0x4a>
    1b12:	2c 50       	subi	r18, 0x0C	; 12
    1b14:	31 09       	sbc	r19, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:89
  char intbuf[8];
  char h[3];
  char m[3];

  inttostr(intbuf, hrs);
    1b16:	b9 01       	movw	r22, r18
    1b18:	ce 01       	movw	r24, r28
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:90
  lpad(h, intbuf, '0', 2);
    1b20:	8e 01       	movw	r16, r28
    1b22:	04 5f       	subi	r16, 0xF4	; 244
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	42 e0       	ldi	r20, 0x02	; 2
    1b28:	be 01       	movw	r22, r28
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	c8 01       	movw	r24, r16
    1b30:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:91
  inttostr(intbuf, mins);
    1b34:	b4 01       	movw	r22, r8
    1b36:	ce 01       	movw	r24, r28
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:92
  lpad(m, intbuf, '0', 2);
    1b3e:	6e 01       	movw	r12, r28
    1b40:	99 e0       	ldi	r25, 0x09	; 9
    1b42:	c9 0e       	add	r12, r25
    1b44:	d1 1c       	adc	r13, r1
    1b46:	42 e0       	ldi	r20, 0x02	; 2
    1b48:	be 01       	movw	r22, r28
    1b4a:	6f 5f       	subi	r22, 0xFF	; 255
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	c6 01       	movw	r24, r12
    1b50:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:94

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1b54:	8c e0       	ldi	r24, 0x0C	; 12
    1b56:	e8 16       	cp	r14, r24
    1b58:	f1 04       	cpc	r15, r1
    1b5a:	74 f5       	brge	.+92     	; 0x1bb8 <toTimeStr(char*, long, char) [clone .constprop.96]+0xec>
    1b5c:	88 eb       	ldi	r24, 0xB8	; 184
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
    1b64:	df 92       	push	r13
    1b66:	cf 92       	push	r12
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0f 96       	adiw	r24, 0x0f	; 15
    1b6c:	9f 93       	push	r25
    1b6e:	8f 93       	push	r24
    1b70:	1f 93       	push	r17
    1b72:	0f 93       	push	r16
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	8f 93       	push	r24
    1b78:	8e ec       	ldi	r24, 0xCE	; 206
    1b7a:	94 e0       	ldi	r25, 0x04	; 4
    1b7c:	9f 93       	push	r25
    1b7e:	8f 93       	push	r24
    1b80:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:95
  return buf;
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:96
}
    1b8e:	8e ec       	ldi	r24, 0xCE	; 206
    1b90:	94 e0       	ldi	r25, 0x04	; 4
    1b92:	60 96       	adiw	r28, 0x10	; 16
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
    1bb4:	8f 90       	pop	r8
    1bb6:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:94
  inttostr(intbuf, hrs);
  lpad(h, intbuf, '0', 2);
  inttostr(intbuf, mins);
  lpad(m, intbuf, '0', 2);

  fmt(buf, 4, h, sepstr, m, (hours >= 12 ? " PM" : " AM"));
    1bb8:	81 eb       	ldi	r24, 0xB1	; 177
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	d1 cf       	rjmp	.-94     	; 0x1b60 <toTimeStr(char*, long, char) [clone .constprop.96]+0x94>

00001bbe <Config::getFormattedStr(unsigned char) [clone .constprop.94]>:
_ZN6Config15getFormattedStrEh.constprop.94():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:144
    return newtime;

  return timeval;
}

char *Config::getFormattedStr(byte cmdId)
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	65 97       	sbiw	r28, 0x15	; 21
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:148
{
  char intbuf[8];
  char h[3];
  switch (cmdId)
    1bde:	82 50       	subi	r24, 0x02	; 2
    1be0:	8f 31       	cpi	r24, 0x1F	; 31
    1be2:	08 f0       	brcs	.+2      	; 0x1be6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x28>
    1be4:	01 c2       	rjmp	.+1026   	; 0x1fe8 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x42a>
    1be6:	e8 2f       	mov	r30, r24
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	e7 50       	subi	r30, 0x07	; 7
    1bec:	f2 4f       	sbci	r31, 0xF2	; 242
    1bee:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <__tablejump2__>
    1bf2:	18 0e       	add	r1, r24
    1bf4:	6e 0e       	add	r6, r30
    1bf6:	f4 0f       	add	r31, r20
    1bf8:	95 0e       	add	r9, r21
    1bfa:	c1 0e       	add	r12, r17
    1bfc:	b1 0f       	add	r27, r17
    1bfe:	d7 0f       	add	r29, r23
    1c00:	e0 0e       	add	r14, r16
    1c02:	f4 0f       	add	r31, r20
    1c04:	ec 0e       	add	r14, r28
    1c06:	16 0f       	add	r17, r22
    1c08:	f4 0f       	add	r31, r20
    1c0a:	f1 0e       	add	r15, r17
    1c0c:	22 0f       	add	r18, r18
    1c0e:	f4 0f       	add	r31, r20
    1c10:	2b 0f       	add	r18, r27
    1c12:	3a 0f       	add	r19, r26
    1c14:	48 0f       	add	r20, r24
    1c16:	6a 0f       	add	r22, r26
    1c18:	f1 0f       	add	r31, r17
    1c1a:	f4 0f       	add	r31, r20
    1c1c:	6f 0f       	add	r22, r31
    1c1e:	78 0f       	add	r23, r24
    1c20:	f4 0f       	add	r31, r20
    1c22:	81 0f       	add	r24, r17
    1c24:	8a 0f       	add	r24, r26
    1c26:	95 0f       	add	r25, r21
    1c28:	9e 0f       	add	r25, r30
    1c2a:	f4 0f       	add	r31, r20
    1c2c:	ac 0f       	add	r26, r28
    1c2e:	a7 0f       	add	r26, r23
toDateStr():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:119
  return buf;
}

char *toDateStr(char *buf, char separator)
{
  char sepstr[] = {separator, 0};
    1c30:	1d 8a       	std	Y+21, r1	; 0x15
    1c32:	1c 8a       	std	Y+20, r1	; 0x14
    1c34:	8f e2       	ldi	r24, 0x2F	; 47
    1c36:	8c 8b       	std	Y+20, r24	; 0x14
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:123
  char intbuf[8];
  char dat[3], mon[3], year[5];

  inttostr(intbuf, StDate);
    1c38:	60 91 5b 04 	lds	r22, 0x045B	; 0x80045b <StDate>
    1c3c:	70 91 5c 04 	lds	r23, 0x045C	; 0x80045c <StDate+0x1>
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:124
  lpad(dat, intbuf, '0', 2);
    1c48:	8e 01       	movw	r16, r28
    1c4a:	0f 5e       	subi	r16, 0xEF	; 239
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	42 e0       	ldi	r20, 0x02	; 2
    1c50:	be 01       	movw	r22, r28
    1c52:	6f 5f       	subi	r22, 0xFF	; 255
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	c8 01       	movw	r24, r16
    1c58:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:125
  inttostr(intbuf, StMonth);
    1c5c:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <StMonth>
    1c60:	70 91 5a 04 	lds	r23, 0x045A	; 0x80045a <StMonth+0x1>
    1c64:	ce 01       	movw	r24, r28
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:126
  lpad(mon, intbuf, '0', 2);
    1c6c:	7e 01       	movw	r14, r28
    1c6e:	8e e0       	ldi	r24, 0x0E	; 14
    1c70:	e8 0e       	add	r14, r24
    1c72:	f1 1c       	adc	r15, r1
    1c74:	42 e0       	ldi	r20, 0x02	; 2
    1c76:	be 01       	movw	r22, r28
    1c78:	6f 5f       	subi	r22, 0xFF	; 255
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:127
  inttostr(intbuf, StYear);
    1c82:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <StYear>
    1c86:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <StYear+0x1>
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:128
  lpad(year, intbuf, '0', 4);
    1c92:	6e 01       	movw	r12, r28
    1c94:	99 e0       	ldi	r25, 0x09	; 9
    1c96:	c9 0e       	add	r12, r25
    1c98:	d1 1c       	adc	r13, r1
    1c9a:	44 e0       	ldi	r20, 0x04	; 4
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	c6 01       	movw	r24, r12
    1ca4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:130

  fmt(buf, 5, dat, sepstr, mon, sepstr, year);
    1ca8:	df 92       	push	r13
    1caa:	cf 92       	push	r12
    1cac:	ce 01       	movw	r24, r28
    1cae:	44 96       	adiw	r24, 0x14	; 20
    1cb0:	9f 93       	push	r25
    1cb2:	8f 93       	push	r24
    1cb4:	ff 92       	push	r15
    1cb6:	ef 92       	push	r14
    1cb8:	9f 93       	push	r25
    1cba:	8f 93       	push	r24
    1cbc:	1f 93       	push	r17
    1cbe:	0f 93       	push	r16
    1cc0:	85 e0       	ldi	r24, 0x05	; 5
    1cc2:	8f 93       	push	r24
    1cc4:	8e ec       	ldi	r24, 0xCE	; 206
    1cc6:	94 e0       	ldi	r25, 0x04	; 4
    1cc8:	9f 93       	push	r25
    1cca:	8f 93       	push	r24
    1ccc:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
_ZN6Config15getFormattedStrEh.constprop.94():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:230
    break;    
  case mnuCmdAlarmTime:
    fmt(strbuf, 3, Alarm[AlarmTimeCursor], " : ", AlarmTime[AlarmTimeCursor] == true ? "ON" : "OFF");
    break;
  case mnuCmdPanchangamTime:
    fmt(strbuf, 3, Panchangam[PanchangamCursor], " : ", PanchangamTime[PanchangamCursor] == true ? "ON" : "OFF");
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x14a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:157
  // case mnuCmdSetYear:
    toDateStr(strbuf);
    break;
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    1cdc:	a0 91 cc 04 	lds	r26, 0x04CC	; 0x8004cc <StHr>
    1ce0:	b0 91 cd 04 	lds	r27, 0x04CD	; 0x8004cd <StHr+0x1>
    1ce4:	2c e3       	ldi	r18, 0x3C	; 60
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <__usmulhisi3>
    1cec:	00 91 ca 04 	lds	r16, 0x04CA	; 0x8004ca <StMin>
    1cf0:	10 91 cb 04 	lds	r17, 0x04CB	; 0x8004cb <StMin+0x1>
    1cf4:	01 2e       	mov	r0, r17
    1cf6:	00 0c       	add	r0, r0
    1cf8:	22 0b       	sbc	r18, r18
    1cfa:	33 0b       	sbc	r19, r19
    1cfc:	60 0f       	add	r22, r16
    1cfe:	71 1f       	adc	r23, r17
    1d00:	82 1f       	adc	r24, r18
    1d02:	93 1f       	adc	r25, r19
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:203
    inttostr(intbuf, EveSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1d04:	0e 94 66 0d 	call	0x1acc	; 0x1acc <toTimeStr(char*, long, char) [clone .constprop.96]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:240
  default:
    strcpy(strbuf, NotImp);
    break;
  }
  return strbuf;
}
    1d08:	8e ec       	ldi	r24, 0xCE	; 206
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	65 96       	adiw	r28, 0x15	; 21
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:160
  case mnuCmdSetTime:
  // case mnuCmdSetMin:
    toTimeStr(strbuf, ((StHr*60L) + StMin));
    break;
  case mnuCmdStartTime:
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    1d2a:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <config+0xf>
    1d2e:	70 91 6d 04 	lds	r23, 0x046D	; 0x80046d <config+0x10>
    1d32:	6d 30       	cpi	r22, 0x0D	; 13
    1d34:	71 05       	cpc	r23, r1
    1d36:	14 f0       	brlt	.+4      	; 0x1d3c <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x17e>
    1d38:	6c 50       	subi	r22, 0x0C	; 12
    1d3a:	71 09       	sbc	r23, r1
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:161
    lpad(h, intbuf, '0', 2);
    1d44:	8e 01       	movw	r16, r28
    1d46:	07 5f       	subi	r16, 0xF7	; 247
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	42 e0       	ldi	r20, 0x02	; 2
    1d4c:	be 01       	movw	r22, r28
    1d4e:	6f 5f       	subi	r22, 0xFF	; 255
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	c8 01       	movw	r24, r16
    1d54:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:162
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    1d58:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <config+0xf>
    1d5c:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <config+0x10>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:167
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1d60:	0c 97       	sbiw	r24, 0x0c	; 12
    1d62:	5c f5       	brge	.+86     	; 0x1dba <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1fc>
    1d64:	85 eb       	ldi	r24, 0xB5	; 181
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	9f 93       	push	r25
    1d6a:	8f 93       	push	r24
    1d6c:	1f 93       	push	r17
    1d6e:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:190
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	8f 93       	push	r24
    1d74:	8e ec       	ldi	r24, 0xCE	; 206
    1d76:	94 e0       	ldi	r25, 0x04	; 4
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    1d80:	a7 cf       	rjmp	.-178    	; 0x1cd0 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x112>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:165
    inttostr(intbuf, (startTime > 12 ? startTime-12 : startTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, startTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdEndTime:
    inttostr(intbuf, (endTime > 12 ? endTime - 12 : endTime));
    1d82:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <config+0x11>
    1d86:	70 91 6f 04 	lds	r23, 0x046F	; 0x80046f <config+0x12>
    1d8a:	6d 30       	cpi	r22, 0x0D	; 13
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	14 f0       	brlt	.+4      	; 0x1d94 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1d6>
    1d90:	6c 50       	subi	r22, 0x0C	; 12
    1d92:	71 09       	sbc	r23, r1
    1d94:	ce 01       	movw	r24, r28
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:166
    lpad(h, intbuf, '0', 2);
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	07 5f       	subi	r16, 0xF7	; 247
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	42 e0       	ldi	r20, 0x02	; 2
    1da4:	be 01       	movw	r22, r28
    1da6:	6f 5f       	subi	r22, 0xFF	; 255
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:167
    fmt(strbuf, 2, h, endTime >= 12 ? ":00 PM" : ":00 AM");
    1db0:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <config+0x11>
    1db4:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <config+0x12>
    1db8:	d3 cf       	rjmp	.-90     	; 0x1d60 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1a2>
    1dba:	8e ea       	ldi	r24, 0xAE	; 174
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	d4 cf       	rjmp	.-88     	; 0x1d68 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1aa>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:170
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 1, Song1_Count != 0 ? inttostr(intbuf, Song1_Count) : "OFF");
    1dc0:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <config+0x1a>
    1dc4:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <config+0x1b>
    1dc8:	61 15       	cp	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	c1 f1       	breq	.+112    	; 0x1e3e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x280>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:224
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1dce:	ce 01       	movw	r24, r28
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
    1dd6:	30 c0       	rjmp	.+96     	; 0x1e38 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x27a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:173
    break;
  case mnuCmdSlogamCount:
    fmt(strbuf, 1, Song1_Count != 0 ? inttostr(intbuf, Song1_Count) : "OFF");
    break;
  case mnuCmdVolume:
    fmt(strbuf, 1, inttostr(intbuf, vol));
    1dd8:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <config+0x15>
    1ddc:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <config+0x16>
    1de0:	f6 cf       	rjmp	.-20     	; 0x1dce <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x210>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:176
    break;
  case mnuCmdselectTime:
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    1de2:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <demoTime>
    1de6:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <demoTime+0x1>
    1dea:	b8 01       	movw	r22, r16
    1dec:	0d 30       	cpi	r16, 0x0D	; 13
    1dee:	11 05       	cpc	r17, r1
    1df0:	14 f0       	brlt	.+4      	; 0x1df6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x238>
    1df2:	6c 50       	subi	r22, 0x0C	; 12
    1df4:	71 09       	sbc	r23, r1
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:177
    lpad(h, intbuf, '0', 2);
    1dfe:	7e 01       	movw	r14, r28
    1e00:	99 e0       	ldi	r25, 0x09	; 9
    1e02:	e9 0e       	add	r14, r25
    1e04:	f1 1c       	adc	r15, r1
    1e06:	42 e0       	ldi	r20, 0x02	; 2
    1e08:	be 01       	movw	r22, r28
    1e0a:	6f 5f       	subi	r22, 0xFF	; 255
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	c7 01       	movw	r24, r14
    1e10:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:178
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    1e14:	85 eb       	ldi	r24, 0xB5	; 181
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	0c 30       	cpi	r16, 0x0C	; 12
    1e1a:	11 05       	cpc	r17, r1
    1e1c:	14 f0       	brlt	.+4      	; 0x1e22 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x264>
    1e1e:	8e ea       	ldi	r24, 0xAE	; 174
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	9f 93       	push	r25
    1e24:	8f 93       	push	r24
    1e26:	ff 92       	push	r15
    1e28:	ef 92       	push	r14
    1e2a:	a2 cf       	rjmp	.-188    	; 0x1d70 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1b2>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:181
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1e2c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <config+0x19>
    1e30:	88 23       	and	r24, r24
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x280>
    1e34:	8e e4       	ldi	r24, 0x4E	; 78
    1e36:	92 e0       	ldi	r25, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:224
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1e38:	9f 93       	push	r25
    1e3a:	8f 93       	push	r24
    1e3c:	3d c0       	rjmp	.+122    	; 0x1eb8 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2fa>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:181
    inttostr(intbuf, (demoTime > 12 ? demoTime-12 : demoTime));
    lpad(h, intbuf, '0', 2);
    fmt(strbuf, 2, h, demoTime >= 12 ? ":00 PM" : ":00 AM");
    break;
  case mnuCmdSchlZone:
    fmt(strbuf, 1, SchlZone == 0 ? "OFF" : "ON");
    1e3e:	8c eb       	ldi	r24, 0xBC	; 188
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	fa cf       	rjmp	.-12     	; 0x1e38 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x27a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:184
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    1e44:	80 ec       	ldi	r24, 0xC0	; 192
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	9f 93       	push	r25
    1e4a:	8f 93       	push	r24
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:190
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1e50:	9f 93       	push	r25
    1e52:	8f 93       	push	r24
    1e54:	8d cf       	rjmp	.-230    	; 0x1d70 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x1b2>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:187
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1e56:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <config+0x22>
    1e5a:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <config+0x23>
    1e5e:	63 30       	cpi	r22, 0x03	; 3
    1e60:	71 05       	cpc	r23, r1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2a8>
    1e64:	c8 c0       	rjmp	.+400    	; 0x1ff6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x438>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:190
    break;
  case mnuCmdEveSong1Time:
    fmt(strbuf, 2, EveSong1Time == 3 ? "OFF" : inttostr(intbuf, EveSong1Time), EveSong1Time == 3 ? "" : " PM");
    1e66:	2a ed       	ldi	r18, 0xDA	; 218
    1e68:	31 e0       	ldi	r19, 0x01	; 1
    1e6a:	8c eb       	ldi	r24, 0xBC	; 188
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	3f 93       	push	r19
    1e70:	2f 93       	push	r18
    1e72:	ee cf       	rjmp	.-36     	; 0x1e50 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x292>
    1e74:	60 91 83 04 	lds	r22, 0x0483	; 0x800483 <config+0x26>
    1e78:	70 91 84 04 	lds	r23, 0x0484	; 0x800484 <config+0x27>
    1e7c:	63 30       	cpi	r22, 0x03	; 3
    1e7e:	71 05       	cpc	r23, r1
    1e80:	91 f3       	breq	.-28     	; 0x1e66 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2a8>
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
    1e8a:	21 eb       	ldi	r18, 0xB1	; 177
    1e8c:	31 e0       	ldi	r19, 0x01	; 1
    1e8e:	ef cf       	rjmp	.-34     	; 0x1e6e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2b0>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:193
    break;
  case mnuCmdMorSongNo:
    inttostr(intbuf, MorSongNo);
    1e90:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <config+0x2a>
    1e94:	70 91 88 04 	lds	r23, 0x0488	; 0x800488 <config+0x2b>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:198
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:199
    lpad(h, intbuf, '0', 3);
    1ea0:	8e 01       	movw	r16, r28
    1ea2:	07 5f       	subi	r16, 0xF7	; 247
    1ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea6:	43 e0       	ldi	r20, 0x03	; 3
    1ea8:	be 01       	movw	r22, r28
    1eaa:	6f 5f       	subi	r22, 0xFF	; 255
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	c8 01       	movw	r24, r16
    1eb0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:200
    fmt(strbuf, 1, h);
    1eb4:	1f 93       	push	r17
    1eb6:	0f 93       	push	r16
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:224
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	8f 93       	push	r24
    1ebc:	8e ec       	ldi	r24, 0xCE	; 206
    1ebe:	94 e0       	ldi	r25, 0x04	; 4
    1ec0:	9f 93       	push	r25
    1ec2:	8f 93       	push	r24
    1ec4:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	1a cf       	rjmp	.-460    	; 0x1d08 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x14a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:198
    inttostr(intbuf, MorSongNo);
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdEveSongNo:
    inttostr(intbuf, EveSongNo);
    1ed4:	60 91 89 04 	lds	r22, 0x0489	; 0x800489 <config+0x2c>
    1ed8:	70 91 8a 04 	lds	r23, 0x048A	; 0x80048a <config+0x2d>
    1edc:	dd cf       	rjmp	.-70     	; 0x1e98 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2da>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:203
    lpad(h, intbuf, '0', 3);
    fmt(strbuf, 1, h);
    break;
  case mnuCmdLt1OnTime:
    toTimeStr(strbuf, Light1On);
    1ede:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <config+0x2e>
    1ee2:	70 91 8c 04 	lds	r23, 0x048C	; 0x80048c <config+0x2f>
    1ee6:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <config+0x30>
    1eea:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <config+0x31>
    1eee:	0a cf       	rjmp	.-492    	; 0x1d04 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x146>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:206
    break;
  case mnuCmdLt1OffTime:  
    toTimeStr(strbuf, Light1Off);
    1ef0:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <config+0x32>
    1ef4:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <config+0x33>
    1ef8:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <config+0x34>
    1efc:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <config+0x35>
    1f00:	01 cf       	rjmp	.-510    	; 0x1d04 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x146>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:209
    break;
  case mnuCmdPlrMorOnTime:
    toTimeStr(strbuf, PlayerMorTime);
    1f02:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <config+0x3e>
    1f06:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <config+0x3f>
    1f0a:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <config+0x40>
    1f0e:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <config+0x41>
    1f12:	f8 ce       	rjmp	.-528    	; 0x1d04 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x146>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:212
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    1f14:	60 91 9f 04 	lds	r22, 0x049F	; 0x80049f <config+0x42>
    1f18:	70 91 a0 04 	lds	r23, 0x04A0	; 0x8004a0 <config+0x43>
    1f1c:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <config+0x44>
    1f20:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:218
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1f24:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <toDurStr(char*, long, char) [clone .constprop.97]>
    1f28:	ef ce       	rjmp	.-546    	; 0x1d08 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x14a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:215
    break;
  case mnuCmdPlrMorDur:
    toDurStr(strbuf, PlayerMorDur);
    break;
  case mnuCmdPlrEveOnTime:
    toTimeStr(strbuf, PlayerEveTime);
    1f2a:	60 91 a3 04 	lds	r22, 0x04A3	; 0x8004a3 <config+0x46>
    1f2e:	70 91 a4 04 	lds	r23, 0x04A4	; 0x8004a4 <config+0x47>
    1f32:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <config+0x48>
    1f36:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <config+0x49>
    1f3a:	e4 ce       	rjmp	.-568    	; 0x1d04 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x146>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:218
    break;
  case mnuCmdPlrEveDur:
    toDurStr(strbuf, PlayerEveDur);
    1f3c:	60 91 a7 04 	lds	r22, 0x04A7	; 0x8004a7 <config+0x4a>
    1f40:	70 91 a8 04 	lds	r23, 0x04A8	; 0x8004a8 <config+0x4b>
    1f44:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <config+0x4c>
    1f48:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <config+0x4d>
    1f4c:	eb cf       	rjmp	.-42     	; 0x1f24 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x366>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:221
    break;
  case mnuCmdSerial:
    fmt(strbuf, 1, inttostr(intbuf, SerialNo));
    1f4e:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <config+0x20>
    1f52:	70 91 7e 04 	lds	r23, 0x047E	; 0x80047e <config+0x21>
    1f56:	3b cf       	rjmp	.-394    	; 0x1dce <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x210>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:224
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    1f58:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <config+0x1e>
    1f5c:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <config+0x1f>
    1f60:	36 cf       	rjmp	.-404    	; 0x1dce <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x210>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:227
    break;    
  case mnuCmdAlarmTime:
    fmt(strbuf, 3, Alarm[AlarmTimeCursor], " : ", AlarmTime[AlarmTimeCursor] == true ? "ON" : "OFF");
    1f62:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <AlarmTimeCursor>
    1f66:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    1f6a:	df 01       	movw	r26, r30
    1f6c:	a5 55       	subi	r26, 0x55	; 85
    1f6e:	bb 4f       	sbci	r27, 0xFB	; 251
    1f70:	8c 91       	ld	r24, X
    1f72:	81 11       	cpse	r24, r1
    1f74:	19 c0       	rjmp	.+50     	; 0x1fa8 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x3ea>
    1f76:	8c eb       	ldi	r24, 0xBC	; 188
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	9f 93       	push	r25
    1f7c:	8f 93       	push	r24
    1f7e:	8b e6       	ldi	r24, 0x6B	; 107
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	9f 93       	push	r25
    1f84:	8f 93       	push	r24
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	e2 5b       	subi	r30, 0xB2	; 178
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:230
    break;
  case mnuCmdPanchangamTime:
    fmt(strbuf, 3, Panchangam[PanchangamCursor], " : ", PanchangamTime[PanchangamCursor] == true ? "ON" : "OFF");
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	8f 93       	push	r24
    1f92:	80 81       	ld	r24, Z
    1f94:	8f 93       	push	r24
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	8f 93       	push	r24
    1f9a:	8e ec       	ldi	r24, 0xCE	; 206
    1f9c:	94 e0       	ldi	r25, 0x04	; 4
    1f9e:	9f 93       	push	r25
    1fa0:	8f 93       	push	r24
    1fa2:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    1fa6:	94 ce       	rjmp	.-728    	; 0x1cd0 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x112>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:227
    break;
  case mnuCmdYear:
    fmt(strbuf, 1, inttostr(intbuf, DataYear));
    break;    
  case mnuCmdAlarmTime:
    fmt(strbuf, 3, Alarm[AlarmTimeCursor], " : ", AlarmTime[AlarmTimeCursor] == true ? "ON" : "OFF");
    1fa8:	8e e4       	ldi	r24, 0x4E	; 78
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	e6 cf       	rjmp	.-52     	; 0x1f7a <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x3bc>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:230
    break;
  case mnuCmdPanchangamTime:
    fmt(strbuf, 3, Panchangam[PanchangamCursor], " : ", PanchangamTime[PanchangamCursor] == true ? "ON" : "OFF");
    1fae:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <PanchangamCursor>
    1fb2:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    1fb6:	df 01       	movw	r26, r30
    1fb8:	ad 53       	subi	r26, 0x3D	; 61
    1fba:	bb 4f       	sbci	r27, 0xFB	; 251
    1fbc:	8c 91       	ld	r24, X
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x41e>
    1fc2:	8c eb       	ldi	r24, 0xBC	; 188
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	9f 93       	push	r25
    1fc8:	8f 93       	push	r24
    1fca:	8b e6       	ldi	r24, 0x6B	; 107
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	e0 5c       	subi	r30, 0xC0	; 192
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	d9 cf       	rjmp	.-78     	; 0x1f8e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x3d0>
    1fdc:	8e e4       	ldi	r24, 0x4E	; 78
    1fde:	92 e0       	ldi	r25, 0x02	; 2
    1fe0:	f2 cf       	rjmp	.-28     	; 0x1fc6 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x408>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:233
    break;
  case mnuCmdReset:
    strbuf[0] = 0;
    1fe2:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <strbuf>
    1fe6:	90 ce       	rjmp	.-736    	; 0x1d08 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x14a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:236
    break;
  default:
    strcpy(strbuf, NotImp);
    1fe8:	6a e3       	ldi	r22, 0x3A	; 58
    1fea:	71 e0       	ldi	r23, 0x01	; 1
    1fec:	8e ec       	ldi	r24, 0xCE	; 206
    1fee:	94 e0       	ldi	r25, 0x04	; 4
    1ff0:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
    1ff4:	89 ce       	rjmp	.-750    	; 0x1d08 <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x14a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:187
    break;
  case mnuCmdPlay:
    fmt(strbuf, 2, "Play", " Demo >");
    break;
  case mnuCmdMorSong1Time:
    fmt(strbuf, 2, MorSong1Time == 3 ? "OFF" : inttostr(intbuf, MorSong1Time), MorSong1Time == 3 ? "" : " AM");
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
    1ffe:	28 eb       	ldi	r18, 0xB8	; 184
    2000:	31 e0       	ldi	r19, 0x01	; 1
    2002:	35 cf       	rjmp	.-406    	; 0x1e6e <Config::getFormattedStr(unsigned char) [clone .constprop.94]+0x2b0>

00002004 <showTime()>:
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:680

void showTime()
{
    2004:	6f 92       	push	r6
    2006:	7f 92       	push	r7
    2008:	9f 92       	push	r9
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	a3 97       	sbiw	r28, 0x23	; 35
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:684
    char intbuf[8];
    char h[3], m[3], s[3], dat[3], mon[4], year[5];

    inttostr(intbuf, rtc.now().twelveHour());
    202e:	ce 01       	movw	r24, r28
    2030:	09 96       	adiw	r24, 0x09	; 9
    2032:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
twelveHour():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:538
      @brief  Return the hour in 12-hour format.
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    2036:	6c 85       	ldd	r22, Y+12	; 0x0c
    2038:	66 23       	and	r22, r22
    203a:	09 f4       	brne	.+2      	; 0x203e <showTime()+0x3a>
    203c:	e4 c0       	rjmp	.+456    	; 0x2206 <showTime()+0x202>
    203e:	6c 30       	cpi	r22, 0x0C	; 12
    2040:	11 f0       	breq	.+4      	; 0x2046 <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:540
    return 12;
  } else if (hh > 12) { // 1 o'clock or later
    2042:	08 f0       	brcs	.+2      	; 0x2046 <showTime()+0x42>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:541
    return hh - 12;
    2044:	6c 50       	subi	r22, 0x0C	; 12
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:684
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	ce 01       	movw	r24, r28
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:685
    lpad(h, intbuf, '0', 2);
    2050:	8e 01       	movw	r16, r28
    2052:	08 5e       	subi	r16, 0xE8	; 232
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	42 e0       	ldi	r20, 0x02	; 2
    2058:	be 01       	movw	r22, r28
    205a:	6f 5f       	subi	r22, 0xFF	; 255
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:686
    inttostr(intbuf, rtc.now().minute());
    2064:	ce 01       	movw	r24, r28
    2066:	09 96       	adiw	r24, 0x09	; 9
    2068:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    206c:	6d 85       	ldd	r22, Y+13	; 0x0d
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	ce 01       	movw	r24, r28
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:687
    lpad(m, intbuf, '0', 2);
    2078:	7e 01       	movw	r14, r28
    207a:	2b e1       	ldi	r18, 0x1B	; 27
    207c:	e2 0e       	add	r14, r18
    207e:	f1 1c       	adc	r15, r1
    2080:	42 e0       	ldi	r20, 0x02	; 2
    2082:	be 01       	movw	r22, r28
    2084:	6f 5f       	subi	r22, 0xFF	; 255
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	c7 01       	movw	r24, r14
    208a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:688
    inttostr(intbuf, rtc.now().second());
    208e:	ce 01       	movw	r24, r28
    2090:	09 96       	adiw	r24, 0x09	; 9
    2092:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    2096:	6e 85       	ldd	r22, Y+14	; 0x0e
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	ce 01       	movw	r24, r28
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:689
    lpad(s, intbuf, '0', 2);
    20a2:	6e 01       	movw	r12, r28
    20a4:	3e e1       	ldi	r19, 0x1E	; 30
    20a6:	c3 0e       	add	r12, r19
    20a8:	d1 1c       	adc	r13, r1
    20aa:	42 e0       	ldi	r20, 0x02	; 2
    20ac:	be 01       	movw	r22, r28
    20ae:	6f 5f       	subi	r22, 0xFF	; 255
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	c6 01       	movw	r24, r12
    20b4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:691

    lcd.setCursor(0, 0);
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:692
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    20c0:	ce 01       	movw	r24, r28
    20c2:	09 96       	adiw	r24, 0x09	; 9
    20c4:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    20c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    20ca:	8c 30       	cpi	r24, 0x0C	; 12
    20cc:	08 f0       	brcs	.+2      	; 0x20d0 <showTime()+0xcc>
    20ce:	9d c0       	rjmp	.+314    	; 0x220a <showTime()+0x206>
    20d0:	84 ed       	ldi	r24, 0xD4	; 212
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	9f 93       	push	r25
    20d6:	8f 93       	push	r24
    20d8:	df 92       	push	r13
    20da:	cf 92       	push	r12
    20dc:	8b ed       	ldi	r24, 0xDB	; 219
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	9f 93       	push	r25
    20e2:	8f 93       	push	r24
    20e4:	ff 92       	push	r15
    20e6:	ef 92       	push	r14
    20e8:	9f 93       	push	r25
    20ea:	8f 93       	push	r24
    20ec:	1f 93       	push	r17
    20ee:	0f 93       	push	r16
    20f0:	88 ed       	ldi	r24, 0xD8	; 216
    20f2:	e8 2e       	mov	r14, r24
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	f8 2e       	mov	r15, r24
    20f8:	ff 92       	push	r15
    20fa:	ef 92       	push	r14
    20fc:	97 e0       	ldi	r25, 0x07	; 7
    20fe:	99 2e       	mov	r9, r25
    2100:	9f 92       	push	r9
    2102:	00 ef       	ldi	r16, 0xF0	; 240
    2104:	14 e0       	ldi	r17, 0x04	; 4
    2106:	1f 93       	push	r17
    2108:	0f 93       	push	r16
    210a:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    210e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:694

    inttostr(intbuf, rtc.now().day());
    2112:	ce 01       	movw	r24, r28
    2114:	09 96       	adiw	r24, 0x09	; 9
    2116:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:695
    lpad(dat, intbuf, '0', 2);
    2126:	6e 01       	movw	r12, r28
    2128:	81 e2       	ldi	r24, 0x21	; 33
    212a:	c8 0e       	add	r12, r24
    212c:	d1 1c       	adc	r13, r1
    212e:	42 e0       	ldi	r20, 0x02	; 2
    2130:	be 01       	movw	r22, r28
    2132:	6f 5f       	subi	r22, 0xFF	; 255
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	c6 01       	movw	r24, r12
    2138:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:696
    inttostr(intbuf, rtc.now().year());
    213c:	ce 01       	movw	r24, r28
    213e:	09 96       	adiw	r24, 0x09	; 9
    2140:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
    2144:	69 85       	ldd	r22, Y+9	; 0x09
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	60 53       	subi	r22, 0x30	; 48
    214a:	78 4f       	sbci	r23, 0xF8	; 248
_Z8showTimev():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:696
    214c:	ce 01       	movw	r24, r28
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:697
    lpad(year, intbuf, '0', 4);
    2154:	3e 01       	movw	r6, r28
    2156:	2f e0       	ldi	r18, 0x0F	; 15
    2158:	62 0e       	add	r6, r18
    215a:	71 1c       	adc	r7, r1
    215c:	44 e0       	ldi	r20, 0x04	; 4
    215e:	be 01       	movw	r22, r28
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	c3 01       	movw	r24, r6
    2166:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:698
    strcpy(mon, months[rtc.now().month() - 1].c_str());
    216a:	ce 01       	movw	r24, r28
    216c:	09 96       	adiw	r24, 0x09	; 9
    216e:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    2172:	8a 85       	ldd	r24, Y+10	; 0x0a
    2174:	81 50       	subi	r24, 0x01	; 1
    2176:	99 0b       	sbc	r25, r25
    2178:	26 e0       	ldi	r18, 0x06	; 6
    217a:	28 9f       	mul	r18, r24
    217c:	f0 01       	movw	r30, r0
    217e:	29 9f       	mul	r18, r25
    2180:	f0 0d       	add	r31, r0
    2182:	11 24       	eor	r1, r1
    2184:	e7 5d       	subi	r30, 0xD7	; 215
    2186:	fa 4f       	sbci	r31, 0xFA	; 250
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	5e 01       	movw	r10, r28
    218e:	34 e1       	ldi	r19, 0x14	; 20
    2190:	a3 0e       	add	r10, r19
    2192:	b1 1c       	adc	r11, r1
    2194:	c5 01       	movw	r24, r10
    2196:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:700

    lcd.setCursor(0, 1);
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:701
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
    21a2:	87 ed       	ldi	r24, 0xD7	; 215
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	9f 93       	push	r25
    21a8:	8f 93       	push	r24
    21aa:	7f 92       	push	r7
    21ac:	6f 92       	push	r6
    21ae:	8d ed       	ldi	r24, 0xDD	; 221
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	9f 93       	push	r25
    21b4:	8f 93       	push	r24
    21b6:	bf 92       	push	r11
    21b8:	af 92       	push	r10
    21ba:	9f 93       	push	r25
    21bc:	8f 93       	push	r24
    21be:	df 92       	push	r13
    21c0:	cf 92       	push	r12
    21c2:	ff 92       	push	r15
    21c4:	ef 92       	push	r14
    21c6:	9f 92       	push	r9
    21c8:	1f 93       	push	r17
    21ca:	0f 93       	push	r16
    21cc:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:702
}
    21de:	a3 96       	adiw	r28, 0x23	; 35
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	df 90       	pop	r13
    21f8:	cf 90       	pop	r12
    21fa:	bf 90       	pop	r11
    21fc:	af 90       	pop	r10
    21fe:	9f 90       	pop	r9
    2200:	7f 90       	pop	r7
    2202:	6f 90       	pop	r6
    2204:	08 95       	ret
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:539
      @return Hour (1--12).
*/
/**************************************************************************/
uint8_t DateTime::twelveHour() const {
  if (hh == 0 || hh == 12) { // midnight or noon
    return 12;
    2206:	6c e0       	ldi	r22, 0x0C	; 12
    2208:	1e cf       	rjmp	.-452    	; 0x2046 <showTime()+0x42>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:692
    lpad(m, intbuf, '0', 2);
    inttostr(intbuf, rtc.now().second());
    lpad(s, intbuf, '0', 2);

    lcd.setCursor(0, 0);
    lcd.print(fmt(strbuf, 7, "  ", h, ":", m, ":", s, rtc.now().isPM() ? " PM   " : " AM   "));
    220a:	8d ec       	ldi	r24, 0xCD	; 205
    220c:	91 e0       	ldi	r25, 0x01	; 1
    220e:	62 cf       	rjmp	.-316    	; 0x20d4 <showTime()+0xd0>

00002210 <PlayChant()>:
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1439
    myDFPlayer.stop();
}

int n = 1;
void PlayChant()
{
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1441
    // Serial.println(String(hr));
    switch (playSong)
    2218:	e0 91 c2 03 	lds	r30, 0x03C2	; 0x8003c2 <playSong>
    221c:	e9 30       	cpi	r30, 0x09	; 9
    221e:	58 f5       	brcc	.+86     	; 0x2276 <PlayChant()+0x66>
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	ea 5e       	subi	r30, 0xEA	; 234
    2224:	fe 4e       	sbci	r31, 0xEE	; 238
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1545
            delay(1000);
            playSong = End_of_Song;
        }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    2226:	84 e0       	ldi	r24, 0x04	; 4
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1441

int n = 1;
void PlayChant()
{
    // Serial.println(String(hr));
    switch (playSong)
    2228:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <__tablejump2__>
    222c:	1f 11       	cpse	r17, r15
    222e:	40 11       	cpse	r20, r0
    2230:	51 11       	cpse	r21, r1
    2232:	62 11       	cpse	r22, r2
    2234:	73 11       	cpse	r23, r3
    2236:	86 11       	cpse	r24, r6
    2238:	bf 11       	cpse	r27, r15
    223a:	25 12       	cpse	r2, r21
    223c:	4c 12       	cpse	r4, r28
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1444
    {
    case Starting_Song: // Temple Name
        if (digitalRead(STA_PIN))
    223e:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2242:	89 2b       	or	r24, r25
    2244:	c1 f0       	breq	.+48     	; 0x2276 <PlayChant()+0x66>
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2246:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <random>
    224a:	23 e1       	ldi	r18, 0x13	; 19
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2256:	6f 5f       	subi	r22, 0xFF	; 255
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	8f 4f       	sbci	r24, 0xFF	; 255
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1446
        {
            myDFPlayer.playFolder(0, random(1, 20));
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1447
            delay(1000);
    2264:	68 ee       	ldi	r22, 0xE8	; 232
    2266:	73 e0       	ldi	r23, 0x03	; 3
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1448
            playSong = Time;
    2270:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1541
    case Song_2:
        if (digitalRead(STA_PIN))
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
            delay(1000);
            playSong = End_of_Song;
    2272:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <playSong>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1555
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	df 90       	pop	r13
    227c:	cf 90       	pop	r12
    227e:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1452
            delay(1000);
            playSong = Time;
        }
        break;
    case Time:
        if (digitalRead(STA_PIN)) // Time
    2280:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2284:	89 2b       	or	r24, r25
    2286:	b9 f3       	breq	.-18     	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1454
        {
            myDFPlayer.playFolder(1, bell.hour());
    2288:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <bell+0x3>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1455
            delay(1000);
    2292:	68 ee       	ldi	r22, 0xE8	; 232
    2294:	73 e0       	ldi	r23, 0x03	; 3
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1456
            playSong = English_Month;
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	e8 cf       	rjmp	.-48     	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1460
        }
        break;
    case English_Month: // English Month
        if (digitalRead(STA_PIN))
    22a2:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    22a6:	89 2b       	or	r24, r25
    22a8:	31 f3       	breq	.-52     	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1462
        {
            myDFPlayer.playFolder(47, bell.month());
    22aa:	60 91 72 05 	lds	r22, 0x0572	; 0x800572 <bell+0x1>
    22ae:	8f e2       	ldi	r24, 0x2F	; 47
    22b0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1463
            delay(1000);
    22b4:	68 ee       	ldi	r22, 0xE8	; 232
    22b6:	73 e0       	ldi	r23, 0x03	; 3
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1464
            playSong = English_Date;
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	d7 cf       	rjmp	.-82     	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1468
        }
        break;
    case English_Date: // Englidh Date
        if (digitalRead(STA_PIN))
    22c4:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    22c8:	89 2b       	or	r24, r25
    22ca:	a9 f2       	breq	.-86     	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1470
        {
            myDFPlayer.playFolder(48, bell.day());
    22cc:	60 91 73 05 	lds	r22, 0x0573	; 0x800573 <bell+0x2>
    22d0:	80 e3       	ldi	r24, 0x30	; 48
    22d2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1471
            delay(1000);
    22d6:	68 ee       	ldi	r22, 0xE8	; 232
    22d8:	73 e0       	ldi	r23, 0x03	; 3
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1472
            playSong = Day_of_Week;
    22e2:	84 e0       	ldi	r24, 0x04	; 4
    22e4:	c6 cf       	rjmp	.-116    	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1476
        }
        break;
    case Day_of_Week: // Day of Week
        if (digitalRead(STA_PIN))
    22e6:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    22ea:	89 2b       	or	r24, r25
    22ec:	21 f2       	breq	.-120    	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1478
        {
            myDFPlayer.playFolder(49, bell.dayOfTheWeek() + 1);
    22ee:	0e 94 b9 02 	call	0x572	; 0x572 <DateTime::dayOfTheWeek() const [clone .constprop.19]>
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	68 0f       	add	r22, r24
    22f6:	81 e3       	ldi	r24, 0x31	; 49
    22f8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1479
            delay(1000);
    22fc:	68 ee       	ldi	r22, 0xE8	; 232
    22fe:	73 e0       	ldi	r23, 0x03	; 3
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1480
            playSong = Tamil_Date;
    2308:	85 e0       	ldi	r24, 0x05	; 5
    230a:	b3 cf       	rjmp	.-154    	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1484
        }
        break;
    case Tamil_Date: // Tamil Date
        if (digitalRead(STA_PIN))
    230c:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2310:	89 2b       	or	r24, r25
    2312:	09 f4       	brne	.+2      	; 0x2316 <PlayChant()+0x106>
    2314:	b0 cf       	rjmp	.-160    	; 0x2276 <PlayChant()+0x66>
    2316:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <bell+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1486
        {
            if (config.PanchangamTime[bell.hour() - 5] && bell.hour() >= 5 && bell.hour() <= 11)
    231a:	e8 2f       	mov	r30, r24
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	e2 54       	subi	r30, 0x42	; 66
    2320:	fb 4f       	sbci	r31, 0xFB	; 251
    2322:	90 81       	ld	r25, Z
    2324:	99 23       	and	r25, r25
    2326:	e1 f0       	breq	.+56     	; 0x2360 <PlayChant()+0x150>
    2328:	85 50       	subi	r24, 0x05	; 5
    232a:	87 30       	cpi	r24, 0x07	; 7
    232c:	c8 f4       	brcc	.+50     	; 0x2360 <PlayChant()+0x150>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    232e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <bell>
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	80 53       	subi	r24, 0x30	; 48
    2336:	98 4f       	sbci	r25, 0xF8	; 248
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1488
            {
                if (bell.year() == config.DataYear)
    2338:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <config+0x1e>
    233c:	30 91 7c 04 	lds	r19, 0x047C	; 0x80047c <config+0x1f>
    2340:	28 17       	cp	r18, r24
    2342:	39 07       	cpc	r19, r25
    2344:	79 f4       	brne	.+30     	; 0x2364 <PlayChant()+0x154>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1490
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
    2346:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <bell+0x1>
    234a:	60 91 73 05 	lds	r22, 0x0573	; 0x800573 <bell+0x2>
    234e:	8e 5c       	subi	r24, 0xCE	; 206
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1495
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
                {
                    myDFPlayer.playFolder(50, bell.day());
    2350:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1496
                    delay(1000);
    2354:	68 ee       	ldi	r22, 0xE8	; 232
    2356:	73 e0       	ldi	r23, 0x03	; 3
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1502
                }
                playSong = Song_1;
            }
            else
            {
                playSong = Song_1;
    2360:	86 e0       	ldi	r24, 0x06	; 6
    2362:	87 cf       	rjmp	.-242    	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1493
                if (bell.year() == config.DataYear)
                {
                    myDFPlayer.playFolder(bell.month() + 50, bell.day()); // current year
                    delay(1000);
                }
                else if (bell.year() == config.DataYear - 1 && bell.month() == 12) // prev year december
    2364:	21 50       	subi	r18, 0x01	; 1
    2366:	31 09       	sbc	r19, r1
    2368:	28 17       	cp	r18, r24
    236a:	39 07       	cpc	r19, r25
    236c:	c9 f7       	brne	.-14     	; 0x2360 <PlayChant()+0x150>
    236e:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <bell+0x1>
    2372:	8c 30       	cpi	r24, 0x0C	; 12
    2374:	a9 f7       	brne	.-22     	; 0x2360 <PlayChant()+0x150>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1495
                {
                    myDFPlayer.playFolder(50, bell.day());
    2376:	60 91 73 05 	lds	r22, 0x0573	; 0x800573 <bell+0x2>
    237a:	82 e3       	ldi	r24, 0x32	; 50
    237c:	e9 cf       	rjmp	.-46     	; 0x2350 <PlayChant()+0x140>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1508
            }
        }
        break;

    case Song_1:
        if (digitalRead(STA_PIN))
    237e:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2382:	89 2b       	or	r24, r25
    2384:	09 f4       	brne	.+2      	; 0x2388 <PlayChant()+0x178>
    2386:	77 cf       	rjmp	.-274    	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1510
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
    2388:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <config+0x22>
    238c:	30 91 80 04 	lds	r19, 0x0480	; 0x800480 <config+0x23>
    2390:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <bell+0x3>
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	28 17       	cp	r18, r24
    2398:	39 07       	cpc	r19, r25
    239a:	21 f4       	brne	.+8      	; 0x23a4 <PlayChant()+0x194>
    239c:	23 30       	cpi	r18, 0x03	; 3
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <PlayChant()+0x194>
    23a2:	43 c0       	rjmp	.+134    	; 0x242a <PlayChant()+0x21a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1516
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
    23a4:	20 91 83 04 	lds	r18, 0x0483	; 0x800483 <config+0x26>
    23a8:	30 91 84 04 	lds	r19, 0x0484	; 0x800484 <config+0x27>
    23ac:	a9 01       	movw	r20, r18
    23ae:	44 5f       	subi	r20, 0xF4	; 244
    23b0:	5f 4f       	sbci	r21, 0xFF	; 255
    23b2:	84 17       	cp	r24, r20
    23b4:	95 07       	cpc	r25, r21
    23b6:	21 f4       	brne	.+8      	; 0x23c0 <PlayChant()+0x1b0>
    23b8:	23 30       	cpi	r18, 0x03	; 3
    23ba:	31 05       	cpc	r19, r1
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <PlayChant()+0x1b0>
    23be:	42 c0       	rjmp	.+132    	; 0x2444 <PlayChant()+0x234>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1524
                delay(1000);
                playSong = End_of_Song;
            }
            else
            {
                if (config.Song1_Count != 0)
    23c0:	c0 90 77 04 	lds	r12, 0x0477	; 0x800477 <config+0x1a>
    23c4:	d0 90 78 04 	lds	r13, 0x0478	; 0x800478 <config+0x1b>
    23c8:	c1 14       	cp	r12, r1
    23ca:	d1 04       	cpc	r13, r1
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <PlayChant()+0x1c0>
    23ce:	53 cf       	rjmp	.-346    	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1526
                {
                    myDFPlayer.playMp3Folder(random(1, config.Song1_Count));
    23d0:	0d 2c       	mov	r0, r13
    23d2:	00 0c       	add	r0, r0
    23d4:	ee 08       	sbc	r14, r14
    23d6:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	c8 16       	cp	r12, r24
    23e4:	d1 04       	cpc	r13, r1
    23e6:	e1 04       	cpc	r14, r1
    23e8:	f1 04       	cpc	r15, r1
    23ea:	74 f0       	brlt	.+28     	; 0x2408 <PlayChant()+0x1f8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    23ec:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    23f0:	a7 01       	movw	r20, r14
    23f2:	96 01       	movw	r18, r12
    23f4:	21 50       	subi	r18, 0x01	; 1
    23f6:	31 09       	sbc	r19, r1
    23f8:	41 09       	sbc	r20, r1
    23fa:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    23fc:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2400:	6f 5f       	subi	r22, 0xFF	; 255
    2402:	7f 4f       	sbci	r23, 0xFF	; 255
    2404:	8f 4f       	sbci	r24, 0xFF	; 255
    2406:	9f 4f       	sbci	r25, 0xFF	; 255
playMp3Folder():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
    2408:	82 e1       	ldi	r24, 0x12	; 18
    240a:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1527
                    delay(1000);
    240e:	68 ee       	ldi	r22, 0xE8	; 232
    2410:	73 e0       	ldi	r23, 0x03	; 3
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1528
                    if (config.Song2_Count != 0)
    241a:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <config+0x1c>
    241e:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <config+0x1d>
    2422:	89 2b       	or	r24, r25
    2424:	69 f0       	breq	.+26     	; 0x2440 <PlayChant()+0x230>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1529
                        playSong = Song_2;
    2426:	87 e0       	ldi	r24, 0x07	; 7
    2428:	24 cf       	rjmp	.-440    	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1512
    case Song_1:
        if (digitalRead(STA_PIN))
        {
            if (config.MorSong1Time == bell.hour() && config.MorSong1Time != 3)
            {
                myDFPlayer.playFolder(2, config.MorSongNo);
    242a:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1518
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    242e:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1539
        }
        break;
    case Song_2:
        if (digitalRead(STA_PIN))
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
    2430:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DFRobotDFPlayerMini::playFolder(unsigned char, unsigned char) [clone .constprop.29]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1540
            delay(1000);
    2434:	68 ee       	ldi	r22, 0xE8	; 232
    2436:	73 e0       	ldi	r23, 0x03	; 3
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1541
            playSong = End_of_Song;
    2440:	88 e0       	ldi	r24, 0x08	; 8
    2442:	17 cf       	rjmp	.-466    	; 0x2272 <PlayChant()+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1518
                delay(1000);
                playSong = End_of_Song;
            }
            else if ((config.EveSong1Time + 12) == bell.hour() && (config.EveSong1Time != 3))
            {
                myDFPlayer.playFolder(2, config.EveSongNo);
    2444:	60 91 89 04 	lds	r22, 0x0489	; 0x800489 <config+0x2c>
    2448:	f2 cf       	rjmp	.-28     	; 0x242e <PlayChant()+0x21e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1537
                }
            }
        }
        break;
    case Song_2:
        if (digitalRead(STA_PIN))
    244a:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    244e:	89 2b       	or	r24, r25
    2450:	09 f4       	brne	.+2      	; 0x2454 <PlayChant()+0x244>
    2452:	11 cf       	rjmp	.-478    	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1539
        {
            myDFPlayer.playFolder(6, random(1, config.Song2_Count));
    2454:	c0 90 79 04 	lds	r12, 0x0479	; 0x800479 <config+0x1c>
    2458:	d0 90 7a 04 	lds	r13, 0x047A	; 0x80047a <config+0x1d>
    245c:	0d 2c       	mov	r0, r13
    245e:	00 0c       	add	r0, r0
    2460:	ee 08       	sbc	r14, r14
    2462:	ff 08       	sbc	r15, r15
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:46
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
    2464:	61 e0       	ldi	r22, 0x01	; 1
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
random():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:45
  return random() % howbig;
}

long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	c8 16       	cp	r12, r24
    2470:	d1 04       	cpc	r13, r1
    2472:	e1 04       	cpc	r14, r1
    2474:	f1 04       	cpc	r15, r1
    2476:	74 f0       	brlt	.+28     	; 0x2494 <PlayChant()+0x284>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2478:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <random>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:48
long random(long howsmall, long howbig)
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
    247c:	a7 01       	movw	r20, r14
    247e:	96 01       	movw	r18, r12
    2480:	21 50       	subi	r18, 0x01	; 1
    2482:	31 09       	sbc	r19, r1
    2484:	41 09       	sbc	r20, r1
    2486:	51 09       	sbc	r21, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2488:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:49
{
  if (howsmall >= howbig) {
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    248c:	6f 5f       	subi	r22, 0xFF	; 255
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	8f 4f       	sbci	r24, 0xFF	; 255
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
_Z9PlayChantv():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1539
    2494:	86 e0       	ldi	r24, 0x06	; 6
    2496:	cc cf       	rjmp	.-104    	; 0x2430 <PlayChant()+0x220>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1545
            delay(1000);
            playSong = End_of_Song;
        }
        break;
    case End_of_Song:
        if (digitalRead(STA_PIN))
    2498:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    249c:	89 2b       	or	r24, r25
    249e:	09 f4       	brne	.+2      	; 0x24a2 <PlayChant()+0x292>
    24a0:	ea ce       	rjmp	.-556    	; 0x2276 <PlayChant()+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1547
        {
            playSong = Starting_Song;
    24a2:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <playSong>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1548
            lcd.clear();
    24a6:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1549
            appMode = APP_NORMAL_MODE;
    24aa:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1550
            timrLCD = millis();
    24ae:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    24b2:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <timrLCD>
    24b6:	70 93 e0 03 	sts	0x03E0, r23	; 0x8003e0 <timrLCD+0x1>
    24ba:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <timrLCD+0x2>
    24be:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1551
            digitalWrite(AMP, LOW);
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	8c e0       	ldi	r24, 0x0C	; 12
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1555
        }
        break;
    }
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1551
        {
            playSong = Starting_Song;
            lcd.clear();
            appMode = APP_NORMAL_MODE;
            timrLCD = millis();
            digitalWrite(AMP, LOW);
    24ce:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <digitalWrite>

000024d2 <refreshMenuDisplay(unsigned char)>:
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1380
}

const char EmptyStr[] = "";

void refreshMenuDisplay(byte refreshMode)
{
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	61 97       	sbiw	r28, 0x11	; 17
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1383
    char nameBuf[LCD_COLS + 1];
    byte cmdId;
    cmdId = Menu1.getCurrentItemCmdId();
    24e8:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    24ec:	18 2f       	mov	r17, r24
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1384
    lcd.setCursor(0, 0);
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1385
    if (Menu1.currentItemHasChildren())
    24f6:	0e 94 3b 02 	call	0x476	; 0x476 <MenuManager::currentItemHasChildren() [clone .constprop.103]>
    24fa:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <Menu1+0x6>
    24fe:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <Menu1+0x3>
    2502:	f0 91 05 05 	lds	r31, 0x0505	; 0x800505 <Menu1+0x4>
    2506:	88 23       	and	r24, r24
    2508:	49 f1       	breq	.+82     	; 0x255c <refreshMenuDisplay(unsigned char)+0x8a>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:53
}

// ---------------------------------------------------
char *MenuManager::getCurrentItemName(char *buf)
{
  return strcpy_P(buf, (char *)pgm_read_word(&(currentMenu[currentMenuItemIndexPos].name)));
    250a:	86 e0       	ldi	r24, 0x06	; 6
    250c:	98 9f       	mul	r25, r24
    250e:	e0 0d       	add	r30, r0
    2510:	f1 1d       	adc	r31, r1
    2512:	11 24       	eor	r1, r1
    2514:	31 96       	adiw	r30, 0x01	; 1
    2516:	65 91       	lpm	r22, Z+
    2518:	74 91       	lpm	r23, Z
    251a:	ce 01       	movw	r24, r28
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1387
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    2522:	0e 94 a9 0b 	call	0x1752	; 0x1752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1388
        strbuf[LCD_COLS - 1] = 0b01111110; // Display forward arrow if this menu item has children.
    2526:	8e e7       	ldi	r24, 0x7E	; 126
    2528:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1389
        lcd.print(strbuf);
    252c:	80 ef       	ldi	r24, 0xF0	; 240
    252e:	94 e0       	ldi	r25, 0x04	; 4
    2530:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1390
        if (cmdId == mnuCmdLt1OnTime ||
    2534:	89 ee       	ldi	r24, 0xE9	; 233
    2536:	81 0f       	add	r24, r17
    2538:	82 30       	cpi	r24, 0x02	; 2
    253a:	20 f0       	brcs	.+8      	; 0x2544 <refreshMenuDisplay(unsigned char)+0x72>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1391
            cmdId == mnuCmdLt1OffTime ||
    253c:	1a 31       	cpi	r17, 0x1A	; 26
    253e:	11 f0       	breq	.+4      	; 0x2544 <refreshMenuDisplay(unsigned char)+0x72>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1392
            cmdId == mnuCmdPlrMorOnTime ||
    2540:	1c 31       	cpi	r17, 0x1C	; 28
    2542:	31 f5       	brne	.+76     	; 0x2590 <refreshMenuDisplay(unsigned char)+0xbe>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1418
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1419
            lcd.print(" ");
    254c:	89 ed       	ldi	r24, 0xD9	; 217
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1420
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    2554:	81 2f       	mov	r24, r17
    2556:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    255a:	20 c0       	rjmp	.+64     	; 0x259c <refreshMenuDisplay(unsigned char)+0xca>
getCurrentItemName():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:53
    255c:	86 e0       	ldi	r24, 0x06	; 6
    255e:	98 9f       	mul	r25, r24
    2560:	e0 0d       	add	r30, r0
    2562:	f1 1d       	adc	r31, r1
    2564:	11 24       	eor	r1, r1
    2566:	31 96       	adiw	r30, 0x01	; 1
    2568:	65 91       	lpm	r22, Z+
    256a:	74 91       	lpm	r23, Z
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <strcpy_P>
_Z18refreshMenuDisplayh():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1407
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display
        }
    }
    else
    {
        rpad(strbuf, Menu1.getCurrentItemName(nameBuf));
    2574:	0e 94 a9 0b 	call	0x1752	; 0x1752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1408
        if ((cmdId = Menu1.getCurrentItemCmdId()) == 0)
    2578:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    257c:	18 2f       	mov	r17, r24
    257e:	81 11       	cpse	r24, r1
    2580:	1b c0       	rjmp	.+54     	; 0x25b8 <refreshMenuDisplay(unsigned char)+0xe6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1410
        {
            strbuf[LCD_COLS - 1] = 0b01111111; // Display back arrow if this menu item ascends to parent.
    2582:	8f e7       	ldi	r24, 0x7F	; 127
    2584:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <strbuf+0xf>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1411
            lcd.print(strbuf);
    2588:	80 ef       	ldi	r24, 0xF0	; 240
    258a:	94 e0       	ldi	r25, 0x04	; 4
    258c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1412
            lcd.setCursor(0, 1);
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1413
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
    2598:	85 e2       	ldi	r24, 0x25	; 37
    259a:	91 e0       	ldi	r25, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1420
        else
        {
            lcd.print(strbuf);
            lcd.setCursor(0, 1);
            lcd.print(" ");
            lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    259c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    25a0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1423
        }
    }
}
    25a4:	61 96       	adiw	r28, 0x11	; 17
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	08 95       	ret
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1417
            lcd.setCursor(0, 1);
            lcd.print(rpad(strbuf, EmptyStr)); // Clear config value in display.
        }
        else
        {
            lcd.print(strbuf);
    25b8:	80 ef       	ldi	r24, 0xF0	; 240
    25ba:	94 e0       	ldi	r25, 0x04	; 4
    25bc:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
    25c0:	c1 cf       	rjmp	.-126    	; 0x2544 <refreshMenuDisplay(unsigned char)+0x72>

000025c2 <setup>:
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:94

template <typename T, size_t N>
size_t ArraySize(T (&)[N]) { return N; }

void setup()
{
    25c2:	4f 92       	push	r4
    25c4:	5f 92       	push	r5
    25c6:	6f 92       	push	r6
    25c8:	7f 92       	push	r7
    25ca:	8f 92       	push	r8
    25cc:	9f 92       	push	r9
    25ce:	af 92       	push	r10
    25d0:	bf 92       	push	r11
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	2e 97       	sbiw	r28, 0x0e	; 14
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
analogRead():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    25f2:	80 e4       	ldi	r24, 0x40	; 64
    25f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    25f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    25fc:	80 64       	ori	r24, 0x40	; 64
    25fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    2602:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2606:	86 fd       	sbrc	r24, 6
    2608:	fc cf       	rjmp	.-8      	; 0x2602 <setup+0x40>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    260a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    260e:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:95
  low  = 0;
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
    2612:	76 2f       	mov	r23, r22
    2614:	68 2f       	mov	r22, r24
setup():
    randomSeed(analogRead(A0));
    2616:	07 2e       	mov	r0, r23
    2618:	00 0c       	add	r0, r0
    261a:	88 0b       	sbc	r24, r24
    261c:	99 0b       	sbc	r25, r25
randomSeed():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:30
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
    261e:	61 15       	cp	r22, r1
    2620:	71 05       	cpc	r23, r1
    2622:	81 05       	cpc	r24, r1
    2624:	91 05       	cpc	r25, r1
    2626:	11 f0       	breq	.+4      	; 0x262c <setup+0x6a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:31
    srandom(seed);
    2628:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <srandom>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:97
    char intstr[5];
    pinMode(AMP, OUTPUT);
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	8c e0       	ldi	r24, 0x0C	; 12
    2630:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:98
    pinMode(AUDCONT, OUTPUT);
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	8a e0       	ldi	r24, 0x0A	; 10
    2638:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:99
    pinMode(AUTOLIGHT, OUTPUT);
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	8f e0       	ldi	r24, 0x0F	; 15
    2640:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:100
    pinMode(AUTOPLAY, OUTPUT);
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	8e e0       	ldi	r24, 0x0E	; 14
    2648:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:101
    pinMode(RELAY1, OUTPUT);
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	8b e0       	ldi	r24, 0x0B	; 11
    2650:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:102
    pinMode(STA_PIN, INPUT_PULLUP);
    2654:	62 e0       	ldi	r22, 0x02	; 2
    2656:	84 e0       	ldi	r24, 0x04	; 4
    2658:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:103
    pinMode(SELECT_BUT, INPUT_PULLUP);
    265c:	62 e0       	ldi	r22, 0x02	; 2
    265e:	85 e0       	ldi	r24, 0x05	; 5
    2660:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:104
    pinMode(UP_BUT, INPUT_PULLUP);
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	86 e0       	ldi	r24, 0x06	; 6
    2668:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:105
    pinMode(DOWN_BUT, INPUT_PULLUP);
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	87 e0       	ldi	r24, 0x07	; 7
    2670:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:106
    pinMode(BACK_BUT, INPUT_PULLUP);
    2674:	62 e0       	ldi	r22, 0x02	; 2
    2676:	88 e0       	ldi	r24, 0x08	; 8
    2678:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:107
    pinMode(MODE_BUT, INPUT_PULLUP);
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	80 e1       	ldi	r24, 0x10	; 16
    2680:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:108
    Wire.begin();
    2684:	0e 94 9a 03 	call	0x734	; 0x734 <TwoWire::begin() [clone .constprop.48]>
load():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:252
}

void Config::load()
{
  // Attempt to load config from EEPROM
  eeprom_read_block(this, (void *)0, sizeof (Config));
    2688:	4d e6       	ldi	r20, 0x6D	; 109
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	8d e5       	ldi	r24, 0x5D	; 93
    2692:	94 e0       	ldi	r25, 0x04	; 4
    2694:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <eeprom_read_block>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:253
  if (strcmp(this->appNameAndVersion, NameAndVersion) != 0)
    2698:	6b e2       	ldi	r22, 0x2B	; 43
    269a:	71 e0       	ldi	r23, 0x01	; 1
    269c:	8d e5       	ldi	r24, 0x5D	; 93
    269e:	94 e0       	ldi	r25, 0x04	; 4
    26a0:	0e 94 e7 30 	call	0x61ce	; 0x61ce <strcmp>
    26a4:	89 2b       	or	r24, r25
    26a6:	09 f4       	brne	.+2      	; 0x26aa <setup+0xe8>
    26a8:	e9 c0       	rjmp	.+466    	; 0x287c <setup+0x2ba>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:14
                       "12PM","1PM", "2PM", "3PM", "4PM","5PM", "6PM", "7PM", "8PM", "9PM", "10PM", "11PM",};

const char* Panchangam[] = {"5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM"};
void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    26aa:	6b e2       	ldi	r22, 0x2B	; 43
    26ac:	71 e0       	ldi	r23, 0x01	; 1
    26ae:	8d e5       	ldi	r24, 0x5D	; 93
    26b0:	94 e0       	ldi	r25, 0x04	; 4
    26b2:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:15
  Song1_Count = 100;
    26b6:	84 e6       	ldi	r24, 0x64	; 100
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <config+0x1b>
    26be:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:16
  Song2_Count = 100;
    26c2:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <config+0x1d>
    26c6:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:17
  startTime = 5; //5AM
    26ca:	85 e0       	ldi	r24, 0x05	; 5
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <config+0x10>
    26d2:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:18
  endTime = 22; // 10PM
    26d6:	86 e1       	ldi	r24, 0x16	; 22
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <config+0x12>
    26de:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:19
  backLightDur = 20; //Sec
    26e2:	84 e1       	ldi	r24, 0x14	; 20
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <config+0x14>
    26ea:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:20
  vol = 20;
    26ee:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <config+0x16>
    26f2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:21
  MorSong1Time = 3;
    26f6:	83 e0       	ldi	r24, 0x03	; 3
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <config+0x23>
    26fe:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <config+0x22>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:22
  MorSong2Time = 3;
    2702:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <config+0x25>
    2706:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:23
  EveSong2Time = 3;
    270a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <config+0x29>
    270e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:24
  EveSong1Time = 3;
    2712:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <config+0x27>
    2716:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:25
  MorSongNo = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <config+0x2b>
    2722:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:26
  EveSongNo = 2;
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <config+0x2d>
    272e:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:28

  Light1On = 1079;
    2732:	87 e3       	ldi	r24, 0x37	; 55
    2734:	94 e0       	ldi	r25, 0x04	; 4
    2736:	a0 e0       	ldi	r26, 0x00	; 0
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <config+0x2e>
    273e:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <config+0x2f>
    2742:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <config+0x30>
    2746:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <config+0x31>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:29
  Light1Off = 359;
    274a:	87 e6       	ldi	r24, 0x67	; 103
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <config+0x32>
    2756:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <config+0x33>
    275a:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <config+0x34>
    275e:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:30
  Light2On = 0;
    2762:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <config+0x36>
    2766:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <config+0x37>
    276a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <config+0x38>
    276e:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:31
  Light2Off = 0;
    2772:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <config+0x3a>
    2776:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <config+0x3b>
    277a:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <config+0x3c>
    277e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:32
  PlayerMorTime = 300;
    2782:	8c e2       	ldi	r24, 0x2C	; 44
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <config+0x3e>
    278e:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <config+0x3f>
    2792:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <config+0x40>
    2796:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:33
  PlayerMorDur= 115;
    279a:	83 e7       	ldi	r24, 0x73	; 115
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e0       	ldi	r26, 0x00	; 0
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <config+0x42>
    27a6:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <config+0x43>
    27aa:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <config+0x44>
    27ae:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:34
  PlayerEveTime = 1020;
    27b2:	4c ef       	ldi	r20, 0xFC	; 252
    27b4:	53 e0       	ldi	r21, 0x03	; 3
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	40 93 a3 04 	sts	0x04A3, r20	; 0x8004a3 <config+0x46>
    27be:	50 93 a4 04 	sts	0x04A4, r21	; 0x8004a4 <config+0x47>
    27c2:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <config+0x48>
    27c6:	70 93 a6 04 	sts	0x04A6, r23	; 0x8004a6 <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:35
  PlayerEveDur = 115;
    27ca:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <config+0x4a>
    27ce:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <config+0x4b>
    27d2:	a0 93 a9 04 	sts	0x04A9, r26	; 0x8004a9 <config+0x4c>
    27d6:	b0 93 aa 04 	sts	0x04AA, r27	; 0x8004aa <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:37

  AutoPlay = 0;
    27da:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:38
  AutoLight = 0;
    27de:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:39
  SchlZone = 0;
    27e2:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:41

  AlarmTime[0] = 0;
    27e6:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <config+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:42
  AlarmTime[1] = 0;
    27ea:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <config+0x4f>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:43
  AlarmTime[2] = 0;
    27ee:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <config+0x50>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:44
  AlarmTime[3] = 0;
    27f2:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <config+0x51>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:45
  AlarmTime[4] = 0;
    27f6:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <config+0x52>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:46
  AlarmTime[5] = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <config+0x53>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:47
  AlarmTime[6] = 1;
    2800:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <config+0x54>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:48
  AlarmTime[7] = 1;
    2804:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <config+0x55>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:49
  AlarmTime[8] = 1;
    2808:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <config+0x56>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:50
  AlarmTime[9] = 1;
    280c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <config+0x57>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:51
  AlarmTime[10] = 1;
    2810:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <config+0x58>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:52
  AlarmTime[11] = 1;
    2814:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <config+0x59>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:53
  AlarmTime[12] = 1;
    2818:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <config+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:54
  AlarmTime[13] = 1;
    281c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <config+0x5b>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:55
  AlarmTime[14] = 1;
    2820:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <config+0x5c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:56
  AlarmTime[15] = 1;
    2824:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <config+0x5d>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:57
  AlarmTime[16] = 1;
    2828:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <config+0x5e>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:58
  AlarmTime[17] = 1;
    282c:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <config+0x5f>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:59
  AlarmTime[18] = 1;
    2830:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <config+0x60>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:60
  AlarmTime[19] = 1;
    2834:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <config+0x61>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:61
  AlarmTime[20] = 1;
    2838:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <config+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:62
  AlarmTime[21] = 1;
    283c:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <config+0x63>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:63
  AlarmTime[22] = 1;
    2840:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <config+0x64>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:64
  AlarmTime[23] = 0;
    2844:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <config+0x65>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:66
  
  PanchangamTime[0] = 0;
    2848:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <config+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:67
  PanchangamTime[1] = 1;
    284c:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <config+0x67>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:68
  PanchangamTime[2] = 0;
    2850:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <config+0x68>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:69
  PanchangamTime[3] = 1;
    2854:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <config+0x69>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:70
  PanchangamTime[4] = 0;
    2858:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <config+0x6a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:71
  PanchangamTime[5] = 1;
    285c:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <config+0x6b>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:72
  PanchangamTime[6] = 0;
    2860:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <config+0x6c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:74

  SerialNo = 315;
    2864:	8b e3       	ldi	r24, 0x3B	; 59
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <config+0x21>
    286c:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:75
  DataYear = 2022;
    2870:	86 ee       	ldi	r24, 0xE6	; 230
    2872:	97 e0       	ldi	r25, 0x07	; 7
    2874:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <config+0x1f>
    2878:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <config+0x1e>
init_priv():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    287c:	0e 94 9a 03 	call	0x734	; 0x734 <TwoWire::begin() [clone .constprop.48]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2880:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    2884:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <lcd+0xa>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    2888:	82 30       	cpi	r24, 0x02	; 2
    288a:	18 f0       	brcs	.+6      	; 0x2892 <setup+0x2d0>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    288c:	98 e0       	ldi	r25, 0x08	; 8
    288e:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <lcd+0x5>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    2892:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <lcd+0x8>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2896:	62 e3       	ldi	r22, 0x32	; 50
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 38 04 	call	0x870	; 0x870 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    28a2:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <lcd+0xb>
    28a6:	87 e7       	ldi	r24, 0x77	; 119
    28a8:	95 e0       	ldi	r25, 0x05	; 5
    28aa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    28ae:	68 ee       	ldi	r22, 0xE8	; 232
    28b0:	73 e0       	ldi	r23, 0x03	; 3
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 38 04 	call	0x870	; 0x870 <delay>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    28ba:	60 e3       	ldi	r22, 0x30	; 48
    28bc:	87 e7       	ldi	r24, 0x77	; 119
    28be:	95 e0       	ldi	r25, 0x05	; 5
    28c0:	0e 94 b3 07 	call	0xf66	; 0xf66 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    28c4:	84 e9       	ldi	r24, 0x94	; 148
    28c6:	91 e1       	ldi	r25, 0x11	; 17
    28c8:	0e 94 08 04 	call	0x810	; 0x810 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    28cc:	60 e3       	ldi	r22, 0x30	; 48
    28ce:	87 e7       	ldi	r24, 0x77	; 119
    28d0:	95 e0       	ldi	r25, 0x05	; 5
    28d2:	0e 94 b3 07 	call	0xf66	; 0xf66 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    28d6:	84 e9       	ldi	r24, 0x94	; 148
    28d8:	91 e1       	ldi	r25, 0x11	; 17
    28da:	0e 94 08 04 	call	0x810	; 0x810 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    28de:	60 e3       	ldi	r22, 0x30	; 48
    28e0:	87 e7       	ldi	r24, 0x77	; 119
    28e2:	95 e0       	ldi	r25, 0x05	; 5
    28e4:	0e 94 b3 07 	call	0xf66	; 0xf66 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    28e8:	86 e9       	ldi	r24, 0x96	; 150
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 08 04 	call	0x810	; 0x810 <delayMicroseconds>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    28f0:	60 e2       	ldi	r22, 0x20	; 32
    28f2:	87 e7       	ldi	r24, 0x77	; 119
    28f4:	95 e0       	ldi	r25, 0x05	; 5
    28f6:	0e 94 b3 07 	call	0xf66	; 0xf66 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    28fa:	60 91 7c 05 	lds	r22, 0x057C	; 0x80057c <lcd+0x5>
    28fe:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	87 e7       	ldi	r24, 0x77	; 119
    2904:	95 e0       	ldi	r25, 0x05	; 5
    2906:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    290a:	84 e0       	ldi	r24, 0x04	; 4
    290c:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <lcd+0x6>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	6c e0       	ldi	r22, 0x0C	; 12
    2914:	87 e7       	ldi	r24, 0x77	; 119
    2916:	95 e0       	ldi	r25, 0x05	; 5
    2918:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    291c:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2920:	a2 e0       	ldi	r26, 0x02	; 2
    2922:	fa 2e       	mov	r15, r26
    2924:	f0 92 7e 05 	sts	0x057E, r15	; 0x80057e <lcd+0x7>
command():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	66 e0       	ldi	r22, 0x06	; 6
    292c:	87 e7       	ldi	r24, 0x77	; 119
    292e:	95 e0       	ldi	r25, 0x05	; 5
    2930:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	62 e0       	ldi	r22, 0x02	; 2
    2938:	87 e7       	ldi	r24, 0x77	; 119
    293a:	95 e0       	ldi	r25, 0x05	; 5
    293c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    2940:	80 ed       	ldi	r24, 0xD0	; 208
    2942:	97 e0       	ldi	r25, 0x07	; 7
    2944:	0e 94 08 04 	call	0x810	; 0x810 <delayMicroseconds>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    2948:	88 e0       	ldi	r24, 0x08	; 8
    294a:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	87 e7       	ldi	r24, 0x77	; 119
    2952:	95 e0       	ldi	r25, 0x05	; 5
    2954:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:112
    config.load();
    lcd.init();
    lcd.backlight();
    lcd.setCursor(5, 0);
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	85 e0       	ldi	r24, 0x05	; 5
    295c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:113
    lcd.print(F("QTRON"));
    2960:	8d e3       	ldi	r24, 0x3D	; 61
    2962:	93 e0       	ldi	r25, 0x03	; 3
    2964:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:114
    lcd.setCursor(0, 1);
    2968:	61 e0       	ldi	r22, 0x01	; 1
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:115
    lcd.print(F("DEVOTIONAL CLOCK"));
    2970:	8c e2       	ldi	r24, 0x2C	; 44
    2972:	93 e0       	ldi	r25, 0x03	; 3
    2974:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:116
    delay(2000);
    2978:	60 ed       	ldi	r22, 0xD0	; 208
    297a:	77 e0       	ldi	r23, 0x07	; 7
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:117
    lcd.clear();
    2984:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:118
    lcd.setCursor(0, 0);
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:119
    inttostr(intstr, config.DataYear);
    2990:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <config+0x1e>
    2994:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <config+0x1f>
    2998:	6e 01       	movw	r12, r28
    299a:	29 e0       	ldi	r18, 0x09	; 9
    299c:	c2 0e       	add	r12, r18
    299e:	d1 1c       	adc	r13, r1
    29a0:	c6 01       	movw	r24, r12
    29a2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:120
    lcd.print(fmt(strbuf, 2, "Ver : 3.3/", intstr));
    29a6:	df 92       	push	r13
    29a8:	cf 92       	push	r12
    29aa:	8f ed       	ldi	r24, 0xDF	; 223
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	9f 93       	push	r25
    29b0:	8f 93       	push	r24
    29b2:	ff 92       	push	r15
    29b4:	00 ef       	ldi	r16, 0xF0	; 240
    29b6:	14 e0       	ldi	r17, 0x04	; 4
    29b8:	1f 93       	push	r17
    29ba:	0f 93       	push	r16
    29bc:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    29c0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:121
    lcd.setCursor(0, 1);
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:122
    inttostr(intstr, config.SerialNo);
    29cc:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <config+0x20>
    29d0:	70 91 7e 04 	lds	r23, 0x047E	; 0x80047e <config+0x21>
    29d4:	c6 01       	movw	r24, r12
    29d6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:123
    lcd.print(fmt(strbuf, 2, "Serial No : 0", intstr));
    29da:	df 92       	push	r13
    29dc:	cf 92       	push	r12
    29de:	8a ee       	ldi	r24, 0xEA	; 234
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	9f 93       	push	r25
    29e4:	8f 93       	push	r24
    29e6:	ff 92       	push	r15
    29e8:	1f 93       	push	r17
    29ea:	0f 93       	push	r16
    29ec:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    29f0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:124
    delay(2000);
    29f4:	60 ed       	ldi	r22, 0xD0	; 208
    29f6:	77 e0       	ldi	r23, 0x07	; 7
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:125
    lcd.clear();
    2a00:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:126
    lcd.setCursor(3, 0);
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:127
    lcd.print("Loading...");
    2a0c:	88 ef       	ldi	r24, 0xF8	; 248
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:128
    if (!digitalRead(SELECT_BUT))
    2a14:	85 e0       	ldi	r24, 0x05	; 5
    2a16:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	89 2b       	or	r24, r25
    2a26:	f1 f5       	brne	.+124    	; 0x2aa4 <setup+0x4e2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:130
    {
        lcd.setCursor(0, 1);
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:131
        lcd.print("Service Mode");
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	92 e0       	ldi	r25, 0x02	; 2
    2a34:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:132
        serviceMode = true;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <serviceMode>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    2a3e:	78 e6       	ldi	r23, 0x68	; 104
    2a40:	e7 2e       	mov	r14, r23
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    2a42:	ed e1       	ldi	r30, 0x1D	; 29
    2a44:	ae 2e       	mov	r10, r30
    2a46:	e5 e0       	ldi	r30, 0x05	; 5
    2a48:	be 2e       	mov	r11, r30
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    2a4a:	f0 e2       	ldi	r31, 0x20	; 32
    2a4c:	8f 2e       	mov	r8, r31
    2a4e:	91 2c       	mov	r9, r1
begin():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;
    2a50:	ff 24       	eor	r15, r15
    2a52:	f3 94       	inc	r15
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:15
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS1307 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS1307::begin(TwoWire *wireInstance) {
  if (i2c_dev)
    2a54:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <rtc>
    2a58:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <rtc+0x1>
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	11 f0       	breq	.+4      	; 0x2a64 <setup+0x4a2>
operator delete():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2a60:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
operator new():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    2a64:	86 e0       	ldi	r24, 0x06	; 6
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <malloc>
    2a6c:	8c 01       	movw	r16, r24
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:11
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e0 82       	st	Z, r14
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:12
  _wire = theWire;
    2a72:	b2 82       	std	Z+2, r11	; 0x02
    2a74:	a1 82       	std	Z+1, r10	; 0x01
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:13
  _begun = false;
    2a76:	13 82       	std	Z+3, r1	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:19
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    2a78:	95 82       	std	Z+5, r9	; 0x05
    2a7a:	84 82       	std	Z+4, r8	; 0x04
begin():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:17
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(DS1307_ADDRESS, wireInstance);
    2a7c:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <rtc+0x1>
    2a80:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <rtc>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
    2a84:	0e 94 9a 03 	call	0x734	; 0x734 <TwoWire::begin() [clone .constprop.48]>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
    2a88:	f8 01       	movw	r30, r16
    2a8a:	f3 82       	std	Z+3, r15	; 0x03
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35

  if (addr_detect) {
    return detected();
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Adafruit_I2CDevice::detected()>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:18
  if (!i2c_dev->begin())
    2a92:	81 11       	cpse	r24, r1
    2a94:	0a c0       	rjmp	.+20     	; 0x2aaa <setup+0x4e8>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:140
    {
        serviceMode = false;
    }
    while (!rtc.begin())
    {
        lcd.clear();
    2a96:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:141
        lcd.print(F("ERR 01")); // Couldn't find RTC
    2a9a:	85 e2       	ldi	r24, 0x25	; 37
    2a9c:	93 e0       	ldi	r25, 0x03	; 3
    2a9e:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
    2aa2:	d8 cf       	rjmp	.-80     	; 0x2a54 <setup+0x492>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:136
        lcd.print("Service Mode");
        serviceMode = true;
    }
    else
    {
        serviceMode = false;
    2aa4:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <serviceMode>
    2aa8:	ca cf       	rjmp	.-108    	; 0x2a3e <setup+0x47c>
    2aaa:	1e 86       	std	Y+14, r1	; 0x0e
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:80
    @return value of register
*/
/**************************************************************************/
uint8_t RTC_I2C::read_register(uint8_t reg) {
  uint8_t buffer[1];
  i2c_dev->write(&reg, 1);
    2aac:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <rtc>
    2ab0:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <rtc+0x1>
write():
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	24 81       	ldd	r18, Z+4	; 0x04
    2ab8:	35 81       	ldd	r19, Z+5	; 0x05
    2aba:	23 2b       	or	r18, r19
    2abc:	89 f0       	breq	.+34     	; 0x2ae0 <setup+0x51e>
C:\Users\quali\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    2abe:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2ac0:	f0 92 33 04 	sts	0x0433, r15	; 0x800433 <TwoWire::transmitting>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    2ac4:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <TwoWire::txAddress>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2ac8:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <TwoWire::txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    2acc:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <TwoWire::txBufferLength>
write():
    2ad0:	21 e0       	ldi	r18, 0x01	; 1
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	be 01       	movw	r22, r28
    2ad8:	62 5f       	subi	r22, 0xF2	; 242
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
read_register():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:81
  i2c_dev->read(buffer, 1);
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	9e 01       	movw	r18, r28
    2ae6:	2f 5f       	subi	r18, 0xFF	; 255
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	59 01       	movw	r10, r18
    2aec:	b9 01       	movw	r22, r18
    2aee:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <rtc>
    2af2:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <rtc+0x1>
    2af6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool) [clone .constprop.54]>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:82
  return buffer[0];
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
isrunning():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTC_DS1307.cpp:29
/*!
    @brief  Is the DS1307 running? Check the Clock Halt bit in register 0
    @return 1 if the RTC is running, 0 if not
*/
/**************************************************************************/
uint8_t RTC_DS1307::isrunning(void) { return !(read_register(0) >> 7); }
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	88 0f       	add	r24, r24
    2b00:	89 2f       	mov	r24, r25
    2b02:	88 1f       	adc	r24, r24
    2b04:	99 0b       	sbc	r25, r25
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:144
    {
        lcd.clear();
        lcd.print(F("ERR 01")); // Couldn't find RTC
    }

    if (!rtc.isrunning())
    2b06:	89 2b       	or	r24, r25
    2b08:	79 f0       	breq	.+30     	; 0x2b28 <setup+0x566>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:146
    {
        lcd.clear();
    2b0a:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:147
        lcd.print(F("ERR 02"));
    2b0e:	8e e1       	ldi	r24, 0x1E	; 30
    2b10:	93 e0       	ldi	r25, 0x03	; 3
    2b12:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:148
        delay(2000);
    2b16:	60 ed       	ldi	r22, 0xD0	; 208
    2b18:	77 e0       	ldi	r23, 0x07	; 7
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:149
        serviceMode = true;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <serviceMode>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
// Public methods
//

void SoftwareSerial::begin(long speed)
{ 
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2b28:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <mySoftwareSerial+0x1b>
    2b2c:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <mySoftwareSerial+0x1a>
    2b30:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <mySoftwareSerial+0x19>
    2b34:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <mySoftwareSerial+0x18>
    2b38:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <mySoftwareSerial+0x17>
    2b3c:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2b40:	8d e9       	ldi	r24, 0x9D	; 157
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <mySoftwareSerial+0x1d>
    2b48:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <mySoftwareSerial+0x1c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2b4c:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <mySoftwareSerial+0xc>
    2b50:	87 31       	cpi	r24, 0x17	; 23
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <setup+0x594>
    2b54:	4b c0       	rjmp	.+150    	; 0x2bec <setup+0x62a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2b56:	2d eb       	ldi	r18, 0xBD	; 189
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	30 93 c0 05 	sts	0x05C0, r19	; 0x8005c0 <mySoftwareSerial+0x17>
    2b5e:	20 93 bf 05 	sts	0x05BF, r18	; 0x8005bf <mySoftwareSerial+0x16>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2b62:	2b e9       	ldi	r18, 0x9B	; 155
    2b64:	31 e0       	ldi	r19, 0x01	; 1
    2b66:	30 93 c2 05 	sts	0x05C2, r19	; 0x8005c2 <mySoftwareSerial+0x19>
    2b6a:	20 93 c1 05 	sts	0x05C1, r18	; 0x8005c1 <mySoftwareSerial+0x18>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2b6e:	2c e2       	ldi	r18, 0x2C	; 44
    2b70:	31 e0       	ldi	r19, 0x01	; 1
    2b72:	30 93 c4 05 	sts	0x05C4, r19	; 0x8005c4 <mySoftwareSerial+0x1b>
    2b76:	20 93 c3 05 	sts	0x05C3, r18	; 0x8005c3 <mySoftwareSerial+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2b7a:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
setup():
    2b7e:	94 e0       	ldi	r25, 0x04	; 4
begin():
    2b80:	88 30       	cpi	r24, 0x08	; 8
    2b82:	54 f0       	brlt	.+20     	; 0x2b98 <setup+0x5d6>
setup():
    2b84:	91 e0       	ldi	r25, 0x01	; 1
begin():
    2b86:	8e 30       	cpi	r24, 0x0E	; 14
    2b88:	3c f0       	brlt	.+14     	; 0x2b98 <setup+0x5d6>
setup():
    2b8a:	92 e0       	ldi	r25, 0x02	; 2
begin():
    2b8c:	84 31       	cpi	r24, 0x14	; 20
    2b8e:	24 f0       	brlt	.+8      	; 0x2b98 <setup+0x5d6>
    2b90:	91 e0       	ldi	r25, 0x01	; 1
    2b92:	86 31       	cpi	r24, 0x16	; 22
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <setup+0x5d6>
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	92 2b       	or	r25, r18
    2b9a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
setup():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b9e:	2d e6       	ldi	r18, 0x6D	; 109
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2ba2:	88 30       	cpi	r24, 0x08	; 8
    2ba4:	74 f0       	brlt	.+28     	; 0x2bc2 <setup+0x600>
    2ba6:	8e 30       	cpi	r24, 0x0E	; 14
    2ba8:	0c f4       	brge	.+2      	; 0x2bac <setup+0x5ea>
    2baa:	7d c0       	rjmp	.+250    	; 0x2ca6 <setup+0x6e4>
    2bac:	84 31       	cpi	r24, 0x14	; 20
    2bae:	3c f0       	brlt	.+14     	; 0x2bbe <setup+0x5fc>
    2bb0:	86 31       	cpi	r24, 0x16	; 22
    2bb2:	0c f4       	brge	.+2      	; 0x2bb6 <setup+0x5f4>
    2bb4:	78 c0       	rjmp	.+240    	; 0x2ca6 <setup+0x6e4>
setup():
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
begin():
    2bba:	86 31       	cpi	r24, 0x16	; 22
    2bbc:	11 f4       	brne	.+4      	; 0x2bc2 <setup+0x600>
setup():
    2bbe:	2c e6       	ldi	r18, 0x6C	; 108
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
begin():
    2bc2:	30 93 bd 05 	sts	0x05BD, r19	; 0x8005bd <mySoftwareSerial+0x14>
    2bc6:	20 93 bc 05 	sts	0x05BC, r18	; 0x8005bc <mySoftwareSerial+0x13>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2bca:	88 30       	cpi	r24, 0x08	; 8
    2bcc:	0c f0       	brlt	.+2      	; 0x2bd0 <setup+0x60e>
    2bce:	6e c0       	rjmp	.+220    	; 0x2cac <setup+0x6ea>
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <setup+0x614>
    2bd4:	99 0f       	add	r25, r25
    2bd6:	8a 95       	dec	r24
    2bd8:	ea f7       	brpl	.-6      	; 0x2bd4 <setup+0x612>
    2bda:	89 2f       	mov	r24, r25
    2bdc:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <mySoftwareSerial+0x15>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    2be0:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <mySoftwareSerial+0x1c>
    2be4:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <mySoftwareSerial+0x1d>
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <setup+0x626>
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:91

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    2bec:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <mySoftwareSerial+0x1a>
    2bf0:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <mySoftwareSerial+0x1b>
    2bf4:	89 2b       	or	r24, r25
    2bf6:	49 f1       	breq	.+82     	; 0x2c4a <setup+0x688>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:94
    return false;

  if (active_object != this)
    2bf8:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <SoftwareSerial::active_object>
    2bfc:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <SoftwareSerial::active_object+0x1>
    2c00:	35 e0       	ldi	r19, 0x05	; 5
    2c02:	e9 3a       	cpi	r30, 0xA9	; 169
    2c04:	f3 07       	cpc	r31, r19
    2c06:	09 f1       	breq	.+66     	; 0x2c4a <setup+0x688>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:96
  {
    if (active_object)
    2c08:	30 97       	sbiw	r30, 0x00	; 0
    2c0a:	39 f0       	breq	.+14     	; 0x2c1a <setup+0x658>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2c0c:	a3 89       	ldd	r26, Z+19	; 0x13
    2c0e:	b4 89       	ldd	r27, Z+20	; 0x14
    2c10:	9c 91       	ld	r25, X
    2c12:	85 89       	ldd	r24, Z+21	; 0x15
    2c14:	80 95       	com	r24
    2c16:	89 23       	and	r24, r25
    2c18:	8c 93       	st	X, r24
listen():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:99
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
    2c1a:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <mySoftwareSerial+0x1e>
    2c1e:	8e 7f       	andi	r24, 0xFE	; 254
    2c20:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <mySoftwareSerial+0x1e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:100
    _receive_buffer_head = _receive_buffer_tail = 0;
    2c24:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
    2c28:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <SoftwareSerial::_receive_buffer_head>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:101
    active_object = this;
    2c2c:	89 ea       	ldi	r24, 0xA9	; 169
    2c2e:	95 e0       	ldi	r25, 0x05	; 5
    2c30:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <SoftwareSerial::active_object+0x1>
    2c34:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2c38:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <mySoftwareSerial+0x13>
    2c3c:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <mySoftwareSerial+0x14>
    2c40:	80 81       	ld	r24, Z
    2c42:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <mySoftwareSerial+0x15>
    2c46:	89 2b       	or	r24, r25
    2c48:	80 83       	st	Z, r24
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:156

    // Initialize DF Player...............
    // if (digitalRead(BACK_BUT))
    {
        mySoftwareSerial.begin(9600);
        delay(500);
    2c4a:	64 ef       	ldi	r22, 0xF4	; 244
    2c4c:	71 e0       	ldi	r23, 0x01	; 1
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 38 04 	call	0x870	; 0x870 <delay>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2c56:	09 ea       	ldi	r16, 0xA9	; 169
    2c58:	15 e0       	ldi	r17, 0x05	; 5
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2c5a:	ff 24       	eor	r15, r15
    2c5c:	f3 94       	inc	r15
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
    2c5e:	10 93 84 05 	sts	0x0584, r17	; 0x800584 <myDFPlayer+0x1>
    2c62:	00 93 83 05 	sts	0x0583, r16	; 0x800583 <myDFPlayer>
enableACK():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    2c66:	f0 92 9b 05 	sts	0x059B, r15	; 0x80059b <myDFPlayer+0x18>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	8c e0       	ldi	r24, 0x0C	; 12
    2c70:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
waitAvailable():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
    2c74:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    2c78:	2b 01       	movw	r4, r22
    2c7a:	3c 01       	movw	r6, r24
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
    2c7c:	0e 94 77 04 	call	0x8ee	; 0x8ee <DFRobotDFPlayerMini::available() [clone .constprop.70]>
    2c80:	81 11       	cpse	r24, r1
    2c82:	22 c0       	rjmp	.+68     	; 0x2cc8 <setup+0x706>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
    2c84:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    2c88:	64 19       	sub	r22, r4
    2c8a:	75 09       	sbc	r23, r5
    2c8c:	86 09       	sbc	r24, r6
    2c8e:	97 09       	sbc	r25, r7
    2c90:	61 3d       	cpi	r22, 0xD1	; 209
    2c92:	77 40       	sbci	r23, 0x07	; 7
    2c94:	81 05       	cpc	r24, r1
    2c96:	91 05       	cpc	r25, r1
    2c98:	b8 f4       	brcc	.+46     	; 0x2cc8 <setup+0x706>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	0e 94 38 04 	call	0x870	; 0x870 <delay>
    2ca4:	eb cf       	rjmp	.-42     	; 0x2c7c <setup+0x6ba>
setup():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2ca6:	2b e6       	ldi	r18, 0x6B	; 107
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	8b cf       	rjmp	.-234    	; 0x2bc2 <setup+0x600>
begin():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2cac:	8e 30       	cpi	r24, 0x0E	; 14
    2cae:	14 f4       	brge	.+4      	; 0x2cb4 <setup+0x6f2>
    2cb0:	88 50       	subi	r24, 0x08	; 8
    2cb2:	8e cf       	rjmp	.-228    	; 0x2bd0 <setup+0x60e>
    2cb4:	86 31       	cpi	r24, 0x16	; 22
    2cb6:	14 f4       	brge	.+4      	; 0x2cbc <setup+0x6fa>
    2cb8:	8e 50       	subi	r24, 0x0E	; 14
    2cba:	8a cf       	rjmp	.-236    	; 0x2bd0 <setup+0x60e>
    2cbc:	86 31       	cpi	r24, 0x16	; 22
    2cbe:	11 f4       	brne	.+4      	; 0x2cc4 <setup+0x702>
setup():
    2cc0:	80 e4       	ldi	r24, 0x40	; 64
    2cc2:	8c cf       	rjmp	.-232    	; 0x2bdc <setup+0x61a>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	8a cf       	rjmp	.-236    	; 0x2bdc <setup+0x61a>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
    2cc8:	68 ec       	ldi	r22, 0xC8	; 200
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 38 04 	call	0x870	; 0x870 <delay>
readType():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    2cd4:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <myDFPlayer+0x24>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:123
  return _handleType;
    2cd8:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <myDFPlayer+0x20>
begin():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:118
  else {
    // assume same state as with reset(): online
    _handleType = DFPlayerCardOnline;
  }

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
    2cdc:	84 30       	cpi	r24, 0x04	; 4
    2cde:	69 f0       	breq	.+26     	; 0x2cfa <setup+0x738>
    2ce0:	89 30       	cpi	r24, 0x09	; 9
    2ce2:	59 f0       	breq	.+22     	; 0x2cfa <setup+0x738>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:159
        while (!myDFPlayer.begin(mySoftwareSerial))
        {
            lcd.clear();
    2ce4:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:160
            lcd.setCursor(0, 0);
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:161
            lcd.print(F("ERR 03"));
    2cf0:	87 e1       	ldi	r24, 0x17	; 23
    2cf2:	93 e0       	ldi	r25, 0x03	; 3
    2cf4:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
    2cf8:	b2 cf       	rjmp	.-156    	; 0x2c5e <setup+0x69c>
setTimeOut():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:17
 */

#include "DFRobotDFPlayerMini.h"

void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
    2cfa:	84 ef       	ldi	r24, 0xF4	; 244
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	a0 e0       	ldi	r26, 0x00	; 0
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <myDFPlayer+0x6>
    2d06:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <myDFPlayer+0x7>
    2d0a:	a0 93 8b 05 	sts	0x058B, r26	; 0x80058b <myDFPlayer+0x8>
    2d0e:	b0 93 8c 05 	sts	0x058C, r27	; 0x80058c <myDFPlayer+0x9>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    2d12:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <config+0x15>
    2d16:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <config+0x16>
    2d1a:	77 27       	eor	r23, r23
    2d1c:	86 e0       	ldi	r24, 0x06	; 6
    2d1e:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
outputDevice():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:324
void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
}

void DFRobotDFPlayerMini::outputDevice(uint8_t device) {
  sendStack(0x09, device);
    2d22:	62 e0       	ldi	r22, 0x02	; 2
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	89 e0       	ldi	r24, 0x09	; 9
    2d28:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:325
  delay(200);
    2d2c:	68 ec       	ldi	r22, 0xC8	; 200
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 38 04 	call	0x870	; 0x870 <delay>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:167
        }
        myDFPlayer.setTimeOut(500);
        myDFPlayer.volume(config.vol);
        myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    }
    lcd.clear();
    2d38:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:168
    timrLCD = millis();
    2d3c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    2d40:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <timrLCD>
    2d44:	70 93 e0 03 	sts	0x03E0, r23	; 0x8003e0 <timrLCD+0x1>
    2d48:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <timrLCD+0x2>
    2d4c:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:170

    if (serviceMode)
    2d50:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <serviceMode>
    2d54:	88 23       	and	r24, r24
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <setup+0x798>
    2d58:	26 c1       	rjmp	.+588    	; 0x2fa6 <setup+0x9e4>
attach():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2d5a:	23 ef       	ldi	r18, 0xF3	; 243
    2d5c:	32 e0       	ldi	r19, 0x02	; 2
    2d5e:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <Menu1+0x1>
    2d62:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2d66:	86 e0       	ldi	r24, 0x06	; 6
    2d68:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2d6c:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <Menu1+0x4>
    2d70:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2d74:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2d78:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:12
  menuStackCount = 0;
    2d7c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:175
        Menu1.attach(serviceMenu_Root, menuCount(serviceMenu_Root));
    else
        Menu1.attach(normalMenu_Root, menuCount(normalMenu_Root));

    if (!digitalRead(UP_BUT) && !digitalRead(DOWN_BUT))
    2d80:	86 e0       	ldi	r24, 0x06	; 6
    2d82:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2d86:	89 2b       	or	r24, r25
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <setup+0x7ca>
    2d8a:	ee c0       	rjmp	.+476    	; 0x2f68 <setup+0x9a6>
    2d8c:	87 e0       	ldi	r24, 0x07	; 7
    2d8e:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2d92:	89 2b       	or	r24, r25
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <setup+0x7d6>
    2d96:	e8 c0       	rjmp	.+464    	; 0x2f68 <setup+0x9a6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:177
    {
        pwd = (((long(config.DataYear) + long(config.SerialNo)) * long(config.SerialNo)) % 10000L);
    2d98:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <config+0x20>
    2d9c:	70 91 7e 04 	lds	r23, 0x047E	; 0x80047e <config+0x21>
    2da0:	07 2e       	mov	r0, r23
    2da2:	00 0c       	add	r0, r0
    2da4:	88 0b       	sbc	r24, r24
    2da6:	99 0b       	sbc	r25, r25
    2da8:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <config+0x1e>
    2dac:	30 91 7c 04 	lds	r19, 0x047C	; 0x80047c <config+0x1f>
    2db0:	03 2e       	mov	r0, r19
    2db2:	00 0c       	add	r0, r0
    2db4:	44 0b       	sbc	r20, r20
    2db6:	55 0b       	sbc	r21, r21
    2db8:	26 0f       	add	r18, r22
    2dba:	37 1f       	adc	r19, r23
    2dbc:	48 1f       	adc	r20, r24
    2dbe:	59 1f       	adc	r21, r25
    2dc0:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <__mulsi3>
    2dc4:	20 e1       	ldi	r18, 0x10	; 16
    2dc6:	37 e2       	ldi	r19, 0x27	; 39
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
    2dd0:	70 93 f4 02 	sts	0x02F4, r23	; 0x8002f4 <pwd+0x1>
    2dd4:	60 93 f3 02 	sts	0x02F3, r22	; 0x8002f3 <pwd>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:178
        lcd.clear();
    2dd8:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:182
        // lcd.print(pwd);
        // delay(1000);
        // lcd.clear();
        short Pdigit[] = {0, 0, 0, 0};
    2ddc:	88 e0       	ldi	r24, 0x08	; 8
    2dde:	f5 01       	movw	r30, r10
    2de0:	11 92       	st	Z+, r1
    2de2:	8a 95       	dec	r24
    2de4:	e9 f7       	brne	.-6      	; 0x2de0 <setup+0x81e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:183
        short curPos = 0;
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	00 e0       	ldi	r16, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:206
            if (!digitalRead(BACK_BUT))
            {
                break;
            }

            typedPwd = (Pdigit[0] * 1000) + (Pdigit[1] * 100) + (Pdigit[2] * 10) + (Pdigit[3] * 1);
    2dea:	28 ee       	ldi	r18, 0xE8	; 232
    2dec:	62 2e       	mov	r6, r18
    2dee:	23 e0       	ldi	r18, 0x03	; 3
    2df0:	72 2e       	mov	r7, r18
    2df2:	34 e6       	ldi	r19, 0x64	; 100
    2df4:	53 2e       	mov	r5, r19
    2df6:	4a e0       	ldi	r20, 0x0A	; 10
    2df8:	44 2e       	mov	r4, r20
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:228
                if (blink)
                {
                    lcd.setCursor(4, 1);
                    inttostr(intstr, typedPwd);
                    lpad(valbuf, intstr, '0', 4);
                    lcd.print(fmt(strbuf, 1, valbuf));
    2dfa:	50 ef       	ldi	r21, 0xF0	; 240
    2dfc:	85 2e       	mov	r8, r21
    2dfe:	54 e0       	ldi	r21, 0x04	; 4
    2e00:	95 2e       	mov	r9, r21
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:186
        // lcd.clear();
        short Pdigit[] = {0, 0, 0, 0};
        short curPos = 0;
        while (true)
        {
            if (!digitalRead(SELECT_BUT))
    2e02:	85 e0       	ldi	r24, 0x05	; 5
    2e04:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2e08:	89 2b       	or	r24, r25
    2e0a:	69 f4       	brne	.+26     	; 0x2e26 <setup+0x864>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:188
            {
                curPos = ++curPos > 3 ? 0 : curPos;
    2e0c:	0f 5f       	subi	r16, 0xFF	; 255
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	04 30       	cpi	r16, 0x04	; 4
    2e12:	11 05       	cpc	r17, r1
    2e14:	10 f0       	brcs	.+4      	; 0x2e1a <setup+0x858>
    2e16:	10 e0       	ldi	r17, 0x00	; 0
    2e18:	00 e0       	ldi	r16, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:189
                delay(300);
    2e1a:	6c e2       	ldi	r22, 0x2C	; 44
    2e1c:	71 e0       	ldi	r23, 0x01	; 1
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:191
            }
            if (!digitalRead(UP_BUT))
    2e26:	86 e0       	ldi	r24, 0x06	; 6
    2e28:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2e2c:	89 2b       	or	r24, r25
    2e2e:	c9 f4       	brne	.+50     	; 0x2e62 <setup+0x8a0>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:193
            {
                Pdigit[curPos] = ++Pdigit[curPos] > 9 ? 0 : Pdigit[curPos];
    2e30:	98 01       	movw	r18, r16
    2e32:	22 0f       	add	r18, r18
    2e34:	33 1f       	adc	r19, r19
    2e36:	f5 01       	movw	r30, r10
    2e38:	e2 0f       	add	r30, r18
    2e3a:	f3 1f       	adc	r31, r19
    2e3c:	80 81       	ld	r24, Z
    2e3e:	91 81       	ldd	r25, Z+1	; 0x01
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	8a 30       	cpi	r24, 0x0A	; 10
    2e44:	91 05       	cpc	r25, r1
    2e46:	14 f0       	brlt	.+4      	; 0x2e4c <setup+0x88a>
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	2a 0d       	add	r18, r10
    2e4e:	3b 1d       	adc	r19, r11
    2e50:	f9 01       	movw	r30, r18
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:194
                delay(300);
    2e56:	6c e2       	ldi	r22, 0x2C	; 44
    2e58:	71 e0       	ldi	r23, 0x01	; 1
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:196
            }
            if (!digitalRead(DOWN_BUT))
    2e62:	87 e0       	ldi	r24, 0x07	; 7
    2e64:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2e68:	89 2b       	or	r24, r25
    2e6a:	c1 f4       	brne	.+48     	; 0x2e9c <setup+0x8da>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:198
            {
                Pdigit[curPos] = --Pdigit[curPos] < 0 ? 9 : Pdigit[curPos];
    2e6c:	98 01       	movw	r18, r16
    2e6e:	22 0f       	add	r18, r18
    2e70:	33 1f       	adc	r19, r19
    2e72:	f5 01       	movw	r30, r10
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	97 ff       	sbrs	r25, 7
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <setup+0x8c4>
    2e82:	89 e0       	ldi	r24, 0x09	; 9
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	2a 0d       	add	r18, r10
    2e88:	3b 1d       	adc	r19, r11
    2e8a:	f9 01       	movw	r30, r18
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:199
                delay(300);
    2e90:	6c e2       	ldi	r22, 0x2C	; 44
    2e92:	71 e0       	ldi	r23, 0x01	; 1
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:201
            }
            if (!digitalRead(BACK_BUT))
    2e9c:	88 e0       	ldi	r24, 0x08	; 8
    2e9e:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2ea2:	89 2b       	or	r24, r25
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <setup+0x8e6>
    2ea6:	60 c0       	rjmp	.+192    	; 0x2f68 <setup+0x9a6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:206
            {
                break;
            }

            typedPwd = (Pdigit[0] * 1000) + (Pdigit[1] * 100) + (Pdigit[2] * 10) + (Pdigit[3] * 1);
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	86 9d       	mul	r24, r6
    2eae:	70 01       	movw	r14, r0
    2eb0:	87 9d       	mul	r24, r7
    2eb2:	f0 0c       	add	r15, r0
    2eb4:	96 9d       	mul	r25, r6
    2eb6:	f0 0c       	add	r15, r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebe:	52 9e       	mul	r5, r18
    2ec0:	c0 01       	movw	r24, r0
    2ec2:	53 9e       	mul	r5, r19
    2ec4:	90 0d       	add	r25, r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	e8 0e       	add	r14, r24
    2eca:	f9 1e       	adc	r15, r25
    2ecc:	2d 81       	ldd	r18, Y+5	; 0x05
    2ece:	3e 81       	ldd	r19, Y+6	; 0x06
    2ed0:	42 9e       	mul	r4, r18
    2ed2:	c0 01       	movw	r24, r0
    2ed4:	43 9e       	mul	r4, r19
    2ed6:	90 0d       	add	r25, r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	e8 0e       	add	r14, r24
    2edc:	f9 1e       	adc	r15, r25
    2ede:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee0:	98 85       	ldd	r25, Y+8	; 0x08
    2ee2:	e8 0e       	add	r14, r24
    2ee4:	f9 1e       	adc	r15, r25
    2ee6:	f0 92 f2 02 	sts	0x02F2, r15	; 0x8002f2 <typedPwd+0x1>
    2eea:	e0 92 f1 02 	sts	0x02F1, r14	; 0x8002f1 <typedPwd>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:208

            lcd.setCursor(0, 0);
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:209
            lcd.print(F(" ENTER PASSWORD "));
    2ef6:	84 ec       	ldi	r24, 0xC4	; 196
    2ef8:	92 e0       	ldi	r25, 0x02	; 2
    2efa:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:211

            if (pwd == typedPwd)
    2efe:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <pwd>
    2f02:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <pwd+0x1>
    2f06:	e8 16       	cp	r14, r24
    2f08:	f9 06       	cpc	r15, r25
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <setup+0x94c>
    2f0c:	54 c0       	rjmp	.+168    	; 0x2fb6 <setup+0x9f4>
attach():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2f0e:	28 eb       	ldi	r18, 0xB8	; 184
    2f10:	32 e0       	ldi	r19, 0x02	; 2
    2f12:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <Menu1+0x1>
    2f16:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <Menu1+0x2>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:9
  
  currentMenu = menuRoot;
    2f20:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <Menu1+0x4>
    2f24:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:10
  currentMenuItemCount = rootMenuItemCount;
    2f28:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:11
  currentMenuItemIndexPos = 0;
    2f2c:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:12
  menuStackCount = 0;
    2f30:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Menu1+0x1b>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:214
            {
                Menu1.attach(configMenu_Root, menuCount(configMenu_Root));
                appMode = APP_MENU_MODE;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:215
                refreshMenuDisplay(REFRESH_DESCEND);
    2f3a:	83 e0       	ldi	r24, 0x03	; 3
    2f3c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:216
                timrLCD = millis();
    2f40:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    2f44:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <timrLCD>
    2f48:	70 93 e0 03 	sts	0x03E0, r23	; 0x8003e0 <timrLCD+0x1>
    2f4c:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <timrLCD+0x2>
    2f50:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:217
                timrMNU = millis();
    2f54:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    2f58:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <timrMNU>
    2f5c:	70 93 dc 03 	sts	0x03DC, r23	; 0x8003dc <timrMNU+0x1>
    2f60:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <timrMNU+0x2>
    2f64:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:242
                timr_Time = millis();
            }
        }
    }

    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    2f68:	85 e0       	ldi	r24, 0x05	; 5
    2f6a:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    2f6e:	89 2b       	or	r24, r25
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <setup+0x9b2>
    2f72:	71 c0       	rjmp	.+226    	; 0x3056 <setup+0xa94>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:245
        testMode = true;
    else
        testMode = false;
    2f74:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <testMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:246
}
    2f78:	2e 96       	adiw	r28, 0x0e	; 14
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	cf 90       	pop	r12
    2f94:	bf 90       	pop	r11
    2f96:	af 90       	pop	r10
    2f98:	9f 90       	pop	r9
    2f9a:	8f 90       	pop	r8
    2f9c:	7f 90       	pop	r7
    2f9e:	6f 90       	pop	r6
    2fa0:	5f 90       	pop	r5
    2fa2:	4f 90       	pop	r4
    2fa4:	08 95       	ret
attach():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:6
#include "MenuManager.h"
#include <avr/pgmspace.h>

void MenuManager::attach(const MenuItem *root, unsigned char itemCount)
{
  menuRoot = root;
    2fa6:	25 ed       	ldi	r18, 0xD5	; 213
    2fa8:	32 e0       	ldi	r19, 0x02	; 2
    2faa:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <Menu1+0x1>
    2fae:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <Menu1>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:7
  rootMenuItemCount = itemCount;
    2fb2:	85 e0       	ldi	r24, 0x05	; 5
    2fb4:	d9 ce       	rjmp	.-590    	; 0x2d68 <setup+0x7a6>
setup():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:221
                timrLCD = millis();
                timrMNU = millis();
                break;
            }

            if (millis() - timr_Time > 300)
    2fb6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    2fba:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <timr_Time>
    2fbe:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <timr_Time+0x1>
    2fc2:	40 91 c9 03 	lds	r20, 0x03C9	; 0x8003c9 <timr_Time+0x2>
    2fc6:	50 91 ca 03 	lds	r21, 0x03CA	; 0x8003ca <timr_Time+0x3>
    2fca:	62 1b       	sub	r22, r18
    2fcc:	73 0b       	sbc	r23, r19
    2fce:	84 0b       	sbc	r24, r20
    2fd0:	95 0b       	sbc	r25, r21
    2fd2:	6d 32       	cpi	r22, 0x2D	; 45
    2fd4:	71 40       	sbci	r23, 0x01	; 1
    2fd6:	81 05       	cpc	r24, r1
    2fd8:	91 05       	cpc	r25, r1
    2fda:	08 f4       	brcc	.+2      	; 0x2fde <setup+0xa1c>
    2fdc:	12 cf       	rjmp	.-476    	; 0x2e02 <setup+0x840>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:223
            {
                if (blink)
    2fde:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:225
                {
                    lcd.setCursor(4, 1);
    2fe2:	61 e0       	ldi	r22, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:223
                break;
            }

            if (millis() - timr_Time > 300)
            {
                if (blink)
    2fe4:	88 23       	and	r24, r24
    2fe6:	59 f1       	breq	.+86     	; 0x303e <setup+0xa7c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:225
                {
                    lcd.setCursor(4, 1);
    2fe8:	84 e0       	ldi	r24, 0x04	; 4
    2fea:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:226
                    inttostr(intstr, typedPwd);
    2fee:	b7 01       	movw	r22, r14
    2ff0:	c6 01       	movw	r24, r12
    2ff2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <inttostr(char*, short)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:227
                    lpad(valbuf, intstr, '0', 4);
    2ff6:	44 e0       	ldi	r20, 0x04	; 4
    2ff8:	b6 01       	movw	r22, r12
    2ffa:	80 ee       	ldi	r24, 0xE0	; 224
    2ffc:	92 e0       	ldi	r25, 0x02	; 2
    2ffe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lpad(char*, char const*, char, unsigned char) [clone .constprop.98]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:228
                    lcd.print(fmt(strbuf, 1, valbuf));
    3002:	80 ee       	ldi	r24, 0xE0	; 224
    3004:	92 e0       	ldi	r25, 0x02	; 2
    3006:	9f 93       	push	r25
    3008:	8f 93       	push	r24
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	8f 93       	push	r24
    300e:	9f 92       	push	r9
    3010:	8f 92       	push	r8
    3012:	0e 94 ad 0c 	call	0x195a	; 0x195a <fmt(char*, unsigned char, ...)>
    3016:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:229
                    blink = false;
    301a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:237
                {
                    lcd.setCursor(curPos + 4, 1);
                    lcd.print(" ");
                    blink = true;
                }
                timr_Time = millis();
    3028:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    302c:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <timr_Time>
    3030:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <timr_Time+0x1>
    3034:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timr_Time+0x2>
    3038:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timr_Time+0x3>
    303c:	e2 ce       	rjmp	.-572    	; 0x2e02 <setup+0x840>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:233
                    lcd.print(fmt(strbuf, 1, valbuf));
                    blink = false;
                }
                else
                {
                    lcd.setCursor(curPos + 4, 1);
    303e:	84 e0       	ldi	r24, 0x04	; 4
    3040:	80 0f       	add	r24, r16
    3042:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:234
                    lcd.print(" ");
    3046:	89 ed       	ldi	r24, 0xD9	; 217
    3048:	91 e0       	ldi	r25, 0x01	; 1
    304a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:235
                    blink = true;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    3054:	e9 cf       	rjmp	.-46     	; 0x3028 <setup+0xa66>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:242
                timr_Time = millis();
            }
        }
    }

    if (!digitalRead(SELECT_BUT) && !digitalRead(BACK_BUT))
    3056:	88 e0       	ldi	r24, 0x08	; 8
    3058:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    305c:	89 2b       	or	r24, r25
    305e:	09 f0       	breq	.+2      	; 0x3062 <setup+0xaa0>
    3060:	89 cf       	rjmp	.-238    	; 0x2f74 <setup+0x9b2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:243
        testMode = true;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <testMode>
    3068:	87 cf       	rjmp	.-242    	; 0x2f78 <setup+0x9b6>

0000306a <__vector_16>:
__vector_16():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    306a:	1f 92       	push	r1
    306c:	0f 92       	push	r0
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	0f 92       	push	r0
    3072:	11 24       	eor	r1, r1
    3074:	2f 93       	push	r18
    3076:	3f 93       	push	r19
    3078:	8f 93       	push	r24
    307a:	9f 93       	push	r25
    307c:	af 93       	push	r26
    307e:	bf 93       	push	r27
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    3080:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <timer0_millis>
    3084:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <timer0_millis+0x1>
    3088:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <timer0_millis+0x2>
    308c:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    3090:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    3094:	23 e0       	ldi	r18, 0x03	; 3
    3096:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    3098:	2d 37       	cpi	r18, 0x7D	; 125
    309a:	68 f1       	brcs	.+90     	; 0x30f6 <__vector_16+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    309c:	26 e8       	ldi	r18, 0x86	; 134
    309e:	23 0f       	add	r18, r19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    30a0:	02 96       	adiw	r24, 0x02	; 2
    30a2:	a1 1d       	adc	r26, r1
    30a4:	b1 1d       	adc	r27, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    30a6:	20 93 7e 03 	sts	0x037E, r18	; 0x80037e <timer0_fract>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    30aa:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <timer0_millis>
    30ae:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <timer0_millis+0x1>
    30b2:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <timer0_millis+0x2>
    30b6:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <timer0_millis+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    30ba:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timer0_overflow_count>
    30be:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timer0_overflow_count+0x1>
    30c2:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timer0_overflow_count+0x2>
    30c6:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timer0_overflow_count+0x3>
    30ca:	01 96       	adiw	r24, 0x01	; 1
    30cc:	a1 1d       	adc	r26, r1
    30ce:	b1 1d       	adc	r27, r1
    30d0:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <timer0_overflow_count>
    30d4:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <timer0_overflow_count+0x1>
    30d8:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <timer0_overflow_count+0x2>
    30dc:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <timer0_overflow_count+0x3>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    30e0:	bf 91       	pop	r27
    30e2:	af 91       	pop	r26
    30e4:	9f 91       	pop	r25
    30e6:	8f 91       	pop	r24
    30e8:	3f 91       	pop	r19
    30ea:	2f 91       	pop	r18
    30ec:	0f 90       	pop	r0
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	0f 90       	pop	r0
    30f2:	1f 90       	pop	r1
    30f4:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    30f6:	01 96       	adiw	r24, 0x01	; 1
    30f8:	a1 1d       	adc	r26, r1
    30fa:	b1 1d       	adc	r27, r1
    30fc:	d4 cf       	rjmp	.-88     	; 0x30a6 <__vector_16+0x3c>

000030fe <__vector_3>:
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:239
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    30fe:	1f 92       	push	r1
    3100:	0f 92       	push	r0
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	0f 92       	push	r0
    3106:	11 24       	eor	r1, r1
    3108:	2f 93       	push	r18
    310a:	3f 93       	push	r19
    310c:	4f 93       	push	r20
    310e:	5f 93       	push	r21
    3110:	6f 93       	push	r22
    3112:	7f 93       	push	r23
    3114:	8f 93       	push	r24
    3116:	9f 93       	push	r25
    3118:	af 93       	push	r26
    311a:	bf 93       	push	r27
    311c:	ef 93       	push	r30
    311e:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:231
#endif

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    3120:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <SoftwareSerial::active_object>
    3124:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <SoftwareSerial::active_object+0x1>
    3128:	30 97       	sbiw	r30, 0x00	; 0
    312a:	49 f0       	breq	.+18     	; 0x313e <__vector_3+0x40>
    312c:	a6 85       	ldd	r26, Z+14	; 0x0e
    312e:	b7 85       	ldd	r27, Z+15	; 0x0f
    3130:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    3132:	96 8d       	ldd	r25, Z+30	; 0x1e
    3134:	91 ff       	sbrs	r25, 1
    3136:	14 c0       	rjmp	.+40     	; 0x3160 <__vector_3+0x62>
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    3138:	9c 91       	ld	r25, X
    313a:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    313c:	a1 f4       	brne	.+40     	; 0x3166 <__vector_3+0x68>
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:241

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    313e:	ff 91       	pop	r31
    3140:	ef 91       	pop	r30
    3142:	bf 91       	pop	r27
    3144:	af 91       	pop	r26
    3146:	9f 91       	pop	r25
    3148:	8f 91       	pop	r24
    314a:	7f 91       	pop	r23
    314c:	6f 91       	pop	r22
    314e:	5f 91       	pop	r21
    3150:	4f 91       	pop	r20
    3152:	3f 91       	pop	r19
    3154:	2f 91       	pop	r18
    3156:	0f 90       	pop	r0
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	0f 90       	pop	r0
    315c:	1f 90       	pop	r1
    315e:	18 95       	reti
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    3160:	9c 91       	ld	r25, X
    3162:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:148

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    3164:	61 f7       	brne	.-40     	; 0x313e <__vector_3+0x40>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    3166:	a3 89       	ldd	r26, Z+19	; 0x13
    3168:	b4 89       	ldd	r27, Z+20	; 0x14
    316a:	9c 91       	ld	r25, X
    316c:	85 89       	ldd	r24, Z+21	; 0x15
    316e:	80 95       	com	r24
    3170:	89 23       	and	r24, r25
    3172:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    3174:	86 89       	ldd	r24, Z+22	; 0x16
    3176:	97 89       	ldd	r25, Z+23	; 0x17
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <__vector_3+0x7a>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:162
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    317c:	60 8d       	ldd	r22, Z+24	; 0x18
    317e:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    3180:	a6 85       	ldd	r26, Z+14	; 0x0e
    3182:	b7 85       	ldd	r27, Z+15	; 0x0f
    3184:	55 85       	ldd	r21, Z+13	; 0x0d
    3186:	38 e0       	ldi	r19, 0x08	; 8
__vector_3():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:144
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    3188:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    318a:	cb 01       	movw	r24, r22
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <__vector_3+0x8e>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:163

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    3190:	82 2f       	mov	r24, r18
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	95 95       	asr	r25
    3196:	87 95       	ror	r24
    3198:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:213
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    319a:	4c 91       	ld	r20, X
    319c:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:165
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    319e:	09 f0       	breq	.+2      	; 0x31a2 <__vector_3+0xa4>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:166
        d |= 0x80;
    31a0:	20 68       	ori	r18, 0x80	; 128
    31a2:	31 50       	subi	r19, 0x01	; 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:160
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    31a4:	91 f7       	brne	.-28     	; 0x318a <__vector_3+0x8c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:169
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    31a6:	86 8d       	ldd	r24, Z+30	; 0x1e
    31a8:	81 fd       	sbrc	r24, 1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:170
      d = ~d;
    31aa:	20 95       	com	r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:173

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    31ac:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	8f 73       	andi	r24, 0x3F	; 63
    31b6:	99 27       	eor	r25, r25
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:174
    if (next != _receive_buffer_head)
    31b8:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <SoftwareSerial::_receive_buffer_head>
    31bc:	38 17       	cp	r19, r24
    31be:	99 f0       	breq	.+38     	; 0x31e6 <__vector_3+0xe8>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:177
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    31c0:	a0 91 7a 03 	lds	r26, 0x037A	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	a6 5c       	subi	r26, 0xC6	; 198
    31c8:	bc 4f       	sbci	r27, 0xFC	; 252
    31ca:	2c 93       	st	X, r18
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:178
      _receive_buffer_tail = next;
    31cc:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
    31d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <__vector_3+0xd6>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:440
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    31d8:	a3 89       	ldd	r26, Z+19	; 0x13
    31da:	b4 89       	ldd	r27, Z+20	; 0x14
    31dc:	8c 91       	ld	r24, X
    31de:	95 89       	ldd	r25, Z+21	; 0x15
    31e0:	89 2b       	or	r24, r25
    31e2:	8c 93       	st	X, r24
    31e4:	ac cf       	rjmp	.-168    	; 0x313e <__vector_3+0x40>
_ZN14SoftwareSerial4recvEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:183
      _receive_buffer_tail = next;
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    31e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    31e8:	81 60       	ori	r24, 0x01	; 1
    31ea:	86 8f       	std	Z+30, r24	; 0x1e
    31ec:	f1 cf       	rjmp	.-30     	; 0x31d0 <__vector_3+0xd2>

000031ee <__vector_24>:
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	2f 93       	push	r18
    31fa:	3f 93       	push	r19
    31fc:	4f 93       	push	r20
    31fe:	5f 93       	push	r21
    3200:	6f 93       	push	r22
    3202:	7f 93       	push	r23
    3204:	8f 93       	push	r24
    3206:	9f 93       	push	r25
    3208:	af 93       	push	r26
    320a:	bf 93       	push	r27
    320c:	ef 93       	push	r30
    320e:	ff 93       	push	r31
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    3210:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    3214:	88 7f       	andi	r24, 0xF8	; 248
    3216:	80 36       	cpi	r24, 0x60	; 96
    3218:	09 f4       	brne	.+2      	; 0x321c <__vector_24+0x2e>
    321a:	4a c0       	rjmp	.+148    	; 0x32b0 <__vector_24+0xc2>
    321c:	f0 f5       	brcc	.+124    	; 0x329a <__vector_24+0xac>
    321e:	88 32       	cpi	r24, 0x28	; 40
    3220:	09 f4       	brne	.+2      	; 0x3224 <__vector_24+0x36>
    3222:	a7 c0       	rjmp	.+334    	; 0x3372 <__vector_24+0x184>
    3224:	18 f5       	brcc	.+70     	; 0x326c <__vector_24+0x7e>
    3226:	80 31       	cpi	r24, 0x10	; 16
    3228:	09 f4       	brne	.+2      	; 0x322c <__vector_24+0x3e>
    322a:	9b c0       	rjmp	.+310    	; 0x3362 <__vector_24+0x174>
    322c:	b8 f4       	brcc	.+46     	; 0x325c <__vector_24+0x6e>
    322e:	88 23       	and	r24, r24
    3230:	09 f4       	brne	.+2      	; 0x3234 <__vector_24+0x46>
    3232:	f9 c0       	rjmp	.+498    	; 0x3426 <__vector_24+0x238>
    3234:	88 30       	cpi	r24, 0x08	; 8
    3236:	09 f4       	brne	.+2      	; 0x323a <__vector_24+0x4c>
    3238:	94 c0       	rjmp	.+296    	; 0x3362 <__vector_24+0x174>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    323a:	ff 91       	pop	r31
    323c:	ef 91       	pop	r30
    323e:	bf 91       	pop	r27
    3240:	af 91       	pop	r26
    3242:	9f 91       	pop	r25
    3244:	8f 91       	pop	r24
    3246:	7f 91       	pop	r23
    3248:	6f 91       	pop	r22
    324a:	5f 91       	pop	r21
    324c:	4f 91       	pop	r20
    324e:	3f 91       	pop	r19
    3250:	2f 91       	pop	r18
    3252:	0f 90       	pop	r0
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	0f 90       	pop	r0
    3258:	1f 90       	pop	r1
    325a:	18 95       	reti
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    325c:	88 31       	cpi	r24, 0x18	; 24
    325e:	09 f4       	brne	.+2      	; 0x3262 <__vector_24+0x74>
    3260:	88 c0       	rjmp	.+272    	; 0x3372 <__vector_24+0x184>
    3262:	80 32       	cpi	r24, 0x20	; 32
    3264:	51 f7       	brne	.-44     	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3266:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
    326a:	14 c0       	rjmp	.+40     	; 0x3294 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    326c:	80 34       	cpi	r24, 0x40	; 64
    326e:	09 f4       	brne	.+2      	; 0x3272 <__vector_24+0x84>
    3270:	9d c0       	rjmp	.+314    	; 0x33ac <__vector_24+0x1be>
    3272:	40 f4       	brcc	.+16     	; 0x3284 <__vector_24+0x96>
    3274:	80 33       	cpi	r24, 0x30	; 48
    3276:	b9 f3       	breq	.-18     	; 0x3266 <__vector_24+0x78>
    3278:	88 33       	cpi	r24, 0x38	; 56
    327a:	f9 f6       	brne	.-66     	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    327c:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3280:	85 ec       	ldi	r24, 0xC5	; 197
    3282:	b0 c0       	rjmp	.+352    	; 0x33e4 <__vector_24+0x1f6>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3284:	80 35       	cpi	r24, 0x50	; 80
    3286:	09 f4       	brne	.+2      	; 0x328a <__vector_24+0x9c>
    3288:	85 c0       	rjmp	.+266    	; 0x3394 <__vector_24+0x1a6>
    328a:	88 35       	cpi	r24, 0x58	; 88
    328c:	09 f4       	brne	.+2      	; 0x3290 <__vector_24+0xa2>
    328e:	96 c0       	rjmp	.+300    	; 0x33bc <__vector_24+0x1ce>
    3290:	88 34       	cpi	r24, 0x48	; 72
    3292:	99 f6       	brne	.-90     	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    3294:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <twi_stop>
    3298:	d0 cf       	rjmp	.-96     	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    329a:	88 39       	cpi	r24, 0x98	; 152
    329c:	09 f4       	brne	.+2      	; 0x32a0 <__vector_24+0xb2>
    329e:	8c c0       	rjmp	.+280    	; 0x33b8 <__vector_24+0x1ca>
    32a0:	38 f5       	brcc	.+78     	; 0x32f0 <__vector_24+0x102>
    32a2:	88 37       	cpi	r24, 0x78	; 120
    32a4:	29 f0       	breq	.+10     	; 0x32b0 <__vector_24+0xc2>
    32a6:	50 f4       	brcc	.+20     	; 0x32bc <__vector_24+0xce>
    32a8:	88 36       	cpi	r24, 0x68	; 104
    32aa:	11 f0       	breq	.+4      	; 0x32b0 <__vector_24+0xc2>
    32ac:	80 37       	cpi	r24, 0x70	; 112
    32ae:	29 f6       	brne	.-118    	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    32b0:	83 e0       	ldi	r24, 0x03	; 3
    32b2:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    32b6:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_rxBufferIndex>
    32ba:	57 c0       	rjmp	.+174    	; 0x336a <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    32bc:	88 38       	cpi	r24, 0x88	; 136
    32be:	09 f4       	brne	.+2      	; 0x32c2 <__vector_24+0xd4>
    32c0:	7b c0       	rjmp	.+246    	; 0x33b8 <__vector_24+0x1ca>
    32c2:	80 39       	cpi	r24, 0x90	; 144
    32c4:	19 f0       	breq	.+6      	; 0x32cc <__vector_24+0xde>
    32c6:	80 38       	cpi	r24, 0x80	; 128
    32c8:	09 f0       	breq	.+2      	; 0x32cc <__vector_24+0xde>
    32ca:	b7 cf       	rjmp	.-146    	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    32cc:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_rxBufferIndex>
    32d0:	80 32       	cpi	r24, 0x20	; 32
    32d2:	08 f0       	brcs	.+2      	; 0x32d6 <__vector_24+0xe8>
    32d4:	71 c0       	rjmp	.+226    	; 0x33b8 <__vector_24+0x1ca>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    32d6:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <twi_rxBufferIndex>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	8e 0f       	add	r24, r30
    32de:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <twi_rxBufferIndex>
    32e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	e7 5e       	subi	r30, 0xE7	; 231
    32ea:	fc 4f       	sbci	r31, 0xFC	; 252
    32ec:	80 83       	st	Z, r24
    32ee:	3d c0       	rjmp	.+122    	; 0x336a <__vector_24+0x17c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    32f0:	80 3b       	cpi	r24, 0xB0	; 176
    32f2:	39 f0       	breq	.+14     	; 0x3302 <__vector_24+0x114>
    32f4:	e0 f4       	brcc	.+56     	; 0x332e <__vector_24+0x140>
    32f6:	80 3a       	cpi	r24, 0xA0	; 160
    32f8:	09 f4       	brne	.+2      	; 0x32fc <__vector_24+0x10e>
    32fa:	79 c0       	rjmp	.+242    	; 0x33ee <__vector_24+0x200>
    32fc:	88 3a       	cpi	r24, 0xA8	; 168
    32fe:	09 f0       	breq	.+2      	; 0x3302 <__vector_24+0x114>
    3300:	9c cf       	rjmp	.-200    	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3302:	84 e0       	ldi	r24, 0x04	; 4
    3304:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_state>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3308:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <twi_txBufferIndex>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    330c:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3310:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <twi_onSlaveTransmit>
    3314:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <twi_onSlaveTransmit+0x1>
    3318:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    331a:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_txBufferLength>
    331e:	81 11       	cpse	r24, r1
    3320:	0f c0       	rjmp	.+30     	; 0x3340 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <twi_txBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    3328:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <twi_txBuffer>
    332c:	09 c0       	rjmp	.+18     	; 0x3340 <__vector_24+0x152>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    332e:	80 3c       	cpi	r24, 0xC0	; 192
    3330:	09 f4       	brne	.+2      	; 0x3334 <__vector_24+0x146>
    3332:	a6 cf       	rjmp	.-180    	; 0x3280 <__vector_24+0x92>
    3334:	88 3c       	cpi	r24, 0xC8	; 200
    3336:	09 f4       	brne	.+2      	; 0x333a <__vector_24+0x14c>
    3338:	a3 cf       	rjmp	.-186    	; 0x3280 <__vector_24+0x92>
    333a:	88 3b       	cpi	r24, 0xB8	; 184
    333c:	09 f0       	breq	.+2      	; 0x3340 <__vector_24+0x152>
    333e:	7d cf       	rjmp	.-262    	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3340:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <twi_txBufferIndex>
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	8e 0f       	add	r24, r30
    3348:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <twi_txBufferIndex>
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	e9 50       	subi	r30, 0x09	; 9
    3350:	fd 4f       	sbci	r31, 0xFD	; 253
    3352:	80 81       	ld	r24, Z
    3354:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3358:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <twi_txBufferIndex>
    335c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_txBufferLength>
    3360:	29 c0       	rjmp	.+82     	; 0x33b4 <__vector_24+0x1c6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3362:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <twi_slarw>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3366:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    336a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    336c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    3370:	64 cf       	rjmp	.-312    	; 0x323a <__vector_24+0x4c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3372:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <twi_masterBufferIndex>
    3376:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_masterBufferLength>
    337a:	98 17       	cp	r25, r24
    337c:	58 f5       	brcc	.+86     	; 0x33d4 <__vector_24+0x1e6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    337e:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <twi_masterBufferIndex>
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	8e 0f       	add	r24, r30
    3386:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_masterBufferIndex>
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	e2 5f       	subi	r30, 0xF2	; 242
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	80 81       	ld	r24, Z
    3392:	e9 cf       	rjmp	.-46     	; 0x3366 <__vector_24+0x178>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3394:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <twi_masterBufferIndex>
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	8e 0f       	add	r24, r30
    339c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_masterBufferIndex>
    33a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	e2 5f       	subi	r30, 0xF2	; 242
    33a8:	fb 4f       	sbci	r31, 0xFB	; 251
    33aa:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    33ac:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <twi_masterBufferIndex>
    33b0:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_masterBufferLength>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    33b4:	98 17       	cp	r25, r24
    33b6:	c8 f2       	brcs	.-78     	; 0x336a <__vector_24+0x17c>
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    33b8:	85 e8       	ldi	r24, 0x85	; 133
    33ba:	d8 cf       	rjmp	.-80     	; 0x336c <__vector_24+0x17e>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    33bc:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <twi_masterBufferIndex>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	8e 0f       	add	r24, r30
    33c4:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_masterBufferIndex>
    33c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	e2 5f       	subi	r30, 0xF2	; 242
    33d0:	fb 4f       	sbci	r31, 0xFB	; 251
    33d2:	80 83       	st	Z, r24
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    33d4:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_sendStop>
    33d8:	81 11       	cpse	r24, r1
    33da:	5c cf       	rjmp	.-328    	; 0x3294 <__vector_24+0xa6>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <twi_inRepStart>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    33e2:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    33e8:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
    33ec:	26 cf       	rjmp	.-436    	; 0x323a <__vector_24+0x4c>
twi_releaseBus():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    33ee:	85 ec       	ldi	r24, 0xC5	; 197
    33f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    33f4:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
__vector_24():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    33f8:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_rxBufferIndex>
    33fc:	80 32       	cpi	r24, 0x20	; 32
    33fe:	30 f4       	brcc	.+12     	; 0x340c <__vector_24+0x21e>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3400:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <twi_rxBufferIndex>
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	e7 5e       	subi	r30, 0xE7	; 231
    3408:	fc 4f       	sbci	r31, 0xFC	; 252
    340a:	10 82       	st	Z, r1
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    340c:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <twi_rxBufferIndex>
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <twi_onSlaveReceive>
    3416:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <twi_onSlaveReceive+0x1>
    341a:	89 e1       	ldi	r24, 0x19	; 25
    341c:	93 e0       	ldi	r25, 0x03	; 3
    341e:	09 95       	icall
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3420:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_rxBufferIndex>
    3424:	0a cf       	rjmp	.-492    	; 0x323a <__vector_24+0x4c>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3426:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_error>
    342a:	34 cf       	rjmp	.-408    	; 0x3294 <__vector_24+0xa6>

0000342c <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641>:
_GLOBAL__I_65535_0_ChantBellV3.3.ino.cpp.o.3641():
    342c:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <Wire+0x3>
    3430:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <Wire+0x2>
    3434:	88 ee       	ldi	r24, 0xE8	; 232
    3436:	93 e0       	ldi	r25, 0x03	; 3
    3438:	a0 e0       	ldi	r26, 0x00	; 0
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <Wire+0x4>
    3440:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <Wire+0x5>
    3444:	a0 93 23 05 	sts	0x0523, r26	; 0x800523 <Wire+0x6>
    3448:	b0 93 24 05 	sts	0x0524, r27	; 0x800524 <Wire+0x7>
    344c:	22 e8       	ldi	r18, 0x82	; 130
    344e:	31 e0       	ldi	r19, 0x01	; 1
    3450:	30 93 1e 05 	sts	0x051E, r19	; 0x80051e <Wire+0x1>
    3454:	20 93 1d 05 	sts	0x051D, r18	; 0x80051d <Wire>
    3458:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <mySoftwareSerial+0x3>
    345c:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <mySoftwareSerial+0x2>
    3460:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <mySoftwareSerial+0x4>
    3464:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <mySoftwareSerial+0x5>
    3468:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <mySoftwareSerial+0x6>
    346c:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <mySoftwareSerial+0x7>
    3470:	80 ea       	ldi	r24, 0xA0	; 160
    3472:	91 e0       	ldi	r25, 0x01	; 1
    3474:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <mySoftwareSerial+0x1>
    3478:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <mySoftwareSerial>
    347c:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <mySoftwareSerial+0x17>
    3480:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <mySoftwareSerial+0x16>
    3484:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <mySoftwareSerial+0x19>
    3488:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <mySoftwareSerial+0x18>
    348c:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <mySoftwareSerial+0x1b>
    3490:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <mySoftwareSerial+0x1a>
    3494:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <mySoftwareSerial+0x1d>
    3498:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <mySoftwareSerial+0x1c>
    349c:	60 91 c7 05 	lds	r22, 0x05C7	; 0x8005c7 <mySoftwareSerial+0x1e>
    34a0:	6e 7f       	andi	r22, 0xFE	; 254
    34a2:	6d 7f       	andi	r22, 0xFD	; 253
    34a4:	60 93 c7 05 	sts	0x05C7, r22	; 0x8005c7 <mySoftwareSerial+0x1e>
    34a8:	66 95       	lsr	r22
    34aa:	61 70       	andi	r22, 0x01	; 1
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	68 27       	eor	r22, r24
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
    34b6:	61 e0       	ldi	r22, 0x01	; 1
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
    34be:	e9 e0       	ldi	r30, 0x09	; 9
    34c0:	f4 e0       	ldi	r31, 0x04	; 4
    34c2:	e4 91       	lpm	r30, Z
    34c4:	e0 93 b9 05 	sts	0x05B9, r30	; 0x8005b9 <mySoftwareSerial+0x10>
    34c8:	e2 ef       	ldi	r30, 0xF2	; 242
    34ca:	f3 e0       	ldi	r31, 0x03	; 3
    34cc:	e4 91       	lpm	r30, Z
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	eb 51       	subi	r30, 0x1B	; 27
    34d6:	fc 4f       	sbci	r31, 0xFC	; 252
    34d8:	85 91       	lpm	r24, Z+
    34da:	94 91       	lpm	r25, Z
    34dc:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <mySoftwareSerial+0x12>
    34e0:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <mySoftwareSerial+0x11>
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	82 e0       	ldi	r24, 0x02	; 2
    34e8:	0e 94 cc 03 	call	0x798	; 0x798 <pinMode>
    34ec:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <mySoftwareSerial+0x1e>
    34f0:	81 fd       	sbrc	r24, 1
    34f2:	04 c0       	rjmp	.+8      	; 0x34fc <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0xd0>
    34f4:	61 e0       	ldi	r22, 0x01	; 1
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <mySoftwareSerial+0xc>
    3502:	e8 e0       	ldi	r30, 0x08	; 8
    3504:	f4 e0       	ldi	r31, 0x04	; 4
    3506:	e4 91       	lpm	r30, Z
    3508:	e0 93 b6 05 	sts	0x05B6, r30	; 0x8005b6 <mySoftwareSerial+0xd>
    350c:	e1 ef       	ldi	r30, 0xF1	; 241
    350e:	f3 e0       	ldi	r31, 0x03	; 3
    3510:	e4 91       	lpm	r30, Z
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	ee 0f       	add	r30, r30
    3516:	ff 1f       	adc	r31, r31
    3518:	e5 52       	subi	r30, 0x25	; 37
    351a:	fc 4f       	sbci	r31, 0xFC	; 252
    351c:	25 91       	lpm	r18, Z+
    351e:	34 91       	lpm	r19, Z
    3520:	30 93 b8 05 	sts	0x05B8, r19	; 0x8005b8 <mySoftwareSerial+0xf>
    3524:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <mySoftwareSerial+0xe>
    3528:	44 ef       	ldi	r20, 0xF4	; 244
    352a:	51 e0       	ldi	r21, 0x01	; 1
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	40 93 89 05 	sts	0x0589, r20	; 0x800589 <myDFPlayer+0x6>
    3534:	50 93 8a 05 	sts	0x058A, r21	; 0x80058a <myDFPlayer+0x7>
    3538:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <myDFPlayer+0x8>
    353c:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <myDFPlayer+0x9>
    3540:	9a e0       	ldi	r25, 0x0A	; 10
    3542:	eb e1       	ldi	r30, 0x1B	; 27
    3544:	f1 e0       	ldi	r31, 0x01	; 1
    3546:	a7 e9       	ldi	r26, 0x97	; 151
    3548:	b5 e0       	ldi	r27, 0x05	; 5
    354a:	01 90       	ld	r0, Z+
    354c:	0d 92       	st	X+, r0
    354e:	9a 95       	dec	r25
    3550:	e1 f7       	brne	.-8      	; 0x354a <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0x11e>
    3552:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <myDFPlayer+0x1e>
    3556:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <myDFPlayer+0x1f>
    355a:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <myDFPlayer+0x24>
    355e:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <myDFPlayer+0x25>
    3562:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <lcd+0x3>
    3566:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <lcd+0x2>
    356a:	24 e9       	ldi	r18, 0x94	; 148
    356c:	31 e0       	ldi	r19, 0x01	; 1
    356e:	30 93 78 05 	sts	0x0578, r19	; 0x800578 <lcd+0x1>
    3572:	20 93 77 05 	sts	0x0577, r18	; 0x800577 <lcd>
    3576:	97 e2       	ldi	r25, 0x27	; 39
    3578:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <lcd+0x4>
    357c:	90 e1       	ldi	r25, 0x10	; 16
    357e:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <lcd+0x9>
    3582:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <lcd+0xa>
    3586:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <lcd+0xb>
    358a:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <bell+0x5>
    358e:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <bell+0x4>
    3592:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <bell+0x3>
    3596:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <bell>
    359a:	e0 ed       	ldi	r30, 0xD0	; 208
    359c:	f3 e0       	ldi	r31, 0x03	; 3
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	8c 30       	cpi	r24, 0x0C	; 12
    35a2:	51 f0       	breq	.+20     	; 0x35b8 <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0x18c>
    35a4:	94 91       	lpm	r25, Z
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	09 f4       	brne	.+2      	; 0x35ac <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0x180>
    35aa:	9f 5f       	subi	r25, 0xFF	; 255
    35ac:	21 e0       	ldi	r18, 0x01	; 1
    35ae:	28 0f       	add	r18, r24
    35b0:	31 96       	adiw	r30, 0x01	; 1
    35b2:	99 23       	and	r25, r25
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0x18c>
    35b6:	4d c0       	rjmp	.+154    	; 0x3652 <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0x226>
    35b8:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <bell+0x1>
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <bell+0x2>
    35c2:	60 e1       	ldi	r22, 0x10	; 16
    35c4:	72 e0       	ldi	r23, 0x02	; 2
    35c6:	89 e2       	ldi	r24, 0x29	; 41
    35c8:	95 e0       	ldi	r25, 0x05	; 5
    35ca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    35ce:	64 e1       	ldi	r22, 0x14	; 20
    35d0:	72 e0       	ldi	r23, 0x02	; 2
    35d2:	8f e2       	ldi	r24, 0x2F	; 47
    35d4:	95 e0       	ldi	r25, 0x05	; 5
    35d6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    35da:	68 e1       	ldi	r22, 0x18	; 24
    35dc:	72 e0       	ldi	r23, 0x02	; 2
    35de:	85 e3       	ldi	r24, 0x35	; 53
    35e0:	95 e0       	ldi	r25, 0x05	; 5
    35e2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    35e6:	6c e1       	ldi	r22, 0x1C	; 28
    35e8:	72 e0       	ldi	r23, 0x02	; 2
    35ea:	8b e3       	ldi	r24, 0x3B	; 59
    35ec:	95 e0       	ldi	r25, 0x05	; 5
    35ee:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    35f2:	60 e2       	ldi	r22, 0x20	; 32
    35f4:	72 e0       	ldi	r23, 0x02	; 2
    35f6:	81 e4       	ldi	r24, 0x41	; 65
    35f8:	95 e0       	ldi	r25, 0x05	; 5
    35fa:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    35fe:	64 e2       	ldi	r22, 0x24	; 36
    3600:	72 e0       	ldi	r23, 0x02	; 2
    3602:	87 e4       	ldi	r24, 0x47	; 71
    3604:	95 e0       	ldi	r25, 0x05	; 5
    3606:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    360a:	68 e2       	ldi	r22, 0x28	; 40
    360c:	72 e0       	ldi	r23, 0x02	; 2
    360e:	8d e4       	ldi	r24, 0x4D	; 77
    3610:	95 e0       	ldi	r25, 0x05	; 5
    3612:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    3616:	6c e2       	ldi	r22, 0x2C	; 44
    3618:	72 e0       	ldi	r23, 0x02	; 2
    361a:	83 e5       	ldi	r24, 0x53	; 83
    361c:	95 e0       	ldi	r25, 0x05	; 5
    361e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    3622:	60 e3       	ldi	r22, 0x30	; 48
    3624:	72 e0       	ldi	r23, 0x02	; 2
    3626:	89 e5       	ldi	r24, 0x59	; 89
    3628:	95 e0       	ldi	r25, 0x05	; 5
    362a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    362e:	64 e3       	ldi	r22, 0x34	; 52
    3630:	72 e0       	ldi	r23, 0x02	; 2
    3632:	8f e5       	ldi	r24, 0x5F	; 95
    3634:	95 e0       	ldi	r25, 0x05	; 5
    3636:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    363a:	68 e3       	ldi	r22, 0x38	; 56
    363c:	72 e0       	ldi	r23, 0x02	; 2
    363e:	85 e6       	ldi	r24, 0x65	; 101
    3640:	95 e0       	ldi	r25, 0x05	; 5
    3642:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    3646:	6c e3       	ldi	r22, 0x3C	; 60
    3648:	72 e0       	ldi	r23, 0x02	; 2
    364a:	8b e6       	ldi	r24, 0x6B	; 107
    364c:	95 e0       	ldi	r25, 0x05	; 5
    364e:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <String::String(char const*)>
    3652:	82 2f       	mov	r24, r18
    3654:	a5 cf       	rjmp	.-182    	; 0x35a0 <global constructors keyed to 65535_0_ChantBellV3.3.ino.cpp.o.3641+0x174>

00003656 <main>:
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	ac 97       	sbiw	r28, 0x2c	; 44
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    366a:	78 94       	sei
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    366c:	84 b5       	in	r24, 0x24	; 36
    366e:	83 60       	ori	r24, 0x03	; 3
    3670:	84 bd       	out	0x24, r24	; 36
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3672:	85 b5       	in	r24, 0x25	; 37
    3674:	83 60       	ori	r24, 0x03	; 3
    3676:	85 bd       	out	0x25, r24	; 37
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    3678:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    367c:	81 60       	ori	r24, 0x01	; 1
    367e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3682:	82 e0       	ldi	r24, 0x02	; 2
    3684:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3688:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    368c:	81 60       	ori	r24, 0x01	; 1
    368e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3692:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3696:	81 60       	ori	r24, 0x01	; 1
    3698:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    369c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    36a0:	84 60       	ori	r24, 0x04	; 4
    36a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    36a6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36aa:	81 60       	ori	r24, 0x01	; 1
    36ac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    36b0:	87 e8       	ldi	r24, 0x87	; 135
    36b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    36b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    36ba:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <setup>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:779
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    36be:	9e 01       	movw	r18, r28
    36c0:	2f 5f       	subi	r18, 0xFF	; 255
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	3c a7       	std	Y+44, r19	; 0x2c
    36c6:	2b a7       	std	Y+43, r18	; 0x2b
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:33
  Light1On = 1079;
  Light1Off = 359;
  Light2On = 0;
  Light2Off = 0;
  PlayerMorTime = 300;
  PlayerMorDur= 115;
    36c8:	43 e7       	ldi	r20, 0x73	; 115
    36ca:	24 2e       	mov	r2, r20
    36cc:	31 2c       	mov	r3, r1
    36ce:	41 2c       	mov	r4, r1
    36d0:	51 2c       	mov	r5, r1
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:238

// ----------------------------------------------------------------------------------------------------
// If calling from ISR, comment out call in getButton() method.
void buttonHandlerCycle()
{
  if (millis() - buttonSampleTime >= 20)
    36d2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    36d6:	c0 90 b4 03 	lds	r12, 0x03B4	; 0x8003b4 <buttonSampleTime>
    36da:	d0 90 b5 03 	lds	r13, 0x03B5	; 0x8003b5 <buttonSampleTime+0x1>
    36de:	e0 90 b6 03 	lds	r14, 0x03B6	; 0x8003b6 <buttonSampleTime+0x2>
    36e2:	f0 90 b7 03 	lds	r15, 0x03B7	; 0x8003b7 <buttonSampleTime+0x3>
    36e6:	6c 19       	sub	r22, r12
    36e8:	7d 09       	sbc	r23, r13
    36ea:	8e 09       	sbc	r24, r14
    36ec:	9f 09       	sbc	r25, r15
    36ee:	64 31       	cpi	r22, 0x14	; 20
    36f0:	71 05       	cpc	r23, r1
    36f2:	81 05       	cpc	r24, r1
    36f4:	91 05       	cpc	r25, r1
    36f6:	08 f4       	brcc	.+2      	; 0x36fa <main+0xa4>
    36f8:	9f c0       	rjmp	.+318    	; 0x3838 <main+0x1e2>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:240
  {
    buttonSampleTime = millis();
    36fa:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    36fe:	60 93 b4 03 	sts	0x03B4, r22	; 0x8003b4 <buttonSampleTime>
    3702:	70 93 b5 03 	sts	0x03B5, r23	; 0x8003b5 <buttonSampleTime+0x1>
    3706:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <buttonSampleTime+0x2>
    370a:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <buttonSampleTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    370e:	85 e0       	ldi	r24, 0x05	; 5
    3710:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    3714:	7c 01       	movw	r14, r24
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:247
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    3716:	86 e0       	ldi	r24, 0x06	; 6
    3718:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
main():
    371c:	01 e0       	ldi	r16, 0x01	; 1
buttonHandlerCycle():
    371e:	89 2b       	or	r24, r25
    3720:	21 f0       	breq	.+8      	; 0x372a <main+0xd4>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:246
    
    byte btnStateNow;
    // int analogReading = analogRead (BUTTON_PIN);

    byte curBut=255;
    if (digitalRead(SELECT_BUT) == LOW) curBut = 0;
    3722:	ef 28       	or	r14, r15
    3724:	09 f4       	brne	.+2      	; 0x3728 <main+0xd2>
    3726:	00 e0       	ldi	r16, 0x00	; 0
    3728:	01 95       	neg	r16
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:248
    if (digitalRead(UP_BUT) == LOW) curBut = 1;
    if (digitalRead(DOWN_BUT) == LOW) curBut = 2;
    372a:	87 e0       	ldi	r24, 0x07	; 7
    372c:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    3730:	89 2b       	or	r24, r25
    3732:	09 f4       	brne	.+2      	; 0x3736 <main+0xe0>
main():
    3734:	02 e0       	ldi	r16, 0x02	; 2
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:249
    if (digitalRead(BACK_BUT) == LOW) curBut = 3;
    3736:	88 e0       	ldi	r24, 0x08	; 8
    3738:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    373c:	89 2b       	or	r24, r25
    373e:	09 f4       	brne	.+2      	; 0x3742 <main+0xec>
main():
    3740:	03 e0       	ldi	r16, 0x03	; 3
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:250
    if (digitalRead(MODE_BUT) == LOW) curBut = 4;
    3742:	80 e1       	ldi	r24, 0x10	; 16
    3744:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    3748:	89 2b       	or	r24, r25
    374a:	09 f4       	brne	.+2      	; 0x374e <main+0xf8>
main():
    374c:	04 e0       	ldi	r16, 0x04	; 4
    374e:	87 e8       	ldi	r24, 0x87	; 135
    3750:	c8 2e       	mov	r12, r24
    3752:	83 e0       	ldi	r24, 0x03	; 3
    3754:	d8 2e       	mov	r13, r24
    3756:	9b e9       	ldi	r25, 0x9B	; 155
    3758:	e9 2e       	mov	r14, r25
    375a:	93 e0       	ldi	r25, 0x03	; 3
    375c:	f9 2e       	mov	r15, r25
    375e:	26 e2       	ldi	r18, 0x26	; 38
    3760:	82 2e       	mov	r8, r18
    3762:	21 e0       	ldi	r18, 0x01	; 1
    3764:	92 2e       	mov	r9, r18
    3766:	3f ea       	ldi	r19, 0xAF	; 175
    3768:	a3 2e       	mov	r10, r19
    376a:	33 e0       	ldi	r19, 0x03	; 3
    376c:	b3 2e       	mov	r11, r19
    376e:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:254

    

    byte buttonIdentified = 0;
    3770:	71 2c       	mov	r7, r1
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:259
    
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
    3772:	71 10       	cpse	r7, r1
    3774:	34 c1       	rjmp	.+616    	; 0x39de <main+0x388>
    3776:	d4 01       	movw	r26, r8
    3778:	8c 91       	ld	r24, X
    377a:	80 13       	cpse	r24, r16
    377c:	30 c1       	rjmp	.+608    	; 0x39de <main+0x388>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:262
      {
        btnStateNow = 1;
        buttonIdentified = 1;
    377e:	77 24       	eor	r7, r7
    3780:	73 94       	inc	r7
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:261
    for (int i=0; i < 5; i++)
    {
      // if (!buttonIdentified && analogReading <  buttonValues[i])         //analog 1 wire buttons
      if (!buttonIdentified && curBut ==  buttonValues[i])
      {
        btnStateNow = 1;
    3782:	66 24       	eor	r6, r6
    3784:	63 94       	inc	r6
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:271
        btnStateNow = 0;
      }

      // If button state has changed, action the change.

      if (buttonState[i] != btnStateNow)
    3786:	f5 01       	movw	r30, r10
    3788:	81 91       	ld	r24, Z+
    378a:	5f 01       	movw	r10, r30
    378c:	86 15       	cp	r24, r6
    378e:	b1 f0       	breq	.+44     	; 0x37bc <main+0x166>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:274
      {
        // if button state changes to pressed, queue SHORT PRESS to buffer.
        if (btnStateNow)
    3790:	66 20       	and	r6, r6
    3792:	09 f4       	brne	.+2      	; 0x3796 <main+0x140>
    3794:	26 c1       	rjmp	.+588    	; 0x39e2 <main+0x38c>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:276
        {
          queueButton((i+1) | BUTTON_PRESSED_IND);
    3796:	81 2f       	mov	r24, r17
    3798:	0e 94 46 08 	call	0x108c	; 0x108c <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:277
          buttonPressTime[i] = millis();
    379c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    37a0:	d7 01       	movw	r26, r14
    37a2:	6d 93       	st	X+, r22
    37a4:	7d 93       	st	X+, r23
    37a6:	8d 93       	st	X+, r24
    37a8:	9c 93       	st	X, r25
    37aa:	13 97       	sbiw	r26, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:278
          buttonHoldTime[i] = buttonPressTime[i];
    37ac:	f6 01       	movw	r30, r12
    37ae:	60 83       	st	Z, r22
    37b0:	71 83       	std	Z+1, r23	; 0x01
    37b2:	82 83       	std	Z+2, r24	; 0x02
    37b4:	93 83       	std	Z+3, r25	; 0x03
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:292
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
          }
        }
        buttonState[i] = btnStateNow;
    37b6:	f5 01       	movw	r30, r10
    37b8:	31 97       	sbiw	r30, 0x01	; 1
    37ba:	60 82       	st	Z, r6
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:296
      }

      // if button state pressed, increment pressed time counter. Queue LONG PRESS to buffer, if button is held long.  
      if (btnStateNow)
    37bc:	66 20       	and	r6, r6
    37be:	79 f1       	breq	.+94     	; 0x381e <main+0x1c8>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:298
      {
        if ((millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY) && (millis() - buttonHoldTime[i] > BUTTON_REPEAT_SPEED_DELAY))
    37c0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    37c4:	f7 01       	movw	r30, r14
    37c6:	20 81       	ld	r18, Z
    37c8:	31 81       	ldd	r19, Z+1	; 0x01
    37ca:	42 81       	ldd	r20, Z+2	; 0x02
    37cc:	53 81       	ldd	r21, Z+3	; 0x03
    37ce:	62 1b       	sub	r22, r18
    37d0:	73 0b       	sbc	r23, r19
    37d2:	84 0b       	sbc	r24, r20
    37d4:	95 0b       	sbc	r25, r21
    37d6:	61 3d       	cpi	r22, 0xD1	; 209
    37d8:	77 40       	sbci	r23, 0x07	; 7
    37da:	81 05       	cpc	r24, r1
    37dc:	91 05       	cpc	r25, r1
    37de:	f8 f0       	brcs	.+62     	; 0x381e <main+0x1c8>
    37e0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    37e4:	d6 01       	movw	r26, r12
    37e6:	2d 91       	ld	r18, X+
    37e8:	3d 91       	ld	r19, X+
    37ea:	4d 91       	ld	r20, X+
    37ec:	5c 91       	ld	r21, X
    37ee:	62 1b       	sub	r22, r18
    37f0:	73 0b       	sbc	r23, r19
    37f2:	84 0b       	sbc	r24, r20
    37f4:	95 0b       	sbc	r25, r21
    37f6:	6b 3f       	cpi	r22, 0xFB	; 251
    37f8:	71 05       	cpc	r23, r1
    37fa:	81 05       	cpc	r24, r1
    37fc:	91 05       	cpc	r25, r1
    37fe:	78 f0       	brcs	.+30     	; 0x381e <main+0x1c8>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:300
        {
          queueButton((i+1) | BUTTON_LONG_PRESSED_IND);
    3800:	8a 2d       	mov	r24, r10
    3802:	ef ea       	ldi	r30, 0xAF	; 175
    3804:	f3 e0       	ldi	r31, 0x03	; 3
    3806:	8e 1b       	sub	r24, r30
    3808:	80 68       	ori	r24, 0x80	; 128
    380a:	0e 94 46 08 	call	0x108c	; 0x108c <queueButton(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:301
          buttonHoldTime[i] = millis();
    380e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3812:	d6 01       	movw	r26, r12
    3814:	6d 93       	st	X+, r22
    3816:	7d 93       	st	X+, r23
    3818:	8d 93       	st	X+, r24
    381a:	9c 93       	st	X, r25
    381c:	13 97       	sbiw	r26, 0x03	; 3
    381e:	1f 5f       	subi	r17, 0xFF	; 255
    3820:	b4 e0       	ldi	r27, 0x04	; 4
    3822:	cb 0e       	add	r12, r27
    3824:	d1 1c       	adc	r13, r1
    3826:	e4 e0       	ldi	r30, 0x04	; 4
    3828:	ee 0e       	add	r14, r30
    382a:	f1 1c       	adc	r15, r1
    382c:	ff ef       	ldi	r31, 0xFF	; 255
    382e:	8f 1a       	sub	r8, r31
    3830:	9f 0a       	sbc	r9, r31
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:256

    

    byte buttonIdentified = 0;
    
    for (int i=0; i < 5; i++)
    3832:	16 30       	cpi	r17, 0x06	; 6
    3834:	09 f0       	breq	.+2      	; 0x3838 <main+0x1e2>
    3836:	9d cf       	rjmp	.-198    	; 0x3772 <main+0x11c>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:220
{
  buttonHandlerCycle(); // if calling buttonHandlerCycle() from ISR, comment it out here.
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
    3838:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <buttonBufferCount>
    383c:	19 16       	cp	r1, r25
    383e:	0c f4       	brge	.+2      	; 0x3842 <main+0x1ec>
    3840:	e8 c0       	rjmp	.+464    	; 0x3a12 <main+0x3bc>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:250
        testMode = false;
}

void loop()
{
    btn = getButton();
    3842:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <btn>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:280
            // lcd.clear();
            config.save();
            ButLongPress = true;
        }
    }
    if (btn == BUTTON_DOWN_LONG_PRESSED)
    3846:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    384a:	83 38       	cpi	r24, 0x83	; 131
    384c:	19 f5       	brne	.+70     	; 0x3894 <main+0x23e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:282
    {
        if (!ButLongPress)
    384e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ButLongPress>
    3852:	81 11       	cpse	r24, r1
    3854:	1f c0       	rjmp	.+62     	; 0x3894 <main+0x23e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:284
        {
            if (config.AutoLight == 0)
    3856:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <config+0x18>
    385a:	81 11       	cpse	r24, r1
    385c:	3e c1       	rjmp	.+636    	; 0x3ada <main+0x484>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:286
            {
                config.AutoLight = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:287
                lcd.setCursor(0, 1);
    3864:	61 e0       	ldi	r22, 0x01	; 1
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:288
                lcd.print(F(" AUTO LIGHT ON  "));
    386c:	8d e9       	ldi	r24, 0x9D	; 157
    386e:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:294
            }
            else
            {
                config.AutoLight = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT OFF "));
    3870:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:296
            }
            digitalWrite(AUTOLIGHT, config.AutoLight);
    3874:	60 91 75 04 	lds	r22, 0x0475	; 0x800475 <config+0x18>
    3878:	8f e0       	ldi	r24, 0x0F	; 15
    387a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:297
            delay(1000);
    387e:	68 ee       	ldi	r22, 0xE8	; 232
    3880:	73 e0       	ldi	r23, 0x03	; 3
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:299
            // lcd.clear();
            config.save();
    388a:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:300
            ButLongPress = true;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:303
        }
    }
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    3894:	10 91 e3 03 	lds	r17, 0x03E3	; 0x8003e3 <btn>
    3898:	00 91 d9 03 	lds	r16, 0x03D9	; 0x8003d9 <appMode>
    389c:	8e e3       	ldi	r24, 0x3E	; 62
    389e:	81 0f       	add	r24, r17
    38a0:	84 30       	cpi	r24, 0x04	; 4
    38a2:	08 f0       	brcs	.+2      	; 0x38a6 <main+0x250>
    38a4:	23 c1       	rjmp	.+582    	; 0x3aec <main+0x496>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:305
    {
        ButLongPress = false;
    38a6:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <ButLongPress>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:317
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
            Light1ON = !Light1ON;
        }
    }
    if (millis() - timrLCD > 300)
    38aa:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    38ae:	80 90 df 03 	lds	r8, 0x03DF	; 0x8003df <timrLCD>
    38b2:	90 90 e0 03 	lds	r9, 0x03E0	; 0x8003e0 <timrLCD+0x1>
    38b6:	a0 90 e1 03 	lds	r10, 0x03E1	; 0x8003e1 <timrLCD+0x2>
    38ba:	b0 90 e2 03 	lds	r11, 0x03E2	; 0x8003e2 <timrLCD+0x3>
    38be:	68 19       	sub	r22, r8
    38c0:	79 09       	sbc	r23, r9
    38c2:	8a 09       	sbc	r24, r10
    38c4:	9b 09       	sbc	r25, r11
    38c6:	6d 32       	cpi	r22, 0x2D	; 45
    38c8:	71 40       	sbci	r23, 0x01	; 1
    38ca:	81 05       	cpc	r24, r1
    38cc:	91 05       	cpc	r25, r1
    38ce:	40 f0       	brcs	.+16     	; 0x38e0 <main+0x28a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:319
    {
        downButPreCount = 0;
    38d0:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <downButPreCount+0x1>
    38d4:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:320
        selButPreCount = 0;
    38d8:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <selButPreCount+0x1>
    38dc:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:324
        upButPreCount = 0;
    }

    if (millis() - timrTrigger > 500 && config.AutoLight)
    38e0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    38e4:	80 90 d0 03 	lds	r8, 0x03D0	; 0x8003d0 <timrTrigger>
    38e8:	90 90 d1 03 	lds	r9, 0x03D1	; 0x8003d1 <timrTrigger+0x1>
    38ec:	a0 90 d2 03 	lds	r10, 0x03D2	; 0x8003d2 <timrTrigger+0x2>
    38f0:	b0 90 d3 03 	lds	r11, 0x03D3	; 0x8003d3 <timrTrigger+0x3>
    38f4:	68 19       	sub	r22, r8
    38f6:	79 09       	sbc	r23, r9
    38f8:	8a 09       	sbc	r24, r10
    38fa:	9b 09       	sbc	r25, r11
    38fc:	65 3f       	cpi	r22, 0xF5	; 245
    38fe:	71 40       	sbci	r23, 0x01	; 1
    3900:	81 05       	cpc	r24, r1
    3902:	91 05       	cpc	r25, r1
    3904:	08 f4       	brcc	.+2      	; 0x3908 <main+0x2b2>
    3906:	4e c0       	rjmp	.+156    	; 0x39a4 <main+0x34e>
    3908:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <config+0x18>
    390c:	88 23       	and	r24, r24
    390e:	09 f4       	brne	.+2      	; 0x3912 <main+0x2bc>
    3910:	49 c0       	rjmp	.+146    	; 0x39a4 <main+0x34e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:326
    {
        timrTrigger = millis();
    3912:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3916:	60 93 d0 03 	sts	0x03D0, r22	; 0x8003d0 <timrTrigger>
    391a:	70 93 d1 03 	sts	0x03D1, r23	; 0x8003d1 <timrTrigger+0x1>
    391e:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <timrTrigger+0x2>
    3922:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <timrTrigger+0x3>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:597
}

void TriggerLights()
{
    // Validate Light 1
    if (config.Light1On != 0 && config.Light1Off != 0)
    3926:	80 90 8b 04 	lds	r8, 0x048B	; 0x80048b <config+0x2e>
    392a:	90 90 8c 04 	lds	r9, 0x048C	; 0x80048c <config+0x2f>
    392e:	a0 90 8d 04 	lds	r10, 0x048D	; 0x80048d <config+0x30>
    3932:	b0 90 8e 04 	lds	r11, 0x048E	; 0x80048e <config+0x31>
    3936:	81 14       	cp	r8, r1
    3938:	91 04       	cpc	r9, r1
    393a:	a1 04       	cpc	r10, r1
    393c:	b1 04       	cpc	r11, r1
    393e:	91 f1       	breq	.+100    	; 0x39a4 <main+0x34e>
    3940:	40 91 8f 04 	lds	r20, 0x048F	; 0x80048f <config+0x32>
    3944:	50 91 90 04 	lds	r21, 0x0490	; 0x800490 <config+0x33>
    3948:	60 91 91 04 	lds	r22, 0x0491	; 0x800491 <config+0x34>
    394c:	70 91 92 04 	lds	r23, 0x0492	; 0x800492 <config+0x35>
    3950:	41 15       	cp	r20, r1
    3952:	51 05       	cpc	r21, r1
    3954:	61 05       	cpc	r22, r1
    3956:	71 05       	cpc	r23, r1
    3958:	29 f1       	breq	.+74     	; 0x39a4 <main+0x34e>
    395a:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <CurTime>
    395e:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <CurTime+0x1>
    3962:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <CurTime+0x2>
    3966:	b0 91 c6 03 	lds	r27, 0x03C6	; 0x8003c6 <CurTime+0x3>
    396a:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <Light1ON>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:599
    {
        if (config.Light1Off > config.Light1On)
    396e:	84 16       	cp	r8, r20
    3970:	95 06       	cpc	r9, r21
    3972:	a6 06       	cpc	r10, r22
    3974:	b7 06       	cpc	r11, r23
    3976:	0c f0       	brlt	.+2      	; 0x397a <main+0x324>
    3978:	e9 c0       	rjmp	.+466    	; 0x3b4c <main+0x4f6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:601
        {
            if (CurTime >= config.Light1On && CurTime < config.Light1Off)
    397a:	88 15       	cp	r24, r8
    397c:	99 05       	cpc	r25, r9
    397e:	aa 05       	cpc	r26, r10
    3980:	bb 05       	cpc	r27, r11
    3982:	0c f4       	brge	.+2      	; 0x3986 <main+0x330>
    3984:	d9 c0       	rjmp	.+434    	; 0x3b38 <main+0x4e2>
    3986:	84 17       	cp	r24, r20
    3988:	95 07       	cpc	r25, r21
    398a:	a6 07       	cpc	r26, r22
    398c:	b7 07       	cpc	r27, r23
    398e:	0c f0       	brlt	.+2      	; 0x3992 <main+0x33c>
    3990:	d3 c0       	rjmp	.+422    	; 0x3b38 <main+0x4e2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:603
            {
                if (Light1ON == 0)
    3992:	21 11       	cpse	r18, r1
    3994:	07 c0       	rjmp	.+14     	; 0x39a4 <main+0x34e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:605
                {
                    digitalWrite(RELAY1, HIGH);
    3996:	61 e0       	ldi	r22, 0x01	; 1
    3998:	8b e0       	ldi	r24, 0x0B	; 11
    399a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:606
                    Light1ON = 1;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <Light1ON>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:329
    if (millis() - timrTrigger > 500 && config.AutoLight)
    {
        timrTrigger = millis();
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    39a4:	60 91 75 04 	lds	r22, 0x0475	; 0x800475 <config+0x18>
    39a8:	8f e0       	ldi	r24, 0x0F	; 15
    39aa:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:330
    digitalWrite(AUTOPLAY, config.AutoPlay);
    39ae:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <config+0x17>
    39b2:	8e e0       	ldi	r24, 0x0E	; 14
    39b4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:332

    switch (appMode)
    39b8:	02 30       	cpi	r16, 0x02	; 2
    39ba:	09 f4       	brne	.+2      	; 0x39be <main+0x368>
    39bc:	9b c5       	rjmp	.+2870   	; 0x44f4 <main+0xe9e>
    39be:	08 f0       	brcs	.+2      	; 0x39c2 <main+0x36c>
    39c0:	cc c0       	rjmp	.+408    	; 0x3b5a <main+0x504>
    39c2:	00 23       	and	r16, r16
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <main+0x372>
    39c6:	56 c1       	rjmp	.+684    	; 0x3c74 <main+0x61e>
    39c8:	01 30       	cpi	r16, 0x01	; 1
    39ca:	09 f4       	brne	.+2      	; 0x39ce <main+0x378>
    39cc:	07 c4       	rjmp	.+2062   	; 0x41dc <main+0xb86>
main():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	89 2b       	or	r24, r25
    39d4:	09 f4       	brne	.+2      	; 0x39d8 <main+0x382>
    39d6:	7d ce       	rjmp	.-774    	; 0x36d2 <main+0x7c>
    39d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    39dc:	7a ce       	rjmp	.-780    	; 0x36d2 <main+0x7c>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:266
        btnStateNow = 1;
        buttonIdentified = 1;
      }
      else
      {
        btnStateNow = 0;
    39de:	61 2c       	mov	r6, r1
    39e0:	d2 ce       	rjmp	.-604    	; 0x3786 <main+0x130>
buttonHandlerCycle():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:283
          buttonHoldTime[i] = buttonPressTime[i];
        }
        else
        {
          // otherwise button state has changed to up, queue SHORT or LONG RELEASE state to buffer, and reset pressed time counter.
          if (millis() - buttonPressTime[i] > BUTTON_REPEAT_DELAY)
    39e2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    39e6:	d7 01       	movw	r26, r14
    39e8:	2d 91       	ld	r18, X+
    39ea:	3d 91       	ld	r19, X+
    39ec:	4d 91       	ld	r20, X+
    39ee:	5c 91       	ld	r21, X
    39f0:	62 1b       	sub	r22, r18
    39f2:	73 0b       	sbc	r23, r19
    39f4:	84 0b       	sbc	r24, r20
    39f6:	95 0b       	sbc	r25, r21
    39f8:	61 3d       	cpi	r22, 0xD1	; 209
    39fa:	77 40       	sbci	r23, 0x07	; 7
    39fc:	81 05       	cpc	r24, r1
    39fe:	91 05       	cpc	r25, r1
    3a00:	28 f0       	brcs	.+10     	; 0x3a0c <main+0x3b6>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:285
          {
            queueButton((i+1) | BUTTON_LONG_RELEASE_IND);
    3a02:	81 2f       	mov	r24, r17
    3a04:	80 6c       	ori	r24, 0xC0	; 192
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:289
          }
          else
          {
            queueButton((i+1) | BUTTON_SHORT_RELEASE_IND);
    3a06:	0e 94 46 08 	call	0x108c	; 0x108c <queueButton(unsigned char)>
    3a0a:	d5 ce       	rjmp	.-598    	; 0x37b6 <main+0x160>
    3a0c:	81 2f       	mov	r24, r17
    3a0e:	80 64       	ori	r24, 0x40	; 64
    3a10:	fa cf       	rjmp	.-12     	; 0x3a06 <main+0x3b0>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:222
  
  byte button = 0;
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    3a12:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <button_read_pos>
    3a16:	e8 2f       	mov	r30, r24
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	e8 54       	subi	r30, 0x48	; 72
    3a1c:	fc 4f       	sbci	r31, 0xFC	; 252
    3a1e:	10 81       	ld	r17, Z
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:223
    buttonBufferCount--;
    3a20:	91 50       	subi	r25, 0x01	; 1
    3a22:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <buttonBufferCount>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:224
    button_read_pos++;
    3a26:	8f 5f       	subi	r24, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:226
    
    if (button_read_pos >= sizeof (buttonBuffer))
    3a28:	85 30       	cpi	r24, 0x05	; 5
    3a2a:	08 f0       	brcs	.+2      	; 0x3a2e <main+0x3d8>
    3a2c:	4a c0       	rjmp	.+148    	; 0x3ac2 <main+0x46c>
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:224
  
  if (buttonBufferCount > 0)
  {
    button = buttonBuffer [button_read_pos];
    buttonBufferCount--;
    button_read_pos++;
    3a2e:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <button_read_pos>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:250
        testMode = false;
}

void loop()
{
    btn = getButton();
    3a32:	10 93 e3 03 	sts	0x03E3, r17	; 0x8003e3 <btn>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:251
    if (btn)
    3a36:	11 23       	and	r17, r17
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <main+0x3e6>
    3a3a:	2c cf       	rjmp	.-424    	; 0x3894 <main+0x23e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:253
    {
        timrLCD = millis();
    3a3c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3a40:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <timrLCD>
    3a44:	70 93 e0 03 	sts	0x03E0, r23	; 0x8003e0 <timrLCD+0x1>
    3a48:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <timrLCD+0x2>
    3a4c:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <timrLCD+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:254
        timrMNU = millis();
    3a50:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3a54:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <timrMNU>
    3a58:	70 93 dc 03 	sts	0x03DC, r23	; 0x8003dc <timrMNU+0x1>
    3a5c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <timrMNU+0x2>
    3a60:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <timrMNU+0x3>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    3a64:	88 e0       	ldi	r24, 0x08	; 8
    3a66:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	87 e7       	ldi	r24, 0x77	; 119
    3a6e:	95 e0       	ldi	r25, 0x05	; 5
    3a70:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:257
        lcd.backlight();
    }
    if (btn == BUTTON_UP_LONG_PRESSED)
    3a74:	12 38       	cpi	r17, 0x82	; 130
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <main+0x424>
    3a78:	e6 ce       	rjmp	.-564    	; 0x3846 <main+0x1f0>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:259
    {
        if (!ButLongPress)
    3a7a:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ButLongPress>
    3a7e:	81 11       	cpse	r24, r1
    3a80:	09 cf       	rjmp	.-494    	; 0x3894 <main+0x23e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:261
        {
            if (config.AutoPlay == 0)
    3a82:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <config+0x17>
    3a86:	81 11       	cpse	r24, r1
    3a88:	1f c0       	rjmp	.+62     	; 0x3ac8 <main+0x472>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:263
            {
                config.AutoPlay = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:264
                lcd.setCursor(0, 1);
    3a90:	61 e0       	ldi	r22, 0x01	; 1
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:265
                lcd.print(F("  AUTO PLAY ON  "));
    3a98:	8f eb       	ldi	r24, 0xBF	; 191
    3a9a:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:271
            }
            else
            {
                config.AutoPlay = 0;
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO PLAY OFF  "));
    3a9c:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:273
            }
            digitalWrite(AUTOPLAY, config.AutoPlay);
    3aa0:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <config+0x17>
    3aa4:	8e e0       	ldi	r24, 0x0E	; 14
    3aa6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:274
            delay(1000);
    3aaa:	68 ee       	ldi	r22, 0xE8	; 232
    3aac:	73 e0       	ldi	r23, 0x03	; 3
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:276
            // lcd.clear();
            config.save();
    3ab6:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:277
            ButLongPress = true;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <ButLongPress>
    3ac0:	c2 ce       	rjmp	.-636    	; 0x3846 <main+0x1f0>
getButton():
e:\Arduino\Arduino Git\ChantBellV3.3/LcdKeypad.cpp:228
    
    if (button_read_pos >= sizeof (buttonBuffer))
    {
      button_read_pos = 0;
    3ac2:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <button_read_pos>
    3ac6:	b5 cf       	rjmp	.-150    	; 0x3a32 <main+0x3dc>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:269
                lcd.setCursor(0, 1);
                lcd.print(F("  AUTO PLAY ON  "));
            }
            else
            {
                config.AutoPlay = 0;
    3ac8:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:270
                lcd.setCursor(0, 1);
    3acc:	61 e0       	ldi	r22, 0x01	; 1
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:271
                lcd.print(F(" AUTO PLAY OFF  "));
    3ad4:	8e ea       	ldi	r24, 0xAE	; 174
    3ad6:	93 e0       	ldi	r25, 0x03	; 3
    3ad8:	e1 cf       	rjmp	.-62     	; 0x3a9c <main+0x446>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:292
                lcd.setCursor(0, 1);
                lcd.print(F(" AUTO LIGHT ON  "));
            }
            else
            {
                config.AutoLight = 0;
    3ada:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:293
                lcd.setCursor(0, 1);
    3ade:	61 e0       	ldi	r22, 0x01	; 1
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:294
                lcd.print(F(" AUTO LIGHT OFF "));
    3ae6:	8c e8       	ldi	r24, 0x8C	; 140
    3ae8:	93 e0       	ldi	r25, 0x03	; 3
    3aea:	c2 ce       	rjmp	.-636    	; 0x3870 <main+0x21a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:308
    if (btn == BUTTON_DOWN_LONG_RELEASE || btn == BUTTON_UP_LONG_RELEASE || btn == BUTTON_LEFT_LONG_RELEASE || btn == BUTTON_MODE_LONG_RELEASE)
    {
        ButLongPress = false;
    }

    if (btn == BUTTON_DOWN_PRESSED && (appMode == APP_NORMAL_MODE || appMode == APP_PLAYER_MODE))
    3aec:	13 30       	cpi	r17, 0x03	; 3
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <main+0x49c>
    3af0:	dc ce       	rjmp	.-584    	; 0x38aa <main+0x254>
    3af2:	00 23       	and	r16, r16
    3af4:	19 f0       	breq	.+6      	; 0x3afc <main+0x4a6>
    3af6:	05 30       	cpi	r16, 0x05	; 5
    3af8:	09 f0       	breq	.+2      	; 0x3afc <main+0x4a6>
    3afa:	d7 ce       	rjmp	.-594    	; 0x38aa <main+0x254>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:310
    {
        downButPreCount += 1;
    3afc:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <downButPreCount>
    3b00:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <downButPreCount+0x1>
    3b04:	01 96       	adiw	r24, 0x01	; 1
    3b06:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <downButPreCount+0x1>
    3b0a:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <downButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:311
        if (downButPreCount >= 2)
    3b0e:	02 97       	sbiw	r24, 0x02	; 2
    3b10:	0c f4       	brge	.+2      	; 0x3b14 <main+0x4be>
    3b12:	cb ce       	rjmp	.-618    	; 0x38aa <main+0x254>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:313
        {
            digitalWrite(RELAY1, !digitalRead(RELAY1));
    3b14:	8b e0       	ldi	r24, 0x0B	; 11
    3b16:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	89 2b       	or	r24, r25
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <main+0x4cc>
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	8b e0       	ldi	r24, 0x0B	; 11
    3b24:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:314
            Light1ON = !Light1ON;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <Light1ON>
    3b2e:	91 11       	cpse	r25, r1
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <Light1ON>
    3b36:	b9 ce       	rjmp	.-654    	; 0x38aa <main+0x254>
TriggerLights():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:611
                    Light1ON = 1;
                }
            }
            else
            {
                if (Light1ON == 1)
    3b38:	21 30       	cpi	r18, 0x01	; 1
    3b3a:	09 f0       	breq	.+2      	; 0x3b3e <main+0x4e8>
    3b3c:	33 cf       	rjmp	.-410    	; 0x39a4 <main+0x34e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:613
                {
                    digitalWrite(RELAY1, LOW);
    3b3e:	60 e0       	ldi	r22, 0x00	; 0
    3b40:	8b e0       	ldi	r24, 0x0B	; 11
    3b42:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:614
                    Light1ON = 0;
    3b46:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Light1ON>
    3b4a:	2c cf       	rjmp	.-424    	; 0x39a4 <main+0x34e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:620
                }
            }
        }
        else
        {
            if (CurTime < config.Light1On && CurTime >= config.Light1Off)
    3b4c:	88 15       	cp	r24, r8
    3b4e:	99 05       	cpc	r25, r9
    3b50:	aa 05       	cpc	r26, r10
    3b52:	bb 05       	cpc	r27, r11
    3b54:	0c f0       	brlt	.+2      	; 0x3b58 <main+0x502>
    3b56:	1d cf       	rjmp	.-454    	; 0x3992 <main+0x33c>
    3b58:	16 cf       	rjmp	.-468    	; 0x3986 <main+0x330>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:332
        TriggerLights();
    }
    digitalWrite(AUTOLIGHT, config.AutoLight);
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    3b5a:	04 30       	cpi	r16, 0x04	; 4
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <main+0x50a>
    3b5e:	54 c2       	rjmp	.+1192   	; 0x4008 <main+0x9b2>
    3b60:	08 f4       	brcc	.+2      	; 0x3b64 <main+0x50e>
    3b62:	1b c2       	rjmp	.+1078   	; 0x3f9a <main+0x944>
    3b64:	05 30       	cpi	r16, 0x05	; 5
    3b66:	09 f0       	breq	.+2      	; 0x3b6a <main+0x514>
    3b68:	32 cf       	rjmp	.-412    	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:562
        break;
    }

    case APP_PLAYER_MODE:
    {
        digitalWrite(AMP, HIGH);
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	8c e0       	ldi	r24, 0x0C	; 12
    3b6e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:563
        digitalWrite(AUDCONT, HIGH);
    3b72:	61 e0       	ldi	r22, 0x01	; 1
    3b74:	8a e0       	ldi	r24, 0x0A	; 10
    3b76:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:564
        if (millis() - timr_Time > 1000)
    3b7a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3b7e:	c0 90 c7 03 	lds	r12, 0x03C7	; 0x8003c7 <timr_Time>
    3b82:	d0 90 c8 03 	lds	r13, 0x03C8	; 0x8003c8 <timr_Time+0x1>
    3b86:	e0 90 c9 03 	lds	r14, 0x03C9	; 0x8003c9 <timr_Time+0x2>
    3b8a:	f0 90 ca 03 	lds	r15, 0x03CA	; 0x8003ca <timr_Time+0x3>
    3b8e:	6c 19       	sub	r22, r12
    3b90:	7d 09       	sbc	r23, r13
    3b92:	8e 09       	sbc	r24, r14
    3b94:	9f 09       	sbc	r25, r15
    3b96:	69 3e       	cpi	r22, 0xE9	; 233
    3b98:	73 40       	sbci	r23, 0x03	; 3
    3b9a:	81 05       	cpc	r24, r1
    3b9c:	91 05       	cpc	r25, r1
    3b9e:	70 f1       	brcs	.+92     	; 0x3bfc <main+0x5a6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:566
        {
            timr_Time = millis();
    3ba0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3ba4:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <timr_Time>
    3ba8:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <timr_Time+0x1>
    3bac:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timr_Time+0x2>
    3bb0:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:567
            showTime();
    3bb4:	0e 94 02 10 	call	0x2004	; 0x2004 <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:568
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    3bb8:	ce 01       	movw	r24, r28
    3bba:	01 96       	adiw	r24, 0x01	; 1
    3bbc:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3bc0:	ec 80       	ldd	r14, Y+4	; 0x04
    3bc2:	3c e3       	ldi	r19, 0x3C	; 60
    3bc4:	e3 9e       	mul	r14, r19
    3bc6:	70 01       	movw	r14, r0
    3bc8:	11 24       	eor	r1, r1
    3bca:	ce 01       	movw	r24, r28
    3bcc:	43 96       	adiw	r24, 0x13	; 19
    3bce:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd4:	8e 0d       	add	r24, r14
    3bd6:	9f 2d       	mov	r25, r15
    3bd8:	91 1d       	adc	r25, r1
    3bda:	09 2e       	mov	r0, r25
    3bdc:	00 0c       	add	r0, r0
    3bde:	aa 0b       	sbc	r26, r26
    3be0:	bb 0b       	sbc	r27, r27
    3be2:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <CurTime>
    3be6:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <CurTime+0x1>
    3bea:	a0 93 c5 03 	sts	0x03C5, r26	; 0x8003c5 <CurTime+0x2>
    3bee:	b0 93 c6 03 	sts	0x03C6, r27	; 0x8003c6 <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:569
            if (config.AutoPlay)
    3bf2:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <config+0x17>
    3bf6:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:570
                TriggerPlayer();
    3bf8:	0e 94 67 08 	call	0x10ce	; 0x10ce <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:572
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    3bfc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3c00:	00 91 df 03 	lds	r16, 0x03DF	; 0x8003df <timrLCD>
    3c04:	10 91 e0 03 	lds	r17, 0x03E0	; 0x8003e0 <timrLCD+0x1>
    3c08:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <timrLCD+0x2>
    3c0c:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <timrLCD+0x3>
    3c10:	6b 01       	movw	r12, r22
    3c12:	7c 01       	movw	r14, r24
    3c14:	c0 1a       	sub	r12, r16
    3c16:	d1 0a       	sbc	r13, r17
    3c18:	e2 0a       	sbc	r14, r18
    3c1a:	f3 0a       	sbc	r15, r19
    3c1c:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <config+0x13>
    3c20:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <config+0x14>
    3c24:	28 ee       	ldi	r18, 0xE8	; 232
    3c26:	33 e0       	ldi	r19, 0x03	; 3
    3c28:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <__usmulhisi3>
    3c2c:	6c 15       	cp	r22, r12
    3c2e:	7d 05       	cpc	r23, r13
    3c30:	8e 05       	cpc	r24, r14
    3c32:	9f 05       	cpc	r25, r15
    3c34:	38 f4       	brcc	.+14     	; 0x3c44 <main+0x5ee>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3c36:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	87 e7       	ldi	r24, 0x77	; 119
    3c3e:	95 e0       	ldi	r25, 0x05	; 5
    3c40:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:576
        {
            lcd.noBacklight();
        }
        lcd.setCursor(0, 1);
    3c44:	61 e0       	ldi	r22, 0x01	; 1
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:577
        lcd.print(F(" PLAYER MODE ON "));
    3c4c:	8a e6       	ldi	r24, 0x6A	; 106
    3c4e:	93 e0       	ldi	r25, 0x03	; 3
    3c50:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:578
        if (btn == BUTTON_MODE_LONG_PRESSED)
    3c54:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    3c58:	85 38       	cpi	r24, 0x85	; 133
    3c5a:	09 f0       	breq	.+2      	; 0x3c5e <main+0x608>
    3c5c:	b8 ce       	rjmp	.-656    	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:580
        {
            if (!ButLongPress)
    3c5e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ButLongPress>
    3c62:	81 11       	cpse	r24, r1
    3c64:	b4 ce       	rjmp	.-664    	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:582
            {
                appMode = APP_NORMAL_MODE;
    3c66:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:583
                PlayerONMor = 0;
    3c6a:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <PlayerONMor>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:584
                PlayerONEve = 0;
    3c6e:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <PlayerONEve>
    3c72:	5a c1       	rjmp	.+692    	; 0x3f28 <main+0x8d2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:335
    digitalWrite(AUTOPLAY, config.AutoPlay);

    switch (appMode)
    {
    case APP_NORMAL_MODE:
        digitalWrite(AMP, LOW);
    3c74:	60 e0       	ldi	r22, 0x00	; 0
    3c76:	8c e0       	ldi	r24, 0x0C	; 12
    3c78:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:336
        digitalWrite(AUDCONT, LOW);
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	8a e0       	ldi	r24, 0x0A	; 10
    3c80:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:337
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    3c84:	11 38       	cpi	r17, 0x81	; 129
    3c86:	81 f4       	brne	.+32     	; 0x3ca8 <main+0x652>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:339
        {
            appMode = APP_MENU_MODE;
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:340
            refreshMenuDisplay(REFRESH_DESCEND);
    3c8e:	83 e0       	ldi	r24, 0x03	; 3
    3c90:	0e 94 69 12 	call	0x24d2	; 0x24d2 <refreshMenuDisplay(unsigned char)>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:341
            timrMNU = millis();
    3c94:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3c98:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <timrMNU>
    3c9c:	70 93 dc 03 	sts	0x03DC, r23	; 0x8003dc <timrMNU+0x1>
    3ca0:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <timrMNU+0x2>
    3ca4:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <timrMNU+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:344
        }

        if (btn == BUTTON_SELECT_PRESSED)
    3ca8:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    3cac:	81 30       	cpi	r24, 0x01	; 1
    3cae:	19 f5       	brne	.+70     	; 0x3cf6 <main+0x6a0>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:346
        {
            selButPreCount += 1;
    3cb0:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <selButPreCount>
    3cb4:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <selButPreCount+0x1>
    3cb8:	01 96       	adiw	r24, 0x01	; 1
    3cba:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <selButPreCount+0x1>
    3cbe:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <selButPreCount>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:347
            if (selButPreCount >= 4)
    3cc2:	04 97       	sbiw	r24, 0x04	; 4
    3cc4:	c4 f0       	brlt	.+48     	; 0x3cf6 <main+0x6a0>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:349
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3cc6:	ce 01       	movw	r24, r28
    3cc8:	01 96       	adiw	r24, 0x01	; 1
    3cca:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3cce:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd0:	8f 31       	cpi	r24, 0x1F	; 31
    3cd2:	08 f4       	brcc	.+2      	; 0x3cd6 <main+0x680>
    3cd4:	2f c1       	rjmp	.+606    	; 0x3f34 <main+0x8de>
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	43 96       	adiw	r24, 0x13	; 19
    3cda:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3cde:	8e 89       	ldd	r24, Y+22	; 0x16
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	01 96       	adiw	r24, 0x01	; 1
    3ce4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <demoTime+0x1>
    3ce8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <demoTime>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:350
                appMode = APP_DEMO_MODE;
    3cec:	84 e0       	ldi	r24, 0x04	; 4
    3cee:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:351
                lcd.clear();
    3cf2:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:355
            }
        }

        if (rtc.now().minute() == 0 && rtc.now().second() == 0 && millis() > timrAmp + 61000L)
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	01 96       	adiw	r24, 0x01	; 1
    3cfa:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3d00:	81 11       	cpse	r24, r1
    3d02:	63 c0       	rjmp	.+198    	; 0x3dca <main+0x774>
    3d04:	ce 01       	movw	r24, r28
    3d06:	43 96       	adiw	r24, 0x13	; 19
    3d08:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3d0c:	88 8d       	ldd	r24, Y+24	; 0x18
    3d0e:	81 11       	cpse	r24, r1
    3d10:	5c c0       	rjmp	.+184    	; 0x3dca <main+0x774>
    3d12:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3d16:	ab 01       	movw	r20, r22
    3d18:	bc 01       	movw	r22, r24
    3d1a:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <timrAmp>
    3d1e:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <timrAmp+0x1>
    3d22:	a0 91 ce 03 	lds	r26, 0x03CE	; 0x8003ce <timrAmp+0x2>
    3d26:	b0 91 cf 03 	lds	r27, 0x03CF	; 0x8003cf <timrAmp+0x3>
    3d2a:	88 5b       	subi	r24, 0xB8	; 184
    3d2c:	91 41       	sbci	r25, 0x11	; 17
    3d2e:	af 4f       	sbci	r26, 0xFF	; 255
    3d30:	bf 4f       	sbci	r27, 0xFF	; 255
    3d32:	84 17       	cp	r24, r20
    3d34:	95 07       	cpc	r25, r21
    3d36:	a6 07       	cpc	r26, r22
    3d38:	b7 07       	cpc	r27, r23
    3d3a:	08 f0       	brcs	.+2      	; 0x3d3e <main+0x6e8>
    3d3c:	46 c0       	rjmp	.+140    	; 0x3dca <main+0x774>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:357
        {
            bell = rtc.now();
    3d3e:	ce 01       	movw	r24, r28
    3d40:	01 96       	adiw	r24, 0x01	; 1
    3d42:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3d46:	86 e0       	ldi	r24, 0x06	; 6
    3d48:	fe 01       	movw	r30, r28
    3d4a:	31 96       	adiw	r30, 0x01	; 1
    3d4c:	a1 e7       	ldi	r26, 0x71	; 113
    3d4e:	b5 e0       	ldi	r27, 0x05	; 5
    3d50:	01 90       	ld	r0, Z+
    3d52:	0d 92       	st	X+, r0
    3d54:	8a 95       	dec	r24
    3d56:	e1 f7       	brne	.-8      	; 0x3d50 <main+0x6fa>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:359

            if (config.AlarmTime[bell.hour()] && bell.hour() >= config.startTime && bell.hour() <= config.endTime)
    3d58:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <bell+0x3>
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e5 55       	subi	r30, 0x55	; 85
    3d62:	fb 4f       	sbci	r31, 0xFB	; 251
    3d64:	20 81       	ld	r18, Z
    3d66:	22 23       	and	r18, r18
    3d68:	81 f1       	breq	.+96     	; 0x3dca <main+0x774>
    3d6a:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <config+0xf>
    3d6e:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <config+0x10>
    3d72:	82 17       	cp	r24, r18
    3d74:	93 07       	cpc	r25, r19
    3d76:	4c f1       	brlt	.+82     	; 0x3dca <main+0x774>
    3d78:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <config+0x11>
    3d7c:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <config+0x12>
    3d80:	28 17       	cp	r18, r24
    3d82:	39 07       	cpc	r19, r25
    3d84:	14 f1       	brlt	.+68     	; 0x3dca <main+0x774>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:362
            // if (bell.hour() >= config.startTime && bell.hour() <= config.endTime) // chek time
            {
                if (config.SchlZone && !bell.dayOfTheWeek() == 0 &&
    3d86:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <config+0x19>
    3d8a:	88 23       	and	r24, r24
    3d8c:	09 f4       	brne	.+2      	; 0x3d90 <main+0x73a>
    3d8e:	d9 c0       	rjmp	.+434    	; 0x3f42 <main+0x8ec>
    3d90:	0e 94 b9 02 	call	0x572	; 0x572 <DateTime::dayOfTheWeek() const [clone .constprop.19]>
    3d94:	88 23       	and	r24, r24
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <main+0x744>
    3d98:	d4 c0       	rjmp	.+424    	; 0x3f42 <main+0x8ec>
    3d9a:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <bell+0x3>
    3d9e:	8a 50       	subi	r24, 0x0A	; 10
    3da0:	87 30       	cpi	r24, 0x07	; 7
    3da2:	08 f0       	brcs	.+2      	; 0x3da6 <main+0x750>
    3da4:	ce c0       	rjmp	.+412    	; 0x3f42 <main+0x8ec>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:367
                    (bell.hour() == 10 || bell.hour() == 11 || bell.hour() == 12 ||
                     bell.hour() == 13 || bell.hour() == 14 || bell.hour() == 15 ||
                     bell.hour() == 16))
                {
                    lcd.clear();
    3da6:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:368
                    lcd.setCursor(0, 0);
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:369
                    lcd.print("School Zone : ON");
    3db2:	80 e4       	ldi	r24, 0x40	; 64
    3db4:	92 e0       	ldi	r25, 0x02	; 2
    3db6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:370
                    delay(1000);
    3dba:	68 ee       	ldi	r22, 0xE8	; 232
    3dbc:	73 e0       	ldi	r23, 0x03	; 3
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0e 94 38 04 	call	0x870	; 0x870 <delay>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:378
                else
                {
                    digitalWrite(AMP, HIGH);
                    timrAmp = millis();
                    appMode = APP_CHANT_MODE;
                    lcd.clear();
    3dc6:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:384
                }
            }
        }
        // TEST MODE //
        {
            if (btn == BUTTON_UP_PRESSED && testMode)
    3dca:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    3dce:	82 30       	cpi	r24, 0x02	; 2
    3dd0:	d1 f5       	brne	.+116    	; 0x3e46 <main+0x7f0>
    3dd2:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <testMode>
    3dd6:	88 23       	and	r24, r24
    3dd8:	b1 f1       	breq	.+108    	; 0x3e46 <main+0x7f0>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:386
            {
                timrAmp = millis() - 71000L;
    3dda:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3dde:	68 55       	subi	r22, 0x58	; 88
    3de0:	75 41       	sbci	r23, 0x15	; 21
    3de2:	81 40       	sbci	r24, 0x01	; 1
    3de4:	91 09       	sbc	r25, r1
    3de6:	60 93 cc 03 	sts	0x03CC, r22	; 0x8003cc <timrAmp>
    3dea:	70 93 cd 03 	sts	0x03CD, r23	; 0x8003cd <timrAmp+0x1>
    3dee:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <timrAmp+0x2>
    3df2:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:387
                if (rtc.now().minute() < 30)
    3df6:	ce 01       	movw	r24, r28
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3e00:	8e 31       	cpi	r24, 0x1E	; 30
    3e02:	08 f0       	brcs	.+2      	; 0x3e06 <main+0x7b0>
    3e04:	b0 c0       	rjmp	.+352    	; 0x3f66 <main+0x910>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:388
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
    3e06:	ce 01       	movw	r24, r28
    3e08:	43 96       	adiw	r24, 0x13	; 19
    3e0a:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3e0e:	fe 88       	ldd	r15, Y+22	; 0x16
    3e10:	ce 01       	movw	r24, r28
    3e12:	49 96       	adiw	r24, 0x19	; 25
    3e14:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3e18:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	4f 96       	adiw	r24, 0x1f	; 31
    3e1e:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3e22:	d8 a0       	ldd	r13, Y+32	; 0x20
    3e24:	ce 01       	movw	r24, r28
    3e26:	85 96       	adiw	r24, 0x25	; 37
    3e28:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3e2c:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3e2e:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3e30:	da 82       	std	Y+2, r13	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3e32:	eb 82       	std	Y+3, r14	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3e34:	fc 82       	std	Y+4, r15	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3e36:	8d e1       	ldi	r24, 0x1D	; 29
    3e38:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    3e3a:	87 e3       	ldi	r24, 0x37	; 55
    3e3c:	8e 83       	std	Y+6, r24	; 0x06
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:390
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3e3e:	ce 01       	movw	r24, r28
    3e40:	01 96       	adiw	r24, 0x01	; 1
    3e42:	0e 94 9e 09 	call	0x133c	; 0x133c <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:393
            }
        }
        if (millis() - timr_Time > 1000)
    3e46:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3e4a:	c0 90 c7 03 	lds	r12, 0x03C7	; 0x8003c7 <timr_Time>
    3e4e:	d0 90 c8 03 	lds	r13, 0x03C8	; 0x8003c8 <timr_Time+0x1>
    3e52:	e0 90 c9 03 	lds	r14, 0x03C9	; 0x8003c9 <timr_Time+0x2>
    3e56:	f0 90 ca 03 	lds	r15, 0x03CA	; 0x8003ca <timr_Time+0x3>
    3e5a:	6c 19       	sub	r22, r12
    3e5c:	7d 09       	sbc	r23, r13
    3e5e:	8e 09       	sbc	r24, r14
    3e60:	9f 09       	sbc	r25, r15
    3e62:	69 3e       	cpi	r22, 0xE9	; 233
    3e64:	73 40       	sbci	r23, 0x03	; 3
    3e66:	81 05       	cpc	r24, r1
    3e68:	91 05       	cpc	r25, r1
    3e6a:	70 f1       	brcs	.+92     	; 0x3ec8 <main+0x872>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:395
        {
            timr_Time = millis();
    3e6c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3e70:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <timr_Time>
    3e74:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <timr_Time+0x1>
    3e78:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timr_Time+0x2>
    3e7c:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timr_Time+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:396
            showTime();
    3e80:	0e 94 02 10 	call	0x2004	; 0x2004 <showTime()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:397
            CurTime = (rtc.now().hour() * 60) + rtc.now().minute();
    3e84:	ce 01       	movw	r24, r28
    3e86:	01 96       	adiw	r24, 0x01	; 1
    3e88:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3e8c:	ec 80       	ldd	r14, Y+4	; 0x04
    3e8e:	bc e3       	ldi	r27, 0x3C	; 60
    3e90:	eb 9e       	mul	r14, r27
    3e92:	70 01       	movw	r14, r0
    3e94:	11 24       	eor	r1, r1
    3e96:	ce 01       	movw	r24, r28
    3e98:	43 96       	adiw	r24, 0x13	; 19
    3e9a:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3ea0:	8e 0d       	add	r24, r14
    3ea2:	9f 2d       	mov	r25, r15
    3ea4:	91 1d       	adc	r25, r1
    3ea6:	09 2e       	mov	r0, r25
    3ea8:	00 0c       	add	r0, r0
    3eaa:	aa 0b       	sbc	r26, r26
    3eac:	bb 0b       	sbc	r27, r27
    3eae:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <CurTime>
    3eb2:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <CurTime+0x1>
    3eb6:	a0 93 c5 03 	sts	0x03C5, r26	; 0x8003c5 <CurTime+0x2>
    3eba:	b0 93 c6 03 	sts	0x03C6, r27	; 0x8003c6 <CurTime+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:398
            if (config.AutoPlay)
    3ebe:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <config+0x17>
    3ec2:	81 11       	cpse	r24, r1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:399
                TriggerPlayer();
    3ec4:	0e 94 67 08 	call	0x10ce	; 0x10ce <TriggerPlayer()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:401
        }
        if (millis() - timrLCD > (config.backLightDur * 1000L))
    3ec8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3ecc:	00 91 df 03 	lds	r16, 0x03DF	; 0x8003df <timrLCD>
    3ed0:	10 91 e0 03 	lds	r17, 0x03E0	; 0x8003e0 <timrLCD+0x1>
    3ed4:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <timrLCD+0x2>
    3ed8:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <timrLCD+0x3>
    3edc:	6b 01       	movw	r12, r22
    3ede:	7c 01       	movw	r14, r24
    3ee0:	c0 1a       	sub	r12, r16
    3ee2:	d1 0a       	sbc	r13, r17
    3ee4:	e2 0a       	sbc	r14, r18
    3ee6:	f3 0a       	sbc	r15, r19
    3ee8:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <config+0x13>
    3eec:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <config+0x14>
    3ef0:	28 ee       	ldi	r18, 0xE8	; 232
    3ef2:	33 e0       	ldi	r19, 0x03	; 3
    3ef4:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <__usmulhisi3>
    3ef8:	6c 15       	cp	r22, r12
    3efa:	7d 05       	cpc	r23, r13
    3efc:	8e 05       	cpc	r24, r14
    3efe:	9f 05       	cpc	r25, r15
    3f00:	38 f4       	brcc	.+14     	; 0x3f10 <main+0x8ba>
noBacklight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    3f02:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	87 e7       	ldi	r24, 0x77	; 119
    3f0a:	95 e0       	ldi	r25, 0x05	; 5
    3f0c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:405
        {
            lcd.noBacklight();
        }
        if (btn == BUTTON_MODE_LONG_PRESSED)
    3f10:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    3f14:	85 38       	cpi	r24, 0x85	; 133
    3f16:	09 f0       	breq	.+2      	; 0x3f1a <main+0x8c4>
    3f18:	5a cd       	rjmp	.-1356   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:407
        {
            if (!ButLongPress)
    3f1a:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ButLongPress>
    3f1e:	81 11       	cpse	r24, r1
    3f20:	56 cd       	rjmp	.-1364   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:409
            {
                appMode = APP_PLAYER_MODE;
    3f22:	85 e0       	ldi	r24, 0x05	; 5
    3f24:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:585
            if (!ButLongPress)
            {
                appMode = APP_NORMAL_MODE;
                PlayerONMor = 0;
                PlayerONEve = 0;
                lcd.clear();
    3f28:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:586
                ButLongPress = true;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <ButLongPress>
    3f32:	4d cd       	rjmp	.-1382   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:349
        if (btn == BUTTON_SELECT_PRESSED)
        {
            selButPreCount += 1;
            if (selButPreCount >= 4)
            {
                demoTime = rtc.now().minute() > 30 ? rtc.now().hour() + 1 : rtc.now().hour();
    3f34:	ce 01       	movw	r24, r28
    3f36:	49 96       	adiw	r24, 0x19	; 25
    3f38:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	d1 ce       	rjmp	.-606    	; 0x3ce4 <main+0x68e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:375
                    delay(1000);
                    lcd.clear();
                }
                else
                {
                    digitalWrite(AMP, HIGH);
    3f42:	61 e0       	ldi	r22, 0x01	; 1
    3f44:	8c e0       	ldi	r24, 0x0C	; 12
    3f46:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:376
                    timrAmp = millis();
    3f4a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3f4e:	60 93 cc 03 	sts	0x03CC, r22	; 0x8003cc <timrAmp>
    3f52:	70 93 cd 03 	sts	0x03CD, r23	; 0x8003cd <timrAmp+0x1>
    3f56:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <timrAmp+0x2>
    3f5a:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <timrAmp+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:377
                    appMode = APP_CHANT_MODE;
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
    3f64:	30 cf       	rjmp	.-416    	; 0x3dc6 <main+0x770>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:390
            {
                timrAmp = millis() - 71000L;
                if (rtc.now().minute() < 30)
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 29, 55));
                else
                    rtc.adjust(DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), rtc.now().hour(), 59, 55));
    3f66:	ce 01       	movw	r24, r28
    3f68:	43 96       	adiw	r24, 0x13	; 19
    3f6a:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3f6e:	fe 88       	ldd	r15, Y+22	; 0x16
    3f70:	ce 01       	movw	r24, r28
    3f72:	49 96       	adiw	r24, 0x19	; 25
    3f74:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3f78:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3f7a:	ce 01       	movw	r24, r28
    3f7c:	4f 96       	adiw	r24, 0x1f	; 31
    3f7e:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3f82:	d8 a0       	ldd	r13, Y+32	; 0x20
    3f84:	ce 01       	movw	r24, r28
    3f86:	85 96       	adiw	r24, 0x25	; 37
    3f88:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    3f8c:	8d a1       	ldd	r24, Y+37	; 0x25
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
    3f8e:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    3f90:	da 82       	std	Y+2, r13	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    3f92:	eb 82       	std	Y+3, r14	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    3f94:	fc 82       	std	Y+4, r15	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    3f96:	8b e3       	ldi	r24, 0x3B	; 59
    3f98:	4f cf       	rjmp	.-354    	; 0x3e38 <main+0x7e2>
backlight():
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    3f9a:	88 e0       	ldi	r24, 0x08	; 8
    3f9c:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <lcd+0xb>
C:\Users\quali\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	87 e7       	ldi	r24, 0x77	; 119
    3fa4:	95 e0       	ldi	r25, 0x05	; 5
    3fa6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LiquidCrystal_I2C::expanderWrite(unsigned char)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:418
        }
        break;
    case APP_CHANT_MODE:
    {
        lcd.backlight();
        lcd.setCursor(0, 1);
    3faa:	61 e0       	ldi	r22, 0x01	; 1
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:419
        lcd.print("CHANT PLAYING...");
    3fb2:	81 e5       	ldi	r24, 0x51	; 81
    3fb4:	92 e0       	ldi	r25, 0x02	; 2
    3fb6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:420
        if (millis() >= timrAmp + ampDelay)
    3fba:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    3fbe:	ab 01       	movw	r20, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <timrAmp>
    3fc6:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <timrAmp+0x1>
    3fca:	a0 91 ce 03 	lds	r26, 0x03CE	; 0x8003ce <timrAmp+0x2>
    3fce:	b0 91 cf 03 	lds	r27, 0x03CF	; 0x8003cf <timrAmp+0x3>
    3fd2:	88 57       	subi	r24, 0x78	; 120
    3fd4:	9c 4e       	sbci	r25, 0xEC	; 236
    3fd6:	af 4f       	sbci	r26, 0xFF	; 255
    3fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fda:	48 17       	cp	r20, r24
    3fdc:	59 07       	cpc	r21, r25
    3fde:	6a 07       	cpc	r22, r26
    3fe0:	7b 07       	cpc	r23, r27
    3fe2:	10 f0       	brcs	.+4      	; 0x3fe8 <main+0x992>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:421
            PlayChant();
    3fe4:	0e 94 08 11 	call	0x2210	; 0x2210 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:422
        if (btn == BUTTON_LEFT_SHORT_RELEASE && testMode)
    3fe8:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    3fec:	84 34       	cpi	r24, 0x44	; 68
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <main+0x99c>
    3ff0:	ee cc       	rjmp	.-1572   	; 0x39ce <main+0x378>
    3ff2:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <testMode>
    3ff6:	88 23       	and	r24, r24
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <main+0x9a6>
    3ffa:	e9 cc       	rjmp	.-1582   	; 0x39ce <main+0x378>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	60 e0       	ldi	r22, 0x00	; 0
    4000:	86 e1       	ldi	r24, 0x16	; 22
    4002:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
    4006:	e3 cc       	rjmp	.-1594   	; 0x39ce <main+0x378>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:430
        }
        break;
    }
    case APP_DEMO_MODE:
    {
        lcd.setCursor(0, 0);
    4008:	60 e0       	ldi	r22, 0x00	; 0
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:431
        lcd.print(F("  RUNNING DEMO  "));
    4010:	8b e7       	ldi	r24, 0x7B	; 123
    4012:	93 e0       	ldi	r25, 0x03	; 3
    4014:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:432
        lcd.setCursor(0, 1);
    4018:	61 e0       	ldi	r22, 0x01	; 1
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:433
        lcd.print("DEMO TIME : " + String(demoTime > 12 ? demoTime - 12 : demoTime) + String(demoTime >= 12 ? "PM" : "AM"));
    4020:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <demoTime>
    4024:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <demoTime+0x1>
main():
    4028:	62 eb       	ldi	r22, 0xB2	; 178
    402a:	71 e0       	ldi	r23, 0x01	; 1
loop():
    402c:	ec e0       	ldi	r30, 0x0C	; 12
    402e:	ee 16       	cp	r14, r30
    4030:	f1 04       	cpc	r15, r1
    4032:	14 f4       	brge	.+4      	; 0x4038 <main+0x9e2>
main():
    4034:	69 eb       	ldi	r22, 0xB9	; 185
    4036:	71 e0       	ldi	r23, 0x01	; 1
loop():
    4038:	ce 01       	movw	r24, r28
    403a:	43 96       	adiw	r24, 0x13	; 19
    403c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
    4040:	fd e0       	ldi	r31, 0x0D	; 13
    4042:	ef 16       	cp	r14, r31
    4044:	f1 04       	cpc	r15, r1
    4046:	1c f0       	brlt	.+6      	; 0x404e <main+0x9f8>
    4048:	2c e0       	ldi	r18, 0x0C	; 12
    404a:	e2 1a       	sub	r14, r18
    404c:	f1 08       	sbc	r15, r1
_ZN6String4initEv():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    404e:	1a 8e       	std	Y+26, r1	; 0x1a
    4050:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    4052:	1c 8e       	std	Y+28, r1	; 0x1c
    4054:	1b 8e       	std	Y+27, r1	; 0x1b
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    4056:	1e 8e       	std	Y+30, r1	; 0x1e
    4058:	1d 8e       	std	Y+29, r1	; 0x1d
itoa():
c:\users\quali\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    405a:	4a e0       	ldi	r20, 0x0A	; 10
    405c:	be 01       	movw	r22, r28
    405e:	6f 5f       	subi	r22, 0xFF	; 255
    4060:	7f 4f       	sbci	r23, 0xFF	; 255
    4062:	c7 01       	movw	r24, r14
    4064:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__itoa_ncheck>
operator=():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    4068:	eb a5       	ldd	r30, Y+43	; 0x2b
    406a:	fc a5       	ldd	r31, Y+44	; 0x2c
    406c:	01 90       	ld	r0, Z+
    406e:	00 20       	and	r0, r0
    4070:	e9 f7       	brne	.-6      	; 0x406c <main+0xa16>
    4072:	31 97       	sbiw	r30, 0x01	; 1
    4074:	7f 01       	movw	r14, r30
    4076:	8b a5       	ldd	r24, Y+43	; 0x2b
    4078:	9c a5       	ldd	r25, Y+44	; 0x2c
    407a:	e8 1a       	sub	r14, r24
    407c:	f9 0a       	sbc	r15, r25
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    407e:	b7 01       	movw	r22, r14
    4080:	ce 01       	movw	r24, r28
    4082:	49 96       	adiw	r24, 0x19	; 25
    4084:	0e 94 21 0c 	call	0x1842	; 0x1842 <String::reserve(unsigned int)>
    4088:	81 11       	cpse	r24, r1
    408a:	90 c0       	rjmp	.+288    	; 0x41ac <main+0xb56>
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    408c:	ce 01       	movw	r24, r28
    408e:	49 96       	adiw	r24, 0x19	; 25
    4090:	0e 94 c9 0a 	call	0x1592	; 0x1592 <String::invalidate()>
_ZN15StringSumHelperC2EPKc():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    4094:	62 e6       	ldi	r22, 0x62	; 98
    4096:	72 e0       	ldi	r23, 0x02	; 2
    4098:	ce 01       	movw	r24, r28
    409a:	01 96       	adiw	r24, 0x01	; 1
    409c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <String::String(char const*)>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:433
    40a0:	be 01       	movw	r22, r28
    40a2:	67 5e       	subi	r22, 0xE7	; 231
    40a4:	7f 4f       	sbci	r23, 0xFF	; 255
    40a6:	ce 01       	movw	r24, r28
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	0e 94 49 0c 	call	0x1892	; 0x1892 <operator+(StringSumHelper const&, String const&)>
    40ae:	be 01       	movw	r22, r28
    40b0:	6d 5e       	subi	r22, 0xED	; 237
    40b2:	7f 4f       	sbci	r23, 0xFF	; 255
    40b4:	0e 94 49 0c 	call	0x1892	; 0x1892 <operator+(StringSumHelper const&, String const&)>
write():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    40b8:	dc 01       	movw	r26, r24
    40ba:	14 96       	adiw	r26, 0x04	; 4
    40bc:	4d 91       	ld	r20, X+
    40be:	5c 91       	ld	r21, X
    40c0:	15 97       	sbiw	r26, 0x05	; 5
    40c2:	6d 91       	ld	r22, X+
    40c4:	7c 91       	ld	r23, X
    40c6:	87 e7       	ldi	r24, 0x77	; 119
    40c8:	95 e0       	ldi	r25, 0x05	; 5
    40ca:	0e 94 ed 02 	call	0x5da	; 0x5da <Print::write(unsigned char const*, unsigned int)>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	9a 81       	ldd	r25, Y+2	; 0x02
    40d2:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
    40d6:	89 8d       	ldd	r24, Y+25	; 0x19
    40d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    40da:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
    40de:	8b 89       	ldd	r24, Y+19	; 0x13
    40e0:	9c 89       	ldd	r25, Y+20	; 0x14
    40e2:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:434
        digitalWrite(AMP, HIGH);
    40e6:	61 e0       	ldi	r22, 0x01	; 1
    40e8:	8c e0       	ldi	r24, 0x0C	; 12
    40ea:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <digitalWrite>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:436
        // delay(1000);
        bell = DateTime(rtc.now().year(), rtc.now().month(), rtc.now().day(), demoTime, 0, 0);
    40ee:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <demoTime>
    40f2:	ce 01       	movw	r24, r28
    40f4:	01 96       	adiw	r24, 0x01	; 1
    40f6:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    40fa:	eb 80       	ldd	r14, Y+3	; 0x03
    40fc:	ce 01       	movw	r24, r28
    40fe:	43 96       	adiw	r24, 0x13	; 19
    4100:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    4104:	dc 88       	ldd	r13, Y+20	; 0x14
    4106:	ce 01       	movw	r24, r28
    4108:	49 96       	adiw	r24, 0x19	; 25
    410a:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    410e:	89 8d       	ldd	r24, Y+25	; 0x19
    4110:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <bell>
    4114:	d0 92 72 05 	sts	0x0572, r13	; 0x800572 <bell+0x1>
    4118:	e0 92 73 05 	sts	0x0573, r14	; 0x800573 <bell+0x2>
    411c:	f0 92 74 05 	sts	0x0574, r15	; 0x800574 <bell+0x3>
    4120:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <bell+0x4>
    4124:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <bell+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:437
        PlayChant();
    4128:	0e 94 08 11 	call	0x2210	; 0x2210 <PlayChant()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:438
        if (btn == BUTTON_LEFT_PRESSED)
    412c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    4130:	84 30       	cpi	r24, 0x04	; 4
    4132:	41 f4       	brne	.+16     	; 0x4144 <main+0xaee>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:440
        {
            playSong = End_of_Song;
    4134:	88 e0       	ldi	r24, 0x08	; 8
    4136:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <playSong>
sendStack():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	86 e1       	ldi	r24, 0x16	; 22
    4140:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:443
            myDFPlayer.stop();
        }
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4144:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    4148:	8f 77       	andi	r24, 0x7F	; 127
    414a:	82 30       	cpi	r24, 0x02	; 2
    414c:	c9 f5       	brne	.+114    	; 0x41c0 <main+0xb6a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:445
        {
            config.vol = ++config.vol > 30 ? 10 : config.vol;
    414e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <config+0x15>
    4152:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <config+0x16>
    4156:	01 96       	adiw	r24, 0x01	; 1
    4158:	8f 31       	cpi	r24, 0x1F	; 31
    415a:	91 05       	cpc	r25, r1
    415c:	14 f0       	brlt	.+4      	; 0x4162 <main+0xb0c>
main():
    415e:	8a e0       	ldi	r24, 0x0A	; 10
    4160:	90 e0       	ldi	r25, 0x00	; 0
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:456
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    4162:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <config+0x16>
    4166:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:457
            config.save();
    416a:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:458
            lcd.clear();
    416e:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:459
            lcd.setCursor(0, 1);
    4172:	61 e0       	ldi	r22, 0x01	; 1
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:460
            lcd.print("VOLUME : ");
    417a:	8f e6       	ldi	r24, 0x6F	; 111
    417c:	92 e0       	ldi	r25, 0x02	; 2
    417e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:461
            lcd.print(config.vol);
    4182:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <config+0x15>
    4186:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <config+0x16>
    418a:	0e 94 29 0b 	call	0x1652	; 0x1652 <Print::print(int, int) [clone .constprop.4]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
    418e:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <config+0x15>
    4192:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <config+0x16>
    4196:	77 27       	eor	r23, r23
    4198:	86 e0       	ldi	r24, 0x06	; 6
    419a:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:463
            myDFPlayer.volume(config.vol);
            delay(100);
    419e:	64 e6       	ldi	r22, 0x64	; 100
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 38 04 	call	0x870	; 0x870 <delay>
    41aa:	11 cc       	rjmp	.-2014   	; 0x39ce <main+0x378>
copy():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    41ac:	fe 8e       	std	Y+30, r15	; 0x1e
    41ae:	ed 8e       	std	Y+29, r14	; 0x1d
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    41b0:	be 01       	movw	r22, r28
    41b2:	6f 5f       	subi	r22, 0xFF	; 255
    41b4:	7f 4f       	sbci	r23, 0xFF	; 255
    41b6:	89 8d       	ldd	r24, Y+25	; 0x19
    41b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    41ba:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
    41be:	6a cf       	rjmp	.-300    	; 0x4094 <main+0xa3e>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:454
            lcd.print("VOLUME : ");
            lcd.print(config.vol);
            myDFPlayer.volume(config.vol);
            delay(100);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    41c0:	83 30       	cpi	r24, 0x03	; 3
    41c2:	09 f0       	breq	.+2      	; 0x41c6 <main+0xb70>
    41c4:	04 cc       	rjmp	.-2040   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:456
        {
            config.vol = --config.vol < 10 ? 30 : config.vol;
    41c6:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <config+0x15>
    41ca:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <config+0x16>
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	8a 30       	cpi	r24, 0x0A	; 10
    41d2:	91 05       	cpc	r25, r1
    41d4:	34 f6       	brge	.-116    	; 0x4162 <main+0xb0c>
main():
    41d6:	8e e1       	ldi	r24, 0x1E	; 30
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	c3 cf       	rjmp	.-122    	; 0x4162 <main+0xb0c>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:469
        }
        break;
    }
    case APP_MENU_MODE:
    {
        if (millis() - timrMNU > 30000)
    41dc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    41e0:	c0 90 db 03 	lds	r12, 0x03DB	; 0x8003db <timrMNU>
    41e4:	d0 90 dc 03 	lds	r13, 0x03DC	; 0x8003dc <timrMNU+0x1>
    41e8:	e0 90 dd 03 	lds	r14, 0x03DD	; 0x8003dd <timrMNU+0x2>
    41ec:	f0 90 de 03 	lds	r15, 0x03DE	; 0x8003de <timrMNU+0x3>
    41f0:	6c 19       	sub	r22, r12
    41f2:	7d 09       	sbc	r23, r13
    41f4:	8e 09       	sbc	r24, r14
    41f6:	9f 09       	sbc	r25, r15
    41f8:	61 33       	cpi	r22, 0x31	; 49
    41fa:	75 47       	sbci	r23, 0x75	; 117
    41fc:	81 05       	cpc	r24, r1
    41fe:	91 05       	cpc	r25, r1
    4200:	d8 f0       	brcs	.+54     	; 0x4238 <main+0xbe2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:471
        {
            if (!digitalRead(STA_PIN))
    4202:	84 e0       	ldi	r24, 0x04	; 4
    4204:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    4208:	89 2b       	or	r24, r25
    420a:	11 f4       	brne	.+4      	; 0x4210 <main+0xbba>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:473
            {
                stopPreSong();
    420c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <stopPreSong()>
reset():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    4210:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Menu1>
    4214:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Menu1+0x1>
    4218:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <Menu1+0x4>
    421c:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    4220:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Menu1+0x2>
    4224:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    4228:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:21
  menuStackCount = 0;
    422c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:476
            }
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    4230:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:477
            lcd.clear();
    4234:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:480
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
    4238:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:481
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
    423c:	81 30       	cpi	r24, 0x01	; 1
    423e:	09 f0       	breq	.+2      	; 0x4242 <main+0xbec>
    4240:	57 c0       	rjmp	.+174    	; 0x42f0 <main+0xc9a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:484
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
        {
            StDate = rtc.now().day();
    4242:	ce 01       	movw	r24, r28
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    424a:	8b 81       	ldd	r24, Y+3	; 0x03
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <StDate+0x1>
    4252:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <StDate>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:485
            StMonth = rtc.now().month();
    4256:	ce 01       	movw	r24, r28
    4258:	01 96       	adiw	r24, 0x01	; 1
    425a:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    425e:	8a 81       	ldd	r24, Y+2	; 0x02
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <StMonth+0x1>
    4266:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <StMonth>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:486
            StYear = rtc.now().year();
    426a:	ce 01       	movw	r24, r28
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
_ZNK8DateTime4yearEv():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.h:159
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	80 53       	subi	r24, 0x30	; 48
    4278:	98 4f       	sbci	r25, 0xF8	; 248
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:486
    427a:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <StYear+0x1>
    427e:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <StYear>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:487
            StHr = rtc.now().hour();
    4282:	ce 01       	movw	r24, r28
    4284:	01 96       	adiw	r24, 0x01	; 1
    4286:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    428a:	8c 81       	ldd	r24, Y+4	; 0x04
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <StHr+0x1>
    4292:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <StHr>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:488
            StMin = rtc.now().minute();
    4296:	ce 01       	movw	r24, r28
    4298:	01 96       	adiw	r24, 0x01	; 1
    429a:	0e 94 20 0a 	call	0x1440	; 0x1440 <RTC_DS1307::now() [clone .constprop.31]>
    429e:	8d 81       	ldd	r24, Y+5	; 0x05
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <StMin+0x1>
    42a6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <StMin>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:490
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
    42aa:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:495
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    42ae:	83 30       	cpi	r24, 0x03	; 3
    42b0:	49 f1       	breq	.+82     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:491
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
    42b2:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:490
            StMonth = rtc.now().month();
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
    42b6:	87 31       	cpi	r24, 0x17	; 23
    42b8:	29 f1       	breq	.+74     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:492
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
    42ba:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:491
            StYear = rtc.now().year();
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
    42be:	88 31       	cpi	r24, 0x18	; 24
    42c0:	09 f1       	breq	.+66     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:493
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
    42c2:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:492
            StHr = rtc.now().hour();
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
    42c6:	8a 31       	cpi	r24, 0x1A	; 26
    42c8:	e9 f0       	breq	.+58     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:494
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
    42ca:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:493
            StMin = rtc.now().minute();
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
    42ce:	8b 31       	cpi	r24, 0x1B	; 27
    42d0:	c9 f0       	breq	.+50     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:495
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    42d2:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:494
        }
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
    42d6:	8c 31       	cpi	r24, 0x1C	; 28
    42d8:	a9 f0       	breq	.+42     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:496
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
    42da:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:495
        if (Menu1.getCurrentItemCmdId() == mnuCmdSetTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdLt1OffTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
    42de:	8d 31       	cpi	r24, 0x1D	; 29
    42e0:	89 f0       	breq	.+34     	; 0x4304 <main+0xcae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:500
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
        {
            blinkMode = setHr;
        }
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
    42e2:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    42e6:	82 30       	cpi	r24, 0x02	; 2
    42e8:	79 f4       	brne	.+30     	; 0x4308 <main+0xcb2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:502
        {
            blinkMode = setDate;
    42ea:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <blinkMode>
    42ee:	0c c0       	rjmp	.+24     	; 0x4308 <main+0xcb2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:481
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
    42f0:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:480
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
    42f4:	82 30       	cpi	r24, 0x02	; 2
    42f6:	09 f4       	brne	.+2      	; 0x42fa <main+0xca4>
    42f8:	a4 cf       	rjmp	.-184    	; 0x4242 <main+0xbec>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:482
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
            Menu1.getCurrentItemCmdId() == mnuCmdSetTime)
    42fa:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:481
            appMode = APP_NORMAL_MODE;
            lcd.clear();
        }

        if (Menu1.getCurrentItemCmdId() == 1 ||
            Menu1.getCurrentItemCmdId() == mnuCmdSetDate ||
    42fe:	83 30       	cpi	r24, 0x03	; 3
    4300:	a1 f6       	brne	.-88     	; 0x42aa <main+0xc54>
    4302:	9f cf       	rjmp	.-194    	; 0x4242 <main+0xbec>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:498
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrMorDur ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveOnTime ||
            Menu1.getCurrentItemCmdId() == mnuCmdPlrEveDur)
        {
            blinkMode = setHr;
    4304:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <blinkMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:505
        else if (Menu1.getCurrentItemCmdId() == mnuCmdSetDate)
        {
            blinkMode = setDate;
        }

        if (btn == BUTTON_LEFT_LONG_PRESSED)
    4308:	10 91 e3 03 	lds	r17, 0x03E3	; 0x8003e3 <btn>
    430c:	14 38       	cpi	r17, 0x84	; 132
    430e:	a1 f4       	brne	.+40     	; 0x4338 <main+0xce2>
reset():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    4310:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Menu1>
    4314:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Menu1+0x1>
    4318:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <Menu1+0x4>
    431c:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    4320:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Menu1+0x2>
    4324:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    4328:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:21
  menuStackCount = 0;
    432c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:508
        {
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    4330:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:509
            lcd.clear();
    4334:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
getNavAction():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1364
}

byte getNavAction()
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();
    4338:	0e 94 3b 02 	call	0x476	; 0x476 <MenuManager::currentItemHasChildren() [clone .constprop.103]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1366

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    433c:	81 2f       	mov	r24, r17
    433e:	8f 77       	andi	r24, 0x7F	; 127
    4340:	82 30       	cpi	r24, 0x02	; 2
    4342:	61 f1       	breq	.+88     	; 0x439c <main+0xd46>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1368
        navAction = MENU_ITEM_PREV;
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4344:	83 30       	cpi	r24, 0x03	; 3
    4346:	61 f1       	breq	.+88     	; 0x43a0 <main+0xd4a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1370
        navAction = MENU_ITEM_NEXT;
    else if (btn == BUTTON_SELECT_PRESSED)
    4348:	11 30       	cpi	r17, 0x01	; 1
    434a:	61 f1       	breq	.+88     	; 0x43a4 <main+0xd4e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1372
        navAction = MENU_ITEM_SELECT;
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
    434c:	14 34       	cpi	r17, 0x44	; 68
    434e:	61 f1       	breq	.+88     	; 0x43a8 <main+0xd52>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1363
    return complete;
}

byte getNavAction()
{
    byte navAction = 0;
    4350:	10 e0       	ldi	r17, 0x00	; 0
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:157
unsigned char MenuManager::handleNavigation(unsigned char (*getNavAction)(), void (*refreshDisplay)(unsigned char))
{
  unsigned char menuMode = MENU_REMAIN;
  unsigned char action = getNavAction();

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
    4352:	8d ef       	ldi	r24, 0xFD	; 253
    4354:	81 0f       	add	r24, r17
    4356:	82 30       	cpi	r24, 0x02	; 2
    4358:	08 f0       	brcs	.+2      	; 0x435c <main+0xd06>
    435a:	ae c0       	rjmp	.+348    	; 0x44b8 <main+0xe62>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:159
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    435c:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    4360:	88 23       	and	r24, r24
    4362:	21 f1       	breq	.+72     	; 0x43ac <main+0xd56>
    4364:	14 30       	cpi	r17, 0x04	; 4
    4366:	11 f1       	breq	.+68     	; 0x43ac <main+0xd56>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:172
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
      }
    }
    else if (currentItemHasChildren())
    4368:	0e 94 3b 02 	call	0x476	; 0x476 <MenuManager::currentItemHasChildren() [clone .constprop.103]>
    436c:	81 11       	cpse	r24, r1
    436e:	61 c0       	rjmp	.+194    	; 0x4432 <main+0xddc>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:524
            lcd.clear();
            appMode = APP_NORMAL_MODE;
        }
        else if (menuMode == MENU_INVOKE_ITEM)
        {
            appMode = APP_PROCESS_MENU_CMD;
    4370:	82 e0       	ldi	r24, 0x02	; 2
    4372:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:525
            if (Menu1.getCurrentItemCmdId())
    4376:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    437a:	88 23       	and	r24, r24
    437c:	09 f4       	brne	.+2      	; 0x4380 <main+0xd2a>
    437e:	27 cb       	rjmp	.-2482   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:527
            {
                lcd.setCursor(0, 1);
    4380:	61 e0       	ldi	r22, 0x01	; 1
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:528
                strbuf[0] = 0b01111110; // forward arrow representing input prompt.
    4388:	8e e7       	ldi	r24, 0x7E	; 126
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:553
        if (processingComplete)
        {
            appMode = APP_MENU_MODE;
            // clear forward arrow
            lcd.setCursor(0, 1);
            strbuf[0] = ' '; // clear forward arrow
    438a:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <strbuf>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:554
            strbuf[1] = 0;
    438e:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <strbuf+0x1>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:555
            lcd.print(strbuf);
    4392:	80 ef       	ldi	r24, 0xF0	; 240
    4394:	94 e0       	ldi	r25, 0x04	; 4
    4396:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
    439a:	19 cb       	rjmp	.-2510   	; 0x39ce <main+0x378>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1367
{
    byte navAction = 0;
    byte currentItemHasChildren = Menu1.currentItemHasChildren();

    if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        navAction = MENU_ITEM_PREV;
    439c:	11 e0       	ldi	r17, 0x01	; 1
    439e:	d9 cf       	rjmp	.-78     	; 0x4352 <main+0xcfc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1369
    else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        navAction = MENU_ITEM_NEXT;
    43a0:	12 e0       	ldi	r17, 0x02	; 2
    43a2:	d7 cf       	rjmp	.-82     	; 0x4352 <main+0xcfc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1371
    else if (btn == BUTTON_SELECT_PRESSED)
        navAction = MENU_ITEM_SELECT;
    43a4:	13 e0       	ldi	r17, 0x03	; 3
    43a6:	d5 cf       	rjmp	.-86     	; 0x4352 <main+0xcfc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1373
    else if (btn == BUTTON_LEFT_SHORT_RELEASE)
        navAction = MENU_BACK;
    43a8:	14 e0       	ldi	r17, 0x04	; 4
    43aa:	d3 cf       	rjmp	.-90     	; 0x4352 <main+0xcfc>
stackHasItems():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:204


// ---------------------------------------------------
const unsigned char MenuManager::stackHasItems()
{
  return menuStackCount > 0;
    43ac:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Menu1+0x1b>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:161

  if (action == MENU_ITEM_SELECT || action == MENU_BACK)      // enter menu item, or sub menu, or ascend to parent, or cancel.
  {
    if (getCurrentItemCmdId() == 0 || action == MENU_BACK)
    {
      if (!currentMenuHasParent())
    43b0:	81 11       	cpse	r24, r1
    43b2:	1a c0       	rjmp	.+52     	; 0x43e8 <main+0xd92>
reset():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    43b4:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Menu1>
    43b8:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Menu1+0x1>
    43bc:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <Menu1+0x4>
    43c0:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    43c4:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Menu1+0x2>
    43c8:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    43cc:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:515
        }
        byte menuMode = Menu1.handleNavigation(getNavAction, refreshMenuDisplay);

        if (menuMode == MENU_EXIT)
        {
            if (!digitalRead(STA_PIN))
    43d0:	84 e0       	ldi	r24, 0x04	; 4
    43d2:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    43d6:	89 2b       	or	r24, r25
    43d8:	11 f4       	brne	.+4      	; 0x43de <main+0xd88>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:517
            {
                stopPreSong();
    43da:	0e 94 5e 08 	call	0x10bc	; 0x10bc <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:519
            }
            lcd.clear();
    43de:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:520
            appMode = APP_NORMAL_MODE;
    43e2:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
    43e6:	f3 ca       	rjmp	.-2586   	; 0x39ce <main+0x378>
popMenuItemFromStack():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:226
{
  MenuStackItem *menuStackItem = 0;
  
  if (stackHasItems())
  {
    menuStackCount--;
    43e8:	81 50       	subi	r24, 0x01	; 1
    43ea:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Menu1+0x1b>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:227
    menuStackItem = &(menuStack[menuStackCount]);
    43ee:	90 e0       	ldi	r25, 0x00	; 0
ascendToParentMenu():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:144
{
  if (currentMenuHasParent())
  {
    MenuStackItem *msi = popMenuItemFromStack();

    currentMenu = msi->menu;
    43f0:	dc 01       	movw	r26, r24
    43f2:	aa 0f       	add	r26, r26
    43f4:	bb 1f       	adc	r27, r27
    43f6:	aa 0f       	add	r26, r26
    43f8:	bb 1f       	adc	r27, r27
    43fa:	af 5f       	subi	r26, 0xFF	; 255
    43fc:	ba 4f       	sbci	r27, 0xFA	; 250
    43fe:	19 96       	adiw	r26, 0x09	; 9
    4400:	2d 91       	ld	r18, X+
    4402:	3c 91       	ld	r19, X
    4404:	1a 97       	sbiw	r26, 0x0a	; 10
    4406:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <Menu1+0x4>
    440a:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:145
    currentMenuItemCount = msi->itemCount;
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	fc 01       	movw	r30, r24
    4418:	e7 5f       	subi	r30, 0xF7	; 247
    441a:	fa 4f       	sbci	r31, 0xFA	; 250
    441c:	80 81       	ld	r24, Z
    441e:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:146
    currentMenuItemIndexPos = msi->itemIndexPos;
    4422:	17 96       	adiw	r26, 0x07	; 7
    4424:	8c 91       	ld	r24, X
    4426:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:169
        reset();
      }
      else
      {
        ascendToParentMenu();
        refreshDisplay(REFRESH_ASCEND);
    442a:	82 e0       	ldi	r24, 0x02	; 2
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    442c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <refreshMenuDisplay(unsigned char)>
    4430:	ce ca       	rjmp	.-2660   	; 0x39ce <main+0x378>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:127
}

// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
    4432:	0e 94 3b 02 	call	0x476	; 0x476 <MenuManager::currentItemHasChildren() [clone .constprop.103]>
    4436:	88 23       	and	r24, r24
    4438:	09 f4       	brne	.+2      	; 0x443c <main+0xde6>
    443a:	3c c0       	rjmp	.+120    	; 0x44b4 <main+0xe5e>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:129
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    443c:	30 91 07 05 	lds	r19, 0x0507	; 0x800507 <Menu1+0x6>
    4440:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <Menu1+0x3>
    4444:	70 91 05 05 	lds	r23, 0x0505	; 0x800505 <Menu1+0x4>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:210
}

// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
    4448:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <Menu1+0x1b>
    444c:	25 30       	cpi	r18, 0x05	; 5
    444e:	e8 f4       	brcc	.+58     	; 0x448a <main+0xe34>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:129
// ---------------------------------------------------
void MenuManager::descendToChildMenu()
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    4450:	40 91 06 05 	lds	r20, 0x0506	; 0x800506 <Menu1+0x5>
pushMenuOnStack():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:212
// ---------------------------------------------------
void MenuManager::pushMenuOnStack(const MenuItem *menu, unsigned char indexPos, unsigned char itemCount)
{
  if (menuStackCount < (sizeof (menuStack) / sizeof(MenuStackItem)))
  {
    menuStack[menuStackCount].itemIndexPos = indexPos;
    4454:	82 2f       	mov	r24, r18
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	dc 01       	movw	r26, r24
    445a:	aa 0f       	add	r26, r26
    445c:	bb 1f       	adc	r27, r27
    445e:	aa 0f       	add	r26, r26
    4460:	bb 1f       	adc	r27, r27
    4462:	af 5f       	subi	r26, 0xFF	; 255
    4464:	ba 4f       	sbci	r27, 0xFA	; 250
    4466:	17 96       	adiw	r26, 0x07	; 7
    4468:	3c 93       	st	X, r19
    446a:	17 97       	sbiw	r26, 0x07	; 7
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:213
    menuStack[menuStackCount].itemCount = itemCount;
    446c:	88 0f       	add	r24, r24
    446e:	99 1f       	adc	r25, r25
    4470:	88 0f       	add	r24, r24
    4472:	99 1f       	adc	r25, r25
    4474:	87 5f       	subi	r24, 0xF7	; 247
    4476:	9a 4f       	sbci	r25, 0xFA	; 250
    4478:	fc 01       	movw	r30, r24
    447a:	40 83       	st	Z, r20
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:214
    menuStack[menuStackCount].menu = menu;
    447c:	1a 96       	adiw	r26, 0x0a	; 10
    447e:	7c 93       	st	X, r23
    4480:	6e 93       	st	-X, r22
    4482:	19 97       	sbiw	r26, 0x09	; 9
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:215
    menuStackCount++;
    4484:	2f 5f       	subi	r18, 0xFF	; 255
    4486:	20 93 1c 05 	sts	0x051C, r18	; 0x80051c <Menu1+0x1b>
descendToChildMenu():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:131
{
  if (currentItemHasChildren())
  {
    pushMenuOnStack(currentMenu, currentMenuItemIndexPos, currentMenuItemCount);
    
    currentMenuItemCount = pgm_read_byte(&(currentMenu[currentMenuItemIndexPos].childItemCount));
    448a:	cb 01       	movw	r24, r22
    448c:	f6 e0       	ldi	r31, 0x06	; 6
    448e:	3f 9f       	mul	r19, r31
    4490:	80 0d       	add	r24, r0
    4492:	91 1d       	adc	r25, r1
    4494:	11 24       	eor	r1, r1
    4496:	fc 01       	movw	r30, r24
    4498:	35 96       	adiw	r30, 0x05	; 5
    449a:	e4 91       	lpm	r30, Z
    449c:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:132
    currentMenu = (const MenuItem *) pgm_read_word(&(currentMenu[currentMenuItemIndexPos].childMenu));
    44a0:	fc 01       	movw	r30, r24
    44a2:	33 96       	adiw	r30, 0x03	; 3
    44a4:	85 91       	lpm	r24, Z+
    44a6:	94 91       	lpm	r25, Z
    44a8:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <Menu1+0x4>
    44ac:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:133
    currentMenuItemIndexPos = 0;
    44b0:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:175
      }
    }
    else if (currentItemHasChildren())
    {
      descendToChildMenu();
      refreshDisplay(REFRESH_DESCEND);
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	ba cf       	rjmp	.-140    	; 0x442c <main+0xdd6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:182
    else
    {
      menuMode = MENU_INVOKE_ITEM;
    }
  }
  else if (action == MENU_ITEM_PREV) // move prev
    44b8:	11 30       	cpi	r17, 0x01	; 1
    44ba:	51 f4       	brne	.+20     	; 0x44d0 <main+0xe7a>
moveToPreviousItem():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:104
}

// ---------------------------------------------------
unsigned char MenuManager::moveToPreviousItem()
{
  if (currentMenuItemIndexPos > 0)
    44bc:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <Menu1+0x6>
    44c0:	88 23       	and	r24, r24
    44c2:	09 f4       	brne	.+2      	; 0x44c6 <main+0xe70>
    44c4:	84 ca       	rjmp	.-2808   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:106
  {
    currentMenuItemIndexPos--;
    44c6:	81 50       	subi	r24, 0x01	; 1
    44c8:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:186
  }
  else if (action == MENU_ITEM_PREV) // move prev
  {
    if (moveToPreviousItem())
    {
      refreshDisplay(REFRESH_MOVE_PREV);
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	ae cf       	rjmp	.-164    	; 0x442c <main+0xdd6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:189
    }
  }
  else if (action == MENU_ITEM_NEXT) // move next
    44d0:	12 30       	cpi	r17, 0x02	; 2
    44d2:	09 f0       	breq	.+2      	; 0x44d6 <main+0xe80>
    44d4:	7c ca       	rjmp	.-2824   	; 0x39ce <main+0x378>
moveToNextItem():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:93
}

// ---------------------------------------------------
unsigned char MenuManager::moveToNextItem()
{
  if (currentMenuItemIndexPos < (currentMenuItemCount -1))
    44d6:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <Menu1+0x6>
    44da:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <Menu1+0x5>
    44de:	21 50       	subi	r18, 0x01	; 1
    44e0:	33 0b       	sbc	r19, r19
    44e2:	82 17       	cp	r24, r18
    44e4:	13 06       	cpc	r1, r19
    44e6:	0c f0       	brlt	.+2      	; 0x44ea <main+0xe94>
    44e8:	72 ca       	rjmp	.-2844   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:95
  {
    currentMenuItemIndexPos++;
    44ea:	8f 5f       	subi	r24, 0xFF	; 255
    44ec:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <Menu1+0x6>
handleNavigation():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:193
  }
  else if (action == MENU_ITEM_NEXT) // move next
  {
    if (moveToNextItem())
    {
      refreshDisplay(REFRESH_MOVE_NEXT);
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	9c cf       	rjmp	.-200    	; 0x442c <main+0xdd6>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:537
        }
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
    44f4:	0e 94 aa 02 	call	0x554	; 0x554 <MenuManager::getCurrentItemCmdId() [clone .constprop.86]>
    44f8:	f8 2e       	mov	r15, r24
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:714
    // if (btn == BUTTON_SELECT_PRESSED)
    // {
    //     complete = true;
    // }

    switch (cmdId)
    44fa:	ee ef       	ldi	r30, 0xFE	; 254
    44fc:	e8 0f       	add	r30, r24
    44fe:	ef 31       	cpi	r30, 0x1F	; 31
    4500:	10 f0       	brcs	.+4      	; 0x4506 <main+0xeb0>
    4502:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <main+0x2174>
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	e8 57       	subi	r30, 0x78	; 120
    450a:	fd 4d       	sbci	r31, 0xDD	; 221
    450c:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <__tablejump2__>
    4510:	a7 22       	and	r10, r23
    4512:	b6 23       	and	r27, r22
    4514:	e5 2b       	or	r30, r21
    4516:	3a 24       	eor	r3, r10
    4518:	69 24       	eor	r6, r9
    451a:	79 2a       	or	r7, r25
    451c:	b0 2a       	or	r11, r16
    451e:	95 24       	eor	r9, r5
    4520:	e5 2b       	or	r30, r21
    4522:	bd 24       	eor	r11, r13
    4524:	f4 24       	eor	r15, r4
    4526:	e5 2b       	or	r30, r21
    4528:	08 25       	eor	r16, r8
    452a:	37 25       	eor	r19, r7
    452c:	e5 2b       	or	r30, r21
    452e:	4f 25       	eor	r20, r15
    4530:	7d 25       	eor	r23, r13
    4532:	ab 25       	eor	r26, r11
    4534:	e1 25       	eor	r30, r1
    4536:	ea 2a       	or	r14, r26
    4538:	e5 2b       	or	r30, r21
    453a:	12 26       	eor	r1, r18
    453c:	c7 26       	eor	r12, r23
    453e:	e5 2b       	or	r30, r21
    4540:	75 27       	eor	r23, r21
    4542:	23 28       	or	r2, r3
    4544:	d1 28       	or	r13, r1
    4546:	7d 29       	or	r23, r13
    4548:	e5 2b       	or	r30, r21
    454a:	4f 2a       	or	r4, r31
    454c:	2b 2a       	or	r2, r27
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:718
    {
    case mnuCmdSetDate:
    {
        if (btn == BUTTON_UP_PRESSED)
    454e:	12 30       	cpi	r17, 0x02	; 2
    4550:	09 f0       	breq	.+2      	; 0x4554 <main+0xefe>
    4552:	8d c0       	rjmp	.+282    	; 0x466e <main+0x1018>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:720
        {
            if (blinkMode == setDate)
    4554:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    4558:	82 30       	cpi	r24, 0x02	; 2
    455a:	09 f0       	breq	.+2      	; 0x455e <main+0xf08>
    455c:	5e c0       	rjmp	.+188    	; 0x461a <main+0xfc4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:721
                StDate = ++StDate > 31 ? 1 : StDate;
    455e:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <StDate>
    4562:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <StDate+0x1>
    4566:	01 96       	adiw	r24, 0x01	; 1
    4568:	80 32       	cpi	r24, 0x20	; 32
    456a:	91 05       	cpc	r25, r1
    456c:	14 f0       	brlt	.+4      	; 0x4572 <main+0xf1c>
main():
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4572:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <StDate+0x1>
    4576:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <StDate>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    457a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    457c:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1305
        }
        break;
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    457e:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <btn>
    4582:	84 34       	cpi	r24, 0x44	; 68
    4584:	21 f0       	breq	.+8      	; 0x458e <main+0xf38>
    4586:	00 23       	and	r16, r16
    4588:	11 f4       	brne	.+4      	; 0x458e <main+0xf38>
    458a:	0c 94 59 2c 	jmp	0x58b2	; 0x58b2 <main+0x225c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1308
    {
        complete = true;
        lcd.setCursor(1, 1);
    458e:	61 e0       	ldi	r22, 0x01	; 1
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1309
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    4596:	8f 2d       	mov	r24, r15
    4598:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    459c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    45a0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1307
    }
    }

    if (btn == BUTTON_LEFT_SHORT_RELEASE || complete)
    {
        complete = true;
    45a4:	11 e0       	ldi	r17, 0x01	; 1
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:538
        break;
    }
    case APP_PROCESS_MENU_CMD:
    {
        byte processingComplete = processMenuCommand(Menu1.getCurrentItemCmdId());
        if (millis() - timrMNU > 30000)
    45a6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    45aa:	80 90 db 03 	lds	r8, 0x03DB	; 0x8003db <timrMNU>
    45ae:	90 90 dc 03 	lds	r9, 0x03DC	; 0x8003dc <timrMNU+0x1>
    45b2:	a0 90 dd 03 	lds	r10, 0x03DD	; 0x8003dd <timrMNU+0x2>
    45b6:	b0 90 de 03 	lds	r11, 0x03DE	; 0x8003de <timrMNU+0x3>
    45ba:	68 19       	sub	r22, r8
    45bc:	79 09       	sbc	r23, r9
    45be:	8a 09       	sbc	r24, r10
    45c0:	9b 09       	sbc	r25, r11
    45c2:	61 33       	cpi	r22, 0x31	; 49
    45c4:	75 47       	sbci	r23, 0x75	; 117
    45c6:	81 05       	cpc	r24, r1
    45c8:	91 05       	cpc	r25, r1
    45ca:	d8 f0       	brcs	.+54     	; 0x4602 <main+0xfac>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:540
        {
            if (!digitalRead(STA_PIN))
    45cc:	84 e0       	ldi	r24, 0x04	; 4
    45ce:	0e 94 43 03 	call	0x686	; 0x686 <digitalRead>
    45d2:	89 2b       	or	r24, r25
    45d4:	11 f4       	brne	.+4      	; 0x45da <main+0xf84>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:542
            {
                stopPreSong();
    45d6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <stopPreSong()>
reset():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    45da:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Menu1>
    45de:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Menu1+0x1>
    45e2:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <Menu1+0x4>
    45e6:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    45ea:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Menu1+0x2>
    45ee:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    45f2:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:21
  menuStackCount = 0;
    45f6:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Menu1+0x1b>
loop():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:545
            }
            Menu1.reset();
            appMode = APP_NORMAL_MODE;
    45fa:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:546
            lcd.clear();
    45fe:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:548
        }
        if (processingComplete)
    4602:	11 23       	and	r17, r17
    4604:	09 f4       	brne	.+2      	; 0x4608 <main+0xfb2>
    4606:	e3 c9       	rjmp	.-3130   	; 0x39ce <main+0x378>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:550
        {
            appMode = APP_MENU_MODE;
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:552
            // clear forward arrow
            lcd.setCursor(0, 1);
    460e:	61 e0       	ldi	r22, 0x01	; 1
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:553
            strbuf[0] = ' '; // clear forward arrow
    4616:	80 e2       	ldi	r24, 0x20	; 32
    4618:	b8 ce       	rjmp	.-656    	; 0x438a <main+0xd34>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:722
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
    461a:	83 30       	cpi	r24, 0x03	; 3
    461c:	89 f4       	brne	.+34     	; 0x4640 <main+0xfea>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:723
                StMonth = ++StMonth > 12 ? 1 : StMonth;
    461e:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <StMonth>
    4622:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <StMonth+0x1>
    4626:	01 96       	adiw	r24, 0x01	; 1
    4628:	8d 30       	cpi	r24, 0x0D	; 13
    462a:	91 05       	cpc	r25, r1
    462c:	14 f0       	brlt	.+4      	; 0x4632 <main+0xfdc>
main():
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4632:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <StMonth+0x1>
    4636:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <StMonth>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    463a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    463c:	00 e0       	ldi	r16, 0x00	; 0
    463e:	9f cf       	rjmp	.-194    	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4640:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4642:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:724
        {
            if (blinkMode == setDate)
                StDate = ++StDate > 31 ? 1 : StDate;
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
    4644:	84 30       	cpi	r24, 0x04	; 4
    4646:	09 f0       	breq	.+2      	; 0x464a <main+0xff4>
    4648:	9a cf       	rjmp	.-204    	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:725
                StYear = ++StYear > 2050 ? 2020 : StYear;
    464a:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <StYear>
    464e:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <StYear+0x1>
    4652:	01 96       	adiw	r24, 0x01	; 1
    4654:	83 30       	cpi	r24, 0x03	; 3
    4656:	28 e0       	ldi	r18, 0x08	; 8
    4658:	92 07       	cpc	r25, r18
    465a:	14 f0       	brlt	.+4      	; 0x4660 <main+0x100a>
main():
    465c:	84 ee       	ldi	r24, 0xE4	; 228
    465e:	97 e0       	ldi	r25, 0x07	; 7
processMenuCommand():
    4660:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <StYear+0x1>
    4664:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <StYear>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4668:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    466a:	00 e0       	ldi	r16, 0x00	; 0
    466c:	88 cf       	rjmp	.-240    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:727
            else if (blinkMode == setMonth)
                StMonth = ++StMonth > 12 ? 1 : StMonth;
            else if (blinkMode == setYear)
                StYear = ++StYear > 2050 ? 2020 : StYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    466e:	13 30       	cpi	r17, 0x03	; 3
    4670:	09 f0       	breq	.+2      	; 0x4674 <main+0x101e>
    4672:	3f c0       	rjmp	.+126    	; 0x46f2 <main+0x109c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:729
        {
            if (blinkMode == setDate)
    4674:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    4678:	82 30       	cpi	r24, 0x02	; 2
    467a:	89 f4       	brne	.+34     	; 0x469e <main+0x1048>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:730
                StDate = --StDate < 1 ? 31 : StDate;
    467c:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <StDate>
    4680:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <StDate+0x1>
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	18 16       	cp	r1, r24
    4688:	19 06       	cpc	r1, r25
    468a:	14 f0       	brlt	.+4      	; 0x4690 <main+0x103a>
main():
    468c:	8f e1       	ldi	r24, 0x1F	; 31
    468e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4690:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <StDate+0x1>
    4694:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <StDate>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4698:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    469a:	00 e0       	ldi	r16, 0x00	; 0
    469c:	70 cf       	rjmp	.-288    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:731
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
    469e:	83 30       	cpi	r24, 0x03	; 3
    46a0:	89 f4       	brne	.+34     	; 0x46c4 <main+0x106e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:732
                StMonth = --StMonth < 1 ? 12 : StMonth;
    46a2:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <StMonth>
    46a6:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <StMonth+0x1>
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	18 16       	cp	r1, r24
    46ae:	19 06       	cpc	r1, r25
    46b0:	14 f0       	brlt	.+4      	; 0x46b6 <main+0x1060>
main():
    46b2:	8c e0       	ldi	r24, 0x0C	; 12
    46b4:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    46b6:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <StMonth+0x1>
    46ba:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <StMonth>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    46be:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    46c0:	00 e0       	ldi	r16, 0x00	; 0
    46c2:	5d cf       	rjmp	.-326    	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    46c4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    46c6:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:733
        {
            if (blinkMode == setDate)
                StDate = --StDate < 1 ? 31 : StDate;
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
    46c8:	84 30       	cpi	r24, 0x04	; 4
    46ca:	09 f0       	breq	.+2      	; 0x46ce <main+0x1078>
    46cc:	58 cf       	rjmp	.-336    	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:734
                StYear = --StYear < 2020 ? 2050 : StYear;
    46ce:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <StYear>
    46d2:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <StYear+0x1>
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	84 3e       	cpi	r24, 0xE4	; 228
    46da:	37 e0       	ldi	r19, 0x07	; 7
    46dc:	93 07       	cpc	r25, r19
    46de:	14 f4       	brge	.+4      	; 0x46e4 <main+0x108e>
main():
    46e0:	82 e0       	ldi	r24, 0x02	; 2
    46e2:	98 e0       	ldi	r25, 0x08	; 8
processMenuCommand():
    46e4:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <StYear+0x1>
    46e8:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <StYear>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    46ec:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    46ee:	00 e0       	ldi	r16, 0x00	; 0
    46f0:	46 cf       	rjmp	.-372    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:736
            else if (blinkMode == setMonth)
                StMonth = --StMonth < 1 ? 12 : StMonth;
            else if (blinkMode == setYear)
                StYear = --StYear < 2020 ? 2050 : StYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    46f2:	11 30       	cpi	r17, 0x01	; 1
    46f4:	11 f0       	breq	.+4      	; 0x46fa <main+0x10a4>
    46f6:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <main+0x217c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:738
        {
            if (blinkMode == setDate)
    46fa:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    46fe:	82 30       	cpi	r24, 0x02	; 2
    4700:	31 f4       	brne	.+12     	; 0x470e <main+0x10b8>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:740
            {
                blinkMode = setMonth;
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4708:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    470a:	00 e0       	ldi	r16, 0x00	; 0
    470c:	38 cf       	rjmp	.-400    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:742
        {
            if (blinkMode == setDate)
            {
                blinkMode = setMonth;
            }
            else if (blinkMode == setMonth)
    470e:	83 30       	cpi	r24, 0x03	; 3
    4710:	31 f4       	brne	.+12     	; 0x471e <main+0x10c8>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:744
            {
                blinkMode = setYear;
    4712:	84 e0       	ldi	r24, 0x04	; 4
    4714:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4718:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    471a:	00 e0       	ldi	r16, 0x00	; 0
    471c:	30 cf       	rjmp	.-416    	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    471e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4720:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:746
            }
            else if (blinkMode == setMonth)
            {
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
    4722:	84 30       	cpi	r24, 0x04	; 4
    4724:	09 f0       	breq	.+2      	; 0x4728 <main+0x10d2>
    4726:	2b cf       	rjmp	.-426    	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:748
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    4728:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <StMin>
    472c:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <StHr>
    4730:	40 91 5b 04 	lds	r20, 0x045B	; 0x80045b <StDate>
    4734:	50 91 59 04 	lds	r21, 0x0459	; 0x800459 <StMonth>
    4738:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <StYear>
    473c:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    4740:	80 3d       	cpi	r24, 0xD0	; 208
    4742:	67 e0       	ldi	r22, 0x07	; 7
    4744:	96 07       	cpc	r25, r22
    4746:	10 f0       	brcs	.+4      	; 0x474c <main+0x10f6>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    4748:	80 5d       	subi	r24, 0xD0	; 208
    474a:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    474c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    474e:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    4750:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    4752:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    4754:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    4756:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:748
    4758:	ce 01       	movw	r24, r28
    475a:	01 96       	adiw	r24, 0x01	; 1
    475c:	0e 94 9e 09 	call	0x133c	; 0x133c <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:750
                complete = true;
                blink = true;
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:749
                blinkMode = setYear;
            }
            else if (blinkMode == setYear)
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
                complete = true;
    4766:	01 e0       	ldi	r16, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4768:	10 e0       	ldi	r17, 0x00	; 0
    476a:	09 cf       	rjmp	.-494    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:757
        }
        break;
    }
    case mnuCmdSetTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    476c:	12 30       	cpi	r17, 0x02	; 2
    476e:	49 f5       	brne	.+82     	; 0x47c2 <main+0x116c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:759
        {
            if (blinkMode == setHr)
    4770:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4774:	01 11       	cpse	r16, r1
    4776:	10 c0       	rjmp	.+32     	; 0x4798 <main+0x1142>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:760
                StHr = ++StHr > 23 ? 0 : StHr;
    4778:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <StHr>
    477c:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <StHr+0x1>
    4780:	01 96       	adiw	r24, 0x01	; 1
    4782:	88 31       	cpi	r24, 0x18	; 24
    4784:	91 05       	cpc	r25, r1
    4786:	14 f0       	brlt	.+4      	; 0x478c <main+0x1136>
main():
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    478c:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <StHr+0x1>
    4790:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <StHr>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4794:	10 e0       	ldi	r17, 0x00	; 0
    4796:	f3 ce       	rjmp	.-538    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:761
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
    4798:	01 30       	cpi	r16, 0x01	; 1
    479a:	11 f0       	breq	.+4      	; 0x47a0 <main+0x114a>
    479c:	0c 94 ed 2b 	jmp	0x57da	; 0x57da <main+0x2184>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:762
                StMin = ++StMin > 59 ? 0 : StMin;
    47a0:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <StMin>
    47a4:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <StMin+0x1>
    47a8:	01 96       	adiw	r24, 0x01	; 1
    47aa:	8c 33       	cpi	r24, 0x3C	; 60
    47ac:	91 05       	cpc	r25, r1
    47ae:	14 f0       	brlt	.+4      	; 0x47b4 <main+0x115e>
main():
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    47b4:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <StMin+0x1>
    47b8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <StMin>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    47bc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    47be:	00 e0       	ldi	r16, 0x00	; 0
    47c0:	de ce       	rjmp	.-580    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:764
            if (blinkMode == setHr)
                StHr = ++StHr > 23 ? 0 : StHr;
            else if (blinkMode == setMin)
                StMin = ++StMin > 59 ? 0 : StMin;
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    47c2:	13 30       	cpi	r17, 0x03	; 3
    47c4:	31 f5       	brne	.+76     	; 0x4812 <main+0x11bc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:766
        {
            if (blinkMode == setHr)
    47c6:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    47ca:	01 11       	cpse	r16, r1
    47cc:	0f c0       	rjmp	.+30     	; 0x47ec <main+0x1196>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:767
                StHr = --StHr < 0 ? 23 : StHr;
    47ce:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <StHr>
    47d2:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <StHr+0x1>
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	97 ff       	sbrs	r25, 7
    47da:	02 c0       	rjmp	.+4      	; 0x47e0 <main+0x118a>
main():
    47dc:	87 e1       	ldi	r24, 0x17	; 23
    47de:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    47e0:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <StHr+0x1>
    47e4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <StHr>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	c9 ce       	rjmp	.-622    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:768
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
    47ec:	01 30       	cpi	r16, 0x01	; 1
    47ee:	09 f0       	breq	.+2      	; 0x47f2 <main+0x119c>
    47f0:	f8 c7       	rjmp	.+4080   	; 0x57e2 <main+0x218c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:769
                StMin = --StMin < 0 ? 59 : StMin;
    47f2:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <StMin>
    47f6:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <StMin+0x1>
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	97 ff       	sbrs	r25, 7
    47fe:	02 c0       	rjmp	.+4      	; 0x4804 <main+0x11ae>
main():
    4800:	8b e3       	ldi	r24, 0x3B	; 59
    4802:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4804:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <StMin+0x1>
    4808:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <StMin>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    480c:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    480e:	00 e0       	ldi	r16, 0x00	; 0
    4810:	b6 ce       	rjmp	.-660    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:771
            if (blinkMode == setHr)
                StHr = --StHr < 0 ? 23 : StHr;
            else if (blinkMode == setMin)
                StMin = --StMin < 0 ? 59 : StMin;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4812:	11 30       	cpi	r17, 0x01	; 1
    4814:	09 f0       	breq	.+2      	; 0x4818 <main+0x11c2>
    4816:	e9 c7       	rjmp	.+4050   	; 0x57ea <main+0x2194>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:773
        {
            if (blinkMode == setHr)
    4818:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    481c:	01 11       	cpse	r16, r1
    481e:	06 c0       	rjmp	.+12     	; 0x482c <main+0x11d6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:775
            {
                blinkMode = setMin;
    4820:	81 e0       	ldi	r24, 0x01	; 1
    4822:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <blinkMode>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4826:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4828:	00 e0       	ldi	r16, 0x00	; 0
    482a:	a9 ce       	rjmp	.-686    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:777
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    482c:	01 30       	cpi	r16, 0x01	; 1
    482e:	09 f0       	breq	.+2      	; 0x4832 <main+0x11dc>
    4830:	e0 c7       	rjmp	.+4032   	; 0x57f2 <main+0x219c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:779
            {
                rtc.adjust(DateTime(StYear, StMonth, StDate, StHr, StMin, 0));
    4832:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <StMin>
    4836:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <StHr>
    483a:	40 91 5b 04 	lds	r20, 0x045B	; 0x80045b <StDate>
    483e:	50 91 59 04 	lds	r21, 0x0459	; 0x800459 <StMonth>
    4842:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <StYear>
    4846:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <StYear+0x1>
__base_ctor ():
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    484a:	80 3d       	cpi	r24, 0xD0	; 208
    484c:	a7 e0       	ldi	r26, 0x07	; 7
    484e:	9a 07       	cpc	r25, r26
    4850:	10 f0       	brcs	.+4      	; 0x4856 <main+0x1200>
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    4852:	80 5d       	subi	r24, 0xD0	; 208
    4854:	97 40       	sbci	r25, 0x07	; 7
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    4856:	89 83       	std	Y+1, r24	; 0x01
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    4858:	5a 83       	std	Y+2, r21	; 0x02
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    485a:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    485c:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    485e:	2d 83       	std	Y+5, r18	; 0x05
C:\Users\quali\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    4860:	1e 82       	std	Y+6, r1	; 0x06
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:779
    4862:	ce 01       	movw	r24, r28
    4864:	01 96       	adiw	r24, 0x01	; 1
    4866:	0e 94 9e 09 	call	0x133c	; 0x133c <RTC_DS1307::adjust(DateTime const&) [clone .constprop.23]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:781
                complete = true;
                blink = true;
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4870:	10 e0       	ldi	r17, 0x00	; 0
    4872:	85 ce       	rjmp	.-758    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:790
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4874:	81 2f       	mov	r24, r17
    4876:	8f 77       	andi	r24, 0x7F	; 127
    4878:	82 30       	cpi	r24, 0x02	; 2
    487a:	89 f4       	brne	.+34     	; 0x489e <main+0x1248>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:792
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
    487c:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <config+0xf>
    4880:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <config+0x10>
    4884:	01 96       	adiw	r24, 0x01	; 1
    4886:	88 31       	cpi	r24, 0x18	; 24
    4888:	91 05       	cpc	r25, r1
    488a:	14 f0       	brlt	.+4      	; 0x4890 <main+0x123a>
main():
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    4890:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <config+0x10>
    4894:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:789
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    4898:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    489a:	00 e0       	ldi	r16, 0x00	; 0
    489c:	70 ce       	rjmp	.-800    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:794
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.startTime = ++config.startTime > 23 ? 0 : config.startTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    489e:	83 30       	cpi	r24, 0x03	; 3
    48a0:	81 f4       	brne	.+32     	; 0x48c2 <main+0x126c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:796
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
    48a2:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <config+0xf>
    48a6:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <config+0x10>
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	97 ff       	sbrs	r25, 7
    48ae:	02 c0       	rjmp	.+4      	; 0x48b4 <main+0x125e>
main():
    48b0:	87 e1       	ldi	r24, 0x17	; 23
    48b2:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    48b4:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <config+0x10>
    48b8:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <config+0xf>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:789
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    48bc:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    48be:	00 e0       	ldi	r16, 0x00	; 0
    48c0:	5e ce       	rjmp	.-836    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:798
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    48c2:	11 30       	cpi	r17, 0x01	; 1
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <main+0x1272>
    48c6:	99 c7       	rjmp	.+3890   	; 0x57fa <main+0x21a4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:800
        {
            config.save();
    48c8:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:789
        break;
    }

    case mnuCmdStartTime:
    {
        configChanged = true;
    48cc:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:801
            config.startTime = --config.startTime < 0 ? 23 : config.startTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            config.save();
            complete = true;
    48ce:	01 e0       	ldi	r16, 0x01	; 1
    48d0:	56 ce       	rjmp	.-852    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:812
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    48d2:	81 2f       	mov	r24, r17
    48d4:	8f 77       	andi	r24, 0x7F	; 127
    48d6:	82 30       	cpi	r24, 0x02	; 2
    48d8:	89 f4       	brne	.+34     	; 0x48fc <main+0x12a6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:814
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
    48da:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <config+0x11>
    48de:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <config+0x12>
    48e2:	01 96       	adiw	r24, 0x01	; 1
    48e4:	88 31       	cpi	r24, 0x18	; 24
    48e6:	91 05       	cpc	r25, r1
    48e8:	14 f0       	brlt	.+4      	; 0x48ee <main+0x1298>
main():
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    48ee:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <config+0x12>
    48f2:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <config+0x11>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:811
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    48f6:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    48f8:	00 e0       	ldi	r16, 0x00	; 0
    48fa:	41 ce       	rjmp	.-894    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:816
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.endTime = ++config.endTime > 23 ? 0 : config.endTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    48fc:	83 30       	cpi	r24, 0x03	; 3
    48fe:	81 f4       	brne	.+32     	; 0x4920 <main+0x12ca>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:818
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
    4900:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <config+0x11>
    4904:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <config+0x12>
    4908:	01 97       	sbiw	r24, 0x01	; 1
    490a:	97 ff       	sbrs	r25, 7
    490c:	02 c0       	rjmp	.+4      	; 0x4912 <main+0x12bc>
main():
    490e:	87 e1       	ldi	r24, 0x17	; 23
    4910:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4912:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <config+0x12>
    4916:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <config+0x11>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:811
        }
        break;
    }
    case mnuCmdEndTime:
    {
        configChanged = true;
    491a:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    491c:	00 e0       	ldi	r16, 0x00	; 0
    491e:	2f ce       	rjmp	.-930    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:820
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.endTime = --config.endTime < 0 ? 23 : config.endTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4920:	11 30       	cpi	r17, 0x01	; 1
    4922:	91 f2       	breq	.-92     	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4924:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4926:	00 e0       	ldi	r16, 0x00	; 0
    4928:	2a ce       	rjmp	.-940    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:834
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    492a:	81 2f       	mov	r24, r17
    492c:	8f 77       	andi	r24, 0x7F	; 127
    492e:	82 30       	cpi	r24, 0x02	; 2
    4930:	61 f4       	brne	.+24     	; 0x494a <main+0x12f4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:836
        {
            config.Song1_Count = ++config.Song1_Count;
    4932:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <config+0x1a>
    4936:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <config+0x1b>
    493a:	01 96       	adiw	r24, 0x01	; 1
    493c:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <config+0x1b>
    4940:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <config+0x1a>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:833
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    4944:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4946:	00 e0       	ldi	r16, 0x00	; 0
    4948:	1a ce       	rjmp	.-972    	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:838
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.Song1_Count = ++config.Song1_Count;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    494a:	83 30       	cpi	r24, 0x03	; 3
    494c:	81 f4       	brne	.+32     	; 0x496e <main+0x1318>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:840
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
    494e:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <config+0x1a>
    4952:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <config+0x1b>
    4956:	01 97       	sbiw	r24, 0x01	; 1
    4958:	97 ff       	sbrs	r25, 7
    495a:	02 c0       	rjmp	.+4      	; 0x4960 <main+0x130a>
main():
    495c:	84 e6       	ldi	r24, 0x64	; 100
    495e:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4960:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <config+0x1b>
    4964:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <config+0x1a>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:833
        }
        break;
    }
    case mnuCmdSlogamCount:
    {
        configChanged = true;
    4968:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    496a:	00 e0       	ldi	r16, 0x00	; 0
    496c:	08 ce       	rjmp	.-1008   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:842
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.Song1_Count = --config.Song1_Count < 0 ? 100 : config.Song1_Count;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    496e:	11 30       	cpi	r17, 0x01	; 1
    4970:	09 f4       	brne	.+2      	; 0x4974 <main+0x131e>
    4972:	aa cf       	rjmp	.-172    	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4974:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4976:	00 e0       	ldi	r16, 0x00	; 0
    4978:	02 ce       	rjmp	.-1020   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:856
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    497a:	81 2f       	mov	r24, r17
    497c:	8f 77       	andi	r24, 0x7F	; 127
    497e:	82 30       	cpi	r24, 0x02	; 2
    4980:	89 f4       	brne	.+34     	; 0x49a4 <main+0x134e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:858
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
    4982:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <config+0x15>
    4986:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <config+0x16>
    498a:	01 96       	adiw	r24, 0x01	; 1
    498c:	8f 31       	cpi	r24, 0x1F	; 31
    498e:	91 05       	cpc	r25, r1
    4990:	14 f0       	brlt	.+4      	; 0x4996 <main+0x1340>
main():
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4996:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <config+0x16>
    499a:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <config+0x15>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:855
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    499e:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    49a0:	00 e0       	ldi	r16, 0x00	; 0
    49a2:	ed cd       	rjmp	.-1062   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:860
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.vol = ++config.vol > 30 ? 1 : config.vol;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    49a4:	83 30       	cpi	r24, 0x03	; 3
    49a6:	89 f4       	brne	.+34     	; 0x49ca <main+0x1374>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:862
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
    49a8:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <config+0x15>
    49ac:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <config+0x16>
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	18 16       	cp	r1, r24
    49b4:	19 06       	cpc	r1, r25
    49b6:	14 f0       	brlt	.+4      	; 0x49bc <main+0x1366>
main():
    49b8:	8e e1       	ldi	r24, 0x1E	; 30
    49ba:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    49bc:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <config+0x16>
    49c0:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <config+0x15>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:855
        }
        break;
    }
    case mnuCmdVolume:
    {
        configChanged = true;
    49c4:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    49c6:	00 e0       	ldi	r16, 0x00	; 0
    49c8:	da cd       	rjmp	.-1100   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:864
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.vol = --config.vol < 1 ? 30 : config.vol;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    49ca:	11 30       	cpi	r17, 0x01	; 1
    49cc:	09 f0       	breq	.+2      	; 0x49d0 <main+0x137a>
    49ce:	19 c7       	rjmp	.+3634   	; 0x5802 <main+0x21ac>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:866
        {
            config.save();
    49d0:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
volume():
C:\Users\quali\Documents\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
    49d4:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <config+0x15>
    49d8:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <config+0x16>
    49dc:	77 27       	eor	r23, r23
    49de:	86 e0       	ldi	r24, 0x06	; 6
    49e0:	0e 94 88 05 	call	0xb10	; 0xb10 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.68]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:868
            myDFPlayer.volume(config.vol);
            complete = true;
    49e4:	01 e0       	ldi	r16, 0x01	; 1
    49e6:	cb cd       	rjmp	.-1130   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:880
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
    49e8:	8e ef       	ldi	r24, 0xFE	; 254
    49ea:	81 0f       	add	r24, r17
    49ec:	82 30       	cpi	r24, 0x02	; 2
    49ee:	50 f4       	brcc	.+20     	; 0x4a04 <main+0x13ae>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:882
        {
            config.SchlZone = !config.SchlZone;
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <config+0x19>
    49f6:	91 11       	cpse	r25, r1
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <config+0x19>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:879
        break;
    }
        // Set School
    case mnuCmdSchlZone:
    {
        configChanged = true;
    49fe:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a00:	00 e0       	ldi	r16, 0x00	; 0
    4a02:	bd cd       	rjmp	.-1158   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:884
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_DOWN_PRESSED)
        {
            config.SchlZone = !config.SchlZone;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4a04:	11 30       	cpi	r17, 0x01	; 1
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <main+0x13b4>
    4a08:	5f cf       	rjmp	.-322    	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4a0a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a0c:	00 e0       	ldi	r16, 0x00	; 0
    4a0e:	b7 cd       	rjmp	.-1170   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:899
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4a10:	81 2f       	mov	r24, r17
    4a12:	8f 77       	andi	r24, 0x7F	; 127
    4a14:	82 30       	cpi	r24, 0x02	; 2
    4a16:	89 f4       	brne	.+34     	; 0x4a3a <main+0x13e4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:901
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
    4a18:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <demoTime>
    4a1c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <demoTime+0x1>
    4a20:	01 96       	adiw	r24, 0x01	; 1
    4a22:	88 31       	cpi	r24, 0x18	; 24
    4a24:	91 05       	cpc	r25, r1
    4a26:	14 f0       	brlt	.+4      	; 0x4a2c <main+0x13d6>
main():
    4a28:	84 e0       	ldi	r24, 0x04	; 4
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4a2c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <demoTime+0x1>
    4a30:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <demoTime>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:898
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    4a34:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a36:	00 e0       	ldi	r16, 0x00	; 0
    4a38:	a2 cd       	rjmp	.-1212   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:903
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            demoTime = ++demoTime > 23 ? 4 : demoTime;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4a3a:	83 30       	cpi	r24, 0x03	; 3
    4a3c:	89 f4       	brne	.+34     	; 0x4a60 <main+0x140a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:905
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
    4a3e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <demoTime>
    4a42:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <demoTime+0x1>
    4a46:	01 97       	sbiw	r24, 0x01	; 1
    4a48:	84 30       	cpi	r24, 0x04	; 4
    4a4a:	91 05       	cpc	r25, r1
    4a4c:	14 f4       	brge	.+4      	; 0x4a52 <main+0x13fc>
main():
    4a4e:	87 e1       	ldi	r24, 0x17	; 23
    4a50:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4a52:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <demoTime+0x1>
    4a56:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <demoTime>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:898
        break;
    }

    case mnuCmdselectTime:
    {
        configChanged = true;
    4a5a:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a5c:	00 e0       	ldi	r16, 0x00	; 0
    4a5e:	8f cd       	rjmp	.-1250   	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:909
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            complete = true;
    4a60:	01 e0       	ldi	r16, 0x01	; 1
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:907
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            demoTime = --demoTime < 4 ? 23 : demoTime;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4a62:	11 30       	cpi	r17, 0x01	; 1
    4a64:	09 f4       	brne	.+2      	; 0x4a68 <main+0x1412>
    4a66:	8b cd       	rjmp	.-1258   	; 0x457e <main+0xf28>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4a68:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a6a:	00 e0       	ldi	r16, 0x00	; 0
    4a6c:	88 cd       	rjmp	.-1264   	; 0x457e <main+0xf28>
reset():
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:18
}

// ---------------------------------------------------
void MenuManager::reset()
{
  currentMenu = menuRoot;
    4a6e:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Menu1>
    4a72:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <Menu1+0x1>
    4a76:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <Menu1+0x4>
    4a7a:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <Menu1+0x3>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:19
  currentMenuItemCount = rootMenuItemCount;
    4a7e:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <Menu1+0x2>
    4a82:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <Menu1+0x5>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:20
  currentMenuItemIndexPos = 0;
    4a86:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <Menu1+0x6>
e:\Arduino\Arduino Git\ChantBellV3.3/MenuManager.cpp:21
  menuStackCount = 0;
    4a8a:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <Menu1+0x1b>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:920
        break;
    }
    case mnuCmdPlay:
    {
        Menu1.reset();
        appMode = APP_DEMO_MODE;
    4a8e:	84 e0       	ldi	r24, 0x04	; 4
    4a90:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <appMode>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:921
        lcd.clear();
    4a94:	0e 94 39 08 	call	0x1072	; 0x1072 <LiquidCrystal_I2C::clear() [clone .constprop.74]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4a98:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4a9a:	00 e0       	ldi	r16, 0x00	; 0
    4a9c:	70 cd       	rjmp	.-1312   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:927
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4a9e:	81 2f       	mov	r24, r17
    4aa0:	8f 77       	andi	r24, 0x7F	; 127
    4aa2:	82 30       	cpi	r24, 0x02	; 2
    4aa4:	89 f4       	brne	.+34     	; 0x4ac8 <main+0x1472>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:929
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
    4aa6:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <config+0x22>
    4aaa:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <config+0x23>
    4aae:	01 96       	adiw	r24, 0x01	; 1
    4ab0:	89 30       	cpi	r24, 0x09	; 9
    4ab2:	91 05       	cpc	r25, r1
    4ab4:	14 f0       	brlt	.+4      	; 0x4aba <main+0x1464>
main():
    4ab6:	83 e0       	ldi	r24, 0x03	; 3
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4aba:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <config+0x23>
    4abe:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <config+0x22>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:926
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    4ac2:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4ac4:	00 e0       	ldi	r16, 0x00	; 0
    4ac6:	5b cd       	rjmp	.-1354   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:931
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSong1Time = ++config.MorSong1Time > 8 ? 3 : config.MorSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4ac8:	83 30       	cpi	r24, 0x03	; 3
    4aca:	89 f4       	brne	.+34     	; 0x4aee <main+0x1498>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:933
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
    4acc:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <config+0x22>
    4ad0:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <config+0x23>
    4ad4:	01 97       	sbiw	r24, 0x01	; 1
    4ad6:	83 30       	cpi	r24, 0x03	; 3
    4ad8:	91 05       	cpc	r25, r1
    4ada:	14 f4       	brge	.+4      	; 0x4ae0 <main+0x148a>
main():
    4adc:	88 e0       	ldi	r24, 0x08	; 8
    4ade:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4ae0:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <config+0x23>
    4ae4:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <config+0x22>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:926
        lcd.clear();
        break;
    }
    case mnuCmdMorSong1Time:
    {
        configChanged = true;
    4ae8:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4aea:	00 e0       	ldi	r16, 0x00	; 0
    4aec:	48 cd       	rjmp	.-1392   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:935
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSong1Time = --config.MorSong1Time < 3 ? 8 : config.MorSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4aee:	11 30       	cpi	r17, 0x01	; 1
    4af0:	09 f4       	brne	.+2      	; 0x4af4 <main+0x149e>
    4af2:	ea ce       	rjmp	.-556    	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4af4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4af6:	00 e0       	ldi	r16, 0x00	; 0
    4af8:	42 cd       	rjmp	.-1404   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:949
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4afa:	81 2f       	mov	r24, r17
    4afc:	8f 77       	andi	r24, 0x7F	; 127
    4afe:	82 30       	cpi	r24, 0x02	; 2
    4b00:	89 f4       	brne	.+34     	; 0x4b24 <main+0x14ce>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:951
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
    4b02:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <config+0x26>
    4b06:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <config+0x27>
    4b0a:	01 96       	adiw	r24, 0x01	; 1
    4b0c:	89 30       	cpi	r24, 0x09	; 9
    4b0e:	91 05       	cpc	r25, r1
    4b10:	14 f0       	brlt	.+4      	; 0x4b16 <main+0x14c0>
main():
    4b12:	83 e0       	ldi	r24, 0x03	; 3
    4b14:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4b16:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <config+0x27>
    4b1a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <config+0x26>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:948
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    4b1e:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b20:	00 e0       	ldi	r16, 0x00	; 0
    4b22:	2d cd       	rjmp	.-1446   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:953
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSong1Time = ++config.EveSong1Time > 8 ? 3 : config.EveSong1Time;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4b24:	83 30       	cpi	r24, 0x03	; 3
    4b26:	89 f4       	brne	.+34     	; 0x4b4a <main+0x14f4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:955
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
    4b28:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <config+0x26>
    4b2c:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <config+0x27>
    4b30:	01 97       	sbiw	r24, 0x01	; 1
    4b32:	83 30       	cpi	r24, 0x03	; 3
    4b34:	91 05       	cpc	r25, r1
    4b36:	14 f4       	brge	.+4      	; 0x4b3c <main+0x14e6>
main():
    4b38:	88 e0       	ldi	r24, 0x08	; 8
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4b3c:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <config+0x27>
    4b40:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <config+0x26>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:948
        }
        break;
    }
    case mnuCmdEveSong1Time:
    {
        configChanged = true;
    4b44:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b46:	00 e0       	ldi	r16, 0x00	; 0
    4b48:	1a cd       	rjmp	.-1484   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:957
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSong1Time = --config.EveSong1Time < 3 ? 8 : config.EveSong1Time;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4b4a:	11 30       	cpi	r17, 0x01	; 1
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <main+0x14fa>
    4b4e:	bc ce       	rjmp	.-648    	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4b50:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b52:	00 e0       	ldi	r16, 0x00	; 0
    4b54:	14 cd       	rjmp	.-1496   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:971
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4b56:	81 2f       	mov	r24, r17
    4b58:	8f 77       	andi	r24, 0x7F	; 127
    4b5a:	82 30       	cpi	r24, 0x02	; 2
    4b5c:	99 f4       	brne	.+38     	; 0x4b84 <main+0x152e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:973
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
    4b5e:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <config+0x2a>
    4b62:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <config+0x2b>
    4b66:	01 96       	adiw	r24, 0x01	; 1
    4b68:	85 31       	cpi	r24, 0x15	; 21
    4b6a:	91 05       	cpc	r25, r1
    4b6c:	14 f0       	brlt	.+4      	; 0x4b72 <main+0x151c>
main():
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4b72:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <config+0x2b>
    4b76:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:974
            startPreSong(2, config.MorSongNo);
    4b7a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:970
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    4b7e:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4b80:	00 e0       	ldi	r16, 0x00	; 0
    4b82:	fd cc       	rjmp	.-1542   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:976
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.MorSongNo = ++config.MorSongNo > 20 ? 1 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4b84:	83 30       	cpi	r24, 0x03	; 3
    4b86:	99 f4       	brne	.+38     	; 0x4bae <main+0x1558>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:978
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
    4b88:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <config+0x2a>
    4b8c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <config+0x2b>
    4b90:	01 97       	sbiw	r24, 0x01	; 1
    4b92:	18 16       	cp	r1, r24
    4b94:	19 06       	cpc	r1, r25
    4b96:	14 f0       	brlt	.+4      	; 0x4b9c <main+0x1546>
main():
    4b98:	84 e1       	ldi	r24, 0x14	; 20
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4b9c:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <config+0x2b>
    4ba0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:979
            startPreSong(2, config.MorSongNo);
    4ba4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:970
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    4ba8:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4baa:	00 e0       	ldi	r16, 0x00	; 0
    4bac:	e8 cc       	rjmp	.-1584   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:981
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.MorSongNo = --config.MorSongNo < 1 ? 20 : config.MorSongNo;
            startPreSong(2, config.MorSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4bae:	11 30       	cpi	r17, 0x01	; 1
    4bb0:	09 f0       	breq	.+2      	; 0x4bb4 <main+0x155e>
    4bb2:	2b c6       	rjmp	.+3158   	; 0x580a <main+0x21b4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:983
        {
            stopPreSong();
    4bb4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <stopPreSong()>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:984
            config.save();
    4bb8:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:970
        }
        break;
    }
    case mnuCmdMorSongNo:
    {
        configChanged = true;
    4bbc:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:985
        }
        else if (btn == BUTTON_SELECT_PRESSED)
        {
            stopPreSong();
            config.save();
            complete = true;
    4bbe:	01 e0       	ldi	r16, 0x01	; 1
    4bc0:	de cc       	rjmp	.-1604   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:996
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    4bc2:	81 2f       	mov	r24, r17
    4bc4:	8f 77       	andi	r24, 0x7F	; 127
    4bc6:	82 30       	cpi	r24, 0x02	; 2
    4bc8:	99 f4       	brne	.+38     	; 0x4bf0 <main+0x159a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:998
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
    4bca:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <config+0x2c>
    4bce:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <config+0x2d>
    4bd2:	01 96       	adiw	r24, 0x01	; 1
    4bd4:	85 31       	cpi	r24, 0x15	; 21
    4bd6:	91 05       	cpc	r25, r1
    4bd8:	14 f0       	brlt	.+4      	; 0x4bde <main+0x1588>
main():
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4bde:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <config+0x2d>
    4be2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:999
            startPreSong(2, config.EveSongNo);
    4be6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:995
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    4bea:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4bec:	00 e0       	ldi	r16, 0x00	; 0
    4bee:	c7 cc       	rjmp	.-1650   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1001
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.EveSongNo = ++config.EveSongNo > 20 ? 1 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4bf0:	83 30       	cpi	r24, 0x03	; 3
    4bf2:	99 f4       	brne	.+38     	; 0x4c1a <main+0x15c4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1003
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
    4bf4:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <config+0x2c>
    4bf8:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <config+0x2d>
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	18 16       	cp	r1, r24
    4c00:	19 06       	cpc	r1, r25
    4c02:	14 f0       	brlt	.+4      	; 0x4c08 <main+0x15b2>
main():
    4c04:	84 e1       	ldi	r24, 0x14	; 20
    4c06:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    4c08:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <config+0x2d>
    4c0c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1004
            startPreSong(2, config.EveSongNo);
    4c10:	0e 94 e6 05 	call	0xbcc	; 0xbcc <startPreSong(unsigned char, unsigned char) [clone .constprop.28]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:995
        }
        break;
    }
    case mnuCmdEveSongNo:
    {
        configChanged = true;
    4c14:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4c16:	00 e0       	ldi	r16, 0x00	; 0
    4c18:	b2 cc       	rjmp	.-1692   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1006
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.EveSongNo = --config.EveSongNo < 1 ? 20 : config.EveSongNo;
            startPreSong(2, config.EveSongNo);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4c1a:	11 30       	cpi	r17, 0x01	; 1
    4c1c:	59 f2       	breq	.-106    	; 0x4bb4 <main+0x155e>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4c1e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4c20:	00 e0       	ldi	r16, 0x00	; 0
    4c22:	ad cc       	rjmp	.-1702   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1021
        break;
    }

    case mnuCmdLt1OnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4c24:	12 30       	cpi	r17, 0x02	; 2
    4c26:	09 f0       	breq	.+2      	; 0x4c2a <main+0x15d4>
    4c28:	4c c0       	rjmp	.+152    	; 0x4cc2 <main+0x166c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1023
        {
            if (blinkMode == setHr)
    4c2a:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4c2e:	01 11       	cpse	r16, r1
    4c30:	22 c0       	rjmp	.+68     	; 0x4c76 <main+0x1620>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1024
                config.Light1On = addToTime(60, config.Light1On);
    4c32:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <config+0x2e>
    4c36:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <config+0x2f>
    4c3a:	a0 91 8d 04 	lds	r26, 0x048D	; 0x80048d <config+0x30>
    4c3e:	b0 91 8e 04 	lds	r27, 0x048E	; 0x80048e <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4c42:	ac 01       	movw	r20, r24
    4c44:	bd 01       	movw	r22, r26
    4c46:	44 5c       	subi	r20, 0xC4	; 196
    4c48:	5f 4f       	sbci	r21, 0xFF	; 255
    4c4a:	6f 4f       	sbci	r22, 0xFF	; 255
    4c4c:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4c4e:	77 fd       	sbrc	r23, 7
    4c50:	08 c0       	rjmp	.+16     	; 0x4c62 <main+0x160c>
    4c52:	40 3a       	cpi	r20, 0xA0	; 160
    4c54:	e5 e0       	ldi	r30, 0x05	; 5
    4c56:	5e 07       	cpc	r21, r30
    4c58:	61 05       	cpc	r22, r1
    4c5a:	71 05       	cpc	r23, r1
    4c5c:	14 f4       	brge	.+4      	; 0x4c62 <main+0x160c>
    4c5e:	db 01       	movw	r26, r22
    4c60:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1024
    4c62:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <config+0x2e>
    4c66:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <config+0x2f>
    4c6a:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <config+0x30>
    4c6e:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4c72:	10 e0       	ldi	r17, 0x00	; 0
    4c74:	84 cc       	rjmp	.-1784   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1025
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
    4c76:	01 30       	cpi	r16, 0x01	; 1
    4c78:	09 f0       	breq	.+2      	; 0x4c7c <main+0x1626>
    4c7a:	cb c5       	rjmp	.+2966   	; 0x5812 <main+0x21bc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1026
                config.Light1On = addToTime(1, config.Light1On);
    4c7c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <config+0x2e>
    4c80:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <config+0x2f>
    4c84:	a0 91 8d 04 	lds	r26, 0x048D	; 0x80048d <config+0x30>
    4c88:	b0 91 8e 04 	lds	r27, 0x048E	; 0x80048e <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4c8c:	ac 01       	movw	r20, r24
    4c8e:	bd 01       	movw	r22, r26
    4c90:	4f 5f       	subi	r20, 0xFF	; 255
    4c92:	5f 4f       	sbci	r21, 0xFF	; 255
    4c94:	6f 4f       	sbci	r22, 0xFF	; 255
    4c96:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4c98:	77 fd       	sbrc	r23, 7
    4c9a:	08 c0       	rjmp	.+16     	; 0x4cac <main+0x1656>
    4c9c:	40 3a       	cpi	r20, 0xA0	; 160
    4c9e:	f5 e0       	ldi	r31, 0x05	; 5
    4ca0:	5f 07       	cpc	r21, r31
    4ca2:	61 05       	cpc	r22, r1
    4ca4:	71 05       	cpc	r23, r1
    4ca6:	14 f4       	brge	.+4      	; 0x4cac <main+0x1656>
    4ca8:	db 01       	movw	r26, r22
    4caa:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1026
    4cac:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <config+0x2e>
    4cb0:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <config+0x2f>
    4cb4:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <config+0x30>
    4cb8:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4cbc:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4cbe:	00 e0       	ldi	r16, 0x00	; 0
    4cc0:	5e cc       	rjmp	.-1860   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1028
            if (blinkMode == setHr)
                config.Light1On = addToTime(60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(1, config.Light1On);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4cc2:	81 2f       	mov	r24, r17
    4cc4:	8f 77       	andi	r24, 0x7F	; 127
    4cc6:	83 30       	cpi	r24, 0x03	; 3
    4cc8:	09 f0       	breq	.+2      	; 0x4ccc <main+0x1676>
    4cca:	4c c0       	rjmp	.+152    	; 0x4d64 <main+0x170e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1030
        {
            if (blinkMode == setHr)
    4ccc:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4cd0:	01 11       	cpse	r16, r1
    4cd2:	22 c0       	rjmp	.+68     	; 0x4d18 <main+0x16c2>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1031
                config.Light1On = addToTime(-60, config.Light1On);
    4cd4:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <config+0x2e>
    4cd8:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <config+0x2f>
    4cdc:	a0 91 8d 04 	lds	r26, 0x048D	; 0x80048d <config+0x30>
    4ce0:	b0 91 8e 04 	lds	r27, 0x048E	; 0x80048e <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4ce4:	ac 01       	movw	r20, r24
    4ce6:	bd 01       	movw	r22, r26
    4ce8:	4c 53       	subi	r20, 0x3C	; 60
    4cea:	51 09       	sbc	r21, r1
    4cec:	61 09       	sbc	r22, r1
    4cee:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4cf0:	77 fd       	sbrc	r23, 7
    4cf2:	08 c0       	rjmp	.+16     	; 0x4d04 <main+0x16ae>
    4cf4:	40 3a       	cpi	r20, 0xA0	; 160
    4cf6:	25 e0       	ldi	r18, 0x05	; 5
    4cf8:	52 07       	cpc	r21, r18
    4cfa:	61 05       	cpc	r22, r1
    4cfc:	71 05       	cpc	r23, r1
    4cfe:	14 f4       	brge	.+4      	; 0x4d04 <main+0x16ae>
    4d00:	db 01       	movw	r26, r22
    4d02:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1031
    4d04:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <config+0x2e>
    4d08:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <config+0x2f>
    4d0c:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <config+0x30>
    4d10:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d14:	10 e0       	ldi	r17, 0x00	; 0
    4d16:	33 cc       	rjmp	.-1946   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1032
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
    4d18:	01 30       	cpi	r16, 0x01	; 1
    4d1a:	09 f0       	breq	.+2      	; 0x4d1e <main+0x16c8>
    4d1c:	7e c5       	rjmp	.+2812   	; 0x581a <main+0x21c4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1033
                config.Light1On = addToTime(-1, config.Light1On);
    4d1e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <config+0x2e>
    4d22:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <config+0x2f>
    4d26:	a0 91 8d 04 	lds	r26, 0x048D	; 0x80048d <config+0x30>
    4d2a:	b0 91 8e 04 	lds	r27, 0x048E	; 0x80048e <config+0x31>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4d2e:	ac 01       	movw	r20, r24
    4d30:	bd 01       	movw	r22, r26
    4d32:	41 50       	subi	r20, 0x01	; 1
    4d34:	51 09       	sbc	r21, r1
    4d36:	61 09       	sbc	r22, r1
    4d38:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4d3a:	77 fd       	sbrc	r23, 7
    4d3c:	08 c0       	rjmp	.+16     	; 0x4d4e <main+0x16f8>
    4d3e:	40 3a       	cpi	r20, 0xA0	; 160
    4d40:	35 e0       	ldi	r19, 0x05	; 5
    4d42:	53 07       	cpc	r21, r19
    4d44:	61 05       	cpc	r22, r1
    4d46:	71 05       	cpc	r23, r1
    4d48:	14 f4       	brge	.+4      	; 0x4d4e <main+0x16f8>
    4d4a:	db 01       	movw	r26, r22
    4d4c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1033
    4d4e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <config+0x2e>
    4d52:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <config+0x2f>
    4d56:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <config+0x30>
    4d5a:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <config+0x31>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d5e:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4d60:	00 e0       	ldi	r16, 0x00	; 0
    4d62:	0d cc       	rjmp	.-2022   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1035
            if (blinkMode == setHr)
                config.Light1On = addToTime(-60, config.Light1On);
            else if (blinkMode == setMin)
                config.Light1On = addToTime(-1, config.Light1On);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4d64:	11 30       	cpi	r17, 0x01	; 1
    4d66:	09 f0       	breq	.+2      	; 0x4d6a <main+0x1714>
    4d68:	5c c5       	rjmp	.+2744   	; 0x5822 <main+0x21cc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1037
        {
            if (blinkMode == setHr)
    4d6a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    4d6e:	88 23       	and	r24, r24
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <main+0x171e>
    4d72:	56 cd       	rjmp	.-1364   	; 0x4820 <main+0x11ca>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4d74:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4d76:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1041
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4d78:	81 30       	cpi	r24, 0x01	; 1
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <main+0x1728>
    4d7c:	00 cc       	rjmp	.-2048   	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1043
            {
                config.save();
    4d7e:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1045
                complete = true;
                blink = true;
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4d88:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1044
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
            {
                config.save();
                complete = true;
    4d8a:	01 e0       	ldi	r16, 0x01	; 1
    4d8c:	f8 cb       	rjmp	.-2064   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1053

        break;
    }
    case mnuCmdLt1OffTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4d8e:	12 30       	cpi	r17, 0x02	; 2
    4d90:	09 f0       	breq	.+2      	; 0x4d94 <main+0x173e>
    4d92:	4c c0       	rjmp	.+152    	; 0x4e2c <main+0x17d6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1055
        {
            if (blinkMode == setHr)
    4d94:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4d98:	01 11       	cpse	r16, r1
    4d9a:	22 c0       	rjmp	.+68     	; 0x4de0 <main+0x178a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1056
                config.Light1Off = addToTime(60, config.Light1Off);
    4d9c:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <config+0x32>
    4da0:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <config+0x33>
    4da4:	a0 91 91 04 	lds	r26, 0x0491	; 0x800491 <config+0x34>
    4da8:	b0 91 92 04 	lds	r27, 0x0492	; 0x800492 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4dac:	ac 01       	movw	r20, r24
    4dae:	bd 01       	movw	r22, r26
    4db0:	44 5c       	subi	r20, 0xC4	; 196
    4db2:	5f 4f       	sbci	r21, 0xFF	; 255
    4db4:	6f 4f       	sbci	r22, 0xFF	; 255
    4db6:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4db8:	77 fd       	sbrc	r23, 7
    4dba:	08 c0       	rjmp	.+16     	; 0x4dcc <main+0x1776>
    4dbc:	40 3a       	cpi	r20, 0xA0	; 160
    4dbe:	e5 e0       	ldi	r30, 0x05	; 5
    4dc0:	5e 07       	cpc	r21, r30
    4dc2:	61 05       	cpc	r22, r1
    4dc4:	71 05       	cpc	r23, r1
    4dc6:	14 f4       	brge	.+4      	; 0x4dcc <main+0x1776>
    4dc8:	db 01       	movw	r26, r22
    4dca:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1056
    4dcc:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <config+0x32>
    4dd0:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <config+0x33>
    4dd4:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <config+0x34>
    4dd8:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4ddc:	10 e0       	ldi	r17, 0x00	; 0
    4dde:	cf cb       	rjmp	.-2146   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1057
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
    4de0:	01 30       	cpi	r16, 0x01	; 1
    4de2:	09 f0       	breq	.+2      	; 0x4de6 <main+0x1790>
    4de4:	22 c5       	rjmp	.+2628   	; 0x582a <main+0x21d4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1058
                config.Light1Off = addToTime(1, config.Light1Off);
    4de6:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <config+0x32>
    4dea:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <config+0x33>
    4dee:	a0 91 91 04 	lds	r26, 0x0491	; 0x800491 <config+0x34>
    4df2:	b0 91 92 04 	lds	r27, 0x0492	; 0x800492 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4df6:	ac 01       	movw	r20, r24
    4df8:	bd 01       	movw	r22, r26
    4dfa:	4f 5f       	subi	r20, 0xFF	; 255
    4dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfe:	6f 4f       	sbci	r22, 0xFF	; 255
    4e00:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4e02:	77 fd       	sbrc	r23, 7
    4e04:	08 c0       	rjmp	.+16     	; 0x4e16 <main+0x17c0>
    4e06:	40 3a       	cpi	r20, 0xA0	; 160
    4e08:	f5 e0       	ldi	r31, 0x05	; 5
    4e0a:	5f 07       	cpc	r21, r31
    4e0c:	61 05       	cpc	r22, r1
    4e0e:	71 05       	cpc	r23, r1
    4e10:	14 f4       	brge	.+4      	; 0x4e16 <main+0x17c0>
    4e12:	db 01       	movw	r26, r22
    4e14:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1058
    4e16:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <config+0x32>
    4e1a:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <config+0x33>
    4e1e:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <config+0x34>
    4e22:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4e26:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4e28:	00 e0       	ldi	r16, 0x00	; 0
    4e2a:	a9 cb       	rjmp	.-2222   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1060
            if (blinkMode == setHr)
                config.Light1Off = addToTime(60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(1, config.Light1Off);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4e2c:	81 2f       	mov	r24, r17
    4e2e:	8f 77       	andi	r24, 0x7F	; 127
    4e30:	83 30       	cpi	r24, 0x03	; 3
    4e32:	09 f0       	breq	.+2      	; 0x4e36 <main+0x17e0>
    4e34:	4c c0       	rjmp	.+152    	; 0x4ece <main+0x1878>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1062
        {
            if (blinkMode == setHr)
    4e36:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4e3a:	01 11       	cpse	r16, r1
    4e3c:	22 c0       	rjmp	.+68     	; 0x4e82 <main+0x182c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1063
                config.Light1Off = addToTime(-60, config.Light1Off);
    4e3e:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <config+0x32>
    4e42:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <config+0x33>
    4e46:	a0 91 91 04 	lds	r26, 0x0491	; 0x800491 <config+0x34>
    4e4a:	b0 91 92 04 	lds	r27, 0x0492	; 0x800492 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4e4e:	ac 01       	movw	r20, r24
    4e50:	bd 01       	movw	r22, r26
    4e52:	4c 53       	subi	r20, 0x3C	; 60
    4e54:	51 09       	sbc	r21, r1
    4e56:	61 09       	sbc	r22, r1
    4e58:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4e5a:	77 fd       	sbrc	r23, 7
    4e5c:	08 c0       	rjmp	.+16     	; 0x4e6e <main+0x1818>
    4e5e:	40 3a       	cpi	r20, 0xA0	; 160
    4e60:	25 e0       	ldi	r18, 0x05	; 5
    4e62:	52 07       	cpc	r21, r18
    4e64:	61 05       	cpc	r22, r1
    4e66:	71 05       	cpc	r23, r1
    4e68:	14 f4       	brge	.+4      	; 0x4e6e <main+0x1818>
    4e6a:	db 01       	movw	r26, r22
    4e6c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1063
    4e6e:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <config+0x32>
    4e72:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <config+0x33>
    4e76:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <config+0x34>
    4e7a:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4e7e:	10 e0       	ldi	r17, 0x00	; 0
    4e80:	7e cb       	rjmp	.-2308   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1064
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
    4e82:	01 30       	cpi	r16, 0x01	; 1
    4e84:	09 f0       	breq	.+2      	; 0x4e88 <main+0x1832>
    4e86:	d5 c4       	rjmp	.+2474   	; 0x5832 <main+0x21dc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1065
                config.Light1Off = addToTime(-1, config.Light1Off);
    4e88:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <config+0x32>
    4e8c:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <config+0x33>
    4e90:	a0 91 91 04 	lds	r26, 0x0491	; 0x800491 <config+0x34>
    4e94:	b0 91 92 04 	lds	r27, 0x0492	; 0x800492 <config+0x35>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4e98:	ac 01       	movw	r20, r24
    4e9a:	bd 01       	movw	r22, r26
    4e9c:	41 50       	subi	r20, 0x01	; 1
    4e9e:	51 09       	sbc	r21, r1
    4ea0:	61 09       	sbc	r22, r1
    4ea2:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4ea4:	77 fd       	sbrc	r23, 7
    4ea6:	08 c0       	rjmp	.+16     	; 0x4eb8 <main+0x1862>
    4ea8:	40 3a       	cpi	r20, 0xA0	; 160
    4eaa:	35 e0       	ldi	r19, 0x05	; 5
    4eac:	53 07       	cpc	r21, r19
    4eae:	61 05       	cpc	r22, r1
    4eb0:	71 05       	cpc	r23, r1
    4eb2:	14 f4       	brge	.+4      	; 0x4eb8 <main+0x1862>
    4eb4:	db 01       	movw	r26, r22
    4eb6:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1065
    4eb8:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <config+0x32>
    4ebc:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <config+0x33>
    4ec0:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <config+0x34>
    4ec4:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <config+0x35>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4ec8:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4eca:	00 e0       	ldi	r16, 0x00	; 0
    4ecc:	58 cb       	rjmp	.-2384   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1067
            if (blinkMode == setHr)
                config.Light1Off = addToTime(-60, config.Light1Off);
            else if (blinkMode == setMin)
                config.Light1Off = addToTime(-1, config.Light1Off);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    4ece:	11 30       	cpi	r17, 0x01	; 1
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <main+0x187e>
    4ed2:	b3 c4       	rjmp	.+2406   	; 0x583a <main+0x21e4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1069
        {
            if (blinkMode == setHr)
    4ed4:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    4ed8:	88 23       	and	r24, r24
    4eda:	09 f4       	brne	.+2      	; 0x4ede <main+0x1888>
    4edc:	a1 cc       	rjmp	.-1726   	; 0x4820 <main+0x11ca>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    4ede:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4ee0:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1073
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    4ee2:	81 30       	cpi	r24, 0x01	; 1
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <main+0x1892>
    4ee6:	4b cb       	rjmp	.-2410   	; 0x457e <main+0xf28>
    4ee8:	4a cf       	rjmp	.-364    	; 0x4d7e <main+0x1728>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1084
        }
        break;
    }
    case mnuCmdPlrMorOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    4eea:	12 30       	cpi	r17, 0x02	; 2
    4eec:	09 f0       	breq	.+2      	; 0x4ef0 <main+0x189a>
    4eee:	4c c0       	rjmp	.+152    	; 0x4f88 <main+0x1932>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1086
        {
            if (blinkMode == setHr)
    4ef0:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4ef4:	01 11       	cpse	r16, r1
    4ef6:	22 c0       	rjmp	.+68     	; 0x4f3c <main+0x18e6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1087
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
    4ef8:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <config+0x3e>
    4efc:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <config+0x3f>
    4f00:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <config+0x40>
    4f04:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4f08:	ac 01       	movw	r20, r24
    4f0a:	bd 01       	movw	r22, r26
    4f0c:	44 5c       	subi	r20, 0xC4	; 196
    4f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f10:	6f 4f       	sbci	r22, 0xFF	; 255
    4f12:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4f14:	77 fd       	sbrc	r23, 7
    4f16:	08 c0       	rjmp	.+16     	; 0x4f28 <main+0x18d2>
    4f18:	40 3a       	cpi	r20, 0xA0	; 160
    4f1a:	e5 e0       	ldi	r30, 0x05	; 5
    4f1c:	5e 07       	cpc	r21, r30
    4f1e:	61 05       	cpc	r22, r1
    4f20:	71 05       	cpc	r23, r1
    4f22:	14 f4       	brge	.+4      	; 0x4f28 <main+0x18d2>
    4f24:	db 01       	movw	r26, r22
    4f26:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1087
    4f28:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <config+0x3e>
    4f2c:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <config+0x3f>
    4f30:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <config+0x40>
    4f34:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4f38:	10 e0       	ldi	r17, 0x00	; 0
    4f3a:	21 cb       	rjmp	.-2494   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1088
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    4f3c:	01 30       	cpi	r16, 0x01	; 1
    4f3e:	09 f0       	breq	.+2      	; 0x4f42 <main+0x18ec>
    4f40:	80 c4       	rjmp	.+2304   	; 0x5842 <main+0x21ec>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1089
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
    4f42:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <config+0x3e>
    4f46:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <config+0x3f>
    4f4a:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <config+0x40>
    4f4e:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4f52:	ac 01       	movw	r20, r24
    4f54:	bd 01       	movw	r22, r26
    4f56:	4f 5f       	subi	r20, 0xFF	; 255
    4f58:	5f 4f       	sbci	r21, 0xFF	; 255
    4f5a:	6f 4f       	sbci	r22, 0xFF	; 255
    4f5c:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4f5e:	77 fd       	sbrc	r23, 7
    4f60:	08 c0       	rjmp	.+16     	; 0x4f72 <main+0x191c>
    4f62:	40 3a       	cpi	r20, 0xA0	; 160
    4f64:	f5 e0       	ldi	r31, 0x05	; 5
    4f66:	5f 07       	cpc	r21, r31
    4f68:	61 05       	cpc	r22, r1
    4f6a:	71 05       	cpc	r23, r1
    4f6c:	14 f4       	brge	.+4      	; 0x4f72 <main+0x191c>
    4f6e:	db 01       	movw	r26, r22
    4f70:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1089
    4f72:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <config+0x3e>
    4f76:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <config+0x3f>
    4f7a:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <config+0x40>
    4f7e:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4f82:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    4f84:	00 e0       	ldi	r16, 0x00	; 0
    4f86:	fb ca       	rjmp	.-2570   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1091
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    4f88:	81 2f       	mov	r24, r17
    4f8a:	8f 77       	andi	r24, 0x7F	; 127
    4f8c:	83 30       	cpi	r24, 0x03	; 3
    4f8e:	09 f0       	breq	.+2      	; 0x4f92 <main+0x193c>
    4f90:	4c c0       	rjmp	.+152    	; 0x502a <main+0x19d4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1093
        {
            if (blinkMode == setHr)
    4f92:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    4f96:	01 11       	cpse	r16, r1
    4f98:	22 c0       	rjmp	.+68     	; 0x4fde <main+0x1988>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1094
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
    4f9a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <config+0x3e>
    4f9e:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <config+0x3f>
    4fa2:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <config+0x40>
    4fa6:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4faa:	ac 01       	movw	r20, r24
    4fac:	bd 01       	movw	r22, r26
    4fae:	4c 53       	subi	r20, 0x3C	; 60
    4fb0:	51 09       	sbc	r21, r1
    4fb2:	61 09       	sbc	r22, r1
    4fb4:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    4fb6:	77 fd       	sbrc	r23, 7
    4fb8:	08 c0       	rjmp	.+16     	; 0x4fca <main+0x1974>
    4fba:	40 3a       	cpi	r20, 0xA0	; 160
    4fbc:	25 e0       	ldi	r18, 0x05	; 5
    4fbe:	52 07       	cpc	r21, r18
    4fc0:	61 05       	cpc	r22, r1
    4fc2:	71 05       	cpc	r23, r1
    4fc4:	14 f4       	brge	.+4      	; 0x4fca <main+0x1974>
    4fc6:	db 01       	movw	r26, r22
    4fc8:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1094
    4fca:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <config+0x3e>
    4fce:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <config+0x3f>
    4fd2:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <config+0x40>
    4fd6:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    4fda:	10 e0       	ldi	r17, 0x00	; 0
    4fdc:	d0 ca       	rjmp	.-2656   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1095
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
    4fde:	01 30       	cpi	r16, 0x01	; 1
    4fe0:	09 f0       	breq	.+2      	; 0x4fe4 <main+0x198e>
    4fe2:	33 c4       	rjmp	.+2150   	; 0x584a <main+0x21f4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1096
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
    4fe4:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <config+0x3e>
    4fe8:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <config+0x3f>
    4fec:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <config+0x40>
    4ff0:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <config+0x41>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    4ff4:	ac 01       	movw	r20, r24
    4ff6:	bd 01       	movw	r22, r26
    4ff8:	41 50       	subi	r20, 0x01	; 1
    4ffa:	51 09       	sbc	r21, r1
    4ffc:	61 09       	sbc	r22, r1
    4ffe:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    5000:	77 fd       	sbrc	r23, 7
    5002:	08 c0       	rjmp	.+16     	; 0x5014 <main+0x19be>
    5004:	40 3a       	cpi	r20, 0xA0	; 160
    5006:	35 e0       	ldi	r19, 0x05	; 5
    5008:	53 07       	cpc	r21, r19
    500a:	61 05       	cpc	r22, r1
    500c:	71 05       	cpc	r23, r1
    500e:	14 f4       	brge	.+4      	; 0x5014 <main+0x19be>
    5010:	db 01       	movw	r26, r22
    5012:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1096
    5014:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <config+0x3e>
    5018:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <config+0x3f>
    501c:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <config+0x40>
    5020:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <config+0x41>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5024:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5026:	00 e0       	ldi	r16, 0x00	; 0
    5028:	aa ca       	rjmp	.-2732   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1098
            if (blinkMode == setHr)
                config.PlayerMorTime = addToTime(-60, config.PlayerMorTime);
            else if (blinkMode == setMin)
                config.PlayerMorTime = addToTime(-1, config.PlayerMorTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    502a:	11 30       	cpi	r17, 0x01	; 1
    502c:	09 f0       	breq	.+2      	; 0x5030 <main+0x19da>
    502e:	11 c4       	rjmp	.+2082   	; 0x5852 <main+0x21fc>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1100
        {
            if (blinkMode == setHr)
    5030:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    5034:	88 23       	and	r24, r24
    5036:	09 f4       	brne	.+2      	; 0x503a <main+0x19e4>
    5038:	f3 cb       	rjmp	.-2074   	; 0x4820 <main+0x11ca>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    503a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    503c:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1104
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	09 f0       	breq	.+2      	; 0x5044 <main+0x19ee>
    5042:	9d ca       	rjmp	.-2758   	; 0x457e <main+0xf28>
    5044:	9c ce       	rjmp	.-712    	; 0x4d7e <main+0x1728>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1115
        }
        break;
    }
    case mnuCmdPlrMorDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    5046:	12 30       	cpi	r17, 0x02	; 2
    5048:	09 f0       	breq	.+2      	; 0x504c <main+0x19f6>
    504a:	4c c0       	rjmp	.+152    	; 0x50e4 <main+0x1a8e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1117
        {
            if (blinkMode == setHr)
    504c:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    5050:	01 11       	cpse	r16, r1
    5052:	22 c0       	rjmp	.+68     	; 0x5098 <main+0x1a42>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1118
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
    5054:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <config+0x42>
    5058:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <config+0x43>
    505c:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <config+0x44>
    5060:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5064:	ac 01       	movw	r20, r24
    5066:	bd 01       	movw	r22, r26
    5068:	44 5c       	subi	r20, 0xC4	; 196
    506a:	5f 4f       	sbci	r21, 0xFF	; 255
    506c:	6f 4f       	sbci	r22, 0xFF	; 255
    506e:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    5070:	77 fd       	sbrc	r23, 7
    5072:	08 c0       	rjmp	.+16     	; 0x5084 <main+0x1a2e>
    5074:	40 3a       	cpi	r20, 0xA0	; 160
    5076:	e5 e0       	ldi	r30, 0x05	; 5
    5078:	5e 07       	cpc	r21, r30
    507a:	61 05       	cpc	r22, r1
    507c:	71 05       	cpc	r23, r1
    507e:	14 f4       	brge	.+4      	; 0x5084 <main+0x1a2e>
    5080:	db 01       	movw	r26, r22
    5082:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1118
    5084:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <config+0x42>
    5088:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <config+0x43>
    508c:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <config+0x44>
    5090:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5094:	10 e0       	ldi	r17, 0x00	; 0
    5096:	73 ca       	rjmp	.-2842   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1119
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    5098:	01 30       	cpi	r16, 0x01	; 1
    509a:	09 f0       	breq	.+2      	; 0x509e <main+0x1a48>
    509c:	de c3       	rjmp	.+1980   	; 0x585a <main+0x2204>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1120
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
    509e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <config+0x42>
    50a2:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <config+0x43>
    50a6:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <config+0x44>
    50aa:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    50ae:	ac 01       	movw	r20, r24
    50b0:	bd 01       	movw	r22, r26
    50b2:	4b 5f       	subi	r20, 0xFB	; 251
    50b4:	5f 4f       	sbci	r21, 0xFF	; 255
    50b6:	6f 4f       	sbci	r22, 0xFF	; 255
    50b8:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    50ba:	77 fd       	sbrc	r23, 7
    50bc:	08 c0       	rjmp	.+16     	; 0x50ce <main+0x1a78>
    50be:	40 3a       	cpi	r20, 0xA0	; 160
    50c0:	f5 e0       	ldi	r31, 0x05	; 5
    50c2:	5f 07       	cpc	r21, r31
    50c4:	61 05       	cpc	r22, r1
    50c6:	71 05       	cpc	r23, r1
    50c8:	14 f4       	brge	.+4      	; 0x50ce <main+0x1a78>
    50ca:	db 01       	movw	r26, r22
    50cc:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1120
    50ce:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <config+0x42>
    50d2:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <config+0x43>
    50d6:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <config+0x44>
    50da:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    50de:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    50e0:	00 e0       	ldi	r16, 0x00	; 0
    50e2:	4d ca       	rjmp	.-2918   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1122
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    50e4:	81 2f       	mov	r24, r17
    50e6:	8f 77       	andi	r24, 0x7F	; 127
    50e8:	83 30       	cpi	r24, 0x03	; 3
    50ea:	09 f0       	breq	.+2      	; 0x50ee <main+0x1a98>
    50ec:	4c c0       	rjmp	.+152    	; 0x5186 <main+0x1b30>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1124
        {
            if (blinkMode == setHr)
    50ee:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    50f2:	01 11       	cpse	r16, r1
    50f4:	22 c0       	rjmp	.+68     	; 0x513a <main+0x1ae4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1125
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
    50f6:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <config+0x42>
    50fa:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <config+0x43>
    50fe:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <config+0x44>
    5102:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5106:	ac 01       	movw	r20, r24
    5108:	bd 01       	movw	r22, r26
    510a:	4c 53       	subi	r20, 0x3C	; 60
    510c:	51 09       	sbc	r21, r1
    510e:	61 09       	sbc	r22, r1
    5110:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    5112:	77 fd       	sbrc	r23, 7
    5114:	08 c0       	rjmp	.+16     	; 0x5126 <main+0x1ad0>
    5116:	40 3a       	cpi	r20, 0xA0	; 160
    5118:	25 e0       	ldi	r18, 0x05	; 5
    511a:	52 07       	cpc	r21, r18
    511c:	61 05       	cpc	r22, r1
    511e:	71 05       	cpc	r23, r1
    5120:	14 f4       	brge	.+4      	; 0x5126 <main+0x1ad0>
    5122:	db 01       	movw	r26, r22
    5124:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1125
    5126:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <config+0x42>
    512a:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <config+0x43>
    512e:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <config+0x44>
    5132:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5136:	10 e0       	ldi	r17, 0x00	; 0
    5138:	22 ca       	rjmp	.-3004   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1126
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
    513a:	01 30       	cpi	r16, 0x01	; 1
    513c:	09 f0       	breq	.+2      	; 0x5140 <main+0x1aea>
    513e:	91 c3       	rjmp	.+1826   	; 0x5862 <main+0x220c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1127
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
    5140:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <config+0x42>
    5144:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <config+0x43>
    5148:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <config+0x44>
    514c:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <config+0x45>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5150:	ac 01       	movw	r20, r24
    5152:	bd 01       	movw	r22, r26
    5154:	45 50       	subi	r20, 0x05	; 5
    5156:	51 09       	sbc	r21, r1
    5158:	61 09       	sbc	r22, r1
    515a:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    515c:	77 fd       	sbrc	r23, 7
    515e:	08 c0       	rjmp	.+16     	; 0x5170 <main+0x1b1a>
    5160:	40 3a       	cpi	r20, 0xA0	; 160
    5162:	35 e0       	ldi	r19, 0x05	; 5
    5164:	53 07       	cpc	r21, r19
    5166:	61 05       	cpc	r22, r1
    5168:	71 05       	cpc	r23, r1
    516a:	14 f4       	brge	.+4      	; 0x5170 <main+0x1b1a>
    516c:	db 01       	movw	r26, r22
    516e:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1127
    5170:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <config+0x42>
    5174:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <config+0x43>
    5178:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <config+0x44>
    517c:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <config+0x45>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5180:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5182:	00 e0       	ldi	r16, 0x00	; 0
    5184:	fc c9       	rjmp	.-3080   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1129
            if (blinkMode == setHr)
                config.PlayerMorDur = addToTime(-60, config.PlayerMorDur);
            else if (blinkMode == setMin)
                config.PlayerMorDur = addToTime(-5, config.PlayerMorDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    5186:	11 30       	cpi	r17, 0x01	; 1
    5188:	09 f0       	breq	.+2      	; 0x518c <main+0x1b36>
    518a:	6f c3       	rjmp	.+1758   	; 0x586a <main+0x2214>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1131
        {
            if (blinkMode == setHr)
    518c:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    5190:	88 23       	and	r24, r24
    5192:	09 f4       	brne	.+2      	; 0x5196 <main+0x1b40>
    5194:	45 cb       	rjmp	.-2422   	; 0x4820 <main+0x11ca>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5196:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5198:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1135
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    519a:	81 30       	cpi	r24, 0x01	; 1
    519c:	09 f0       	breq	.+2      	; 0x51a0 <main+0x1b4a>
    519e:	ef c9       	rjmp	.-3106   	; 0x457e <main+0xf28>
    51a0:	ee cd       	rjmp	.-1060   	; 0x4d7e <main+0x1728>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1146
        }
        break;
    }
    case mnuCmdPlrEveOnTime:
    {
        if (btn == BUTTON_UP_PRESSED)
    51a2:	12 30       	cpi	r17, 0x02	; 2
    51a4:	09 f0       	breq	.+2      	; 0x51a8 <main+0x1b52>
    51a6:	4c c0       	rjmp	.+152    	; 0x5240 <main+0x1bea>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1148
        {
            if (blinkMode == setHr)
    51a8:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    51ac:	01 11       	cpse	r16, r1
    51ae:	22 c0       	rjmp	.+68     	; 0x51f4 <main+0x1b9e>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1149
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
    51b0:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <config+0x46>
    51b4:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <config+0x47>
    51b8:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <config+0x48>
    51bc:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    51c0:	ac 01       	movw	r20, r24
    51c2:	bd 01       	movw	r22, r26
    51c4:	44 5c       	subi	r20, 0xC4	; 196
    51c6:	5f 4f       	sbci	r21, 0xFF	; 255
    51c8:	6f 4f       	sbci	r22, 0xFF	; 255
    51ca:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    51cc:	77 fd       	sbrc	r23, 7
    51ce:	08 c0       	rjmp	.+16     	; 0x51e0 <main+0x1b8a>
    51d0:	40 3a       	cpi	r20, 0xA0	; 160
    51d2:	e5 e0       	ldi	r30, 0x05	; 5
    51d4:	5e 07       	cpc	r21, r30
    51d6:	61 05       	cpc	r22, r1
    51d8:	71 05       	cpc	r23, r1
    51da:	14 f4       	brge	.+4      	; 0x51e0 <main+0x1b8a>
    51dc:	db 01       	movw	r26, r22
    51de:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1149
    51e0:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <config+0x46>
    51e4:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <config+0x47>
    51e8:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <config+0x48>
    51ec:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    51f0:	10 e0       	ldi	r17, 0x00	; 0
    51f2:	c5 c9       	rjmp	.-3190   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1150
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    51f4:	01 30       	cpi	r16, 0x01	; 1
    51f6:	09 f0       	breq	.+2      	; 0x51fa <main+0x1ba4>
    51f8:	3c c3       	rjmp	.+1656   	; 0x5872 <main+0x221c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1151
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
    51fa:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <config+0x46>
    51fe:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <config+0x47>
    5202:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <config+0x48>
    5206:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    520a:	ac 01       	movw	r20, r24
    520c:	bd 01       	movw	r22, r26
    520e:	4f 5f       	subi	r20, 0xFF	; 255
    5210:	5f 4f       	sbci	r21, 0xFF	; 255
    5212:	6f 4f       	sbci	r22, 0xFF	; 255
    5214:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    5216:	77 fd       	sbrc	r23, 7
    5218:	08 c0       	rjmp	.+16     	; 0x522a <main+0x1bd4>
    521a:	40 3a       	cpi	r20, 0xA0	; 160
    521c:	f5 e0       	ldi	r31, 0x05	; 5
    521e:	5f 07       	cpc	r21, r31
    5220:	61 05       	cpc	r22, r1
    5222:	71 05       	cpc	r23, r1
    5224:	14 f4       	brge	.+4      	; 0x522a <main+0x1bd4>
    5226:	db 01       	movw	r26, r22
    5228:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1151
    522a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <config+0x46>
    522e:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <config+0x47>
    5232:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <config+0x48>
    5236:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    523a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    523c:	00 e0       	ldi	r16, 0x00	; 0
    523e:	9f c9       	rjmp	.-3266   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1153
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_DOWN_PRESSED)
    5240:	13 30       	cpi	r17, 0x03	; 3
    5242:	09 f0       	breq	.+2      	; 0x5246 <main+0x1bf0>
    5244:	4c c0       	rjmp	.+152    	; 0x52de <main+0x1c88>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1155
        {
            if (blinkMode == setHr)
    5246:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    524a:	01 11       	cpse	r16, r1
    524c:	22 c0       	rjmp	.+68     	; 0x5292 <main+0x1c3c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1156
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
    524e:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <config+0x46>
    5252:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <config+0x47>
    5256:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <config+0x48>
    525a:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    525e:	ac 01       	movw	r20, r24
    5260:	bd 01       	movw	r22, r26
    5262:	4c 53       	subi	r20, 0x3C	; 60
    5264:	51 09       	sbc	r21, r1
    5266:	61 09       	sbc	r22, r1
    5268:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    526a:	77 fd       	sbrc	r23, 7
    526c:	08 c0       	rjmp	.+16     	; 0x527e <main+0x1c28>
    526e:	40 3a       	cpi	r20, 0xA0	; 160
    5270:	25 e0       	ldi	r18, 0x05	; 5
    5272:	52 07       	cpc	r21, r18
    5274:	61 05       	cpc	r22, r1
    5276:	71 05       	cpc	r23, r1
    5278:	14 f4       	brge	.+4      	; 0x527e <main+0x1c28>
    527a:	db 01       	movw	r26, r22
    527c:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1156
    527e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <config+0x46>
    5282:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <config+0x47>
    5286:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <config+0x48>
    528a:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    528e:	10 e0       	ldi	r17, 0x00	; 0
    5290:	76 c9       	rjmp	.-3348   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1157
        }
        else if (btn == BUTTON_DOWN_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
    5292:	01 30       	cpi	r16, 0x01	; 1
    5294:	09 f0       	breq	.+2      	; 0x5298 <main+0x1c42>
    5296:	f1 c2       	rjmp	.+1506   	; 0x587a <main+0x2224>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1158
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
    5298:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <config+0x46>
    529c:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <config+0x47>
    52a0:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <config+0x48>
    52a4:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <config+0x49>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    52a8:	ac 01       	movw	r20, r24
    52aa:	bd 01       	movw	r22, r26
    52ac:	41 50       	subi	r20, 0x01	; 1
    52ae:	51 09       	sbc	r21, r1
    52b0:	61 09       	sbc	r22, r1
    52b2:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    52b4:	77 fd       	sbrc	r23, 7
    52b6:	08 c0       	rjmp	.+16     	; 0x52c8 <main+0x1c72>
    52b8:	40 3a       	cpi	r20, 0xA0	; 160
    52ba:	35 e0       	ldi	r19, 0x05	; 5
    52bc:	53 07       	cpc	r21, r19
    52be:	61 05       	cpc	r22, r1
    52c0:	71 05       	cpc	r23, r1
    52c2:	14 f4       	brge	.+4      	; 0x52c8 <main+0x1c72>
    52c4:	db 01       	movw	r26, r22
    52c6:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1158
    52c8:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <config+0x46>
    52cc:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <config+0x47>
    52d0:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <config+0x48>
    52d4:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <config+0x49>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    52d8:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52da:	00 e0       	ldi	r16, 0x00	; 0
    52dc:	50 c9       	rjmp	.-3424   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1160
            if (blinkMode == setHr)
                config.PlayerEveTime = addToTime(-60, config.PlayerEveTime);
            else if (blinkMode == setMin)
                config.PlayerEveTime = addToTime(-1, config.PlayerEveTime);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    52de:	11 30       	cpi	r17, 0x01	; 1
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <main+0x1c8e>
    52e2:	cf c2       	rjmp	.+1438   	; 0x5882 <main+0x222c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1162
        {
            if (blinkMode == setHr)
    52e4:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    52e8:	88 23       	and	r24, r24
    52ea:	09 f4       	brne	.+2      	; 0x52ee <main+0x1c98>
    52ec:	99 ca       	rjmp	.-2766   	; 0x4820 <main+0x11ca>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    52ee:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    52f0:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1166
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    52f2:	81 30       	cpi	r24, 0x01	; 1
    52f4:	09 f0       	breq	.+2      	; 0x52f8 <main+0x1ca2>
    52f6:	43 c9       	rjmp	.-3450   	; 0x457e <main+0xf28>
    52f8:	42 cd       	rjmp	.-1404   	; 0x4d7e <main+0x1728>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1177
        }
        break;
    }
    case mnuCmdPlrEveDur:
    {
        if (btn == BUTTON_UP_PRESSED)
    52fa:	12 30       	cpi	r17, 0x02	; 2
    52fc:	09 f0       	breq	.+2      	; 0x5300 <main+0x1caa>
    52fe:	4c c0       	rjmp	.+152    	; 0x5398 <main+0x1d42>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1179
        {
            if (blinkMode == setHr)
    5300:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    5304:	01 11       	cpse	r16, r1
    5306:	22 c0       	rjmp	.+68     	; 0x534c <main+0x1cf6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1180
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
    5308:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <config+0x4a>
    530c:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <config+0x4b>
    5310:	a0 91 a9 04 	lds	r26, 0x04A9	; 0x8004a9 <config+0x4c>
    5314:	b0 91 aa 04 	lds	r27, 0x04AA	; 0x8004aa <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5318:	ac 01       	movw	r20, r24
    531a:	bd 01       	movw	r22, r26
    531c:	44 5c       	subi	r20, 0xC4	; 196
    531e:	5f 4f       	sbci	r21, 0xFF	; 255
    5320:	6f 4f       	sbci	r22, 0xFF	; 255
    5322:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    5324:	77 fd       	sbrc	r23, 7
    5326:	08 c0       	rjmp	.+16     	; 0x5338 <main+0x1ce2>
    5328:	40 3a       	cpi	r20, 0xA0	; 160
    532a:	e5 e0       	ldi	r30, 0x05	; 5
    532c:	5e 07       	cpc	r21, r30
    532e:	61 05       	cpc	r22, r1
    5330:	71 05       	cpc	r23, r1
    5332:	14 f4       	brge	.+4      	; 0x5338 <main+0x1ce2>
    5334:	db 01       	movw	r26, r22
    5336:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1180
    5338:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <config+0x4a>
    533c:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <config+0x4b>
    5340:	a0 93 a9 04 	sts	0x04A9, r26	; 0x8004a9 <config+0x4c>
    5344:	b0 93 aa 04 	sts	0x04AA, r27	; 0x8004aa <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5348:	10 e0       	ldi	r17, 0x00	; 0
    534a:	19 c9       	rjmp	.-3534   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1181
    {
        if (btn == BUTTON_UP_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    534c:	01 30       	cpi	r16, 0x01	; 1
    534e:	09 f0       	breq	.+2      	; 0x5352 <main+0x1cfc>
    5350:	9c c2       	rjmp	.+1336   	; 0x588a <main+0x2234>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1182
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
    5352:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <config+0x4a>
    5356:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <config+0x4b>
    535a:	a0 91 a9 04 	lds	r26, 0x04A9	; 0x8004a9 <config+0x4c>
    535e:	b0 91 aa 04 	lds	r27, 0x04AA	; 0x8004aa <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5362:	ac 01       	movw	r20, r24
    5364:	bd 01       	movw	r22, r26
    5366:	4b 5f       	subi	r20, 0xFB	; 251
    5368:	5f 4f       	sbci	r21, 0xFF	; 255
    536a:	6f 4f       	sbci	r22, 0xFF	; 255
    536c:	7f 4f       	sbci	r23, 0xFF	; 255
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    536e:	77 fd       	sbrc	r23, 7
    5370:	08 c0       	rjmp	.+16     	; 0x5382 <main+0x1d2c>
    5372:	40 3a       	cpi	r20, 0xA0	; 160
    5374:	f5 e0       	ldi	r31, 0x05	; 5
    5376:	5f 07       	cpc	r21, r31
    5378:	61 05       	cpc	r22, r1
    537a:	71 05       	cpc	r23, r1
    537c:	14 f4       	brge	.+4      	; 0x5382 <main+0x1d2c>
    537e:	db 01       	movw	r26, r22
    5380:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1182
    5382:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <config+0x4a>
    5386:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <config+0x4b>
    538a:	a0 93 a9 04 	sts	0x04A9, r26	; 0x8004a9 <config+0x4c>
    538e:	b0 93 aa 04 	sts	0x04AA, r27	; 0x8004aa <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5392:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5394:	00 e0       	ldi	r16, 0x00	; 0
    5396:	f3 c8       	rjmp	.-3610   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1184
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    5398:	81 2f       	mov	r24, r17
    539a:	8f 77       	andi	r24, 0x7F	; 127
    539c:	83 30       	cpi	r24, 0x03	; 3
    539e:	09 f0       	breq	.+2      	; 0x53a2 <main+0x1d4c>
    53a0:	4c c0       	rjmp	.+152    	; 0x543a <main+0x1de4>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1186
        {
            if (blinkMode == setHr)
    53a2:	00 91 c1 03 	lds	r16, 0x03C1	; 0x8003c1 <blinkMode>
    53a6:	01 11       	cpse	r16, r1
    53a8:	22 c0       	rjmp	.+68     	; 0x53ee <main+0x1d98>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1187
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
    53aa:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <config+0x4a>
    53ae:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <config+0x4b>
    53b2:	a0 91 a9 04 	lds	r26, 0x04A9	; 0x8004a9 <config+0x4c>
    53b6:	b0 91 aa 04 	lds	r27, 0x04AA	; 0x8004aa <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    53ba:	ac 01       	movw	r20, r24
    53bc:	bd 01       	movw	r22, r26
    53be:	4c 53       	subi	r20, 0x3C	; 60
    53c0:	51 09       	sbc	r21, r1
    53c2:	61 09       	sbc	r22, r1
    53c4:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    53c6:	77 fd       	sbrc	r23, 7
    53c8:	08 c0       	rjmp	.+16     	; 0x53da <main+0x1d84>
    53ca:	40 3a       	cpi	r20, 0xA0	; 160
    53cc:	25 e0       	ldi	r18, 0x05	; 5
    53ce:	52 07       	cpc	r21, r18
    53d0:	61 05       	cpc	r22, r1
    53d2:	71 05       	cpc	r23, r1
    53d4:	14 f4       	brge	.+4      	; 0x53da <main+0x1d84>
    53d6:	db 01       	movw	r26, r22
    53d8:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1187
    53da:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <config+0x4a>
    53de:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <config+0x4b>
    53e2:	a0 93 a9 04 	sts	0x04A9, r26	; 0x8004a9 <config+0x4c>
    53e6:	b0 93 aa 04 	sts	0x04AA, r27	; 0x8004aa <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    53ea:	10 e0       	ldi	r17, 0x00	; 0
    53ec:	c8 c8       	rjmp	.-3696   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1188
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
    53ee:	01 30       	cpi	r16, 0x01	; 1
    53f0:	09 f0       	breq	.+2      	; 0x53f4 <main+0x1d9e>
    53f2:	4f c2       	rjmp	.+1182   	; 0x5892 <main+0x223c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1189
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
    53f4:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <config+0x4a>
    53f8:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <config+0x4b>
    53fc:	a0 91 a9 04 	lds	r26, 0x04A9	; 0x8004a9 <config+0x4c>
    5400:	b0 91 aa 04 	lds	r27, 0x04AA	; 0x8004aa <config+0x4d>
addToTime():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:136
  return buf;
}

long addToTime(short delta, long timeval, long minval, long maxval)
{
  long newtime = timeval + delta;
    5404:	ac 01       	movw	r20, r24
    5406:	bd 01       	movw	r22, r26
    5408:	45 50       	subi	r20, 0x05	; 5
    540a:	51 09       	sbc	r21, r1
    540c:	61 09       	sbc	r22, r1
    540e:	71 09       	sbc	r23, r1
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:138

  if (newtime >= minval && newtime <= maxval)
    5410:	77 fd       	sbrc	r23, 7
    5412:	08 c0       	rjmp	.+16     	; 0x5424 <main+0x1dce>
    5414:	40 3a       	cpi	r20, 0xA0	; 160
    5416:	35 e0       	ldi	r19, 0x05	; 5
    5418:	53 07       	cpc	r21, r19
    541a:	61 05       	cpc	r22, r1
    541c:	71 05       	cpc	r23, r1
    541e:	14 f4       	brge	.+4      	; 0x5424 <main+0x1dce>
    5420:	db 01       	movw	r26, r22
    5422:	ca 01       	movw	r24, r20
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1189
    5424:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <config+0x4a>
    5428:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <config+0x4b>
    542c:	a0 93 a9 04 	sts	0x04A9, r26	; 0x8004a9 <config+0x4c>
    5430:	b0 93 aa 04 	sts	0x04AA, r27	; 0x8004aa <config+0x4d>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    5434:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5436:	00 e0       	ldi	r16, 0x00	; 0
    5438:	a2 c8       	rjmp	.-3772   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1191
            if (blinkMode == setHr)
                config.PlayerEveDur = addToTime(-60, config.PlayerEveDur);
            else if (blinkMode == setMin)
                config.PlayerEveDur = addToTime(-5, config.PlayerEveDur);
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    543a:	11 30       	cpi	r17, 0x01	; 1
    543c:	09 f0       	breq	.+2      	; 0x5440 <main+0x1dea>
    543e:	2d c2       	rjmp	.+1114   	; 0x589a <main+0x2244>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1193
        {
            if (blinkMode == setHr)
    5440:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    5444:	88 23       	and	r24, r24
    5446:	09 f4       	brne	.+2      	; 0x544a <main+0x1df4>
    5448:	eb c9       	rjmp	.-3114   	; 0x4820 <main+0x11ca>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    544a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    544c:	00 e0       	ldi	r16, 0x00	; 0
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1197
        {
            if (blinkMode == setHr)
            {
                blinkMode = setMin;
            }
            else if (blinkMode == setMin)
    544e:	81 30       	cpi	r24, 0x01	; 1
    5450:	09 f0       	breq	.+2      	; 0x5454 <main+0x1dfe>
    5452:	95 c8       	rjmp	.-3798   	; 0x457e <main+0xf28>
    5454:	94 cc       	rjmp	.-1752   	; 0x4d7e <main+0x1728>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1209
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    5456:	81 2f       	mov	r24, r17
    5458:	8f 77       	andi	r24, 0x7F	; 127
    545a:	82 30       	cpi	r24, 0x02	; 2
    545c:	61 f4       	brne	.+24     	; 0x5476 <main+0x1e20>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1211
        {
            config.SerialNo = ++config.SerialNo;
    545e:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <config+0x20>
    5462:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <config+0x21>
    5466:	01 96       	adiw	r24, 0x01	; 1
    5468:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <config+0x21>
    546c:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <config+0x20>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1208
        }
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
    5470:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5472:	00 e0       	ldi	r16, 0x00	; 0
    5474:	84 c8       	rjmp	.-3832   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1213
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.SerialNo = ++config.SerialNo;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    5476:	83 30       	cpi	r24, 0x03	; 3
    5478:	61 f4       	brne	.+24     	; 0x5492 <main+0x1e3c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1215
        {
            config.SerialNo = --config.SerialNo;
    547a:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <config+0x20>
    547e:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <config+0x21>
    5482:	01 97       	sbiw	r24, 0x01	; 1
    5484:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <config+0x21>
    5488:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <config+0x20>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1208
        }
        break;
    }
    case mnuCmdSerial:
    {
        configChanged = true;
    548c:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    548e:	00 e0       	ldi	r16, 0x00	; 0
    5490:	76 c8       	rjmp	.-3860   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1217
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.SerialNo = --config.SerialNo;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    5492:	11 30       	cpi	r17, 0x01	; 1
    5494:	09 f4       	brne	.+2      	; 0x5498 <main+0x1e42>
    5496:	18 ca       	rjmp	.-3024   	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5498:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    549a:	00 e0       	ldi	r16, 0x00	; 0
    549c:	70 c8       	rjmp	.-3872   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1231
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    549e:	81 2f       	mov	r24, r17
    54a0:	8f 77       	andi	r24, 0x7F	; 127
    54a2:	82 30       	cpi	r24, 0x02	; 2
    54a4:	61 f4       	brne	.+24     	; 0x54be <main+0x1e68>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1233
        {
            config.DataYear = ++config.DataYear;
    54a6:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <config+0x1e>
    54aa:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <config+0x1f>
    54ae:	01 96       	adiw	r24, 0x01	; 1
    54b0:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <config+0x1f>
    54b4:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <config+0x1e>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1230
        }
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
    54b8:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    54ba:	00 e0       	ldi	r16, 0x00	; 0
    54bc:	60 c8       	rjmp	.-3904   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1235
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            config.DataYear = ++config.DataYear;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    54be:	83 30       	cpi	r24, 0x03	; 3
    54c0:	91 f4       	brne	.+36     	; 0x54e6 <main+0x1e90>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1237
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
    54c2:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <config+0x1e>
    54c6:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <config+0x1f>
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	86 3e       	cpi	r24, 0xE6	; 230
    54ce:	67 e0       	ldi	r22, 0x07	; 7
    54d0:	96 07       	cpc	r25, r22
    54d2:	14 f4       	brge	.+4      	; 0x54d8 <main+0x1e82>
    54d4:	86 ee       	ldi	r24, 0xE6	; 230
    54d6:	97 e0       	ldi	r25, 0x07	; 7
    54d8:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <config+0x1f>
    54dc:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <config+0x1e>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1230
        }
        break;
    }
    case mnuCmdYear:
    {
        configChanged = true;
    54e0:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    54e2:	00 e0       	ldi	r16, 0x00	; 0
    54e4:	4c c8       	rjmp	.-3944   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1239
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            config.DataYear = --config.DataYear < 2022 ? 2022 : config.DataYear;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    54e6:	11 30       	cpi	r17, 0x01	; 1
    54e8:	09 f4       	brne	.+2      	; 0x54ec <main+0x1e96>
    54ea:	ee c9       	rjmp	.-3108   	; 0x48c8 <main+0x1272>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    54ec:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    54ee:	00 e0       	ldi	r16, 0x00	; 0
    54f0:	46 c8       	rjmp	.-3956   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1253
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    54f2:	81 2f       	mov	r24, r17
    54f4:	8f 77       	andi	r24, 0x7F	; 127
    54f6:	82 30       	cpi	r24, 0x02	; 2
    54f8:	89 f4       	brne	.+34     	; 0x551c <main+0x1ec6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1255
        {
            AlarmTimeCursor = ++AlarmTimeCursor > 23 ? 0 : AlarmTimeCursor;
    54fa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <AlarmTimeCursor>
    54fe:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    5502:	01 96       	adiw	r24, 0x01	; 1
    5504:	88 31       	cpi	r24, 0x18	; 24
    5506:	91 05       	cpc	r25, r1
    5508:	14 f0       	brlt	.+4      	; 0x550e <main+0x1eb8>
main():
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    550e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <AlarmTimeCursor+0x1>
    5512:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <AlarmTimeCursor>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1252
        }
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
    5516:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5518:	00 e0       	ldi	r16, 0x00	; 0
    551a:	31 c8       	rjmp	.-3998   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1257
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            AlarmTimeCursor = ++AlarmTimeCursor > 23 ? 0 : AlarmTimeCursor;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    551c:	83 30       	cpi	r24, 0x03	; 3
    551e:	81 f4       	brne	.+32     	; 0x5540 <main+0x1eea>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1259
        {
            AlarmTimeCursor = --AlarmTimeCursor < 0 ? 23 : AlarmTimeCursor;
    5520:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <AlarmTimeCursor>
    5524:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    5528:	01 97       	sbiw	r24, 0x01	; 1
    552a:	97 ff       	sbrs	r25, 7
    552c:	02 c0       	rjmp	.+4      	; 0x5532 <main+0x1edc>
main():
    552e:	87 e1       	ldi	r24, 0x17	; 23
    5530:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    5532:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <AlarmTimeCursor+0x1>
    5536:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <AlarmTimeCursor>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1252
        }
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
    553a:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    553c:	00 e0       	ldi	r16, 0x00	; 0
    553e:	1f c8       	rjmp	.-4034   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1261
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            AlarmTimeCursor = --AlarmTimeCursor < 0 ? 23 : AlarmTimeCursor;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    5540:	11 30       	cpi	r17, 0x01	; 1
    5542:	09 f0       	breq	.+2      	; 0x5546 <main+0x1ef0>
    5544:	ae c1       	rjmp	.+860    	; 0x58a2 <main+0x224c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1263
        {
            config.AlarmTime[AlarmTimeCursor] = !config.AlarmTime[AlarmTimeCursor];
    5546:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <AlarmTimeCursor>
    554a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <AlarmTimeCursor+0x1>
    554e:	e5 55       	subi	r30, 0x55	; 85
    5550:	fb 4f       	sbci	r31, 0xFB	; 251
    5552:	80 81       	ld	r24, Z
    5554:	81 27       	eor	r24, r17
    5556:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1264
            config.save();
    5558:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    555c:	00 e0       	ldi	r16, 0x00	; 0
    555e:	0f c8       	rjmp	.-4066   	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1272
        break;
    }
    case mnuCmdPanchangamTime:
    {
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
    5560:	81 2f       	mov	r24, r17
    5562:	8f 77       	andi	r24, 0x7F	; 127
    5564:	82 30       	cpi	r24, 0x02	; 2
    5566:	91 f4       	brne	.+36     	; 0x558c <main+0x1f36>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1274
        {
            PanchangamCursor = ++PanchangamCursor > 6 ? 0 : PanchangamCursor;
    5568:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PanchangamCursor>
    556c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    5570:	01 96       	adiw	r24, 0x01	; 1
    5572:	87 30       	cpi	r24, 0x07	; 7
    5574:	91 05       	cpc	r25, r1
    5576:	14 f0       	brlt	.+4      	; 0x557c <main+0x1f26>
main():
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	80 e0       	ldi	r24, 0x00	; 0
processMenuCommand():
    557c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PanchangamCursor+0x1>
    5580:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PanchangamCursor>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1271
        }
        break;
    }
    case mnuCmdPanchangamTime:
    {
        configChanged = true;
    5584:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5586:	00 e0       	ldi	r16, 0x00	; 0
    5588:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1276
        configChanged = true;
        if (btn == BUTTON_UP_PRESSED || btn == BUTTON_UP_LONG_PRESSED)
        {
            PanchangamCursor = ++PanchangamCursor > 6 ? 0 : PanchangamCursor;
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
    558c:	83 30       	cpi	r24, 0x03	; 3
    558e:	89 f4       	brne	.+34     	; 0x55b2 <main+0x1f5c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1278
        {
            PanchangamCursor = --PanchangamCursor < 0 ? 6 : PanchangamCursor;
    5590:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PanchangamCursor>
    5594:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    5598:	01 97       	sbiw	r24, 0x01	; 1
    559a:	97 ff       	sbrs	r25, 7
    559c:	02 c0       	rjmp	.+4      	; 0x55a2 <main+0x1f4c>
main():
    559e:	86 e0       	ldi	r24, 0x06	; 6
    55a0:	90 e0       	ldi	r25, 0x00	; 0
processMenuCommand():
    55a2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PanchangamCursor+0x1>
    55a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PanchangamCursor>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1271
        }
        break;
    }
    case mnuCmdPanchangamTime:
    {
        configChanged = true;
    55aa:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    55ac:	00 e0       	ldi	r16, 0x00	; 0
    55ae:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1280
        }
        else if (btn == BUTTON_DOWN_PRESSED || btn == BUTTON_DOWN_LONG_PRESSED)
        {
            PanchangamCursor = --PanchangamCursor < 0 ? 6 : PanchangamCursor;
        }
        else if (btn == BUTTON_SELECT_PRESSED)
    55b2:	11 30       	cpi	r17, 0x01	; 1
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <main+0x1f62>
    55b6:	79 c1       	rjmp	.+754    	; 0x58aa <main+0x2254>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1282
        {
            config.AlarmTime[PanchangamCursor] = !config.AlarmTime[PanchangamCursor];
    55b8:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <PanchangamCursor>
    55bc:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <PanchangamCursor+0x1>
    55c0:	e5 55       	subi	r30, 0x55	; 85
    55c2:	fb 4f       	sbci	r31, 0xFB	; 251
    55c4:	80 81       	ld	r24, Z
    55c6:	81 27       	eor	r24, r17
    55c8:	80 83       	st	Z, r24
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1283
            config.save();
    55ca:	0e 94 19 0c 	call	0x1832	; 0x1832 <Config::save() [clone .constprop.26]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    55ce:	00 e0       	ldi	r16, 0x00	; 0
    55d0:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1291
        break;
    }

    case mnuCmdReset:
    {
        if (btn == BUTTON_SELECT_LONG_PRESSED)
    55d4:	11 38       	cpi	r17, 0x81	; 129
    55d6:	09 f0       	breq	.+2      	; 0x55da <main+0x1f84>
    55d8:	f1 c0       	rjmp	.+482    	; 0x57bc <main+0x2166>
setDefaults():
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:14
                       "12PM","1PM", "2PM", "3PM", "4PM","5PM", "6PM", "7PM", "8PM", "9PM", "10PM", "11PM",};

const char* Panchangam[] = {"5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM"};
void Config::setDefaults()
{
  strcpy(appNameAndVersion, NameAndVersion);
    55da:	6b e2       	ldi	r22, 0x2B	; 43
    55dc:	71 e0       	ldi	r23, 0x01	; 1
    55de:	8d e5       	ldi	r24, 0x5D	; 93
    55e0:	94 e0       	ldi	r25, 0x04	; 4
    55e2:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcpy>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:15
  Song1_Count = 100;
    55e6:	84 e6       	ldi	r24, 0x64	; 100
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <config+0x1b>
    55ee:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <config+0x1a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:16
  Song2_Count = 100;
    55f2:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <config+0x1d>
    55f6:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <config+0x1c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:17
  startTime = 5; //5AM
    55fa:	85 e0       	ldi	r24, 0x05	; 5
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <config+0x10>
    5602:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <config+0xf>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:18
  endTime = 22; // 10PM
    5606:	86 e1       	ldi	r24, 0x16	; 22
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <config+0x12>
    560e:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <config+0x11>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:19
  backLightDur = 20; //Sec
    5612:	84 e1       	ldi	r24, 0x14	; 20
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <config+0x14>
    561a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <config+0x13>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:20
  vol = 20;
    561e:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <config+0x16>
    5622:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <config+0x15>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:21
  MorSong1Time = 3;
    5626:	83 e0       	ldi	r24, 0x03	; 3
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <config+0x23>
    562e:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <config+0x22>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:22
  MorSong2Time = 3;
    5632:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <config+0x25>
    5636:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <config+0x24>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:23
  EveSong2Time = 3;
    563a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <config+0x29>
    563e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <config+0x28>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:24
  EveSong1Time = 3;
    5642:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <config+0x27>
    5646:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <config+0x26>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:25
  MorSongNo = 1;
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <config+0x2b>
    5652:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <config+0x2a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:26
  EveSongNo = 2;
    5656:	82 e0       	ldi	r24, 0x02	; 2
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <config+0x2d>
    565e:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <config+0x2c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:28

  Light1On = 1079;
    5662:	87 e3       	ldi	r24, 0x37	; 55
    5664:	94 e0       	ldi	r25, 0x04	; 4
    5666:	a0 e0       	ldi	r26, 0x00	; 0
    5668:	b0 e0       	ldi	r27, 0x00	; 0
    566a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <config+0x2e>
    566e:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <config+0x2f>
    5672:	a0 93 8d 04 	sts	0x048D, r26	; 0x80048d <config+0x30>
    5676:	b0 93 8e 04 	sts	0x048E, r27	; 0x80048e <config+0x31>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:29
  Light1Off = 359;
    567a:	87 e6       	ldi	r24, 0x67	; 103
    567c:	91 e0       	ldi	r25, 0x01	; 1
    567e:	a0 e0       	ldi	r26, 0x00	; 0
    5680:	b0 e0       	ldi	r27, 0x00	; 0
    5682:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <config+0x32>
    5686:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <config+0x33>
    568a:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <config+0x34>
    568e:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <config+0x35>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:30
  Light2On = 0;
    5692:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <config+0x36>
    5696:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <config+0x37>
    569a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <config+0x38>
    569e:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <config+0x39>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:31
  Light2Off = 0;
    56a2:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <config+0x3a>
    56a6:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <config+0x3b>
    56aa:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <config+0x3c>
    56ae:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <config+0x3d>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:32
  PlayerMorTime = 300;
    56b2:	8c e2       	ldi	r24, 0x2C	; 44
    56b4:	91 e0       	ldi	r25, 0x01	; 1
    56b6:	a0 e0       	ldi	r26, 0x00	; 0
    56b8:	b0 e0       	ldi	r27, 0x00	; 0
    56ba:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <config+0x3e>
    56be:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <config+0x3f>
    56c2:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <config+0x40>
    56c6:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <config+0x41>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:33
  PlayerMorDur= 115;
    56ca:	20 92 9f 04 	sts	0x049F, r2	; 0x80049f <config+0x42>
    56ce:	30 92 a0 04 	sts	0x04A0, r3	; 0x8004a0 <config+0x43>
    56d2:	40 92 a1 04 	sts	0x04A1, r4	; 0x8004a1 <config+0x44>
    56d6:	50 92 a2 04 	sts	0x04A2, r5	; 0x8004a2 <config+0x45>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:34
  PlayerEveTime = 1020;
    56da:	8c ef       	ldi	r24, 0xFC	; 252
    56dc:	93 e0       	ldi	r25, 0x03	; 3
    56de:	a0 e0       	ldi	r26, 0x00	; 0
    56e0:	b0 e0       	ldi	r27, 0x00	; 0
    56e2:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <config+0x46>
    56e6:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <config+0x47>
    56ea:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <config+0x48>
    56ee:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <config+0x49>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:35
  PlayerEveDur = 115;
    56f2:	20 92 a7 04 	sts	0x04A7, r2	; 0x8004a7 <config+0x4a>
    56f6:	30 92 a8 04 	sts	0x04A8, r3	; 0x8004a8 <config+0x4b>
    56fa:	40 92 a9 04 	sts	0x04A9, r4	; 0x8004a9 <config+0x4c>
    56fe:	50 92 aa 04 	sts	0x04AA, r5	; 0x8004aa <config+0x4d>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:37

  AutoPlay = 0;
    5702:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <config+0x17>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:38
  AutoLight = 0;
    5706:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <config+0x18>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:39
  SchlZone = 0;
    570a:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <config+0x19>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:41

  AlarmTime[0] = 0;
    570e:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <config+0x4e>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:42
  AlarmTime[1] = 0;
    5712:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <config+0x4f>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:43
  AlarmTime[2] = 0;
    5716:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <config+0x50>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:44
  AlarmTime[3] = 0;
    571a:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <config+0x51>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:45
  AlarmTime[4] = 0;
    571e:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <config+0x52>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:46
  AlarmTime[5] = 1;
    5722:	81 e0       	ldi	r24, 0x01	; 1
    5724:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <config+0x53>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:47
  AlarmTime[6] = 1;
    5728:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <config+0x54>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:48
  AlarmTime[7] = 1;
    572c:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <config+0x55>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:49
  AlarmTime[8] = 1;
    5730:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <config+0x56>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:50
  AlarmTime[9] = 1;
    5734:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <config+0x57>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:51
  AlarmTime[10] = 1;
    5738:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <config+0x58>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:52
  AlarmTime[11] = 1;
    573c:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <config+0x59>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:53
  AlarmTime[12] = 1;
    5740:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <config+0x5a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:54
  AlarmTime[13] = 1;
    5744:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <config+0x5b>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:55
  AlarmTime[14] = 1;
    5748:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <config+0x5c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:56
  AlarmTime[15] = 1;
    574c:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <config+0x5d>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:57
  AlarmTime[16] = 1;
    5750:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <config+0x5e>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:58
  AlarmTime[17] = 1;
    5754:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <config+0x5f>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:59
  AlarmTime[18] = 1;
    5758:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <config+0x60>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:60
  AlarmTime[19] = 1;
    575c:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <config+0x61>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:61
  AlarmTime[20] = 1;
    5760:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <config+0x62>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:62
  AlarmTime[21] = 1;
    5764:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <config+0x63>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:63
  AlarmTime[22] = 1;
    5768:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <config+0x64>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:64
  AlarmTime[23] = 0;
    576c:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <config+0x65>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:66
  
  PanchangamTime[0] = 0;
    5770:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <config+0x66>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:67
  PanchangamTime[1] = 1;
    5774:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <config+0x67>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:68
  PanchangamTime[2] = 0;
    5778:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <config+0x68>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:69
  PanchangamTime[3] = 1;
    577c:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <config+0x69>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:70
  PanchangamTime[4] = 0;
    5780:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <config+0x6a>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:71
  PanchangamTime[5] = 1;
    5784:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <config+0x6b>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:72
  PanchangamTime[6] = 0;
    5788:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <config+0x6c>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:74

  SerialNo = 315;
    578c:	8b e3       	ldi	r24, 0x3B	; 59
    578e:	91 e0       	ldi	r25, 0x01	; 1
    5790:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <config+0x21>
    5794:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <config+0x20>
e:\Arduino\Arduino Git\ChantBellV3.3/Config.cpp:75
  DataYear = 2022;
    5798:	86 ee       	ldi	r24, 0xE6	; 230
    579a:	97 e0       	ldi	r25, 0x07	; 7
    579c:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <config+0x1f>
    57a0:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <config+0x1e>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1294
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
    57a4:	61 e0       	ldi	r22, 0x01	; 1
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1295
            lcd.print("Defaults loaded");
    57ac:	89 e7       	ldi	r24, 0x79	; 121
    57ae:	92 e0       	ldi	r25, 0x02	; 2
    57b0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    57b4:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57b6:	00 e0       	ldi	r16, 0x00	; 0
    57b8:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1297
        {
            config.setDefaults();
            lcd.setCursor(1, 1);
            lcd.print("Defaults loaded");
        }
        else if (btn == BUTTON_SELECT_LONG_RELEASE)
    57bc:	01 e0       	ldi	r16, 0x01	; 1
    57be:	11 3c       	cpi	r17, 0xC1	; 193
    57c0:	09 f0       	breq	.+2      	; 0x57c4 <main+0x216e>
    57c2:	00 e0       	ldi	r16, 0x00	; 0
main():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:707
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    byte configChanged = false;
    57c4:	10 e0       	ldi	r17, 0x00	; 0
    57c6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
    57ca:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57cc:	00 e0       	ldi	r16, 0x00	; 0
    57ce:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    57d2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57d4:	00 e0       	ldi	r16, 0x00	; 0
    57d6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    57da:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57dc:	00 e0       	ldi	r16, 0x00	; 0
    57de:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    57e2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57e4:	00 e0       	ldi	r16, 0x00	; 0
    57e6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    57ea:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57ec:	00 e0       	ldi	r16, 0x00	; 0
    57ee:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    57f2:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57f4:	00 e0       	ldi	r16, 0x00	; 0
    57f6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    57fa:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    57fc:	00 e0       	ldi	r16, 0x00	; 0
    57fe:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5802:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5804:	00 e0       	ldi	r16, 0x00	; 0
    5806:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    580a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    580c:	00 e0       	ldi	r16, 0x00	; 0
    580e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5812:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5814:	00 e0       	ldi	r16, 0x00	; 0
    5816:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    581a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    581c:	00 e0       	ldi	r16, 0x00	; 0
    581e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5822:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5824:	00 e0       	ldi	r16, 0x00	; 0
    5826:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    582a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    582c:	00 e0       	ldi	r16, 0x00	; 0
    582e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5832:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5834:	00 e0       	ldi	r16, 0x00	; 0
    5836:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    583a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    583c:	00 e0       	ldi	r16, 0x00	; 0
    583e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5842:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5844:	00 e0       	ldi	r16, 0x00	; 0
    5846:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    584a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    584c:	00 e0       	ldi	r16, 0x00	; 0
    584e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5852:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5854:	00 e0       	ldi	r16, 0x00	; 0
    5856:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    585a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    585c:	00 e0       	ldi	r16, 0x00	; 0
    585e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5862:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5864:	00 e0       	ldi	r16, 0x00	; 0
    5866:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    586a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    586c:	00 e0       	ldi	r16, 0x00	; 0
    586e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5872:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5874:	00 e0       	ldi	r16, 0x00	; 0
    5876:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    587a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    587c:	00 e0       	ldi	r16, 0x00	; 0
    587e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5882:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5884:	00 e0       	ldi	r16, 0x00	; 0
    5886:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    588a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    588c:	00 e0       	ldi	r16, 0x00	; 0
    588e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    5892:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    5894:	00 e0       	ldi	r16, 0x00	; 0
    5896:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:913
        {
            complete = true;
        }
        else
        {
            configChanged = false;
    589a:	10 e0       	ldi	r17, 0x00	; 0
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    589c:	00 e0       	ldi	r16, 0x00	; 0
    589e:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1252
        }
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
    58a2:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    58a4:	00 e0       	ldi	r16, 0x00	; 0
    58a6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1252
        }
        break;
    }
    case mnuCmdAlarmTime:
    {
        configChanged = true;
    58aa:	11 e0       	ldi	r17, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:706
    lcd.print(fmt(strbuf, 7, "  ", dat, "-", mon, "-", year, "   "));
}

byte processMenuCommand(byte cmdId)
{
    byte complete = false; // set to true when menu command processing complete.
    58ac:	00 e0       	ldi	r16, 0x00	; 0
    58ae:	0c 94 bf 22 	jmp	0x457e	; 0x457e <main+0xf28>
processMenuCommand():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1311
    {
        complete = true;
        lcd.setCursor(1, 1);
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    }
    else if (configChanged)
    58b2:	11 23       	and	r17, r17
    58b4:	71 f0       	breq	.+28     	; 0x58d2 <main+0x227c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1313
    {
        lcd.setCursor(1, 1);
    58b6:	61 e0       	ldi	r22, 0x01	; 1
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1314
        lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    58be:	8f 2d       	mov	r24, r15
    58c0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    58c4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    58c8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
    58cc:	10 e0       	ldi	r17, 0x00	; 0
    58ce:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <main+0xf50>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1318
    }
    else
    {
        if (millis() - timr_Time > 300)
    58d2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    58d6:	80 90 c7 03 	lds	r8, 0x03C7	; 0x8003c7 <timr_Time>
    58da:	90 90 c8 03 	lds	r9, 0x03C8	; 0x8003c8 <timr_Time+0x1>
    58de:	a0 90 c9 03 	lds	r10, 0x03C9	; 0x8003c9 <timr_Time+0x2>
    58e2:	b0 90 ca 03 	lds	r11, 0x03CA	; 0x8003ca <timr_Time+0x3>
    58e6:	68 19       	sub	r22, r8
    58e8:	79 09       	sbc	r23, r9
    58ea:	8a 09       	sbc	r24, r10
    58ec:	9b 09       	sbc	r25, r11
    58ee:	6d 32       	cpi	r22, 0x2D	; 45
    58f0:	71 40       	sbci	r23, 0x01	; 1
    58f2:	81 05       	cpc	r24, r1
    58f4:	91 05       	cpc	r25, r1
    58f6:	10 f4       	brcc	.+4      	; 0x58fc <main+0x22a6>
    58f8:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <main+0xf50>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1320
        {
            if (blink)
    58fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <blink>
    5900:	88 23       	and	r24, r24
    5902:	c9 f0       	breq	.+50     	; 0x5936 <main+0x22e0>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1322
            {
                lcd.setCursor(1, 1);
    5904:	61 e0       	ldi	r22, 0x01	; 1
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1323
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
    590c:	8f 2d       	mov	r24, r15
    590e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Config::getFormattedStr(unsigned char) [clone .constprop.94]>
    5912:	0e 94 a9 0b 	call	0x1752	; 0x1752 <rpad(char*, char const*, char, unsigned char) [clone .constprop.99]>
    5916:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Print::print(char const*) [clone .constprop.100]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1324
                blink = false;
    591a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1355
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
                    blink = true;
                }
            }
            timr_Time = millis();
    591e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <millis>
    5922:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <timr_Time>
    5926:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <timr_Time+0x1>
    592a:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timr_Time+0x2>
    592e:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timr_Time+0x3>
    5932:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <main+0xf50>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1328
                lcd.print(rpad(strbuf, config.getFormattedStr(cmdId)));
                blink = false;
            }
            else
            {
                if (cmdId == mnuCmdSetTime ||
    5936:	b3 e0       	ldi	r27, 0x03	; 3
    5938:	fb 16       	cp	r15, r27
    593a:	41 f0       	breq	.+16     	; 0x594c <main+0x22f6>
    593c:	89 ee       	ldi	r24, 0xE9	; 233
    593e:	8f 0d       	add	r24, r15
    5940:	82 30       	cpi	r24, 0x02	; 2
    5942:	20 f0       	brcs	.+8      	; 0x594c <main+0x22f6>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1330
                    cmdId == mnuCmdLt1OnTime ||
                    cmdId == mnuCmdLt1OffTime ||
    5944:	86 ee       	ldi	r24, 0xE6	; 230
    5946:	8f 0d       	add	r24, r15
    5948:	84 30       	cpi	r24, 0x04	; 4
    594a:	a8 f4       	brcc	.+42     	; 0x5976 <main+0x2320>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1336
                    cmdId == mnuCmdPlrMorOnTime ||
                    cmdId == mnuCmdPlrMorDur ||
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
    594c:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    5950:	81 11       	cpse	r24, r1
    5952:	0c c0       	rjmp	.+24     	; 0x596c <main+0x2316>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1337
                        lcd.setCursor(1, 1);
    5954:	61 e0       	ldi	r22, 0x01	; 1
    5956:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1339
                    if (blinkMode == setMin)
                        lcd.setCursor(4, 1);
    5958:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1340
                    lcd.print(F("  "));
    595c:	87 e6       	ldi	r24, 0x67	; 103
    595e:	93 e0       	ldi	r25, 0x03	; 3
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1351
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
                    lcd.print(F("  "));
    5960:	0e 94 1f 08 	call	0x103e	; 0x103e <Print::print(__FlashStringHelper const*) [clone .constprop.75]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1352
                    blink = true;
    5964:	81 e0       	ldi	r24, 0x01	; 1
    5966:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <blink>
    596a:	d9 cf       	rjmp	.-78     	; 0x591e <main+0x22c8>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1338
                    cmdId == mnuCmdPlrEveOnTime ||
                    cmdId == mnuCmdPlrEveDur)
                {
                    if (blinkMode == setHr)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMin)
    596c:	81 30       	cpi	r24, 0x01	; 1
    596e:	b1 f7       	brne	.-20     	; 0x595c <main+0x2306>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1339
                        lcd.setCursor(4, 1);
    5970:	61 e0       	ldi	r22, 0x01	; 1
    5972:	84 e0       	ldi	r24, 0x04	; 4
    5974:	f1 cf       	rjmp	.-30     	; 0x5958 <main+0x2302>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1343
                    lcd.print(F("  "));
                    blink = true;
                }
                else if (cmdId == mnuCmdSetDate)
    5976:	e2 e0       	ldi	r30, 0x02	; 2
    5978:	fe 12       	cpse	r15, r30
    597a:	d1 cf       	rjmp	.-94     	; 0x591e <main+0x22c8>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1345
                {
                    if (blinkMode == setDate)
    597c:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blinkMode>
    5980:	82 30       	cpi	r24, 0x02	; 2
    5982:	39 f4       	brne	.+14     	; 0x5992 <main+0x233c>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1346
                        lcd.setCursor(1, 1);
    5984:	61 e0       	ldi	r22, 0x01	; 1
    5986:	81 e0       	ldi	r24, 0x01	; 1
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1350
                    if (blinkMode == setMonth)
                        lcd.setCursor(4, 1);
                    if (blinkMode == setYear)
                        lcd.setCursor(9, 1);
    5988:	0e 94 e6 07 	call	0xfcc	; 0xfcc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.87]>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1351
                    lcd.print(F("  "));
    598c:	84 e6       	ldi	r24, 0x64	; 100
    598e:	93 e0       	ldi	r25, 0x03	; 3
    5990:	e7 cf       	rjmp	.-50     	; 0x5960 <main+0x230a>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1347
                }
                else if (cmdId == mnuCmdSetDate)
                {
                    if (blinkMode == setDate)
                        lcd.setCursor(1, 1);
                    if (blinkMode == setMonth)
    5992:	83 30       	cpi	r24, 0x03	; 3
    5994:	19 f4       	brne	.+6      	; 0x599c <main+0x2346>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1348
                        lcd.setCursor(4, 1);
    5996:	61 e0       	ldi	r22, 0x01	; 1
    5998:	84 e0       	ldi	r24, 0x04	; 4
    599a:	f6 cf       	rjmp	.-20     	; 0x5988 <main+0x2332>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1349
                    if (blinkMode == setYear)
    599c:	84 30       	cpi	r24, 0x04	; 4
    599e:	b1 f7       	brne	.-20     	; 0x598c <main+0x2336>
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1350
                        lcd.setCursor(9, 1);
    59a0:	61 e0       	ldi	r22, 0x01	; 1
    59a2:	89 e0       	ldi	r24, 0x09	; 9
    59a4:	f1 cf       	rjmp	.-30     	; 0x5988 <main+0x2332>

000059a6 <_GLOBAL__sub_D_pwd>:
_GLOBAL__sub_D_pwd():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1555
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:45
bool ButLongPress = false;
byte alarmMode = 0;
byte btn;
char strbuf[LCD_COLS + 1], valbuf[LCD_COLS + 1];

String months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    59aa:	c1 e7       	ldi	r28, 0x71	; 113
    59ac:	d5 e0       	ldi	r29, 0x05	; 5
__static_initialization_and_destruction_0():
    59ae:	26 97       	sbiw	r28, 0x06	; 6
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    59b0:	88 81       	ld	r24, Y
    59b2:	99 81       	ldd	r25, Y+1	; 0x01
    59b4:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
__static_initialization_and_destruction_0():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:45
    59b8:	25 e0       	ldi	r18, 0x05	; 5
    59ba:	c9 32       	cpi	r28, 0x29	; 41
    59bc:	d2 07       	cpc	r29, r18
    59be:	b9 f7       	brne	.-18     	; 0x59ae <_GLOBAL__sub_D_pwd+0x8>
__base_dtor ():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:274
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    59c0:	80 ea       	ldi	r24, 0xA0	; 160
    59c2:	91 e0       	ldi	r25, 0x01	; 1
    59c4:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <mySoftwareSerial+0x1>
    59c8:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <mySoftwareSerial>
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:113
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    59cc:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <SoftwareSerial::active_object>
    59d0:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <SoftwareSerial::active_object+0x1>
    59d4:	89 5a       	subi	r24, 0xA9	; 169
    59d6:	95 40       	sbci	r25, 0x05	; 5
    59d8:	71 f4       	brne	.+28     	; 0x59f6 <_GLOBAL__sub_D_pwd+0x50>
_ZN14SoftwareSerial11setRxIntMskEb():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:442
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    59da:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <mySoftwareSerial+0x13>
    59de:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <mySoftwareSerial+0x14>
    59e2:	90 81       	ld	r25, Z
    59e4:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <mySoftwareSerial+0x15>
    59e8:	80 95       	com	r24
    59ea:	89 23       	and	r24, r25
    59ec:	80 83       	st	Z, r24
stopListening():
C:\Users\quali\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SoftwareSerial\src/SoftwareSerial.cpp:116
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    59ee:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <SoftwareSerial::active_object+0x1>
    59f2:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <SoftwareSerial::active_object>
_GLOBAL__sub_D_pwd():
e:\Arduino\Arduino Git\ChantBellV3.3/ChantBellV3.3.ino:1555
            timrLCD = millis();
            digitalWrite(AMP, LOW);
        }
        break;
    }
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	08 95       	ret

000059fc <random_r>:
random_r():
    59fc:	8f 92       	push	r8
    59fe:	9f 92       	push	r9
    5a00:	af 92       	push	r10
    5a02:	bf 92       	push	r11
    5a04:	cf 92       	push	r12
    5a06:	df 92       	push	r13
    5a08:	ef 92       	push	r14
    5a0a:	ff 92       	push	r15
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
    5a10:	ec 01       	movw	r28, r24
    5a12:	68 81       	ld	r22, Y
    5a14:	79 81       	ldd	r23, Y+1	; 0x01
    5a16:	8a 81       	ldd	r24, Y+2	; 0x02
    5a18:	9b 81       	ldd	r25, Y+3	; 0x03
    5a1a:	61 15       	cp	r22, r1
    5a1c:	71 05       	cpc	r23, r1
    5a1e:	81 05       	cpc	r24, r1
    5a20:	91 05       	cpc	r25, r1
    5a22:	21 f4       	brne	.+8      	; 0x5a2c <random_r+0x30>
    5a24:	64 e2       	ldi	r22, 0x24	; 36
    5a26:	79 ed       	ldi	r23, 0xD9	; 217
    5a28:	8b e5       	ldi	r24, 0x5B	; 91
    5a2a:	97 e0       	ldi	r25, 0x07	; 7
    5a2c:	2d e1       	ldi	r18, 0x1D	; 29
    5a2e:	33 ef       	ldi	r19, 0xF3	; 243
    5a30:	41 e0       	ldi	r20, 0x01	; 1
    5a32:	50 e0       	ldi	r21, 0x00	; 0
    5a34:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
    5a38:	49 01       	movw	r8, r18
    5a3a:	5a 01       	movw	r10, r20
    5a3c:	9b 01       	movw	r18, r22
    5a3e:	ac 01       	movw	r20, r24
    5a40:	a7 ea       	ldi	r26, 0xA7	; 167
    5a42:	b1 e4       	ldi	r27, 0x41	; 65
    5a44:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__muluhisi3>
    5a48:	6b 01       	movw	r12, r22
    5a4a:	7c 01       	movw	r14, r24
    5a4c:	ac ee       	ldi	r26, 0xEC	; 236
    5a4e:	b4 ef       	ldi	r27, 0xF4	; 244
    5a50:	a5 01       	movw	r20, r10
    5a52:	94 01       	movw	r18, r8
    5a54:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__mulohisi3>
    5a58:	c6 0e       	add	r12, r22
    5a5a:	d7 1e       	adc	r13, r23
    5a5c:	e8 1e       	adc	r14, r24
    5a5e:	f9 1e       	adc	r15, r25
    5a60:	f7 fe       	sbrs	r15, 7
    5a62:	06 c0       	rjmp	.+12     	; 0x5a70 <random_r+0x74>
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	c8 1a       	sub	r12, r24
    5a68:	d1 08       	sbc	r13, r1
    5a6a:	e1 08       	sbc	r14, r1
    5a6c:	80 e8       	ldi	r24, 0x80	; 128
    5a6e:	f8 0a       	sbc	r15, r24
    5a70:	c8 82       	st	Y, r12
    5a72:	d9 82       	std	Y+1, r13	; 0x01
    5a74:	ea 82       	std	Y+2, r14	; 0x02
    5a76:	fb 82       	std	Y+3, r15	; 0x03
    5a78:	c7 01       	movw	r24, r14
    5a7a:	b6 01       	movw	r22, r12
    5a7c:	9f 77       	andi	r25, 0x7F	; 127
    5a7e:	df 91       	pop	r29
    5a80:	cf 91       	pop	r28
    5a82:	ff 90       	pop	r15
    5a84:	ef 90       	pop	r14
    5a86:	df 90       	pop	r13
    5a88:	cf 90       	pop	r12
    5a8a:	bf 90       	pop	r11
    5a8c:	af 90       	pop	r10
    5a8e:	9f 90       	pop	r9
    5a90:	8f 90       	pop	r8
    5a92:	08 95       	ret

00005a94 <random>:
random():
    5a94:	8f 92       	push	r8
    5a96:	9f 92       	push	r9
    5a98:	af 92       	push	r10
    5a9a:	bf 92       	push	r11
    5a9c:	cf 92       	push	r12
    5a9e:	df 92       	push	r13
    5aa0:	ef 92       	push	r14
    5aa2:	ff 92       	push	r15
    5aa4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <next>
    5aa8:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <next+0x1>
    5aac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <next+0x2>
    5ab0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <next+0x3>
    5ab4:	61 15       	cp	r22, r1
    5ab6:	71 05       	cpc	r23, r1
    5ab8:	81 05       	cpc	r24, r1
    5aba:	91 05       	cpc	r25, r1
    5abc:	21 f4       	brne	.+8      	; 0x5ac6 <random+0x32>
    5abe:	64 e2       	ldi	r22, 0x24	; 36
    5ac0:	79 ed       	ldi	r23, 0xD9	; 217
    5ac2:	8b e5       	ldi	r24, 0x5B	; 91
    5ac4:	97 e0       	ldi	r25, 0x07	; 7
    5ac6:	2d e1       	ldi	r18, 0x1D	; 29
    5ac8:	33 ef       	ldi	r19, 0xF3	; 243
    5aca:	41 e0       	ldi	r20, 0x01	; 1
    5acc:	50 e0       	ldi	r21, 0x00	; 0
    5ace:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__divmodsi4>
    5ad2:	49 01       	movw	r8, r18
    5ad4:	5a 01       	movw	r10, r20
    5ad6:	9b 01       	movw	r18, r22
    5ad8:	ac 01       	movw	r20, r24
    5ada:	a7 ea       	ldi	r26, 0xA7	; 167
    5adc:	b1 e4       	ldi	r27, 0x41	; 65
    5ade:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__muluhisi3>
    5ae2:	6b 01       	movw	r12, r22
    5ae4:	7c 01       	movw	r14, r24
    5ae6:	ac ee       	ldi	r26, 0xEC	; 236
    5ae8:	b4 ef       	ldi	r27, 0xF4	; 244
    5aea:	a5 01       	movw	r20, r10
    5aec:	94 01       	movw	r18, r8
    5aee:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__mulohisi3>
    5af2:	c6 0e       	add	r12, r22
    5af4:	d7 1e       	adc	r13, r23
    5af6:	e8 1e       	adc	r14, r24
    5af8:	f9 1e       	adc	r15, r25
    5afa:	f7 fe       	sbrs	r15, 7
    5afc:	06 c0       	rjmp	.+12     	; 0x5b0a <random+0x76>
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	c8 1a       	sub	r12, r24
    5b02:	d1 08       	sbc	r13, r1
    5b04:	e1 08       	sbc	r14, r1
    5b06:	80 e8       	ldi	r24, 0x80	; 128
    5b08:	f8 0a       	sbc	r15, r24
    5b0a:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <next>
    5b0e:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <next+0x1>
    5b12:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <next+0x2>
    5b16:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <next+0x3>
    5b1a:	c7 01       	movw	r24, r14
    5b1c:	b6 01       	movw	r22, r12
    5b1e:	9f 77       	andi	r25, 0x7F	; 127
    5b20:	ff 90       	pop	r15
    5b22:	ef 90       	pop	r14
    5b24:	df 90       	pop	r13
    5b26:	cf 90       	pop	r12
    5b28:	bf 90       	pop	r11
    5b2a:	af 90       	pop	r10
    5b2c:	9f 90       	pop	r9
    5b2e:	8f 90       	pop	r8
    5b30:	08 95       	ret

00005b32 <srandom>:
srandom():
    5b32:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <next>
    5b36:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <next+0x1>
    5b3a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <next+0x2>
    5b3e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <next+0x3>
    5b42:	08 95       	ret

00005b44 <strcpy_P>:
strcpy_P():
    5b44:	fb 01       	movw	r30, r22
    5b46:	dc 01       	movw	r26, r24
    5b48:	05 90       	lpm	r0, Z+
    5b4a:	0d 92       	st	X+, r0
    5b4c:	00 20       	and	r0, r0
    5b4e:	e1 f7       	brne	.-8      	; 0x5b48 <strcpy_P+0x4>
    5b50:	08 95       	ret

00005b52 <__itoa_ncheck>:
__itoa_ncheck():
    5b52:	bb 27       	eor	r27, r27
    5b54:	4a 30       	cpi	r20, 0x0A	; 10
    5b56:	31 f4       	brne	.+12     	; 0x5b64 <__itoa_ncheck+0x12>
    5b58:	99 23       	and	r25, r25
    5b5a:	22 f4       	brpl	.+8      	; 0x5b64 <__itoa_ncheck+0x12>
    5b5c:	bd e2       	ldi	r27, 0x2D	; 45
    5b5e:	90 95       	com	r25
    5b60:	81 95       	neg	r24
    5b62:	9f 4f       	sbci	r25, 0xFF	; 255
    5b64:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <__utoa_common>

00005b68 <__utoa_ncheck>:
__utoa_ncheck():
    5b68:	bb 27       	eor	r27, r27

00005b6a <__utoa_common>:
    5b6a:	fb 01       	movw	r30, r22
    5b6c:	55 27       	eor	r21, r21
    5b6e:	aa 27       	eor	r26, r26
    5b70:	88 0f       	add	r24, r24
    5b72:	99 1f       	adc	r25, r25
    5b74:	aa 1f       	adc	r26, r26
    5b76:	a4 17       	cp	r26, r20
    5b78:	10 f0       	brcs	.+4      	; 0x5b7e <__utoa_common+0x14>
    5b7a:	a4 1b       	sub	r26, r20
    5b7c:	83 95       	inc	r24
    5b7e:	50 51       	subi	r21, 0x10	; 16
    5b80:	b9 f7       	brne	.-18     	; 0x5b70 <__utoa_common+0x6>
    5b82:	a0 5d       	subi	r26, 0xD0	; 208
    5b84:	aa 33       	cpi	r26, 0x3A	; 58
    5b86:	08 f0       	brcs	.+2      	; 0x5b8a <__utoa_common+0x20>
    5b88:	a9 5d       	subi	r26, 0xD9	; 217
    5b8a:	a1 93       	st	Z+, r26
    5b8c:	00 97       	sbiw	r24, 0x00	; 0
    5b8e:	79 f7       	brne	.-34     	; 0x5b6e <__utoa_common+0x4>
    5b90:	b1 11       	cpse	r27, r1
    5b92:	b1 93       	st	Z+, r27
    5b94:	11 92       	st	Z+, r1
    5b96:	cb 01       	movw	r24, r22
    5b98:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <strrev>

00005b9c <strrev>:
strrev():
    5b9c:	dc 01       	movw	r26, r24
    5b9e:	fc 01       	movw	r30, r24
    5ba0:	67 2f       	mov	r22, r23
    5ba2:	71 91       	ld	r23, Z+
    5ba4:	77 23       	and	r23, r23
    5ba6:	e1 f7       	brne	.-8      	; 0x5ba0 <strrev+0x4>
    5ba8:	32 97       	sbiw	r30, 0x02	; 2
    5baa:	04 c0       	rjmp	.+8      	; 0x5bb4 <strrev+0x18>
    5bac:	7c 91       	ld	r23, X
    5bae:	6d 93       	st	X+, r22
    5bb0:	70 83       	st	Z, r23
    5bb2:	62 91       	ld	r22, -Z
    5bb4:	ae 17       	cp	r26, r30
    5bb6:	bf 07       	cpc	r27, r31
    5bb8:	c8 f3       	brcs	.-14     	; 0x5bac <strrev+0x10>
    5bba:	08 95       	ret

00005bbc <eeprom_read_block>:
eeprom_read_block():
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	cb 01       	movw	r24, r22

00005bc0 <eeprom_read_blraw>:
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	f9 99       	sbic	0x1f, 1	; 31
    5bc4:	fe cf       	rjmp	.-4      	; 0x5bc2 <eeprom_read_blraw+0x2>
    5bc6:	06 c0       	rjmp	.+12     	; 0x5bd4 <eeprom_read_blraw+0x14>
    5bc8:	f2 bd       	out	0x22, r31	; 34
    5bca:	e1 bd       	out	0x21, r30	; 33
    5bcc:	f8 9a       	sbi	0x1f, 0	; 31
    5bce:	31 96       	adiw	r30, 0x01	; 1
    5bd0:	00 b4       	in	r0, 0x20	; 32
    5bd2:	0d 92       	st	X+, r0
    5bd4:	41 50       	subi	r20, 0x01	; 1
    5bd6:	50 40       	sbci	r21, 0x00	; 0
    5bd8:	b8 f7       	brcc	.-18     	; 0x5bc8 <eeprom_read_blraw+0x8>
    5bda:	08 95       	ret

00005bdc <eeprom_write_block>:
eeprom_write_block():
    5bdc:	dc 01       	movw	r26, r24
    5bde:	cb 01       	movw	r24, r22
    5be0:	03 c0       	rjmp	.+6      	; 0x5be8 <eeprom_write_block+0xc>
    5be2:	2d 91       	ld	r18, X+
    5be4:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <eeprom_write_r18>
    5be8:	41 50       	subi	r20, 0x01	; 1
    5bea:	50 40       	sbci	r21, 0x00	; 0
    5bec:	d0 f7       	brcc	.-12     	; 0x5be2 <eeprom_write_block+0x6>
    5bee:	08 95       	ret

00005bf0 <eeprom_write_byte>:
eeprom_write_byte():
    5bf0:	26 2f       	mov	r18, r22

00005bf2 <eeprom_write_r18>:
    5bf2:	f9 99       	sbic	0x1f, 1	; 31
    5bf4:	fe cf       	rjmp	.-4      	; 0x5bf2 <eeprom_write_r18>
    5bf6:	1f ba       	out	0x1f, r1	; 31
    5bf8:	92 bd       	out	0x22, r25	; 34
    5bfa:	81 bd       	out	0x21, r24	; 33
    5bfc:	20 bd       	out	0x20, r18	; 32
    5bfe:	0f b6       	in	r0, 0x3f	; 63
    5c00:	f8 94       	cli
    5c02:	fa 9a       	sbi	0x1f, 2	; 31
    5c04:	f9 9a       	sbi	0x1f, 1	; 31
    5c06:	0f be       	out	0x3f, r0	; 63
    5c08:	01 96       	adiw	r24, 0x01	; 1
    5c0a:	08 95       	ret

00005c0c <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5c0c:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5c0e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5c10:	1e f4       	brtc	.+6      	; 0x5c18 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    5c12:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    5c14:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    5c18:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5c1a:	07 d0       	rcall	.+14     	; 0x5c2a <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5c1c:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5c20:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    5c22:	03 d0       	rcall	.+6      	; 0x5c2a <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    5c24:	4e f4       	brtc	.+18     	; 0x5c38 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    5c26:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <__negsi2>

00005c2a <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5c2a:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5c2c:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5c2e:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5c30:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    5c32:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    5c34:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    5c36:	5f 4f       	sbci	r21, 0xFF	; 255

00005c38 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    5c38:	08 95       	ret

00005c3a <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5c3a:	90 95       	com	r25
    5c3c:	80 95       	com	r24
    5c3e:	70 95       	com	r23
    5c40:	61 95       	neg	r22
    5c42:	7f 4f       	sbci	r23, 0xFF	; 255
    5c44:	8f 4f       	sbci	r24, 0xFF	; 255
    5c46:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    5c48:	08 95       	ret

00005c4a <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    5c4a:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    5c4e:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    5c50:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    5c52:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    5c54:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    5c56:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    5c58:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    5c5a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5c5c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5c5e:	08 95       	ret

00005c60 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    5c60:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    5c62:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__muluhisi3>

00005c66 <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    5c66:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    5c6a:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    5c6c:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    5c6e:	08 95       	ret

00005c70 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    5c70:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    5c72:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    5c74:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    5c76:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    5c78:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    5c7a:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    5c7c:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    5c7e:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    5c80:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    5c82:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    5c84:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    5c86:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    5c88:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    5c8a:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    5c8c:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    5c8e:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    5c90:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    5c92:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    5c94:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    5c96:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    5c98:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    5c9a:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    5c9c:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    5c9e:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    5ca0:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    5ca2:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    5ca4:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    5ca6:	09 94       	ijmp

00005ca8 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    5ca8:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    5caa:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    5cac:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    5cae:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    5cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    5cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    5cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    5cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    5cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    5cba:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    5cbc:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    5cbe:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    5cc0:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    5cc2:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    5cc4:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    5cc6:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    5cc8:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    5cca:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    5ccc:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    5cce:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    5cd0:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    5cd2:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    5cd4:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    5cd6:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    5cd8:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    5cda:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    5cdc:	08 95       	ret

00005cde <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    5cde:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    5ce0:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    5ce2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    5ce4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    5ce6:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    5ce8:	0d c0       	rjmp	.+26     	; 0x5d04 <__udivmodsi4_ep>

00005cea <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    5cea:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    5cec:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    5cee:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    5cf0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    5cf2:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    5cf4:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    5cf6:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    5cf8:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    5cfa:	20 f0       	brcs	.+8      	; 0x5d04 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    5cfc:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    5cfe:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    5d00:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    5d02:	f5 0b       	sbc	r31, r21

00005d04 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    5d04:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    5d06:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    5d08:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5d0a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    5d0c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5d0e:	69 f7       	brne	.-38     	; 0x5cea <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5d10:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5d12:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5d14:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5d16:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5d18:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5d1a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5d1c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5d1e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5d20:	08 95       	ret

00005d22 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    5d22:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    5d24:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    5d26:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    5d28:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5d2a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5d2c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5d2e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5d30:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    5d32:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    5d34:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    5d36:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    5d38:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    5d3a:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    5d3c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5d3e:	08 95       	ret

00005d40 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    5d40:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    5d42:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    5d44:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    5d46:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    5d4a:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    5d4c:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    5d4e:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    5d50:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    5d52:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    5d54:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    5d56:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    5d58:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    5d5a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    5d5c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    5d5e:	08 95       	ret

00005d60 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    5d60:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    5d62:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    5d64:	04 c0       	rjmp	.+8      	; 0x5d6e <__udivmodqi4_ep>

00005d66 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    5d66:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    5d68:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    5d6a:	08 f0       	brcs	.+2      	; 0x5d6e <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    5d6c:	96 1b       	sub	r25, r22

00005d6e <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    5d6e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    5d70:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    5d72:	c9 f7       	brne	.-14     	; 0x5d66 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    5d74:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    5d76:	08 95       	ret

00005d78 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    5d78:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    5d7a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    5d7c:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    5d7e:	07 c0       	rjmp	.+14     	; 0x5d8e <__udivmodhi4_ep>

00005d80 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    5d80:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    5d82:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    5d84:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    5d86:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    5d88:	10 f0       	brcs	.+4      	; 0x5d8e <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    5d8a:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    5d8c:	b7 0b       	sbc	r27, r23

00005d8e <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    5d8e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    5d90:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    5d92:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    5d94:	a9 f7       	brne	.-22     	; 0x5d80 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    5d96:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    5d98:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    5d9a:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    5d9c:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    5d9e:	08 95       	ret

00005da0 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    5da0:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    5da2:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    5da4:	16 f4       	brtc	.+4      	; 0x5daa <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    5da6:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    5da8:	07 d0       	rcall	.+14     	; 0x5db8 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    5daa:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    5dac:	09 d0       	rcall	.+18     	; 0x5dc0 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    5dae:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    5db2:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    5db4:	05 d0       	rcall	.+10     	; 0x5dc0 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    5db6:	3e f4       	brtc	.+14     	; 0x5dc6 <__divmodhi4_exit>

00005db8 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    5db8:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    5dba:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    5dbc:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    5dbe:	08 95       	ret

00005dc0 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    5dc0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    5dc2:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    5dc4:	7f 4f       	sbci	r23, 0xFF	; 255

00005dc6 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    5dc6:	08 95       	ret

00005dc8 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    5dc8:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    5dca:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    5dcc:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    5dce:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    5dd0:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    5dd2:	09 94       	ijmp

00005dd4 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    5dd4:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <__umulhisi3>

00005dd8 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    5dd8:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    5dda:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    5ddc:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    5dde:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    5de0:	08 95       	ret

00005de2 <malloc>:
malloc():
    5de2:	0f 93       	push	r16
    5de4:	1f 93       	push	r17
    5de6:	cf 93       	push	r28
    5de8:	df 93       	push	r29
    5dea:	82 30       	cpi	r24, 0x02	; 2
    5dec:	91 05       	cpc	r25, r1
    5dee:	10 f4       	brcc	.+4      	; 0x5df4 <malloc+0x12>
    5df0:	82 e0       	ldi	r24, 0x02	; 2
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <__flp>
    5df8:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <__flp+0x1>
    5dfc:	30 e0       	ldi	r19, 0x00	; 0
    5dfe:	20 e0       	ldi	r18, 0x00	; 0
    5e00:	b0 e0       	ldi	r27, 0x00	; 0
    5e02:	a0 e0       	ldi	r26, 0x00	; 0
    5e04:	30 97       	sbiw	r30, 0x00	; 0
    5e06:	99 f4       	brne	.+38     	; 0x5e2e <malloc+0x4c>
    5e08:	21 15       	cp	r18, r1
    5e0a:	31 05       	cpc	r19, r1
    5e0c:	09 f4       	brne	.+2      	; 0x5e10 <malloc+0x2e>
    5e0e:	4a c0       	rjmp	.+148    	; 0x5ea4 <malloc+0xc2>
    5e10:	28 1b       	sub	r18, r24
    5e12:	39 0b       	sbc	r19, r25
    5e14:	24 30       	cpi	r18, 0x04	; 4
    5e16:	31 05       	cpc	r19, r1
    5e18:	d8 f5       	brcc	.+118    	; 0x5e90 <malloc+0xae>
    5e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1e:	61 15       	cp	r22, r1
    5e20:	71 05       	cpc	r23, r1
    5e22:	89 f1       	breq	.+98     	; 0x5e86 <malloc+0xa4>
    5e24:	fb 01       	movw	r30, r22
    5e26:	93 83       	std	Z+3, r25	; 0x03
    5e28:	82 83       	std	Z+2, r24	; 0x02
    5e2a:	fe 01       	movw	r30, r28
    5e2c:	11 c0       	rjmp	.+34     	; 0x5e50 <malloc+0x6e>
    5e2e:	40 81       	ld	r20, Z
    5e30:	51 81       	ldd	r21, Z+1	; 0x01
    5e32:	02 81       	ldd	r16, Z+2	; 0x02
    5e34:	13 81       	ldd	r17, Z+3	; 0x03
    5e36:	48 17       	cp	r20, r24
    5e38:	59 07       	cpc	r21, r25
    5e3a:	e0 f0       	brcs	.+56     	; 0x5e74 <malloc+0x92>
    5e3c:	48 17       	cp	r20, r24
    5e3e:	59 07       	cpc	r21, r25
    5e40:	99 f4       	brne	.+38     	; 0x5e68 <malloc+0x86>
    5e42:	10 97       	sbiw	r26, 0x00	; 0
    5e44:	61 f0       	breq	.+24     	; 0x5e5e <malloc+0x7c>
    5e46:	12 96       	adiw	r26, 0x02	; 2
    5e48:	0c 93       	st	X, r16
    5e4a:	12 97       	sbiw	r26, 0x02	; 2
    5e4c:	13 96       	adiw	r26, 0x03	; 3
    5e4e:	1c 93       	st	X, r17
    5e50:	32 96       	adiw	r30, 0x02	; 2
    5e52:	cf 01       	movw	r24, r30
    5e54:	df 91       	pop	r29
    5e56:	cf 91       	pop	r28
    5e58:	1f 91       	pop	r17
    5e5a:	0f 91       	pop	r16
    5e5c:	08 95       	ret
    5e5e:	00 93 ca 05 	sts	0x05CA, r16	; 0x8005ca <__flp>
    5e62:	10 93 cb 05 	sts	0x05CB, r17	; 0x8005cb <__flp+0x1>
    5e66:	f4 cf       	rjmp	.-24     	; 0x5e50 <malloc+0x6e>
    5e68:	21 15       	cp	r18, r1
    5e6a:	31 05       	cpc	r19, r1
    5e6c:	51 f0       	breq	.+20     	; 0x5e82 <malloc+0xa0>
    5e6e:	42 17       	cp	r20, r18
    5e70:	53 07       	cpc	r21, r19
    5e72:	38 f0       	brcs	.+14     	; 0x5e82 <malloc+0xa0>
    5e74:	a9 01       	movw	r20, r18
    5e76:	db 01       	movw	r26, r22
    5e78:	9a 01       	movw	r18, r20
    5e7a:	bd 01       	movw	r22, r26
    5e7c:	df 01       	movw	r26, r30
    5e7e:	f8 01       	movw	r30, r16
    5e80:	c1 cf       	rjmp	.-126    	; 0x5e04 <malloc+0x22>
    5e82:	ef 01       	movw	r28, r30
    5e84:	f9 cf       	rjmp	.-14     	; 0x5e78 <malloc+0x96>
    5e86:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <__flp+0x1>
    5e8a:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <__flp>
    5e8e:	cd cf       	rjmp	.-102    	; 0x5e2a <malloc+0x48>
    5e90:	fe 01       	movw	r30, r28
    5e92:	e2 0f       	add	r30, r18
    5e94:	f3 1f       	adc	r31, r19
    5e96:	81 93       	st	Z+, r24
    5e98:	91 93       	st	Z+, r25
    5e9a:	22 50       	subi	r18, 0x02	; 2
    5e9c:	31 09       	sbc	r19, r1
    5e9e:	39 83       	std	Y+1, r19	; 0x01
    5ea0:	28 83       	st	Y, r18
    5ea2:	d7 cf       	rjmp	.-82     	; 0x5e52 <malloc+0x70>
    5ea4:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <__brkval>
    5ea8:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <__brkval+0x1>
    5eac:	23 2b       	or	r18, r19
    5eae:	41 f4       	brne	.+16     	; 0x5ec0 <malloc+0xde>
    5eb0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <__malloc_heap_start>
    5eb4:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__malloc_heap_start+0x1>
    5eb8:	30 93 c9 05 	sts	0x05C9, r19	; 0x8005c9 <__brkval+0x1>
    5ebc:	20 93 c8 05 	sts	0x05C8, r18	; 0x8005c8 <__brkval>
    5ec0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__malloc_heap_end>
    5ec4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__malloc_heap_end+0x1>
    5ec8:	21 15       	cp	r18, r1
    5eca:	31 05       	cpc	r19, r1
    5ecc:	41 f4       	brne	.+16     	; 0x5ede <malloc+0xfc>
    5ece:	2d b7       	in	r18, 0x3d	; 61
    5ed0:	3e b7       	in	r19, 0x3e	; 62
    5ed2:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <__malloc_margin>
    5ed6:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <__malloc_margin+0x1>
    5eda:	24 1b       	sub	r18, r20
    5edc:	35 0b       	sbc	r19, r21
    5ede:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <__brkval>
    5ee2:	f0 91 c9 05 	lds	r31, 0x05C9	; 0x8005c9 <__brkval+0x1>
    5ee6:	e2 17       	cp	r30, r18
    5ee8:	f3 07       	cpc	r31, r19
    5eea:	a0 f4       	brcc	.+40     	; 0x5f14 <malloc+0x132>
    5eec:	2e 1b       	sub	r18, r30
    5eee:	3f 0b       	sbc	r19, r31
    5ef0:	28 17       	cp	r18, r24
    5ef2:	39 07       	cpc	r19, r25
    5ef4:	78 f0       	brcs	.+30     	; 0x5f14 <malloc+0x132>
    5ef6:	ac 01       	movw	r20, r24
    5ef8:	4e 5f       	subi	r20, 0xFE	; 254
    5efa:	5f 4f       	sbci	r21, 0xFF	; 255
    5efc:	24 17       	cp	r18, r20
    5efe:	35 07       	cpc	r19, r21
    5f00:	48 f0       	brcs	.+18     	; 0x5f14 <malloc+0x132>
    5f02:	4e 0f       	add	r20, r30
    5f04:	5f 1f       	adc	r21, r31
    5f06:	50 93 c9 05 	sts	0x05C9, r21	; 0x8005c9 <__brkval+0x1>
    5f0a:	40 93 c8 05 	sts	0x05C8, r20	; 0x8005c8 <__brkval>
    5f0e:	81 93       	st	Z+, r24
    5f10:	91 93       	st	Z+, r25
    5f12:	9f cf       	rjmp	.-194    	; 0x5e52 <malloc+0x70>
    5f14:	f0 e0       	ldi	r31, 0x00	; 0
    5f16:	e0 e0       	ldi	r30, 0x00	; 0
    5f18:	9c cf       	rjmp	.-200    	; 0x5e52 <malloc+0x70>

00005f1a <free>:
free():
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	00 97       	sbiw	r24, 0x00	; 0
    5f20:	e9 f0       	breq	.+58     	; 0x5f5c <free+0x42>
    5f22:	fc 01       	movw	r30, r24
    5f24:	32 97       	sbiw	r30, 0x02	; 2
    5f26:	13 82       	std	Z+3, r1	; 0x03
    5f28:	12 82       	std	Z+2, r1	; 0x02
    5f2a:	a0 91 ca 05 	lds	r26, 0x05CA	; 0x8005ca <__flp>
    5f2e:	b0 91 cb 05 	lds	r27, 0x05CB	; 0x8005cb <__flp+0x1>
    5f32:	ed 01       	movw	r28, r26
    5f34:	30 e0       	ldi	r19, 0x00	; 0
    5f36:	20 e0       	ldi	r18, 0x00	; 0
    5f38:	10 97       	sbiw	r26, 0x00	; 0
    5f3a:	a1 f4       	brne	.+40     	; 0x5f64 <free+0x4a>
    5f3c:	20 81       	ld	r18, Z
    5f3e:	31 81       	ldd	r19, Z+1	; 0x01
    5f40:	82 0f       	add	r24, r18
    5f42:	93 1f       	adc	r25, r19
    5f44:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <__brkval>
    5f48:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <__brkval+0x1>
    5f4c:	28 17       	cp	r18, r24
    5f4e:	39 07       	cpc	r19, r25
    5f50:	09 f0       	breq	.+2      	; 0x5f54 <free+0x3a>
    5f52:	61 c0       	rjmp	.+194    	; 0x6016 <free+0xfc>
    5f54:	f0 93 c9 05 	sts	0x05C9, r31	; 0x8005c9 <__brkval+0x1>
    5f58:	e0 93 c8 05 	sts	0x05C8, r30	; 0x8005c8 <__brkval>
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	08 95       	ret
    5f62:	ea 01       	movw	r28, r20
    5f64:	ce 17       	cp	r28, r30
    5f66:	df 07       	cpc	r29, r31
    5f68:	e8 f5       	brcc	.+122    	; 0x5fe4 <free+0xca>
    5f6a:	4a 81       	ldd	r20, Y+2	; 0x02
    5f6c:	5b 81       	ldd	r21, Y+3	; 0x03
    5f6e:	9e 01       	movw	r18, r28
    5f70:	41 15       	cp	r20, r1
    5f72:	51 05       	cpc	r21, r1
    5f74:	b1 f7       	brne	.-20     	; 0x5f62 <free+0x48>
    5f76:	e9 01       	movw	r28, r18
    5f78:	fb 83       	std	Y+3, r31	; 0x03
    5f7a:	ea 83       	std	Y+2, r30	; 0x02
    5f7c:	49 91       	ld	r20, Y+
    5f7e:	59 91       	ld	r21, Y+
    5f80:	c4 0f       	add	r28, r20
    5f82:	d5 1f       	adc	r29, r21
    5f84:	ec 17       	cp	r30, r28
    5f86:	fd 07       	cpc	r31, r29
    5f88:	61 f4       	brne	.+24     	; 0x5fa2 <free+0x88>
    5f8a:	80 81       	ld	r24, Z
    5f8c:	91 81       	ldd	r25, Z+1	; 0x01
    5f8e:	02 96       	adiw	r24, 0x02	; 2
    5f90:	84 0f       	add	r24, r20
    5f92:	95 1f       	adc	r25, r21
    5f94:	e9 01       	movw	r28, r18
    5f96:	99 83       	std	Y+1, r25	; 0x01
    5f98:	88 83       	st	Y, r24
    5f9a:	82 81       	ldd	r24, Z+2	; 0x02
    5f9c:	93 81       	ldd	r25, Z+3	; 0x03
    5f9e:	9b 83       	std	Y+3, r25	; 0x03
    5fa0:	8a 83       	std	Y+2, r24	; 0x02
    5fa2:	f0 e0       	ldi	r31, 0x00	; 0
    5fa4:	e0 e0       	ldi	r30, 0x00	; 0
    5fa6:	12 96       	adiw	r26, 0x02	; 2
    5fa8:	8d 91       	ld	r24, X+
    5faa:	9c 91       	ld	r25, X
    5fac:	13 97       	sbiw	r26, 0x03	; 3
    5fae:	00 97       	sbiw	r24, 0x00	; 0
    5fb0:	b9 f5       	brne	.+110    	; 0x6020 <free+0x106>
    5fb2:	2d 91       	ld	r18, X+
    5fb4:	3c 91       	ld	r19, X
    5fb6:	11 97       	sbiw	r26, 0x01	; 1
    5fb8:	cd 01       	movw	r24, r26
    5fba:	02 96       	adiw	r24, 0x02	; 2
    5fbc:	82 0f       	add	r24, r18
    5fbe:	93 1f       	adc	r25, r19
    5fc0:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <__brkval>
    5fc4:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <__brkval+0x1>
    5fc8:	28 17       	cp	r18, r24
    5fca:	39 07       	cpc	r19, r25
    5fcc:	39 f6       	brne	.-114    	; 0x5f5c <free+0x42>
    5fce:	30 97       	sbiw	r30, 0x00	; 0
    5fd0:	51 f5       	brne	.+84     	; 0x6026 <free+0x10c>
    5fd2:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <__flp+0x1>
    5fd6:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <__flp>
    5fda:	b0 93 c9 05 	sts	0x05C9, r27	; 0x8005c9 <__brkval+0x1>
    5fde:	a0 93 c8 05 	sts	0x05C8, r26	; 0x8005c8 <__brkval>
    5fe2:	bc cf       	rjmp	.-136    	; 0x5f5c <free+0x42>
    5fe4:	d3 83       	std	Z+3, r29	; 0x03
    5fe6:	c2 83       	std	Z+2, r28	; 0x02
    5fe8:	40 81       	ld	r20, Z
    5fea:	51 81       	ldd	r21, Z+1	; 0x01
    5fec:	84 0f       	add	r24, r20
    5fee:	95 1f       	adc	r25, r21
    5ff0:	c8 17       	cp	r28, r24
    5ff2:	d9 07       	cpc	r29, r25
    5ff4:	61 f4       	brne	.+24     	; 0x600e <free+0xf4>
    5ff6:	4e 5f       	subi	r20, 0xFE	; 254
    5ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    5ffa:	88 81       	ld	r24, Y
    5ffc:	99 81       	ldd	r25, Y+1	; 0x01
    5ffe:	48 0f       	add	r20, r24
    6000:	59 1f       	adc	r21, r25
    6002:	51 83       	std	Z+1, r21	; 0x01
    6004:	40 83       	st	Z, r20
    6006:	8a 81       	ldd	r24, Y+2	; 0x02
    6008:	9b 81       	ldd	r25, Y+3	; 0x03
    600a:	93 83       	std	Z+3, r25	; 0x03
    600c:	82 83       	std	Z+2, r24	; 0x02
    600e:	21 15       	cp	r18, r1
    6010:	31 05       	cpc	r19, r1
    6012:	09 f0       	breq	.+2      	; 0x6016 <free+0xfc>
    6014:	b0 cf       	rjmp	.-160    	; 0x5f76 <free+0x5c>
    6016:	f0 93 cb 05 	sts	0x05CB, r31	; 0x8005cb <__flp+0x1>
    601a:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <__flp>
    601e:	9e cf       	rjmp	.-196    	; 0x5f5c <free+0x42>
    6020:	fd 01       	movw	r30, r26
    6022:	dc 01       	movw	r26, r24
    6024:	c0 cf       	rjmp	.-128    	; 0x5fa6 <free+0x8c>
    6026:	13 82       	std	Z+3, r1	; 0x03
    6028:	12 82       	std	Z+2, r1	; 0x02
    602a:	d7 cf       	rjmp	.-82     	; 0x5fda <free+0xc0>

0000602c <realloc>:
realloc():
    602c:	b0 e0       	ldi	r27, 0x00	; 0
    602e:	a0 e0       	ldi	r26, 0x00	; 0
    6030:	ec e1       	ldi	r30, 0x1C	; 28
    6032:	f0 e3       	ldi	r31, 0x30	; 48
    6034:	0c 94 3a 2e 	jmp	0x5c74	; 0x5c74 <__prologue_saves__+0x4>
    6038:	8c 01       	movw	r16, r24
    603a:	00 97       	sbiw	r24, 0x00	; 0
    603c:	51 f4       	brne	.+20     	; 0x6052 <realloc+0x26>
    603e:	cb 01       	movw	r24, r22
    6040:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <malloc>
    6044:	8c 01       	movw	r16, r24
    6046:	c8 01       	movw	r24, r16
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	e0 e1       	ldi	r30, 0x10	; 16
    604e:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <__epilogue_restores__+0x4>
    6052:	fc 01       	movw	r30, r24
    6054:	e6 0f       	add	r30, r22
    6056:	f7 1f       	adc	r31, r23
    6058:	9c 01       	movw	r18, r24
    605a:	22 50       	subi	r18, 0x02	; 2
    605c:	31 09       	sbc	r19, r1
    605e:	e2 17       	cp	r30, r18
    6060:	f3 07       	cpc	r31, r19
    6062:	08 f4       	brcc	.+2      	; 0x6066 <realloc+0x3a>
    6064:	9d c0       	rjmp	.+314    	; 0x61a0 <realloc+0x174>
    6066:	d9 01       	movw	r26, r18
    6068:	cd 91       	ld	r28, X+
    606a:	dc 91       	ld	r29, X
    606c:	11 97       	sbiw	r26, 0x01	; 1
    606e:	c6 17       	cp	r28, r22
    6070:	d7 07       	cpc	r29, r23
    6072:	98 f0       	brcs	.+38     	; 0x609a <realloc+0x6e>
    6074:	c5 30       	cpi	r28, 0x05	; 5
    6076:	d1 05       	cpc	r29, r1
    6078:	30 f3       	brcs	.-52     	; 0x6046 <realloc+0x1a>
    607a:	ce 01       	movw	r24, r28
    607c:	04 97       	sbiw	r24, 0x04	; 4
    607e:	86 17       	cp	r24, r22
    6080:	97 07       	cpc	r25, r23
    6082:	08 f3       	brcs	.-62     	; 0x6046 <realloc+0x1a>
    6084:	c6 1b       	sub	r28, r22
    6086:	d7 0b       	sbc	r29, r23
    6088:	22 97       	sbiw	r28, 0x02	; 2
    608a:	c1 93       	st	Z+, r28
    608c:	d1 93       	st	Z+, r29
    608e:	6d 93       	st	X+, r22
    6090:	7c 93       	st	X, r23
    6092:	cf 01       	movw	r24, r30
    6094:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
    6098:	d6 cf       	rjmp	.-84     	; 0x6046 <realloc+0x1a>
    609a:	5b 01       	movw	r10, r22
    609c:	ac 1a       	sub	r10, r28
    609e:	bd 0a       	sbc	r11, r29
    60a0:	4c 01       	movw	r8, r24
    60a2:	8c 0e       	add	r8, r28
    60a4:	9d 1e       	adc	r9, r29
    60a6:	a0 91 ca 05 	lds	r26, 0x05CA	; 0x8005ca <__flp>
    60aa:	b0 91 cb 05 	lds	r27, 0x05CB	; 0x8005cb <__flp+0x1>
    60ae:	51 2c       	mov	r5, r1
    60b0:	41 2c       	mov	r4, r1
    60b2:	f1 2c       	mov	r15, r1
    60b4:	e1 2c       	mov	r14, r1
    60b6:	10 97       	sbiw	r26, 0x00	; 0
    60b8:	31 f5       	brne	.+76     	; 0x6106 <realloc+0xda>
    60ba:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <__brkval>
    60be:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <__brkval+0x1>
    60c2:	88 15       	cp	r24, r8
    60c4:	99 05       	cpc	r25, r9
    60c6:	09 f0       	breq	.+2      	; 0x60ca <realloc+0x9e>
    60c8:	5c c0       	rjmp	.+184    	; 0x6182 <realloc+0x156>
    60ca:	46 16       	cp	r4, r22
    60cc:	57 06       	cpc	r5, r23
    60ce:	08 f0       	brcs	.+2      	; 0x60d2 <realloc+0xa6>
    60d0:	58 c0       	rjmp	.+176    	; 0x6182 <realloc+0x156>
    60d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__malloc_heap_end>
    60d6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__malloc_heap_end+0x1>
    60da:	00 97       	sbiw	r24, 0x00	; 0
    60dc:	41 f4       	brne	.+16     	; 0x60ee <realloc+0xc2>
    60de:	8d b7       	in	r24, 0x3d	; 61
    60e0:	9e b7       	in	r25, 0x3e	; 62
    60e2:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <__malloc_margin>
    60e6:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <__malloc_margin+0x1>
    60ea:	84 1b       	sub	r24, r20
    60ec:	95 0b       	sbc	r25, r21
    60ee:	e8 17       	cp	r30, r24
    60f0:	f9 07       	cpc	r31, r25
    60f2:	08 f0       	brcs	.+2      	; 0x60f6 <realloc+0xca>
    60f4:	55 c0       	rjmp	.+170    	; 0x61a0 <realloc+0x174>
    60f6:	f0 93 c9 05 	sts	0x05C9, r31	; 0x8005c9 <__brkval+0x1>
    60fa:	e0 93 c8 05 	sts	0x05C8, r30	; 0x8005c8 <__brkval>
    60fe:	f9 01       	movw	r30, r18
    6100:	71 83       	std	Z+1, r23	; 0x01
    6102:	60 83       	st	Z, r22
    6104:	a0 cf       	rjmp	.-192    	; 0x6046 <realloc+0x1a>
    6106:	8d 91       	ld	r24, X+
    6108:	9c 91       	ld	r25, X
    610a:	11 97       	sbiw	r26, 0x01	; 1
    610c:	12 96       	adiw	r26, 0x02	; 2
    610e:	6c 90       	ld	r6, X
    6110:	12 97       	sbiw	r26, 0x02	; 2
    6112:	13 96       	adiw	r26, 0x03	; 3
    6114:	7c 90       	ld	r7, X
    6116:	13 97       	sbiw	r26, 0x03	; 3
    6118:	a8 15       	cp	r26, r8
    611a:	b9 05       	cpc	r27, r9
    611c:	59 f5       	brne	.+86     	; 0x6174 <realloc+0x148>
    611e:	6c 01       	movw	r12, r24
    6120:	42 e0       	ldi	r20, 0x02	; 2
    6122:	c4 0e       	add	r12, r20
    6124:	d1 1c       	adc	r13, r1
    6126:	ca 14       	cp	r12, r10
    6128:	db 04       	cpc	r13, r11
    612a:	20 f1       	brcs	.+72     	; 0x6174 <realloc+0x148>
    612c:	ac 01       	movw	r20, r24
    612e:	4a 19       	sub	r20, r10
    6130:	5b 09       	sbc	r21, r11
    6132:	da 01       	movw	r26, r20
    6134:	12 96       	adiw	r26, 0x02	; 2
    6136:	15 97       	sbiw	r26, 0x05	; 5
    6138:	80 f0       	brcs	.+32     	; 0x615a <realloc+0x12e>
    613a:	62 82       	std	Z+2, r6	; 0x02
    613c:	73 82       	std	Z+3, r7	; 0x03
    613e:	51 83       	std	Z+1, r21	; 0x01
    6140:	40 83       	st	Z, r20
    6142:	d9 01       	movw	r26, r18
    6144:	6d 93       	st	X+, r22
    6146:	7c 93       	st	X, r23
    6148:	e1 14       	cp	r14, r1
    614a:	f1 04       	cpc	r15, r1
    614c:	71 f0       	breq	.+28     	; 0x616a <realloc+0x13e>
    614e:	d7 01       	movw	r26, r14
    6150:	13 96       	adiw	r26, 0x03	; 3
    6152:	fc 93       	st	X, r31
    6154:	ee 93       	st	-X, r30
    6156:	12 97       	sbiw	r26, 0x02	; 2
    6158:	76 cf       	rjmp	.-276    	; 0x6046 <realloc+0x1a>
    615a:	22 96       	adiw	r28, 0x02	; 2
    615c:	8c 0f       	add	r24, r28
    615e:	9d 1f       	adc	r25, r29
    6160:	f9 01       	movw	r30, r18
    6162:	91 83       	std	Z+1, r25	; 0x01
    6164:	80 83       	st	Z, r24
    6166:	f3 01       	movw	r30, r6
    6168:	ef cf       	rjmp	.-34     	; 0x6148 <realloc+0x11c>
    616a:	f0 93 cb 05 	sts	0x05CB, r31	; 0x8005cb <__flp+0x1>
    616e:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <__flp>
    6172:	69 cf       	rjmp	.-302    	; 0x6046 <realloc+0x1a>
    6174:	48 16       	cp	r4, r24
    6176:	59 06       	cpc	r5, r25
    6178:	08 f4       	brcc	.+2      	; 0x617c <realloc+0x150>
    617a:	2c 01       	movw	r4, r24
    617c:	7d 01       	movw	r14, r26
    617e:	d3 01       	movw	r26, r6
    6180:	9a cf       	rjmp	.-204    	; 0x60b6 <realloc+0x8a>
    6182:	cb 01       	movw	r24, r22
    6184:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <malloc>
    6188:	7c 01       	movw	r14, r24
    618a:	00 97       	sbiw	r24, 0x00	; 0
    618c:	49 f0       	breq	.+18     	; 0x61a0 <realloc+0x174>
    618e:	ae 01       	movw	r20, r28
    6190:	b8 01       	movw	r22, r16
    6192:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <memcpy>
    6196:	c8 01       	movw	r24, r16
    6198:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <free>
    619c:	87 01       	movw	r16, r14
    619e:	53 cf       	rjmp	.-346    	; 0x6046 <realloc+0x1a>
    61a0:	10 e0       	ldi	r17, 0x00	; 0
    61a2:	00 e0       	ldi	r16, 0x00	; 0
    61a4:	50 cf       	rjmp	.-352    	; 0x6046 <realloc+0x1a>

000061a6 <memcpy>:
memcpy():
    61a6:	fb 01       	movw	r30, r22
    61a8:	dc 01       	movw	r26, r24
    61aa:	02 c0       	rjmp	.+4      	; 0x61b0 <memcpy+0xa>
    61ac:	01 90       	ld	r0, Z+
    61ae:	0d 92       	st	X+, r0
    61b0:	41 50       	subi	r20, 0x01	; 1
    61b2:	50 40       	sbci	r21, 0x00	; 0
    61b4:	d8 f7       	brcc	.-10     	; 0x61ac <memcpy+0x6>
    61b6:	08 95       	ret

000061b8 <strcat>:
strcat():
    61b8:	fb 01       	movw	r30, r22
    61ba:	dc 01       	movw	r26, r24
    61bc:	0d 90       	ld	r0, X+
    61be:	00 20       	and	r0, r0
    61c0:	e9 f7       	brne	.-6      	; 0x61bc <strcat+0x4>
    61c2:	11 97       	sbiw	r26, 0x01	; 1
    61c4:	01 90       	ld	r0, Z+
    61c6:	0d 92       	st	X+, r0
    61c8:	00 20       	and	r0, r0
    61ca:	e1 f7       	brne	.-8      	; 0x61c4 <strcat+0xc>
    61cc:	08 95       	ret

000061ce <strcmp>:
strcmp():
    61ce:	fb 01       	movw	r30, r22
    61d0:	dc 01       	movw	r26, r24
    61d2:	8d 91       	ld	r24, X+
    61d4:	01 90       	ld	r0, Z+
    61d6:	80 19       	sub	r24, r0
    61d8:	01 10       	cpse	r0, r1
    61da:	d9 f3       	breq	.-10     	; 0x61d2 <strcmp+0x4>
    61dc:	99 0b       	sbc	r25, r25
    61de:	08 95       	ret

000061e0 <strcpy>:
strcpy():
    61e0:	fb 01       	movw	r30, r22
    61e2:	dc 01       	movw	r26, r24
    61e4:	01 90       	ld	r0, Z+
    61e6:	0d 92       	st	X+, r0
    61e8:	00 20       	and	r0, r0
    61ea:	e1 f7       	brne	.-8      	; 0x61e4 <strcpy+0x4>
    61ec:	08 95       	ret

000061ee <strncpy>:
strncpy():
    61ee:	fb 01       	movw	r30, r22
    61f0:	dc 01       	movw	r26, r24
    61f2:	41 50       	subi	r20, 0x01	; 1
    61f4:	50 40       	sbci	r21, 0x00	; 0
    61f6:	48 f0       	brcs	.+18     	; 0x620a <strncpy+0x1c>
    61f8:	01 90       	ld	r0, Z+
    61fa:	0d 92       	st	X+, r0
    61fc:	00 20       	and	r0, r0
    61fe:	c9 f7       	brne	.-14     	; 0x61f2 <strncpy+0x4>
    6200:	01 c0       	rjmp	.+2      	; 0x6204 <strncpy+0x16>
    6202:	1d 92       	st	X+, r1
    6204:	41 50       	subi	r20, 0x01	; 1
    6206:	50 40       	sbci	r21, 0x00	; 0
    6208:	e0 f7       	brcc	.-8      	; 0x6202 <strncpy+0x14>
    620a:	08 95       	ret

0000620c <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    620c:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    620e:	c0 e1       	ldi	r28, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    6210:	d2 e0       	ldi	r29, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    6212:	04 c0       	rjmp	.+8      	; 0x621c <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    6214:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    6216:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    621a:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    621c:	c1 31       	cpi	r28, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    621e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    6220:	c9 f7       	brne	.-14     	; 0x6214 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    6222:	f8 94       	cli

00006224 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    6224:	ff cf       	rjmp	.-2      	; 0x6224 <__stop_program>
